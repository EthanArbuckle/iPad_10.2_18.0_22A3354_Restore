uint64_t type metadata accessor for BundleUtilities.BundleWitness()
{
  return objc_opt_self();
}

id one-time initialization function for bundle()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for BundleUtilities.BundleWitness();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  static BundleUtilities.bundle = (uint64_t)result;
  return result;
}

id outlined bridged method (mbgbnn) of @objc NSBundle.url(forResource:withExtension:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;

  v8 = (void *)MEMORY[0x22075A8AC]();
  v9 = (void *)MEMORY[0x22075A8AC](a3, a4);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(a5, sel_URLForResource_withExtension_, v8, v9);

  return v10;
}

uint64_t OUTLINED_FUNCTION_0_68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

Swift::Void __swiftcall MLProgram.addClassifierSpecification(classLabels:probabilityTensorName:outputProbabilityName:outputLabelName:)(Swift::OpaquePointer classLabels, Swift::String probabilityTensorName, Swift::String outputProbabilityName, Swift::String outputLabelName)
{
  uint64_t v4;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD, _QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  int EnumTagSinglePayload;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  void (*v75)(_QWORD, char *, uint64_t);
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void (*v96)(_QWORD, _QWORD);
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  void *v105;
  void (*v106)(uint64_t *, _QWORD, uint64_t);
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  void *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  char *v119;
  void *v120;
  uint64_t v121;
  char *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  Swift::String v143;
  Swift::String v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(char *, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *object;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  Swift::String v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(_QWORD, _QWORD);
  uint64_t *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char v192[8];
  uint64_t v193;
  unint64_t v194;
  char v195[8];
  uint64_t v196;
  uint64_t v197;

  object = outputLabelName._object;
  countAndFlagsBits = outputLabelName._countAndFlagsBits;
  v162 = outputProbabilityName._object;
  v169 = outputProbabilityName._countAndFlagsBits;
  v176 = probabilityTensorName;
  *(Swift::OpaquePointer *)&v178 = classLabels;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLProgram.Block?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v7);
  v8 = type metadata accessor for MLProgram.Argument.Binding();
  OUTLINED_FUNCTION_4_26(v8, (uint64_t)&v187);
  v156 = v9;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v11);
  v12 = type metadata accessor for MLProgram.Operation();
  OUTLINED_FUNCTION_4_26(v12, (uint64_t)v192);
  v164 = v13;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v15);
  v16 = type metadata accessor for MLProgram.Value.Tensor();
  v180 = *(_QWORD *)(v16 - 8);
  v181 = v16;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (uint64_t *)((char *)&v145 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for MLProgram.ShapeDimension();
  OUTLINED_FUNCTION_4_26(v20, (uint64_t)&v196);
  v172 = v21;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v23);
  v188 = type metadata accessor for MLProgram.DataType();
  v184 = *(_QWORD *)(v188 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_64();
  v187 = v25;
  v26 = type metadata accessor for MLProgram.ValueType();
  OUTLINED_FUNCTION_4_26(v26, (uint64_t)&v197);
  v155 = v27;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_208();
  v161 = v29;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v30);
  v159 = (char *)&v145 - v31;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v32);
  v160 = (char *)&v145 - v33;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_28_3((uint64_t)&v145 - v35);
  v186 = type metadata accessor for MLProgram.Value();
  v189 = *(_QWORD *)(v186 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_208();
  v182 = v37;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_28_3((uint64_t)&v145 - v39);
  v40 = type metadata accessor for MLProgram.Block();
  OUTLINED_FUNCTION_4_26(v40, (uint64_t)v195);
  v166 = v41;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_208();
  v185 = (char *)v43;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v44);
  v175 = (char *)&v145 - v45;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: MLProgram.Block)?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_208();
  v183 = v47;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v48);
  v50 = (uint64_t *)((char *)&v145 - v49);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLProgram.Function?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v51);
  OUTLINED_FUNCTION_208();
  v149 = v52;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v53);
  v55 = (char *)&v145 - v54;
  v56 = type metadata accessor for MLProgram.Function();
  v57 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v59 = (char *)&v145 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = v4;
  MLProgram.mainFunction.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v55, 1, v56) != 1)
  {
    v60 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
    v151 = v56;
    v60(v59, v55, v56);
    v61 = *(_QWORD *)(OUTLINED_FUNCTION_12_45() + 16);
    swift_bridgeObjectRelease();
    if (v61 == 1)
    {
      v62 = OUTLINED_FUNCTION_12_45();
      specialized Collection.first.getter(v62, v50);
      OUTLINED_FUNCTION_30();
      v63 = v59;
      v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: MLProgram.Block));
      EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v50, 1, v64);
      v66 = v166;
      if (EnumTagSinglePayload == 1)
      {
        outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v50, &demangling cache variable for type metadata for (key: String, value: MLProgram.Block)?);
      }
      else
      {
        v150 = v57;
        v67 = *v50;
        v68 = v50[1];
        v69 = (char *)v50 + *(int *)(v64 + 48);
        v70 = *(void (**)(char *, uint64_t))(v166 + 8);
        v71 = v168;
        v70(v69, v168);
        v152 = v63;
        v72 = MLProgram.Function.blockSpecializations.getter();
        v73 = v183;
        specialized Collection.first.getter(v72, v183);
        swift_bridgeObjectRelease();
        if (__swift_getEnumTagSinglePayload((uint64_t)v73, 1, v64) == 1)
        {
          outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v73, &demangling cache variable for type metadata for (key: String, value: MLProgram.Block)?);
        }
        else
        {
          v148 = v70;
          swift_bridgeObjectRelease();
          v74 = (char *)v73 + *(int *)(v64 + 48);
          v75 = *(void (**)(_QWORD, char *, uint64_t))(v66 + 32);
          v76 = v185;
          v75(v185, v74, v71);
          v75(v175, v76, v71);
          v190 = v67;
          v191 = v68;
          v147 = v68;
          v193 = 0x4C4D65726F43;
          v194 = 0xE600000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          lazy protocol witness table accessor for type String and conformance String();
          if ((BidirectionalCollection<>.starts<A>(with:)() & 1) != 0)
          {
            v146 = v67;
            v77 = v184;
            v78 = *(void (**)(_QWORD))(v184 + 104);
            v80 = v187;
            v79 = v188;
            LODWORD(v183) = *MEMORY[0x24BE630B0];
            v185 = (char *)v78;
            v78(v187);
            v81 = MEMORY[0x24BEE4AF8];
            static MLProgram.ValueType.tensor(dataType:shape:)();
            v184 = *(_QWORD *)(v77 + 8);
            ((void (*)(uint64_t, uint64_t))v184)(v80, v79);
            v82 = v178;
            v83 = *(_QWORD *)(v178 + 16);
            *v171 = v83;
            (*(void (**)(void))(v172 + 104))();
            if (v83)
            {
              v190 = v81;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              LODWORD(v179) = *MEMORY[0x24BE62FE0];
              v84 = (uint64_t *)(v82 + 40);
              v178 = xmmword_21AFE7DA0;
              v85 = countAndFlagsBits;
              v86 = v187;
              v87 = v180;
              do
              {
                v89 = *(v84 - 1);
                v88 = *v84;
                v90 = v188;
                ((void (*)(uint64_t, _QWORD, uint64_t))v185)(v86, v183, v188);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
                v91 = swift_allocObject();
                *(_OWORD *)(v91 + 16) = v178;
                *(_QWORD *)(v91 + 32) = v89;
                *(_QWORD *)(v91 + 40) = v88;
                *v19 = v91;
                v92 = v181;
                (*(void (**)(uint64_t *, _QWORD, uint64_t))(v87 + 104))(v19, v179, v181);
                swift_bridgeObjectRetain_n();
                static MLProgram.Value.immediateTensor(dataType:shape:contents:)();
                (*(void (**)(uint64_t *, uint64_t))(v87 + 8))(v19, v92);
                ((void (*)(uint64_t, uint64_t))v184)(v86, v90);
                OUTLINED_FUNCTION_30();
                v93 = v190;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  v93 = v190;
                }
                v94 = v189;
                v95 = *(_QWORD *)(v93 + 16);
                v96 = v182;
                if (v95 >= *(_QWORD *)(v93 + 24) >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  v94 = v189;
                  v93 = v190;
                }
                v84 += 2;
                *(_QWORD *)(v93 + 16) = v95 + 1;
                (*(void (**)(unint64_t, void (*)(_QWORD, _QWORD), uint64_t))(v94 + 32))(v93+ ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))+ *(_QWORD *)(v94 + 72) * v95, v96, v186);
                v190 = v93;
                --v83;
              }
              while (v83);
              countAndFlagsBits = v85;
            }
            else
            {
              v93 = v81;
            }
            v190 = v93;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgram.Value]);
            lazy protocol witness table accessor for type [MLProgram.Value] and conformance [A]();
            v97 = v170;
            v98 = v171;
            static MLProgram.Value.immediateList<A>(type:length:contents:)();
            OUTLINED_FUNCTION_30();
            (*(void (**)(_QWORD *, uint64_t))(v172 + 8))(v98, v173);
            v182 = *(void (**)(_QWORD, _QWORD))(v155 + 8);
            v182(v97, v174);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLProgram.Argument)>);
            v99 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MLProgram.Argument))
                            - 8);
            v100 = *(_QWORD *)(v99 + 72);
            v101 = (*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
            v102 = swift_allocObject();
            v179 = xmmword_21AFE7F70;
            *(_OWORD *)(v102 + 16) = xmmword_21AFE7F70;
            v103 = v102 + v101;
            strcpy((char *)(v102 + v101), "probabilities");
            *(_WORD *)(v102 + v101 + 14) = -4864;
            v104 = v157;
            v105 = v176._object;
            *v157 = v176._countAndFlagsBits;
            v104[1] = (uint64_t)v105;
            v106 = *(void (**)(uint64_t *, _QWORD, uint64_t))(v156 + 104);
            v107 = v158;
            v106(v104, *MEMORY[0x24BE63058], v158);
            swift_bridgeObjectRetain();
            MLProgram.Argument.init(binding:)();
            v108 = (_QWORD *)(v103 + v100);
            *v108 = 0x73657373616C63;
            v108[1] = 0xE700000000000000;
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(v189 + 16))(v104, v177, v186);
            v106(v104, *MEMORY[0x24BE63060], v107);
            MLProgram.Argument.init(binding:)();
            type metadata accessor for MLProgram.Argument();
            v181 = Dictionary.init(dictionaryLiteral:)();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLProgram.NamedValueType>);
            type metadata accessor for MLProgram.NamedValueType();
            v180 = swift_allocObject();
            *(_OWORD *)(v180 + 16) = v179;
            v109 = v187;
            v110 = v188;
            v111 = v183;
            v112 = (void (*)(uint64_t, uint64_t, uint64_t))v185;
            ((void (*)(uint64_t, _QWORD, uint64_t))v185)(v187, v183, v188);
            swift_bridgeObjectRetain();
            static MLProgram.ValueType.tensor(dataType:shape:)();
            ((void (*)(uint64_t, uint64_t))v184)(v109, v110);
            MLProgram.NamedValueType.init(name:type:)();
            v112(v109, v111, v110);
            v113 = v162;
            swift_bridgeObjectRetain();
            v114 = v159;
            static MLProgram.ValueType.tensor(dataType:shape:)();
            OUTLINED_FUNCTION_9_48();
            v112(v109, *MEMORY[0x24BE630C0], v110);
            v115 = v161;
            static MLProgram.ValueType.tensor(dataType:shape:)();
            OUTLINED_FUNCTION_9_48();
            static MLProgram.ValueType.dictionary(keyType:valueType:)();
            v116 = v115;
            v117 = v174;
            v118 = (void (*)(char *, uint64_t))v182;
            v182(v116, v174);
            v119 = v114;
            v120 = v113;
            v118(v119, v117);
            MLProgram.NamedValueType.init(name:type:)();
            v121 = v163;
            MLProgram.Operation.init(name:inputs:outputs:)();
            v122 = v175;
            MLProgram.Block.operations.modify();
            v124 = v123;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v125 = *(_QWORD *)(*v124 + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v125);
            v126 = *v124;
            *(_QWORD *)(v126 + 16) = v125 + 1;
            v127 = v164;
            v128 = v165;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v164 + 16))(v126+ ((*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80))+ *(_QWORD *)(v164 + 72) * v125, v121, v165);
            OUTLINED_FUNCTION_4_55();
            v129 = v176._object;
            swift_bridgeObjectRetain();
            v55 = (char *)OUTLINED_FUNCTION_6_55();
            v131 = v130;
            v132 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v130, v176._countAndFlagsBits, (uint64_t)v129);
            v133 = *(_QWORD *)(*v131 + 16);
            if (v133 >= v132)
            {
              specialized Array.replaceSubrange<A>(_:with:)(v132, v133);
              OUTLINED_FUNCTION_4_55();
              v134 = object;
              swift_bridgeObjectRetain();
              OUTLINED_FUNCTION_6_55();
              OUTLINED_FUNCTION_11_47();
              OUTLINED_FUNCTION_8_53();
              OUTLINED_FUNCTION_14_45();
              *(_QWORD *)(v135 + 32) = countAndFlagsBits;
              *(_QWORD *)(v135 + 40) = v134;
              OUTLINED_FUNCTION_4_55();
              swift_bridgeObjectRetain();
              OUTLINED_FUNCTION_6_55();
              OUTLINED_FUNCTION_11_47();
              OUTLINED_FUNCTION_8_53();
              OUTLINED_FUNCTION_14_45();
              *(_QWORD *)(v136 + 32) = v169;
              *(_QWORD *)(v136 + 40) = v120;
              OUTLINED_FUNCTION_4_55();
              v137 = v153;
              v138 = v168;
              (*(void (**)(uint64_t, char *, uint64_t))(v166 + 16))(v153, v122, v168);
              __swift_storeEnumTagSinglePayload(v137, 0, 1, v138);
              v139 = v152;
              MLProgram.Function.blockSpecializations.modify();
              specialized Dictionary.subscript.setter(v137, v146, v147);
              OUTLINED_FUNCTION_4_55();
              v140 = v150;
              v141 = v149;
              v142 = v151;
              (*(void (**)(uint64_t, char *, uint64_t))(v150 + 16))(v149, v139, v151);
              __swift_storeEnumTagSinglePayload(v141, 0, 1, v142);
              MLProgram.mainFunction.setter();
              (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v121, v128);
              (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v177, v186);
              OUTLINED_FUNCTION_13_50();
              (*(void (**)(char *, uint64_t))(v140 + 8))(v139, v142);
              return;
            }
            __break(1u);
            goto LABEL_18;
          }
          OUTLINED_FUNCTION_13_50();
        }
        swift_bridgeObjectRelease();
      }
    }
    v190 = 0;
    v191 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v143._countAndFlagsBits = 0xD00000000000003BLL;
    v143._object = (void *)0x800000021AFF7D70;
    String.append(_:)(v143);
    OUTLINED_FUNCTION_12_45();
    v144._countAndFlagsBits = Dictionary.Keys.description.getter();
    String.append(_:)(v144);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
LABEL_18:
  outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v55, &demangling cache variable for type metadata for MLProgram.Function?);
LABEL_24:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type [MLProgram.Value] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [MLProgram.Value] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MLProgram.Value] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MLProgram.Value]);
    result = MEMORY[0x22075B938](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [MLProgram.Value] and conformance [A]);
  }
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 16);
  if (!v5)
  {
    v8 = 0;
    goto LABEL_28;
  }
  v7 = 0;
  v8 = 0;
  while (1)
  {
    result = *(_QWORD *)(v4 + v7 + 32);
    if (result == a2 && *(_QWORD *)(v4 + v7 + 40) == a3)
      break;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      break;
    ++v8;
    v7 += 16;
    if (v5 == v8)
    {
      v8 = *(_QWORD *)(v4 + 16);
      goto LABEL_28;
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
    goto LABEL_33;
  v12 = *(_QWORD *)(v4 + 16);
  if (v11 == v12)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    return v8;
  }
  while (v11 < v12)
  {
    v13 = v4 + v7;
    result = *(_QWORD *)(v4 + v7 + 48);
    if (result != a2 || *(_QWORD *)(v4 + v7 + 56) != a3)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        if (v11 != v8)
        {
          if (v8 >= v12)
            goto LABEL_31;
          v15 = (uint64_t *)(v4 + 32 + 16 * v8);
          v16 = v15[1];
          v23 = *v15;
          v17 = *(_QWORD *)(v13 + 48);
          v18 = *(_QWORD *)(v13 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew()();
            v4 = v22;
          }
          v19 = v4 + 16 * v8;
          *(_QWORD *)(v19 + 32) = v17;
          *(_QWORD *)(v19 + 40) = v18;
          result = swift_bridgeObjectRelease();
          if (v11 >= *(_QWORD *)(v4 + 16))
            goto LABEL_32;
          v20 = v4 + v7;
          *(_QWORD *)(v20 + 48) = v23;
          *(_QWORD *)(v20 + 56) = v16;
          result = swift_bridgeObjectRelease();
          *a1 = v4;
        }
        if (__OFADD__(v8++, 1))
          goto LABEL_30;
      }
    }
    ++v11;
    v12 = *(_QWORD *)(v4 + 16);
    v7 += 16;
    if (v11 == v12)
      goto LABEL_28;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_4_55()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 136, 0);
}

uint64_t OUTLINED_FUNCTION_6_55()
{
  return MLProgram.Block.outputs.modify();
}

uint64_t OUTLINED_FUNCTION_8_53()
{
  uint64_t v0;

  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(*(_QWORD *)v0 + 16));
}

uint64_t OUTLINED_FUNCTION_9_48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void OUTLINED_FUNCTION_11_47()
{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_12_45()
{
  return MLProgram.Function.blockSpecializations.getter();
}

uint64_t OUTLINED_FUNCTION_13_50()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 504))();
}

void OUTLINED_FUNCTION_14_45()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v0 + 16) = v1 + 1;
}

void **assignWithCopy for MLBoostedTreeRegressor.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  char v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = *a2;
      v8 = *((_BYTE *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((_BYTE *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLBoostedTreeRegressor.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLBoostedTreeRegressor.ModelParameters.ValidationData)
    return swift_getSingletonMetadata();
  return result;
}

void *assignWithTake for MLBoostedTreeRegressor.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLBoostedTreeRegressor.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MLBoostedTreeRegressor.ModelParameters.ValidationData.table.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8]();
  type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v0, v2 - v1);
  v3 = (char *)&loc_21AF6CEF8 + dword_21AF6CFFC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21AF6CF08()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_BYTE *)(v0 + 8) = v2;
}

void MLBoostedTreeRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v10 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v1 = type metadata accessor for DataFrame.Slice();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v0, v8 - v7);
  v9 = (char *)sub_21AF6D178 + 4 * byte_21AFEF5C0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AF6D178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v6 = *(_BYTE *)(v4 + 16);
  v7 = *(_BYTE *)(v4 + 17);
  *(_OWORD *)(v5 - 112) = *(_OWORD *)v4;
  *(_BYTE *)(v5 - 96) = v6;
  *(_BYTE *)(v5 - 95) = v7;
  DataFrame.randomSplit(strategy:)(v0, v3, v5 - 112);
  v9 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 152);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v10(v1, v3, v8);
  DataFrame.init(_:)();
  outlined init with copy of DataFrame.Slice?(v0, v2);
  if (__swift_getEnumTagSinglePayload(v2, 1, v8) == 1)
  {
    __swift_storeEnumTagSinglePayload(*(_QWORD *)(v5 - 144), 1, 1, *(_QWORD *)(v5 - 136));
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v2, v8);
    v10(*(_QWORD *)(v5 - 168), v1, v8);
    v12 = *(_QWORD *)(v5 - 144);
    DataFrame.init(_:)();
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v11(v1, v8);
    __swift_storeEnumTagSinglePayload(v12, 0, 1, *(_QWORD *)(v5 - 136));
  }
  v11(v3, v8);
  return outlined destroy of DataFrame.Slice?(v0);
}

char *initializeBufferWithCopyOfBuffer for MLTextClassifier.ModelParameters.ValidationData(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v12[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v7 = *a2;
        v8 = *((_BYTE *)a2 + 8);
        outlined copy of Result<_DataTable, Error>(*a2, v8);
        *(_QWORD *)a1 = v7;
        a1[8] = v8;
        v9 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v9;
        v10 = a2[4];
        v11 = a2[5];
        *((_QWORD *)a1 + 4) = v10;
        *((_QWORD *)a1 + 5) = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 2u:
        v13 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
        v15 = *(int *)(v14 + 48);
        v16 = &a1[v15];
        v17 = (uint64_t *)((char *)a2 + v15);
        v19 = *v17;
        v18 = v17[1];
        *(_QWORD *)v16 = v19;
        *((_QWORD *)v16 + 1) = v18;
        v20 = *(int *)(v14 + 64);
        v21 = &a1[v20];
        v22 = (char **)((char *)a2 + v20);
        v23 = v22[1];
        *(_QWORD *)v21 = *v22;
        *((_QWORD *)v21 + 1) = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 3u:
        v24 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
        goto LABEL_9;
      case 4u:
        *(_QWORD *)a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for MLTextClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2:
      v3 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3:
      v4 = type metadata accessor for URL();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    case 4:
LABEL_5:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

char *initializeWithCopy for MLTextClassifier.ModelParameters.ValidationData(char *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v6 = *(id *)a2;
      v7 = *(_BYTE *)(a2 + 8);
      outlined copy of Result<_DataTable, Error>(*(id *)a2, v7);
      *(_QWORD *)a1 = v6;
      a1[8] = v7;
      v8 = *(_QWORD *)(a2 + 24);
      *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
      *((_QWORD *)a1 + 3) = v8;
      v9 = *(_QWORD *)(a2 + 32);
      v10 = *(_QWORD *)(a2 + 40);
      *((_QWORD *)a1 + 4) = v9;
      *((_QWORD *)a1 + 5) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 2u:
      v11 = type metadata accessor for DataFrame();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
      v13 = *(int *)(v12 + 48);
      v14 = &a1[v13];
      v15 = (uint64_t *)(a2 + v13);
      v17 = *v15;
      v16 = v15[1];
      *(_QWORD *)v14 = v17;
      *((_QWORD *)v14 + 1) = v16;
      v18 = *(int *)(v12 + 64);
      v19 = &a1[v18];
      v20 = (_QWORD *)(a2 + v18);
      v21 = v20[1];
      *(_QWORD *)v19 = *v20;
      *((_QWORD *)v19 + 1) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3u:
      v22 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a1, a2, v22);
      goto LABEL_7;
    case 4u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain();
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithCopy for MLTextClassifier.ModelParameters.ValidationData(char *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;

  if (a1 != (char *)a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v6 = *(id *)a2;
        v7 = *(_BYTE *)(a2 + 8);
        outlined copy of Result<_DataTable, Error>(*(id *)a2, v7);
        *(_QWORD *)a1 = v6;
        a1[8] = v7;
        *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
        *((_QWORD *)a1 + 3) = *(_QWORD *)(a2 + 24);
        *((_QWORD *)a1 + 4) = *(_QWORD *)(a2 + 32);
        *((_QWORD *)a1 + 5) = *(_QWORD *)(a2 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 2u:
        v8 = type metadata accessor for DataFrame();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
        v10 = *(int *)(v9 + 48);
        v11 = &a1[v10];
        v12 = (_QWORD *)(a2 + v10);
        *(_QWORD *)v11 = *v12;
        *((_QWORD *)v11 + 1) = v12[1];
        v13 = *(int *)(v9 + 64);
        v14 = &a1[v13];
        v15 = (_QWORD *)(a2 + v13);
        *(_QWORD *)v14 = *v15;
        *((_QWORD *)v14 + 1) = v15[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        v16 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
        goto LABEL_8;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain();
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for MLTextClassifier.ModelParameters.ValidationData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLTextClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLTextClassifier.ModelParameters.ValidationData)
    return swift_getSingletonMetadata();
  return result;
}

char *initializeWithTake for MLTextClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v9 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  }
  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
    *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
    *(_OWORD *)&a1[*(int *)(v8 + 64)] = *(_OWORD *)&a2[*(int *)(v8 + 64)];
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLTextClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v9 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 2)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, textColumn: String, labelColumn: String));
      *(_OWORD *)&a1[*(int *)(v8 + 48)] = *(_OWORD *)&a2[*(int *)(v8 + 48)];
      *(_OWORD *)&a1[*(int *)(v8 + 64)] = *(_OWORD *)&a2[*(int *)(v8 + 64)];
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for MLTextClassifier.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  char v3;
  void *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = &unk_21AFEF640;
  v5 = &unk_21AFEF658;
  result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v6 = &v3;
    result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      v7 = *(_QWORD *)(result - 8) + 64;
      v8 = MEMORY[0x24BEE0158] + 64;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void MLTextClassifier.ModelParameters.ValidationData.createValidationData(trainingData:textColumn:labelColumn:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[10];
  uint64_t v20;
  uint64_t v21;

  v19[6] = a4;
  v19[7] = a5;
  v19[4] = a2;
  v19[5] = a3;
  v19[2] = a1;
  v19[9] = a6;
  type metadata accessor for MLTextClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_54_0();
  v20 = type metadata accessor for DataFrame();
  v19[8] = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_50();
  v19[1] = v7 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v19[0] = (char *)v19 - v10;
  v11 = type metadata accessor for DataFrame.Slice();
  v19[3] = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v15);
  type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  outlined init with copy of MLTextClassifier.ModelParameters.ValidationData(v21, (uint64_t)v19 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (char *)sub_21AF6DDF8 + 4 * byte_21AFEF628[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AF6DDF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);

  v8 = *(_BYTE *)(v1 + 16);
  v9 = *(_BYTE *)(v1 + 17);
  *(_OWORD *)(v7 - 112) = *(_OWORD *)v1;
  *(_BYTE *)(v7 - 96) = v8;
  *(_BYTE *)(v7 - 95) = v9;
  v10 = *(_QWORD *)(v7 - 192);
  DataFrame.randomSplit(strategy:)(v0, v4, v7 - 112);
  outlined init with copy of DataFrame.Slice?(v0, v6);
  if (__swift_getEnumTagSinglePayload(v6, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 184) + 8))(v4, v3);
    outlined destroy of DataFrame.Slice?(v0);
    outlined destroy of DataFrame.Slice?(v6);
    v11 = *(_QWORD *)(v7 - 136);
    v12 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 144) + 8))(v10, *(_QWORD *)(v7 - 128));
    v13 = *(_QWORD *)(v7 - 184);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v5, v6, v3);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    v14(v2, v4, v3);
    DataFrame.init(_:)();
    v14(v2, v5, v3);
    v15 = *(_QWORD *)(v7 - 136);
    DataFrame.init(_:)();
    v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v16(v5, v3);
    v16(v4, v3);
    outlined destroy of DataFrame.Slice?(v0);
    v11 = v15;
    v12 = 0;
  }
  return OUTLINED_FUNCTION_7_51(v11, v12);
}

void MLTextClassifier.ModelParameters.ValidationData.table.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  type metadata accessor for MLTextClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v4);
  type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_54_0();
  outlined init with copy of MLTextClassifier.ModelParameters.ValidationData(v0, v1);
  v6 = (char *)&loc_21AF6E280 + *((int *)qword_21AF6E468 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_21AF6E290()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v0 = v2;
  *(_BYTE *)(v0 + 8) = v3;
  return result;
}

uint64_t outlined init with copy of MLTextClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLTextClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLTextClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_5_48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_6_56()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_7_51(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, *(_QWORD *)(v2 - 128));
}

void OUTLINED_FUNCTION_8_54()
{
  static MLTextClassifier.validateDataFrame(_:textColumn:labelColumn:)();
}

void OUTLINED_FUNCTION_9_49(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v1;
  DataFrame.renameColumn(_:to:)(*(Swift::String *)&a1, *(Swift::String *)(v2 - 160));
}

void OUTLINED_FUNCTION_11_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  DataFrame.renameColumn(_:to:)(*(Swift::String *)&a1, *(Swift::String *)(v2 - 176));
}

void Tensor.init(_:device:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  type metadata accessor for ScalarType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_49();
  v11 = v10 - v9;
  type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_49();
  v13 = objc_msgSend(a1, sel_dataType);
  v14 = (uint64_t)v13;
  if (v13 == (id)65552 || v13 == (id)131104 || v13 == (id)65600 || v13 == (id)65568)
  {
    v15 = objc_msgSend(a1, sel_shape);
    type metadata accessor for NSNumber();
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(v16);
    v18 = v17;
    swift_bridgeObjectRelease();
    MEMORY[0x220758C74](v18);
    MLMultiArrayDataType.dataType.getter(v14, v11);
    v19 = outlined init with copy of ComputeDevice?(a2, v7);
    MEMORY[0x24BDAC7A8](v19);
    Tensor.init(unsafeUninitializedShape:scalarType:computeDevice:initializingWith:)();
    outlined destroy of ComputeDevice?(a2);

  }
  else
  {
    OUTLINED_FUNCTION_0_69();
    __break(1u);
  }
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t MLMultiArrayDataType.dataType.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  switch(a1)
  {
    case 65552:
      v3 = (unsigned int *)MEMORY[0x24BE6B8B0];
      goto LABEL_9;
    case 65568:
      v3 = (unsigned int *)MEMORY[0x24BE6B8B8];
      goto LABEL_9;
    case 65600:
      v3 = (unsigned int *)MEMORY[0x24BE6B8C0];
LABEL_9:
      v4 = *v3;
      v5 = type metadata accessor for ScalarType();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
    case 131104:
      v3 = (unsigned int *)MEMORY[0x24BE6B880];
      goto LABEL_9;
  }
  result = OUTLINED_FUNCTION_0_69();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of ComputeDevice?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in Tensor.init(_:device:)(int a1, int a2, id a3, uint64_t a4)
{
  id v5;
  uint64_t result;

  v5 = objc_retainAutorelease(a3);
  objc_msgSend(v5, sel_dataPointer);
  result = (uint64_t)objc_msgSend(v5, sel_count);
  if ((unsigned __int128)(result * (__int128)a4) >> 64 == (result * a4) >> 63)
    return UnsafeMutableRawBufferPointer.copyMemory(from:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in Tensor.init(_:device:)(int a1, int a2)
{
  uint64_t v2;

  return closure #1 in Tensor.init(_:device:)(a1, a2, *(id *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t outlined destroy of ComputeDevice?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_69()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void MLDataTable.init()()
{
  OUTLINED_FUNCTION_148_1();
}

void sub_21AF6EA18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  if (a1)
  {
    OUTLINED_FUNCTION_9_11();
    v3 = OUTLINED_FUNCTION_9_1();
    *(_QWORD *)(v3 + 16) = a1;
    type metadata accessor for _DataTable();
    v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    v4[3] = 0;
    v4[4] = 0;
    v4[2] = v3;
    *(_QWORD *)v1 = v4;
    *(_BYTE *)(v1 + 8) = 0;
    OUTLINED_FUNCTION_125();
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for _DataTable()
{
  return objc_opt_self();
}

void MLDataTable.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v12 = *v6;
  if ((v6[1] & 1) != 0)
  {
    swift_willThrow(a6);
LABEL_5:
    OUTLINED_FUNCTION_103_7();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_74_6();
    OUTLINED_FUNCTION_127_5();
    OUTLINED_FUNCTION_80_12(v15, v16, v17, v18, v19, v20, v21, v22, v44, v45, v47, 0, 0xE000000000000000);
    OUTLINED_FUNCTION_152(39);
    v23 = v49;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v24 = OUTLINED_FUNCTION_49_0();
    *v25 = v48;
    v25[1] = v23;
    OUTLINED_FUNCTION_37_19(v24, (uint64_t)v25);
    v48 = v26;
    LOBYTE(v49) = v27;
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v12 + 16);
  OUTLINED_FUNCTION_3_1();
  v14 = OUTLINED_FUNCTION_83_11((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))_s8CreateML8CMLTableC6column4nameAA9CMLColumnCSS_tKFAGSPys4Int8VGKXEfU_TA_0, v13, a1, a2, (void (*)(_QWORD))type metadata accessor for CMLColumn, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
  if (v12)
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_4_2();
    goto LABEL_5;
  }
  v28 = v14;
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_225();
  v29 = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v29 + 16) = v28;
  v46 = v29;
  LOBYTE(v47) = 0;
  OUTLINED_FUNCTION_16_15();
  MLUntypedColumn.column<A>(type:)(a3, a3, a4);
  OUTLINED_FUNCTION_4_43();
  v30 = v49;
  if (v49 != 255)
  {
    OUTLINED_FUNCTION_99();
    *(_QWORD *)a5 = v48;
    *(_BYTE *)(a5 + 8) = v30 & 1;
    goto LABEL_7;
  }
  _StringGuts.grow(_:)(49);
  v31 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_80_12(v31, v32, v33, v34, v35, v36, v37, v38, v44, v46, v47, 0, 0xE000000000000000);
  OUTLINED_FUNCTION_74_6();
  v40._countAndFlagsBits = v39 + 2;
  v40._object = (void *)0x800000021AFF15F0;
  String.append(_:)(v40);
  v41 = v49;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v42 = OUTLINED_FUNCTION_49_0();
  *(_QWORD *)v43 = v48;
  *(_QWORD *)(v43 + 8) = v41;
  *(_OWORD *)(v43 + 16) = 0u;
  *(_OWORD *)(v43 + 32) = 0u;
  *(_BYTE *)(v43 + 48) = 1;
  OUTLINED_FUNCTION_99();
  v48 = v42;
  LOBYTE(v49) = 1;
LABEL_6:
  MLDataColumn.init(from:)((uint64_t)&v48, a5);
LABEL_7:
  OUTLINED_FUNCTION_24_40();
}

void MLDataTable.init(namedColumns:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  char v6;

  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(a1, (uint64_t)&v5);
  if (!v2)
  {
    v4 = v6;
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = v4;
  }
  OUTLINED_FUNCTION_56_9();
}

void MLDataTable.subscript.getter(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v7 = *v3;
  if ((v3[1] & 1) != 0)
  {
    swift_willThrow();
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 16);
    OUTLINED_FUNCTION_3_1();
    v9 = OUTLINED_FUNCTION_83_11((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))_s8CreateML8CMLTableC6column4nameAA9CMLColumnCSS_tKFAGSPys4Int8VGKXEfU_TA_0, v8, a1, (uint64_t)a2, (void (*)(_QWORD))type metadata accessor for CMLColumn, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    if (!v7)
    {
      v17 = v9;
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_225();
      v15 = OUTLINED_FUNCTION_9_1();
      v16 = 0;
      *(_QWORD *)(v15 + 16) = v17;
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_4_2();
  }
  OUTLINED_FUNCTION_103_7();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_74_6();
  OUTLINED_FUNCTION_127_5();
  v18 = v10;
  v19 = v11;
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  OUTLINED_FUNCTION_152(34);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v13 = OUTLINED_FUNCTION_49_0();
  *v14 = v18;
  v14[1] = v19;
  OUTLINED_FUNCTION_37_19(v13, (uint64_t)v14);
LABEL_7:
  *(_QWORD *)a3 = v15;
  *(_BYTE *)(a3 + 8) = v16;
}

#error "21AF6EDF0: call analysis failed (funcsize=16)"

uint64_t MLDataTable.size.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  void *v12;

  v1 = *(void **)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    v12 = *(void **)v0;
    OUTLINED_FUNCTION_59_22(v1);
    v2 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v3 = _getErrorEmbeddedNSError<A>(_:)();
    if (v3)
    {
      v4 = (void *)v3;
      OUTLINED_FUNCTION_122_3(v1);
    }
    else
    {
      v4 = (void *)OUTLINED_FUNCTION_49_0();
      *v9 = v12;
    }
    OUTLINED_FUNCTION_122_3(v1);
    outlined consume of Result<_RegressorMetrics, Error>(v4, v10, 1);
    return 0;
  }
  OUTLINED_FUNCTION_122();
  v5 = CMLTable.rows()();
  if (!v6)
  {
    v7 = v5;
    CMLTable.columns()();
    if (!v8)
    {
      OUTLINED_FUNCTION_102(v1);
      return v7;
    }
  }
  OUTLINED_FUNCTION_1_51();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void MLDataTable.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v4;
  char v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  v4 = *(void **)a1;
  v5 = *(_BYTE *)(a1 + 8);
  v6 = *(void **)v2;
  v7 = *(_BYTE *)(v2 + 8);
  if ((v7 & 1) != 0)
    OUTLINED_FUNCTION_18_28(v6);
  OUTLINED_FUNCTION_12_3(*(void **)v2);
  _DataTable.columnNames.getter(&v14);
  OUTLINED_FUNCTION_102(v6);
  v8 = v14;
  v9 = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v9 + 16) = v6;
  *(_BYTE *)(v9 + 24) = v7;
  v10 = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 24) = v5;
  v11 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  v11[2] = partial apply for closure #2 in MLDataTable.subscript.getter;
  v11[3] = v10;
  v11[4] = v8;
  v11[5] = partial apply for closure #1 in MLDataTable.subscript.getter;
  v11[6] = v9;
  outlined copy of Result<_DataTable, Error>(v6, v7);
  outlined copy of Result<_DataTable, Error>(v4, v5);
  swift_retain_n();
  OUTLINED_FUNCTION_51_11();
  OUTLINED_FUNCTION_16_15();
  v12 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v8, (void (*)(Swift::String *__return_ptr, Swift::String *))partial apply for specialized closure #1 in LazyMapSequence<>.map<A>(_:), (uint64_t)v11);
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v12, (uint64_t)&v14);
  OUTLINED_FUNCTION_184();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_30_21();
  v13 = v15;
  *(_QWORD *)a2 = v14;
  *(_BYTE *)(a2 + 8) = v13;
  OUTLINED_FUNCTION_52_18();
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(uint64_t *))
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;

  v2 = v1;
  swift_retain();
  v4 = OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_5_1(v4);
  if (v5)
  {
    v6 = 0;
    while (1)
    {
      OUTLINED_FUNCTION_134_2(v6);
      if (v1)
        break;
      v2 = 0;
      v7 = OUTLINED_FUNCTION_26_4();
      v9 = v8;
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_122();
      v10 = OUTLINED_FUNCTION_140();
      OUTLINED_FUNCTION_5_1(v10);
      v12 = v11;
      OUTLINED_FUNCTION_217();
      if (v6 >= v12)
      {
        __break(1u);
        break;
      }
      v22 = v7;
      v23 = v9;
      v13 = a1(&v22);
      OUTLINED_FUNCTION_80();
      if ((v13 & 1) != 0)
      {
        OUTLINED_FUNCTION_217();
        v17 = 1;
        return v17 & 1;
      }
      ++v6;
      OUTLINED_FUNCTION_122();
      v14 = OUTLINED_FUNCTION_140();
      OUTLINED_FUNCTION_5_1(v14);
      v16 = v15;
      OUTLINED_FUNCTION_217();
      if (v6 == v16)
        goto LABEL_7;
    }
    OUTLINED_FUNCTION_131_4();
    swift_unexpectedError();
    __break(1u);

    OUTLINED_FUNCTION_4_2();
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_197();
    v22 = v20;
    v23 = v19;
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_152(46);
    OUTLINED_FUNCTION_34_29();
    result = OUTLINED_FUNCTION_121();
    __break(1u);
  }
  else
  {
LABEL_7:
    OUTLINED_FUNCTION_217();
    v17 = 0;
    return v17 & 1;
  }
  return result;
}

void specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, int a2, char a3, __int128 *a4)
{
  __int128 v7;
  char v8;
  _BYTE v9[24];
  __int128 v10;
  char v11;
  _BYTE v12[24];
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;

  if ((a3 & 1) != 0)
    goto LABEL_13;
  v10 = *a4;
  v11 = *((_BYTE *)a4 + 16);
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)&v10, (uint64_t)v12, &demangling cache variable for type metadata for [MLDataValue : MLDataValue].Index._Variant);
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v12, (uint64_t)&v13, &demangling cache variable for type metadata for [MLDataValue : MLDataValue].Index._Variant);
  if ((v15 & 1) != 0)
    goto LABEL_13;
  if (v14 != a2)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v13 > a1)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v7 = *(__int128 *)((char *)a4 + 24);
  v8 = *((_BYTE *)a4 + 40);
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)&v7, (uint64_t)v9, &demangling cache variable for type metadata for [MLDataValue : MLDataValue].Index._Variant);
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v9, (uint64_t)&v16, &demangling cache variable for type metadata for [MLDataValue : MLDataValue].Index._Variant);
  if ((v18 & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return;
  }
  if (v17 != a2)
    goto LABEL_11;
  if (v16 <= a1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
}

void specialized RandomAccessCollection<>.index(after:)(uint64_t a1)
{
  specialized RandomAccessCollection<>.index(after:)(a1, CMLSequence.size.getter);
}

{
  uint64_t v2;

  v2 = CMLSequence.size.getter();
  if (a1 < 0 || v2 <= a1)
    __break(1u);
  else
    OUTLINED_FUNCTION_22();
}

{
  specialized RandomAccessCollection<>.index(after:)(a1, CMLDictionary.size.getter);
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_retain();
  v2 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v2);
  v4 = v3;
  result = OUTLINED_FUNCTION_4_43();
  if ((a1 & 0x8000000000000000) == 0 && v4 > a1)
    return a1 + 1;
  __break(1u);
  return result;
}

{
  uint64_t result;

  result = MLDataTable.size.getter();
  if ((a1 & 0x8000000000000000) == 0 && result > a1)
    return a1 + 1;
  __break(1u);
  return result;
}

void specialized RandomAccessCollection<>.index(after:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;

  v3 = a2();
  if (a1 < 0 || v3 <= a1)
    __break(1u);
  else
    OUTLINED_FUNCTION_22();
}

void specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;

  OUTLINED_FUNCTION_31_15();
  a17 = v18;
  a18 = v19;
  v21 = v20;
  a10 = MEMORY[0x24BEE4B00];
  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_13_51();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v21, 1, &a10);
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_31();
}

{
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, a2, a3, (uint64_t)&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, Int>, (uint64_t)specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:), a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

{
  specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, a2, a3, (uint64_t)&demangling cache variable for type metadata for _DictionaryStorage<String, Int>, (uint64_t)specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:), a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_31_15();
  a17 = v18;
  a18 = v24;
  if (__OFSUB__(v21, v20))
  {
    __break(1u);
    OUTLINED_FUNCTION_40_26();
    __break(1u);
  }
  else
  {
    v25 = v23;
    v26 = v21;
    v27 = v20;
    if (v21 - v20 >= *(_QWORD *)(v19 + 16))
      v28 = *(_QWORD *)(v19 + 16);
    else
      v28 = v21 - v20;
    if (v28)
    {
      __swift_instantiateConcreteTypeFromMangledName(v22);
      OUTLINED_FUNCTION_96_4();
    }
    v29 = OUTLINED_FUNCTION_118_5();
    v25(v29, v27, v26, 1, &a10);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_4_31();
  }
}

uint64_t specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, MLDataValue>);
    OUTLINED_FUNCTION_96_4();
  }
  v1 = OUTLINED_FUNCTION_118_5();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v1, 1, &v3);
  OUTLINED_FUNCTION_123();
  return v3;
}

uint64_t specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, void (*a2)(Swift::String *__return_ptr, Swift::String *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;

  if (specialized LazyMapSequence.underestimatedCount.getter())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLUntypedColumn>);
    v6 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v6 = MEMORY[0x24BEE4B00];
  }
  v8 = v6;
  swift_retain();
  swift_retain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, a3, 1, &v8);
  swift_release();
  swift_release();
  return v8;
}

_QWORD *specialized String.withCString<A>(_:)(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for CMLColumn, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
}

{
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for CMLVariant, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
}

{
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for CMLTable, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
}

{
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for CMLFeatureValue, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
}

#error "21AF6F810: call analysis failed (funcsize=62)"

_QWORD *specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *(*v7)(uint64_t *__return_ptr, _QWORD *, __n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[4];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    result = (_QWORD *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4)
      return (_QWORD *)v13[3];
  }
  else
  {
    v8 = MEMORY[0x24BDAC7A8](a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v13[0] = v5;
      v13[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      result = v7(&v12, v13, v8);
      if (!v4)
        return (_QWORD *)v12;
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v9 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v10 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v9 = _StringObject.sharedUTF8.getter();
      }
      return (_QWORD *)_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v9, v10, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *(*v7)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD v11[2];
  uint64_t v12;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    result = (_QWORD *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4)
      return (_QWORD *)BYTE1(v12);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v11[0] = v5;
      v11[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      result = v7(&v12, v11);
      if (!v4)
        return (_QWORD *)v12;
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v9 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v8 = _StringObject.sharedUTF8.getter();
      }
      return _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq58CreateML19CMLFeatureValueTypeO_Tg507_sSRys4f5VGxs5e29_pIgyrzo_ACxsAD_pIegyrzr_lTR8h4ML19jkL5O_TG5SRyAGGAMsAD_pIgyrzo_Tf1cn_n(v8, v9, (_QWORD *(*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    }
  }
  return result;
}

_QWORD *specialized String.withCString<A>(_:)(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(void))
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[3];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    a5(0);
    result = (_QWORD *)_StringGuts._slowWithCString<A>(_:)();
    if (!v6)
      return (_QWORD *)v15[2];
  }
  else
  {
    MEMORY[0x24BDAC7A8]();
    if ((a4 & 0x2000000000000000) != 0)
    {
      v15[0] = a3;
      v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      result = a1(&v14, v15);
      if (!v6)
        return (_QWORD *)v14;
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v11 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v12 = a3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v11 = _StringObject.sharedUTF8.getter();
      }
      return (_QWORD *)_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v11, v12, a6);
    }
  }
  return result;
}

uint64_t MLDataTable.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v24;
  int64_t v25;
  __int128 v26;
  _OWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;

  result = MEMORY[0x22075BC08](0);
  if (!result)
    goto LABEL_36;
  OUTLINED_FUNCTION_146_3();
  v6 = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v6 + 16) = v2;
  type metadata accessor for _DataTable();
  v7 = (_QWORD *)OUTLINED_FUNCTION_47_9();
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = v6;
  v24 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v32 = (__int128 *)&v31;
  v25 = (unint64_t)(v8 + 63) >> 6;
  result = swift_retain();
  v11 = 0;
  if (!v10)
    goto LABEL_7;
LABEL_5:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v13 = v12 | (v11 << 6);
LABEL_6:
  v14 = *(_QWORD *)(a1 + 56);
  v15 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
  v16 = v15[1];
  *(_QWORD *)&v26 = *v15;
  *((_QWORD *)&v26 + 1) = v16;
  outlined init with copy of TrainingSessionDelegate(v14 + 40 * v13, (uint64_t)v27);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)&v26, (uint64_t)&v29, &demangling cache variable for type metadata for (key: String, value: MLDataValueConvertible)?);
    v19 = v30;
    if (!v30)
    {
      OUTLINED_FUNCTION_13_7();
      result = OUTLINED_FUNCTION_136();
      *(_QWORD *)a2 = v7;
      *(_BYTE *)(a2 + 8) = 0;
      return result;
    }
    v20 = v29;
    outlined init with take of BinaryFloatingPoint(v32, (uint64_t)&v26);
    __swift_project_boxed_opaque_existential_1(&v26, *((uint64_t *)&v27[0] + 1));
    v21 = MLDataValueConvertible.featureColumn.getter();
    OUTLINED_FUNCTION_3_1();
    CMLTable.addColumn(name:_:)(v20, v19, v21);
    if (v3)
    {
      OUTLINED_FUNCTION_136();
      OUTLINED_FUNCTION_30_21();
      OUTLINED_FUNCTION_81();
      OUTLINED_FUNCTION_4_2();
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    }
    OUTLINED_FUNCTION_81();
    OUTLINED_FUNCTION_4_2();
    swift_bridgeObjectRelease();
    result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    if (v10)
      goto LABEL_5;
LABEL_7:
    v17 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v17 < v25)
    {
      v18 = *(_QWORD *)(v24 + 8 * v17);
      if (v18)
        goto LABEL_10;
      v11 += 2;
      if (v17 + 1 >= v25)
      {
        v11 = v17;
        goto LABEL_15;
      }
      v18 = *(_QWORD *)(v24 + 8 * v11);
      if (v18)
      {
        ++v17;
LABEL_10:
        v10 = (v18 - 1) & v18;
        v13 = __clz(__rbit64(v18)) + (v17 << 6);
        v11 = v17;
        goto LABEL_6;
      }
      if (v17 + 2 < v25)
        break;
    }
LABEL_15:
    v10 = 0;
    v28 = 0;
    memset(v27, 0, sizeof(v27));
    v26 = 0u;
  }
  v18 = *(_QWORD *)(v24 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2;
    goto LABEL_10;
  }
  v22 = v17 + 3;
  if (v17 + 3 >= v25)
  {
    v11 = v17 + 2;
    goto LABEL_15;
  }
  v18 = *(_QWORD *)(v24 + 8 * v22);
  if (v18)
  {
    v17 += 3;
    goto LABEL_10;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v25)
    {
      v11 = v25 - 1;
      goto LABEL_15;
    }
    v18 = *(_QWORD *)(v24 + 8 * v17);
    ++v22;
    if (v18)
      goto LABEL_10;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void MLDataTable.append(contentsOf:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  OUTLINED_FUNCTION_31_15();
  v2 = v0;
  OUTLINED_FUNCTION_111_7();
  if ((v4 & 1) != 0)
  {
    LOBYTE(v5) = 1;
  }
  else
  {
    v6 = *(_QWORD **)v3;
    if ((*(_BYTE *)(v3 + 8) & 1) != 0)
    {
      LOBYTE(v5) = 1;
      outlined copy of Result<_DataTable, Error>(*(id *)v3, 1);
      OUTLINED_FUNCTION_102(v1);
      v1 = v6;
    }
    else
    {
      OUTLINED_FUNCTION_9_11();
      v7 = v1[2];
      v8 = v6[2];
      OUTLINED_FUNCTION_71_13();
      OUTLINED_FUNCTION_12_3(v1);
      OUTLINED_FUNCTION_23_22();
      OUTLINED_FUNCTION_149();
      v5 = CMLTable.__allocating_init(concatenating:and:)(v7, v8);
      type metadata accessor for _DataTable();
      v9 = (_QWORD *)OUTLINED_FUNCTION_9_1();
      v9[3] = 0;
      v9[4] = 0;
      v9[2] = v5;
      outlined consume of Result<_DataTable, Error>(v6, 0);
      outlined consume of Result<_DataTable, Error>(v1, 0);
      OUTLINED_FUNCTION_20_40(v1);
      v1 = v9;
    }
  }
  *(_QWORD *)v2 = v1;
  *(_BYTE *)(v2 + 8) = v5;
  OUTLINED_FUNCTION_4_31();
}

Swift::Void __swiftcall MLDataTable.renameColumn(named:to:)(Swift::String named, Swift::String to)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  OUTLINED_FUNCTION_107_6();
  MLDataTable.willMutate()();
  v3 = OUTLINED_FUNCTION_112_6();
  MLDataTable.renameImpl(named:to:)(v3, v4, v5, v6);
  if ((*(_BYTE *)(v2 + 8) & 1) == 0)
  {
    v7 = *(void **)v2;
    OUTLINED_FUNCTION_20_24();
    OUTLINED_FUNCTION_102(v7);
  }
  OUTLINED_FUNCTION_164();
}

void MLDataTable.columnTypes.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  Swift::String v13;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    OUTLINED_FUNCTION_61_0();
    Dictionary.init(dictionaryLiteral:)();
  }
  else
  {
    v1 = *(void **)v0;
    v2 = *(_QWORD *)(*(_QWORD *)v0 + 16);
    outlined copy of Result<_DataTable, Error>(*(id *)v0, 0);
    OUTLINED_FUNCTION_51_0();
    Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_12_3(v1);
    _DataTable.columnNames.getter(&v12);
    OUTLINED_FUNCTION_102(v1);
    OUTLINED_FUNCTION_13_51();
    v3 = OUTLINED_FUNCTION_48_23();
    OUTLINED_FUNCTION_5_1(v3);
    v5 = v4;
    OUTLINED_FUNCTION_136();
    if (v5)
    {
      CMLSequence.value(at:)(0);
      v6 = CMLFeatureValue.stringValue()();
      if (!v7)
      {
        OUTLINED_FUNCTION_4_2();
        OUTLINED_FUNCTION_13_51();
        v8 = OUTLINED_FUNCTION_48_23();
        OUTLINED_FUNCTION_5_1(v8);
        v10 = v9;
        OUTLINED_FUNCTION_136();
        if (v10 > 0)
        {
          v11 = (char *)&loc_21AF701B8
              + *((int *)qword_21AF705E8
                + specialized String.withCString<A>(_:)((uint64_t)partial apply for closure #1 in CMLTable.columnType(name:), v2, v6._countAndFlagsBits, (uint64_t)v6._object));
          __asm { BR              X9 }
        }
        __break(1u);
        JUMPOUT(0x21AF70520);
      }
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_82_10();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_96_9();
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      OUTLINED_FUNCTION_121_7(v13);
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_152(46);
      OUTLINED_FUNCTION_34_29();
      OUTLINED_FUNCTION_121();
      __break(1u);
      JUMPOUT(0x21AF705D8);
    }
    OUTLINED_FUNCTION_81();
    OUTLINED_FUNCTION_136();
    OUTLINED_FUNCTION_102(v1);
    OUTLINED_FUNCTION_61_0();
  }
}

void MLDataTable.subscript.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_90_6();
  v4 = *(id *)v1;
  v5 = *(_BYTE *)(v1 + 8);
  outlined copy of Result<_DataTable, Error>(*(id *)v1, v5);
  v6 = OUTLINED_FUNCTION_130_0();
  MLDataTable.subscript.getter(v6, v7, v8);
  outlined consume of Result<_DataTable, Error>(v4, v5);
  MLUntypedColumn.column<A>(type:)(v3, v2, v0);
  OUTLINED_FUNCTION_113_8();
  OUTLINED_FUNCTION_52_18();
}

{
  uint64_t *v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_107_6();
  v2 = v1;
  v11 = *v0;
  LOBYTE(v12) = *((_BYTE *)v0 + 8);
  if (MLDataTable.size.getter() < 0)
  {
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    v3 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    OUTLINED_FUNCTION_120_6(v3, v4, v5, v6, v7, v8, v9, v10, 0);
    dispatch thunk of RangeExpression.relative<A>(to:)();
    MLDataTable.subscript.getter(v2, v11, v12);
    OUTLINED_FUNCTION_19_19();
  }
}

void MLDataTable.addColumn(_:named:)()
{
  uint64_t v0;
  void *v1;

  OUTLINED_FUNCTION_31_15();
  OUTLINED_FUNCTION_21_37();
  OUTLINED_FUNCTION_102_4();
  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
  {
    v1 = *(void **)v0;
    OUTLINED_FUNCTION_20_24();
    OUTLINED_FUNCTION_102(v1);
  }
  OUTLINED_FUNCTION_4_31();
}

#error "21AF7075C: call analysis failed (funcsize=57)"

void MLDataTable.exclude<A>(_:of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MLDataTable.exclude<A>(_:of:)(a1, a2, a3, a4, a5, 1);
}

void MLDataTable.addColumn<A>(_:named:)()
{
  void **v0;
  char v1;
  void *v2;

  OUTLINED_FUNCTION_31_15();
  OUTLINED_FUNCTION_21_37();
  OUTLINED_FUNCTION_35_22();
  OUTLINED_FUNCTION_102_4();
  OUTLINED_FUNCTION_98_6();
  if ((v1 & 1) == 0)
  {
    v2 = *v0;
    OUTLINED_FUNCTION_20_24();
    OUTLINED_FUNCTION_102(v2);
  }
  OUTLINED_FUNCTION_4_31();
}

uint64_t _DataTable.columnNames.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
    goto LABEL_4;
  specialized handling<A, B>(_:_:)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16));
  v5 = v4;
  if (v4)
  {
    OUTLINED_FUNCTION_22_0();
    v6 = OUTLINED_FUNCTION_9_1();
    *(_QWORD *)(v6 + 16) = v5;
    *(_BYTE *)(v6 + 24) = 1;
    *(_QWORD *)(v1 + 24) = v6;
    swift_release();
    v3 = *(_QWORD *)(v1 + 24);
    if (v3)
    {
LABEL_4:
      *a1 = v3;
      return swift_retain();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_34_29();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _DataTable.columnIndexes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL8 v15;
  Swift::Int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  _QWORD *v29;
  Swift::String v30;

  if (*(_QWORD *)(v0 + 32))
    goto LABEL_19;
  _DataTable.columnNames.getter(&v29);
  OUTLINED_FUNCTION_13_51();
  v1 = OUTLINED_FUNCTION_48_23();
  OUTLINED_FUNCTION_5_1(v1);
  v3 = v2;
  OUTLINED_FUNCTION_136();
  if (v3)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x24BEE4B00];
    while (1)
    {
      CMLSequence.value(at:)(v4);
      v6 = CMLFeatureValue.stringValue()();
      if (v7)
        goto LABEL_25;
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_13_51();
      v8 = OUTLINED_FUNCTION_48_23();
      OUTLINED_FUNCTION_5_1(v8);
      v10 = v9;
      OUTLINED_FUNCTION_136();
      if (v4 >= v10)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v29 = v5;
      v12 = specialized __RawDictionaryStorage.find<A>(_:)(v6._countAndFlagsBits, (uint64_t)v6._object);
      v14 = v5[2];
      v15 = (v13 & 1) == 0;
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
        goto LABEL_21;
      v17 = v12;
      v18 = v13;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v16))
      {
        v19 = specialized __RawDictionaryStorage.find<A>(_:)(v6._countAndFlagsBits, (uint64_t)v6._object);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_26;
        v17 = v19;
      }
      v5 = v29;
      if ((v18 & 1) != 0)
      {
        *(_QWORD *)(v29[7] + 8 * v17) = v4;
      }
      else
      {
        v29[(v17 >> 6) + 8] |= 1 << v17;
        *(Swift::String *)(v5[6] + 16 * v17) = v6;
        *(_QWORD *)(v5[7] + 8 * v17) = v4;
        v21 = v5[2];
        v22 = __OFADD__(v21, 1);
        v23 = v21 + 1;
        if (v22)
          goto LABEL_22;
        v5[2] = v23;
        swift_bridgeObjectRetain();
      }
      ++v4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_13_51();
      v24 = OUTLINED_FUNCTION_48_23();
      OUTLINED_FUNCTION_5_1(v24);
      v26 = v25;
      OUTLINED_FUNCTION_136();
      if (v4 == v26)
        goto LABEL_18;
    }
  }
  v5 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_18:
  OUTLINED_FUNCTION_136();
  *(_QWORD *)(v28 + 32) = v5;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v28 + 32))
  {
LABEL_19:
    OUTLINED_FUNCTION_61_0();
    return swift_bridgeObjectRetain();
  }
LABEL_23:
  __break(1u);
  OUTLINED_FUNCTION_120();
  __break(1u);
LABEL_25:
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_82_10();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_96_9();
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_121_7(v30);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_152(46);
  OUTLINED_FUNCTION_34_29();
  OUTLINED_FUNCTION_121();
  __break(1u);
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_QWORD *_DataTable.init(impl:)(uint64_t a1)
{
  _QWORD *v1;

  v1[3] = 0;
  v1[4] = 0;
  v1[2] = a1;
  return v1;
}

Swift::Void __swiftcall _DataTable.columnNamesDidChange()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = 0;
  swift_release();
  *(_QWORD *)(v0 + 32) = 0;
  swift_bridgeObjectRelease();
}

uint64_t _DataTable.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _DataTable.__deallocating_deinit()
{
  _DataTable.deinit();
  return swift_deallocClassInstance();
}

void MLDataTable.error.getter()
{
  uint64_t v0;
  id v1;

  if (*(_BYTE *)(v0 + 8) == 1)
    v1 = *(id *)v0;
  OUTLINED_FUNCTION_22();
}

BOOL MLDataTable.isValid.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 8) & 1) == 0;
}

void MLDataTable.willMutate()()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;

  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
  {
    OUTLINED_FUNCTION_122();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_217();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      OUTLINED_FUNCTION_35_22();
      OUTLINED_FUNCTION_148_1();
    }
  }
}

void MLDataTable.addImpl(newColumn:named:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  _QWORD *v14;
  double v15;
  void *v16;
  uint64_t v17;
  void *v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v0;
  OUTLINED_FUNCTION_111_7();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_26_37();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v7 = _getErrorEmbeddedNSError<A>(_:)();
    if (v7)
    {
      v8 = v7;
      OUTLINED_FUNCTION_122_3(v1);
    }
    else
    {
      v8 = OUTLINED_FUNCTION_49_0();
      *v20 = v1;
    }
    v18 = v1;
    v19 = 1;
    goto LABEL_9;
  }
  v9 = v5;
  v10 = v4;
  if ((v3[8] & 1) != 0)
  {
    OUTLINED_FUNCTION_12_3(v1);
    OUTLINED_FUNCTION_149_1();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_127_5();
    v21 = v11;
    v22 = v12;
    v13._countAndFlagsBits = v10;
    v13._object = v9;
    String.append(_:)(v13);
    OUTLINED_FUNCTION_152(39);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v8 = OUTLINED_FUNCTION_49_0();
    *v14 = v21;
    v14[1] = v22;
    v15 = OUTLINED_FUNCTION_37_19(v8, (uint64_t)v14);
    swift_willThrow(v15);
    v18 = v1;
    v19 = 0;
LABEL_9:
    outlined consume of Result<_DataTable, Error>(v18, v19);
    OUTLINED_FUNCTION_128_4();
    *(_QWORD *)v2 = v8;
    *(_BYTE *)(v2 + 8) = 1;
    goto LABEL_10;
  }
  v16 = *(void **)v3;
  v17 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  outlined copy of Result<_DataTable, Error>(v1, 0);
  OUTLINED_FUNCTION_12_3(v16);
  OUTLINED_FUNCTION_51_11();
  CMLTable.addColumn(name:_:)(v10, (uint64_t)v9, v17);
  OUTLINED_FUNCTION_31_31();
  OUTLINED_FUNCTION_184();
  OUTLINED_FUNCTION_102(v1);
LABEL_10:
  OUTLINED_FUNCTION_19_19();
}

uint64_t specialized MLDataTable.init<A>(uniqueKeysWithValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  _QWORD v30[7];

  result = MEMORY[0x22075BC08](0);
  if (!result)
    goto LABEL_30;
  OUTLINED_FUNCTION_146_3();
  v6 = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v6 + 16) = v2;
  type metadata accessor for _DataTable();
  v7 = (_QWORD *)OUTLINED_FUNCTION_47_9();
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = v6;
  specialized _NativeDictionary.makeIterator()(v30, a1);
  v8 = v30[0];
  v29 = v30[3];
  v9 = v30[4];
  v27 = v30[1];
  v28 = (unint64_t)(v30[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  result = OUTLINED_FUNCTION_139();
  if (!v9)
    goto LABEL_4;
LABEL_3:
  v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v11 = v10 | (v29 << 6);
  while (1)
  {
    v15 = *(_QWORD *)(v8 + 56) + 16 * v11;
    v16 = *(_QWORD **)v15;
    if ((*(_BYTE *)(v15 + 8) & 1) != 0)
    {
      outlined copy of Result<_DataTable, Error>(v16, 1);
      OUTLINED_FUNCTION_24_2();
      v30[6] = v16;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v24 = OUTLINED_FUNCTION_49_0();
      *v25 = 0;
      v25[1] = 0xE000000000000000;
      OUTLINED_FUNCTION_5_8(v24, (uint64_t)v25);
      outlined consume of Result<_DataTable, Error>(v16, 1);
      OUTLINED_FUNCTION_184();
      swift_bridgeObjectRelease();
      return OUTLINED_FUNCTION_24_2();
    }
    v17 = v8;
    v18 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v11);
    v19 = *v18;
    v20 = v18[1];
    v21 = v7;
    v22 = v16[2];
    OUTLINED_FUNCTION_116_6();
    OUTLINED_FUNCTION_116_6();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_3_1();
    OUTLINED_FUNCTION_139();
    CMLTable.addColumn(name:_:)(v19, v20, v22);
    if (v3)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_24_2();
      OUTLINED_FUNCTION_91_9();
      OUTLINED_FUNCTION_13_7();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_136();
      return OUTLINED_FUNCTION_24_2();
    }
    OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_91_9();
    result = swift_bridgeObjectRelease();
    v7 = v21;
    v8 = v17;
    if (v9)
      goto LABEL_3;
LABEL_4:
    v12 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    if (v12 >= v28)
      goto LABEL_28;
    v13 = *(_QWORD *)(v27 + 8 * v12);
    if (!v13)
    {
      v14 = v29 + 2;
      if (v29 + 2 >= v28)
        goto LABEL_28;
      v13 = *(_QWORD *)(v27 + 8 * v14);
      if (v13)
        goto LABEL_13;
      v14 = v29 + 3;
      if (v29 + 3 >= v28)
        goto LABEL_28;
      v13 = *(_QWORD *)(v27 + 8 * v14);
      if (v13)
        goto LABEL_13;
      v14 = v29 + 4;
      if (v29 + 4 >= v28)
        goto LABEL_28;
      v13 = *(_QWORD *)(v27 + 8 * v14);
      if (v13)
      {
LABEL_13:
        v12 = v14;
        goto LABEL_14;
      }
      v12 = v29 + 5;
      if (v29 + 5 >= v28)
        goto LABEL_28;
      v13 = *(_QWORD *)(v27 + 8 * v12);
      if (!v13)
        break;
    }
LABEL_14:
    v9 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v29 = v12;
  }
  v23 = v29 + 6;
  while (v23 < v28)
  {
    v13 = *(_QWORD *)(v27 + 8 * v23++);
    if (v13)
    {
      v12 = v23 - 1;
      goto LABEL_14;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_24_2();
  result = OUTLINED_FUNCTION_184();
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void key path getter for MLDataTable.subscript(_:) : MLDataTable(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  id v4;
  uint64_t v5;
  void *v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *(id *)a1;
  v5 = *a2;
  v6 = (void *)a2[1];
  v8 = *(_BYTE *)(a1 + 8);
  outlined copy of Result<_DataTable, Error>(*(id *)a1, v8);
  MLDataTable.subscript.getter(v5, v6, (uint64_t)&v9);
  outlined consume of Result<_DataTable, Error>(v4, v8);
  v7 = v10;
  *(_QWORD *)a3 = v9;
  *(_BYTE *)(a3 + 8) = v7;
}

uint64_t key path setter for MLDataTable.subscript(_:) : MLDataTable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v7;
  char v8;

  v3 = *a3;
  v4 = a3[1];
  v5 = *(_BYTE *)(a1 + 8);
  v7 = *(id *)a1;
  v8 = v5;
  swift_bridgeObjectRetain();
  outlined copy of Result<_DataTable, Error>(v7, v5);
  return MLDataTable.subscript.setter(&v7, v3, v4);
}

#error "21AF71788: call analysis failed (funcsize=16)"

void MLDataTable.setColumnImpl(newColumn:named:)(uint64_t a1)
{
  void **v1;
  void **v2;
  _QWORD *v3;
  char v4;
  void *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;

  v2 = v1;
  v3 = *(_QWORD **)a1;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *v1;
  if (((_BYTE)v2[1] & 1) != 0)
    OUTLINED_FUNCTION_18_28(v5);
  OUTLINED_FUNCTION_12_3(v5);
  _DataTable.columnNames.getter(&v17);
  OUTLINED_FUNCTION_102(v5);
  MEMORY[0x24BDAC7A8](v6);
  v7 = specialized Sequence.contains(where:)(partial apply for specialized closure #1 in Sequence<>.contains(_:));
  OUTLINED_FUNCTION_184();
  if ((v7 & 1) != 0)
  {
    v8 = OUTLINED_FUNCTION_130_0();
    MLDataTable.removeImpl(_:)(v8, v9);
  }
  v10 = *v2;
  if (((_BYTE)v2[1] & 1) != 0)
  {
    v16 = *v2;
    OUTLINED_FUNCTION_59_22(v10);
    v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (OUTLINED_FUNCTION_133_1())
    {
      OUTLINED_FUNCTION_122_3(v10);
    }
    else
    {
      OUTLINED_FUNCTION_49_0();
      *v15 = v16;
    }
    outlined consume of Result<_DataTable, Error>(v10, 1);
    OUTLINED_FUNCTION_129_1();
  }
  else
  {
    if ((v4 & 1) != 0)
    {
      OUTLINED_FUNCTION_51_11();
    }
    else
    {
      v12 = v3[2];
      outlined copy of Result<_DataTable, Error>(*v2, 0);
      OUTLINED_FUNCTION_12_3(v3);
      OUTLINED_FUNCTION_16_15();
      v13 = OUTLINED_FUNCTION_130_0();
      CMLTable.addColumn(name:_:)(v13, v14, v12);
      OUTLINED_FUNCTION_102(v3);
      OUTLINED_FUNCTION_99();
    }
    OUTLINED_FUNCTION_102(v10);
  }
  OUTLINED_FUNCTION_9_5();
}

void (*MLDataTable.subscript.modify())()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_31_15();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = malloc(0x28uLL);
  *v6 = v7;
  v7[3] = v2;
  v7[4] = v0;
  v7[2] = v4;
  OUTLINED_FUNCTION_84_11();
  MLDataTable.subscript.getter(v4, v2, v8);
  return MLDataTable.subscript.modify;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;

  OUTLINED_FUNCTION_68_19();
  OUTLINED_FUNCTION_90_6();
  v6 = malloc(0x38uLL);
  *v5 = v6;
  v6[5] = v0;
  v6[6] = v1;
  v6[3] = v3;
  v6[4] = v2;
  v6[2] = v4;
  OUTLINED_FUNCTION_84_11();
  v7 = OUTLINED_FUNCTION_112_6();
  MLDataTable.subscript.getter(v7, v8, v9, v10, v11, v12);
  return MLDataTable.subscript.modify;
}

void MLDataTable.subscript.modify()
{
  char v0;
  char v1;
  void ***v2;
  void **v3;
  void *v4;
  char v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char v28;

  OUTLINED_FUNCTION_68_19();
  v1 = v0;
  v3 = *v2;
  v4 = **v2;
  v5 = *((_BYTE *)*v2 + 8);
  swift_bridgeObjectRetain();
  v6 = v3[4];
  if ((v1 & 1) != 0)
  {
    outlined copy of Result<_DataTable, Error>(v4, v5);
    MLDataTable.willMutate()();
    OUTLINED_FUNCTION_64_15(v7, v8, v9, v10, v11, v12, v13, v14, v27, v28);
    OUTLINED_FUNCTION_12_0();
    outlined consume of Result<_DataTable, Error>(v4, v5);
    if ((v6[8] & 1) == 0)
    {
      v15 = *(void **)v3[4];
      OUTLINED_FUNCTION_20_24();
      OUTLINED_FUNCTION_102(v15);
    }
    v16 = *v3;
    v17 = *((_BYTE *)v3 + 8);
    goto LABEL_7;
  }
  MLDataTable.willMutate()();
  OUTLINED_FUNCTION_64_15(v18, v19, v20, v21, v22, v23, v24, v25, v27, v28);
  OUTLINED_FUNCTION_12_0();
  outlined consume of Result<_DataTable, Error>(v4, v5);
  if ((v6[8] & 1) == 0)
  {
    v26 = *(void **)v3[4];
    OUTLINED_FUNCTION_20_24();
    v16 = v26;
    v17 = 0;
LABEL_7:
    outlined consume of Result<_DataTable, Error>(v16, v17);
  }
  free(v3);
}

{
  void ***v0;
  void **v1;
  void *v2;
  char v3;
  char v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_31_15();
  v1 = *v0;
  v2 = **v0;
  v3 = *((_BYTE *)*v0 + 8);
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_104_7();
    v5 = outlined copy of Result<_DataTable, Error>(v2, v3);
    OUTLINED_FUNCTION_101_10((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v21);
    OUTLINED_FUNCTION_128_4();
  }
  else
  {
    v13 = OUTLINED_FUNCTION_104_7();
    OUTLINED_FUNCTION_101_10(v13, v14, v15, v16, v17, v18, v19, v20, v21);
  }
  free(v1);
}

void key path getter for MLDataTable.subscript<A>(_:) : <A>MLDataTableA(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;

  v5 = *(uint64_t *)((char *)a2 + a3 - 16);
  v6 = *(uint64_t *)((char *)a2 + a3 - 8);
  v7 = *(id *)a1;
  v8 = *a2;
  v9 = a2[1];
  v12 = *(_BYTE *)(a1 + 8);
  outlined copy of Result<_DataTable, Error>(*(id *)a1, v12);
  MLDataTable.subscript.getter(v8, v9, v5, v6, (uint64_t)&v13, v10);
  outlined consume of Result<_DataTable, Error>(v7, v12);
  v11 = v14;
  *(_QWORD *)a4 = v13;
  *(_BYTE *)(a4 + 8) = v11;
}

uint64_t key path setter for MLDataTable.subscript<A>(_:) : <A>MLDataTableA(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v7;
  char v8;

  v3 = *a3;
  v4 = a3[1];
  v5 = *(_BYTE *)(a1 + 8);
  v7 = *(id *)a1;
  v8 = v5;
  swift_bridgeObjectRetain();
  outlined copy of Result<_DataTable, Error>(v7, v5);
  return MLDataTable.subscript.setter(&v7, v3, v4);
}

void MLDataTable.removeImpl(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;

  v3 = *(_QWORD **)v2;
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    v15 = *(_QWORD **)v2;
    outlined copy of Result<_DataTable, Error>(v3, 1);
    v4 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v5 = _getErrorEmbeddedNSError<A>(_:)();
    if (v5)
    {
      v6 = (void *)v5;
      outlined consume of Result<_DataTable, Error>(v3, 1);
    }
    else
    {
      v6 = (void *)swift_allocError();
      *v14 = v15;
    }
    v11 = 1;
    v12 = v3;
    v13 = 1;
  }
  else
  {
    v9 = v3[2];
    outlined copy of Result<_DataTable, Error>(v3, 0);
    swift_retain();
    v10 = a1;
    v6 = 0;
    specialized String.withCString<A>(_:)(v10, a2, v9);
    v11 = 0;
    v12 = v3;
    v13 = 0;
  }
  outlined consume of Result<_DataTable, Error>(v12, v13);
  outlined consume of Result<(), Error>(v6, v11);
}

void MLDataTable.subscript.getter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  MEMORY[0x24BDAC7A8](a1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  OUTLINED_FUNCTION_148_1();
}

#error "21AF72224: call analysis failed (funcsize=47)"

Swift::Void __swiftcall MLDataTable.removeColumn(named:)(Swift::String named)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;

  object = named._object;
  countAndFlagsBits = named._countAndFlagsBits;
  MLDataTable.willMutate()();
  MLDataTable.removeImpl(_:)(countAndFlagsBits, (uint64_t)object);
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
  {
    v4 = *(void **)v1;
    OUTLINED_FUNCTION_20_24();
    OUTLINED_FUNCTION_102(v4);
  }
  OUTLINED_FUNCTION_125();
}

#error "21AF7230C: call analysis failed (funcsize=81)"

void MLDataTable.intersect<A>(_:of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MLDataTable.exclude<A>(_:of:)(a1, a2, a3, a4, a5, 0);
}

void MLDataTable.exclude<A>(_:of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t *v6;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;

  v10 = *((_BYTE *)v6 + 8);
  v25 = *v6;
  v26 = v10;
  v21 = a1;
  type metadata accessor for Array();
  OUTLINED_FUNCTION_9_42();
  v11 = MEMORY[0x22075B938](MEMORY[0x24BEE12C8], v6);
  OUTLINED_FUNCTION_120_6(v11, v12, v13, v14, v15, v16, v17, v18, v21);
  MLUntypedColumn.init<A>(_:)();
  v19 = (void *)v23;
  v20 = v24;
  v21 = v23;
  v22 = v24;
  MLDataTable.filtered(isExcluding:values:in:)(a6, (uint64_t)&v21, a2, a3);
  outlined consume of Result<_DataTable, Error>(v19, v20);
  OUTLINED_FUNCTION_24_40();
}

void MLDataTable.filtered(isExcluding:values:in:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  void *v9;
  char v10;
  _QWORD *v11;
  void *v12;

  v5 = *(void **)v4;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    v12 = *(void **)v4;
    OUTLINED_FUNCTION_139_2();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (OUTLINED_FUNCTION_49_21())
    {
      OUTLINED_FUNCTION_122_3(v5);
    }
    else
    {
      OUTLINED_FUNCTION_49_0();
      *v11 = v12;
    }
    OUTLINED_FUNCTION_122_3(v5);
  }
  else
  {
    v9 = *(void **)a2;
    v10 = *(_BYTE *)(a2 + 8);
    OUTLINED_FUNCTION_149();
    closure #1 in MLDataTable.filtered(isExcluding:values:in:)(v9, v10, a3, a4, a1 & 1, &v12);
    OUTLINED_FUNCTION_102(v5);
  }
  OUTLINED_FUNCTION_32_9();
  OUTLINED_FUNCTION_19_19();
}

void closure #1 in MLDataTable.filtered(isExcluding:values:in:)(void *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  if ((a2 & 1) != 0)
  {
    _StringGuts.grow(_:)(85);
    v13._object = (void *)0x800000021AFF5590;
    v13._countAndFlagsBits = 0xD000000000000052;
    String.append(_:)(v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    String.append(_:)(v14);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_152(39);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v15 = OUTLINED_FUNCTION_49_0();
    *v16 = 0;
    v16[1] = 0xE000000000000000;
    OUTLINED_FUNCTION_5_8(v15, (uint64_t)v16);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(a1, 0);
    v11 = OUTLINED_FUNCTION_13_51();
    CMLTable.filtered(_:columnName:isExcluding:)(v11, a3, a4, a5 & 1);
    if (v6)
    {
      OUTLINED_FUNCTION_136();
      OUTLINED_FUNCTION_107_4();
    }
    else
    {
      v17 = v12;
      OUTLINED_FUNCTION_107_4();
      OUTLINED_FUNCTION_136();
      type metadata accessor for _DataTable();
      v18 = (_QWORD *)OUTLINED_FUNCTION_47_9();
      v18[3] = 0;
      v18[4] = 0;
      v18[2] = v17;
      *a6 = v18;
    }
  }
}

uint64_t MLDataTable.join(with:on:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_68_19();
  return ((uint64_t (*)(uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)sub_21AF7274C + 4 * byte_21AFEF6A0[*v12]))(v13, v14, v12, v15, v16, v17, v18, v19, a9, a10, a11, a12);
}

void sub_21AF7274C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  id v16;
  char v17;
  char v18;

  a9 = 0x72656E6E69;
  a10 = 0xE500000000000000;
  swift_bridgeObjectRetain();
  outlined copy of Result<_DataTable, Error>(v13, v14);
  outlined copy of Result<_DataTable, Error>(v15, v12);
  v16 = specialized binaryDo<A, B, C>(_:_:_:)(v13, v14, v15, v12, v11, &a9);
  v18 = v17;
  outlined consume of Result<_DataTable, Error>(v15, v12);
  OUTLINED_FUNCTION_113_8();
  swift_bridgeObjectRelease();
  *(_QWORD *)v10 = v16;
  *(_BYTE *)(v10 + 8) = v18 & 1;
  OUTLINED_FUNCTION_67_19();
}

_QWORD *closure #1 in MLDataTable.join(with:on:type:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *result;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD v52[6];
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v6 = v5;
  v53 = a5;
  v9 = *a1;
  v10 = *a2;
  v11 = MEMORY[0x22075BB18](0);
  if (!v11)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    OUTLINED_FUNCTION_131_4();
    while (1)
    {
LABEL_33:
      swift_unexpectedError();
      __break(1u);
    }
  }
  v12 = v11;
  v56 = a4;
  type metadata accessor for CMLSequence();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v12;
  v58 = inited;
  *(_BYTE *)(inited + 24) = 1;
  v14 = *(_QWORD *)(a3 + 16);
  v54 = v9;
  v55 = v10;
  if (!v14)
  {
    _DataTable.columnNames.getter(&v59);
    _DataTable.columnNames.getter(&v59);
    v19 = v59;
    swift_retain_n();
    v20 = OUTLINED_FUNCTION_144_2();
    OUTLINED_FUNCTION_5_1(v20);
    OUTLINED_FUNCTION_73_16();
    if (!a3)
      goto LABEL_25;
    v21 = 0;
    while (1)
    {
      OUTLINED_FUNCTION_134_2(v21);
      if (v5)
        goto LABEL_32;
      v6 = 0;
      v22 = OUTLINED_FUNCTION_26_4();
      v24 = v23;
      OUTLINED_FUNCTION_4_2();
      swift_retain();
      v25 = OUTLINED_FUNCTION_144_2();
      OUTLINED_FUNCTION_5_1(v25);
      OUTLINED_FUNCTION_73_16();
      if (v21 >= a3)
        goto LABEL_30;
      v57 = v21;
      swift_retain_n();
      v26 = OUTLINED_FUNCTION_108();
      OUTLINED_FUNCTION_5_1(v26);
      v28 = v27;
      OUTLINED_FUNCTION_24_2();
      if (!v28)
      {
LABEL_20:
        OUTLINED_FUNCTION_104();
        a3 = v19;
        v41 = v57;
        goto LABEL_24;
      }
      v29 = 0;
      while (1)
      {
        OUTLINED_FUNCTION_134_2(v29);
        v6 = 0;
        v30 = OUTLINED_FUNCTION_26_4();
        v32 = v31;
        OUTLINED_FUNCTION_4_2();
        OUTLINED_FUNCTION_139();
        v33 = OUTLINED_FUNCTION_108();
        OUTLINED_FUNCTION_5_1(v33);
        v35 = v34;
        OUTLINED_FUNCTION_24_2();
        if (v29 >= v35)
        {
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        if (v30 == v22 && v32 == v24)
        {
          OUTLINED_FUNCTION_24_2();
          OUTLINED_FUNCTION_104();
          goto LABEL_23;
        }
        v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v37 & 1) != 0)
          break;
        ++v29;
        OUTLINED_FUNCTION_139();
        v38 = OUTLINED_FUNCTION_108();
        OUTLINED_FUNCTION_5_1(v38);
        v40 = v39;
        OUTLINED_FUNCTION_24_2();
        if (v29 == v40)
          goto LABEL_20;
      }
      OUTLINED_FUNCTION_24_2();
LABEL_23:
      type metadata accessor for CMLFeatureValue();
      OUTLINED_FUNCTION_9_42();
      CMLFeatureValue.__allocating_init(_:)();
      v41 = v57;
      a3 = v42;
      OUTLINED_FUNCTION_104();
      CMLSequence.append(_:)(a3);
      v6 = 0;
LABEL_24:
      v21 = v41 + 1;
      OUTLINED_FUNCTION_217();
      swift_retain();
      v43 = OUTLINED_FUNCTION_144_2();
      OUTLINED_FUNCTION_5_1(v43);
      OUTLINED_FUNCTION_73_16();
      if (v21 == a3)
      {
LABEL_25:
        OUTLINED_FUNCTION_30_21();
        v18 = OUTLINED_FUNCTION_24_2();
        goto LABEL_26;
      }
    }
  }
  type metadata accessor for CMLFeatureValue();
  swift_bridgeObjectRetain();
  v15 = a3 + 40;
  do
  {
    swift_bridgeObjectRetain_n();
    CMLFeatureValue.__allocating_init(_:)();
    if (v6)
      goto LABEL_33;
    v17 = v16;
    OUTLINED_FUNCTION_80();
    CMLSequence.append(_:)(v17);
    v6 = 0;
    v15 += 16;
    OUTLINED_FUNCTION_81();
    --v14;
  }
  while (v14);
  v18 = OUTLINED_FUNCTION_123();
LABEL_26:
  v44 = *(_QWORD *)(v54 + 16);
  v45 = *(_QWORD *)(v55 + 16);
  v47 = *v56;
  v46 = v56[1];
  MEMORY[0x24BDAC7A8](v18);
  v52[2] = v44;
  v52[3] = v45;
  v52[4] = v58;
  OUTLINED_FUNCTION_13_51();
  OUTLINED_FUNCTION_149();
  swift_bridgeObjectRetain();
  v48 = specialized String.withCString<A>(_:)((uint64_t)partial apply for closure #1 in CMLTable.init(joiningMultiple:and:columnNames:method:), (uint64_t)v52, v47, v46);
  if (v6)
  {
    OUTLINED_FUNCTION_136();
    OUTLINED_FUNCTION_13_7();
    swift_release();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    v50 = v48;
    OUTLINED_FUNCTION_13_7();
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_136();
    type metadata accessor for CMLTable();
    *(_QWORD *)(OUTLINED_FUNCTION_9_1() + 16) = v50;
    type metadata accessor for _DataTable();
    v51 = (_QWORD *)OUTLINED_FUNCTION_47_9();
    result = OUTLINED_FUNCTION_143_1(v51);
    *v53 = result;
  }
  return result;
}

BOOL static MLDataTable.JoinType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void MLDataTable.JoinType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int MLDataTable.JoinType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void closure #1 in MLDataTable.subscript.getter(uint64_t *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;

  v5 = *a1;
  v6 = (void *)a1[1];
  v7 = (uint64_t)(a4 + 2);
  *a4 = *a1;
  a4[1] = (uint64_t)v6;
  v8 = a3 & 1;
  swift_bridgeObjectRetain();
  outlined copy of Result<_DataTable, Error>(a2, v8);
  MLDataTable.subscript.getter(v5, v6, v7);
  outlined consume of Result<_DataTable, Error>(a2, v8);
}

void closure #2 in MLDataTable.subscript.getter(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;

  v4 = *a1;
  v3 = a1[1];
  v5 = (void *)a1[2];
  v6 = *((_BYTE *)a1 + 24);
  swift_bridgeObjectRetain();
  outlined copy of Result<_DataTable, Error>(v5, v6);
  outlined consume of Result<_DataTable, Error>(v5, v6);
  *a2 = v4;
  a2[1] = v3;
  swift_bridgeObjectRetain();
  outlined copy of Result<_DataTable, Error>(v5, v6);
  swift_bridgeObjectRelease();
  MLUntypedColumn.subscript.getter();
  outlined consume of Result<_DataTable, Error>(v5, v6);
}

void MLDataTable.subscript.getter(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)v2 + 8);
  v8 = *v2;
  v9 = v5;
  v6 = v3;
  v7 = v4;
  MLDataTable.subscript.getter((uint64_t)&v6, a2);
}

uint64_t MLDataTable.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v17;
  char v18;

  v10 = *(void **)v5;
  v11 = *(_BYTE *)(v5 + 8);
  if ((v11 & 1) != 0)
    OUTLINED_FUNCTION_18_28(v10);
  OUTLINED_FUNCTION_12_3(v10);
  _DataTable.columnNames.getter(&v17);
  OUTLINED_FUNCTION_102(v10);
  v12 = v17;
  OUTLINED_FUNCTION_12_3(v10);
  v13 = _DataTable.columnIndexes.getter();
  OUTLINED_FUNCTION_102(v10);
  v14 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = v12;
  v14[5] = v13;
  v14[6] = a1;
  v14[7] = a2;
  outlined copy of Result<_DataTable, Error>(v10, 0);
  OUTLINED_FUNCTION_149();
  OUTLINED_FUNCTION_23_22();
  closure #2 in MLDataTable.map<A>(_:)((uint64_t)partial apply for closure #1 in MLDataTable.map<A>(_:), (uint64_t)v14, a3, a4, &v17);
  OUTLINED_FUNCTION_13_7();
  outlined consume of Result<_DataTable, Error>(v10, 0);
  OUTLINED_FUNCTION_184();
  v18 = 0;
  return MLDataColumn.init(from:)((uint64_t)&v17, a5);
}

uint64_t closure #1 in MLDataTable.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v21[2];
  void (*v22)(_QWORD *);
  _QWORD v23[3];

  v21[1] = a7;
  v22 = a4;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v21 - v13;
  v15 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = a2;
  v23[1] = a3;
  v23[2] = a1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v22(v23);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, a6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    type metadata accessor for CMLFeatureValue();
    v19 = CMLFeatureValue.__allocating_init()();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, a6);
    v19 = MLDataValueConvertible.featureValue.getter();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, a6);
  }
  return v19;
}

uint64_t closure #2 in MLDataTable.map<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 8))(&v11, a3, a4);
  result = CMLTable.apply(transform:type:)(a1, a2, 0x5060403020100uLL >> (8 * v11));
  if (!v5)
  {
    v10 = result;
    type metadata accessor for _UntypedColumn();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v10;
    *a5 = result;
  }
  return result;
}

uint64_t MLDataTable.map<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  OUTLINED_FUNCTION_68_19();
  v4 = v3;
  OUTLINED_FUNCTION_107_6();
  v6 = v5;
  v7 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  v7[2] = v0;
  v7[3] = v4;
  v7[4] = v2;
  v7[5] = v1;
  OUTLINED_FUNCTION_51_0();
  MLDataTable.map<A>(_:)((uint64_t)partial apply for closure #1 in MLDataTable.map<A>(_:), (uint64_t)v7, v0, v4, v6);
  return swift_release();
}

uint64_t closure #1 in MLDataTable.map<A>(_:)@<X0>(__int128 *a1@<X0>, void (*a2)(__int128 *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v6 = *((_QWORD *)a1 + 2);
  v8 = *a1;
  v9 = v6;
  a2(&v8);
  return __swift_storeEnumTagSinglePayload(a4, 0, 1, a3);
}

#error "21AF7351C: call analysis failed (funcsize=57)"

void MLDataTable.fillMissing(columnNamed:with:)(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  __int128 *v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  _QWORD *v15;
  _QWORD v16[6];
  __int128 v17;
  char v18;

  OUTLINED_FUNCTION_111_7();
  if ((v6 & 1) != 0)
  {
    *(_QWORD *)&v17 = v1;
    OUTLINED_FUNCTION_26_37();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v7 = OUTLINED_FUNCTION_133_1();
    if (v7)
    {
      v8 = (_QWORD *)v7;
      OUTLINED_FUNCTION_122_3(v1);
    }
    else
    {
      v8 = (_QWORD *)OUTLINED_FUNCTION_49_0();
      *v15 = v17;
    }
    v14 = 1;
    OUTLINED_FUNCTION_122_3(v1);
  }
  else
  {
    v8 = v4;
    v9 = v3;
    v10 = *((_BYTE *)v5 + 16);
    v11 = v1[2];
    v17 = *v5;
    v18 = v10;
    OUTLINED_FUNCTION_51_0();
    MLDataValue.featureValue.getter();
    MEMORY[0x24BDAC7A8](v12);
    v16[2] = v11;
    v16[3] = v13;
    v14 = OUTLINED_FUNCTION_83_11((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in CMLTable.fillMissing(columnNamed:with:), (uint64_t)v16, v9, (uint64_t)v8, (void (*)(_QWORD))type metadata accessor for CMLTable, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    OUTLINED_FUNCTION_13_7();
    if (v8)
    {
      outlined consume of Result<_DataTable, Error>(v1, 0);
      v14 = 1;
    }
    else
    {
      type metadata accessor for _DataTable();
      v8 = (_QWORD *)OUTLINED_FUNCTION_9_1();
      OUTLINED_FUNCTION_143_1(v8);
      OUTLINED_FUNCTION_20_40(v1);
    }
  }
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 8) = v14;
  OUTLINED_FUNCTION_8_0();
}

#error "21AF7374C: call analysis failed (funcsize=52)"

uint64_t MLDataTable.prefix(_:)(uint64_t a1)
{
  return MLDataTable.prefix(_:)(a1, specialized handling<A, B, C>(_:_:_:));
}

uint64_t MLDataTable.suffix(_:)(uint64_t a1)
{
  return MLDataTable.prefix(_:)(a1, specialized handling<A, B, C>(_:_:_:));
}

#error "21AF7389C: call analysis failed (funcsize=74)"

void MLDataTable.sort(columnNamed:byIncreasingOrder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[3];
  char v13;
  void *v14;

  OUTLINED_FUNCTION_25_10();
  if ((v3 & 1) != 0)
  {
    v14 = v0;
    OUTLINED_FUNCTION_12_46();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (OUTLINED_FUNCTION_49_21())
    {
      OUTLINED_FUNCTION_122_3(v0);
    }
    else
    {
      OUTLINED_FUNCTION_49_0();
      *v9 = v14;
    }
    OUTLINED_FUNCTION_122_3(v0);
  }
  else
  {
    v4 = v2;
    v5 = v1;
    MEMORY[0x24BDAC7A8](v1);
    v12[2] = v6;
    v13 = v7 & 1;
    OUTLINED_FUNCTION_13_51();
    v8 = OUTLINED_FUNCTION_83_11((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in CMLTable.sorted(by:increasingOrder:), (uint64_t)v12, v5, v4, (void (*)(_QWORD))type metadata accessor for CMLTable, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    if (v4)
    {
      OUTLINED_FUNCTION_33_32();
    }
    else
    {
      v10 = v8;
      type metadata accessor for _DataTable();
      v11 = (_QWORD *)OUTLINED_FUNCTION_9_1();
      v11[3] = 0;
      v11[4] = 0;
      v11[2] = v10;
      OUTLINED_FUNCTION_20_40(v0);
    }
  }
  OUTLINED_FUNCTION_32_9();
  OUTLINED_FUNCTION_164();
}

void MLDataTable.expand(columnNamed:to:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MLDataTable.expand(columnNamed:to:)(a1, a2, (uint64_t)partial apply for closure #1 in CMLTable.stack(columnName:to:), a3);
}

void MLDataTable.condense(columnNamed:to:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MLDataTable.expand(columnNamed:to:)(a1, a2, (uint64_t)partial apply for closure #1 in CMLTable.unstack(columnName:newColumnName:), a3);
}

void MLDataTable.expand(columnNamed:to:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v18[7];
  void *v19;

  v6 = *(void **)v4;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    v19 = *(void **)v4;
    OUTLINED_FUNCTION_139_2();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v7 = OUTLINED_FUNCTION_49_21();
    if (v7)
    {
      v8 = v7;
      OUTLINED_FUNCTION_122_3(v6);
    }
    else
    {
      v8 = OUTLINED_FUNCTION_49_0();
      *v16 = v19;
    }
    LOBYTE(v11) = 1;
    OUTLINED_FUNCTION_122_3(v6);
  }
  else
  {
    v8 = a3;
    MEMORY[0x24BDAC7A8](a1);
    v11 = v18;
    v18[2] = v12;
    v18[3] = v13;
    v18[4] = v14;
    OUTLINED_FUNCTION_149();
    v15 = OUTLINED_FUNCTION_83_11((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))v8, (uint64_t)v18, a1, a2, (void (*)(_QWORD))type metadata accessor for CMLTable, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    if (v8)
    {
      OUTLINED_FUNCTION_31_31();
      LOBYTE(v11) = 1;
    }
    else
    {
      v17 = v15;
      type metadata accessor for _DataTable();
      v8 = OUTLINED_FUNCTION_9_1();
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 16) = v17;
      OUTLINED_FUNCTION_20_40(v6);
    }
  }
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 8) = (_BYTE)v11;
  OUTLINED_FUNCTION_8_0();
}

void MLDataTable.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  void *v1;
  char v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t countAndFlagsBits;
  void *object;
  id v39;
  id v40;
  Swift::String v41;
  Swift::String v42;

  OUTLINED_FUNCTION_111_7();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_59_22(v1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    a1[3] = MEMORY[0x24BEE0D00];
    OUTLINED_FUNCTION_122_3(v1);
    *a1 = 0;
    a1[1] = 0xE000000000000000;
LABEL_14:
    OUTLINED_FUNCTION_24_40();
    return;
  }
  OUTLINED_FUNCTION_12_3(v1);
  OUTLINED_FUNCTION_149_1();
  OUTLINED_FUNCTION_13_51();
  CMLTable.rows()();
  OUTLINED_FUNCTION_136();
  if (!v4)
  {
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    OUTLINED_FUNCTION_136_3(v41);
    OUTLINED_FUNCTION_12_0();
    v5._countAndFlagsBits = 0x20582073776F7220;
    v5._object = (void *)0xE800000000000000;
    String.append(_:)(v5);
    OUTLINED_FUNCTION_114_5(v6, v7, v8);
    OUTLINED_FUNCTION_3_1();
    v9 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v9);
    v11 = v10;
    OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_3_1();
    v12 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v12);
    v14 = v13;
    OUTLINED_FUNCTION_4_2();
    if (v14 < 0)
    {
      __break(1u);
    }
    else
    {
      OUTLINED_FUNCTION_3_1();
      v15 = CMLSequence.size.getter();
      OUTLINED_FUNCTION_5_1(v15);
      v17 = v16;
      OUTLINED_FUNCTION_30_21();
      if ((v11 & 0x8000000000000000) == 0 && v17 >= v11)
      {
        v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        OUTLINED_FUNCTION_136_3(v42);
        OUTLINED_FUNCTION_12_0();
        v18._object = (void *)0x800000021AFF7E10;
        v18._countAndFlagsBits = 0xD000000000000016;
        String.append(_:)(v18);
        OUTLINED_FUNCTION_114_5(v19, v20, v21);
        OUTLINED_FUNCTION_13_51();
        v22 = OUTLINED_FUNCTION_48_23();
        OUTLINED_FUNCTION_5_1(v22);
        v24 = v23;
        OUTLINED_FUNCTION_13_51();
        v25 = CMLSequence.size.getter();
        OUTLINED_FUNCTION_5_1(v25);
        v27 = v26;
        OUTLINED_FUNCTION_136();
        if ((v27 & 0x8000000000000000) == 0)
        {
          OUTLINED_FUNCTION_13_51();
          v28 = OUTLINED_FUNCTION_48_23();
          OUTLINED_FUNCTION_5_1(v28);
          v30 = v29;
          OUTLINED_FUNCTION_30_21();
          if ((v24 & 0x8000000000000000) == 0 && v30 >= v24)
          {
            OUTLINED_FUNCTION_13_51();
            _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(0, v24);
            v31 = MEMORY[0x22075AAA4]();
            v33 = v32;
            swift_bridgeObjectRelease();
            v34._countAndFlagsBits = v31;
            v34._object = v33;
            String.append(_:)(v34);
            OUTLINED_FUNCTION_136();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined copy of Result<_DataTable, Error>(v1, 0);
            OUTLINED_FUNCTION_149();
            v35 = CMLTable.description()();
            if (v36)
            {
              OUTLINED_FUNCTION_40_0();
              OUTLINED_FUNCTION_13_7();
              countAndFlagsBits = 0;
              object = (void *)0xE000000000000000;
            }
            else
            {
              countAndFlagsBits = v35._countAndFlagsBits;
              object = v35._object;
              OUTLINED_FUNCTION_13_7();
            }
            OUTLINED_FUNCTION_102(v1);
            v39 = objc_allocWithZone(MEMORY[0x24BDD1688]);
            v40 = @nonobjc NSMutableAttributedString.init(string:attributes:)(countAndFlagsBits, (uint64_t)object, 0);
            a1[3] = type metadata accessor for NSMutableAttributedString();
            OUTLINED_FUNCTION_102(v1);
            *a1 = v40;
            goto LABEL_14;
          }
          goto LABEL_18;
        }
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_19:
  OUTLINED_FUNCTION_1_51();
  swift_unexpectedError();
  __break(1u);
}

uint64_t MLDataTable.description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t countAndFlagsBits;
  uint64_t v4;

  v1 = *(void **)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    return 0;
  }
  else
  {
    OUTLINED_FUNCTION_12_3(*(void **)v0);
    OUTLINED_FUNCTION_13_51();
    countAndFlagsBits = CMLTable.description()()._countAndFlagsBits;
    if (v4)
    {
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_136();
      OUTLINED_FUNCTION_102(v1);
      return 0;
    }
    else
    {
      v2 = countAndFlagsBits;
      OUTLINED_FUNCTION_136();
      OUTLINED_FUNCTION_102(v1);
    }
  }
  return v2;
}

id @nonobjc NSMutableAttributedString.init(string:attributes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  NSDictionary v6;
  id v7;

  v5 = (void *)MEMORY[0x22075A8AC]();
  swift_bridgeObjectRelease();
  if (a3)
  {
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    v6.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.isa = 0;
  }
  v7 = objc_msgSend(v3, sel_initWithString_attributes_, v5, v6.super.isa);

  return v7;
}

void partial apply for closure #1 in MLDataTable.subscript.getter(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in MLDataTable.subscript.getter(a1, *(void **)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

uint64_t objectdestroyTm_5()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject();
}

void partial apply for closure #2 in MLDataTable.subscript.getter(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  closure #2 in MLDataTable.subscript.getter(a1, a2);
}

void specialized closure #1 in LazyMapSequence<>.map<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5, void (*a6)(_QWORD *__return_ptr, _QWORD *))
{
  void *v7;
  char v8;
  _QWORD v9[3];
  char v10;
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  a6(v9, v11);
  a3(v9);
  v7 = (void *)v9[2];
  v8 = v10;
  swift_bridgeObjectRelease();
  outlined consume of Result<_DataTable, Error>(v7, v8);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  void *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  char v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  double v36;
  id v37;
  Swift::String v38;
  void *v39;
  void *v40;
  char v41;
  _QWORD *v42;
  void (*v43)(void **__return_ptr, _QWORD *);
  char v44;
  uint64_t (*v45)(_QWORD *);
  void (*v46)(_QWORD *__return_ptr, id *);
  _QWORD v47[2];
  id v48[2];
  _QWORD v49[2];
  unsigned __int8 v50;
  void *v51;
  void *v52;
  unsigned __int8 v53;
  void *v54;
  void *v55;
  char v56;
  uint64_t v57;

  v4 = v3;
  v7 = *a1;
  v45 = (uint64_t (*)(_QWORD *))a1[3];
  v46 = (void (*)(_QWORD *__return_ptr, id *))a1[1];
  v43 = (void (*)(void **__return_ptr, _QWORD *))a1[5];
  v8 = a1[6];
  OUTLINED_FUNCTION_149();
  OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_3_1();
  if (!CMLDictionary.size.getter())
  {
LABEL_21:
    OUTLINED_FUNCTION_30_21();
    OUTLINED_FUNCTION_30_21();
    OUTLINED_FUNCTION_30_21();
    OUTLINED_FUNCTION_30_21();
    return;
  }
  v44 = a2;
  v42 = a3;
  v9 = 0;
  while (1)
  {
    while (1)
    {
      v10 = CMLDictionary.keyAndValue(at:)(v9);
      v57 = v4;
      if (v4)
        goto LABEL_24;
      v12 = (void *)v10;
      v13 = v11;
      OUTLINED_FUNCTION_149();
      specialized RandomAccessCollection<>.index(after:)(v9, CMLDictionary.size.getter);
      v9 = v14;
      OUTLINED_FUNCTION_13_7();
      v48[0] = v12;
      v48[1] = v13;
      v46(v47, v48);
      OUTLINED_FUNCTION_136();
      OUTLINED_FUNCTION_217();
      v15 = v7;
      OUTLINED_FUNCTION_150_1();
      if ((v45(v49) & 1) != 0)
        break;
      OUTLINED_FUNCTION_54_19();
      v16 = CMLDictionary.size.getter();
      v4 = v57;
      if (v9 == v16)
        goto LABEL_21;
    }
    OUTLINED_FUNCTION_150_1();
    v43(&v51, v49);
    OUTLINED_FUNCTION_54_19();
    v17 = v53;
    if (v53 == 255)
      goto LABEL_21;
    v19 = v51;
    v18 = v52;
    v49[0] = v51;
    v49[1] = v52;
    v50 = v53;
    v39 = v54;
    v40 = v55;
    v41 = v56;
    v21 = OUTLINED_FUNCTION_85_12();
    v22 = *(_QWORD *)(v8 + 16);
    v23 = (v20 & 1) == 0;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      swift_unexpectedError();
      __break(1u);
LABEL_25:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_26;
    }
    v24 = v20;
    if (*(_QWORD *)(v8 + 24) < v22 + v23)
      break;
    if ((v44 & 1) != 0)
    {
      if ((v20 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLDataValue, MLDataValue>);
      _NativeDictionary.copy()();
      if ((v24 & 1) != 0)
        goto LABEL_19;
    }
LABEL_15:
    v27 = (_QWORD *)*v42;
    *(_QWORD *)(*v42 + 8 * (v21 >> 6) + 64) |= 1 << v21;
    v28 = v27[6] + 24 * v21;
    *(_QWORD *)v28 = v19;
    *(_QWORD *)(v28 + 8) = v18;
    *(_BYTE *)(v28 + 16) = v17;
    v29 = v27[7] + 24 * v21;
    *(_QWORD *)v29 = v39;
    *(_QWORD *)(v29 + 8) = v40;
    *(_BYTE *)(v29 + 16) = v41;
    v30 = v27[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_23;
    v27[2] = v32;
    v7 = v15;
    v33 = CMLDictionary.size.getter();
    v44 = 1;
    v4 = v57;
    if (v9 == v33)
      goto LABEL_21;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  v25 = OUTLINED_FUNCTION_85_12();
  if ((v24 & 1) != (v26 & 1))
    goto LABEL_25;
  v21 = v25;
  if ((v24 & 1) == 0)
    goto LABEL_15;
LABEL_19:
  v34 = v18;
  v35 = (void *)OUTLINED_FUNCTION_49_0();
  swift_willThrow(v36);
  v48[0] = v35;
  v37 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    OUTLINED_FUNCTION_184();
    OUTLINED_FUNCTION_13_7();
    OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_81();
    outlined consume of MLDataValue(v39, v40, v41);
    outlined consume of MLDataValue(v19, v34, v17);
    OUTLINED_FUNCTION_184();
    OUTLINED_FUNCTION_13_7();
    OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_81();

    return;
  }
LABEL_26:
  v47[0] = 0;
  v47[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v38._object = (void *)0x800000021AFF4630;
  v38._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v38);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_152(39);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  unint64_t v8;
  unint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  double v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v8 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v8)
  {
LABEL_21:
    swift_bridgeObjectRelease_n();
    return;
  }
  v9 = 0;
  v10 = (char *)(a1 + 48);
  v33 = a3;
  v34 = a3 - a2;
  v32 = a2;
  while (1)
  {
    if (v9 >= v8)
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_29;
    }
    if (v34 == v9)
      goto LABEL_21;
    if (a3 < a2)
      goto LABEL_24;
    if ((uint64_t)(a2 + v9) >= a3)
      goto LABEL_25;
    v11 = (void *)*((_QWORD *)v10 - 2);
    v12 = (void *)*((_QWORD *)v10 - 1);
    v13 = *v10;
    outlined copy of MLDataValue(v11, v12, *v10);
    if ((_DWORD)v13 == 255)
      goto LABEL_21;
    v36 = a2 + v9;
    v14 = (_QWORD *)*a5;
    v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11, (uint64_t)v12, v13);
    v17 = v14[2];
    v18 = (v15 & 1) == 0;
    if (__OFADD__(v17, v18))
      goto LABEL_26;
    v19 = v15;
    if (v14[3] < v17 + v18)
      break;
    if ((a4 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLDataValue, Int>);
      _NativeDictionary.copy()();
      if ((v19 & 1) != 0)
        goto LABEL_19;
    }
LABEL_15:
    v22 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v23 = v22[6] + 24 * v16;
    *(_QWORD *)v23 = v11;
    *(_QWORD *)(v23 + 8) = v12;
    *(_BYTE *)(v23 + 16) = v13;
    *(_QWORD *)(v22[7] + 8 * v16) = v36;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_27;
    ++v9;
    v22[2] = v26;
    v8 = *(_QWORD *)(a1 + 16);
    v10 += 24;
    a4 = 1;
    a2 = v32;
    a3 = v33;
    if (v9 == v8)
      goto LABEL_21;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11, (uint64_t)v12, v13);
  if ((v19 & 1) != (v21 & 1))
    goto LABEL_28;
  v16 = v20;
  if ((v19 & 1) == 0)
    goto LABEL_15;
LABEL_19:
  v27 = (void *)swift_allocError();
  swift_willThrow(v28);
  v29 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of MLDataValue(v11, v12, v13);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_29:
  _StringGuts.grow(_:)(30);
  v30._object = (void *)0x800000021AFF4630;
  v30._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v30);
  _print_unlocked<A, B>(_:_:)();
  v31._countAndFlagsBits = 39;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, void (*a2)(Swift::String *__return_ptr, Swift::String *), uint64_t a3, char a4, _QWORD *a5)
{
  void *v5;
  void *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t object;
  char v19;
  uint64_t countAndFlagsBits;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(Swift::String *__return_ptr, Swift::String *);
  uint64_t v55;
  void *v56;
  char v57;
  Swift::String v59;
  Swift::String v60;
  void *v61;
  char v62;
  id v63;

  v6 = v5;
  v54 = a2;
  swift_retain_n();
  v55 = a3;
  swift_retain();
  v9 = CMLSequence.size.getter();
  specialized RandomAccessCollection<>.distance(from:to:)(0, v9);
  v11 = v10;
  swift_release();
  if (!v11)
  {
LABEL_20:
    swift_release_n();
    swift_release_n();
    return;
  }
  v12 = 0;
  while (1)
  {
    CMLSequence.value(at:)(v12);
    if (v6)
      goto LABEL_24;
    v13 = CMLFeatureValue.stringValue()();
    v6 = v14;
    if (v14)
      goto LABEL_25;
    swift_release();
    swift_retain();
    v15 = CMLSequence.size.getter();
    specialized RandomAccessCollection<>.distance(from:to:)(0, v15);
    v17 = v16;
    swift_release();
    if (v12 >= v17)
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      swift_unexpectedError();
      __break(1u);
LABEL_25:

      swift_release();
      v59._countAndFlagsBits = 0;
      v59._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v59._countAndFlagsBits = 0xD000000000000022;
      v59._object = (void *)0x800000021AFF1560;
      v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._countAndFlagsBits = 46;
      v48._object = (void *)0xE100000000000000;
      String.append(_:)(v48);
      goto LABEL_26;
    }
    v59 = v13;
    v54(&v60, &v59);
    swift_bridgeObjectRelease();
    object = (uint64_t)v60._object;
    if (!v60._object)
      goto LABEL_20;
    v19 = a4;
    countAndFlagsBits = v60._countAndFlagsBits;
    v56 = v61;
    v59 = v60;
    v57 = v62;
    v21 = (_QWORD *)*a5;
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(v60._countAndFlagsBits, (uint64_t)v60._object);
    v30 = v21[2];
    v31 = (v22 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_22;
    v33 = v22;
    if (v21[3] >= v32)
    {
      if ((v19 & 1) != 0)
      {
        if ((v22 & 1) != 0)
          break;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLUntypedColumn>);
        _NativeDictionary.copy()();
        if ((v33 & 1) != 0)
          break;
      }
      goto LABEL_14;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, v19 & 1, v23, v24, v25, v26, v27, v28, v51, v52, v53, v54, v55, SBYTE4(v55));
    v34 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, object);
    if ((v33 & 1) != (v35 & 1))
      goto LABEL_27;
    v29 = v34;
    if ((v33 & 1) != 0)
      break;
LABEL_14:
    v36 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v29 >> 6) + 64) |= 1 << v29;
    v37 = (uint64_t *)(v36[6] + 16 * v29);
    *v37 = countAndFlagsBits;
    v37[1] = object;
    v38 = v36[7] + 16 * v29;
    *(_QWORD *)v38 = v56;
    *(_BYTE *)(v38 + 8) = v57;
    v39 = v36[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
      goto LABEL_23;
    ++v12;
    v36[2] = v41;
    swift_retain();
    v42 = CMLSequence.size.getter();
    specialized RandomAccessCollection<>.distance(from:to:)(0, v42);
    v44 = v43;
    swift_release();
    a4 = 1;
    if (v12 == v44)
      goto LABEL_20;
  }
  v45 = (void *)swift_allocError();
  swift_willThrow();
  v63 = v45;
  v46 = v45;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
  {
    while (1)
    {
      _StringGuts.grow(_:)(30);
      v49._object = (void *)0x800000021AFF4630;
      v49._countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v49);
      _print_unlocked<A, B>(_:_:)();
      v50._countAndFlagsBits = 39;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
LABEL_26:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_27:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
  }
  swift_release();
  swift_release();
  outlined consume of Result<_DataTable, Error>(v56, v57);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  void *v37;
  double v38;
  id v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v6 = v5;
  v48 = a1[2];
  if (v48 && a2 != a3)
  {
    if (a3 >= a2)
    {
      v44 = v6;
      v12 = a1[4];
      v11 = a1[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46 = a2 - a3;
      if (a2 >= a3)
      {
LABEL_27:
        __break(1u);
      }
      else
      {
        v13 = a1 + 7;
        v14 = 1;
        v45 = a3;
        v47 = a1;
        while (1)
        {
          v15 = (_QWORD *)*a5;
          v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
          v24 = v15[2];
          v25 = (v16 & 1) == 0;
          v26 = v24 + v25;
          if (__OFADD__(v24, v25))
            break;
          v27 = v16;
          if (v15[3] >= v26)
          {
            if ((a4 & 1) != 0)
            {
              if ((v16 & 1) != 0)
                goto LABEL_24;
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
              _NativeDictionary.copy()();
              if ((v27 & 1) != 0)
                goto LABEL_24;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, a4 & 1, v17, v18, v19, v20, v21, v22, v42, v43, v44, v45, v46, SBYTE4(v46));
            v28 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
            if ((v27 & 1) != (v29 & 1))
              goto LABEL_32;
            v23 = v28;
            if ((v27 & 1) != 0)
            {
LABEL_24:
              v37 = (void *)swift_allocError();
              swift_willThrow(v38);
              v39 = v37;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
              if ((swift_dynamicCast() & 1) != 0)
                goto LABEL_33;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();

              return;
            }
          }
          v30 = a2 + v14;
          v31 = (_QWORD *)*a5;
          *(_QWORD *)(*a5 + 8 * (v23 >> 6) + 64) |= 1 << v23;
          v32 = (uint64_t *)(v31[6] + 16 * v23);
          *v32 = v12;
          v32[1] = v11;
          *(_QWORD *)(v31[7] + 8 * v23) = a2 + v14 - 1;
          v33 = v31[2];
          v34 = __OFADD__(v33, 1);
          v35 = v33 + 1;
          if (v34)
            goto LABEL_29;
          v31[2] = v35;
          if (v48 == v14)
            goto LABEL_26;
          if (v14 >= v47[2])
            goto LABEL_30;
          if (!(v46 + v14))
          {
LABEL_26:
            swift_bridgeObjectRelease_n();
            return;
          }
          ++v14;
          v12 = *(v13 - 1);
          v11 = *v13;
          swift_bridgeObjectRetain();
          v13 += 2;
          a4 = 1;
          if (v30 < a2 || v30 >= v45)
            goto LABEL_27;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
    }
    __break(1u);
LABEL_32:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_33:
    _StringGuts.grow(_:)(30);
    v40._object = (void *)0x800000021AFF4630;
    v40._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v40);
    _print_unlocked<A, B>(_:_:)();
    v41._countAndFlagsBits = 39;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized closure #1 in Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

_QWORD *_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq58CreateML19CMLFeatureValueTypeO_Tg507_sSRys4f5VGxs5e29_pIgyrzo_ACxsAD_pIegyrzr_lTR8h4ML19jkL5O_TG5SRyAGGAMsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t var2;

  if (a1)
  {
    result = a3(&var2);
    if (!v3)
      return (_QWORD *)var2;
  }
  else
  {
    result = ((_QWORD *(*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      return (_QWORD *)BYTE1(var2);
  }
  return result;
}

uint64_t specialized LazyMapSequence.underestimatedCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_retain();
  v0 = CMLSequence.size.getter();
  specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
  v2 = v1;
  swift_release();
  swift_retain();
  v3 = CMLSequence.size.getter();
  specialized RandomAccessCollection<>.distance(from:to:)(0, v3);
  v5 = v4;
  result = swift_release();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    v7 = CMLSequence.size.getter();
    specialized RandomAccessCollection<>.distance(from:to:)(0, v7);
    v9 = v8;
    result = swift_release();
    if ((v2 & 0x8000000000000000) == 0 && v9 >= v2)
      return v2;
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Sequence<>.contains(_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized closure #1 in Sequence<>.contains(_:)(*a1, a1[1], *a2, a2[1]) & 1;
}

void specialized closure #1 in LazyMapSequence<>.map<A>(_:)(uint64_t *a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4)
{
  specialized closure #1 in LazyMapSequence<>.map<A>(_:)(*a1, a1[1], a2, a3, *(_QWORD *)a4, *(void (**)(_QWORD *__return_ptr, _QWORD *))(a4 + 8));
}

uint64_t sub_21AF75204()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in LazyMapSequence<>.map<A>(_:)(uint64_t *a1)
{
  uint64_t v1;

  specialized closure #1 in LazyMapSequence<>.map<A>(_:)(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32);
}

void partial apply for closure #1 in CMLTable.columnType(name:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CMLTable.columnType(name:)(a1, v1);
}

uint64_t sub_21AF7525C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLDataTable.map<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in MLDataTable.map<A>(_:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(_QWORD *))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_21AF752A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLDataTable.map<A>(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in MLDataTable.map<A>(_:)(a1, *(void (**)(__int128 *))(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

void partial apply for closure #1 in CMLTable.fillMissing(columnNamed:with:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CMLTable.fillMissing(columnNamed:with:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CMLTable.sorted(by:increasingOrder:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CMLTable.sorted(by:increasingOrder:)(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

_QWORD *partial apply for closure #1 in CMLTable.stack(columnName:to:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in CMLTable.stack(columnName:to:)(a1, v2[2], v2[3], v2[4], a2);
}

_QWORD *partial apply for closure #1 in CMLTable.unstack(columnName:newColumnName:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in CMLTable.unstack(columnName:newColumnName:)(a1, v2[2], v2[3], v2[4], a2);
}

unint64_t type metadata accessor for NSMutableAttributedString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSMutableAttributedString;
  if (!lazy cache variable for type metadata for NSMutableAttributedString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLDataTable.JoinType and conformance MLDataTable.JoinType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.JoinType and conformance MLDataTable.JoinType;
  if (!lazy protocol witness table cache variable for type MLDataTable.JoinType and conformance MLDataTable.JoinType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.JoinType, &type metadata for MLDataTable.JoinType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.JoinType and conformance MLDataTable.JoinType);
  }
  return result;
}

uint64_t sub_21AF753C0()
{
  return 0;
}

uint64_t sub_21AF753D8()
{
  return 16;
}

__n128 sub_21AF753E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void destroy for MLDataTable(uint64_t a1)
{
  outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
}

ValueMetadata *type metadata accessor for MLDataTable()
{
  return &type metadata for MLDataTable;
}

uint64_t storeEnumTagSinglePayload for MLDataTable.JoinType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21AF7546C + 4 * byte_21AFEF6A9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21AF754A0 + 4 * byte_21AFEF6A4[v4]))();
}

uint64_t sub_21AF754A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF754A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AF754B0);
  return result;
}

uint64_t sub_21AF754BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AF754C4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21AF754C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF754D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MLDataTable.JoinType()
{
  return &type metadata for MLDataTable.JoinType;
}

void outlined consume of (MLDataValue, MLDataValue)?(void *a1, void *a2, char a3, void *a4, void *a5, char a6)
{
  if (a3 != -1)
  {
    outlined consume of MLDataValue(a1, a2, a3);
    outlined consume of MLDataValue(a4, a5, a6);
  }
}

void outlined init with take of (key: String, value: MLDataValueConvertible)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  OUTLINED_FUNCTION_22();
}

uint64_t partial apply for closure #1 in CMLTable.init(joiningMultiple:and:columnNames:method:)(uint64_t a1)
{
  _QWORD *v1;

  return closure #1 in CMLTable.init(joiningMultiple:and:columnNames:method:)(a1, v1[2], v1[3], v1[4]);
}

void outlined consume of Result<(), Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t partial apply for closure #1 in CMLTable.removeColumn(name:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CMLTable.removeColumn(name:)(a1, v1);
}

void OUTLINED_FUNCTION_0_70()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 8 * (v0 >> 6) + 64) |= 1 << v0;
  v4 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v0);
  *v4 = v1;
  v4[1] = v2;
}

unint64_t OUTLINED_FUNCTION_7_52()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0, v1);
}

BOOL OUTLINED_FUNCTION_8_55(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  Swift::Bool v14;
  Swift::Int v15;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v14, v15);
}

void OUTLINED_FUNCTION_11_49(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  a1[3] = 0;
  a1[4] = 0;
  a1[2] = v1;
  outlined consume of Result<_DataTable, Error>(v2, 0);
}

id OUTLINED_FUNCTION_12_46()
{
  void *v0;

  outlined copy of Result<_DataTable, Error>(v0, 1);
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_51()
{
  return swift_retain();
}

unint64_t OUTLINED_FUNCTION_14_46()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0, v1);
}

void OUTLINED_FUNCTION_20_40(void *a1)
{
  outlined consume of Result<_DataTable, Error>(a1, 0);
}

void OUTLINED_FUNCTION_21_37()
{
  MLDataTable.willMutate()();
}

id OUTLINED_FUNCTION_26_37()
{
  void *v0;

  outlined copy of Result<_DataTable, Error>(v0, 1);
  return v0;
}

void OUTLINED_FUNCTION_31_31()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_32_26(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return type metadata accessor for _DataTable();
}

void OUTLINED_FUNCTION_33_32()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
}

double OUTLINED_FUNCTION_37_19(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_40_26()
{
  return swift_unexpectedError();
}

void OUTLINED_FUNCTION_46_22(uint64_t a1@<X8>)
{
  char v1;
  uint64_t v2;

  *(_BYTE *)(a1 + v2) = v1;
}

uint64_t OUTLINED_FUNCTION_48_23()
{
  return CMLSequence.size.getter();
}

uint64_t OUTLINED_FUNCTION_49_21()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_53_23()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_54_19()
{
  char v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;

  outlined consume of (MLDataValue, MLDataValue)?(v3, v4, v5, v1, v2, v0);
}

id OUTLINED_FUNCTION_59_22(void *a1)
{
  return outlined copy of Result<_DataTable, Error>(a1, 1);
}

void OUTLINED_FUNCTION_63_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  char v11;

  a9 = v10;
  a10 = v11;
  MLDataTable.setColumnImpl(newColumn:named:)((uint64_t)&a9);
}

void OUTLINED_FUNCTION_64_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  char v10;
  uint64_t v11;

  a9 = v11;
  a10 = v10;
  MLDataTable.setColumnImpl(newColumn:named:)((uint64_t)&a9);
}

id OUTLINED_FUNCTION_71_13()
{
  void *v0;

  return outlined copy of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_73_16()
{
  return swift_release();
}

void OUTLINED_FUNCTION_80_12(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  uint64_t v14;
  Swift::String v15;

  v15._countAndFlagsBits = v14;
  v15._object = v13;
  String.append(_:)(v15);
}

void OUTLINED_FUNCTION_82_10()
{
  _StringGuts.grow(_:)(37);
}

_QWORD *OUTLINED_FUNCTION_83_11(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(void))
{
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t OUTLINED_FUNCTION_85_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0, v2);
}

void OUTLINED_FUNCTION_91_9()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
  outlined consume of Result<_DataTable, Error>(v0, 0);
}

void OUTLINED_FUNCTION_93_7(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  uint64_t v21;
  Swift::String v22;

  v22._countAndFlagsBits = v21;
  v22._object = v20;
  String.append(_:)(v22);
}

void OUTLINED_FUNCTION_98_6()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_101_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return MLDataTable.subscript.setter(&a9, v10, v9);
}

void OUTLINED_FUNCTION_102_4()
{
  MLDataTable.addImpl(newColumn:named:)();
}

void OUTLINED_FUNCTION_103_7()
{
  _StringGuts.grow(_:)(34);
}

uint64_t OUTLINED_FUNCTION_104_7()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_112_6()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_113_8()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_114_5(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return _DataTable.columnNames.getter((uint64_t *)va);
}

id OUTLINED_FUNCTION_116_6()
{
  void *v0;

  return outlined copy of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_118_5()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_119_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t *OUTLINED_FUNCTION_120_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

void OUTLINED_FUNCTION_121_7(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_124_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  void *v18;

  outlined consume of Result<_DataTable, Error>(v18, a18);
}

void OUTLINED_FUNCTION_128_4()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)v0, *(_BYTE *)(v0 + 8));
}

void OUTLINED_FUNCTION_129_1()
{
  uint64_t v0;
  uint64_t v1;

  outlined consume of Result<_DataTable, Error>(*(id *)v0, *(_BYTE *)(v0 + 8));
  *(_QWORD *)v0 = v1;
  *(_BYTE *)(v0 + 8) = 1;
}

uint64_t OUTLINED_FUNCTION_131_4()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_133_1()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

void OUTLINED_FUNCTION_134_2(uint64_t a1)
{
  CMLSequence.value(at:)(a1);
}

void OUTLINED_FUNCTION_136_3(Swift::String a1)
{
  String.append(_:)(a1);
}

id OUTLINED_FUNCTION_139_2()
{
  void *v0;

  outlined copy of Result<_DataTable, Error>(v0, 1);
  return v0;
}

_QWORD *OUTLINED_FUNCTION_143_1(_QWORD *result)
{
  uint64_t v1;

  result[3] = 0;
  result[4] = 0;
  result[2] = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_144_2()
{
  return CMLSequence.size.getter();
}

uint64_t OUTLINED_FUNCTION_146_3()
{
  return type metadata accessor for CMLTable();
}

void OUTLINED_FUNCTION_148_1()
{
  JUMPOUT(0x22075BC08);
}

void OUTLINED_FUNCTION_149_1()
{
  _StringGuts.grow(_:)(36);
}

void String.featureValue.getter()
{
  OUTLINED_FUNCTION_16_17();
  swift_bridgeObjectRetain();
  CMLFeatureValue.__allocating_init(_:)();
  OUTLINED_FUNCTION_27_0();
}

#error "21AF75BB4: call analysis failed (funcsize=21)"

#error "21AF75C08: call analysis failed (funcsize=20)"

uint64_t MLDataValueConvertible.featureValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_10_46();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_2_59(v3, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureValueConvertible);
  if (OUTLINED_FUNCTION_11_50())
  {
    outlined init with take of BinaryFloatingPoint(&v10, (uint64_t)&v13);
    v4 = v16;
    __swift_project_boxed_opaque_existential_1(&v13, v15);
    v5 = OUTLINED_FUNCTION_9_50(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v13);
  }
  else
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)&v10, &demangling cache variable for type metadata for FeatureValueConvertible?);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v0 + 32))(&v13, v1, v0);
    v6 = v13;
    v7 = v14;
    v10 = v13;
    LOBYTE(v11) = v14;
    MLDataValue.featureValue.getter();
    v5 = v8;
    outlined consume of MLDataValue((void *)v6, *((id *)&v6 + 1), v7);
  }
  return v5;
}

uint64_t Int.dataValue.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

void Double.dataValue.getter(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

uint64_t String.dataValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 2;
  return swift_bridgeObjectRetain();
}

uint64_t static MLDataValueConvertible.makeInstance(featureValue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_0;
  int v19;
  _QWORD v20[2];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  char v25;

  v7 = dynamic_cast_existential_1_conditional(v3);
  if (v7)
  {
    v9 = v7;
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v12 = type metadata accessor for Optional();
    v20[1] = v20;
    v13 = *(_QWORD *)(v12 - 8);
    MEMORY[0x24BDAC7A8](v12);
    v15 = (char *)v20 - v14;
    v16 = swift_retain();
    v11(v16, v9, v10);
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v9) == 1)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      v23 = 0;
      v21 = 0u;
      v22 = 0u;
    }
    else
    {
      *((_QWORD *)&v22 + 1) = v9;
      v23 = v10;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v21);
      (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(boxed_opaque_existential_0, v15, v9);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureValueConvertible?);
    v19 = swift_dynamicCast();
    return __swift_storeEnumTagSinglePayload(a3, v19 ^ 1u, 1, a1);
  }
  else
  {
    swift_retain();
    MLDataValue.init(_:)();
    v24 = v21;
    v25 = v22;
    return (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a2 + 16))(&v24, a1, a2);
  }
}

uint64_t Double.init(from:)()
{
  uint64_t v0;
  uint64_t v1;

  specialized handling<A, B>(_:_:)();
  v1 = v0;
  swift_release();
  return v1;
}

uint64_t String.init(from:)()
{
  uint64_t countAndFlagsBits;
  uint64_t v1;

  countAndFlagsBits = CMLFeatureValue.stringValue()()._countAndFlagsBits;
  swift_release();
  if (v1)
  {
    OUTLINED_FUNCTION_40_0();
    return 0;
  }
  return countAndFlagsBits;
}

#error "21AF75FFC: call analysis failed (funcsize=21)"

uint64_t MLDataValueConvertible.featureColumn.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7[2];
  uint64_t v8;
  _QWORD v9[5];

  OUTLINED_FUNCTION_10_46();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_2_59(v1, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMLColumnConvertible);
  if (OUTLINED_FUNCTION_11_50())
  {
    outlined init with take of BinaryFloatingPoint(v7, (uint64_t)v9);
    v2 = v9[4];
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    v3 = OUTLINED_FUNCTION_9_50(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  }
  else
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v7, &demangling cache variable for type metadata for CMLColumnConvertible?);
    type metadata accessor for CMLColumn();
    v4 = MLDataValueConvertible.featureValue.getter();
    return CMLColumn.__allocating_init(repeating:count:)(v4, 1);
  }
  return v3;
}

void Int.init(from:)(uint64_t a1)
{
  int v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)OUTLINED_FUNCTION_13_52(a1);
  if (v1)
    OUTLINED_FUNCTION_12_47(v2, v3);
  OUTLINED_FUNCTION_22();
}

void protocol witness for MLDataValueConvertible.init(from:) in conformance Int(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  Int.init(from:)(a1);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for MLDataValueConvertible.dataValue.getter in conformance Int@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return Int.dataValue.getter(*v1, a1);
}

uint64_t protocol witness for FeatureValueConvertible.init(from:) in conformance Int@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = Int.init(from:)(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t protocol witness for FeatureValueConvertible.featureValue.getter in conformance Int()
{
  _QWORD *v0;

  return Int.featureValue.getter(*v0);
}

void static Bool.dataValueType.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Bool.init(from:)(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (!*(_BYTE *)(a1 + 16))
    return v2 != 0;
  outlined consume of MLDataValue(v2, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return 2;
}

{
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_56(a1);
  OUTLINED_FUNCTION_15_40();
  if (!v2)
    return v1 != 0;
  OUTLINED_FUNCTION_40_0();
  return 2;
}

uint64_t Bool.dataValue.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result & 1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t protocol witness for MLDataValueConvertible.init(from:) in conformance Bool@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = Bool.init(from:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for MLDataValueConvertible.init() in conformance Bool(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for MLDataValueConvertible.dataValue.getter in conformance Bool@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  return Bool.dataValue.getter(*v1, a1);
}

uint64_t protocol witness for FeatureValueConvertible.init(from:) in conformance Bool@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = Bool.init(from:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for FeatureValueConvertible.featureValue.getter in conformance Bool()
{
  unsigned __int8 *v0;

  return Bool.featureValue.getter(*v0);
}

void Int64.init(from:)(uint64_t a1)
{
  int v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)OUTLINED_FUNCTION_13_52(a1);
  if (v1)
    OUTLINED_FUNCTION_12_47(v2, v3);
  OUTLINED_FUNCTION_22();
}

uint64_t Int.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_56(a1);
  OUTLINED_FUNCTION_15_40();
  if (v2)
  {
    OUTLINED_FUNCTION_40_0();
    return 0;
  }
  return v1;
}

#error "21AF7633C: call analysis failed (funcsize=20)"

void protocol witness for MLDataValueConvertible.init(from:) in conformance Int64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  Int64.init(from:)(a1);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4 & 1;
}

uint64_t protocol witness for FeatureValueConvertible.featureValue.getter in conformance Int64()
{
  _QWORD *v0;

  return Int64.featureValue.getter(*v0);
}

void static Double.dataValueType.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void Double.init(from:)(uint64_t a1)
{
  int v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)OUTLINED_FUNCTION_13_52(a1);
  if (v1 != 1)
    OUTLINED_FUNCTION_12_47(v2, v3);
  OUTLINED_FUNCTION_22();
}

void protocol witness for MLDataValueConvertible.init(from:) in conformance Double(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  Double.init(from:)(a1);
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  OUTLINED_FUNCTION_22();
}

void protocol witness for MLDataValueConvertible.dataValue.getter in conformance Double(uint64_t a1@<X8>)
{
  double *v1;

  Double.dataValue.getter(a1, *v1);
}

uint64_t protocol witness for FeatureValueConvertible.init(from:) in conformance Double@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = Double.init(from:)();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t protocol witness for FeatureValueConvertible.featureValue.getter in conformance Double()
{
  double *v0;

  return Double.featureValue.getter(*v0);
}

void static String.dataValueType.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void *String.init(from:)(uint64_t a1)
{
  void *result;
  int v3;

  result = *(void **)a1;
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 != 2)
  {
    outlined consume of MLDataValue(result, *(id *)(a1 + 8), v3);
    return 0;
  }
  return result;
}

void protocol witness for MLDataValueConvertible.init(from:) in conformance String(uint64_t a1@<X0>, void **a2@<X8>)
{
  void *v3;

  *a2 = String.init(from:)(a1);
  a2[1] = v3;
  OUTLINED_FUNCTION_22();
}

void protocol witness for MLDataValueConvertible.init() in conformance String(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

uint64_t protocol witness for MLDataValueConvertible.dataValue.getter in conformance String@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return String.dataValue.getter(*v1, v1[1], a1);
}

uint64_t protocol witness for FeatureValueConvertible.init(from:) in conformance String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = String.init(from:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for FeatureValueConvertible.featureValue.getter in conformance String()
{
  String.featureValue.getter();
}

uint64_t dispatch thunk of static MLDataValueConvertible.dataValueType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MLDataValueConvertible.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MLDataValueConvertible.dataValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dynamic_cast_existential_1_conditional(uint64_t a1)
{
  if (swift_conformsToProtocol2())
    return a1;
  else
    return 0;
}

uint64_t OUTLINED_FUNCTION_2_59@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
}

uint64_t OUTLINED_FUNCTION_3_52()
{
  uint64_t v0;

  return CMLFeatureValue.init(rawValue:ownsValue:)(v0, 1);
}

uint64_t OUTLINED_FUNCTION_6_57(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

void OUTLINED_FUNCTION_8_56(uint64_t a1)
{
  specialized handling<A, B>(_:_:)(*(_QWORD *)(a1 + 16));
}

uint64_t OUTLINED_FUNCTION_9_50@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_11_50()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_12_47@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v2;

  outlined consume of MLDataValue(a1, *(id *)(a2 + 8), v2);
  return 0;
}

uint64_t OUTLINED_FUNCTION_13_52(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void OUTLINED_FUNCTION_14_47(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  specialized handling<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30);
}

uint64_t OUTLINED_FUNCTION_15_40()
{
  return swift_release();
}

void MLLogisticRegressionClassifier.Model.export(internalMetadata:)(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (**v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD, _QWORD);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  uint64_t (*v70)(uint64_t, uint64_t, _QWORD);
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD, _QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _QWORD v87[2];
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (**v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(_QWORD, _QWORD);
  uint64_t v112;
  uint64_t v113;
  Swift::Int v114;
  uint64_t v115;
  uint64_t v116;

  v101 = a1;
  v96 = type metadata accessor for FeatureType();
  v95 = *(_QWORD *)(v96 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_64();
  v97 = v3;
  v93 = type metadata accessor for LinearClassifierConfiguration.ClassLabels();
  v92 = *(_QWORD *)(v93 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v5);
  v109 = type metadata accessor for ModelKind();
  v102 = *(uint64_t (***)(uint64_t, uint64_t))(v109 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  v100 = v7;
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_28_3((uint64_t)v87 - v9);
  v10 = type metadata accessor for LinearClassifierConfiguration();
  v107 = *(_QWORD *)(v10 - 8);
  v108 = v10;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v99 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v14);
  v15 = type metadata accessor for Model();
  v103 = *(_QWORD *)(v15 - 8);
  v104 = v15;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_208();
  v98 = v17;
  MEMORY[0x24BDAC7A8](v18);
  v106 = (char *)v87 - v19;
  v20 = type metadata accessor for URL.DirectoryHint();
  v110 = *(_QWORD *)(v20 - 8);
  v111 = (void (*)(_QWORD, _QWORD))v20;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for UUID();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for URL();
  v112 = *(_QWORD *)(v28 - 8);
  v113 = v28;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_208();
  v105 = v30;
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (uint64_t (**)(uint64_t, uint64_t))((char *)v87 - v33);
  v35 = MEMORY[0x24BDAC7A8](v32);
  v37 = (char *)v87 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)v87 - v38;
  v40 = v1[2];
  if (!v40)
    goto LABEL_13;
  v41 = v114;
  v42 = specialized FeatureVectorizer.Transformer.exportEncoders()(v1[2], v1[3], v1[4]);
  if (!v41)
  {
    v87[1] = v40;
    v114 = v42;
    v88 = v39;
    v89 = v1;
    v43 = (void *)objc_opt_self();
    v44 = objc_msgSend(v43, sel_defaultManager);
    NSFileManager.createTemporaryModelDirectory()();
    if (v45)
    {
      OUTLINED_FUNCTION_12_36();

    }
    else
    {

      v46 = objc_msgSend(v43, sel_defaultManager);
      NSFileManager.temporaryModelDirectory.getter();

      UUID.init()();
      v47 = UUID.uuidString.getter();
      v49 = v48;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
      v115 = v47;
      v116 = v49;
      v51 = v110;
      v50 = v111;
      (*(void (**)(char *, _QWORD, void (*)(_QWORD, _QWORD)))(v110 + 104))(v23, *MEMORY[0x24BDCD7A0], v111);
      lazy protocol witness table accessor for type String and conformance String();
      URL.appending<A>(component:directoryHint:)();
      (*(void (**)(char *, _QWORD))(v51 + 8))(v23, v50);
      swift_bridgeObjectRelease();
      v52 = v112;
      v53 = *(void (**)(char *, uint64_t))(v112 + 8);
      OUTLINED_FUNCTION_11_34((uint64_t)v34);
      v54 = (uint64_t)v88;
      URL.appendingPathExtension(_:)();
      OUTLINED_FUNCTION_11_34((uint64_t)v37);
      v55 = type metadata accessor for MLLogisticRegressionClassifier.Model();
      BaseLogisticRegressionClassifierModel.export(to:)();
      OUTLINED_FUNCTION_216((uint64_t)v105, v54, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16));
      v56 = (uint64_t)v106;
      Model.init(contentsOf:)();
      v112 = 0;
      v57 = v90;
      specialized BidirectionalCollection.last.getter(v114, v90);
      v58 = v104;
      if (__swift_getEnumTagSinglePayload(v57, 1, v104) == 1)
      {
        __break(1u);
        goto LABEL_13;
      }
      Model.outputs.getter();
      v111 = *(void (**)(_QWORD, _QWORD))(v103 + 8);
      v111(v57, v58);
      Model.inputs.setter();
      v59 = v89;
      v61 = (uint64_t (*)(uint64_t, uint64_t))*v89;
      v60 = v89[1];
      OUTLINED_FUNCTION_195();
      Model.predictedFeatureName.setter();
      v105 = v61;
      v115 = (uint64_t)v61;
      v116 = v60;
      OUTLINED_FUNCTION_195();
      OUTLINED_FUNCTION_0_51();
      Model.predictedProbabilitiesName.setter();
      Dictionary.init(dictionaryLiteral:)();
      Model.metadata.setter();
      v62 = v91;
      Model.kind.getter();
      v34 = v102;
      v63 = v102[11](v62, v109);
      v64 = *MEMORY[0x24BE63238];
      LODWORD(v110) = v63;
      v65 = v108;
      if (v63 != v64)
      {
        while (1)
        {
          OUTLINED_FUNCTION_13_39(v34[1]);
LABEL_13:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      OUTLINED_FUNCTION_13_39(v34[12]);
      v66 = v62;
      v67 = v99;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 32))(v99, v66, v65);
      v68 = (char *)v59 + *(int *)(v55 + 28);
      v69 = v68[8];
      *v94 = *(_QWORD *)v68;
      v70 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v92 + 104);
      if ((v69 & 1) != 0)
      {
        OUTLINED_FUNCTION_9_38(*MEMORY[0x24BE62B78], v70);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_14_48();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
        OUTLINED_FUNCTION_16_31();
        *(_OWORD *)(OUTLINED_FUNCTION_1_44() + 16) = xmmword_21AFE7F70;
        OUTLINED_FUNCTION_195();
        OUTLINED_FUNCTION_10_34();
        v71 = FeatureType.StringParameters.init(optional:)();
        OUTLINED_FUNCTION_6_43(v71, *MEMORY[0x24BE62578]);
        v72 = v105;
        OUTLINED_FUNCTION_2_45();
        v115 = (uint64_t)v72;
        v116 = v60;
        OUTLINED_FUNCTION_195();
        OUTLINED_FUNCTION_0_51();
        OUTLINED_FUNCTION_10_34();
        static FeatureType.dictionaryWithStringKeys(optional:)();
      }
      else
      {
        OUTLINED_FUNCTION_9_38(*MEMORY[0x24BE62B70], v70);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_14_48();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
        OUTLINED_FUNCTION_16_31();
        *(_OWORD *)(OUTLINED_FUNCTION_1_44() + 16) = xmmword_21AFE7F70;
        OUTLINED_FUNCTION_195();
        OUTLINED_FUNCTION_10_34();
        v73 = FeatureType.IntParameters.init(optional:)();
        OUTLINED_FUNCTION_6_43(v73, *MEMORY[0x24BE62560]);
        v74 = v105;
        OUTLINED_FUNCTION_2_45();
        v115 = (uint64_t)v74;
        v116 = v60;
        OUTLINED_FUNCTION_195();
        OUTLINED_FUNCTION_0_51();
        OUTLINED_FUNCTION_10_34();
        static FeatureType.dictionaryWithIntKeys(optional:)();
      }
      OUTLINED_FUNCTION_2_45();
      Model.outputs.setter();
      v75 = v100;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v100, v67, v108);
      v105 = v102[13];
      ((void (*)(uint64_t, _QWORD, uint64_t))v105)(v75, v110, v109);
      Model.kind.setter();
      v76 = v98;
      Model.init()();
      Model.specificationVersion.setter();
      v77 = swift_bridgeObjectRetain();
      v78 = v112;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n(v77);
      v112 = v78;
      swift_bridgeObjectRelease();
      Model.inputs.setter();
      Model.outputs.getter();
      Model.outputs.setter();
      v79 = (void (*)(_QWORD, _QWORD, _QWORD))*v89;
      v80 = v89[1];
      OUTLINED_FUNCTION_195();
      Model.predictedFeatureName.setter();
      v115 = (uint64_t)v79;
      v116 = v80;
      OUTLINED_FUNCTION_195();
      OUTLINED_FUNCTION_0_51();
      Model.predictedProbabilitiesName.setter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
      v81 = v67;
      v82 = v103;
      v83 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
      v84 = swift_allocObject();
      *(_OWORD *)(v84 + 16) = xmmword_21AFE7DA0;
      v85 = v104;
      OUTLINED_FUNCTION_216(v84 + v83, v56, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 16));
      v115 = v114;
      specialized Array.append<A>(contentsOf:)(v84);
      PipelineClassifierConfiguration.init(models:names:)();
      ((void (*)(uint64_t, _QWORD, uint64_t))v105)(v75, *MEMORY[0x24BE63268], v109);
      Model.kind.setter();
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v81, v108);
      v111(v56, v85);
      OUTLINED_FUNCTION_216(v101, v76, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 32));
      v86 = v88;
      $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
      v53(v86, v113);
    }
  }
}

uint64_t OUTLINED_FUNCTION_14_48()
{
  return LinearClassifierConfiguration.classLabels.setter();
}

uint64_t initializeBufferWithCopyOfBuffer for MLLinearRegressor.Regressor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    v8 = a2 + 3;
    v9 = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      *(_QWORD *)(a1 + 48) = v9;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(a1 + 24, (uint64_t)(a2 + 3), v9);
    }
    else
    {
      v11 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 24) = *v8;
      *(_OWORD *)(a1 + 40) = v11;
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v12 = *(int *)(a3 + 28);
    v13 = a1 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = type metadata accessor for BaseLinearRegressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for BaseLinearRegressor();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = (_OWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(_QWORD *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v8 - 8))(a1 + 24, v7, v8);
  }
  else
  {
    v9 = v7[1];
    *(_OWORD *)(a1 + 24) = *v7;
    *(_OWORD *)(a1 + 40) = v9;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for BaseLinearRegressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 48) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
      goto LABEL_8;
    }
LABEL_7:
    v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v7;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
LABEL_8:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for BaseLinearRegressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t initializeWithTake for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x49uLL);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for BaseLinearRegressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  v7 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_BYTE *)(a2 + 96);
  v10 = *(int *)(a3 + 28);
  v11 = a2 + v10;
  v12 = a1 + v10;
  *(_BYTE *)(a1 + 96) = v9;
  v13 = type metadata accessor for BaseLinearRegressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v12, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLinearRegressor.Regressor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF77464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_33_33();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MLLinearRegressor.Regressor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF774E0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = OUTLINED_FUNCTION_33_33();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MLLinearRegressor.Regressor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLLinearRegressor.Regressor;
  if (!type metadata singleton initialization cache for MLLinearRegressor.Regressor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MLLinearRegressor.Regressor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BaseLinearRegressor();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for SupervisedTabularEstimator.Transformer : TabularTransformer in MLLinearRegressor.Regressor()
{
  return lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model(&lazy protocol witness table cache variable for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model, (void (*)(uint64_t))type metadata accessor for MLLinearRegressor.Model);
}

uint64_t MLLinearRegressor.Regressor.init(annotationColumnName:featureColumnNames:parameters:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];

  v10 = OUTLINED_FUNCTION_33_33();
  v24 = *(_QWORD *)(v10 - 8);
  v25 = v10;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_49();
  v14 = v13 - v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinearRegressor<Double>.Configuration);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v24 - v20;
  *(_QWORD *)a5 = a1;
  *((_QWORD *)a5 + 1) = a2;
  *((_QWORD *)a5 + 2) = a3;
  outlined init with copy of MLLinearRegressor.ModelParameters(a4, (uint64_t)(a5 + 24));
  outlined init with copy of MLLinearRegressor.ModelParameters(a4, (uint64_t)v26);
  lazy protocol witness table accessor for type Double and conformance Double();
  LinearRegressor.Configuration.init()();
  LinearRegressor.Configuration.maximumIterations.setter();
  LinearRegressor.Configuration.l1Penalty.setter();
  LinearRegressor.Configuration.l2Penalty.setter();
  LinearRegressor.Configuration.stepSize.setter();
  LinearRegressor.Configuration.convergenceThreshold.setter();
  outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)v26);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v21, v15);
  BaseLinearRegressor.init(configuration:)();
  outlined destroy of MLLinearRegressor.ModelParameters(a4);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  v22 = type metadata accessor for MLLinearRegressor.Regressor();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 32))(&a5[*(int *)(v22 + 28)], v14, v25);
}

void MLLinearRegressor.Regressor.makeTransformer()(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  type metadata accessor for MLLinearRegressor.Regressor();
  type metadata accessor for MLLinearRegressor.Model();
  swift_bridgeObjectRetain();
  BaseLinearRegressor.makeTransformer()();
  *a1 = v4;
  a1[1] = v3;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  OUTLINED_FUNCTION_164();
}

void MLLinearRegressor.Regressor.update(_:with:eventHandler:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ML16ColumnDescriptorVsAE_pTg5;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[32];
  _QWORD *v52;

  v45 = a3;
  v46 = a4;
  v9 = type metadata accessor for BaseLinearRegressor();
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v48 = v11;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinearRegressor<Double>.Configuration);
  v47 = *(_QWORD *)(v49 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  v44 = v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v38 - v15;
  v50 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_21_38();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_49();
  v20 = v19 - v18;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  v40 = *(_QWORD *)(v21 - 8);
  v41 = v21;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_49();
  v26 = v25 - v24;
  v27 = a1[2];
  v52 = v4;
  if (!v27)
  {
    v39 = v25 - v24;
    v38 = (uint64_t)&v38;
    v36 = v4[2];
    MEMORY[0x24BDAC7A8](v23);
    *(&v38 - 2) = a2;
    swift_bridgeObjectRetain();
    ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)partial apply for closure #1 in FeatureVectorizer.fitted(to:), (uint64_t)(&v38 - 4), v36);
    swift_bridgeObjectRelease();
    v26 = v39;
    if (v5)
      goto LABEL_6;
    outlined consume of FeatureVectorizer<Float>.Transformer?(a1[2]);
    a1[2] = ML16ColumnDescriptorVsAE_pTg5;
    a1[3] = 0xD000000000000013;
    a1[4] = 0x800000021AFF21B0;
  }
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
  if (v5)
  {
LABEL_6:
    OUTLINED_FUNCTION_7();
    return;
  }
  v28 = v52;
  MEMORY[0x220758A1C](*v52, v52[1]);
  AnyColumn.convertedToDoubles()();
  v30 = v29;
  v31 = v20;
  v32 = v30;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v31, v50);
  if (v32)
  {
    outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)(v28 + 3), (uint64_t)v51);
    lazy protocol witness table accessor for type Double and conformance Double();
    LinearRegressor.Configuration.init()();
    v33 = v49;
    LinearRegressor.Configuration.maximumIterations.setter();
    OUTLINED_FUNCTION_25_36();
    OUTLINED_FUNCTION_27_41();
    OUTLINED_FUNCTION_24_41();
    OUTLINED_FUNCTION_23_40();
    outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)v51);
    v34 = v47;
    OUTLINED_FUNCTION_216(v44, (uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16));
    v35 = v48;
    BaseLinearRegressor.init(configuration:)();
    OUTLINED_FUNCTION_28_29();
    BaseLinearRegressor.update(_:features:annotations:eventHandler:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v35, v43);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v33);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v26, v41);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t MLLinearRegressor.Regressor.annotationColumnID.getter()
{
  swift_bridgeObjectRetain();
  return ColumnID.init(_:_:)();
}

void MLLinearRegressor.Regressor.annotationColumnID.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Double>);
  v5 = ColumnID.name.getter();
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  *v2 = v5;
  v2[1] = v7;
  OUTLINED_FUNCTION_164();
}

void MLLinearRegressor.Regressor.fitted(to:validateOn:eventHandler:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ML16ColumnDescriptorVsAE_pTg5;
  uint64_t v36;
  _QWORD v37[13];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53[16];
  uint64_t v54;
  uint64_t v55;

  v41 = a4;
  v40 = a3;
  v44 = a2;
  v39 = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v9);
  v47 = type metadata accessor for DataFrame();
  v42 = *(_QWORD *)(v47 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v11);
  v38 = type metadata accessor for BaseLinearRegressorModel();
  v37[11] = *(_QWORD *)(v38 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_28_3((uint64_t)v37 - v15);
  v46 = type metadata accessor for BaseLinearRegressor();
  v43 = *(_QWORD *)(v46 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_64();
  v48 = v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinearRegressor<Double>.Configuration);
  v19 = *(_QWORD *)(v18 - 8);
  v49 = v18;
  v50 = v19;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v21);
  v45 = (char *)v37 - v22;
  v23 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_21_38();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_49();
  v27 = v26 - v25;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)v37 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v51 = a1;
  v52 = v5;
  v33 = *(_QWORD *)(v5 + 16);
  v54 = a1;
  swift_bridgeObjectRetain();
  v34 = v55;
  ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)closure #1 in FeatureVectorizer.fitted(to:)partial apply, (uint64_t)v53, v33);
  if (!v34)
  {
    v37[8] = v6;
    v37[9] = v27;
    v55 = v23;
    v37[5] = v31;
    v37[6] = v29;
    v37[7] = v28;
    v36 = ML16ColumnDescriptorVsAE_pTg5;
    swift_bridgeObjectRelease();
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    v37[3] = "raining samples.";
    v37[4] = v36;
    OUTLINED_FUNCTION_31_32();
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7();
}

void sub_21AF77F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD, uint64_t);
  uint64_t v35;
  void (*v36)(uint64_t, _QWORD);
  void (*v37)(_QWORD, _QWORD);
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  Swift::String v44;

  AnyColumn.convertedToDoubles()();
  v7 = v6;
  v8 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 384) + 8);
  v8(v4, *(_QWORD *)(v5 - 72));
  *(_QWORD *)(v5 - 384) = v7;
  if (!v7)
  {
    OUTLINED_FUNCTION_8_57();
    OUTLINED_FUNCTION_14_49();
    v16 = *(_QWORD *)(v5 - 160);
    *(_QWORD *)(v5 - 168) = *(_QWORD *)(v5 - 168);
    *(_QWORD *)(v5 - 160) = v16;
    OUTLINED_FUNCTION_15_4(v1 + 30, (uint64_t)"Regression target values must be numeric but got ");
    OUTLINED_FUNCTION_31_32();
  }
  *(_QWORD *)(v5 - 440) = v8;
  *(_QWORD *)(v5 - 432) = v3;
  outlined init with copy of MLLinearRegressor.ModelParameters(v2 + 24, v5 - 168);
  lazy protocol witness table accessor for type Double and conformance Double();
  v9 = *(_QWORD *)(v5 - 256);
  LinearRegressor.Configuration.init()();
  LinearRegressor.Configuration.maximumIterations.setter();
  OUTLINED_FUNCTION_25_36();
  OUTLINED_FUNCTION_27_41();
  OUTLINED_FUNCTION_24_41();
  OUTLINED_FUNCTION_23_40();
  outlined destroy of MLLinearRegressor.ModelParameters(v5 - 168);
  v10 = *(_QWORD *)(v5 - 216);
  OUTLINED_FUNCTION_216(*(_QWORD *)(v5 - 280), v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 232);
  BaseLinearRegressor.init(configuration:)();
  v12 = *(_QWORD *)(v5 - 264);
  outlined init with copy of DataFrame?(*(_QWORD *)(v5 - 272), v12);
  v13 = *(_QWORD *)(v5 - 240);
  if (__swift_getEnumTagSinglePayload(v12, 1, v13) == 1)
  {
    outlined destroy of DataFrame?(v12);
    v14 = *(_QWORD *)(v5 - 328);
    OUTLINED_FUNCTION_29_31();
    v15 = *(_QWORD *)(v5 - 432);
    BaseLinearRegressor.fitted(features:annotations:eventHandler:)();
    if (v15)
    {
      swift_release();
      OUTLINED_FUNCTION_8_57();
      OUTLINED_FUNCTION_10_47();
      OUTLINED_FUNCTION_15_41(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
      OUTLINED_FUNCTION_5_49();
      goto LABEL_13;
    }
    swift_release();
    OUTLINED_FUNCTION_10_47();
    OUTLINED_FUNCTION_15_41(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    OUTLINED_FUNCTION_5_49();
    v22 = OUTLINED_FUNCTION_16_42();
    v23 = v14;
  }
  else
  {
    *(_QWORD *)(v5 - 272) = v0;
    v17 = *(_QWORD *)(v5 - 296);
    v18 = *(_QWORD *)(v5 - 320);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v18, v12, v13);
    v19 = *(_QWORD *)(v5 - 432);
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    v20 = *(_QWORD *)(v5 - 248);
    if (v19)
    {
      OUTLINED_FUNCTION_236();
      OUTLINED_FUNCTION_123();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v13);
      (*(void (**)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t))(*(_QWORD *)(v5 - 288) + 8))(v11, v20);
      OUTLINED_FUNCTION_15_41(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 216) + 8));
      OUTLINED_FUNCTION_5_21();
      OUTLINED_FUNCTION_6_58(*(_QWORD *)(v5 - 272), v21);
      goto LABEL_13;
    }
    v24 = *(_QWORD **)(v5 - 200);
    v25 = *(_QWORD *)(v5 - 376);
    MEMORY[0x220758A1C](*v24, v24[1]);
    AnyColumn.convertedToDoubles()();
    v27 = v26;
    v28 = *(_QWORD *)(v5 - 72);
    v29 = *(void (**)(uint64_t, uint64_t))(v5 - 440);
    v29(v25, v28);
    if (!v27)
    {
      OUTLINED_FUNCTION_236();
      OUTLINED_FUNCTION_8_57();
      OUTLINED_FUNCTION_14_49();
      v31 = *(_QWORD *)(v5 - 160);
      *(_QWORD *)(v5 - 168) = *(_QWORD *)(v5 - 168);
      *(_QWORD *)(v5 - 160) = v31;
      OUTLINED_FUNCTION_15_4(0xD000000000000031, (uint64_t)"Regression target values must be numeric but got ");
      MEMORY[0x220758A1C](*v24, v24[1]);
      AnyColumn.wrappedElementType.getter();
      v29(v25, v28);
      v44._countAndFlagsBits = OUTLINED_FUNCTION_28_34();
      OUTLINED_FUNCTION_38_24(v44);
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_51_6();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v32 = OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_4_56(v32, v33);
      v34 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 400) + 8);
      v35 = *(_QWORD *)(v5 - 392);
      v34(*(_QWORD *)(v5 - 408), v35);
      OUTLINED_FUNCTION_5_21();
      v36(v18, *(_QWORD *)(v5 - 240));
      OUTLINED_FUNCTION_5_21();
      v37(*(_QWORD *)(v5 - 232), *(_QWORD *)(v5 - 248));
      OUTLINED_FUNCTION_9_51();
      v34(*(_QWORD *)(v5 - 272), v35);
      goto LABEL_13;
    }
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 272);
    OUTLINED_FUNCTION_29_31();
    v10 = *(_QWORD *)(v5 - 408);
    BaseLinearRegressor.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:eventHandler:)();
    v11 = v30;
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_2_60();
    OUTLINED_FUNCTION_7_53();
    OUTLINED_FUNCTION_11_51();
    OUTLINED_FUNCTION_9_51();
    OUTLINED_FUNCTION_39_24();
    v22 = OUTLINED_FUNCTION_16_42();
    v23 = *(_QWORD *)(v5 - 368);
  }
  v38 = *(_QWORD *)(v5 - 344);
  v11(v22, v23, v38);
  v39 = *(uint64_t **)(v5 - 200);
  v41 = *v39;
  v40 = v39[1];
  v42 = OUTLINED_FUNCTION_28_29();
  v43 = *(_QWORD **)(v5 - 336);
  v11((uint64_t)v43 + *(int *)(v42 + 24), v10, v38);
  *v43 = v41;
  v43[1] = v40;
  v43[2] = *(_QWORD *)(v5 - 416);
  v43[3] = 0xD000000000000013;
  v43[4] = *(_QWORD *)(v5 - 424) | 0x8000000000000000;
  swift_bridgeObjectRetain();
LABEL_13:
  JUMPOUT(0x21AF77ED4);
}

uint64_t MLLinearRegressor.Regressor.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  __swift_mutable_project_boxed_opaque_existential_1(a2, *(_QWORD *)(a2 + 24));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer?);
  lazy protocol witness table accessor for type FeatureVectorizer<Double>.Transformer? and conformance <A> A?();
  result = dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  if (!v2)
  {
    OUTLINED_FUNCTION_28_29();
    __swift_mutable_project_boxed_opaque_existential_1(a2, *(_QWORD *)(a2 + 24));
    type metadata accessor for BaseLinearRegressorModel();
    lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model(&lazy protocol witness table cache variable for type BaseLinearRegressorModel and conformance BaseLinearRegressorModel, (void (*)(uint64_t))MEMORY[0x24BDC5D10]);
    return dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  }
  return result;
}

void MLLinearRegressor.Regressor.decode(from:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for BaseLinearRegressorModel();
  OUTLINED_FUNCTION_21_38();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v15 = v7;
  v8 = v2[1];
  v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
  __swift_mutable_project_boxed_opaque_existential_1(a1, *(_QWORD *)(a1 + 24));
  _s8CreateML17FeatureVectorizerV11TransformerVySd_GAEyx_GSeAAWlTm_0(&lazy protocol witness table cache variable for type FeatureVectorizer<Double>.Transformer and conformance FeatureVectorizer<A>.Transformer);
  swift_bridgeObjectRetain();
  dispatch thunk of EstimatorDecoder.decode<A>(_:)();
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    __swift_mutable_project_boxed_opaque_existential_1(a1, *(_QWORD *)(a1 + 24));
    lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model(&lazy protocol witness table cache variable for type BaseLinearRegressorModel and conformance BaseLinearRegressorModel, (void (*)(uint64_t))MEMORY[0x24BDC5D10]);
    dispatch thunk of EstimatorDecoder.decode<A>(_:)();
    *a2 = v10;
    a2[1] = v8;
    a2[2] = v12;
    a2[3] = v13;
    a2[4] = v14;
    v9 = OUTLINED_FUNCTION_28_29();
    OUTLINED_FUNCTION_216((uint64_t)a2 + *(int *)(v9 + 24), v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
  }
  OUTLINED_FUNCTION_7();
}

void (*protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance MLLinearRegressor.Regressor(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Double>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  MLLinearRegressor.Regressor.annotationColumnID.getter();
  return protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance MLLinearRegressor.Regressor;
}

void protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance MLLinearRegressor.Regressor(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    MLLinearRegressor.Regressor.annotationColumnID.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    MLLinearRegressor.Regressor.annotationColumnID.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  MLLinearRegressor.Regressor.fitted(to:validateOn:eventHandler:)(a2, a3, a4, a5, a1);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2)
{
  return MLLinearRegressor.Regressor.encode(_:to:)(a1, a2);
}

void protocol witness for SupervisedTabularEstimator.decode(from:) in conformance MLLinearRegressor.Regressor(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  MLLinearRegressor.Regressor.decode(from:)(a1, a2);
}

uint64_t base witness table accessor for SupervisedTabularEstimator in MLLinearRegressor.Regressor()
{
  return lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model(&lazy protocol witness table cache variable for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor, (void (*)(uint64_t))type metadata accessor for MLLinearRegressor.Regressor);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.update(_:with:eventHandler:) in conformance MLLinearRegressor.Regressor(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  MLLinearRegressor.Regressor.update(_:with:eventHandler:)(a1, a2, a3, a4);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.encodeWithOptimizer(_:to:) in conformance MLLinearRegressor.Regressor(uint64_t a1, uint64_t a2)
{
  return protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance MLLinearRegressor.Regressor(a1, a2);
}

void protocol witness for UpdatableSupervisedTabularEstimator.decodeWithOptimizer(from:) in conformance MLLinearRegressor.Regressor(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  protocol witness for SupervisedTabularEstimator.decode(from:) in conformance MLLinearRegressor.Regressor(a1, a2);
}

uint64_t _s8CreateML17FeatureVectorizerV11TransformerVySd_GAEyx_GSeAAWlTm_0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
    OUTLINED_FUNCTION_62();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model(uint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    a2(255);
    OUTLINED_FUNCTION_62();
  }
  return result;
}

uint64_t outlined destroy of DataFrame?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_2_60()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 400) + 8))(v0, *(_QWORD *)(v1 - 392));
}

uint64_t OUTLINED_FUNCTION_4_56(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 1;
  return swift_willThrow(0.0);
}

uint64_t OUTLINED_FUNCTION_5_49()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 400) + 8))(v0, *(_QWORD *)(v1 - 392));
}

uint64_t OUTLINED_FUNCTION_6_58@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 392));
}

uint64_t OUTLINED_FUNCTION_7_53()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 296) + 8))(*(_QWORD *)(v0 - 320), *(_QWORD *)(v0 - 240));
}

uint64_t OUTLINED_FUNCTION_8_57()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_9_51()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 216) + 8))(v0, *(_QWORD *)(v1 - 224));
}

uint64_t OUTLINED_FUNCTION_10_47()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 288) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_11_51()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 288) + 8))(v0, *(_QWORD *)(v1 - 248));
}

void OUTLINED_FUNCTION_14_49()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 168) = 0;
  *(_QWORD *)(v0 - 160) = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
}

uint64_t OUTLINED_FUNCTION_15_41@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_16_42()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 352);
}

uint64_t OUTLINED_FUNCTION_23_40()
{
  return LinearRegressor.Configuration.convergenceThreshold.setter();
}

uint64_t OUTLINED_FUNCTION_24_41()
{
  return LinearRegressor.Configuration.stepSize.setter();
}

uint64_t OUTLINED_FUNCTION_25_36()
{
  return LinearRegressor.Configuration.l1Penalty.setter();
}

uint64_t OUTLINED_FUNCTION_27_41()
{
  return LinearRegressor.Configuration.l2Penalty.setter();
}

uint64_t OUTLINED_FUNCTION_28_34()
{
  return _typeName(_:qualified:)();
}

uint64_t OUTLINED_FUNCTION_29_31()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_31_32()
{
  JUMPOUT(0x220758A1CLL);
}

uint64_t OUTLINED_FUNCTION_33_33()
{
  return type metadata accessor for BaseLinearRegressor();
}

void OUTLINED_FUNCTION_38_24(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_39_24()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t instantiation function for generic protocol witness table for Adam<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x22075B938](MEMORY[0x24BE6BBC0]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVySSSaySdG_G_SSs5NeverOTg5101_s8CreateML16_ModelCheckpointPAA14NeuralNetworks5Layer0C0RpzrlE4save2toy10Foundation3URLV_tKFS2SXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v3 = specialized _NativeDictionary.startIndex.getter(v2);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v5 = v3;
      if (v3 < 1 << *(_BYTE *)(v2 + 32))
      {
        v6 = v4;
        v7 = v2 + 64;
        v15 = v2 + 64;
        while ((*(_QWORD *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(v2 + 36))
            goto LABEL_18;
          v8 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v5);
          v9 = v8[1];
          v16 = v1;
          v17 = *v8;
          v10 = v2;
          v12 = *(_QWORD *)(v18 + 16);
          v11 = *(_QWORD *)(v18 + 24);
          swift_bridgeObjectRetain();
          if (v12 >= v11 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          *(_QWORD *)(v18 + 16) = v12 + 1;
          v13 = v18 + 16 * v12;
          *(_QWORD *)(v13 + 32) = v17;
          *(_QWORD *)(v13 + 40) = v9;
          if ((uint64_t)v5 >= -(-1 << *(_BYTE *)(v10 + 32)))
            goto LABEL_19;
          v7 = v15;
          if ((*(_QWORD *)(v15 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
            goto LABEL_20;
          v2 = v10;
          if (v6 != *(_DWORD *)(v10 + 36))
            goto LABEL_21;
          v14 = _HashTable.occupiedBucket(after:)();
          v1 = v16 - 1;
          if (v16 == 1)
            return;
          v5 = v14;
          if ((v14 & 0x8000000000000000) == 0)
          {
            v6 = *(_DWORD *)(v2 + 36);
            if (v14 < 1 << *(_BYTE *)(v2 + 32))
              continue;
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySSSaySdG_G_AHs5NeverOTg5107_s8CreateML16_ModelCheckpointPAA14NeuralNetworks5Layer0C0RpzrlE4save2toy10Foundation3URLV_tKFSaySdGAMXEfU0_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    v15 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = specialized Dictionary.Values.startIndex.getter(v2);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v5 = v3;
      if (v3 < 1 << *(_BYTE *)(v2 + 32))
      {
        v6 = v4;
        v7 = v2 + 64;
        v13 = v2 + 64;
        while ((*(_QWORD *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(v2 + 36))
            goto LABEL_18;
          v14 = v1;
          v8 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5);
          v9 = v2;
          v11 = *(_QWORD *)(v15 + 16);
          v10 = *(_QWORD *)(v15 + 24);
          swift_bridgeObjectRetain();
          if (v11 >= v10 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          *(_QWORD *)(v15 + 16) = v11 + 1;
          *(_QWORD *)(v15 + 8 * v11 + 32) = v8;
          if ((uint64_t)v5 >= -(-1 << *(_BYTE *)(v9 + 32)))
            goto LABEL_19;
          v7 = v13;
          if ((*(_QWORD *)(v13 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
            goto LABEL_20;
          v2 = v9;
          if (v6 != *(_DWORD *)(v9 + 36))
            goto LABEL_21;
          v12 = _HashTable.occupiedBucket(after:)();
          v1 = v14 - 1;
          if (v14 == 1)
            return;
          v5 = v12;
          if ((v12 & 0x8000000000000000) == 0)
          {
            v6 = *(_DWORD *)(v2 + 36);
            if (v12 < 1 << *(_BYTE *)(v2 + 32))
              continue;
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void specialized _ModelCheckpoint<>.save(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  void *v16;
  char v17;

  OUTLINED_FUNCTION_8_1();
  v2 = OUTLINED_FUNCTION_78();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_91_1();
  v4 = MLHandActionClassifier.GraphCNN.getCheckpointStatesDictionary()();
  if (!v0)
  {
    v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
    *(_QWORD *)(inited + 32) = 1937335659;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    v7 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVySSSaySdG_G_SSs5NeverOTg5101_s8CreateML16_ModelCheckpointPAA14NeuralNetworks5Layer0C0RpzrlE4save2toy10Foundation3URLV_tKFS2SXEfU_Tf1cn_n(v7);
    v9 = v8;
    OUTLINED_FUNCTION_10_3();
    *(_QWORD *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v10 = lazy protocol witness table accessor for type [Int] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String], (uint64_t)&protocol witness table for String);
    *(_QWORD *)(inited + 48) = v9;
    *(_QWORD *)(inited + 80) = v10;
    *(_QWORD *)(inited + 88) = 0x7365756C6176;
    *(_QWORD *)(inited + 96) = 0xE600000000000000;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySSSaySdG_G_AHs5NeverOTg5107_s8CreateML16_ModelCheckpointPAA14NeuralNetworks5Layer0C0RpzrlE4save2toy10Foundation3URLV_tKFSaySdGAMXEfU0_Tf1cn_n(v5);
    v12 = v11;
    OUTLINED_FUNCTION_10_3();
    *(_QWORD *)(inited + 128) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[Double]]);
    *(_QWORD *)(inited + 136) = lazy protocol witness table accessor for type [[Double]] and conformance <A> [A]();
    *(_QWORD *)(inited + 104) = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
    v13 = Dictionary.init(dictionaryLiteral:)();
    MLDataTable.init(dictionary:)(v13, (uint64_t)&v16);
    v14 = v16;
    v15 = v17;
    URL.appendingPathComponent(_:)();
    MLDataTable.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    outlined consume of Result<_DataTable, Error>(v14, v15);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t (*HandActionClassifierTrainingSessionDelegate.sourceTable.modify())()
{
  swift_beginAccess();
  return HandActionClassifierTrainingSessionDelegate.sourceTable.modify;
}

uint64_t HandActionClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  v4 = OUTLINED_FUNCTION_20_41();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  OUTLINED_FUNCTION_100_4(OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceValidationRowCount) = 0;
  OUTLINED_FUNCTION_63_17(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures);
  OUTLINED_FUNCTION_63_17(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_metricsAttributesDictionary) = MEMORY[0x24BEE4B00];
  outlined init with take of MLHandPoseClassifier.ModelParameters(a1, v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

void HandActionClassifierTrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)();
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  void *v81;
  char v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  void *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  uint64_t (*v104)(_QWORD);
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  void *v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)();
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  unsigned __int8 v146;
  uint64_t v147;
  char v148;

  OUTLINED_FUNCTION_58_11();
  v138 = v1;
  v139 = v4;
  v143 = v5;
  v144 = v6;
  v7 = v5;
  v119 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v120 = v9;
  v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v123 = *(_QWORD *)(v124 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v122 = v11;
  v129 = type metadata accessor for AnyColumn();
  v128 = *(_QWORD *)(v129 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  v121 = v13;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_211();
  v127 = v15;
  v133 = type metadata accessor for DataFrame();
  v132 = *(int **)(v133 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_208();
  v126 = v17;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_211();
  v131 = v19;
  v20 = (int *)OUTLINED_FUNCTION_20_41();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_53_0();
  v22 = (char *)OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_31_4();
  v141 = type metadata accessor for MLHandActionClassifier.DataSource();
  v24 = type metadata accessor for MLHandActionClassifier.DataSource;
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_208();
  v130 = v26;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_65_5();
  v137 = v28;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v115 - v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_77_3(v33, v115);
  v142 = &v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters];
  OUTLINED_FUNCTION_61_4((uint64_t)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters], 1);
  OUTLINED_FUNCTION_100_4(OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceValidationRowCount] = 0;
  v134 = &v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures];
  OUTLINED_FUNCTION_68_20((uint64_t)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures]);
  v118 = (uint64_t)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures];
  OUTLINED_FUNCTION_68_20((uint64_t)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures]);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model] = 0;
  v125 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels] = 0;
  v140 = v0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_metricsAttributesDictionary] = MEMORY[0x24BEE4B00];
  outlined init with copy of MLTrainingSessionParameters(v7, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
  outlined init with copy of MLTrainingSessionParameters(v144, v3, type metadata accessor for MLHandActionClassifier.ModelParameters);
  v34 = v20[6];
  v135 = (char *)v20[7];
  v36 = v20[8];
  v35 = v20[9];
  *(_QWORD *)(v2 + v35) = 0x403E000000000000;
  OUTLINED_FUNCTION_146_4((uint64_t)v31);
  outlined init with copy of MLTrainingSessionParameters(v3, v2 + v20[5], type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  *(_QWORD *)(v2 + v34) = *(_QWORD *)(v3 + *((int *)v22 + 5));
  *(_QWORD *)(v2 + v36) = *(_QWORD *)(v3 + *((int *)v22 + 7));
  v37 = v143;
  *(_QWORD *)&v135[v2] = *(_QWORD *)(v3 + *((int *)v22 + 6));
  *(_QWORD *)(v2 + v20[10]) = *(_QWORD *)(v3 + *((int *)v22 + 8));
  v135 = v22;
  v38 = *(_QWORD *)(v3 + *((int *)v22 + 10));
  outlined destroy of MLHandPoseClassifier.ModelParameters(v3, type metadata accessor for MLHandActionClassifier.ModelParameters);
  *(_QWORD *)(v2 + v35) = v38;
  v39 = v2;
  v40 = v136;
  v41 = v137;
  v42 = (uint64_t)v142;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v39, v136, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
  OUTLINED_FUNCTION_61_4(v40, 0);
  OUTLINED_FUNCTION_44_7();
  outlined assign with take of MLHandActionClassifier.PersistentParameters?(v40, v42);
  OUTLINED_FUNCTION_25_11();
  outlined init with copy of MLTrainingSessionParameters(v37, v41, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
  if (OUTLINED_FUNCTION_123_5() == 3)
  {
    v132 = v20;
    v22 = *(char **)v41;
    v43 = *(unsigned __int8 *)(v41 + 8);
    v44 = *(_QWORD *)(v41 + 24);
    v133 = *(_QWORD *)(v41 + 16);
    v45 = *(_QWORD *)(v41 + 40);
    v136 = *(_QWORD *)(v41 + 32);
    v46 = *(_QWORD *)(v41 + 48);
    v24 = *(uint64_t (**)())(v41 + 56);
    v47 = v134;
    OUTLINED_FUNCTION_44_7();
    *(_QWORD *)v47 = v22;
    v47[8] = v43;
    outlined copy of Result<_DataTable, Error>(v22, v43);
    OUTLINED_FUNCTION_39_18();
    OUTLINED_FUNCTION_44_7();
    v48 = OUTLINED_FUNCTION_85_13();
    v49 = v138;
    static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(v48, v50, v24);
    if (v49)
    {
      OUTLINED_FUNCTION_25_11();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_80();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_16_20();
      v53 = 0;
      v22 = v140;
      v37 = v143;
      goto LABEL_29;
    }
    OUTLINED_FUNCTION_25_11();
    v51 = (uint64_t)v134;
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_142(v51, v133, v44, v46, (uint64_t)v24, v136, v45);
    OUTLINED_FUNCTION_25_11();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_10_3();
    v84 = v134;
    v85 = OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_45_7(v87, v85, v86, *(_QWORD *)v84, v84[8]);
    v88 = v145;
    v89 = v146;
    OUTLINED_FUNCTION_25_11();
    specialized MLDataColumn.dropDuplicates()(v88, v89, (uint64_t)&v147);
    OUTLINED_FUNCTION_39_18();
    v90 = OUTLINED_FUNCTION_117_2();
    outlined consume of Result<_DataTable, Error>(v22, v43);
    OUTLINED_FUNCTION_98_7();
    v20 = v132;
    goto LABEL_16;
  }
  v54 = v138;
  OUTLINED_FUNCTION_92(v41);
  v55 = v130;
  OUTLINED_FUNCTION_223(v37, v130);
  if (OUTLINED_FUNCTION_123_5() == 5)
  {
    v56 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
    v57 = (uint64_t *)(v55 + v56[12]);
    v59 = *v57;
    v58 = v57[1];
    v117 = v59;
    v137 = v58;
    v60 = (uint64_t *)(v55 + v56[16]);
    v62 = *v60;
    v61 = v60[1];
    v116 = v62;
    v136 = v61;
    v63 = (uint64_t *)(v55 + v56[20]);
    v64 = *v63;
    v24 = (uint64_t (*)())v63[1];
    v65 = v131;
    (*((void (**)(uint64_t, uint64_t, uint64_t))v132 + 4))(v131, v55, v133);
    v66 = v127;
    MEMORY[0x220758A1C](v64, v24);
    v67 = AnyColumn.wrappedElementType.getter();
    OUTLINED_FUNCTION_34_3(v66, *(uint64_t (**)(uint64_t, _QWORD))(v128 + 8));
    if (v67 == MEMORY[0x24BEE0D00])
    {
      DataFrame.subscript.getter();
      v75 = v121;
      Column<A>.parseAsJSONArrays()(v121);
      if (v54)
      {
        OUTLINED_FUNCTION_104();
        OUTLINED_FUNCTION_126_1();
        v76 = swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_88_6(v76, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
        OUTLINED_FUNCTION_57_20(v77, type metadata accessor for MLHandActionClassifier.ModelParameters);
        OUTLINED_FUNCTION_87_6(v78, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
        OUTLINED_FUNCTION_27_22();
        (*((void (**)(uint64_t, uint64_t))v132 + 1))(v65, v133);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_27_22();
      swift_bridgeObjectRetain();
      v130 = v64;
      v103 = v64;
      v68 = v24;
      MEMORY[0x220758A28](v75, v103, v24);
    }
    else
    {
      v130 = v64;
      v68 = v24;
    }
    v69 = v133;
    v70 = v132;
    v71 = v131;
    OUTLINED_FUNCTION_106_7(v126, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v132 + 2));
    MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v147);
    if (!v54)
    {
      v79 = v147;
      v80 = v148;
      v22 = v134;
      OUTLINED_FUNCTION_44_7();
      v81 = *(void **)v22;
      v82 = v22[8];
      *(_QWORD *)v22 = v79;
      v22[8] = v80;
      outlined consume of Result<_DataTable, Error>(v81, v82);
      OUTLINED_FUNCTION_44_7();
      v83 = v130;
      static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)((uint64_t)v22, v130, v68);
      swift_endAccess();
      OUTLINED_FUNCTION_44_7();
      OUTLINED_FUNCTION_142((uint64_t)v22, v117, v137, v83, (uint64_t)v68, v116, v136);
      swift_endAccess();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_123();
      v109 = OUTLINED_FUNCTION_44_7();
      OUTLINED_FUNCTION_45_7(v111, v109, v110, *(_QWORD *)v22, v22[8]);
      v112 = v145;
      v43 = v146;
      OUTLINED_FUNCTION_25_11();
      specialized MLDataColumn.dropDuplicates()(v112, v43, (uint64_t)&v147);
      outlined consume of Result<_DataTable, Error>(v112, v43);
      v90 = OUTLINED_FUNCTION_117_2();
      v113 = OUTLINED_FUNCTION_71_14();
      v114(v113, v133);
      OUTLINED_FUNCTION_98_7();
LABEL_16:
      v37 = v143;
      goto LABEL_17;
    }
    OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_126_1();
    v72 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_88_6(v72, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_57_20(v73, type metadata accessor for MLHandActionClassifier.ModelParameters);
    OUTLINED_FUNCTION_87_6(v74, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
    (*((void (**)(uint64_t, uint64_t))v70 + 1))(v71, v69);
LABEL_23:
    v22 = v140;
    goto LABEL_31;
  }
  outlined destroy of MLHandPoseClassifier.ModelParameters(v55, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
  static _VideoUtilities.videoURLsPerClass(from:)(v37);
  if (v54)
  {
    v53 = 0;
    v22 = v140;
    goto LABEL_29;
  }
  v43 = v52;
  v90 = specialized _copyCollectionToContiguousArray<A>(_:)(v52);
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_98_7();
LABEL_17:
  *(_QWORD *)&v22[v43] = v90;
  swift_bridgeObjectRelease();
  v91 = (uint64_t)v142;
  if (OUTLINED_FUNCTION_151_2((uint64_t)v142))
    goto LABEL_26;
  v92 = v91 + v20[5];
  v93 = v120;
  outlined init with copy of MLTrainingSessionParameters(v92, v120, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (OUTLINED_FUNCTION_123_5() == 3)
    {
      v94 = *(void **)v93;
      v95 = *(_BYTE *)(v93 + 8);
      v96 = *(_QWORD *)(v93 + 24);
      v138 = *(_QWORD *)(v93 + 16);
      v97 = *(_QWORD *)(v93 + 40);
      v98 = *(_QWORD *)(v93 + 48);
      v141 = *(_QWORD *)(v93 + 32);
      v142 = (char *)v97;
      v99 = *(void **)(v93 + 56);
      v100 = v118;
      OUTLINED_FUNCTION_44_7();
      v101 = *(void **)v100;
      v102 = *(_BYTE *)(v100 + 8);
      *(_QWORD *)v100 = v94;
      *(_BYTE *)(v100 + 8) = v95;
      outlined copy of Result<_DataTable, Error>(v94, v95);
      outlined consume of Result<_DataTable, Error>(v101, v102);
      OUTLINED_FUNCTION_44_7();
      static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(v100, v98, v99);
      swift_endAccess();
      OUTLINED_FUNCTION_44_7();
      OUTLINED_FUNCTION_142(v100, v138, v96, v98, (uint64_t)v99, v141, (uint64_t)v142);
      swift_endAccess();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_12_0();
      outlined consume of Result<_DataTable, Error>(v94, v95);
      v24 = v139;
      v22 = v140;
      v37 = v143;
      v43 = v125;
      goto LABEL_26;
    }
    v104 = (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource;
  }
  else
  {
    v104 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData;
  }
  outlined destroy of MLHandPoseClassifier.ModelParameters(v93, v104);
LABEL_26:
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v24, (uint64_t)&v22[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sessionParameters], (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  if (!*(_QWORD *)&v22[v43])
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v52 = OUTLINED_FUNCTION_18_0(v107, 0xD00000000000003DLL);
    v53 = 1;
LABEL_29:
    OUTLINED_FUNCTION_77_5(v52, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_57_20(v108, type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v37, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
    if (v53)
      goto LABEL_30;
LABEL_31:
    outlined destroy of URL?((uint64_t)&v22[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters], &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    outlined consume of MLDataTable?(*(void **)&v22[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable], v22[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable + 8]);
    OUTLINED_FUNCTION_66_8(OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures);
    OUTLINED_FUNCTION_66_8(OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for HandActionClassifierTrainingSessionDelegate();
    swift_deallocPartialClassInstance();
    goto LABEL_32;
  }
  v105 = v144;
  OUTLINED_FUNCTION_128_1();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_76_11();
  v106 = MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
  OUTLINED_FUNCTION_77_5((uint64_t)v106, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v105, type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v37, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
  *(_QWORD *)&v22[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model] = v106;
LABEL_30:
  swift_release();
LABEL_32:
  OUTLINED_FUNCTION_117_0();
}

void HandActionClassifierTrainingSessionDelegate.populateSourceTable(parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unsigned __int8 v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  unsigned __int8 v9;
  char v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  void *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned __int8 v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  char v24;
  void *v25;

  v2 = v0;
  OUTLINED_FUNCTION_20_41();
  MLHandActionClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(&v19, &v21);
  if (!v1)
  {
    v3 = v19;
    v4 = v20;
    v5 = v21;
    v6 = v22;
    if (v20 == 255)
    {
      if (v22 != 255)
      {
        v13 = v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable;
        OUTLINED_FUNCTION_44_7();
        v25 = *(void **)v13;
        *(_QWORD *)v13 = v5;
        v14 = *(_BYTE *)(v13 + 8);
        *(_BYTE *)(v13 + 8) = v6;
        OUTLINED_FUNCTION_29_13(v5);
        outlined consume of MLDataTable?(v25, v14);
        *(_QWORD *)(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
LABEL_11:
        v23 = v5;
        v18 = OUTLINED_FUNCTION_113_3();
        OUTLINED_FUNCTION_64_0();
        OUTLINED_FUNCTION_130_2();
LABEL_14:
        *(_QWORD *)(v2 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceValidationRowCount) = v18;
        return;
      }
      *(_QWORD *)(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
    }
    else
    {
      LODWORD(v25) = v20 & 1;
      v7 = v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable;
      if (v22 == 255)
      {
        OUTLINED_FUNCTION_44_7();
        v15 = *(void **)v7;
        *(_QWORD *)v7 = v3;
        v16 = *(_BYTE *)(v7 + 8);
        *(_BYTE *)(v7 + 8) = v4;
        OUTLINED_FUNCTION_122_2();
        OUTLINED_FUNCTION_29_13(v3);
        outlined consume of MLDataTable?(v15, v16);
      }
      else
      {
        OUTLINED_FUNCTION_44_7();
        v8 = *(void **)v7;
        *(_QWORD *)v7 = v3;
        v9 = *(_BYTE *)(v7 + 8);
        v10 = (char)v25;
        *(_BYTE *)(v7 + 8) = (_BYTE)v25;
        outlined copy of Result<_DataTable, Error>(v3, v10);
        OUTLINED_FUNCTION_122_2();
        outlined copy of MLDataTable?(v5, v6);
        outlined consume of MLDataTable?(v8, v9);
        v11 = HandActionClassifierTrainingSessionDelegate.sourceTable.modify();
        if (*(unsigned __int8 *)(v12 + 8) != 255)
        {
          v23 = v5;
          v24 = v6 & 1;
          MLDataTable.append(contentsOf:)();
        }
        ((void (*)(void **, _QWORD))v11)(&v19, 0);
        OUTLINED_FUNCTION_64_0();
        OUTLINED_FUNCTION_130_2();
        OUTLINED_FUNCTION_29_13(v3);
      }
      v23 = v3;
      v17 = OUTLINED_FUNCTION_113_3();
      OUTLINED_FUNCTION_64_0();
      *(_QWORD *)(v2 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount) = v17;
      if (v6 != 255)
        goto LABEL_11;
    }
    OUTLINED_FUNCTION_64_0();
    v18 = 0;
    goto LABEL_14;
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandActionClassifierTrainingSessionDelegate.setUp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OUTLINED_FUNCTION_20_41();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_53_0();
  v7 = v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v7, (uint64_t)v4, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  v8 = OUTLINED_FUNCTION_128((uint64_t)v4, 1, v5);
  if (v9)
  {
    OUTLINED_FUNCTION_93_1(v8, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_146_4((uint64_t)v4);
    HandActionClassifierTrainingSessionDelegate.populateSourceTable(parameters:)();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandActionClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[10];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_8_1();
  v40 = v2;
  v44 = v5;
  OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  v39[2] = v7;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_65_5();
  v39[4] = v9;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_65_5();
  v39[5] = v11;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_211();
  v39[9] = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  v39[8] = v15;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v39 - v17;
  v19 = type metadata accessor for MLCheckpoint();
  v39[6] = *(_QWORD *)(v19 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_208();
  v45 = v21;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_65_5();
  v39[7] = v23;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_65_5();
  v41 = v25;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_211();
  v43 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_161();
  v29 = OUTLINED_FUNCTION_20_41();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_31_4();
  v42 = v1;
  v31 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_109_8(v31, v3);
  v39[3] = v29;
  OUTLINED_FUNCTION_128(v3, 1, v29);
  if (v32)
  {
    outlined destroy of URL?(v3, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    __break(1u);
    JUMPOUT(0x21AF7B174);
  }
  v33 = OUTLINED_FUNCTION_85_13();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v33, v34, v35);
  specialized BidirectionalCollection.last.getter(v44, (uint64_t)v18);
  OUTLINED_FUNCTION_128((uint64_t)v18, 1, v19);
  if (!v32)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v18, v43, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_91_0();
    __asm { BR              X10 }
  }
  outlined destroy of URL?((uint64_t)v18, &demangling cache variable for type metadata for MLCheckpoint?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_51_25();
  OUTLINED_FUNCTION_18_0(v36, v37);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
  OUTLINED_FUNCTION_7();
}

Swift::Int_optional __swiftcall HandActionClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  Swift::Int_optional result;

  __asm { BR              X10 }
  return result;
}

uint64_t sub_21AF7B210()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v1 + 8) == 255)
    return 0;
  else
    return MLDataTable.size.getter();
}

Swift::tuple_Int_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandActionClassifierTrainingSessionDelegate.extractFeatures(from:)(Swift::Int from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  Swift::Int v27;
  BOOL v28;
  Swift::Bool v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  char v49;
  id v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::tuple_Int_finished_Bool result;

  OUTLINED_FUNCTION_8_1();
  v53 = v4;
  v54 = v5;
  v6 = v1;
  v8 = v7;
  OUTLINED_FUNCTION_64_13();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  v10 = OUTLINED_FUNCTION_16_43();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_14_5();
  v12 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_134_3(v12, v1);
  OUTLINED_FUNCTION_128(v1, 1, v10);
  if (v13)
    goto LABEL_36;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v1, v3, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
  v14 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable;
  v15 = OUTLINED_FUNCTION_44_7();
  v16 = *(unsigned __int8 *)(v14 + 8);
  if (v16 != 255)
  {
    v48 = *(id *)v14;
    v49 = v16 & 1;
    outlined copy of Result<_DataTable, Error>(v48, v16 & 1);
    v17 = MLDataTable.size.getter();
    if (v18 <= 0)
    {
      OUTLINED_FUNCTION_77_5(v17, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
      OUTLINED_FUNCTION_33_34();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount);
    v20 = *(_QWORD *)(v6
                    + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceValidationRowCount);
    v1 = v19 + v20;
    if (__OFADD__(v19, v20))
    {
      __break(1u);
    }
    else
    {
      if (v1 <= v8)
      {
        OUTLINED_FUNCTION_77_5(v17, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
        OUTLINED_FUNCTION_33_34();
        v27 = 0;
        goto LABEL_16;
      }
      v45 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceValidationRowCount;
      v46 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTrainingRowCount;
      v52 = v2;
      v21 = v6 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sessionParameters;
      v15 = type metadata accessor for MLTrainingSessionParameters();
      v22 = *(_QWORD *)(v21 + *(int *)(v15 + 20));
      v23 = __OFADD__(v8, v22);
      v24 = v8 + v22;
      v25 = v23;
      v26 = v8;
      if (v19 <= v8)
      {
        if ((v25 & 1) != 0)
        {
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
      }
      else
      {
        v1 = v19;
        if ((v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_12;
        }
      }
      v44 = v19;
      if (v1 >= v24)
        v30 = v24;
      else
        v30 = v1;
      if (v30 >= v26)
      {
        v50 = v48;
        v51 = v16 & 1;
        v31 = v26;
        v43 = v30;
        MLDataTable.subscript.getter(&v48, v26, v30);
        v32 = v48;
        v33 = v49;
        type metadata accessor for MLHandActionClassifier.FeatureExtractor();
        v47 = v32;
        v50 = v32;
        v51 = v33;
        v34 = v52;
        v35 = static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)((uint64_t *)&v50, v31, &v48, *(double *)(v3 + *(int *)(v10 + 36)));
        if (v34)
        {
          OUTLINED_FUNCTION_77_5((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
          OUTLINED_FUNCTION_33_34();
          OUTLINED_FUNCTION_122_4(v32);
          goto LABEL_17;
        }
        v36 = v48;
        v52 = v31;
        v50 = v48;
        v51 = v49;
        if (v44 <= v31)
          v37 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures;
        else
          v37 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures;
        v1 = v6 + v37;
        v38 = v49;
        OUTLINED_FUNCTION_44_7();
        MLDataTable.append(contentsOf:)();
        swift_endAccess();
        outlined consume of Result<_DataTable, Error>(v47, v33);
        OUTLINED_FUNCTION_33_34();
        OUTLINED_FUNCTION_77_5(v39, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
        outlined consume of Result<_DataTable, Error>(v36, v38);
        v27 = v43 - v52;
        if (!__OFSUB__(v43, v52))
        {
          v40 = *(_QWORD *)(v6 + v46);
          v41 = *(_QWORD *)(v6 + v45);
          v23 = __OFADD__(v40, v41);
          v42 = v40 + v41;
          if (!v23)
          {
            v28 = v43 == v42;
            goto LABEL_17;
          }
          goto LABEL_35;
        }
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        outlined destroy of URL?(v1, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
        __break(1u);
        goto LABEL_37;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_12:
  OUTLINED_FUNCTION_77_5(v15, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
LABEL_14:
  v27 = 1;
LABEL_16:
  v28 = 1;
LABEL_17:
  v29 = v28;
LABEL_37:
  result._0 = v27;
  result.finished = v29;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandActionClassifierTrainingSessionDelegate.transitionTo(phase:)(CreateML::MLPhase phase)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char v31;
  void *v32;
  char v33;

  OUTLINED_FUNCTION_8_1();
  v4 = v1;
  v6 = v5;
  v7 = OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_14_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  v10 = (int *)OUTLINED_FUNCTION_16_43();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_91_1();
  if (*v6 != 2)
    goto LABEL_11;
  v12 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v12, v1, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_128(v1, 1, (uint64_t)v10);
  if (!v13)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
    v14 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures;
    OUTLINED_FUNCTION_44_7();
    v15 = *(void **)v14;
    LOBYTE(v14) = *(_BYTE *)(v14 + 8);
    OUTLINED_FUNCTION_29_13(v15);
    OUTLINED_FUNCTION_44_12();
    specialized MLDataTable.subscript.getter((char)v15, v14, v16, v17);
    outlined consume of Result<_DataTable, Error>(v15, v14);
    specialized MLDataColumn.dropDuplicates()(v30, v31, (uint64_t)&v32);
    OUTLINED_FUNCTION_122_4(v30);
    v18 = specialized Array<A>.init(_:)(v32, v33);
    v19 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels;
    *(_QWORD *)(v4 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels) = v18;
    OUTLINED_FUNCTION_132_0();
    if (*(_QWORD *)(v4 + v19))
    {
      v20 = *(_QWORD *)(v2 + v10[8]);
      OUTLINED_FUNCTION_128_1();
      OUTLINED_FUNCTION_15_1();
      swift_bridgeObjectRetain_n();
      OUTLINED_FUNCTION_76_11();
      v21 = MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
      v22 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model;
      *(_QWORD *)(v4 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model) = v21;
      swift_release();
      if (*(_QWORD *)(v4 + v22))
      {
        outlined init with copy of MLTrainingSessionParameters(v2 + v10[5], v3, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
        OUTLINED_FUNCTION_72_15(*(_QWORD *)(v2 + v10[6]));
        *(_QWORD *)(v3 + v23) = v20;
        *(_QWORD *)(v3 + *(int *)(v7 + 32)) = v24;
        *(_QWORD *)(v3 + *(int *)(v7 + 40)) = v25;
        v26 = OUTLINED_FUNCTION_3_1();
        OUTLINED_FUNCTION_77_5(v26, type metadata accessor for MLHandActionClassifier.ModelParameters);
        MLHandActionClassifier.GraphCNN.loadPretrainedCoreMLModel()();
        if (!v27)
          MLHandActionClassifier.GraphCNN.initDevice()();
        outlined destroy of MLHandPoseClassifier.ModelParameters(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
        OUTLINED_FUNCTION_106_0();
        swift_release();
        goto LABEL_11;
      }
      OUTLINED_FUNCTION_106_0();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      v29 = 0xD00000000000003CLL;
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      v29 = 0xD00000000000002ELL;
    }
    OUTLINED_FUNCTION_18_0(v28, v29);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
LABEL_11:
    OUTLINED_FUNCTION_7();
    return;
  }
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  __break(1u);
}

Swift::tuple_Int_metrics_OpaquePointer_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandActionClassifierTrainingSessionDelegate.train(from:)(Swift::Int from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  void *v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  void *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v64;
  uint64_t v65;
  double v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, _QWORD);
  double v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, _QWORD);
  double v79;
  char v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  double v98;
  char v99;
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool result;

  OUTLINED_FUNCTION_58_11();
  v92 = v2;
  v3 = v1;
  v5 = v4;
  v87 = type metadata accessor for Tensor();
  v86 = *(_QWORD *)(v87 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v85 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_77_3(v9, (uint64_t)v82);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  v91 = *(_QWORD *)(v10 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v95 = v12;
  v13 = OUTLINED_FUNCTION_20_41();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_50();
  v24 = v22 - v23;
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_211();
  v94 = v26;
  v27 = v3 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sessionParameters;
  v28 = type metadata accessor for MLTrainingSessionParameters();
  v31 = *(_QWORD *)(v27 + *(int *)(v28 + 20));
  if (__OFADD__(v5, v31))
  {
    __break(1u);
    goto LABEL_40;
  }
  v32 = *(_QWORD *)(v27 + *(int *)(v28 + 28));
  if (__OFSUB__(v32, v5))
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v88 = *(_QWORD *)(v27 + *(int *)(v28 + 28));
  v89 = v5 + v31;
  v90 = v10;
  if (v31 >= v32 - v5)
    v33 = v32 - v5;
  else
    v33 = v31;
  v34 = v3 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v34, (uint64_t)v19, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  v35 = OUTLINED_FUNCTION_151_2((uint64_t)v19);
  if (!(_DWORD)v35)
  {
    OUTLINED_FUNCTION_223((uint64_t)v19, (uint64_t)v16);
    OUTLINED_FUNCTION_93_1(v37, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    outlined init with copy of MLTrainingSessionParameters((uint64_t)&v16[*(int *)(v13 + 20)], v24, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    OUTLINED_FUNCTION_72_15(*(_QWORD *)&v16[*(int *)(v13 + 24)]);
    *(_QWORD *)(v24 + v38) = v39;
    *(_QWORD *)(v24 + *(int *)(v20 + 32)) = v40;
    *(_QWORD *)(v24 + *(int *)(v20 + 40)) = v41;
    OUTLINED_FUNCTION_92((uint64_t)v16);
    v42 = v94;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v24, v94, type metadata accessor for MLHandActionClassifier.ModelParameters);
    v43 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model);
    if (!v43
      || (v44 = *(_QWORD **)(v3 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels)) == 0)
    {
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_18_0(v53, 0xD00000000000003CLL);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v42, type metadata accessor for MLHandActionClassifier.ModelParameters);
      goto LABEL_13;
    }
    v83 = v33;
    v45 = v3 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures;
    OUTLINED_FUNCTION_44_7();
    v47 = *(_BYTE *)(v45 + 8);
    *(_QWORD *)&v96 = *(_QWORD *)v45;
    v46 = (void *)v96;
    BYTE8(v96) = v47;
    v48 = v3 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures;
    OUTLINED_FUNCTION_44_7();
    v49 = *(void **)v48;
    v50 = *(_BYTE *)(v48 + 8);
    v51 = v94;
    v98 = *(double *)&v49;
    v99 = v50;
    swift_retain();
    OUTLINED_FUNCTION_52_1();
    v84 = v46;
    outlined copy of Result<_DataTable, Error>(v46, v47);
    outlined copy of Result<_DataTable, Error>(v49, v50);
    v52 = v92;
    static MLHandActionClassifier.prepareDataset(classLabels:trainingFeatures:validationFeatures:parameters:)(v95, v93, v44, (uint64_t)&v96, (uint64_t)&v98);
    if (v52)
    {
      OUTLINED_FUNCTION_30();
      swift_release();
      OUTLINED_FUNCTION_65_19();
      outlined destroy of MLHandPoseClassifier.ModelParameters(v51, type metadata accessor for MLHandActionClassifier.ModelParameters);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    v82 = v44;
    v92 = v43;
    OUTLINED_FUNCTION_65_19();
    v54 = v83;
    if (v83 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v55 = v93;
    if (v83)
    {
      v56 = 0;
      v57 = OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_metricsAttributesDictionary;
      while (v54 != v56)
      {
        v30 = v5 + v56;
        if (__OFADD__(v5, v56))
          goto LABEL_42;
        ++v56;
        *(_QWORD *)(v3 + v57) = MLHandActionClassifier.GraphCNN.iterateTraining(trainingData:validationData:epochCount:)(v95, v55, v30);
        v28 = OUTLINED_FUNCTION_132_0();
        if (v54 == v56)
          goto LABEL_20;
      }
      goto LABEL_41;
    }
LABEL_20:
    OUTLINED_FUNCTION_36_29();
    v58 = OUTLINED_FUNCTION_223_0();
    OUTLINED_FUNCTION_87_3(v58, 0xED000073736F6C5FLL, v59);
    v60 = OUTLINED_FUNCTION_123();
    if (v97)
    {
      if ((OUTLINED_FUNCTION_15_42() & 1) != 0)
      {
        v61 = v98;
        v62 = MEMORY[0x24BEE4B00];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v96 = v62;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, isUniquelyReferenced_nonNull_native, v61);
        v64 = (_QWORD *)v96;
        OUTLINED_FUNCTION_27_16();
LABEL_25:
        OUTLINED_FUNCTION_36_29();
        OUTLINED_FUNCTION_87_3(0x69746164696C6176, 0xEF73736F6C5F6E6FLL, &v96);
        v65 = OUTLINED_FUNCTION_123();
        if (v97)
        {
          if ((OUTLINED_FUNCTION_15_42() & 1) != 0)
          {
            OUTLINED_FUNCTION_140_1();
            v66 = OUTLINED_FUNCTION_42_22();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(4, v67, v66);
            v64 = (_QWORD *)v96;
            OUTLINED_FUNCTION_27_16();
          }
        }
        else
        {
          OUTLINED_FUNCTION_74_7(v65, &demangling cache variable for type metadata for Any?);
        }
        OUTLINED_FUNCTION_36_29();
        OUTLINED_FUNCTION_87_3(0xD000000000000012, 0x800000021AFF16D0, &v96);
        v68 = OUTLINED_FUNCTION_123();
        if (v97)
        {
          type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
          if ((OUTLINED_FUNCTION_15_42() & 1) != 0)
          {
            v69 = v85;
            OUTLINED_FUNCTION_125_4();
            static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v69, v82[2]);
            OUTLINED_FUNCTION_104_8();
            OUTLINED_FUNCTION_34_3(v69, v70);
            OUTLINED_FUNCTION_140_1();
            v71 = OUTLINED_FUNCTION_42_22();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(3, v72, v71);
            OUTLINED_FUNCTION_112_7();
            OUTLINED_FUNCTION_27_16();
          }
        }
        else
        {
          OUTLINED_FUNCTION_74_7(v68, &demangling cache variable for type metadata for Any?);
        }
        OUTLINED_FUNCTION_36_29();
        OUTLINED_FUNCTION_87_3(0xD000000000000014, 0x800000021AFF1720, &v96);
        OUTLINED_FUNCTION_123();
        if (v97)
        {
          type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
          v73 = OUTLINED_FUNCTION_15_42();
          v74 = v93;
          v75 = v95;
          if ((v73 & 1) != 0)
          {
            v76 = v85;
            OUTLINED_FUNCTION_125_4();
            v77 = v82[2];
            swift_bridgeObjectRelease();
            static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v76, v77);
            OUTLINED_FUNCTION_104_8();
            OUTLINED_FUNCTION_34_3(v76, v78);
            OUTLINED_FUNCTION_140_1();
            v79 = OUTLINED_FUNCTION_42_22();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(5, v80, v79);
            OUTLINED_FUNCTION_112_7();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v81 = OUTLINED_FUNCTION_117_4();
          OUTLINED_FUNCTION_74_7(v81, &demangling cache variable for type metadata for Any?);
          v74 = v93;
          v75 = v95;
        }
        specialized _dictionaryUpCast<A, B, C, D>(_:)(v64);
        OUTLINED_FUNCTION_10_3();
        swift_release();
        outlined destroy of URL?(v74, &demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
        (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v75, v90);
        outlined destroy of MLHandPoseClassifier.ModelParameters(v94, type metadata accessor for MLHandActionClassifier.ModelParameters);
        goto LABEL_13;
      }
    }
    else
    {
      OUTLINED_FUNCTION_74_7(v60, &demangling cache variable for type metadata for Any?);
    }
    v64 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_93_1(v35, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_18_0(v36, 0xD000000000000026);
LABEL_13:
  OUTLINED_FUNCTION_117_0();
LABEL_44:
  result.finished = v30;
  result.metrics._rawValue = v29;
  result._0 = v28;
  return result;
}

void HandActionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  id v22;
  char v23;
  char v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  _BYTE v58[7];
  uint64_t v59;
  unint64_t v60;
  char v61;
  _BYTE v62[7];
  void *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _BYTE v69[7];
  uint64_t v70;
  uint64_t v71;
  char v72;
  _BYTE v73[7];
  char v74;
  _BYTE v75[7];
  _BYTE v76[7];
  _BYTE v77[7];
  id v78;
  char v79;

  OUTLINED_FUNCTION_8_1();
  v2 = v0;
  v4 = v3;
  v5 = OUTLINED_FUNCTION_78();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = *v4;
  if (v12 == 2)
  {
    if (*(_QWORD *)(v2 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model))
    {
      OUTLINED_FUNCTION_3_1();
      specialized _ModelCheckpoint<>.save(to:)();
      swift_release();
    }
  }
  else if (v12 == 1)
  {
    v27 = v10;
    v28 = v11;
    v13 = v2 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures;
    OUTLINED_FUNCTION_44_7();
    v14 = *(_BYTE *)(v13 + 8);
    v50 = *(id *)v13;
    LOBYTE(v51) = v14;
    outlined copy of Result<_DataTable, Error>(v50, v14);
    OUTLINED_FUNCTION_180_0();
    URL.appendingPathComponent(_:)();
    MLDataTable.write(to:)();
    if (v1)
    {
      v15 = OUTLINED_FUNCTION_85_13();
      v16(v15);
      OUTLINED_FUNCTION_92_2();
    }
    else
    {
      v17 = *(void (**)(uint64_t))(v6 + 8);
      v18 = OUTLINED_FUNCTION_85_13();
      v17(v18);
      OUTLINED_FUNCTION_92_2();
      v19 = v2 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures;
      OUTLINED_FUNCTION_44_7();
      v20 = *(_BYTE *)(v19 + 8);
      v78 = *(id *)v19;
      v79 = v20;
      outlined copy of Result<_DataTable, Error>(v78, v20);
      OUTLINED_FUNCTION_51_10();
      URL.appendingPathComponent(_:)();
      MLDataTable.write(to:)();
      OUTLINED_FUNCTION_91_3();
      OUTLINED_FUNCTION_89_4();
      OUTLINED_FUNCTION_180_0();
      URL.appendingPathComponent(_:)();
      v74 = 1;
      LOBYTE(v50) = 1;
      *(_DWORD *)((char *)&v50 + 1) = *(_DWORD *)v77;
      HIDWORD(v50) = *(_DWORD *)&v77[3];
      v51 = 44;
      v52 = 0xE100000000000000;
      v53 = 0;
      v54 = 0xE000000000000000;
      v55 = 92;
      v56 = 0xE100000000000000;
      v57 = 1;
      *(_DWORD *)v58 = *(_DWORD *)v76;
      *(_DWORD *)&v58[3] = *(_DWORD *)&v76[3];
      v59 = 34;
      v60 = 0xE100000000000000;
      v61 = 1;
      *(_DWORD *)v62 = *(_DWORD *)v75;
      *(_DWORD *)&v62[3] = *(_DWORD *)&v75[3];
      v63 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      v64 = 10;
      v65 = 0xE100000000000000;
      v66 = 0;
      v67 = 0;
      v68 = 1;
      *(_DWORD *)v69 = *(_DWORD *)v73;
      *(_DWORD *)&v69[3] = *(_DWORD *)&v73[3];
      v70 = 0;
      MLDataTable.init(contentsOf:options:)(v28, &v50, (uint64_t)&v71);
      v21 = v72;
      v22 = *(id *)v13;
      v23 = *(_BYTE *)(v13 + 8);
      *(_QWORD *)v13 = v71;
      *(_BYTE *)(v13 + 8) = v21;
      outlined consume of Result<_DataTable, Error>(v22, v23);
      OUTLINED_FUNCTION_51_10();
      URL.appendingPathComponent(_:)();
      v49 = 1;
      v29 = 1;
      v30 = 44;
      v31 = 0xE100000000000000;
      v32 = 0;
      v33 = 0xE000000000000000;
      v34 = 92;
      v35 = 0xE100000000000000;
      v36 = 1;
      v37 = 34;
      v38 = 0xE100000000000000;
      v39 = 1;
      v40 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      v41 = 10;
      v43 = 0;
      v44 = 0;
      v42 = 0xE100000000000000;
      v45 = 1;
      v46 = 0;
      MLDataTable.init(contentsOf:options:)(v27, &v29, (uint64_t)&v47);
      v24 = v48;
      v25 = *(id *)v19;
      v26 = *(_BYTE *)(v19 + 8);
      *(_QWORD *)v19 = v47;
      *(_BYTE *)(v19 + 8) = v24;
      outlined consume of Result<_DataTable, Error>(v25, v26);
    }
  }
  OUTLINED_FUNCTION_7();
}

void HandActionClassifierTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_64_13();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OUTLINED_FUNCTION_20_41();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_53_0();
  v9 = v1 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_134_3(v9, (uint64_t)v6);
  v10 = OUTLINED_FUNCTION_128((uint64_t)v6, 1, v7);
  if (v11)
  {
    OUTLINED_FUNCTION_93_1(v10, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v12 = 0xD000000000000030;
    *(_QWORD *)(v12 + 8) = 0x800000021AFF3E40;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    OUTLINED_FUNCTION_85_2(v12, 2, 0.0);
  }
  else
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v6, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
    MLHandActionClassifier.PersistentParameters.save(toSessionDirectory:)(a1);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
  }
}

void HandActionClassifierTrainingSessionDelegate.restore(from:phase:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;

  OUTLINED_FUNCTION_8_1();
  v24 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_50();
  v5 = v3 - v4;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - v10;
  v12 = OUTLINED_FUNCTION_78();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v25 = OUTLINED_FUNCTION_16_43();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_50();
  v17 = v15 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v24 - v19;
  OUTLINED_FUNCTION_106_7((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16));
  MLHandActionClassifier.PersistentParameters.init(sessionDirectory:)(v0, (uint64_t)v20);
  if (!v1)
  {
    v21 = v5;
    v22 = (uint64_t)&v24[OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters];
    OUTLINED_FUNCTION_44_7();
    outlined init with copy of URL?(v22, (uint64_t)v11, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_128((uint64_t)v11, 1, v25);
    if (v23)
    {
      OUTLINED_FUNCTION_60_14((uint64_t)v11);
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v20, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v25);
      outlined init with take of (key: URL, value: CIImage)?((uint64_t)v8, v21, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
      OUTLINED_FUNCTION_44_7();
      outlined assign with take of MLHandActionClassifier.PersistentParameters?(v21, v22);
      swift_endAccess();
    }
    else
    {
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v11, v17, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
      HandActionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)();
      OUTLINED_FUNCTION_92(v17);
      OUTLINED_FUNCTION_92((uint64_t)v20);
    }
  }
  OUTLINED_FUNCTION_7();
}

void HandActionClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  _QWORD *v71;
  char v72;
  uint64_t v73;
  void *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  void (**v111)(char *, char *, uint64_t);
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  _QWORD *v114;
  void (*v115)(uint64_t, uint64_t, void *);
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void (*v136)(uint64_t, void *);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  void *v163;
  uint64_t v164;
  char *v165;
  void *v166;
  char v167;
  _BYTE v168[16];

  OUTLINED_FUNCTION_58_11();
  v165 = (char *)v0;
  v2 = v1;
  v4 = v3;
  v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v155 = v6;
  v161 = type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_208();
  v157 = v8;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_65_5();
  v160 = v10;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_65_5();
  v159 = (char *)v12;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v150 - v14;
  v16 = (_QWORD *)type metadata accessor for DataFrame();
  v162 = (_QWORD *)*(v16 - 1);
  v163 = v16;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_208();
  v156 = v18;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_65_5();
  v158 = v20;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v150 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v150 - v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_50();
  v30 = v28 - v29;
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v150 - v32;
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_65_5();
  v164 = v35;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v150 - v37;
  OUTLINED_FUNCTION_20_41();
  OUTLINED_FUNCTION_46_23();
  if (!v40)
  {
    v46 = OUTLINED_FUNCTION_83_12(v39);
    OUTLINED_FUNCTION_249();
    OUTLINED_FUNCTION_9_52();
    OUTLINED_FUNCTION_60_8();
    OUTLINED_FUNCTION_49_0();
    v48 = 2.28757194e199;
    *(_OWORD *)v47 = xmmword_21AFEAD20;
LABEL_14:
    *(_QWORD *)(v47 + 16) = v2;
    *(_QWORD *)(v47 + 24) = v33;
    *(_QWORD *)(v47 + 32) = v46;
    *(_QWORD *)(v47 + 40) = v168;
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_46_23();
  if (!v40)
  {
    v46 = OUTLINED_FUNCTION_83_12(v41);
    OUTLINED_FUNCTION_249();
    OUTLINED_FUNCTION_9_52();
    OUTLINED_FUNCTION_60_8();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_47_26();
    v50 = v49 + 1;
    v51 = "Maximum Iterations";
LABEL_13:
    *(_QWORD *)v47 = v50;
    *(_QWORD *)(v47 + 8) = (unint64_t)(v51 - 32) | 0x8000000000000000;
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_46_23();
  if (!v40)
  {
    v46 = OUTLINED_FUNCTION_83_12(v43);
    OUTLINED_FUNCTION_249();
    OUTLINED_FUNCTION_9_52();
    OUTLINED_FUNCTION_60_8();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_47_26();
    v50 = v52 + 5;
    v51 = "Prediction Window Size";
    goto LABEL_13;
  }
  if (*(double *)(v4 + *(int *)(v42 + 36)) == *(double *)(v2 + *(int *)(v42 + 36)))
  {
    OUTLINED_FUNCTION_46_23();
    if (!v40)
    {
      v46 = OUTLINED_FUNCTION_83_12(v44);
      OUTLINED_FUNCTION_249();
      OUTLINED_FUNCTION_9_52();
      OUTLINED_FUNCTION_60_8();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_47_26();
      v50 = v60 + 3;
      v51 = "Augmentation options";
      goto LABEL_13;
    }
    v45 = (uint64_t)v165;
    MLHandActionClassifier.DataSource.gatherAnnotatedFileNames()();
    if (v45)
      goto LABEL_16;
    v165 = v38;
    MLHandActionClassifier.DataSource.gatherAnnotatedFileNames()();
    outlined init with copy of URL?((uint64_t)v165, (uint64_t)v33, &demangling cache variable for type metadata for DataFrame?);
    v61 = (uint64_t)v163;
    OUTLINED_FUNCTION_128((uint64_t)v33, 1, (uint64_t)v163);
    if (v40)
    {
      v62 = (uint64_t)v33;
    }
    else
    {
      v153 = (void (*)(char *, char *, uint64_t))v162[4];
      v153(v26, v33, v61);
      if (DataFrame.shape.getter() < 1)
      {
        OUTLINED_FUNCTION_55_22();
        goto LABEL_28;
      }
      outlined init with copy of URL?(v164, v30, &demangling cache variable for type metadata for DataFrame?);
      OUTLINED_FUNCTION_128(v30, 1, v61);
      if (!v40)
      {
        v153(v23, (char *)v30, v61);
        if (DataFrame.shape.getter() >= 1)
        {
          v143 = HandActionClassifierTrainingSessionDelegate.pathsByLabel(for:)();
          v144 = HandActionClassifierTrainingSessionDelegate.pathsByLabel(for:)();
          specialized static Dictionary<>.== infix(_:_:)(v143, v144);
          v146 = v145;
          OUTLINED_FUNCTION_30();
          OUTLINED_FUNCTION_101();
          v147 = v164;
          if ((v146 & 1) == 0)
          {
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            v148 = OUTLINED_FUNCTION_49_0();
            OUTLINED_FUNCTION_5_50(v148, v149);
          }
          OUTLINED_FUNCTION_40_27();
          OUTLINED_FUNCTION_24_3((uint64_t)v26);
          v137 = v147;
          goto LABEL_48;
        }
        OUTLINED_FUNCTION_40_27();
        OUTLINED_FUNCTION_24_3((uint64_t)v26);
LABEL_28:
        v64 = (uint64_t)v165;
        OUTLINED_FUNCTION_79_10(v4, v63, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
        if (OUTLINED_FUNCTION_171_1() == 3)
        {
          v65 = *(void **)v15;
          LODWORD(v153) = v15[8];
          v66 = (void *)*((_QWORD *)v15 + 3);
          v67 = *((_QWORD *)v15 + 4);
          v68 = (void *)*((_QWORD *)v15 + 5);
          v151 = *((_QWORD *)v15 + 2);
          v152 = v67;
          swift_bridgeObjectRelease();
          v15 = v159;
          OUTLINED_FUNCTION_79_10(v2, v69, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
          if (OUTLINED_FUNCTION_171_1() == 3)
          {
            v70 = *(void **)v15;
            v71 = v15;
            v72 = v15[8];
            v161 = v71[2];
            v73 = v71[4];
            v162 = (_QWORD *)v71[3];
            v163 = v66;
            v74 = (void *)v71[5];
            swift_bridgeObjectRelease();
            v166 = v65;
            v75 = (char)v153;
            v167 = (char)v153;
            outlined copy of Result<_DataTable, Error>(v65, (char)v153);
            MLDataTable.subscript.getter(v152, v68, (uint64_t)v168);
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_7_54(v65, v75, v76, v77, v78, v79, v80, v81, v150, v151, v152, (char)v153, v154, v155, v156, v157, v158, (uint64_t)v159, v160,
              v161,
              (uint64_t)v162,
              (uint64_t)v163,
              v164,
              (uint64_t)v165);
            OUTLINED_FUNCTION_94_6();
            MLDataTable.subscript.getter(v73, v74, v82);
            OUTLINED_FUNCTION_12_0();
            OUTLINED_FUNCTION_7_54(v70, v72, v83, v84, v85, v86, v87, v88, v150, v151, v152, (char)v153, v154, v155, v156, v157, v158, (uint64_t)v159, v160,
              v161,
              (uint64_t)v162,
              (uint64_t)v163,
              v164,
              (uint64_t)v165);
            LOBYTE(v74) = OUTLINED_FUNCTION_101_11(v89);
            OUTLINED_FUNCTION_123();
            OUTLINED_FUNCTION_30();
            if ((v74 & 1) != 0)
            {
              v166 = v65;
              v167 = v75;
              outlined copy of Result<_DataTable, Error>(v65, v75);
              MLDataTable.subscript.getter(v151, v163, (uint64_t)v168);
              OUTLINED_FUNCTION_123();
              OUTLINED_FUNCTION_7_54(v65, v75, v90, v91, v92, v93, v94, v95, v150, v151, v152, (char)v153, v154, v155, v156, v157, v158, (uint64_t)v159, v160,
                v161,
                (uint64_t)v162,
                (uint64_t)v163,
                v164,
                (uint64_t)v165);
              OUTLINED_FUNCTION_94_6();
              MLDataTable.subscript.getter(v161, v162, v96);
              OUTLINED_FUNCTION_12_0();
              OUTLINED_FUNCTION_7_54(v70, v72, v97, v98, v99, v100, v101, v102, v150, v151, v152, (char)v153, v154, v155, v156, v157, v158, (uint64_t)v159, v160,
                v161,
                (uint64_t)v162,
                (uint64_t)v163,
                v164,
                (uint64_t)v165);
              v104 = OUTLINED_FUNCTION_101_11(v103);
              OUTLINED_FUNCTION_123();
              OUTLINED_FUNCTION_30();
              if ((v104 & 1) != 0)
                goto LABEL_45;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            v139 = OUTLINED_FUNCTION_49_0();
            OUTLINED_FUNCTION_5_50(v139, v140);
LABEL_45:
            outlined consume of Result<_DataTable, Error>(v70, v72);
            OUTLINED_FUNCTION_122_4(v65);
            goto LABEL_47;
          }
          outlined consume of Result<_DataTable, Error>(v65, (char)v153);
          OUTLINED_FUNCTION_106_0();
          OUTLINED_FUNCTION_104();
        }
        OUTLINED_FUNCTION_92((uint64_t)v15);
        v105 = v4;
        v106 = v160;
        OUTLINED_FUNCTION_223(v105, v160);
        if (OUTLINED_FUNCTION_171_1() == 5)
        {
          v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          v108 = (uint64_t *)(v106 + *(int *)(v107 + 48));
          v109 = *v108;
          v110 = v108[1];
          v111 = (void (**)(char *, char *, uint64_t))(v106 + *(int *)(v107 + 64));
          v113 = *v111;
          v112 = (uint64_t)v111[1];
          v152 = v109;
          v153 = v113;
          v159 = (char *)v112;
          swift_bridgeObjectRelease();
          v114 = v162;
          v115 = (void (*)(uint64_t, uint64_t, void *))v162[4];
          v116 = v158;
          v117 = v106;
          v118 = v163;
          v115(v158, v117, v163);
          v119 = v2;
          v120 = v157;
          outlined init with copy of MLTrainingSessionParameters(v119, v157, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
          if (OUTLINED_FUNCTION_171_1() == 5)
          {
            v121 = v110;
            v122 = (uint64_t *)(v120 + *(int *)(v107 + 48));
            v124 = *v122;
            v123 = v122[1];
            v151 = v124;
            v160 = v123;
            v161 = 0;
            swift_bridgeObjectRelease();
            v125 = v156;
            v115(v156, v120, v118);
            MEMORY[0x220758A1C](v153, v159);
            OUTLINED_FUNCTION_12_0();
            v126 = OUTLINED_FUNCTION_85_13();
            MEMORY[0x220758A1C](v126);
            swift_bridgeObjectRelease();
            specialized Sequence.allSatisfy(_:)();
            v128 = v127;
            OUTLINED_FUNCTION_123_3(v127, &demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
            v129 = v116;
            if ((v128 & 1) != 0)
            {
              MEMORY[0x220758A1C](v152, v121);
              OUTLINED_FUNCTION_101();
              MEMORY[0x220758A1C](v151, v160);
              OUTLINED_FUNCTION_123();
              specialized Sequence.allSatisfy(_:)();
              v131 = v130;
              OUTLINED_FUNCTION_123_3(v130, &demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
              v132 = v164;
              if ((v131 & 1) == 0)
              {
                lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                v133 = OUTLINED_FUNCTION_49_0();
                OUTLINED_FUNCTION_5_50(v133, v134);
              }
              v135 = v163;
              v136 = (void (*)(uint64_t, void *))v162[1];
              v136(v125, v163);
              v136(v129, v135);
              v137 = v132;
              goto LABEL_48;
            }
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_101();
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            v141 = OUTLINED_FUNCTION_49_0();
            OUTLINED_FUNCTION_5_50(v141, v142);
            OUTLINED_FUNCTION_7_28(v125);
            OUTLINED_FUNCTION_7_28(v116);
LABEL_47:
            v137 = v164;
LABEL_48:
            OUTLINED_FUNCTION_60_14(v137);
            outlined destroy of URL?((uint64_t)v165, &demangling cache variable for type metadata for DataFrame?);
            goto LABEL_16;
          }
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_30();
          ((void (*)(uint64_t, void *))v114[1])(v116, v118);
          OUTLINED_FUNCTION_60_14(v164);
          OUTLINED_FUNCTION_60_14((uint64_t)v165);
          v138 = v120;
        }
        else
        {
          OUTLINED_FUNCTION_60_14(v164);
          OUTLINED_FUNCTION_60_14(v64);
          v138 = v106;
        }
        outlined destroy of MLHandPoseClassifier.ModelParameters(v138, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
        goto LABEL_16;
      }
      OUTLINED_FUNCTION_55_22();
      v62 = v30;
    }
    outlined destroy of URL?(v62, &demangling cache variable for type metadata for DataFrame?);
    goto LABEL_28;
  }
  v53 = Double.description.getter();
  v55 = v54;
  v56 = Double.description.getter();
  v58 = v57;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_47_26();
  *(_QWORD *)v47 = v59;
  *(_QWORD *)(v47 + 8) = 0x800000021AFF59D0;
  *(_QWORD *)(v47 + 16) = v53;
  *(_QWORD *)(v47 + 24) = v55;
  *(_QWORD *)(v47 + 32) = v56;
  *(_QWORD *)(v47 + 40) = v58;
LABEL_15:
  OUTLINED_FUNCTION_85_2(v47, 3, v48);
LABEL_16:
  OUTLINED_FUNCTION_117_0();
}

uint64_t HandActionClassifierTrainingSessionDelegate.pathsByLabel(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  void (*v35)(uint64_t, uint64_t);
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _BOOL8 v45;
  Swift::Int v46;
  unint64_t v47;
  char v48;
  Swift::Bool v49;
  _QWORD *v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD *@<X8>);
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  OUTLINED_FUNCTION_8_1();
  v87 = v3;
  v88 = v4;
  v72 = v0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v83 = *(_QWORD *)(v5 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_161();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_91_1();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v82 = v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<String>);
  v70 = *(_QWORD *)(v12 - 8);
  v71 = v12;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_50();
  v16 = v14 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v68 - v18;
  ColumnID.init(_:_:)();
  OUTLINED_FUNCTION_44_12();
  v20 = (uint64_t)v19;
  v21 = v16;
  ColumnID.init(_:_:)();
  if ((specialized DataFrame.containsColumn<A>(_:)() & 1) == 0
    || (specialized DataFrame.containsColumn<A>(_:)() & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v66 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_7_28(v16);
    OUTLINED_FUNCTION_7_28(v20);
    return v66;
  }
  v68 = v20;
  DataFrame.subscript.getter();
  v22 = v1 + *(int *)(v7 + 52);
  DataFrame.subscript.getter();
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32);
  v23(v2, v1, v5);
  lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>);
  v24 = v82;
  OUTLINED_FUNCTION_130_4();
  v23(v2, v22, v5);
  v25 = v24;
  v26 = v24 + *(int *)(v9 + 52);
  OUTLINED_FUNCTION_130_4();
  v80 = *(int *)(v9 + 56);
  *(_BYTE *)(v25 + v80) = 0;
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
  v27 = (_QWORD *)(v25 + *(int *)(v79 + 36));
  lazy protocol witness table accessor for type Column<String> and conformance Column<A>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>);
  v73 = 0;
  v74 = (_QWORD *)MEMORY[0x24BEE4B00];
  v75 = v28;
  v69 = v2;
  v77 = v26;
  v78 = v21;
  v76 = v27;
  while (1)
  {
    v29 = (_QWORD *)*v27;
    v30 = OUTLINED_FUNCTION_129_2();
    if (v29 == v85)
      goto LABEL_29;
    OUTLINED_FUNCTION_110_6();
    v32 = v31[1];
    v81 = *v31;
    v86 = v32;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_145_3();
    v33 = v83;
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16);
    v34(v2, v25, v5);
    OUTLINED_FUNCTION_102_5();
    v35 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v35(v2, v5);
    v36 = *(_QWORD **)(v26 + *(int *)(v79 + 36));
    OUTLINED_FUNCTION_129_2();
    if (v36 == v85)
    {
      v30 = swift_bridgeObjectRelease();
      v21 = v78;
      v25 = v82;
LABEL_29:
      *(_BYTE *)(v25 + v80) = 1;
LABEL_30:
      OUTLINED_FUNCTION_123_3(v30, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
      OUTLINED_FUNCTION_7_28(v21);
      OUTLINED_FUNCTION_7_28(v68);
      OUTLINED_FUNCTION_133_2();
      return (uint64_t)v74;
    }
    OUTLINED_FUNCTION_110_6();
    v38 = v37[1];
    v84 = *v37;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_145_3();
    v34(v2, v26, v5);
    OUTLINED_FUNCTION_102_5();
    v35(v2, v5);
    v39 = v86;
    if (!v86 || !v38)
    {
      v30 = swift_bridgeObjectRelease();
      v25 = v82;
      goto LABEL_25;
    }
    OUTLINED_FUNCTION_133_2();
    v40 = v74;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v85 = v40;
    v42 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v38);
    v44 = v40[2];
    v45 = (v43 & 1) == 0;
    v46 = v44 + v45;
    if (__OFADD__(v44, v45))
      break;
    v47 = v42;
    v48 = v43;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
    v49 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v46);
    v50 = v85;
    if (v49)
    {
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v38);
      if ((v48 & 1) != (v52 & 1))
        goto LABEL_34;
      v47 = v51;
    }
    OUTLINED_FUNCTION_27_16();
    if ((v48 & 1) == 0)
    {
      v50[(v47 >> 6) + 8] |= 1 << v47;
      v53 = (_QWORD *)(v50[6] + 16 * v47);
      *v53 = v84;
      v53[1] = v38;
      *(_QWORD *)(v50[7] + 8 * v47) = MEMORY[0x24BEE4AF8];
      v54 = v50[2];
      v55 = v54 + 1;
      v56 = __OFADD__(v54, 1);
      swift_bridgeObjectRetain();
      if (v56)
        goto LABEL_33;
      v50[2] = v55;
    }
    swift_bridgeObjectRetain();
    v57 = v50[7];
    OUTLINED_FUNCTION_80();
    v58 = *(_QWORD *)(v57 + 8 * v47);
    v59 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v57 + 8 * v47) = v58;
    if ((v59 & 1) == 0)
    {
      OUTLINED_FUNCTION_101_6();
      v58 = v64;
      *(_QWORD *)(v57 + 8 * v47) = v64;
    }
    v61 = *(_QWORD *)(v58 + 16);
    v60 = *(_QWORD *)(v58 + 24);
    v74 = v50;
    if (v61 >= v60 >> 1)
    {
      OUTLINED_FUNCTION_101_6();
      v58 = v65;
      *(_QWORD *)(v57 + 8 * v47) = v65;
    }
    v2 = v69;
    v62 = v81;
    v25 = v82;
    *(_QWORD *)(v58 + 16) = v61 + 1;
    v63 = v58 + 16 * v61;
    *(_QWORD *)(v63 + 32) = v62;
    *(_QWORD *)(v63 + 40) = v39;
    v30 = OUTLINED_FUNCTION_101();
    v73 = specialized thunk for @callee_guaranteed () -> (@owned [URL]);
LABEL_25:
    v26 = v77;
    v21 = v78;
    v27 = v76;
    if (*(_BYTE *)(v25 + v80) == 1)
      goto LABEL_30;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized DataFrame.containsColumn<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  unint64_t value;
  Swift::Bool is_nil;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  Swift::Int_optional v10;

  v0 = type metadata accessor for AnyColumn();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<String>);
  v4._countAndFlagsBits = ColumnID.name.getter();
  v10 = DataFrame.indexOfColumn(_:)(v4);
  value = v10.value;
  is_nil = v10.is_nil;
  swift_bridgeObjectRelease();
  if (is_nil)
    return 0;
  result = DataFrame.columns.getter();
  if ((value & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (value < *(_QWORD *)(result + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, result+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * value, v0);
    swift_bridgeObjectRelease();
    v8 = AnyColumn.wrappedElementType.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return v8 == MEMORY[0x24BEE0D00];
  }
  __break(1u);
  return result;
}

uint64_t HandActionClassifierTrainingSessionDelegate.deinit()
{
  uint64_t v0;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  outlined consume of MLDataTable?(*(void **)(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable), *(_BYTE *)(v0 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_sourceTable + 8));
  OUTLINED_FUNCTION_72_6(OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingFeatures);
  OUTLINED_FUNCTION_72_6(OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_validationFeatures);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t HandActionClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  HandActionClassifierTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HandActionClassifierTrainingSessionDelegate()
{
  return type metadata accessor for HandActionClassifierTrainingSessionDelegate();
}

uint64_t type metadata accessor for HandActionClassifierTrainingSessionDelegate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HandActionClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for HandActionClassifierTrainingSessionDelegate)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for HandActionClassifierTrainingSessionDelegate()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLHandActionClassifier.PersistentParameters?();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void type metadata accessor for MLHandActionClassifier.PersistentParameters?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for MLHandActionClassifier.PersistentParameters?)
  {
    type metadata accessor for MLHandActionClassifier.PersistentParameters();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance HandActionClassifierTrainingSessionDelegate()
{
  HandActionClassifierTrainingSessionDelegate.setUp()();
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance HandActionClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
  HandActionClassifierTrainingSessionDelegate.resume(from:)(a1);
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance HandActionClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)HandActionClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

void protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance HandActionClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  HandActionClassifierTrainingSessionDelegate.transitionTo(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance HandActionClassifierTrainingSessionDelegate(Swift::Int a1)
{
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  _BOOL8 finished;
  Swift::tuple_Int_finished_Bool v8;

  v8 = HandActionClassifierTrainingSessionDelegate.extractFeatures(from:)(a1);
  if (v3)
  {
    v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
    v5 = v1;
    finished = 0;
  }
  else
  {
    v2 = v8._0;
    v8._0 = *(_QWORD *)(v1 + 8);
    finished = v8.finished;
    v5 = v1;
  }
  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(v4, v5, v2, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance HandActionClassifierTrainingSessionDelegate(Swift::Int a1)
{
  Swift::Int *v1;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 finished;
  Swift::Int v6;
  void *rawValue;
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool v9;

  v9 = HandActionClassifierTrainingSessionDelegate.train(from:)(a1);
  if (v4)
  {
    v9._0 = v1[1];
    v9.metrics._rawValue = v1;
    finished = 0;
  }
  else
  {
    v6 = v9._0;
    rawValue = v9.metrics._rawValue;
    v9._0 = v1[1];
    finished = v9.finished;
    v9.metrics._rawValue = v1;
    *(_QWORD *)&v9.finished = v6;
    v3 = (uint64_t)rawValue;
  }
  return protocol witness for TrainingSessionDelegate.train(from:) in conformance HandPoseClassifierTrainingSessionDelegate((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9._0, (uint64_t)v9.metrics._rawValue, *(uint64_t *)&v9.finished, v3, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance HandActionClassifierTrainingSessionDelegate()
{
  char v0;

  HandActionClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)();
  return v0 & 1;
}

void protocol witness for TrainingSessionCodable.save(to:) in conformance HandActionClassifierTrainingSessionDelegate(uint64_t a1)
{
  HandActionClassifierTrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance HandActionClassifierTrainingSessionDelegate()
{
  HandActionClassifierTrainingSessionDelegate.restore(from:phase:)();
}

void lazy protocol witness table accessor for type Column<String> and conformance Column<A>(_QWORD *a1)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Column<String>);
    OUTLINED_FUNCTION_62();
  }
  OUTLINED_FUNCTION_22();
}

void _s11TabularData9AnyColumnVACSTAAWlTm_0(_QWORD *a1)
{
  if (!*a1)
  {
    type metadata accessor for AnyColumn();
    OUTLINED_FUNCTION_62();
  }
  OUTLINED_FUNCTION_22();
}

uint64_t outlined assign with take of MLHandActionClassifier.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [[Double]] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [[Double]] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [[Double]] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[Double]]);
    v2 = lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Double] and conformance <A> [A], &demangling cache variable for type metadata for [Double], (uint64_t)&protocol witness table for Double);
    result = MEMORY[0x22075B938](&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [[Double]] and conformance <A> [A]);
  }
  return result;
}

uint64_t specialized _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 192;
  for (i = 12; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized Dictionary.Values.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t OUTLINED_FUNCTION_5_50(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = 1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 4;
  return swift_willThrow(0.0);
}

void OUTLINED_FUNCTION_7_54(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  outlined consume of Result<_DataTable, Error>(a1, a2);
  v25 = *(_BYTE *)(v24 - 88);
  *(_QWORD *)(v24 - 112) = *(_QWORD *)(v24 - 96);
  *(_BYTE *)(v24 - 104) = v25;
  Array<A>.init(_:)(v24 - 112, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
}

uint64_t OUTLINED_FUNCTION_9_52()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
  return BinaryInteger.description.getter();
}

uint64_t OUTLINED_FUNCTION_15_42()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_16_43()
{
  return type metadata accessor for MLHandActionClassifier.PersistentParameters();
}

uint64_t OUTLINED_FUNCTION_20_41()
{
  return type metadata accessor for MLHandActionClassifier.PersistentParameters();
}

void OUTLINED_FUNCTION_33_34()
{
  unsigned __int8 v0;
  void *v1;

  outlined consume of MLDataTable?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_36_29()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_40_27()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD);
  uint64_t v2;

  return v1(v0, *(_QWORD *)(v2 - 136));
}

double OUTLINED_FUNCTION_42_22()
{
  uint64_t v0;
  uint64_t v1;
  double v2;

  *(_QWORD *)(v1 - 208) = v0;
  return v2;
}

uint64_t OUTLINED_FUNCTION_55_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v0);
}

void OUTLINED_FUNCTION_57_20(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 168), a2);
}

uint64_t OUTLINED_FUNCTION_59_23()
{
  return 0x696C616974696E69;
}

uint64_t OUTLINED_FUNCTION_63_17@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return static MLHandActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)(v1, v1, v1, v1, a1);
}

void OUTLINED_FUNCTION_65_19()
{
  char v0;
  void *v1;
  char v2;
  uint64_t v3;

  outlined consume of Result<_DataTable, Error>(v1, v2);
  outlined consume of Result<_DataTable, Error>(*(id *)(v3 - 304), v0);
}

uint64_t OUTLINED_FUNCTION_68_20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return static MLHandActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)(v1, v1, v1, v1, a1);
}

uint64_t OUTLINED_FUNCTION_71_14()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 272);
}

void OUTLINED_FUNCTION_72_15(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + *(int *)(v2 + 20)) = a1;
  *(_QWORD *)(v3 + *(int *)(v2 + 24)) = v1;
}

void OUTLINED_FUNCTION_79_10(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with copy of MLTrainingSessionParameters(a1, v3, a3);
}

unint64_t OUTLINED_FUNCTION_83_12@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return lazy protocol witness table accessor for type Int and conformance Int();
}

uint64_t OUTLINED_FUNCTION_85_13()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_87_6(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 176), a2);
}

void OUTLINED_FUNCTION_88_6(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 208), a2);
}

void OUTLINED_FUNCTION_91_10(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  MLDataTable.init(contentsOf:options:)(a1, a2, a3);
}

id OUTLINED_FUNCTION_94_6()
{
  void *v0;
  char v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = v0;
  *(_BYTE *)(v2 - 104) = v1;
  return outlined copy of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_101_11(uint64_t a1)
{
  uint64_t v1;

  return specialized static Array<A>.== infix(_:_:)(v1, a1);
}

uint64_t OUTLINED_FUNCTION_102_5()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t OUTLINED_FUNCTION_106_7@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

void OUTLINED_FUNCTION_109_8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of URL?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_110_6()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t OUTLINED_FUNCTION_112_7()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_117_4()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_122_4(void *a1)
{
  char v1;

  outlined consume of Result<_DataTable, Error>(a1, v1);
}

uint64_t OUTLINED_FUNCTION_123_5()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_126_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_129_2()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_130_4()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t OUTLINED_FUNCTION_133_2()
{
  uint64_t v0;

  return outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?(*(_QWORD *)(v0 - 216));
}

void OUTLINED_FUNCTION_134_3(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of URL?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_140_1()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_142(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t OUTLINED_FUNCTION_145_3()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 120, 0);
}

void OUTLINED_FUNCTION_146_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with take of MLHandPoseClassifier.ModelParameters(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_151_2(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

void **assignWithCopy for MLLogisticRegressionClassifier.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  char v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = *a2;
      v8 = *((_BYTE *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((_BYTE *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLLogisticRegressionClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLLogisticRegressionClassifier.ModelParameters.ValidationData)
    return swift_getSingletonMetadata();
  return result;
}

void *assignWithTake for MLLogisticRegressionClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLLogisticRegressionClassifier.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MLLogisticRegressionClassifier.ModelParameters.ValidationData.asTable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v1 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v0, v5 - v4);
  v6 = (char *)&loc_21AF7E520 + dword_21AF7E624[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21AF7E530()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_BYTE *)(v0 + 8) = v2;
}

void MLLogisticRegressionClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v10 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v1 = type metadata accessor for DataFrame.Slice();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  v3 = MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v0, v8 - v7);
  v9 = (char *)sub_21AF7E7A0 + 4 * byte_21AFEFA98[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AF7E7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v6 = *(_BYTE *)(v4 + 16);
  v7 = *(_BYTE *)(v4 + 17);
  *(_OWORD *)(v5 - 112) = *(_OWORD *)v4;
  *(_BYTE *)(v5 - 96) = v6;
  *(_BYTE *)(v5 - 95) = v7;
  DataFrame.randomSplit(strategy:)(v0, v3, v5 - 112);
  v9 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 152);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v10(v1, v3, v8);
  DataFrame.init(_:)();
  outlined init with copy of DataFrame.Slice?(v0, v2);
  if (__swift_getEnumTagSinglePayload(v2, 1, v8) == 1)
  {
    __swift_storeEnumTagSinglePayload(*(_QWORD *)(v5 - 144), 1, 1, *(_QWORD *)(v5 - 136));
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v2, v8);
    v10(*(_QWORD *)(v5 - 168), v1, v8);
    v12 = *(_QWORD *)(v5 - 144);
    DataFrame.init(_:)();
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v11(v1, v8);
    __swift_storeEnumTagSinglePayload(v12, 0, 1, *(_QWORD *)(v5 - 136));
  }
  v11(v3, v8);
  return outlined destroy of DataFrame.Slice?(v0);
}

id MLBoostedTreeClassifier.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_7_55() + 20));
}

uint64_t type metadata accessor for MLBoostedTreeClassifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLBoostedTreeClassifier;
  if (!type metadata singleton initialization cache for MLBoostedTreeClassifier)
    return swift_getSingletonMetadata();
  return result;
}

void key path setter for MLBoostedTreeClassifier.model : MLBoostedTreeClassifier(id *a1)
{
  MLBoostedTreeClassifier.model.setter((uint64_t)*a1);
}

void MLBoostedTreeClassifier.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_7_55() + 20);

  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

void (*MLBoostedTreeClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_7_55() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(void **)(v1 + v3);
  *(_QWORD *)a1 = v4;
  v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

uint64_t MLBoostedTreeClassifier.targetColumn.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_7_55() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

void MLBoostedTreeClassifier.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(OUTLINED_FUNCTION_7_55() + 24));
  swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLBoostedTreeClassifier.targetColumn.modify())(_QWORD)
{
  OUTLINED_FUNCTION_7_55();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeClassifier.featureColumns.getter()
{
  OUTLINED_FUNCTION_7_55();
  return swift_bridgeObjectRetain();
}

void MLBoostedTreeClassifier.featureColumns.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_7_55() + 28);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLBoostedTreeClassifier.featureColumns.modify())(_QWORD)
{
  OUTLINED_FUNCTION_7_55();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_7_55() + 32);
  return outlined init with copy of MLBoostedTreeClassifier.ModelParameters(v3, a1);
}

uint64_t outlined init with copy of MLBoostedTreeClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MLBoostedTreeRegressor.ModelParameters(a2, a1);
  return a2;
}

void MLBoostedTreeClassifier.trainingMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_7_55();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v1 + *(int *)(v3 + 36), a1, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void MLBoostedTreeClassifier.validationMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_7_55();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v1 + *(int *)(v3 + 40), a1, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void static MLBoostedTreeClassifier._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLBoostedTreeClassifier._defaultSessionParameters);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_22();
}

uint64_t MLBoostedTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

#error "21AF7EDC8: call analysis failed (funcsize=61)"

uint64_t MLBoostedTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

uint64_t MLBoostedTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(const void **)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v6 + *(int *)(v4 + 20)) = *(_QWORD *)(v2 + 88);
  OUTLINED_FUNCTION_66_14(v5, a2, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
  memcpy((void *)(v6 + *(int *)(v4 + 32)), v3, 0x70uLL);
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t MLBoostedTreeClassifier.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + *(int *)(v0 + 100);
  v3 = v1 + *(int *)(v0 + 96);
  v4 = outlined destroy of MLBoostedTreeClassifier.ModelParameters(*(_QWORD *)(v0 + 56));
  OUTLINED_FUNCTION_203(v4, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v3, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, type metadata accessor for MLClassifierMetrics);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MLBoostedTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(void (*)(uint64_t, uint64_t), char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t (*v95)(void (*)(uint64_t, uint64_t), char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int EnumTagSinglePayload;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t inited;
  void *v109;
  Swift::String v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  Swift::String v128;
  Swift::String v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  Swift::Int v137;
  Swift::String v138;
  int *v139;
  _QWORD *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t (*v202)(void (*)(uint64_t, uint64_t), char *, uint64_t);
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  void (*v206)(uint64_t, uint64_t);
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  __int128 v219;
  uint64_t v220;
  _OWORD v221[4];
  _BYTE v222[56];
  uint64_t v223;

  OUTLINED_FUNCTION_8_1();
  a19 = v23;
  a20 = v24;
  v211 = v20;
  v26 = v25;
  v210 = (char *)v27;
  v218 = v28;
  v208 = (_QWORD *)v29;
  v217 = v30;
  v32 = v31;
  type metadata accessor for AnyClassificationMetrics();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_211();
  v36 = OUTLINED_FUNCTION_28_3(v35);
  type metadata accessor for MLClassifierMetrics(v36);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v39);
  v40 = type metadata accessor for AnyTreeClassifierModel();
  v193 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v195 = (uint64_t)&v178 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = v41;
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_211();
  v197 = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_64();
  v204 = v45;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v47);
  v200 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v49);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v50);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v51);
  type metadata accessor for AnyTreeClassifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v52);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v53);
  v223 = type metadata accessor for DataFrame();
  v213 = *(_QWORD *)(v223 - 8);
  MEMORY[0x24BDAC7A8](v223);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v54);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v56);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v57);
  type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v58);
  OUTLINED_FUNCTION_53_0();
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v60);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v61);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v62);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v63);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v64);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v65);
  v67 = (char *)&v178 - v66;
  v215 = type metadata accessor for BoostedTreeConfiguration();
  v214 = *(_QWORD *)(v215 - 8);
  MEMORY[0x24BDAC7A8](v215);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v68);
  OUTLINED_FUNCTION_55_16();
  v69 = type metadata accessor for MLBoostedTreeClassifier();
  v212 = (uint64_t)v32 + *(int *)(v69 + 36);
  MLClassifierMetrics.init()(v69, v70, v71, v72, v73, v74, v75, v76, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188,
    v189);
  v192 = (int *)v69;
  v77 = *(int *)(v69 + 40);
  v196 = v32;
  v78 = (_QWORD *)((char *)v32 + v77);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v79, 0xD0000000000000C0);
  *v78 = v80;
  v81 = type metadata accessor for MLClassifierMetrics.Contents(0);
  v209 = v78;
  v189 = v81;
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters(v26, (uint64_t)v221);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.earlyStoppingIterationCount.setter();
  BoostedTreeConfiguration.rowSubsample.setter();
  BoostedTreeConfiguration.columnSubsample.setter();
  outlined destroy of MLBoostedTreeClassifier.ModelParameters((uint64_t)v221);
  OUTLINED_FUNCTION_64_16((uint64_t)&v219, &demangling cache variable for type metadata for Any?, (uint64_t)&a13);
  if (v220)
  {
    v82 = (uint64_t)&v67[*(int *)(v59 + 48)];
    outlined init with take of Any(&v219, v221);
    swift_dynamicCast();
    v83 = v211;
    MLBoostedTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    if (v83)
    {
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_4_57();
      OUTLINED_FUNCTION_34_30();
      outlined destroy of MLHandPoseClassifier.ModelParameters(v21, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
      OUTLINED_FUNCTION_11_52(v22, *(uint64_t (**)(uint64_t, _QWORD))(v214 + 8));
      goto LABEL_5;
    }
    v211 = v82;
    v181 = v59;
    outlined destroy of MLHandPoseClassifier.ModelParameters(v21, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
    static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v67, (uint64_t)v208, v218, (uint64_t)v210);
    v179 = v84;
    v180 = 0;
    OUTLINED_FUNCTION_101();
    v86 = v181;
    v87 = (uint64_t)v206;
    v88 = (uint64_t)v206 + *(int *)(v181 + 48);
    v89 = v213;
    v90 = *(uint64_t (**)(void (*)(uint64_t, uint64_t), char *, uint64_t))(v213 + 16);
    v210 = v67;
    v91 = v90(v206, v67, v223);
    OUTLINED_FUNCTION_60_21(v91, v92, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v88, 1, v223) == 1)
    {
      outlined destroy of URL?(v88, &demangling cache variable for type metadata for DataFrame?);
      v93 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
      OUTLINED_FUNCTION_55_23(v87);
LABEL_10:
      v94 = v86;
      v95 = v202;
      v96 = (uint64_t)v202 + *(int *)(v86 + 48);
      v97 = (uint64_t)v210;
      v90((void (*)(uint64_t, uint64_t))v202, v210, v223);
      v98 = v211;
      v198 = v96;
      _sypSgWOcTm_0(v211, v96, &demangling cache variable for type metadata for DataFrame?);
      v99 = v218;
      MEMORY[0x220758A1C](v208, v218);
      v93((uint64_t)v95, v223);
      v100 = *(int *)(v94 + 48);
      v101 = v203;
      v102 = v203 + v100;
      v202 = v90;
      v90((void (*)(uint64_t, uint64_t))v203, (char *)v97, v223);
      _sypSgWOcTm_0(v98, v102, &demangling cache variable for type metadata for DataFrame?);
      v103 = v204;
      outlined init with take of DataFrame?(v102, v204);
      EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v103, 1, v223);
      v206 = v93;
      if (EnumTagSinglePayload == 1)
      {
        v105 = OUTLINED_FUNCTION_55_23(v101);
        OUTLINED_FUNCTION_78_11(v105, &demangling cache variable for type metadata for DataFrame?);
        v106 = v201;
        OUTLINED_FUNCTION_53_24(v201, 1);
      }
      else
      {
        v115 = v101;
        v116 = v201;
        MEMORY[0x220758A1C](v208, v99);
        v106 = v116;
        OUTLINED_FUNCTION_55_23(v103);
        OUTLINED_FUNCTION_53_24(v116, 0);
        OUTLINED_FUNCTION_55_23(v115);
      }
      v117 = v214;
      v118 = v205;
      v119 = v199;
      v120 = v179;
      v121 = v215;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v214 + 16))(v199, v22, v215);
      OUTLINED_FUNCTION_23_3();
      swift_bridgeObjectRetain();
      v122 = v180;
      AnyTreeClassifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:configuration:)(v106, (uint64_t)v208, v99, v120, v119, v118);
      if (!v122)
      {
        OUTLINED_FUNCTION_15_31(&demangling cache variable for type metadata for DataFrame?, (uint64_t)v221 + 8);
        v124 = v211;
        AnyTreeClassifier.fitted(to:validateOn:eventHandler:)((uint64_t)v210, v211, 0, 0, v197);
        v125 = v216;
        if ((AnalyticsReporter.init()() & 1) == 0)
        {
          v135 = v191;
          v136 = v191 + *(int *)(v181 + 48);
          OUTLINED_FUNCTION_66_18();
          _sypSgWOcTm_0(v124, v136, &demangling cache variable for type metadata for DataFrame?);
          v137 = DataFrame.shape.getter();
          v206(v135, v223);
          v138._countAndFlagsBits = 0xD000000000000015;
          v138._object = (void *)0x800000021AFF21D0;
          AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_boostedTreeClassifier, v138, v137);
        }
        v139 = v192;
        v140 = v196;
        v141 = (_QWORD *)((char *)v196 + v192[6]);
        v142 = (uint64_t)v208;
        v143 = (uint64_t)v218;
        v208 = v141;
        *v141 = v142;
        v141[1] = v143;
        v218 = (char *)v140 + v139[8];
        outlined init with copy of MLBoostedTreeClassifier.ModelParameters(v125, (uint64_t)v218);
        v207 = v139[7];
        *(_QWORD *)((char *)v140 + v207) = v179;
        v144 = v195;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_0((uint64_t)v197, v195, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
        v145 = (*(unsigned __int8 *)(v193 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v193 + 80);
        v146 = swift_allocObject();
        outlined init with take of TreeRegressorModel(v144, v146 + v145, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
        specialized blockAwait<A>(_:)();
        v149 = v148;
        swift_release();
        v150 = v139[5];
        *(_QWORD *)((char *)v140 + v150) = v149;
        v151 = v150;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_0((uint64_t)v197, (uint64_t)v140, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
        v152 = v190;
        v153 = (uint64_t)v210;
        OUTLINED_FUNCTION_62_25();
        AnyTreeClassifierModel.applied(to:eventHandler:)(v154);
        v204 = v151;
        v180 = 0;
        v157 = *v140;
        v158 = v140[1];
        MEMORY[0x220758A1C](*v140, v158);
        MEMORY[0x220758A1C](v157, v158);
        OUTLINED_FUNCTION_48_24();
        v159 = v206;
        v206(v152, v223);
        v160 = v187;
        outlined init with take of TreeRegressorModel(v153, v187, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
        OUTLINED_FUNCTION_54_20();
        outlined assign with take of MLClassifierMetrics(v160, v212);
        v161 = v186 + *(int *)(v181 + 48);
        v162 = OUTLINED_FUNCTION_66_18();
        OUTLINED_FUNCTION_60_21(v162, v163, &demangling cache variable for type metadata for DataFrame?);
        if (__swift_getEnumTagSinglePayload(v161, 1, v223) == 1)
        {
          OUTLINED_FUNCTION_4_57();
          v159(v217, v223);
          OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel, (uint64_t)v221);
          OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier, (uint64_t)v222);
          OUTLINED_FUNCTION_78_11(v164, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          OUTLINED_FUNCTION_11_52(v22, *(uint64_t (**)(uint64_t, _QWORD))(v214 + 8));
          outlined destroy of URL?(v161, &demangling cache variable for type metadata for DataFrame?);
          OUTLINED_FUNCTION_70_19();
          goto LABEL_7;
        }
        v165 = v185;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v213 + 32))(v185, v161, v223);
        OUTLINED_FUNCTION_70_19();
        OUTLINED_FUNCTION_62_25();
        v166 = v180;
        AnyTreeClassifierModel.applied(to:eventHandler:)(v167);
        v168 = v217;
        v169 = v214;
        v180 = v166;
        if (!v166)
        {
          v172 = *v140;
          v171 = v140[1];
          MEMORY[0x220758A1C](v172, v171);
          v173 = v171;
          v174 = v185;
          v175 = v185;
          MEMORY[0x220758A1C](v172, v173);
          OUTLINED_FUNCTION_48_24();
          OUTLINED_FUNCTION_48_2(v184);
          OUTLINED_FUNCTION_4_57();
          OUTLINED_FUNCTION_48_2(v217);
          OUTLINED_FUNCTION_48_2(v174);
          OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel, (uint64_t)v221);
          OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier, (uint64_t)v222);
          OUTLINED_FUNCTION_16_44(v176, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          OUTLINED_FUNCTION_11_52(v22, *(uint64_t (**)(uint64_t, _QWORD))(v169 + 8));
          v177 = v182;
          outlined init with take of TreeRegressorModel(v175, v182, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
          OUTLINED_FUNCTION_54_20();
          outlined assign with take of MLClassifierMetrics(v177, (uint64_t)v209);
          goto LABEL_7;
        }
        OUTLINED_FUNCTION_4_57();
        OUTLINED_FUNCTION_48_2(v168);
        OUTLINED_FUNCTION_48_2(v165);
        v170 = v204;
        OUTLINED_FUNCTION_82_5((uint64_t)v197);
        OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier, (uint64_t)v222);
        OUTLINED_FUNCTION_16_44(v155, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        OUTLINED_FUNCTION_11_52(v22, *(uint64_t (**)(uint64_t, _QWORD))(v169 + 8));
        OUTLINED_FUNCTION_82_5((uint64_t)v140);

        v85 = (uint64_t)v209;
        v156 = (uint64_t)v218;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of MLBoostedTreeClassifier.ModelParameters(v156);
LABEL_6:
        outlined destroy of MLHandPoseClassifier.ModelParameters(v212, type metadata accessor for MLClassifierMetrics);
        outlined destroy of MLHandPoseClassifier.ModelParameters(v85, type metadata accessor for MLClassifierMetrics);
LABEL_7:
        OUTLINED_FUNCTION_7();
        return;
      }
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_60_0();
      OUTLINED_FUNCTION_4_57();
      v123 = OUTLINED_FUNCTION_6_59();
      OUTLINED_FUNCTION_16_44(v123, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v22, v121);
      OUTLINED_FUNCTION_15_31(&demangling cache variable for type metadata for DataFrame?, (uint64_t)v221 + 8);
LABEL_5:
      v85 = (uint64_t)v209;
      goto LABEL_6;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 32))(v198, v88, v223);
    v107 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
    v107(v87, v223);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
    v109 = v218;
    *(_QWORD *)(inited + 32) = v208;
    *(_QWORD *)(inited + 40) = v109;
    swift_bridgeObjectRetain();
    v110._countAndFlagsBits = 0x73616C4365657254;
    v110._object = (void *)0xEE00726569666973;
    DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v110);
    v111 = v216;
    v180 = v112;
    if (v112)
    {
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      OUTLINED_FUNCTION_106_0();
      OUTLINED_FUNCTION_50_9();
      outlined destroy of MLBoostedTreeClassifier.ModelParameters(v111);
      v107(v217, v223);
      v113 = OUTLINED_FUNCTION_130_0();
      v114 = ((uint64_t (*)(uint64_t))v107)(v113);
      OUTLINED_FUNCTION_16_44(v114, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      (*(void (**)(uint64_t, uint64_t))(v214 + 8))(v22, v215);
    }
    else
    {
      v206 = v107;
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      v126 = swift_allocObject();
      *(_OWORD *)(v126 + 16) = xmmword_21AFE7F70;
      v127 = MEMORY[0x24BEE1768];
      *(_QWORD *)(v126 + 32) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v126 + 40) = v127;
      v128._countAndFlagsBits = (uint64_t)v208;
      v128._object = v109;
      v129._countAndFlagsBits = 0x73616C4365657254;
      v129._object = (void *)0xEE00726569666973;
      DataFrame.validateColumnTypes(_:_:context:)(v128, (Swift::OpaquePointer)v126, v129);
      v130 = v215;
      v180 = v131;
      if (!v131)
      {
        v147 = OUTLINED_FUNCTION_130_0();
        v93 = v206;
        ((void (*)(uint64_t))v206)(v147);
        OUTLINED_FUNCTION_101();
        v86 = v181;
        goto LABEL_10;
      }
      OUTLINED_FUNCTION_106_0();
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_4_57();
      v132 = (uint64_t (*)(uint64_t))v206;
      v206(v217, v223);
      v133 = OUTLINED_FUNCTION_130_0();
      v134 = v132(v133);
      OUTLINED_FUNCTION_16_44(v134, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      (*(void (**)(uint64_t, uint64_t))(v214 + 8))(v22, v130);
    }
    v85 = (uint64_t)v209;
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t outlined destroy of MLBoostedTreeClassifier.ModelParameters(uint64_t a1)
{
  destroy for MLBoostedTreeRegressor.ModelParameters(a1);
  return a1;
}

uint64_t partial apply for closure #1 in MLBoostedTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_63_8();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(v2);
}

void MLBoostedTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_161();
  v12 = *(_BYTE *)(a1 + 8);
  v16 = *(_QWORD *)a1;
  LOBYTE(v17) = v12;
  DataFrame.init(_:)((uint64_t)&v16);
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters(a5, (uint64_t)&v16);
  MLBoostedTreeClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(v5, a2, a3, a4, (uint64_t)&v16, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26,
    v27);
  outlined destroy of MLBoostedTreeClassifier.ModelParameters(a5);
  OUTLINED_FUNCTION_127();
}

void MLBoostedTreeClassifier.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  OUTLINED_FUNCTION_8_1();
  v1 = v0;
  v3 = v2;
  v35 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_208();
  v34 = v5;
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_211();
  v36 = v7;
  type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_36_6();
  type metadata accessor for AnyTreeClassifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_208();
  v40 = v10;
  MEMORY[0x24BDAC7A8](v11);
  v12 = type metadata accessor for AnyTreeClassifierModel();
  v42 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v42 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v39 = (uint64_t)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_211();
  v41 = v15;
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_55_16();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_211();
  v43 = v18;
  v19 = type metadata accessor for MLBoostedTreeClassifier();
  v44 = v3 + *(int *)(v19 + 36);
  MLClassifierMetrics.init()(v19, v20, v21, v22, v23, v24, v25, v26, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42,
    v43);
  v33 = v19;
  v27 = *(int *)(v19 + 40);
  v37 = v3;
  v28 = (_QWORD *)(v3 + v27);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v29, 0xD0000000000000C0);
  *v28 = v30;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload();
  v31 = (char *)sub_21AF80488
      + 4 * byte_21AFEFAF0[*(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for MLCheckpoint() + 20))];
  __asm { BR              X10 }
}

void sub_21AF80488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v30;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v32;

  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    *(_QWORD *)(v4 - 176) = v2;
    specialized _setUpCast<A, B>(_:)(MEMORY[0x24BEE4B08]);
    v7 = v6;
    BoostedTreeConfiguration.init()();
    AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v7, 0, 0xE000000000000000, MEMORY[0x24BEE4AF8], v0);
    lazy protocol witness table accessor for type AnyTreeClassifier and conformance AnyTreeClassifier();
    v8 = *(void **)(v4 - 128);
    UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
    if (v8)
    {
      v9 = specialized _setUpCast<A, B>(_:)(MEMORY[0x24BEE4B08]);
      BoostedTreeConfiguration.init()();
      v10 = *(_QWORD *)(v4 - 160);
      AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v9, 0, 0xE000000000000000, MEMORY[0x24BEE4AF8], v0);
      v11 = *(_QWORD *)(v4 - 168);
      UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
      outlined destroy of MLHandPoseClassifier.ModelParameters(v10, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);

      v3 = v11;
    }
    v13 = *(_QWORD *)(v4 - 136);
    outlined init with take of TreeRegressorModel(v3, v13, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    v14 = *(_QWORD *)(v4 - 152);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v13, v14, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 144) + 80);
    v16 = (v15 + 16) & ~v15;
    v17 = swift_allocObject();
    outlined init with take of TreeRegressorModel(v14, v17 + v16, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    specialized blockAwait<A>(_:)();
    v19 = v18;
    swift_release();
    v20 = *(int **)(v4 - 216);
    v21 = *(_QWORD *)(v4 - 184);
    *(_QWORD *)(v21 + v20[5]) = v19;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v13, v21, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    v23 = *(_QWORD *)(v4 - 200);
    v22 = *(_QWORD *)(v4 - 192);
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 0;
    *(_WORD *)(v22 + 16) = 256;
    swift_storeEnumTagMultiPayload();
    v24 = v21 + v20[8];
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = xmmword_21AFE84D0;
    *(_OWORD *)(v24 + 48) = xmmword_21AFE84E0;
    *(_QWORD *)(v24 + 64) = 42;
    *(_QWORD *)(v24 + 72) = 0x3FD3333333333333;
    *(_QWORD *)(v24 + 80) = 0;
    *(_BYTE *)(v24 + 88) = 1;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v24 + 96) = _Q0;
    v30 = *(_QWORD *)(v4 - 208);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v22, v30, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
    *(_QWORD *)(v4 - 88) = v23;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v4 - 112));
    outlined init with take of TreeRegressorModel(v30, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
    outlined assign with take of Any?(v4 - 112, v24);
    OUTLINED_FUNCTION_82_5(v22);
    v32 = (_QWORD *)(v21 + v20[6]);
    *v32 = 0;
    v32[1] = 0xE000000000000000;
    outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v4 - 72), (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v13, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    *(_QWORD *)(v21 + v20[7]) = MEMORY[0x24BEE4AF8];
  }
  else
  {
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v12 = 0xD000000000000042;
    *(_QWORD *)(v12 + 8) = 0x800000021AFF7FB0;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_BYTE *)(v12 + 48) = 0;
    swift_willThrow(0.0);
    outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v4 - 72), (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_82_5(*(_QWORD *)(v4 - 120));
    OUTLINED_FUNCTION_82_5(v2);
  }
  OUTLINED_FUNCTION_7();
}

#error "21AF80924: call analysis failed (funcsize=56)"

#error "21AF809F8: call analysis failed (funcsize=43)"

void static MLBoostedTreeClassifier.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLBoostedTreeClassifier>);
  OUTLINED_FUNCTION_15_1();
  swift_retain();
  specialized MLJob.init(_:)();
}

#error "21AF80A7C: call analysis failed (funcsize=16)"

void static MLBoostedTreeClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[4];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _UNKNOWN **v63;
  __int128 v64;
  uint64_t v65;

  OUTLINED_FUNCTION_8_1();
  a19 = v22;
  a20 = v23;
  v59 = v24;
  v60 = v25;
  v58 = v26;
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v29);
  type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_46_2();
  type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_5();
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)v51 - v35;
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_55_16();
  OUTLINED_FUNCTION_64_16((uint64_t)&v64, &demangling cache variable for type metadata for Any?, (uint64_t)&a16);
  if (v65)
  {
    v38 = v21 + *(int *)(v32 + 48);
    outlined init with take of Any(&v64, &v61);
    swift_dynamicCast();
    MLBoostedTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    OUTLINED_FUNCTION_203(v39, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData);
    if (!v20)
    {
      v40 = v36;
      v41 = (uint64_t)&v36[*(int *)(v32 + 48)];
      v51[2] = v40;
      v42 = OUTLINED_FUNCTION_93();
      v52 = *(_QWORD *)(v42 - 8);
      v43 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
      v43(v40, v21, v42);
      v53 = v41;
      _sypSgWOcTm_0(v38, v41, &demangling cache variable for type metadata for DataFrame?);
      v44 = v56;
      v45 = v56 + *(int *)(v32 + 48);
      v51[1] = v45;
      v51[3] = v42;
      v43((char *)v56, v21, v42);
      _sypSgWOcTm_0(v38, v45, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLBoostedTreeClassifier.ModelParameters(v55, (uint64_t)&v61);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_23_3();
      BoostedTreeConfiguration.init()();
      BoostedTreeConfiguration.maximumDepth.setter();
      BoostedTreeConfiguration.maximumIterations.setter();
      BoostedTreeConfiguration.minimumLossReduction.setter();
      BoostedTreeConfiguration.minimumChildWeight.setter();
      BoostedTreeConfiguration.randomSeed.setter();
      BoostedTreeConfiguration.learningRate.setter();
      BoostedTreeConfiguration.earlyStoppingIterationCount.setter();
      BoostedTreeConfiguration.rowSubsample.setter();
      BoostedTreeConfiguration.columnSubsample.setter();
      outlined destroy of MLBoostedTreeClassifier.ModelParameters((uint64_t)&v61);
      v46 = v60;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v60, v57, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      v47 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
      OUTLINED_FUNCTION_15_1();
      v48 = TreeClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)();
      OUTLINED_FUNCTION_11_52(v44, *(uint64_t (**)(uint64_t, _QWORD))(v52 + 8));
      OUTLINED_FUNCTION_15_31(&demangling cache variable for type metadata for DataFrame?, (uint64_t)&a14);
      v62 = v47;
      v63 = &protocol witness table for TreeClassifierTrainingSessionDelegate;
      *(_QWORD *)&v61 = v48;
      v49 = v54;
      OUTLINED_FUNCTION_97(v46, v50, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>);
      OUTLINED_FUNCTION_15_1();
      swift_retain();
      specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v61, v49, 5);
      outlined destroy of URL?(v21, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
    OUTLINED_FUNCTION_7();
  }
  else
  {
    __break(1u);
  }
}

void static MLBoostedTreeClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14[-1] - v7;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(a1, (uint64_t)&v14[-1] - v7, v9);
  v10 = type metadata accessor for TreeClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v11 = TreeClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v8);
  if (!v1)
  {
    v14[3] = v10;
    v14[4] = &protocol witness table for TreeClassifierTrainingSessionDelegate;
    v14[0] = v11;
    OUTLINED_FUNCTION_97(a1, v12, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v14, (uint64_t)v5, 5);
  }
}

void closure #1 in closure #1 in static MLBoostedTreeClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  _BYTE v20[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a2 & 1) != 0)
  {
    *v5 = a1;
    swift_storeEnumTagMultiPayload();
    v18 = a1;
    a4(v5);
    outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for TreeClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    v15 = v19;
    v16 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 1, 1, v16);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v15;
    v17[5] = a4;
    v17[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:), (uint64_t)v17);
    swift_release();
  }
  OUTLINED_FUNCTION_8_0();
}

uint64_t closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  v6[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Result<>.init(catching:)
                                                + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  v1 = (_QWORD *)OUTLINED_FUNCTION_25();
  v0[6] = v1;
  *v1 = v0;
  v1[1] = closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:);
  return v3(v0[5], v0[2]);
}

{
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLBoostedTreeClassifier.init(delegate:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[42] = a1;
  v2[43] = a2;
  v2[44] = type metadata accessor for AnyClassificationMetrics();
  v2[45] = OUTLINED_FUNCTION_4_36();
  v2[46] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClassificationMetrics?);
  v2[47] = OUTLINED_FUNCTION_4_36();
  v2[48] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_71_10();
  v2[49] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  v2[50] = OUTLINED_FUNCTION_4_6();
  v2[51] = OUTLINED_FUNCTION_7_55();
  v2[52] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v2[53] = OUTLINED_FUNCTION_4_6();
  v3 = type metadata accessor for BoostedTreeConfiguration();
  v2[54] = v3;
  v2[55] = *(_QWORD *)(v3 - 8);
  v2[56] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[57] = OUTLINED_FUNCTION_4_6();
  v2[58] = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v2[59] = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLBoostedTreeClassifier.init(delegate:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = v0[57];
  v2 = v0[58];
  v3 = v0[43] + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v3, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v7 = (int *)v0[58];
    v6 = v0[59];
    v8 = v0[56];
    v9 = v0[54];
    v10 = v0[55];
    v11 = v0[53];
    v12 = v0[50];
    v13 = v0[43];
    OUTLINED_FUNCTION_66_14(v0[57], v5, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v6 + v7[8], v9);
    _sypSgWOcTm_0(v6 + v7[5], v11, &demangling cache variable for type metadata for DataFrame?);
    MLBoostedTreeClassifier.ModelParameters.init(configuration:validation:)(v8, v11, (uint64_t)(v0 + 2));
    v14 = (uint64_t *)(v6 + v7[6]);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(_QWORD *)(v6 + v7[7]);
    v18 = v13 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v18, v12, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
    v19 = OUTLINED_FUNCTION_63_8();
    result = __swift_getEnumTagSinglePayload(v12, 1, v19);
    if ((_DWORD)result != 1)
    {
      outlined init with copy of MLBoostedTreeClassifier.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 16));
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_23_3();
      v20 = (_QWORD *)OUTLINED_FUNCTION_25();
      v0[60] = v20;
      *v20 = v0;
      v20[1] = MLBoostedTreeClassifier.init(delegate:);
      return MLBoostedTreeClassifier.init(_:targetColumn:featureColumns:parameters:)(v0[52], v0[50], v16, v15, v17, (uint64_t)(v0 + 16));
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 336), (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeClassifier);
  v4 = v3 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v4, v1, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 408);
    v8 = *(_QWORD *)(v0 + 384);
    v7 = *(_QWORD *)(v0 + 392);
    v9 = *(_QWORD *)(v0 + 376);
    v11 = *(_QWORD *)(v0 + 344);
    v10 = *(_QWORD *)(v0 + 352);
    v12 = *(_QWORD *)(v0 + 336);
    v13 = outlined destroy of MLBoostedTreeClassifier.ModelParameters(v0 + 16);
    OUTLINED_FUNCTION_203(v13, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    outlined init with take of TreeRegressorModel(v8, v7, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
    OUTLINED_FUNCTION_83_4();
    OUTLINED_FUNCTION_74_14();
    outlined assign with take of MLClassifierMetrics(v7, v12 + *(int *)(v6 + 36));
    v14 = v11 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_130_0();
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v14, v9, &demangling cache variable for type metadata for AnyClassificationMetrics?);
    swift_release();
    if (__swift_getEnumTagSinglePayload(v9, 1, v10) == 1)
    {
      outlined destroy of URL?(*(_QWORD *)(v0 + 376), &demangling cache variable for type metadata for AnyClassificationMetrics?);
    }
    else
    {
      v15 = *(_QWORD *)(v0 + 408);
      v16 = *(_QWORD *)(v0 + 368);
      v17 = *(_QWORD *)(v0 + 360);
      v18 = *(_QWORD *)(v0 + 336);
      OUTLINED_FUNCTION_68_21(*(_QWORD *)(v0 + 376), v16);
      OUTLINED_FUNCTION_68_21(v16, v17);
      v19 = v18 + *(int *)(v15 + 40);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v19, type metadata accessor for MLClassifierMetrics);
      OUTLINED_FUNCTION_68_21(v17, v19);
      OUTLINED_FUNCTION_74_14();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = outlined destroy of MLBoostedTreeClassifier.ModelParameters(v0 + 16);
  OUTLINED_FUNCTION_203(v1, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MLBoostedTreeClassifier.predictions(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::OpaquePointer v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;

  v2 = OUTLINED_FUNCTION_93();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for MLBoostedTreeClassifier();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v4, v5);
  if (!v6)
  {
    OUTLINED_FUNCTION_62_25();
    AnyTreeClassifierModel.applied(to:eventHandler:)(v7);
    MEMORY[0x220758A1C](*v0, v0[1]);
    OUTLINED_FUNCTION_23_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
}

void MLBoostedTreeClassifier.predictions(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  char v10;

  v6 = OUTLINED_FUNCTION_93();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_54_0();
  v8 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v8;
  outlined copy of Result<_DataTable, Error>(v9, v8);
  DataFrame.init(_:)((uint64_t)&v9);
  MLBoostedTreeClassifier.predictions(from:)();
  OUTLINED_FUNCTION_60_5();
  if (!v2)
    MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v3, 1, a2);
  OUTLINED_FUNCTION_127();
}

void MLBoostedTreeClassifier.evaluation(on:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::OpaquePointer v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t inited;
  _QWORD *v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for AnyClassificationMetrics();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OUTLINED_FUNCTION_7_55();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v9, v10);
  if (v11)
    goto LABEL_5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  v13 = (_QWORD *)(v2 + *(int *)(v8 + 24));
  v14 = v13[1];
  *(_QWORD *)(inited + 32) = *v13;
  *(_QWORD *)(inited + 40) = v14;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 0x6C6562614CLL;
  v15._object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v15);
  if (v11)
  {
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
LABEL_5:
    *a2 = v11;
    OUTLINED_FUNCTION_83_4();
    goto LABEL_6;
  }
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  AnyTreeClassifierModel.computeMetrics(on:)(a1, (uint64_t)v7);
  OUTLINED_FUNCTION_66_14((uint64_t)v7, v16, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics);
  OUTLINED_FUNCTION_83_4();
LABEL_6:
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLBoostedTreeClassifier.evaluation(on:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v9;
  char v10;

  v5 = type metadata accessor for DataFrame();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  v7 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLBoostedTreeClassifier.evaluation(on:)(v2, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
}

void MLBoostedTreeClassifier.write(to:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[10];

  OUTLINED_FUNCTION_8_1();
  v31 = v0;
  v5 = v4;
  v37 = v6;
  type metadata accessor for AnyTreeClassifierModel();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v8 = type metadata accessor for Model();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_46_2();
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_53_0();
  v30 = v5[1];
  v35 = v5[2];
  v36 = *v5;
  v33 = v5[4];
  v34 = v5[3];
  v12 = v5[6];
  v32 = v5[5];
  v13 = v5[7];
  v14 = v5[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v37, 0xD000000000000015, 0x800000021AFF8000, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v3);
  if (!v1)
  {
    v29 = v13;
    v38 = v2;
    v28 = v8;
    OUTLINED_FUNCTION_97(v31, v15, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    if (v30)
    {
      v16 = v36;
      v17 = v36;
      v18 = v30;
      v19 = v35;
      v20 = v34;
      v21 = v33;
      v22 = v32;
      v23 = v12;
      v24 = v29;
    }
    else
    {
      v25 = NSFullUserName();
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v26;

      v21 = 0;
      v22 = 0;
      v14 = 0;
      v19 = 0xD000000000000033;
      v20 = 0x800000021AFF2260;
      v24 = 0xE100000000000000;
      v23 = 49;
      v16 = v36;
    }
    v39[0] = v17;
    v39[1] = v18;
    v39[2] = v19;
    v39[3] = v20;
    v39[4] = v21;
    v39[5] = v22;
    v39[6] = v23;
    v39[7] = v24;
    v39[8] = v14;
    outlined copy of MLModelMetadata?(v16, v30);
    specialized CoreMLExportable.export(metadata:)(v39);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_60_0();
    swift_bridgeObjectRelease();
    v27 = OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_203(v27, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    Model.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v38, v28);
    OUTLINED_FUNCTION_23_2(v3, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  }
  OUTLINED_FUNCTION_7();
}

void MLBoostedTreeClassifier.write(toFile:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_8_1();
  v3 = type metadata accessor for URL.DirectoryHint();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_36_6();
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_161();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, *MEMORY[0x24BDCD7A0], v3);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLBoostedTreeClassifier.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
  OUTLINED_FUNCTION_7();
}

unint64_t MLBoostedTreeClassifier.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_54_0();
  v3 = OUTLINED_FUNCTION_7_55();
  v4 = MLBoostedTreeClassifier.ModelParameters.description.getter();
  v6 = v5;
  v7 = MLClassifierMetrics.description.getter();
  v9 = v8;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v0 + *(int *)(v3 + 40), v1, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, type metadata accessor for MLClassifierMetrics.Contents);
  v10 = MLClassifierMetrics.description.getter();
  v12 = v11;
  v13._countAndFlagsBits = v4;
  v13._object = v6;
  String.append(_:)(v13);
  v14._countAndFlagsBits = v7;
  v14._object = v9;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD00000000000001ELL;
  v15._object = (void *)0x800000021AFF1480;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  if (v3 <= 1)
  {
    v16._countAndFlagsBits = v10;
    v16._object = v12;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0xD000000000000020;
    v17._object = (void *)0x800000021AFF14A0;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000022;
}

void MLBoostedTreeClassifier.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  unint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString();
  v3._countAndFlagsBits = MLBoostedTreeClassifier.debugDescription.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

uint64_t partial apply for closure #1 in MLBoostedTreeClassifier.init(checkpoint:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_63_8();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestClassifier.init(checkpoint:)(v2);
}

void sub_21AF822F8(id *a1@<X8>)
{
  *a1 = MLBoostedTreeClassifier.model.getter();
  OUTLINED_FUNCTION_22();
}

_QWORD *initializeBufferWithCopyOfBuffer for MLBoostedTreeClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  void **v39;
  void **v40;
  int EnumCaseMultiPayload;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  void *v46;
  id v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  void **v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  void *v60;
  id v61;
  uint64_t *v62;
  uint64_t v63;
  char *v65;
  char *v66;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = type metadata accessor for AnyTreeClassifierModel();
    v14 = *(int *)(v13 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for BaseTreeClassifierModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = *(int *)(v13 + 28);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = *(_QWORD *)v20;
    LOBYTE(v20) = v20[8];
    *(_QWORD *)v19 = v21;
    v22 = a3[5];
    v23 = a3[6];
    v24 = *(void **)((char *)a2 + v22);
    v19[8] = (char)v20;
    *(_QWORD *)((char *)a1 + v22) = v24;
    v25 = (_QWORD *)((char *)a1 + v23);
    v26 = *(_QWORD *)((char *)a2 + v23);
    v27 = *(_QWORD *)((char *)a2 + v23 + 8);
    v28 = a3[7];
    v29 = a3[8];
    v30 = *(_QWORD *)((char *)a2 + v28);
    *v25 = v26;
    v25[1] = v27;
    *(_QWORD *)((char *)a1 + v28) = v30;
    v31 = (char *)a1 + v29;
    v32 = (char *)a2 + v29;
    v33 = *(_QWORD *)((char *)a2 + v29 + 24);
    swift_bridgeObjectRetain();
    v34 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33)
    {
      *((_QWORD *)v31 + 3) = v33;
      (**(void (***)(char *, char *, uint64_t))(v33 - 8))(v31, v32, v33);
    }
    else
    {
      v35 = *((_OWORD *)v32 + 1);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v35;
    }
    v36 = *((_OWORD *)v32 + 3);
    *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
    *((_OWORD *)v31 + 3) = v36;
    *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
    *((_QWORD *)v31 + 10) = *((_QWORD *)v32 + 10);
    v31[88] = v32[88];
    v37 = *((_OWORD *)v32 + 6);
    v38 = a3[9];
    v39 = (void **)((char *)a1 + v38);
    v40 = (void **)((char *)a2 + v38);
    *((_OWORD *)v31 + 6) = v37;
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v46 = *v40;
      v47 = v46;
      *v39 = v46;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v39 = *v40;
      v42 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v43 = *(int *)(v42 + 20);
      v65 = (char *)v40 + v43;
      v66 = (char *)v39 + v43;
      v44 = type metadata accessor for DataFrame();
      v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
      v45(v66, v65, v44);
      v45((char *)v39 + *(int *)(v42 + 24), (char *)v40 + *(int *)(v42 + 24), v44);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v48 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v48 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v49 = __swift_instantiateConcreteTypeFromMangledName(v48);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v39, v40, v49);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v50 = a3[10];
    v51 = (void **)((char *)a1 + v50);
    v52 = (void **)((char *)a2 + v50);
    v53 = swift_getEnumCaseMultiPayload();
    if (v53 == 2)
    {
      v60 = *v52;
      v61 = v60;
      *v51 = v60;
    }
    else if (v53 == 1)
    {
      *v51 = *v52;
      v54 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v55 = *(int *)(v54 + 20);
      v56 = (char *)v51 + v55;
      v57 = (char *)v52 + v55;
      v58 = type metadata accessor for DataFrame();
      v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
      v59(v56, v57, v58);
      v59((char *)v51 + *(int *)(v54 + 24), (char *)v52 + *(int *)(v54 + 24), v58);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v62 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v62 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v63 = __swift_instantiateConcreteTypeFromMangledName(v62);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v51, v52, v63);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *initializeWithCopy for MLBoostedTreeClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void **v37;
  void **v38;
  int EnumCaseMultiPayload;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  void *v44;
  id v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  void **v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  void *v58;
  id v59;
  uint64_t *v60;
  uint64_t v61;
  char *v63;
  char *v64;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = type metadata accessor for AnyTreeClassifierModel();
  v12 = *(int *)(v11 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = *(int *)(v11 + 28);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  *(_QWORD *)v17 = v19;
  v20 = a3[5];
  v21 = a3[6];
  v22 = *(void **)((char *)a2 + v20);
  v17[8] = (char)v18;
  *(_QWORD *)((char *)a1 + v20) = v22;
  v23 = (_QWORD *)((char *)a1 + v21);
  v24 = *(_QWORD *)((char *)a2 + v21);
  v25 = *(_QWORD *)((char *)a2 + v21 + 8);
  v26 = a3[7];
  v27 = a3[8];
  v28 = *(_QWORD *)((char *)a2 + v26);
  *v23 = v24;
  v23[1] = v25;
  *(_QWORD *)((char *)a1 + v26) = v28;
  v29 = (char *)a1 + v27;
  v30 = (char *)a2 + v27;
  v31 = *(_QWORD *)((char *)a2 + v27 + 24);
  swift_bridgeObjectRetain();
  v32 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31)
  {
    *((_QWORD *)v29 + 3) = v31;
    (**(void (***)(char *, char *, uint64_t))(v31 - 8))(v29, v30, v31);
  }
  else
  {
    v33 = *((_OWORD *)v30 + 1);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v33;
  }
  v34 = *((_OWORD *)v30 + 3);
  *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
  *((_OWORD *)v29 + 3) = v34;
  *((_OWORD *)v29 + 4) = *((_OWORD *)v30 + 4);
  *((_QWORD *)v29 + 10) = *((_QWORD *)v30 + 10);
  v29[88] = v30[88];
  v35 = *((_OWORD *)v30 + 6);
  v36 = a3[9];
  v37 = (void **)((char *)a1 + v36);
  v38 = (void **)((char *)a2 + v36);
  *((_OWORD *)v29 + 6) = v35;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v44 = *v38;
    v45 = v44;
    *v37 = v44;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *v37 = *v38;
    v40 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v41 = *(int *)(v40 + 20);
    v63 = (char *)v38 + v41;
    v64 = (char *)v37 + v41;
    v42 = type metadata accessor for DataFrame();
    v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
    v43(v64, v63, v42);
    v43((char *)v37 + *(int *)(v40 + 24), (char *)v38 + *(int *)(v40 + 24), v42);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v46 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v46 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v47 = __swift_instantiateConcreteTypeFromMangledName(v46);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v37, v38, v47);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v48 = a3[10];
  v49 = (void **)((char *)a1 + v48);
  v50 = (void **)((char *)a2 + v48);
  v51 = swift_getEnumCaseMultiPayload();
  if (v51 == 2)
  {
    v58 = *v50;
    v59 = v58;
    *v49 = v58;
  }
  else if (v51 == 1)
  {
    *v49 = *v50;
    v52 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v53 = *(int *)(v52 + 20);
    v54 = (char *)v49 + v53;
    v55 = (char *)v50 + v53;
    v56 = type metadata accessor for DataFrame();
    v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
    v57(v54, v55, v56);
    v57((char *)v49 + *(int *)(v52 + 24), (char *)v50 + *(int *)(v52 + 24), v56);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v60 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v60 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v61 = __swift_instantiateConcreteTypeFromMangledName(v60);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v49, v50, v61);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for MLBoostedTreeClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  void **v35;
  int EnumCaseMultiPayload;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  void *v41;
  id v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  void **v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  void *v55;
  id v56;
  uint64_t *v57;
  uint64_t v58;
  char *v60;
  char *v61;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = type metadata accessor for AnyTreeClassifierModel();
  v12 = *(int *)(v11 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = *(int *)(v11 + 28);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  *(_QWORD *)v17 = v19;
  v17[8] = (char)v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[5];
  v21 = *(void **)((char *)a2 + v20);
  v22 = *(void **)((char *)a1 + v20);
  *(_QWORD *)((char *)a1 + v20) = v21;
  v23 = v21;

  v24 = a3[6];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[8];
  v28 = (uint64_t)a1 + v27;
  v29 = (_QWORD *)((char *)a2 + v27);
  v30 = *(_QWORD *)((char *)a2 + v27 + 24);
  if (*(_QWORD *)((char *)a1 + v27 + 24))
  {
    if (v30)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v28, v29);
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_0(v28);
  }
  else if (v30)
  {
    *(_QWORD *)(v28 + 24) = v30;
    (**(void (***)(uint64_t, char *))(v30 - 8))(v28, (char *)v29);
    goto LABEL_15;
  }
  v31 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v31;
LABEL_15:
  *(_QWORD *)(v28 + 32) = v29[4];
  *(_QWORD *)(v28 + 40) = v29[5];
  *(_QWORD *)(v28 + 48) = v29[6];
  *(_QWORD *)(v28 + 56) = v29[7];
  *(_QWORD *)(v28 + 64) = v29[8];
  *(_QWORD *)(v28 + 72) = v29[9];
  v32 = v29[10];
  *(_BYTE *)(v28 + 88) = *((_BYTE *)v29 + 88);
  *(_QWORD *)(v28 + 80) = v32;
  *(_QWORD *)(v28 + 96) = v29[12];
  *(_QWORD *)(v28 + 104) = v29[13];
  if (a1 != a2)
  {
    v33 = a3[9];
    v34 = (void **)((char *)a1 + v33);
    v35 = (void **)((char *)a2 + v33);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v33, type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v41 = *v35;
      v42 = v41;
      *v34 = v41;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v34 = *v35;
      v37 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v38 = *(int *)(v37 + 20);
      v60 = (char *)v35 + v38;
      v61 = (char *)v34 + v38;
      v39 = type metadata accessor for DataFrame();
      v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
      v40(v61, v60, v39);
      v40((char *)v34 + *(int *)(v37 + 24), (char *)v35 + *(int *)(v37 + 24), v39);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v43 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v43 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v44 = __swift_instantiateConcreteTypeFromMangledName(v43);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v34, v35, v44);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v45 = a3[10];
    v46 = (void **)((char *)a1 + v45);
    v47 = (void **)((char *)a2 + v45);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v45, type metadata accessor for MLClassifierMetrics.Contents);
    v48 = swift_getEnumCaseMultiPayload();
    if (v48 == 2)
    {
      v55 = *v47;
      v56 = v55;
      *v46 = v55;
    }
    else if (v48 == 1)
    {
      *v46 = *v47;
      v49 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v50 = *(int *)(v49 + 20);
      v51 = (char *)v46 + v50;
      v52 = (char *)v47 + v50;
      v53 = type metadata accessor for DataFrame();
      v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
      v54(v51, v52, v53);
      v54((char *)v46 + *(int *)(v49 + 24), (char *)v47 + *(int *)(v49 + 24), v53);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v57 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v57 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v58 = __swift_instantiateConcreteTypeFromMangledName(v57);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v46, v47, v58);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLBoostedTreeClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v42;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = type metadata accessor for AnyTreeClassifierModel();
  v8 = *(int *)(v7 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = *(int *)(v7 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v16 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  memcpy((void *)(a1 + v16), (const void *)(a2 + v16), 0x70uLL);
  v17 = a3[9];
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  v20 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v25 = *(int *)(v24 + 20);
    v42 = &v18[v25];
    v26 = &v19[v25];
    v27 = type metadata accessor for DataFrame();
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
    v28(v42, v26, v27);
    v28(&v18[*(int *)(v24 + 24)], &v19[*(int *)(v24 + 24)], v27);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v22 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v22 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v23 = __swift_instantiateConcreteTypeFromMangledName(v22);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v18, v19, v23);
    swift_storeEnumTagMultiPayload();
    goto LABEL_8;
  }
  memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
LABEL_10:
  v29 = a3[10];
  v30 = (char *)(a1 + v29);
  v31 = (char *)(a2 + v29);
  v32 = swift_getEnumCaseMultiPayload();
  if (v32 == 1)
  {
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v35 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v36 = *(int *)(v35 + 20);
    v37 = &v30[v36];
    v38 = &v31[v36];
    v39 = type metadata accessor for DataFrame();
    v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32);
    v40(v37, v38, v39);
    v40(&v30[*(int *)(v35 + 24)], &v31[*(int *)(v35 + 24)], v39);
  }
  else
  {
    if (v32)
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v33 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v33 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v34 = __swift_instantiateConcreteTypeFromMangledName(v33);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v30, v31, v34);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithTake for MLBoostedTreeClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v55;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  v9 = type metadata accessor for AnyTreeClassifierModel();
  v10 = *(int *)(v9 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = *(int *)(v9 + 28);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  LOBYTE(v16) = v16[8];
  *(_QWORD *)v15 = v17;
  v15[8] = (char)v16;
  swift_bridgeObjectRelease();
  v18 = a3[5];
  v19 = *(void **)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);

  v20 = a3[6];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  v25 = a3[8];
  v26 = (uint64_t)a1 + v25;
  v27 = (char *)a2 + v25;
  if (*(_QWORD *)((char *)a1 + v25 + 24))
    __swift_destroy_boxed_opaque_existential_0(v26);
  v28 = *((_OWORD *)v27 + 1);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  v29 = *((_OWORD *)v27 + 3);
  *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
  *(_OWORD *)(v26 + 48) = v29;
  *(_QWORD *)(v26 + 64) = *((_QWORD *)v27 + 8);
  *(_QWORD *)(v26 + 72) = *((_QWORD *)v27 + 9);
  *(_QWORD *)(v26 + 80) = *((_QWORD *)v27 + 10);
  *(_BYTE *)(v26 + 88) = v27[88];
  *(_OWORD *)(v26 + 96) = *((_OWORD *)v27 + 6);
  if (a1 == a2)
    return a1;
  v30 = a3[9];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v30, type metadata accessor for MLClassifierMetrics.Contents);
  v33 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v37 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v38 = *(int *)(v37 + 20);
    v55 = &v31[v38];
    v39 = &v32[v38];
    v40 = type metadata accessor for DataFrame();
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32);
    v41(v55, v39, v40);
    v41(&v31[*(int *)(v37 + 24)], &v32[*(int *)(v37 + 24)], v40);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      goto LABEL_18;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v35 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v35 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v36 = __swift_instantiateConcreteTypeFromMangledName(v35);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v31, v32, v36);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_18:
  v42 = a3[10];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v42, type metadata accessor for MLClassifierMetrics.Contents);
  v45 = swift_getEnumCaseMultiPayload();
  if (v45 == 1)
  {
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v48 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v49 = *(int *)(v48 + 20);
    v50 = &v43[v49];
    v51 = &v44[v49];
    v52 = type metadata accessor for DataFrame();
    v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32);
    v53(v50, v51, v52);
    v53(&v43[*(int *)(v48 + 24)], &v44[*(int *)(v48 + 24)], v52);
  }
  else
  {
    if (v45)
    {
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v46 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v46 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v47 = __swift_instantiateConcreteTypeFromMangledName(v46);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v43, v44, v47);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLBoostedTreeClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF836F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = OUTLINED_FUNCTION_63_8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v7 = OUTLINED_FUNCTION_71_10();
    v8 = a1 + *(int *)(a3 + 36);
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MLBoostedTreeClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AF83790(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_63_8();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      OUTLINED_FUNCTION_125();
      return;
    }
    v9 = OUTLINED_FUNCTION_71_10();
    v10 = a1 + *(int *)(a4 + 36);
  }
  __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
}

uint64_t type metadata completion function for MLBoostedTreeClassifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AnyTreeClassifierModel();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_21AF838CC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in static MLBoostedTreeClassifier.handleResult(_:session:fulfill:)(a1, v4, v5, v6, v7, v8);
}

uint64_t OUTLINED_FUNCTION_4_57()
{
  uint64_t v0;

  return outlined destroy of MLBoostedTreeClassifier.ModelParameters(*(_QWORD *)(v0 - 304));
}

uint64_t OUTLINED_FUNCTION_6_59()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 - 384))(*(_QWORD *)(v0 - 296), *(_QWORD *)(v0 - 72));
}

uint64_t OUTLINED_FUNCTION_7_55()
{
  return type metadata accessor for MLBoostedTreeClassifier();
}

uint64_t OUTLINED_FUNCTION_11_52@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 312));
}

void OUTLINED_FUNCTION_16_44(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(*(_QWORD *)(v2 - 352), a2);
}

uint64_t OUTLINED_FUNCTION_34_30()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 328) + 8))(v0, *(_QWORD *)(v1 - 72));
}

void OUTLINED_FUNCTION_48_24()
{
  AnyClassificationMetrics.init(_:_:)();
}

uint64_t OUTLINED_FUNCTION_53_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, *(_QWORD *)(v2 - 432));
}

uint64_t OUTLINED_FUNCTION_54_20()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_55_23(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_60_21(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  _sypSgWOcTm_0(*(_QWORD *)(v4 - 344), v3, a3);
}

void OUTLINED_FUNCTION_64_16(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  *(_QWORD *)(a3 - 256) = v3;
  _sypSgWOcTm_0(v3, a1, a2);
}

uint64_t OUTLINED_FUNCTION_66_18()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 416))();
}

void OUTLINED_FUNCTION_68_21(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of TreeRegressorModel(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_70_19()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void OUTLINED_FUNCTION_78_11(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(v2, a2);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v38 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v31 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v30 - v11;
  result = MEMORY[0x24BDAC7A8](v10);
  v39 = (char *)&v30 - v14;
  v40 = MEMORY[0x24BEE4AF8];
  v34 = *(_QWORD *)(a1 + 16);
  if (v34)
  {
    v15 = 0;
    v37 = v38 + 56;
    v32 = v5;
    v33 = a1;
    while (v15 < *(_QWORD *)(a1 + 16))
    {
      v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v17 = *(_QWORD *)(v7 + 72);
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
      v18(v5, a1 + v16 + v17 * v15, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
      if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1)
        goto LABEL_19;
      v19 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v35 = v16;
      v36 = v19;
      v19(v39, v5, v6);
      if (*(_QWORD *)(v38 + 16)
        && (v20 = v38,
            lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDAF0]), v21 = dispatch thunk of Hashable._rawHashValue(seed:)(), v22 = -1 << *(_BYTE *)(v20 + 32), v23 = v21 & ~v22, ((*(_QWORD *)(v37 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0))
      {
        v24 = ~v22;
        while (1)
        {
          v18(v12, *(_QWORD *)(v38 + 48) + v23 * v17, v6);
          lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB00]);
          v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
          if ((v25 & 1) != 0)
            break;
          v23 = (v23 + 1) & v24;
          if (((*(_QWORD *)(v37 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            goto LABEL_10;
        }
        v36(v31, v39, v6);
        v26 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v26 = v40;
        }
        v5 = v32;
        v27 = v35;
        v28 = *(_QWORD *)(v26 + 16);
        v29 = v28 + 1;
        if (v28 >= *(_QWORD *)(v26 + 24) >> 1)
        {
          v35 = v28 + 1;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v29 = v35;
          v26 = v40;
        }
        *(_QWORD *)(v26 + 16) = v29;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v36)(v26 + v27 + v28 * v17, v31, v6);
        v40 = v26;
      }
      else
      {
LABEL_10:
        result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v39, v6);
        v5 = v32;
      }
      ++v15;
      a1 = v33;
      if (v15 == v34)
        goto LABEL_18;
    }
    __break(1u);
  }
  else
  {
LABEL_18:
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v6);
LABEL_19:
    swift_bridgeObjectRelease();
    outlined destroy of URL?((uint64_t)v5);
    swift_bridgeObjectRelease();
    return v40;
  }
  return result;
}

uint64_t static _ImageUtilities.validateImageURLs(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  NSURL *v14;
  const __CFURL *v15;
  const __CFURL *v16;
  CGImageSource *v17;
  CFDictionaryRef v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_208();
  v38 = v5;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v33 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_14_5();
  v10 = *(_QWORD *)(a1 + 16);
  v33[1] = a1;
  if (v10)
  {
    v34 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v11 = a1 + v34;
    v12 = *(_QWORD *)(v4 + 72);
    v42 = *(_QWORD *)(v4 + 16);
    OUTLINED_FUNCTION_23_3();
    v41 = MEMORY[0x24BEE4AF8];
    v36 = 0x800000021AFF8050;
    v40 = xmmword_21AFE7DA0;
    v37 = v1;
    v39 = v12;
    v35 = v8;
    while (1)
    {
      OUTLINED_FUNCTION_57_21(v1, v11);
      OUTLINED_FUNCTION_84_9(v1, 0);
      if (__swift_getEnumTagSinglePayload(v1, 1, v3) == 1)
        break;
      v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
      v13(v8, v1, v3);
      URL._bridgeToObjectiveC()(v14);
      v16 = v15;
      v17 = CGImageSourceCreateWithURL(v15, 0);

      if (v17 && (v18 = CGImageSourceCopyPropertiesAtIndex(v17, 0, 0), v17, v18))
      {

        OUTLINED_FUNCTION_57_21(v38, (uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v41 = v30;
        }
        v19 = *(_QWORD *)(v41 + 16);
        if (v19 >= *(_QWORD *)(v41 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v41 = v31;
        }
        v20 = v41;
        *(_QWORD *)(v41 + 16) = v19 + 1;
        v21 = v39;
        v13((char *)(v20 + v34 + v19 * v39), v38, v3);
      }
      else
      {
        v43 = 0;
        v44 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        swift_bridgeObjectRelease();
        v43 = 0xD00000000000001BLL;
        v44 = v36;
        v22._countAndFlagsBits = URL.path.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 46;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        v24 = v43;
        v25 = v44;
        static os_log_type_t.info.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = v40;
        v27 = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v26 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v26 + 32) = v24;
        *(_QWORD *)(v26 + 40) = v25;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_35_25();
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
        type metadata accessor for OS_os_log();
        v28 = (void *)static OS_os_log.default.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v29 = swift_allocObject();
        *(_OWORD *)(v29 + 16) = v40;
        *(_QWORD *)(v29 + 56) = v27;
        *(_QWORD *)(v29 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v29 + 32) = v24;
        *(_QWORD *)(v29 + 40) = v25;
        swift_bridgeObjectRetain();
        v8 = v35;
        v1 = v37;
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        v21 = v39;
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
      v11 += v21;
      if (!--v10)
        goto LABEL_15;
    }
  }
  else
  {
    OUTLINED_FUNCTION_23_3();
    v41 = MEMORY[0x24BEE4AF8];
LABEL_15:
    OUTLINED_FUNCTION_84_9(v1, 1);
  }
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t static _ImageUtilities.getImageURLsAndLabels(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  char v33;
  BOOL v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t i;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  void *v79;
  Swift::String v80;
  Swift::String v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t result;
  uint64_t *v100;
  uint64_t v101;
  int64_t v102;
  int64_t v103;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD v107[5];
  uint64_t v108;

  *(_QWORD *)&v104 = type metadata accessor for UTType();
  v4 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104);
  OUTLINED_FUNCTION_50();
  v7 = (char *)(v5 - v6);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v100 - v9;
  v103 = OUTLINED_FUNCTION_78();
  v11 = *(_QWORD *)(v103 - 8);
  MEMORY[0x24BDAC7A8](v103);
  OUTLINED_FUNCTION_50();
  v14 = v12 - v13;
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_59_24();
  v16 = type metadata accessor for MLImageClassifier.DataSource();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_31_4();
  outlined init with copy of _TablePrinter(a1, v2, v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
      return *(_QWORD *)v2;
    OUTLINED_FUNCTION_51_26(v14, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v11 + 32));
    static UTType.image.getter();
    v20 = v108;
    static _FileUtilities.collectFilesLabeledByFileName(at:type:)();
    v108 = v20;
    if (v20)
    {
      (*(void (**)(char *, _QWORD))(v4 + 8))(v7, v104);
      (*(void (**)(uint64_t, int64_t))(v11 + 8))(v14, v103);
      return v16;
    }
    v24 = v21;
    v10 = v7;
    v1 = v14;
  }
  else
  {
    OUTLINED_FUNCTION_51_26(v1, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v11 + 32));
    static UTType.image.getter();
    v22 = v108;
    static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)();
    v108 = v22;
    if (v22)
    {
      (*(void (**)(char *, _QWORD))(v4 + 8))(v10, v104);
      (*(void (**)(uint64_t, int64_t))(v11 + 8))(v1, v103);
      return v16;
    }
    v24 = v23;
  }
  (*(void (**)(char *, _QWORD))(v4 + 8))(v10, v104);
  (*(void (**)(uint64_t, int64_t))(v11 + 8))(v1, v103);
  specialized _NativeDictionary.makeIterator()(v107, v24);
  v25 = v107[0];
  v26 = v107[3];
  v27 = v107[4];
  v101 = v107[1];
  v102 = (unint64_t)(v107[2] + 64) >> 6;
  *(_QWORD *)&v104 = v24;
  swift_bridgeObjectRetain_n();
  v28 = MEMORY[0x24BEE4AF8];
  if (!v27)
    goto LABEL_12;
LABEL_11:
  v29 = __clz(__rbit64(v27));
  v27 &= v27 - 1;
  v30 = v29 | (v26 << 6);
  while (1)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v30);
    v38 = *(_QWORD *)(v37 + 16);
    v39 = *(_QWORD *)(v28 + 16);
    if (__OFADD__(v39, v38))
    {
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
    swift_bridgeObjectRetain();
    if (!swift_isUniquelyReferenced_nonNull_native() || v39 + v38 > *(_QWORD *)(v28 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v28 = v40;
    }
    if (*(_QWORD *)(v37 + 16))
    {
      v41 = *(_QWORD *)(v28 + 16);
      if ((*(_QWORD *)(v28 + 24) >> 1) - v41 < v38)
        goto LABEL_109;
      v42 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v43 = *(_QWORD *)(v11 + 72);
      v44 = v28 + v42 + v43 * v41;
      if (v37 + v42 < v44 + v43 * v38 && v44 < v37 + v42 + v43 * v38)
        goto LABEL_116;
      swift_arrayInitWithCopy();
      if (v38)
      {
        v46 = *(_QWORD *)(v28 + 16);
        v34 = __OFADD__(v46, v38);
        v47 = v46 + v38;
        if (v34)
          goto LABEL_110;
        *(_QWORD *)(v28 + 16) = v47;
      }
    }
    else if (v38)
    {
      goto LABEL_108;
    }
    swift_bridgeObjectRelease();
    if (v27)
      goto LABEL_11;
LABEL_12:
    v31 = v26 + 1;
    if (__OFADD__(v26, 1))
      goto LABEL_111;
    if (v31 >= v102)
      break;
    v32 = *(_QWORD *)(v101 + 8 * v31);
    if (!v32)
    {
      OUTLINED_FUNCTION_48_25();
      if (v33 == v34)
        break;
      OUTLINED_FUNCTION_62_26();
      if (v32)
        goto LABEL_27;
      OUTLINED_FUNCTION_48_25();
      if (v33 == v34)
        break;
      OUTLINED_FUNCTION_62_26();
      if (v32)
        goto LABEL_27;
      OUTLINED_FUNCTION_48_25();
      if (v33 == v34)
        break;
      OUTLINED_FUNCTION_62_26();
      if (v32)
        goto LABEL_27;
      OUTLINED_FUNCTION_48_25();
      if (v33 == v34)
        break;
      OUTLINED_FUNCTION_62_26();
      if (v32)
      {
LABEL_27:
        v31 = v35;
      }
      else
      {
        v31 = v36 + 5;
        if (v31 >= v102)
          break;
        v32 = *(_QWORD *)(v101 + 8 * v31);
        if (!v32)
        {
          v48 = v26 + 7;
          do
          {
            if (v48 >= v102)
              goto LABEL_52;
            v32 = *(_QWORD *)(v101 + 8 * v48++);
          }
          while (!v32);
          v31 = v48 - 1;
        }
      }
    }
    v27 = (v32 - 1) & v32;
    v30 = __clz(__rbit64(v32)) + (v31 << 6);
    v26 = v31;
  }
LABEL_52:
  v49 = v104;
  OUTLINED_FUNCTION_123();
  swift_release();
  static _ImageUtilities.validateImageURLs(from:)(v28);
  OUTLINED_FUNCTION_104();
  specialized Set.init<A>(_:)();
  v51 = v50;
  v52 = 0;
  v53 = v49 + 64;
  v54 = 1 << *(_BYTE *)(v49 + 32);
  v55 = -1;
  if (v54 < 64)
    v55 = ~(-1 << v54);
  v56 = v55 & *(_QWORD *)(v49 + 64);
  v103 = (unint64_t)(v54 + 63) >> 6;
  v16 = MEMORY[0x24BEE4B00];
  if (!v56)
    goto LABEL_56;
LABEL_55:
  for (v56 &= v56 - 1; ; v56 = (v57 - 1) & v57)
  {
    OUTLINED_FUNCTION_199();
    OUTLINED_FUNCTION_189();
    v59 = swift_bridgeObjectRetain();
    v60 = v108;
    specialized _ArrayProtocol.filter(_:)(v59, v51);
    v108 = v60;
    swift_isUniquelyReferenced_nonNull_native();
    v105 = v16;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    v16 = v105;
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_27_16();
    if (v56)
      goto LABEL_55;
LABEL_56:
    v34 = __OFADD__(v52++, 1);
    if (v34)
      goto LABEL_113;
    if (v52 >= v103)
      break;
    v57 = *(_QWORD *)(v53 + 8 * v52);
    if (!v57)
    {
      v58 = v52 + 1;
      if (v52 + 1 >= v103)
        break;
      v57 = *(_QWORD *)(v53 + 8 * v58);
      if (!v57)
      {
        v58 = v52 + 2;
        if (v52 + 2 >= v103)
          break;
        v57 = *(_QWORD *)(v53 + 8 * v58);
        if (!v57)
        {
          v58 = v52 + 3;
          if (v52 + 3 >= v103)
            break;
          v57 = *(_QWORD *)(v53 + 8 * v58);
          if (!v57)
          {
            while (1)
            {
              v52 = v58 + 1;
              if (__OFADD__(v58, 1))
                goto LABEL_114;
              if (v52 >= v103)
                goto LABEL_73;
              v57 = *(_QWORD *)(v53 + 8 * v52);
              ++v58;
              if (v57)
                goto LABEL_66;
            }
          }
        }
      }
      v52 = v58;
    }
LABEL_66:
    ;
  }
LABEL_73:
  OUTLINED_FUNCTION_104();
  swift_release();
  v61 = swift_bridgeObjectRetain();
  v62 = v108;
  v63 = specialized _NativeDictionary.filter(_:)(v61);
  v108 = v62;
  OUTLINED_FUNCTION_12_0();
  v100 = v63 + 8;
  OUTLINED_FUNCTION_11_53();
  v101 = v64;
  v103 = (int64_t)v63;
  swift_retain();
  v65 = 0;
  v102 = 0x800000021AFF4990;
  v104 = xmmword_21AFE7DA0;
  v66 = MEMORY[0x24BEE0D00];
  if (!v53)
    goto LABEL_75;
LABEL_74:
  OUTLINED_FUNCTION_60_22();
  for (i = v67 | (v65 << 6); ; i = __clz(__rbit64(v70)) + (v65 << 6))
  {
    v77 = (uint64_t *)(*(_QWORD *)(v103 + 48) + 16 * i);
    v78 = *v77;
    v79 = (void *)v77[1];
    v105 = 0;
    v106 = 0xE000000000000000;
    OUTLINED_FUNCTION_10_5();
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v105 = 0xD000000000000019;
    v106 = v102;
    v80._countAndFlagsBits = v78;
    v80._object = v79;
    String.append(_:)(v80);
    OUTLINED_FUNCTION_60_0();
    v81._countAndFlagsBits = 11815;
    v81._object = (void *)0xE200000000000000;
    String.append(_:)(v81);
    v82 = v105;
    v83 = v106;
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v84 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v84 + 16) = v104;
    *(_QWORD *)(v84 + 56) = v66;
    *(_QWORD *)(v84 + 32) = v82;
    *(_QWORD *)(v84 + 40) = v83;
    OUTLINED_FUNCTION_10_5();
    OUTLINED_FUNCTION_35_25();
    print(_:separator:terminator:)();
    OUTLINED_FUNCTION_30();
    type metadata accessor for OS_os_log();
    v85 = (void *)static OS_os_log.default.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v86 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v86 + 16) = v104;
    *(_QWORD *)(v86 + 56) = v66;
    *(_QWORD *)(v86 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v86 + 32) = v82;
    *(_QWORD *)(v86 + 40) = v83;
    OUTLINED_FUNCTION_10_5();
    os_log(_:dso:log:type:_:)();
    OUTLINED_FUNCTION_60_0();

    swift_bridgeObjectRelease();
    if (v53)
      goto LABEL_74;
LABEL_75:
    v69 = v65 + 1;
    if (__OFADD__(v65, 1))
      goto LABEL_112;
    if (v69 >= v101)
    {
LABEL_100:
      v87 = v103;
      OUTLINED_FUNCTION_81();
      if (*(_QWORD *)(v87 + 16))
      {
        OUTLINED_FUNCTION_12_0();
        v105 = 0;
        v106 = 0xE000000000000000;
        _StringGuts.grow(_:)(69);
        OUTLINED_FUNCTION_27_2();
        v88._countAndFlagsBits = 0xD000000000000017;
        String.append(_:)(v88);
        v89 = specialized Collection.first.getter(v87);
        if (v90)
        {
          v16 = v90;
        }
        else
        {
          v89 = 0;
          v16 = 0xE000000000000000;
        }
        v91 = v16;
        String.append(_:)(*(Swift::String *)&v89);
        OUTLINED_FUNCTION_12_0();
        OUTLINED_FUNCTION_27_2();
        String.append(_:)(v92);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
        v93._countAndFlagsBits = Dictionary.Keys.description.getter();
        String.append(_:)(v93);
        OUTLINED_FUNCTION_123();
        v94._countAndFlagsBits = 46;
        v94._object = (void *)0xE100000000000000;
        String.append(_:)(v94);
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        v95 = OUTLINED_FUNCTION_49_0();
        v97 = OUTLINED_FUNCTION_47_27(v95, v96);
        v108 = v98;
        swift_willThrow(v97);
        OUTLINED_FUNCTION_81();
      }
      else
      {
        OUTLINED_FUNCTION_81();
      }
      return v16;
    }
    v70 = v100[v69];
    ++v65;
    if (!v70)
    {
      v65 = v69 + 1;
      OUTLINED_FUNCTION_42_23();
      if (v33 == v34)
        goto LABEL_100;
      OUTLINED_FUNCTION_39_25();
      if (!v70)
      {
        v65 = v71 + 2;
        OUTLINED_FUNCTION_42_23();
        if (v33 == v34)
          goto LABEL_100;
        OUTLINED_FUNCTION_39_25();
        if (!v70)
        {
          v65 = v72 + 3;
          OUTLINED_FUNCTION_42_23();
          if (v33 == v34)
            goto LABEL_100;
          OUTLINED_FUNCTION_39_25();
          if (!v70)
          {
            v65 = v73 + 4;
            OUTLINED_FUNCTION_42_23();
            if (v33 == v34)
              goto LABEL_100;
            OUTLINED_FUNCTION_39_25();
            if (!v70)
              break;
          }
        }
      }
    }
LABEL_97:
    v53 = (v70 - 1) & v70;
  }
  v75 = v74 + 5;
  if (v75 >= v101)
    goto LABEL_100;
  v70 = v100[v75];
  if (v70)
  {
    v65 = v75;
    goto LABEL_97;
  }
  while (1)
  {
    v65 = v75 + 1;
    if (__OFADD__(v75, 1))
      break;
    OUTLINED_FUNCTION_42_23();
    if (v33 == v34)
      goto LABEL_100;
    OUTLINED_FUNCTION_39_25();
    v75 = v76 + 1;
    if (v70)
      goto LABEL_97;
  }
LABEL_115:
  __break(1u);
LABEL_116:
  OUTLINED_FUNCTION_45_26();
  result = OUTLINED_FUNCTION_21_39();
  __break(1u);
  return result;
}

uint64_t static _ImageUtilities.generateImageTable(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = swift_bridgeObjectRetain();
  v50 = specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  specialized MutableCollection<>.sort(by:)(&v50);
  if (v2)
  {
LABEL_59:
    result = swift_release();
    __break(1u);
    return result;
  }
  v6 = 0;
  OUTLINED_FUNCTION_30();
  v49 = *(_QWORD *)(v50 + 16);
  if (v49)
  {
    v46 = a2;
    v7 = 0;
    v48 = v50 + 32;
    v8 = MEMORY[0x24BEE4AF8];
    v9 = MEMORY[0x24BEE4AF8];
    v47 = a1;
    while (1)
    {
      v10 = (uint64_t *)(v48 + 16 * v7);
      v12 = *v10;
      v11 = v10[1];
      v13 = *(_QWORD *)(a1 + 16);
      OUTLINED_FUNCTION_23_3();
      if (v13)
      {
        OUTLINED_FUNCTION_23_3();
        v14 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
        v15 = MEMORY[0x24BEE4AF8];
        if ((v16 & 1) != 0)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14);
          OUTLINED_FUNCTION_10_5();
        }
        OUTLINED_FUNCTION_123();
      }
      else
      {
        v15 = MEMORY[0x24BEE4AF8];
      }
      ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SSs5NeverOTg5148_s8CreateML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n(v15);
      v18 = v6;
      OUTLINED_FUNCTION_60_0();
      v19 = *(_QWORD *)(ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                      + 16);
      if (v19)
      {
        v20 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        v21 = v20;
        v20[2] = v19;
        v20[4] = v12;
        v20[5] = v11;
        if (v19 != 1)
        {
          v20[6] = v12;
          v20[7] = v11;
          v22 = v19 - 2;
          if (v19 != 2)
          {
            v23 = v20 + 9;
            do
            {
              *(v23 - 1) = v12;
              *v23 = v11;
              OUTLINED_FUNCTION_23_3();
              v23 += 2;
              --v22;
            }
            while (v22);
          }
          OUTLINED_FUNCTION_23_3();
        }
      }
      else
      {
        OUTLINED_FUNCTION_123();
        v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v24 = v21[2];
      v25 = *(_QWORD *)(v8 + 16);
      if (__OFADD__(v25, v24))
        break;
      if (!swift_isUniquelyReferenced_nonNull_native() || v25 + v24 > *(_QWORD *)(v8 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = v26;
      }
      if (v21[2])
      {
        v27 = *(_QWORD *)(v8 + 16);
        if ((*(_QWORD *)(v8 + 24) >> 1) - v27 < v24)
          goto LABEL_54;
        v28 = v8 + 16 * v27 + 32;
        if ((unint64_t)(v21 + 4) < v28 + 16 * v24 && v28 < (unint64_t)&v21[2 * v24 + 4])
          goto LABEL_58;
        swift_arrayInitWithCopy();
        if (v24)
        {
          v30 = *(_QWORD *)(v8 + 16);
          v31 = __OFADD__(v30, v24);
          v32 = v30 + v24;
          if (v31)
            goto LABEL_56;
          *(_QWORD *)(v8 + 16) = v32;
        }
      }
      else if (v24)
      {
        goto LABEL_51;
      }
      OUTLINED_FUNCTION_60_0();
      v33 = *(_QWORD *)(ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                      + 16);
      v34 = *(_QWORD *)(v9 + 16);
      if (__OFADD__(v34, v33))
        goto LABEL_52;
      if (!swift_isUniquelyReferenced_nonNull_native() || v34 + v33 > *(_QWORD *)(v9 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v9 = v35;
      }
      if (*(_QWORD *)(ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                     + 16))
      {
        v36 = *(_QWORD *)(v9 + 16);
        if ((*(_QWORD *)(v9 + 24) >> 1) - v36 < v33)
          goto LABEL_55;
        v37 = v9 + 16 * v36 + 32;
        if (ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
           + 32 < v37 + 16 * v33
          && v37 < ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                 + 32
                 + 16 * v33)
        {
          goto LABEL_58;
        }
        swift_arrayInitWithCopy();
        if (v33)
        {
          v39 = *(_QWORD *)(v9 + 16);
          v31 = __OFADD__(v39, v33);
          v40 = v39 + v33;
          if (v31)
            goto LABEL_57;
          *(_QWORD *)(v9 + 16) = v40;
        }
      }
      else if (v33)
      {
        goto LABEL_53;
      }
      ++v7;
      swift_bridgeObjectRelease();
      v6 = v18;
      a1 = v47;
      if (v7 == v49)
      {
        swift_release();
        a2 = v46;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    OUTLINED_FUNCTION_45_26();
    OUTLINED_FUNCTION_21_39();
    __break(1u);
    goto LABEL_59;
  }
  swift_release();
  v9 = MEMORY[0x24BEE4AF8];
  v8 = MEMORY[0x24BEE4AF8];
LABEL_49:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(inited + 32) = 0x6C6562616CLL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(_QWORD *)(inited + 72) = v42;
  v43 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 80) = v43;
  *(_QWORD *)(inited + 88) = 0x7461506567616D69;
  *(_QWORD *)(inited + 128) = v42;
  *(_QWORD *)(inited + 136) = v43;
  *(_QWORD *)(inited + 96) = 0xE900000000000068;
  *(_QWORD *)(inited + 104) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
  v44 = Dictionary.init(dictionaryLiteral:)();
  return MLDataTable.init(dictionary:)(v44, a2);
}

void static _ImageUtilities.getImageURLsAndAnnotations(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  char *v17;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = a2;
  v21 = type metadata accessor for DataFrame();
  v18[4] = *(_QWORD *)(v21 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v4);
  v18[1] = (char *)v18 - v5;
  v19 = type metadata accessor for UTType();
  v18[5] = *(_QWORD *)(v19 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v7);
  v22 = OUTLINED_FUNCTION_78();
  v23 = *(_QWORD *)(v22 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_15_3();
  v13 = MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_59_24();
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  outlined init with copy of _TablePrinter(a1, (uint64_t)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  v17 = (char *)&loc_21AF85108 + dword_21AF85AA4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21AF85118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  id v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *ML14_UntypedColumnC_s5Error_pTgm5;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;

  v3 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
  v4 = v1 + v3[12];
  v5 = (_QWORD *)(v1 + v3[16]);
  v6 = (void *)v5[1];
  *(_QWORD *)(v2 - 320) = *v5;
  v7 = (_QWORD *)(v1 + v3[20]);
  v8 = v7[1];
  *(_QWORD *)(v2 - 336) = *v7;
  v9 = *(_QWORD *)(v2 - 304);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v11 = *(_QWORD *)(v2 - 360);
  v12 = v1;
  v13 = *(_QWORD *)(v2 - 312);
  v10(v11, v12, v13);
  v14 = *(_QWORD *)(v2 - 368);
  v10(v14, v4, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v0, v14, v13);
  *(_BYTE *)(v2 - 128) = 1;
  *(_BYTE *)(v2 - 288) = 1;
  *(_DWORD *)(v2 - 287) = *(_DWORD *)(v2 - 111);
  *(_DWORD *)(v2 - 284) = *(_DWORD *)(v2 - 108);
  *(_QWORD *)(v2 - 280) = 44;
  *(_QWORD *)(v2 - 272) = 0xE100000000000000;
  *(_QWORD *)(v2 - 264) = 0;
  *(_QWORD *)(v2 - 256) = 0xE000000000000000;
  *(_QWORD *)(v2 - 248) = 92;
  *(_QWORD *)(v2 - 240) = 0xE100000000000000;
  *(_BYTE *)(v2 - 232) = 1;
  *(_DWORD *)(v2 - 231) = *(_DWORD *)(v2 - 118);
  *(_DWORD *)(v2 - 228) = *(_DWORD *)(v2 - 115);
  *(_QWORD *)(v2 - 224) = 34;
  *(_QWORD *)(v2 - 216) = 0xE100000000000000;
  *(_BYTE *)(v2 - 208) = 1;
  *(_DWORD *)(v2 - 207) = *(_DWORD *)(v2 - 125);
  *(_DWORD *)(v2 - 204) = *(_DWORD *)(v2 - 122);
  *(_QWORD *)(v2 - 200) = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  *(_QWORD *)(v2 - 192) = 10;
  *(_QWORD *)(v2 - 184) = 0xE100000000000000;
  *(_QWORD *)(v2 - 176) = 0;
  *(_QWORD *)(v2 - 168) = 0;
  *(_BYTE *)(v2 - 160) = *(_BYTE *)(v2 - 128);
  *(_DWORD *)(v2 - 159) = *(_DWORD *)(v2 - 135);
  *(_DWORD *)(v2 - 156) = *(_DWORD *)(v2 - 132);
  *(_QWORD *)(v2 - 152) = 0;
  v15 = *(_QWORD *)(v2 - 72);
  MLDataTable.init(contentsOf:options:)(v0, (const void *)(v2 - 288), v2 - 144);
  if (v15)
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v16(v14, v13);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_80();
    v16(v11, v13);
  }
  else
  {
    *(_QWORD *)(v2 - 72) = v8;
    v19 = *(_QWORD *)(v2 - 144);
    v20 = *(_BYTE *)(v2 - 136);
    *(_QWORD *)(v2 - 104) = v19;
    *(_BYTE *)(v2 - 96) = v20;
    *(_QWORD *)(v2 - 144) = v19;
    *(_BYTE *)(v2 - 136) = v20;
    v21 = *(_QWORD *)(v2 - 320);
    MLDataTable.subscript.getter(v21, v6, v2 - 288);
    v22 = *(void **)(v2 - 288);
    v23 = *(_BYTE *)(v2 - 280);
    if ((v23 & 1) != 0
      || (OUTLINED_FUNCTION_68_10(),
          _UntypedColumn.type.getter((_BYTE *)(v2 - 144)),
          OUTLINED_FUNCTION_80_11(),
          *(_BYTE *)(v2 - 144) != 2))
    {
      outlined consume of Result<_DataTable, Error>(v22, v23);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v2 - 288) = 0;
      *(_QWORD *)(v2 - 280) = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v2 - 288) = 0x206E6D756C6F43;
      *(_QWORD *)(v2 - 280) = 0xE700000000000000;
      v41._countAndFlagsBits = v21;
      v41._object = v6;
      String.append(_:)(v41);
      OUTLINED_FUNCTION_80();
      OUTLINED_FUNCTION_27_2();
      v42._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v42);
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v43 = OUTLINED_FUNCTION_49_0();
      v45 = OUTLINED_FUNCTION_47_27(v43, v44);
      swift_willThrow(v45);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v2 - 304) + 8))(*(_QWORD *)(v2 - 368), v13);
      OUTLINED_FUNCTION_14_50(v2 - 104);
      outlined consume of Result<_DataTable, Error>(*(id *)(v2 - 104), *(_BYTE *)(v2 - 96));
    }
    else
    {
      OUTLINED_FUNCTION_68_10();
      _UntypedColumn.valueAtIndex(index:)(0, v2 - 288);
      v24 = *(_QWORD *)(v2 - 288);
      v25 = *(_QWORD *)(v2 - 280);
      v26 = *(unsigned __int8 *)(v2 - 272);
      if (v26 != 2)
      {
        outlined consume of MLDataValue(*(void **)(v2 - 288), *(id *)(v2 - 280), v26);
        v24 = 0;
        v25 = 0xE000000000000000;
      }
      OUTLINED_FUNCTION_80_11();
      *(_QWORD *)(v2 - 288) = v24;
      *(_QWORD *)(v2 - 280) = v25;
      String.init<A>(_:)();
      URL.init(fileURLWithPath:)();
      OUTLINED_FUNCTION_30();
      v27 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v28 = URL.path.getter();
      v29 = (void *)MEMORY[0x22075A8AC](v28);
      OUTLINED_FUNCTION_30();
      v30 = objc_msgSend(v27, sel_fileExistsAtPath_, v29);

      if ((v30 & 1) == 0)
      {
        OUTLINED_FUNCTION_68_10();
        v31 = specialized Array<A>.init(_:)(v22, 0);
        MEMORY[0x24BDAC7A8](v31);
        v47 = *(_QWORD *)(v2 - 360);
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg5((uint64_t)partial apply for closure #1 in static _VideoUtilities.getVideoURLsAndAnnotations(from:), (uint64_t)&v46, v31);
        v33 = v32;
        v34 = OUTLINED_FUNCTION_30();
        *(_QWORD *)(v2 - 288) = v33;
        MEMORY[0x24BDAC7A8](v34);
        v47 = v2 - 288;
        ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
        v37 = v36 & 1;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_189();
        MLDataTable.willMutate()();
        *(_QWORD *)(v2 - 288) = ML14_UntypedColumnC_s5Error_pTgm5;
        *(_BYTE *)(v2 - 280) = v37;
        MLDataTable.setColumnImpl(newColumn:named:)(v2 - 288);
        OUTLINED_FUNCTION_80();
        outlined consume of Result<_DataTable, Error>(ML14_UntypedColumnC_s5Error_pTgm5, v37);
        if ((*(_BYTE *)(v2 - 96) & 1) == 0)
        {
          outlined copy of Result<_DataTable, Error>(*(id *)(v2 - 104), 0);
          _DataTable.columnNamesDidChange()();
          OUTLINED_FUNCTION_16_4();
        }
      }
      v38 = *(_QWORD *)(v2 - 368);
      v39 = v21;
      v40 = *(void (**)(uint64_t, uint64_t))(v2 - 72);
      static _ImageUtilities.renameImageTableColumns(table:imageColumn:labelColumn:)(v2 - 104, v39, (uint64_t)v6, *(_QWORD *)(v2 - 336), (uint64_t)v40);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_10_48();
      v40(v38, v13);
      OUTLINED_FUNCTION_14_50(v2 - 104);
      v17 = *(_BYTE *)(v2 - 96);
      v18 = *(_QWORD *)(v2 - 328);
      *(_QWORD *)v18 = *(_QWORD *)(v2 - 104);
      *(_BYTE *)(v18 + 8) = v17;
    }
  }
}

uint64_t static _ImageUtilities.validateImageInput(trainingData:imageColumn:labelColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  char v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v10 = *(_QWORD *)a1;
  v11 = *(_BYTE *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  v19 = v10;
  v20 = v11;
  OUTLINED_FUNCTION_199();
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v19, 0x7461506567616D69, (void *)0xE900000000000068, inited);
  if (v5)
  {
    swift_setDeallocating();
  }
  else
  {
    v19 = v10;
    v20 = v11;
    v13 = swift_initStackObject();
    v14 = a4;
    v15 = v13;
    *(_OWORD *)(v13 + 16) = xmmword_21AFE7DA0;
    v18 = v14;
    *(_QWORD *)(v13 + 32) = v14;
    *(_QWORD *)(v13 + 40) = a5;
    swift_bridgeObjectRetain();
    static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v19, 0x6C6562616CLL, (void *)0xE500000000000000, v15);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    v19 = v10;
    v20 = v11;
    v17 = swift_initStackObject();
    *(_OWORD *)(v17 + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(v17 + 32) = a2;
    *(_QWORD *)(v17 + 40) = a3;
    v22 = 2;
    v21 = 2;
    OUTLINED_FUNCTION_199();
    static _ValidationUtilities.validateTableTypes(table:featureColumns:featureType:labelColumn:labelType:)(&v19, (_QWORD *)v17, &v22, v18, a5, &v21);
    OUTLINED_FUNCTION_42_11();
  }
  return specialized _ContiguousArrayStorage.__deallocating_deinit();
}

void static _ImageUtilities.renameImageTableColumns(table:imageColumn:labelColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v11;
  char v12;
  void *v13;
  char v14;

  v11 = *(void **)a1;
  v12 = *(_BYTE *)(a1 + 8);
  v13 = v11;
  v14 = v12;
  outlined copy of Result<_DataTable, Error>(v11, v12);
  static _ImageUtilities.validateImageInput(trainingData:imageColumn:labelColumn:)((uint64_t)&v13, a2, a3, a4, a5);
  outlined consume of Result<_DataTable, Error>(v11, v12);
  if (!v5)
  {
    OUTLINED_FUNCTION_28_21();
    MLDataTable.renameImpl(named:to:)(a2, a3, 0x7461506567616D69, 0xE900000000000068);
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_0_41();
      OUTLINED_FUNCTION_16_4();
    }
    OUTLINED_FUNCTION_28_21();
    OUTLINED_FUNCTION_15_43(a4);
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_0_41();
      OUTLINED_FUNCTION_16_4();
    }
  }
}

void static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (**v33)(_QWORD, _QWORD);
  id v34;
  uint64_t v35;
  unint64_t i;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  int v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void (**v57)(_QWORD, _QWORD);
  uint64_t v58;
  char *v59;
  id v60;
  uint64_t (**v61)(_QWORD, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  char v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  id v70;
  id v71;
  int v72;
  uint64_t v73;
  void *v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  int v88;
  void (**v89)(_QWORD, _QWORD);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (**v93)(_QWORD, _QWORD);
  uint64_t v94;
  char *v95;
  uint64_t (**v96)(_QWORD, uint64_t);
  uint64_t v97;
  id v98;
  unint64_t v99;
  uint64_t v100;
  _UNKNOWN **v101;
  id v102;
  char v103;
  id v104;
  char v105;
  id v106;
  char v107;
  id v108;

  v91 = OUTLINED_FUNCTION_78();
  v4 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  OUTLINED_FUNCTION_50();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v82 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DiscontiguousColumnSlice<Int>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v108 = v12;
  v13 = type metadata accessor for DataFrame.Slice();
  v96 = *(uint64_t (***)(_QWORD, uint64_t))(v13 - 8);
  v97 = v13;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_31_4();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v93 = *(void (***)(_QWORD, _QWORD))(v15 - 8);
  v94 = v15;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_64();
  v92 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_64();
  v90 = v19;
  v20 = type metadata accessor for DataFrame();
  v89 = *(void (***)(_QWORD, _QWORD))(v20 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_14_5();
  outlined init with copy of _TablePrinter(a1, v1, v25);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined consume of Result<_DataTable, Error>(*(id *)v1, *(_BYTE *)(v1 + 8));
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_101();
    v26 = v95;
    MLHandPoseClassifier.DataSource.extractKeypoints()();
    if (!v26)
    {
      v91 = v20;
      v28 = v92;
      OUTLINED_FUNCTION_44_12();
      v95 = v23;
      DataFrame.subscript.getter();
      v98 = 0;
      v99 = 0xE000000000000000;
      lazy protocol witness table accessor for type Column<String> and conformance Column<A>();
      v29 = v94;
      OptionalColumnProtocol.filled(with:)();
      v93[1](v28, v29);
      specialized Set.init<A>(_:)();
      v30 = 0;
      v92 = v31 + 56;
      OUTLINED_FUNCTION_11_53();
      v93 = v33;
      v94 = v32;
      v34 = (id)MEMORY[0x24BEE4B00];
      if (!v28)
        goto LABEL_8;
LABEL_7:
      OUTLINED_FUNCTION_60_22();
      for (i = v35 | (v30 << 6); ; i = __clz(__rbit64(v38)) + (v30 << 6))
      {
        v40 = (uint64_t *)(*(_QWORD *)(v94 + 48) + 16 * i);
        v42 = *v40;
        v41 = v40[1];
        MEMORY[0x24BDAC7A8](v32);
        *(&v82 - 2) = (_QWORD *)v42;
        *(&v82 - 1) = (_QWORD *)v41;
        OUTLINED_FUNCTION_199();
        OUTLINED_FUNCTION_44_12();
        DataFrame.filter<A>(on:_:_:)();
        DataFrame.Slice.subscript.getter();
        specialized Set.init<A>(_:)();
        v44 = *(_QWORD *)(v43 + 16);
        swift_bridgeObjectRelease();
        swift_isUniquelyReferenced_nonNull_native();
        v98 = v34;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v44, v42, v41);
        v34 = v98;
        OUTLINED_FUNCTION_104();
        OUTLINED_FUNCTION_27_16();
        v32 = v96[1](v2, v97);
        if (v28)
          goto LABEL_7;
LABEL_8:
        if (__OFADD__(v30++, 1))
          goto LABEL_46;
        if (v30 >= (uint64_t)v93)
        {
LABEL_31:
          v56 = v91;
          v57 = v89;
          swift_release();
          ((void (**)(char *, uint64_t))v57)[1](v95, v56);
          return;
        }
        v38 = *(_QWORD *)(v92 + 8 * v30);
        if (!v38)
        {
          v39 = v30 + 1;
          if (v30 + 1 >= (uint64_t)v93)
            goto LABEL_31;
          v38 = *(_QWORD *)(v92 + 8 * v39);
          if (!v38)
          {
            v39 = v30 + 2;
            if (v30 + 2 >= (uint64_t)v93)
              goto LABEL_31;
            v38 = *(_QWORD *)(v92 + 8 * v39);
            if (!v38)
            {
              v39 = v30 + 3;
              if (v30 + 3 >= (uint64_t)v93)
                goto LABEL_31;
              v38 = *(_QWORD *)(v92 + 8 * v39);
              if (!v38)
              {
                while (1)
                {
                  v30 = v39 + 1;
                  if (__OFADD__(v39, 1))
                    goto LABEL_47;
                  if (v30 >= (uint64_t)v93)
                    goto LABEL_31;
                  v38 = *(_QWORD *)(v92 + 8 * v30);
                  ++v39;
                  if (v38)
                    goto LABEL_18;
                }
              }
            }
          }
          v30 = v39;
        }
LABEL_18:
        v28 = (v38 - 1) & v38;
      }
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v27 = v95;
    static _ImageUtilities.getImageURLsAndAnnotations(from:)(a1, (uint64_t)&v98);
    v84 = v27;
    if (v27)
    {
      swift_bridgeObjectRelease_n();
      outlined destroy of MLHandPoseClassifier.DataSource(v1);
    }
    else
    {
      v45 = v98;
      v46 = v99;
      outlined copy of Result<_DataTable, Error>(v98, v99);
      OUTLINED_FUNCTION_44_12();
      specialized MLDataTable.subscript.getter((char)v45, v46, v47, v48);
      OUTLINED_FUNCTION_90_2(v45);
      specialized MLDataColumn.dropDuplicates()(v106, v107, (uint64_t)&v98);
      OUTLINED_FUNCTION_24_42();
      v49 = OUTLINED_FUNCTION_28_35();
      outlined copy of Result<_DataTable, Error>(v45, v46);
      OUTLINED_FUNCTION_9_53((uint64_t)&v98, v50);
      v89 = (void (**)(_QWORD, _QWORD))v45;
      v88 = v46;
      OUTLINED_FUNCTION_90_2(v45);
      v51 = OUTLINED_FUNCTION_28_35();
      v52 = *(_QWORD *)(v51 + 16);
      v83 = v1;
      v87 = v49;
      if (v52)
      {
        v98 = (id)MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v53 = v98;
        v108 = (id)v51;
        v54 = v51 + 40;
        do
        {
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_66_19();
          OUTLINED_FUNCTION_30();
          v98 = v53;
          v55 = v53[2];
          if (v55 >= v53[3] >> 1)
          {
            OUTLINED_FUNCTION_18_34();
            v53 = v98;
          }
          v54 += 16;
          v53[2] = v55 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v53+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v55, v10, v91);
          --v52;
        }
        while (v52);
        v82 = v53;
        swift_bridgeObjectRelease();
        v49 = v87;
      }
      else
      {
        OUTLINED_FUNCTION_123();
        v82 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v86 = *(char **)(v49 + 16);
      v58 = v91;
      if (v86)
      {
        v59 = 0;
        v60 = (id)MEMORY[0x24BEE4B00];
        v85 = v49 + 32;
        v61 = (uint64_t (**)(_QWORD, uint64_t))MEMORY[0x24BEE4B00];
        while ((unint64_t)v59 < *(_QWORD *)(v49 + 16))
        {
          v95 = v59;
          v96 = v61;
          v62 = v85 + 16 * (_QWORD)v59;
          v64 = *(void **)v62;
          v63 = *(_QWORD *)(v62 + 8);
          v108 = v60;
          v65 = v89;
          v97 = (uint64_t)v64;
          v98 = v89;
          v66 = v88;
          LOBYTE(v99) = v88;
          OUTLINED_FUNCTION_49_22();
          OUTLINED_FUNCTION_23_3();
          v67 = OUTLINED_FUNCTION_44_12();
          MLDataTable.subscript.getter(v67, v68, v69);
          OUTLINED_FUNCTION_90_2(v65);
          v102 = v104;
          v103 = v105;
          v100 = MEMORY[0x24BEE0D00];
          v101 = &protocol witness table for String;
          v98 = v64;
          v99 = v63;
          OUTLINED_FUNCTION_23_3();
          static MLUntypedColumn.== infix(_:_:)();
          OUTLINED_FUNCTION_55_24();
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v98);
          v70 = v106;
          LOBYTE(v64) = v107;
          v104 = v65;
          v105 = v66;
          v102 = v106;
          v103 = v107;
          OUTLINED_FUNCTION_49_22();
          MLDataTable.subscript.getter((uint64_t)&v102, (uint64_t)&v98);
          outlined consume of Result<_DataTable, Error>(v70, (char)v64);
          OUTLINED_FUNCTION_90_2(v65);
          v71 = v98;
          v72 = v99;
          OUTLINED_FUNCTION_23_3();
          v73 = MLDataTable.size.getter();
          v74 = v108;
          swift_isUniquelyReferenced_nonNull_native();
          v98 = v74;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v73, v97, v63);
          v60 = v98;
          v94 = v63;
          OUTLINED_FUNCTION_123();
          OUTLINED_FUNCTION_27_16();
          outlined copy of Result<_DataTable, Error>(v71, v72);
          OUTLINED_FUNCTION_9_53((uint64_t)&v106, v75);
          v93 = (void (**)(_QWORD, _QWORD))v71;
          LODWORD(v92) = v72;
          OUTLINED_FUNCTION_90_2(v71);
          specialized MLDataColumn.dropDuplicates()(v106, v107, (uint64_t)&v98);
          OUTLINED_FUNCTION_55_24();
          v76 = OUTLINED_FUNCTION_28_35();
          v77 = *(_QWORD *)(v76 + 16);
          if (v77)
          {
            v108 = v60;
            v98 = (id)MEMORY[0x24BEE4AF8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v78 = v98;
            v90 = v76;
            v79 = v76 + 40;
            do
            {
              swift_bridgeObjectRetain();
              OUTLINED_FUNCTION_66_19();
              OUTLINED_FUNCTION_30();
              v98 = v78;
              v80 = v78[2];
              if (v80 >= v78[3] >> 1)
              {
                OUTLINED_FUNCTION_18_34();
                v78 = v98;
              }
              v79 += 16;
              v78[2] = v80 + 1;
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v78+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v80, v7, v58);
              --v77;
            }
            while (v77);
            swift_bridgeObjectRelease();
            v60 = v108;
          }
          else
          {
            OUTLINED_FUNCTION_123();
          }
          v81 = v96;
          v59 = v95 + 1;
          swift_isUniquelyReferenced_nonNull_native();
          v98 = v81;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
          v61 = (uint64_t (**)(_QWORD, uint64_t))v98;
          OUTLINED_FUNCTION_123();
          OUTLINED_FUNCTION_27_16();
          outlined consume of Result<_DataTable, Error>(v93, v92);
          v49 = v87;
          if (v59 == v86)
            goto LABEL_44;
        }
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
      }
      else
      {
LABEL_44:
        OUTLINED_FUNCTION_30();
        outlined consume of Result<_DataTable, Error>(v89, v88);
        outlined destroy of MLHandPoseClassifier.DataSource(v83);
      }
    }
  }
}

uint64_t closure #1 in static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a1[1];
  if (!v5)
    return 0;
  if (*a1 == a2 && v5 == a3)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

void static _ImageUtilities.renameFeatureColumns(dataFrame:sessionIdColumn:featureColumn:labelColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t inited;
  Swift::OpaquePointer v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  *(_QWORD *)(inited + 48) = a4;
  *(_QWORD *)(inited + 56) = a5;
  *(_QWORD *)(inited + 64) = a6;
  *(_QWORD *)(inited + 72) = a7;
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_199();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_38_13();
  DataFrame.validateContainsColumns(_:context:)(v14, v15);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (!v16)
  {
    OUTLINED_FUNCTION_59_10();
    DataFrame.renameColumn(_:to:)(v17, v18);
    OUTLINED_FUNCTION_41_12();
    DataFrame.renameColumn(_:to:)(v19, v20);
    v21._countAndFlagsBits = a6;
    v21._object = a7;
    v22._countAndFlagsBits = 0x6C6562616CLL;
    v22._object = (void *)0xE500000000000000;
    DataFrame.renameColumn(_:to:)(v21, v22);
  }
}

void static _ImageUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v13;
  char v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v13 = *(void **)a1;
  v14 = *(_BYTE *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  *(_QWORD *)(inited + 48) = a4;
  *(_QWORD *)(inited + 56) = a5;
  *(_QWORD *)(inited + 64) = a6;
  *(_QWORD *)(inited + 72) = a7;
  outlined copy of Result<_DataTable, Error>(v13, v14);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_199();
  OUTLINED_FUNCTION_10_5();
  OUTLINED_FUNCTION_38_13();
  static _ValidationUtilities.validateTableFormat(table:context:columns:)(v16, v17, v18, inited);
  if (v28)
  {
    outlined consume of Result<_DataTable, Error>(v13, v14);
    OUTLINED_FUNCTION_42_11();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    outlined consume of Result<_DataTable, Error>(v13, v14);
    OUTLINED_FUNCTION_42_11();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    OUTLINED_FUNCTION_28_21();
    OUTLINED_FUNCTION_59_10();
    MLDataTable.renameImpl(named:to:)(v19, v20, v21, v22);
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_0_41();
      OUTLINED_FUNCTION_16_4();
    }
    OUTLINED_FUNCTION_28_21();
    OUTLINED_FUNCTION_41_12();
    MLDataTable.renameImpl(named:to:)(v23, v24, v25, v26);
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_0_41();
      OUTLINED_FUNCTION_16_4();
    }
    OUTLINED_FUNCTION_28_21();
    OUTLINED_FUNCTION_15_43(a6);
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_0_41();
      OUTLINED_FUNCTION_16_4();
    }
  }
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL();
    result = MEMORY[0x22075B938](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of MLHandPoseClassifier.DataSource(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLHandPoseClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Column<String> and conformance Column<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Column<String> and conformance Column<A>;
  if (!lazy protocol witness table cache variable for type Column<String> and conformance Column<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Column<String>);
    result = MEMORY[0x22075B938](MEMORY[0x24BDF5F90], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t OUTLINED_FUNCTION_0_71()
{
  uint64_t v0;
  void *v1;
  char v2;

  v1 = *(void **)(v0 - 288);
  v2 = *(_BYTE *)(v0 - 280);
  *(_QWORD *)(v0 - 104) = v1;
  *(_BYTE *)(v0 - 96) = v2;
  *(_QWORD *)(v0 - 288) = v1;
  *(_BYTE *)(v0 - 280) = v2;
  outlined copy of Result<_DataTable, Error>(v1, v2);
  return static _ImageUtilities.validateImageInput(trainingData:imageColumn:labelColumn:)(v0 - 288, 0x7461506567616D69, 0xE900000000000068, 0x6C6562616CLL, 0xE500000000000000);
}

uint64_t OUTLINED_FUNCTION_7_56()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 320));
}

void OUTLINED_FUNCTION_9_53(uint64_t a1@<X8>, double a2@<D0>)
{
  char v2;
  char v3;

  specialized MLDataTable.subscript.getter(v2, v3, a1, a2);
}

uint64_t OUTLINED_FUNCTION_10_48()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  outlined consume of Result<_DataTable, Error>(v1, 0);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v2 - 304) + 8))(*(_QWORD *)(v2 - 384), v0);
}

uint64_t OUTLINED_FUNCTION_14_50@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), v2);
}

uint64_t OUTLINED_FUNCTION_15_43(uint64_t a1)
{
  uint64_t v1;

  return MLDataTable.renameImpl(named:to:)(a1, v1, 0x6C6562616CLL, 0xE500000000000000);
}

void OUTLINED_FUNCTION_18_34()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_21_39()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void OUTLINED_FUNCTION_24_42()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_27_42@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, *(_QWORD *)(v3 - 312));
}

uint64_t OUTLINED_FUNCTION_28_35()
{
  uint64_t v0;

  return specialized Array<A>.init(_:)(*(void **)(v0 - 176), *(_BYTE *)(v0 - 168));
}

uint64_t OUTLINED_FUNCTION_35_25()
{
  uint64_t v0;

  return v0;
}

double OUTLINED_FUNCTION_47_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

id OUTLINED_FUNCTION_49_22()
{
  char v0;
  void *v1;

  return outlined copy of Result<_DataTable, Error>(v1, v0);
}

uint64_t OUTLINED_FUNCTION_51_26@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, *(_QWORD *)(v3 - 168));
}

void OUTLINED_FUNCTION_55_24()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_57_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 104))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_59_24()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_64_17()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_65_20()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_66_19()
{
  return URL.init(fileURLWithPath:)();
}

_QWORD *initializeBufferWithCopyOfBuffer for MLImageClassifier.PersistentParameters(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
    return v7;
  }
  v7 = a1;
  v8 = a3[5];
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *v9 = *v10;
    swift_bridgeObjectRetain();
LABEL_11:
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLImageClassifier.DataSource();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *v9 = *v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_12:
  v14 = a3[6];
  v15 = (char *)v7 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
    v19 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
    v20 = &v15[v19];
    v21 = &v16[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  v23 = a3[8];
  *((_BYTE *)v7 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_QWORD *)((char *)v7 + v23) = *(_QWORD *)((char *)a2 + v23);
  *(_QWORD *)((char *)v7 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return v7;
}

uint64_t destroy for MLImageClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
    goto LABEL_6;
  if (EnumCaseMultiPayload != 1)
    goto LABEL_7;
  type metadata accessor for MLImageClassifier.DataSource();
  v6 = swift_getEnumCaseMultiPayload();
  if (v6 == 2)
  {
LABEL_6:
    swift_bridgeObjectRelease();
  }
  else if (v6 <= 1)
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
  }
LABEL_7:
  v8 = a1 + *(int *)(a2 + 24);
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
    type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for MLImageClassifier.PersistentParameters(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *v7 = *v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      goto LABEL_10;
    }
    type metadata accessor for MLImageClassifier.DataSource();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *v7 = *v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      v11 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_10:
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
    v18 = &v13[v17];
    v19 = &v14[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  v21 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *assignWithCopy for MLImageClassifier.PersistentParameters(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    v9 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *v7 = *v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        goto LABEL_11;
      }
      type metadata accessor for MLImageClassifier.DataSource();
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        *v7 = *v8;
        swift_bridgeObjectRetain();
      }
      else
      {
        v11 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
LABEL_11:
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v12, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    v15 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
      v18 = &v13[v17];
      v19 = &v14[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *initializeWithTake for MLImageClassifier.PersistentParameters(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = type metadata accessor for MLImageClassifier.DataSource();
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
    v17 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    *(_OWORD *)&v13[*(int *)(v17 + 20)] = *(_OWORD *)&v14[*(int *)(v17 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  v18 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *assignWithTake for MLImageClassifier.PersistentParameters(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    v9 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = type metadata accessor for MLImageClassifier.DataSource();
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v12, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    v15 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      v17 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
      *(_OWORD *)&v13[*(int *)(v17 + 20)] = *(_OWORD *)&v14[*(int *)(v17 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  v18 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.PersistentParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF87848(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_4_12();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v9 = OUTLINED_FUNCTION_46_24();
      v10 = *(int *)(a3 + 24);
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v10, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.PersistentParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *sub_21AF878E4(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_4_12();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = OUTLINED_FUNCTION_46_24();
      v10 = *(int *)(a4 + 24);
    }
    return (_QWORD *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MLImageClassifier.PersistentParameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLImageClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLImageClassifier.PersistentParameters)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MLImageClassifier.PersistentParameters()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLImageClassifier.FeatureExtractorType(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t MLImageClassifier.PersistentParameters.init(trainingData:modelParameters:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_91_1();
  v8 = (int *)type metadata accessor for MLImageClassifier.PersistentParameters();
  v9 = v8[7];
  *((_BYTE *)a3 + v9) = 1;
  *a3 = a1;
  result = outlined init with copy of Any?((uint64_t)(a2 + 2), (uint64_t)&v12);
  if (v13)
  {
    outlined init with take of Any(&v12, &v14);
    OUTLINED_FUNCTION_4_12();
    swift_dynamicCast();
    MLImageClassifier.ModelParameters.algorithm.getter(v3);
    outlined init with take of MLHandPoseClassifier.ModelParameters(v3, (uint64_t)a3 + v8[6], type metadata accessor for MLImageClassifier.FeatureExtractorType);
    *((_BYTE *)a3 + v9) = 0;
    v11 = a2[1];
    *(_QWORD *)((char *)a3 + v8[8]) = *a2;
    result = outlined destroy of MLImageClassifier.ModelParameters((uint64_t)a2);
    *(_QWORD *)((char *)a3 + v8[9]) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLImageClassifier.PersistentParameters.init(sessionDirectory:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  _QWORD *v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  void *v33;
  Class isa;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  __int128 *v48;
  void *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  int EnumTagSinglePayload;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char v100[32];
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.ModelParameters.ValidationData?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v90 = v6;
  v91 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v89 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.FeatureExtractorType?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v94 = v10;
  v93 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v92 = v12;
  v13 = OUTLINED_FUNCTION_78();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_11_19();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v79 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v79 - v19;
  v21 = type metadata accessor for MLImageClassifier.PersistentParameters();
  v22 = *(int *)(v21 + 28);
  v95 = a2;
  *((_BYTE *)a2 + v22) = 1;
  OUTLINED_FUNCTION_38_3();
  OUTLINED_FUNCTION_27_2();
  v23 = a1;
  URL.appendingPathComponent(_:)();
  v24 = v96;
  v25 = Data.init(contentsOf:options:)();
  if (v24)
  {
    v27 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v27(v23, v13);
    v27((uint64_t)v20, v13);
    goto LABEL_24;
  }
  v82 = v22;
  v81 = v2;
  v84 = v21;
  v83 = v17;
  v85 = 0;
  v28 = v95;
  v96 = a1;
  v29 = v14;
  v30 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v31 = v25;
  v32 = v26;
  OUTLINED_FUNCTION_139_1((uint64_t)v20);
  v33 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v98 = 0;
  v35 = objc_msgSend(v33, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v98);

  v36 = (id)v98;
  if (!v35)
  {
    v49 = v36;
    _convertNSErrorToError(_:)();

    swift_willThrow(v50);
    outlined consume of Data._Representation(v31, v32);
    OUTLINED_FUNCTION_139_1(v96);
    goto LABEL_24;
  }
  v86 = v31;
  v87 = v32;
  v88 = v30;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v100, (uint64_t)&v98);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_8_58(v51, (uint64_t)"Cannot restore session. Can't read training parameters.");
    OUTLINED_FUNCTION_23_41();
    v52 = v96;
    v53 = v13;
LABEL_23:
    v88(v52, v53);
    OUTLINED_FUNCTION_42_15();
    goto LABEL_24;
  }
  v38 = v97;
  v39 = OUTLINED_FUNCTION_50_24();
  specialized Dictionary.subscript.getter(v39, v40, v38, v41);
  if (!v99)
    goto LABEL_18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
  if ((OUTLINED_FUNCTION_9_54() & 1) == 0)
  {
LABEL_21:
    OUTLINED_FUNCTION_60_0();
    goto LABEL_22;
  }
  v42 = v97;
  OUTLINED_FUNCTION_38_3();
  OUTLINED_FUNCTION_29_32(v43 - 35, (uint64_t)"augmentation_options");
  if (!v99)
    goto LABEL_17;
  if ((OUTLINED_FUNCTION_9_54() & 1) == 0)
  {
LABEL_20:
    OUTLINED_FUNCTION_104();
    goto LABEL_21;
  }
  v44 = v97;
  specialized Dictionary.subscript.getter(0x726574695F78616DLL, 0xEE00736E6F697461, v38, &v98);
  if (!v99)
  {
LABEL_17:
    OUTLINED_FUNCTION_104();
LABEL_18:
    OUTLINED_FUNCTION_60_0();
    v47 = &demangling cache variable for type metadata for Any?;
    v48 = &v98;
    goto LABEL_19;
  }
  if ((OUTLINED_FUNCTION_9_54() & 1) == 0)
    goto LABEL_20;
  v80 = v97;
  OUTLINED_FUNCTION_38_3();
  OUTLINED_FUNCTION_29_32(v45 - 38, (uint64_t)"feature_extractor");
  if (!v99)
    goto LABEL_17;
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
    goto LABEL_20;
  v79[1] = v37;
  v46 = v94;
  MLImageClassifier.FeatureExtractorType.init(dictionary:)(v97, v94);
  if (__swift_getEnumTagSinglePayload(v46, 1, v93) == 1)
  {
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_60_0();
    v47 = &demangling cache variable for type metadata for MLImageClassifier.FeatureExtractorType?;
    v48 = (__int128 *)v46;
LABEL_19:
    outlined destroy of URL?((uint64_t)v48, v47);
LABEL_22:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_38_3();
    *(_QWORD *)v55 = v54 - 3;
    *(_QWORD *)(v55 + 8) = 0x800000021AFF2350;
    *(_OWORD *)(v55 + 16) = 0u;
    *(_OWORD *)(v55 + 32) = 0u;
    *(_BYTE *)(v55 + 48) = 0;
    swift_willThrow(0.0);
    OUTLINED_FUNCTION_23_41();
    v52 = v96;
    v53 = v13;
    goto LABEL_23;
  }
  v56 = v46;
  v57 = v38;
  v58 = v92;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v56, v92, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  v59 = v85;
  specialized _NativeDictionary.mapValues<A>(_:)(v42);
  v94 = v60;
  v85 = v59;
  OUTLINED_FUNCTION_104();
  *v28 = v94;
  v61 = v58;
  v62 = v84;
  *(_QWORD *)((char *)v28 + *(int *)(v84 + 32)) = v80;
  v63 = v28;
  v94 = (uint64_t)v28 + *(int *)(v62 + 24);
  outlined init with copy of MLTrainingSessionParameters(v61, v94, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  *(_QWORD *)((char *)v28 + *(int *)(v62 + 36)) = v44;
  v64 = v57;
  specialized Dictionary.subscript.getter(0x6966697373616C63, 0xEF657079745F7265, v57, &v98);
  if (v99)
  {
    v65 = OUTLINED_FUNCTION_6_8();
    v66 = (uint64_t)v83;
    if ((v65 & 1) != 0)
      MLImageClassifier.ModelParameters.ClassifierType.init(dictionary:)(v97, (char *)&v98);
  }
  else
  {
    outlined destroy of URL?((uint64_t)&v98, &demangling cache variable for type metadata for Any?);
    v66 = (uint64_t)v83;
  }
  *((_BYTE *)v63 + v82) = 0;
  OUTLINED_FUNCTION_21_20();
  URL.appendingPathComponent(_:)();
  v67 = OUTLINED_FUNCTION_21_20();
  specialized Dictionary.subscript.getter(v67, v68 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000, v64, v69);
  swift_bridgeObjectRelease();
  if (!v99)
  {
    OUTLINED_FUNCTION_23_41();
    outlined destroy of URL?((uint64_t)&v98, &demangling cache variable for type metadata for Any?);
LABEL_35:
    v77 = v88;
    v88(v96, v13);
    v77(v66, v13);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v92, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    OUTLINED_FUNCTION_42_15();
    swift_storeEnumTagMultiPayload();
    goto LABEL_24;
  }
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
  {
    OUTLINED_FUNCTION_23_41();
    goto LABEL_35;
  }
  v70 = v97;
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  v72 = v81;
  v71(v81, v66, v13);
  v73 = v90;
  MLImageClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(v70, v72, v90);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v73, 1, v91);
  v75 = v96;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?(v73, &demangling cache variable for type metadata for MLImageClassifier.ModelParameters.ValidationData?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_8_58(v76, (uint64_t)"Cannot restore session. Failed to load validation data.");
    OUTLINED_FUNCTION_23_41();
    OUTLINED_FUNCTION_139_1(v75);
    OUTLINED_FUNCTION_139_1(v66);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v92, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    OUTLINED_FUNCTION_42_15();
    swift_bridgeObjectRelease();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v94, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  }
  else
  {
    OUTLINED_FUNCTION_23_41();
    OUTLINED_FUNCTION_139_1(v75);
    OUTLINED_FUNCTION_139_1(v66);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v92, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    OUTLINED_FUNCTION_42_15();
    v78 = v89;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v73, v89, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    outlined init with take of MLHandPoseClassifier.ModelParameters(v78, (uint64_t)v63 + *(int *)(v84 + 20), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  }
LABEL_24:
  OUTLINED_FUNCTION_7();
}

void MLImageClassifier.FeatureExtractorType.init(dictionary:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_55_0();
  v47 = OUTLINED_FUNCTION_78();
  v8 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_28_11();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v44 - v10;
  v12 = OUTLINED_FUNCTION_46_24();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_11_19();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v44 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v44 - v18;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_27;
  v20 = OUTLINED_FUNCTION_48_3();
  if ((v21 & 1) == 0)
    goto LABEL_27;
  OUTLINED_FUNCTION_19_40(v20);
  if ((OUTLINED_FUNCTION_1_57() & 1) == 0)
    goto LABEL_27;
  v45 = v19;
  v46 = a2;
  OUTLINED_FUNCTION_54_21();
  v24 = v48;
  v23 = v49;
  v26 = v48 == v25 && v49 == v22;
  if (v26 || (OUTLINED_FUNCTION_8_3() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_6(0x6E6F697369766572, 0xE800000000000000, &v50);
    v27 = OUTLINED_FUNCTION_30();
    a2 = v46;
    if (v51)
    {
      v28 = OUTLINED_FUNCTION_1_57();
      v29 = v48;
      if (!v28)
        v29 = 0;
      v30 = v28 ^ 1;
    }
    else
    {
      OUTLINED_FUNCTION_25_37(v27, &demangling cache variable for type metadata for Any?);
      v29 = 0;
      v30 = 1;
    }
    *(_QWORD *)v16 = v29;
    v16[8] = v30;
    swift_storeEnumTagMultiPayload();
    goto LABEL_15;
  }
  if (v24 == 0x6D6F74737563 && v23 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = OUTLINED_FUNCTION_8_3();
    OUTLINED_FUNCTION_123();
    if ((v34 & 1) == 0)
    {
      OUTLINED_FUNCTION_30();
LABEL_31:
      v32 = 1;
      a2 = v46;
      goto LABEL_29;
    }
  }
  OUTLINED_FUNCTION_10_6(0x61705F6C65646F6DLL, 0xEA00000000006874, &v50);
  if (!v51)
  {
    v37 = OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_25_37(v37, &demangling cache variable for type metadata for Any?);
    goto LABEL_31;
  }
  v35 = OUTLINED_FUNCTION_1_57();
  a2 = v46;
  if ((v35 & 1) == 0)
  {
LABEL_27:
    OUTLINED_FUNCTION_30();
    goto LABEL_28;
  }
  URL.init(string:)();
  OUTLINED_FUNCTION_123();
  v36 = v47;
  if (__swift_getEnumTagSinglePayload(v4, 1, v47) == 1)
  {
    OUTLINED_FUNCTION_30();
    outlined destroy of URL?(v4, &demangling cache variable for type metadata for URL?);
LABEL_28:
    v32 = 1;
    goto LABEL_29;
  }
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  v38(v11, v4, v36);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v2, v11, v36);
  OUTLINED_FUNCTION_10_6(0x74757074756FLL, 0xE600000000000000, &v50);
  OUTLINED_FUNCTION_30();
  v39 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v36);
  if (v51)
  {
    v40 = OUTLINED_FUNCTION_1_57();
    if (v40)
      v41 = v48;
    else
      v41 = 0;
    if (v40)
      v42 = v49;
    else
      v42 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_25_37(v39, &demangling cache variable for type metadata for Any?);
    v41 = 0;
    v42 = 0;
  }
  v43 = &v3[*(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20)];
  v38(v3, v2, v36);
  *(_QWORD *)v43 = v41;
  *((_QWORD *)v43 + 1) = v42;
  swift_storeEnumTagMultiPayload();
  v16 = v3;
  a2 = v46;
LABEL_15:
  v31 = (uint64_t)v45;
  OUTLINED_FUNCTION_33_35((uint64_t)v16, (uint64_t)v45);
  OUTLINED_FUNCTION_33_35(v31, a2);
  v32 = 0;
LABEL_29:
  __swift_storeEnumTagSinglePayload(a2, v32, 1, v12);
  OUTLINED_FUNCTION_9_5();
}

void MLImageClassifier.ModelParameters.ClassifierType.init(dictionary:)(uint64_t a1@<X0>, char *a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if (!*(_QWORD *)(a1 + 16) || (v4 = OUTLINED_FUNCTION_48_3(), (v5 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    OUTLINED_FUNCTION_30();
    goto LABEL_9;
  }
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v10);
  OUTLINED_FUNCTION_30();
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_9:
    outlined destroy of URL?((uint64_t)&v10, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    v6 = 1;
    goto LABEL_11;
  }
  if (v8 != 0xD000000000000011 || v9 != 0x800000021AFF8120)
  {
    OUTLINED_FUNCTION_27_2();
    v7 = OUTLINED_FUNCTION_8_3();
    OUTLINED_FUNCTION_30();
    v6 = 0;
    if ((v7 & 1) != 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  v6 = 0;
LABEL_11:
  *a2 = v6;
}

void MLImageClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v28;
  __int16 v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int16 v34;
  char v35;
  uint64_t v36;

  v8 = OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_42_24();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.DataSource?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v13 = v12 - v11;
  v14 = type metadata accessor for MLImageClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_49();
  v18 = v17 - v16;
  v19 = OUTLINED_FUNCTION_4_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_14_5();
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_25;
  v21 = OUTLINED_FUNCTION_48_3();
  if ((v22 & 1) == 0)
    goto LABEL_25;
  OUTLINED_FUNCTION_19_40(v21);
  if ((OUTLINED_FUNCTION_1_57() & 1) == 0)
    goto LABEL_25;
  v23 = v31 == 1701736302 && v32 == 0xE400000000000000;
  if (v23 || (OUTLINED_FUNCTION_8_3() & 1) != 0)
  {
    OUTLINED_FUNCTION_16_45();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_123();
    goto LABEL_10;
  }
  v25 = v31 == 0x756F735F61746164 && v32 == 0xEB00000000656372;
  if (!v25 && (OUTLINED_FUNCTION_8_3() & 1) == 0)
  {
    if (v31 == 0x74696C7073 && v32 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = OUTLINED_FUNCTION_8_3();
      OUTLINED_FUNCTION_123();
      if ((v28 & 1) == 0)
      {
LABEL_25:
        OUTLINED_FUNCTION_16_45();
        OUTLINED_FUNCTION_30();
        goto LABEL_26;
      }
    }
    OUTLINED_FUNCTION_10_6(1635017060, 0xE400000000000000, &v33);
    v26 = OUTLINED_FUNCTION_30();
    if (!v36)
      goto LABEL_33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((OUTLINED_FUNCTION_1_57() & 1) == 0)
      goto LABEL_34;
    MLSplitStrategy.init(dictionary:)(v31, (uint64_t)&v33);
    OUTLINED_FUNCTION_16_45();
    if ((v35 & 1) == 0)
    {
      v29 = v34;
      *(_OWORD *)v4 = v33;
      *(_BYTE *)(v4 + 16) = v29;
      *(_BYTE *)(v4 + 17) = HIBYTE(v29) & 1;
      goto LABEL_10;
    }
LABEL_26:
    v24 = 1;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_6(1635017060, 0xE400000000000000, &v33);
  v26 = OUTLINED_FUNCTION_30();
  if (!v36)
  {
LABEL_33:
    OUTLINED_FUNCTION_25_37(v26, &demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_1_57() & 1) == 0)
  {
LABEL_34:
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a2, v8);
    goto LABEL_26;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, a2, v8);
  MLImageClassifier.DataSource.init(dictionary:tableFile:)(v31, v13);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a2, v8);
  if (__swift_getEnumTagSinglePayload(v13, 1, v14) == 1)
  {
    outlined destroy of URL?(v13, &demangling cache variable for type metadata for MLImageClassifier.DataSource?);
    v24 = 1;
    goto LABEL_27;
  }
  OUTLINED_FUNCTION_33_35(v13, v18);
  OUTLINED_FUNCTION_33_35(v18, v4);
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v4, a3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  v24 = 0;
LABEL_27:
  __swift_storeEnumTagSinglePayload(a3, v24, 1, v19);
  OUTLINED_FUNCTION_9_5();
}

void MLImageClassifier.PersistentParameters.save(toSessionDirectory:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Class isa;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  double v25;
  uint64_t v26;
  id v27[40];

  v3 = v0;
  v27[38] = *(id *)MEMORY[0x24BDAC8D0];
  v26 = OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_42_24();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE8D80;
  OUTLINED_FUNCTION_47_28();
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = 0xE500000000000000;
  specialized _NativeDictionary.mapValues<A>(_:)(*v0);
  v9 = v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 72) = v10;
  *(_QWORD *)(inited + 80) = 0x69746164696C6176;
  *(_QWORD *)(inited + 88) = 0xEA00000000006E6FLL;
  v11 = (int *)type metadata accessor for MLImageClassifier.PersistentParameters();
  MLImageClassifier.ModelParameters.ValidationData.dictionary.getter();
  v13 = v12;
  v14 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(_QWORD *)(inited + 96) = v13;
  *(_QWORD *)(inited + 120) = v14;
  *(_QWORD *)(inited + 128) = 0xD000000000000011;
  *(_QWORD *)(inited + 136) = 0x800000021AFF5A50;
  *(_QWORD *)(inited + 144) = MLImageClassifier.FeatureExtractorType.dictionary.getter();
  *(_QWORD *)(inited + 168) = v14;
  strcpy((char *)(inited + 176), "max_iterations");
  *(_BYTE *)(inited + 191) = -18;
  v15 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 192) = *(uint64_t *)((char *)v3 + v11[8]);
  *(_QWORD *)(inited + 216) = v15;
  *(_QWORD *)(inited + 224) = 0xD000000000000014;
  *(_QWORD *)(inited + 232) = 0x800000021AFF2830;
  v16 = *(uint64_t *)((char *)v3 + v11[9]);
  *(_QWORD *)(inited + 264) = v15;
  *(_QWORD *)(inited + 240) = v16;
  Dictionary.init(dictionaryLiteral:)();
  if ((*((_BYTE *)v3 + v11[7]) & 1) == 0)
  {
    v27[3] = v14;
    v27[0] = (id)MLImageClassifier.ModelParameters.ClassifierType.dictionary.getter();
    specialized Dictionary.subscript.setter((uint64_t)v27, 0x6966697373616C63, 0xEF657079745F7265);
  }
  v17 = (void *)objc_opt_self();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v27[0] = 0;
  v19 = objc_msgSend(v17, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, v27);

  v20 = v27[0];
  if (v19)
  {
    v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

    OUTLINED_FUNCTION_27_2();
    URL.appendingPathComponent(_:)();
    Data.write(to:options:)();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v26);
    outlined consume of Data._Representation(v21, v23);
  }
  else
  {
    v24 = v20;
    _convertNSErrorToError(_:)();

    swift_willThrow(v25);
  }
  OUTLINED_FUNCTION_7();
}

void MLImageClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;

  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_17_32();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_4_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_53_0();
  outlined init with copy of MLTrainingSessionParameters(v0, v1, v5);
  v6 = (char *)sub_21AF89044 + 4 * byte_21AFEFBF0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21AF89044()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  __n128 *inited;
  __n128 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *v0;
  v3 = v0[1];
  v4 = *((_BYTE *)v0 + 16);
  v5 = *((_BYTE *)v0 + 17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = (__n128 *)swift_initStackObject();
  v7 = OUTLINED_FUNCTION_5_10(inited, (__n128)xmmword_21AFE7F70);
  v8 = MEMORY[0x24BEE0D00];
  v7[3].n128_u64[0] = 0x74696C7073;
  v7[3].n128_u64[1] = 0xE500000000000000;
  v7[4].n128_u64[1] = v8;
  v7[5].n128_u64[0] = 1635017060;
  v7[5].n128_u64[1] = v9;
  *(_QWORD *)(v1 - 216) = v2;
  *(_QWORD *)(v1 - 208) = v3;
  *(_BYTE *)(v1 - 200) = v4;
  *(_BYTE *)(v1 - 199) = v5;
  v10 = MLSplitStrategy.dictionary.getter();
  inited[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  inited[6].n128_u64[0] = v10;
  Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLImageClassifier.FeatureExtractorType.dictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  v6 = v5 - v4;
  OUTLINED_FUNCTION_46_24();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BEE4B00];
  outlined init with copy of MLTrainingSessionParameters(v1, (uint64_t)v9, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v9, v6, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
    v11 = MEMORY[0x24BEE0D00];
    v24 = MEMORY[0x24BEE0D00];
    v22 = 0x6D6F74737563;
    v23 = 0xE600000000000000;
    OUTLINED_FUNCTION_34_23((uint64_t)&v22);
    v12 = OUTLINED_FUNCTION_78();
    v24 = v12;
    v13 = __swift_allocate_boxed_opaque_existential_0(&v22);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v13, v6, v12);
    specialized Dictionary.subscript.setter((uint64_t)&v22, 0x61705F6C65646F6DLL, 0xEA00000000006874);
    v14 = (uint64_t *)(v6 + *(int *)(v2 + 20));
    v15 = v14[1];
    if (v15)
    {
      v16 = *v14;
      v24 = v11;
      v22 = v16;
      v23 = v15;
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.setter((uint64_t)&v22, 0x74757074756FLL, 0xE600000000000000);
    }
    outlined destroy of MLHandPoseClassifier.ModelParameters(v6, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else
  {
    v17 = *(_QWORD *)v9;
    v18 = v9[8];
    v24 = MEMORY[0x24BEE0D00];
    OUTLINED_FUNCTION_54_21();
    v22 = v19;
    v23 = 0xEA0000000000746ELL;
    OUTLINED_FUNCTION_34_23((uint64_t)&v22);
    if ((v18 & 1) == 0)
    {
      v24 = MEMORY[0x24BEE1768];
      v22 = v17;
      specialized Dictionary.subscript.setter((uint64_t)&v22, 0x6E6F697369766572, 0xE800000000000000);
    }
  }
  return v25;
}

uint64_t MLImageClassifier.ModelParameters.ClassifierType.dictionary.getter()
{
  _QWORD v1[4];
  uint64_t v2;

  v2 = MEMORY[0x24BEE4B00];
  v1[3] = MEMORY[0x24BEE0D00];
  v1[0] = 0xD000000000000011;
  v1[1] = 0x800000021AFF8120;
  OUTLINED_FUNCTION_34_23((uint64_t)v1);
  return v2;
}

void MLImageClassifier.DataSource.dictionary.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  int EnumCaseMultiPayload;
  __n128 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 *inited;
  __n128 *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v2 = OUTLINED_FUNCTION_78();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_17_32();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_91_1();
  outlined init with copy of MLTrainingSessionParameters(v0, (uint64_t)v1, v5);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      v15 = *v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      inited = (__n128 *)swift_initStackObject();
      v17 = OUTLINED_FUNCTION_5_10(inited, (__n128)xmmword_21AFE7F70);
      v18 = MEMORY[0x24BEE0D00];
      strcpy((char *)&v17[3], "files_by_label");
      v17[3].n128_u8[15] = -18;
      OUTLINED_FUNCTION_47_28();
      v19[9] = v18;
      v19[10] = v20;
      v19[11] = 0xE500000000000000;
      specialized _NativeDictionary.mapValues<A>(_:)(v15);
      v22 = v21;
      OUTLINED_FUNCTION_30();
      inited[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
      inited[6].n128_u64[0] = v22;
      OUTLINED_FUNCTION_70_3();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_29_22();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v7 = (__n128 *)swift_initStackObject();
    v8 = (uint64_t)OUTLINED_FUNCTION_5_10(v7, (__n128)xmmword_21AFE7F70);
    v10 = MEMORY[0x24BEE0D00];
    v11 = 0x5F64656C6562616CLL;
    v12 = 0xED000073656C6966;
  }
  else
  {
    OUTLINED_FUNCTION_29_22();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v8 = swift_initStackObject();
    v7 = (__n128 *)v8;
    *(_OWORD *)(v8 + 16) = xmmword_21AFE7F70;
    v9 = 0xE400000000000000;
    v10 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v8 + 32) = 1684957547;
    *(_QWORD *)(v8 + 40) = 0xE400000000000000;
    v11 = 0xD000000000000013;
    v12 = 0x800000021AFF28D0;
  }
  *(_QWORD *)(v8 + 48) = v11;
  *(_QWORD *)(v8 + 56) = v12;
  *(_QWORD *)(v8 + 72) = v10;
  *(_QWORD *)(v8 + 80) = 1752457584;
  *(_QWORD *)(v8 + 88) = v9;
  v13 = URL.path.getter();
  v7[7].n128_u64[1] = v10;
  v7[6].n128_u64[0] = v13;
  v7[6].n128_u64[1] = v14;
  OUTLINED_FUNCTION_70_3();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v2);
LABEL_7:
  OUTLINED_FUNCTION_8_0();
}

void MLImageClassifier.DataSource.init(dictionary:tableFile:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v5 = type metadata accessor for MLImageClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_28_11();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v30 - v8;
  if (!*(_QWORD *)(a1 + 16)
    || (v10 = OUTLINED_FUNCTION_48_3(), (v11 & 1) == 0)
    || (OUTLINED_FUNCTION_19_40(v10), (OUTLINED_FUNCTION_1_57() & 1) == 0))
  {
    OUTLINED_FUNCTION_30();
    goto LABEL_12;
  }
  v13 = v31;
  v12 = v32;
  if (v31 != 0xD000000000000013 || v32 != 0x800000021AFF28D0)
  {
    OUTLINED_FUNCTION_27_2();
    if ((OUTLINED_FUNCTION_8_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_47_28();
      v19 = v18 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      v20 = v13 == 0x5F64656C6562616CLL && v12 == v19;
      if (v20 || (OUTLINED_FUNCTION_8_3() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_10_6(1752457584, 0xE400000000000000, &v33);
        v14 = OUTLINED_FUNCTION_30();
        if (v34)
        {
          if ((OUTLINED_FUNCTION_1_57() & 1) != 0)
            goto LABEL_9;
          goto LABEL_12;
        }
      }
      else
      {
        if (v13 == 0x79625F73656C6966 && v12 == 0xEE006C6562616C5FLL)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v22 = OUTLINED_FUNCTION_8_3();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
          {
            v23 = OUTLINED_FUNCTION_78();
            OUTLINED_FUNCTION_71_2(v23);
            OUTLINED_FUNCTION_30();
            goto LABEL_13;
          }
        }
        v24 = OUTLINED_FUNCTION_50_24();
        OUTLINED_FUNCTION_10_6(v24, v25, v26);
        v14 = OUTLINED_FUNCTION_30();
        if (v34)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
          if ((OUTLINED_FUNCTION_1_57() & 1) != 0)
          {
            specialized _NativeDictionary.mapValues<A>(_:)(v31);
            v28 = v27;
            OUTLINED_FUNCTION_30();
            v29 = OUTLINED_FUNCTION_78();
            OUTLINED_FUNCTION_71_2(v29);
            *v2 = v28;
            goto LABEL_10;
          }
          goto LABEL_12;
        }
      }
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_6(1752457584, 0xE400000000000000, &v33);
  v14 = OUTLINED_FUNCTION_30();
  if (!v34)
  {
LABEL_33:
    OUTLINED_FUNCTION_25_37(v14, &demangling cache variable for type metadata for Any?);
    goto LABEL_12;
  }
  if ((OUTLINED_FUNCTION_1_57() & 1) == 0)
  {
LABEL_12:
    v17 = OUTLINED_FUNCTION_78();
    OUTLINED_FUNCTION_71_2(v17);
LABEL_13:
    v16 = 1;
    goto LABEL_14;
  }
LABEL_9:
  OUTLINED_FUNCTION_44_27();
  OUTLINED_FUNCTION_30();
  v15 = OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_71_2(v15);
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v2, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.DataSource);
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v9, a2, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.DataSource);
  v16 = 0;
LABEL_14:
  __swift_storeEnumTagSinglePayload(a2, v16, 1, v5);
  OUTLINED_FUNCTION_9_5();
}

void specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_42_24();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_14_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [URL]>);
  v6 = OUTLINED_FUNCTION_59_25();
  v7 = 0;
  v32 = a1;
  v8 = a1 + 64;
  v29 = v6;
  v30 = v8;
  OUTLINED_FUNCTION_6_60();
  v31 = v9;
  if (!v8)
    goto LABEL_3;
LABEL_2:
  OUTLINED_FUNCTION_51_27();
  for (i = v10 | (v7 << 6); ; i = v14 + (v7 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * i);
    v16 = *v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * i);
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v33 = *v15;
      v34 = v8;
      v35 = v7;
      v36 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = v17;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v20 = v36;
      v21 = v19 + 40;
      do
      {
        swift_bridgeObjectRetain();
        URL.init(fileURLWithPath:)();
        swift_bridgeObjectRelease();
        v22 = *(_QWORD *)(v36 + 16);
        if (v22 >= *(_QWORD *)(v36 + 24) >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v21 += 16;
        *(_QWORD *)(v36 + 16) = v22 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v1 + 32))(v36+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v22, v2, v4);
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease();
      v6 = v29;
      v8 = v34;
      v7 = v35;
      v16 = v33;
    }
    else
    {
      swift_bridgeObjectRetain();
      v20 = MEMORY[0x24BEE4AF8];
    }
    OUTLINED_FUNCTION_56_21((i >> 3) & 0x1FFFFFFFFFFFFFF8);
    v24 = (_QWORD *)(v23 + 16 * i);
    *v24 = v16;
    v24[1] = v25;
    *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * i) = v20;
    v26 = *(_QWORD *)(v6 + 16);
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *(_QWORD *)(v6 + 16) = v28;
    if (v8)
      goto LABEL_2;
LABEL_3:
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_29;
    if (v12 >= v31)
      return;
    ++v7;
    if (!*(_QWORD *)(v30 + 8 * v12))
    {
      v7 = v12 + 1;
      if (v12 + 1 >= v31)
        return;
      if (!*(_QWORD *)(v30 + 8 * v7))
      {
        v7 = v12 + 2;
        if (v12 + 2 >= v31)
          return;
        if (!*(_QWORD *)(v30 + 8 * v7))
          break;
      }
    }
LABEL_16:
    OUTLINED_FUNCTION_49_23();
  }
  v13 = v12 + 3;
  if (v13 >= v31)
    return;
  if (*(_QWORD *)(v30 + 8 * v13))
  {
    v7 = v13;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v31)
      return;
    ++v13;
    if (*(_QWORD *)(v30 + 8 * v7))
      goto LABEL_16;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  v2 = OUTLINED_FUNCTION_59_25();
  v3 = 0;
  v33 = a1;
  v4 = a1 + 64;
  v30 = v2;
  v31 = v4;
  OUTLINED_FUNCTION_6_60();
  v32 = v5;
  if (!v4)
    goto LABEL_3;
LABEL_2:
  OUTLINED_FUNCTION_51_27();
  for (i = v6 | (v3 << 6); ; i = v10 + (v3 << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * i);
    v12 = *v11;
    v13 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * i);
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v34 = *v11;
      v35 = v4;
      v36 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v15 = v36;
      v16 = *(_QWORD *)(OUTLINED_FUNCTION_78() - 8);
      v17 = v13 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      v18 = *(_QWORD *)(v16 + 72);
      do
      {
        v19 = URL.path.getter();
        v21 = v20;
        v22 = *(_QWORD *)(v36 + 16);
        if (v22 >= *(_QWORD *)(v36 + 24) >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        *(_QWORD *)(v36 + 16) = v22 + 1;
        v23 = v36 + 16 * v22;
        *(_QWORD *)(v23 + 32) = v19;
        *(_QWORD *)(v23 + 40) = v21;
        v17 += v18;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      v2 = v30;
      v4 = v35;
      v12 = v34;
    }
    else
    {
      swift_bridgeObjectRetain();
      v15 = MEMORY[0x24BEE4AF8];
    }
    OUTLINED_FUNCTION_56_21((i >> 3) & 0x1FFFFFFFFFFFFFF8);
    v25 = (_QWORD *)(v24 + 16 * i);
    *v25 = v12;
    v25[1] = v26;
    *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * i) = v15;
    v27 = *(_QWORD *)(v2 + 16);
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    *(_QWORD *)(v2 + 16) = v29;
    if (v4)
      goto LABEL_2;
LABEL_3:
    v8 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_29;
    if (v8 >= v32)
      return;
    ++v3;
    if (!*(_QWORD *)(v31 + 8 * v8))
    {
      v3 = v8 + 1;
      if (v8 + 1 >= v32)
        return;
      if (!*(_QWORD *)(v31 + 8 * v3))
      {
        v3 = v8 + 2;
        if (v8 + 2 >= v32)
          return;
        if (!*(_QWORD *)(v31 + 8 * v3))
          break;
      }
    }
LABEL_16:
    OUTLINED_FUNCTION_49_23();
  }
  v9 = v8 + 3;
  if (v9 >= v32)
    return;
  if (*(_QWORD *)(v31 + 8 * v9))
  {
    v3 = v9;
    goto LABEL_16;
  }
  while (1)
  {
    v3 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v3 >= v32)
      return;
    ++v9;
    if (*(_QWORD *)(v31 + 8 * v3))
      goto LABEL_16;
  }
LABEL_30:
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_1_57()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_8_58@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a1 = 0xD000000000000037;
  *(_QWORD *)(a1 + 8) = (a2 - 32) | 0x8000000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  return swift_willThrow(0.0);
}

uint64_t OUTLINED_FUNCTION_9_54()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_16_45()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 136), v1);
}

uint64_t OUTLINED_FUNCTION_17_32()
{
  return type metadata accessor for MLImageClassifier.DataSource();
}

uint64_t OUTLINED_FUNCTION_19_40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * a1, v2 - 112);
}

uint64_t OUTLINED_FUNCTION_23_41()
{
  uint64_t v0;

  return outlined consume of Data._Representation(*(_QWORD *)(v0 - 256), *(_QWORD *)(v0 - 248));
}

void OUTLINED_FUNCTION_25_37(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(v2 - 112, a2);
}

void OUTLINED_FUNCTION_29_32(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000, v2, (_OWORD *)(v3 - 160));
}

void OUTLINED_FUNCTION_33_35(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of MLHandPoseClassifier.ModelParameters(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_44_27()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t OUTLINED_FUNCTION_46_24()
{
  return type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
}

uint64_t OUTLINED_FUNCTION_50_24()
{
  return 0x73656C6966;
}

void OUTLINED_FUNCTION_56_21(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + a1) |= v1;
}

uint64_t OUTLINED_FUNCTION_59_25()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySSG_Sis5NeverOTg5047_s8CreateML6LabelsO17encodeAnnotationsySaySiG11d8Data9AnyF13VFSiSSSgXEfU_SDySSSiGTf1cn_n(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_BYTE *, _QWORD);
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  _BYTE v19[32];
  uint64_t v20;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, MEMORY[0x24BDF5FA0]);
  v2 = dispatch thunk of Collection.count.getter();
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v4 = v2;
  v20 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  v3 = v20;
  dispatch thunk of Collection.startIndex.getter();
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    while (1)
    {
      v5 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      v7 = *v6;
      v8 = v6[1];
      swift_bridgeObjectRetain();
      v5(v19, 0);
      v9 = v8 ? v8 : 0xE000000000000000;
      v10 = *a2;
      if (!*(_QWORD *)(*a2 + 16))
        break;
      if (v8)
        v11 = v7;
      else
        v11 = 0;
      swift_bridgeObjectRetain();
      v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v9);
      if ((v13 & 1) == 0)
        goto LABEL_17;
      v14 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = v3;
      v16 = *(_QWORD *)(v3 + 16);
      v15 = *(_QWORD *)(v3 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v3 = v20;
      }
      *(_QWORD *)(v3 + 16) = v16 + 1;
      *(_QWORD *)(v3 + 8 * v16 + 32) = v14;
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v4)
        return v3;
    }
  }
  swift_bridgeObjectRetain();
LABEL_17:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySiG_Sis5NeverOTg5047_s8CreateML6LabelsO17encodeAnnotationsySaySiG11d8Data9AnyF13VFS2iSgXEfU0_SDyS2iGTf1cn_n(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(_BYTE *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE v17[32];
  uint64_t v18;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, MEMORY[0x24BDF5FA0]);
  v2 = dispatch thunk of Collection.count.getter();
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v4 = v2;
  v18 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  v3 = v18;
  result = dispatch thunk of Collection.startIndex.getter();
  if ((v4 & 0x8000000000000000) == 0)
  {
    while (1)
    {
      v6 = (uint64_t (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      v8 = *(_QWORD *)v7;
      v9 = *(unsigned __int8 *)(v7 + 8);
      result = v6(v17, 0);
      v10 = *a2;
      if (!*(_QWORD *)(*a2 + 16))
        break;
      if (v9)
        v11 = 0;
      else
        v11 = v8;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v12 & 1) == 0)
        goto LABEL_13;
      v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * result);
      v18 = v3;
      v15 = *(_QWORD *)(v3 + 16);
      v14 = *(_QWORD *)(v3 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v3 = v18;
      }
      *(_QWORD *)(v3 + 16) = v15 + 1;
      *(_QWORD *)(v3 + 8 * v15 + 32) = v13;
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v4)
        return v3;
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static Labels.collected(from:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;

  v58 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v51 = *(_QWORD *)(v2 - 8);
  v52 = v2;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v50 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v49 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v46 - v10;
  v12 = type metadata accessor for AnyColumn();
  v53 = *(_QWORD *)(v12 - 8);
  OUTLINED_FUNCTION_3();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v47 = (char *)&v46 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_49();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_49();
  AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    v56 = 0;
    v57 = 0xE000000000000000;
    v20 = lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, MEMORY[0x24BDF5F90]);
    OptionalColumnProtocol.filled(with:)();
    OUTLINED_FUNCTION_68_18();
    specialized Set.init<A>(_:)();
    v22 = v21;
    outlined init with copy of AnyColumn?(v58, (uint64_t)v11);
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
    {
      outlined destroy of AnyColumn?((uint64_t)v11);
    }
    else
    {
      v31 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
      v58 = v20;
      v32 = v47;
      v31(v47, v11, v12);
      AnyColumn.assumingType<A>(_:)();
      v56 = 0;
      v57 = 0xE000000000000000;
      OptionalColumnProtocol.filled(with:)();
      OUTLINED_FUNCTION_68_18();
      specialized Set.init<A>(_:)();
      specialized Set.union<A>(_:)(v33, v22);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v32, v12);
    }
    swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    v35 = v34;
    swift_bridgeObjectRelease();
    v56 = v35;
    v36 = v55;
    specialized MutableCollection<>.sort(by:)(&v56);
    if (!v36)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      return v56;
    }
  }
  else
  {
    v23 = (uint64_t)v48;
    v47 = v16;
    v24 = v58;
    if (!swift_dynamicCastMetatype())
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v37 = 0xD000000000000025;
      *(_QWORD *)(v37 + 8) = 0x800000021AFF5180;
      *(_OWORD *)(v37 + 16) = 0u;
      *(_OWORD *)(v37 + 32) = 0u;
      *(_BYTE *)(v37 + 48) = 1;
      return swift_willThrow(0.0);
    }
    AnyColumn.assumingType<A>(_:)();
    v56 = 0;
    v46 = lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, MEMORY[0x24BDF5F90]);
    OptionalColumnProtocol.filled(with:)();
    OUTLINED_FUNCTION_5_51();
    specialized Set.init<A>(_:)();
    v26 = v25;
    v27 = v24;
    v28 = v23;
    outlined init with copy of AnyColumn?(v27, v23);
    v29 = v23;
    v30 = v12;
    if (__swift_getEnumTagSinglePayload(v29, 1, v12) == 1)
    {
      outlined destroy of AnyColumn?(v28);
    }
    else
    {
      v39 = v28;
      v40 = v53;
      v41 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v47, v39, v30);
      AnyColumn.assumingType<A>(_:)();
      v56 = 0;
      OptionalColumnProtocol.filled(with:)();
      OUTLINED_FUNCTION_5_51();
      specialized Set.init<A>(_:)();
      specialized Set.union<A>(_:)(v42, v26);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v30);
    }
    swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    v44 = v43;
    swift_bridgeObjectRelease();
    v56 = v44;
    v45 = v55;
    specialized MutableCollection<>.sort(by:)(&v56);
    if (!v45)
      goto LABEL_13;
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of AnyColumn?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Labels.encodeAnnotations(_:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _BOOL8 v23;
  Swift::Int v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;
  Swift::Int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v9 = v8 - v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v14 = v13 - v12;
  v61 = a2;
  if ((a3 & 1) != 0)
  {
    v62 = MEMORY[0x24BEE4B00];
    v34 = *(_QWORD *)(a2 + 16);
    if (v34)
    {
      v56 = v13 - v12;
      v58 = v11;
      v60 = v10;
      swift_bridgeObjectRetain();
      v35 = 0;
      v36 = (uint64_t *)(a2 + 40);
      v37 = MEMORY[0x24BEE4B00];
      while (1)
      {
        v39 = *(v36 - 1);
        v38 = *v36;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v41 = OUTLINED_FUNCTION_6_61();
        v43 = *(_QWORD *)(v37 + 16);
        v44 = (v42 & 1) == 0;
        v45 = v43 + v44;
        if (__OFADD__(v43, v44))
          goto LABEL_30;
        v46 = v41;
        v47 = v42;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v45))
        {
          v48 = OUTLINED_FUNCTION_6_61();
          if ((v47 & 1) != (v49 & 1))
            goto LABEL_33;
          v46 = v48;
        }
        if ((v47 & 1) != 0)
        {
          *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v46) = v35;
        }
        else
        {
          OUTLINED_FUNCTION_7_57(v37 + 8 * (v46 >> 6));
          v51 = (_QWORD *)(v50 + 16 * v46);
          *v51 = v39;
          v51[1] = v38;
          *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v46) = v35;
          v52 = *(_QWORD *)(v37 + 16);
          v31 = __OFADD__(v52, 1);
          v53 = v52 + 1;
          if (v31)
            goto LABEL_32;
          *(_QWORD *)(v37 + 16) = v53;
          swift_bridgeObjectRetain();
        }
        ++v35;
        v36 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v34 == v35)
        {
          v62 = v37;
          swift_bridgeObjectRelease();
          v10 = v60;
          v14 = v56;
          v11 = v58;
          break;
        }
      }
    }
    AnyColumn.convertedToStrings()(v14);
    v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySSG_Sis5NeverOTg5047_s8CreateML6LabelsO17encodeAnnotationsySaySiG11d8Data9AnyF13VFSiSSSgXEfU_SDySSSiGTf1cn_n(v14, &v62);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
LABEL_28:
    swift_bridgeObjectRelease();
    return v33;
  }
  v59 = v9;
  v62 = MEMORY[0x24BEE4B00];
  v15 = *(_QWORD *)(a2 + 16);
  if (!v15)
  {
LABEL_14:
    AnyColumn.assumingType<A>(_:)();
    v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData6ColumnVySiG_Sis5NeverOTg5047_s8CreateML6LabelsO17encodeAnnotationsySaySiG11d8Data9AnyF13VFS2iSgXEfU0_SDyS2iGTf1cn_n(v59, &v62);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v59, v5);
    goto LABEL_28;
  }
  v55 = v6;
  v57 = v5;
  swift_bridgeObjectRetain();
  v16 = 0;
  v17 = MEMORY[0x24BEE4B00];
  while (1)
  {
    v18 = *(_QWORD *)(a2 + 8 * v16 + 32);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
    v22 = *(_QWORD *)(v17 + 16);
    v23 = (v21 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      break;
    v25 = v20;
    v26 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, Int>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v19, v24))
    {
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_33;
      v25 = v27;
    }
    if ((v26 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v25) = v16;
    }
    else
    {
      OUTLINED_FUNCTION_7_57(v17 + 8 * (v25 >> 6));
      *(_QWORD *)(v29 + 8 * v25) = v18;
      *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v25) = v16;
      v30 = *(_QWORD *)(v17 + 16);
      v31 = __OFADD__(v30, 1);
      v32 = v30 + 1;
      if (v31)
        goto LABEL_31;
      *(_QWORD *)(v17 + 16) = v32;
    }
    ++v16;
    swift_bridgeObjectRelease();
    a2 = v61;
    if (v15 == v16)
    {
      v62 = v17;
      swift_bridgeObjectRelease();
      v6 = v55;
      v5 = v57;
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized Set.union<A>(_:)(uint64_t a1, Swift::Int a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  Swift::Int *v15;
  Swift::Int v16;
  Swift::Int v17;
  Swift::Int v18[3];

  v3 = 0;
  v18[2] = a2;
  v4 = a1 + 56;
  OUTLINED_FUNCTION_20_34();
  v7 = v6 & v5;
  v9 = (unint64_t)(v8 + 63) >> 6;
  if ((v6 & v5) == 0)
    goto LABEL_3;
LABEL_2:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v13)) + (v3 << 6))
  {
    v15 = (Swift::Int *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(v18, v16, v17);
    swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_2;
LABEL_3:
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v12 >= v9)
      goto LABEL_21;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v12 + 1;
      if (v12 + 1 >= v9)
        goto LABEL_21;
      v13 = *(_QWORD *)(v4 + 8 * v3);
      if (!v13)
      {
        v3 = v12 + 2;
        if (v12 + 2 >= v9)
          goto LABEL_21;
        v13 = *(_QWORD *)(v4 + 8 * v3);
        if (!v13)
        {
          v3 = v12 + 3;
          if (v12 + 3 >= v9)
            goto LABEL_21;
          v13 = *(_QWORD *)(v4 + 8 * v3);
          if (!v13)
            break;
        }
      }
    }
LABEL_18:
    v7 = (v13 - 1) & v13;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
  {
LABEL_21:
    swift_release();
    return;
  }
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
    v3 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v3 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v3 >= v9)
      goto LABEL_21;
    v13 = *(_QWORD *)(v4 + 8 * v3);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_23:
  __break(1u);
}

void specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15[2];

  v3 = 0;
  v15[1] = a2;
  v4 = a1 + 56;
  OUTLINED_FUNCTION_20_34();
  v7 = v6 & v5;
  v9 = (unint64_t)(v8 + 63) >> 6;
  if ((v6 & v5) == 0)
    goto LABEL_3;
LABEL_2:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v13)) + (v3 << 6))
  {
    specialized Set._Variant.insert(_:)(v15, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i));
    if (v7)
      goto LABEL_2;
LABEL_3:
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v12 >= v9)
      goto LABEL_21;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v12 + 1;
      if (v12 + 1 >= v9)
        goto LABEL_21;
      v13 = *(_QWORD *)(v4 + 8 * v3);
      if (!v13)
      {
        v3 = v12 + 2;
        if (v12 + 2 >= v9)
          goto LABEL_21;
        v13 = *(_QWORD *)(v4 + 8 * v3);
        if (!v13)
        {
          v3 = v12 + 3;
          if (v12 + 3 >= v9)
            goto LABEL_21;
          v13 = *(_QWORD *)(v4 + 8 * v3);
          if (!v13)
            break;
        }
      }
    }
LABEL_18:
    v7 = (v13 - 1) & v13;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
  {
LABEL_21:
    swift_release();
    return;
  }
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
    v3 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v3 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v3 >= v9)
      goto LABEL_21;
    v13 = *(_QWORD *)(v4 + 8 * v3);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_23:
  __break(1u);
}

void static Labels.== infix(_:_:)(_QWORD *a1, char a2, _QWORD *a3, char a4)
{
  if ((a2 & 1) != 0)
  {
    if ((a4 & 1) != 0)
      specialized static Array<A>.== infix(_:_:)(a1, a3);
  }
  else if ((a4 & 1) == 0)
  {
    specialized static Array<A>.== infix(_:_:)(a1, a3);
  }
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Labels(uint64_t a1, uint64_t a2)
{
  static Labels.== infix(_:_:)(*(_QWORD **)a1, *(_BYTE *)(a1 + 8), *(_QWORD **)a2, *(_BYTE *)(a2 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for Labels(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Labels()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for Labels(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Labels(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Labels()
{
  return &type metadata for Labels;
}

uint64_t OUTLINED_FUNCTION_5_51()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

unint64_t OUTLINED_FUNCTION_6_61()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

void OUTLINED_FUNCTION_7_57(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

void NeuralNetwork.Layer.ConvolutionParameters.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_22_23(v5, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Extent<Int>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  v8 = OUTLINED_FUNCTION_3_53(v7, v18);
  v9 = OUTLINED_FUNCTION_24_43(v8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_161();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_15_44(v11, v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_3_31();
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_28_36();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_5_52();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_46_2();
  type metadata accessor for Conv1D();
  OUTLINED_FUNCTION_22_37();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_4_58();
  v16 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, a1 + *(int *)(v16 + 20), v1);
  OUTLINED_FUNCTION_13_53();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_22_23(v8, v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Extent<Int>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  v11 = OUTLINED_FUNCTION_3_53(v10, v22);
  v12 = OUTLINED_FUNCTION_24_43(v11);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_161();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_15_44(v14, v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_46_2();
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_28_36();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_5_52();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_3_31();
  type metadata accessor for Conv2D();
  OUTLINED_FUNCTION_22_37();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_4_58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, a1, v1);
  OUTLINED_FUNCTION_14_51();
  OUTLINED_FUNCTION_27_43();
  v19 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  OUTLINED_FUNCTION_2_61();
  OUTLINED_FUNCTION_7_58();
  NeuralNetwork.Layer.ConvolutionParameters.weights.setter();
  Conv2D.bias.getter();
  if (__swift_getEnumTagSinglePayload(v2, 1, v6) == 1)
  {
    outlined destroy of Tensor?(v2);
  }
  else
  {
    Tensor.scalars<A>(as:)();
    v19(v2, v6);
    OUTLINED_FUNCTION_7_58();
    OUTLINED_FUNCTION_10_49();
  }
  OUTLINED_FUNCTION_14_51();
  OUTLINED_FUNCTION_9_55();
  OUTLINED_FUNCTION_2_61();
  OUTLINED_FUNCTION_20_42();
  OUTLINED_FUNCTION_8_59();
  OUTLINED_FUNCTION_23_42();
  OUTLINED_FUNCTION_14_51();
  OUTLINED_FUNCTION_9_55();
  OUTLINED_FUNCTION_2_61();
  OUTLINED_FUNCTION_20_42();
  OUTLINED_FUNCTION_8_59();
  OUTLINED_FUNCTION_26_38();
  Conv2D.groupCount.getter();
  NeuralNetwork.Layer.ConvolutionParameters.groupCount.setter();
  Conv2D.kernelSize.getter();
  Conv2D.kernelSize.getter();
  OUTLINED_FUNCTION_1_58();
  OUTLINED_FUNCTION_29_33();
  Conv2D.stride.getter();
  Conv2D.stride.getter();
  OUTLINED_FUNCTION_1_58();
  OUTLINED_FUNCTION_31_33();
  Conv2D.dilation.getter();
  Conv2D.dilation.getter();
  OUTLINED_FUNCTION_1_58();
  OUTLINED_FUNCTION_30_35();
  OUTLINED_FUNCTION_25_38();
  v20 = type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind();
  OUTLINED_FUNCTION_6_62(v20);
  OUTLINED_FUNCTION_11_54();
  outlined destroy of MLImageClassifier.CustomFeatureExtractor(a1, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D);
  OUTLINED_FUNCTION_21_40();
  OUTLINED_FUNCTION_9_5();
}

void sub_21AF8B300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_27_43();
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
  OUTLINED_FUNCTION_2_61();
  OUTLINED_FUNCTION_7_58();
  v4 = NeuralNetwork.Layer.ConvolutionParameters.weights.setter();
  MEMORY[0x220758F20](v4);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    outlined destroy of Tensor?(v1);
  }
  else
  {
    Tensor.scalars<A>(as:)();
    v3(v1, v2);
    OUTLINED_FUNCTION_7_58();
    OUTLINED_FUNCTION_10_49();
  }
  OUTLINED_FUNCTION_13_53();
}

void sub_21AF8B3A4()
{
  OUTLINED_FUNCTION_9_55();
  OUTLINED_FUNCTION_2_61();
  OUTLINED_FUNCTION_20_42();
  OUTLINED_FUNCTION_8_59();
  OUTLINED_FUNCTION_23_42();
  OUTLINED_FUNCTION_13_53();
}

void sub_21AF8B3CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_9_55();
  OUTLINED_FUNCTION_2_61();
  OUTLINED_FUNCTION_20_42();
  OUTLINED_FUNCTION_8_59();
  v1 = OUTLINED_FUNCTION_26_38();
  MEMORY[0x220758EFC](v1);
  v2 = NeuralNetwork.Layer.ConvolutionParameters.groupCount.setter();
  *(_QWORD *)(v0 - 88) = 1;
  *(_QWORD *)(v0 - 96) = MEMORY[0x220758F08](v2);
  OUTLINED_FUNCTION_1_58();
  v3 = OUTLINED_FUNCTION_29_33();
  *(_QWORD *)(v0 - 88) = 1;
  *(_QWORD *)(v0 - 96) = MEMORY[0x220758F2C](v3);
  OUTLINED_FUNCTION_1_58();
  v4 = OUTLINED_FUNCTION_31_33();
  *(_QWORD *)(v0 - 88) = 1;
  *(_QWORD *)(v0 - 96) = MEMORY[0x220758F50](v4);
  OUTLINED_FUNCTION_1_58();
  OUTLINED_FUNCTION_30_35();
  OUTLINED_FUNCTION_25_38();
  v5 = type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind();
  OUTLINED_FUNCTION_6_62(v5);
  OUTLINED_FUNCTION_11_54();
  outlined destroy of MLImageClassifier.CustomFeatureExtractor(*(_QWORD *)(v0 - 104), type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
  OUTLINED_FUNCTION_21_40();
  OUTLINED_FUNCTION_9_5();
}

uint64_t OUTLINED_FUNCTION_1_58()
{
  return NeuralNetwork.Extent.init(height:width:)();
}

uint64_t OUTLINED_FUNCTION_2_61()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_3_53@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for TensorShape();
}

uint64_t OUTLINED_FUNCTION_4_58()
{
  return NeuralNetwork.Layer.ConvolutionParameters.init()();
}

uint64_t OUTLINED_FUNCTION_5_52()
{
  return type metadata accessor for NeuralNetwork.WeightParameters();
}

uint64_t OUTLINED_FUNCTION_6_62(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 104))(v2, v1, a1);
}

uint64_t OUTLINED_FUNCTION_7_58()
{
  return NeuralNetwork.WeightParameters.init(_:updatable:)();
}

uint64_t OUTLINED_FUNCTION_8_59()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_9_55()
{
  return Tensor.shape.getter();
}

uint64_t OUTLINED_FUNCTION_10_49()
{
  uint64_t v0;
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v0, 0, 1, *(_QWORD *)(v1 - 168));
  return NeuralNetwork.Layer.ConvolutionParameters.bias.setter();
}

uint64_t OUTLINED_FUNCTION_11_54()
{
  uint64_t v0;
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
  return NeuralNetwork.Layer.ConvolutionParameters.padding.setter();
}

void OUTLINED_FUNCTION_13_53()
{
  JUMPOUT(0x220758F44);
}

uint64_t OUTLINED_FUNCTION_14_51()
{
  return Conv2D.weight.getter();
}

void OUTLINED_FUNCTION_15_44(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_20_42()
{
  return TensorShape.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_21_40()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 128) + 8))(v0, *(_QWORD *)(v1 - 120));
}

uint64_t OUTLINED_FUNCTION_23_42()
{
  return NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.setter();
}

uint64_t OUTLINED_FUNCTION_24_43(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = *(_QWORD *)(result - 8);
  *(_QWORD *)(v1 - 144) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_25_38()
{
  return NeuralNetwork.ValidPaddingParameters.init()();
}

uint64_t OUTLINED_FUNCTION_26_38()
{
  return NeuralNetwork.Layer.ConvolutionParameters.kernelChannelCount.setter();
}

uint64_t OUTLINED_FUNCTION_27_43()
{
  return Tensor.scalars<A>(as:)();
}

uint64_t OUTLINED_FUNCTION_29_33()
{
  return NeuralNetwork.Layer.ConvolutionParameters.kernelSize.setter();
}

uint64_t OUTLINED_FUNCTION_30_35()
{
  return NeuralNetwork.Layer.ConvolutionParameters.dilationFactor.setter();
}

uint64_t OUTLINED_FUNCTION_31_33()
{
  return NeuralNetwork.Layer.ConvolutionParameters.strides.setter();
}

uint64_t MLImageClassifier.DataSource.labeledImages()()
{
  uint64_t v0;

  return static _ImageUtilities.getImageURLsAndLabels(from:)(v0);
}

#error "21AF8BA08: call analysis failed (funcsize=64)"

uint64_t MLImageClassifier.DataSource.stratifiedSplit<A>(proportions:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;

  v10 = static _ImageUtilities.getImageURLsAndLabels(from:)(v4);
  if (!v5)
  {
    a4 = stratifiedSplitGenerator<A>(proportions:generator:fileURLAndLabel:)(a1, a2, v10, a3, a4);
    swift_bridgeObjectRelease();
  }
  return a4;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.DataSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MLImageClassifier.DataSource(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if (result <= 1)
  {
    v3 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for MLImageClassifier.DataSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for MLImageClassifier.DataSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.DataSource((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      v4 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for MLImageClassifier.DataSource()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLImageClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLImageClassifier.DataSource)
    return swift_getSingletonMetadata();
  return result;
}

void *initializeWithTake for MLImageClassifier.DataSource(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for MLImageClassifier.DataSource(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.DataSource((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLImageClassifier.DataSource()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MLHandPoseClassifier.DataSource.keypointsWithAnnotations()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  int *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;

  OUTLINED_FUNCTION_8_1();
  v77 = v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v75 = *(_QWORD *)(v5 - 8);
  v76 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v73 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v74 = v9;
  v10 = OUTLINED_FUNCTION_56_6();
  v11 = *(_QWORD *)(v10 - 8);
  v78 = v10;
  v79 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_50();
  v15 = v13 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v63 - v17;
  v19 = OUTLINED_FUNCTION_93();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_151_1();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v63 - v22;
  OUTLINED_FUNCTION_36_30();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_4_59(v25, (uint64_t)v63);
  v26 = OUTLINED_FUNCTION_71_12();
  if (v26 == 5)
  {
    v64 = v15;
    v68 = v2;
    v34 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
    v35 = (uint64_t *)(v3 + v34[12]);
    v37 = *v35;
    v36 = v35[1];
    v38 = (uint64_t *)(v3 + v34[16]);
    v40 = *v38;
    v39 = v38[1];
    v65 = v40;
    v69 = v36;
    v70 = v39;
    v41 = (uint64_t *)(v3 + v34[20]);
    v43 = *v41;
    v42 = (void *)v41[1];
    v71 = v20;
    v72 = v19;
    v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
    v45 = v42;
    OUTLINED_FUNCTION_9_37((uint64_t)v23, v3, v44);
    MEMORY[0x220758A1C](v43, v45);
    v46 = AnyColumn.wrappedElementType.getter();
    v47 = v78;
    OUTLINED_FUNCTION_68_18();
    v66 = v37;
    v67 = v43;
    if (v46 != MEMORY[0x24BEE0D00])
    {
      v48 = v1;
LABEL_8:
      v49 = v71;
      v51 = v69;
      v50 = v70;
      v52 = v68;
LABEL_16:
      OUTLINED_FUNCTION_216(v52, (uint64_t)v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16));
      MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v80);
      if (!v48)
      {
        v57 = OUTLINED_FUNCTION_51_28(v80);
        v58 = v67;
        static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(v57, v67, v45);
        static _ImageUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)&v82, v66, v51, v58, (uint64_t)v45, v65, v50);
        OUTLINED_FUNCTION_47_2((uint64_t)v23, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
        OUTLINED_FUNCTION_80();
        OUTLINED_FUNCTION_10_3();
        OUTLINED_FUNCTION_60_0();
        goto LABEL_20;
      }
      OUTLINED_FUNCTION_47_2((uint64_t)v23, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
      OUTLINED_FUNCTION_60_0();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_80();
      goto LABEL_21;
    }
    v63 = v18;
    DataFrame.subscript.getter();
    v53 = v74;
    Column<A>.parseAsJSONArrays()(v74);
    v48 = v1;
    if (v1)
    {

      OUTLINED_FUNCTION_54_22();
      OUTLINED_FUNCTION_69_12(v53, 1, 1);
      v48 = 0;
    }
    else
    {
      OUTLINED_FUNCTION_54_22();
      OUTLINED_FUNCTION_173_0();
      OUTLINED_FUNCTION_69_12(v54, v55, v56);
      if (__swift_getEnumTagSinglePayload(v53, 1, v47) != 1)
      {
        v59 = v79;
        v60 = v64;
        OUTLINED_FUNCTION_9_37(v64, v53, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 32));
        v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
        v62 = (uint64_t)v63;
        OUTLINED_FUNCTION_9_37((uint64_t)v63, v60, v61);
        swift_bridgeObjectRetain();
        MEMORY[0x220758A28](v62, v67, v45);
        OUTLINED_FUNCTION_68_18();
        goto LABEL_8;
      }
    }
    v49 = v71;
    v51 = v69;
    v50 = v70;
    v52 = v68;
    outlined destroy of AnyColumn?(v53);
    goto LABEL_16;
  }
  if (v26 == 3)
  {
    v27 = *(void **)v3;
    v28 = *(_BYTE *)(v3 + 8);
    v30 = *(_QWORD *)(v3 + 16);
    v29 = *(_QWORD *)(v3 + 24);
    v31 = *(_QWORD *)(v3 + 40);
    v79 = *(_QWORD *)(v3 + 32);
    v33 = *(_QWORD *)(v3 + 48);
    v32 = *(void **)(v3 + 56);
    v82 = (uint64_t)v27;
    v83 = v28;
    outlined copy of Result<_DataTable, Error>(v27, v28);
    static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)((uint64_t)&v82, v33, v32);
    if (!v1)
    {
      static _ImageUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)&v82, v30, v29, v33, (uint64_t)v32, v79, v31);
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_12_0();
      outlined consume of Result<_DataTable, Error>(v27, v28);
LABEL_20:
      OUTLINED_FUNCTION_64_14();
      goto LABEL_21;
    }
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_12_0();
    outlined consume of Result<_DataTable, Error>(v27, v28);
  }
  else
  {
    type metadata accessor for MLHandPoseClassifier.FeatureExtractor();
    OUTLINED_FUNCTION_57_22(v0, &v80);
    if (!v1)
    {
      v82 = v80;
      v83 = v81;
      OUTLINED_FUNCTION_76_12();
      goto LABEL_20;
    }
    OUTLINED_FUNCTION_76_12();
  }
LABEL_21:
  OUTLINED_FUNCTION_7();
}

uint64_t type metadata accessor for MLHandPoseClassifier.DataSource()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLHandPoseClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLHandPoseClassifier.DataSource)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of MLHandPoseClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLHandPoseClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLHandPoseClassifier.DataSource.labeledMedia()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(v0);
  v3 = v2;
  if (!v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_101();
  }
  return v3;
}

void MLHandPoseClassifier.DataSource.imagesWithAnnotations()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44[5];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  OUTLINED_FUNCTION_8_1();
  a19 = v20;
  a20 = v21;
  v47 = v22;
  v23 = OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_4_26(v23, (uint64_t)&a10);
  v46 = v24;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_151_1();
  MEMORY[0x24BDAC7A8](v26);
  v45 = OUTLINED_FUNCTION_39_26((uint64_t)v44 - v27);
  v44[4] = *(_QWORD *)(v45 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v29);
  v30 = OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_4_26(v30, (uint64_t)&a13);
  v48 = v31;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_208();
  v44[0] = v33;
  OUTLINED_FUNCTION_29_3();
  v35 = MEMORY[0x24BDAC7A8](v34);
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_65_5();
  v44[3] = v36;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_65_5();
  v44[2] = v38;
  OUTLINED_FUNCTION_29_3();
  v40 = MEMORY[0x24BDAC7A8](v39);
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_36_30();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_4_59(v42, v44[0]);
  v43 = (char *)&loc_21AF8C760 + *((int *)qword_21AF8D0E0 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

void sub_21AF8C770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v47;
  char v48;
  void *v49;
  void *v50;

  v3 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
  v4 = v1 + v3[12];
  v5 = (uint64_t *)(v1 + v3[16]);
  v7 = *v5;
  v6 = v5[1];
  *(_QWORD *)(v2 - 336) = v7;
  *(_QWORD *)(v2 - 328) = v6;
  v8 = (_QWORD *)(v1 + v3[20]);
  v9 = v8[1];
  *(_QWORD *)(v2 - 344) = *v8;
  v10 = *(_QWORD *)(v2 - 312);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v12 = *(_QWORD *)(v2 - 368);
  v13 = *(_QWORD *)(v2 - 304);
  v11(v12, v1, v13);
  v14 = *(_QWORD *)(v2 - 360);
  v11(v14, v4, v13);
  OUTLINED_FUNCTION_133_0(v0, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  *(_BYTE *)(v2 - 128) = 1;
  *(_BYTE *)(v2 - 288) = 1;
  *(_DWORD *)(v2 - 287) = *(_DWORD *)(v2 - 111);
  *(_DWORD *)(v2 - 284) = *(_DWORD *)(v2 - 108);
  *(_QWORD *)(v2 - 280) = 44;
  *(_QWORD *)(v2 - 272) = 0xE100000000000000;
  *(_QWORD *)(v2 - 264) = 0;
  *(_QWORD *)(v2 - 256) = 0xE000000000000000;
  *(_QWORD *)(v2 - 248) = 92;
  *(_QWORD *)(v2 - 240) = 0xE100000000000000;
  *(_BYTE *)(v2 - 232) = 1;
  *(_DWORD *)(v2 - 231) = *(_DWORD *)(v2 - 118);
  *(_DWORD *)(v2 - 228) = *(_DWORD *)(v2 - 115);
  *(_QWORD *)(v2 - 224) = 34;
  *(_QWORD *)(v2 - 216) = 0xE100000000000000;
  *(_BYTE *)(v2 - 208) = 1;
  *(_DWORD *)(v2 - 207) = *(_DWORD *)(v2 - 125);
  *(_DWORD *)(v2 - 204) = *(_DWORD *)(v2 - 122);
  *(_QWORD *)(v2 - 200) = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  *(_QWORD *)(v2 - 192) = 10;
  *(_QWORD *)(v2 - 184) = 0xE100000000000000;
  *(_QWORD *)(v2 - 176) = 0;
  *(_QWORD *)(v2 - 168) = 0;
  *(_BYTE *)(v2 - 160) = *(_BYTE *)(v2 - 128);
  *(_DWORD *)(v2 - 159) = *(_DWORD *)(v2 - 135);
  *(_DWORD *)(v2 - 156) = *(_DWORD *)(v2 - 132);
  *(_QWORD *)(v2 - 152) = 0;
  v15 = *(_QWORD *)(v2 - 72);
  MLDataTable.init(contentsOf:options:)(v0, (const void *)(v2 - 288), v2 - 144);
  if (v15)
  {
    OUTLINED_FUNCTION_88_5(v14);
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_88_5(v12);
  }
  else
  {
    v16 = v9;
    v17 = *(_QWORD *)(v2 - 144);
    v18 = *(_BYTE *)(v2 - 136);
    *(_QWORD *)(v2 - 104) = v17;
    *(_BYTE *)(v2 - 96) = v18;
    *(_QWORD *)(v2 - 144) = v17;
    *(_BYTE *)(v2 - 136) = v18;
    v19 = *(_QWORD *)(v2 - 336);
    v20 = *(void **)(v2 - 328);
    MLDataTable.subscript.getter(v19, v20, v2 - 288);
    v21 = *(void **)(v2 - 288);
    if ((*(_BYTE *)(v2 - 280) & 1) != 0
      || (OUTLINED_FUNCTION_68_10(),
          _UntypedColumn.type.getter((_BYTE *)(v2 - 144)),
          OUTLINED_FUNCTION_80_11(),
          *(_BYTE *)(v2 - 144) != 2))
    {
      OUTLINED_FUNCTION_109_5(v21);
      OUTLINED_FUNCTION_10_3();
      *(_QWORD *)(v2 - 288) = 0;
      *(_QWORD *)(v2 - 280) = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      OUTLINED_FUNCTION_50_9();
      *(_QWORD *)(v2 - 288) = 0x206E6D756C6F43;
      *(_QWORD *)(v2 - 280) = 0xE700000000000000;
      v33._countAndFlagsBits = v19;
      v33._object = v20;
      String.append(_:)(v33);
      OUTLINED_FUNCTION_80();
      v34._object = (void *)0x800000021AFF50A0;
      v34._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v34);
      v35 = *(_QWORD *)(v2 - 288);
      v36 = *(_QWORD *)(v2 - 280);
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v37 = v35;
      *(_QWORD *)(v37 + 8) = v36;
      *(_OWORD *)(v37 + 16) = 0u;
      *(_OWORD *)(v37 + 32) = 0u;
      *(_BYTE *)(v37 + 48) = 0;
      swift_willThrow(0.0);
      OUTLINED_FUNCTION_7_28(*(_QWORD *)(v2 - 360));
      OUTLINED_FUNCTION_7_28(*(_QWORD *)(v2 - 368));
      OUTLINED_FUNCTION_110_3();
    }
    else
    {
      OUTLINED_FUNCTION_68_10();
      _UntypedColumn.valueAtIndex(index:)(0, v2 - 288);
      v22 = *(_QWORD *)(v2 - 288);
      v23 = *(_QWORD *)(v2 - 280);
      v24 = *(unsigned __int8 *)(v2 - 272);
      v25 = (uint64_t)v20;
      if (v24 != 2)
      {
        outlined consume of MLDataValue(*(void **)(v2 - 288), *(id *)(v2 - 280), v24);
        v22 = 0;
        v23 = 0xE000000000000000;
      }
      v26 = *(_QWORD *)(v2 - 384);
      OUTLINED_FUNCTION_80_11();
      *(_QWORD *)(v2 - 288) = v22;
      *(_QWORD *)(v2 - 280) = v23;
      String.init<A>(_:)();
      URL.init(fileURLWithPath:)();
      OUTLINED_FUNCTION_30();
      v27 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v28 = URL.path.getter();
      v29 = (void *)MEMORY[0x22075A8AC](v28);
      OUTLINED_FUNCTION_30();
      v30 = objc_msgSend(v27, sel_fileExistsAtPath_, v29);

      if ((v30 & 1) != 0)
      {
        v31 = *(_QWORD *)(v2 - 368);
        v32 = *(_QWORD *)(v2 - 344);
      }
      else
      {
        OUTLINED_FUNCTION_68_10();
        v38 = specialized Array<A>.init(_:)(v21, 0);
        MEMORY[0x24BDAC7A8](v38);
        OUTLINED_FUNCTION_52_19();
        v39 = *(_QWORD *)(v2 - 368);
        *(_QWORD *)(v40 - 16) = v39;
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg5((uint64_t)partial apply for closure #1 in static _VideoUtilities.getVideoURLsAndAnnotations(from:), v41, v38);
        v43 = v42;
        v44 = OUTLINED_FUNCTION_30();
        *(_QWORD *)(v2 - 288) = v43;
        MEMORY[0x24BDAC7A8](v44);
        OUTLINED_FUNCTION_52_19();
        *(_QWORD *)(v45 - 16) = v2 - 288;
        ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
        v48 = v47 & 1;
        OUTLINED_FUNCTION_50_9();
        swift_bridgeObjectRetain();
        MLDataTable.willMutate()();
        *(_QWORD *)(v2 - 288) = ML14_UntypedColumnC_s5Error_pTgm5;
        *(_BYTE *)(v2 - 280) = v48;
        MLDataTable.setColumnImpl(newColumn:named:)(v2 - 288);
        OUTLINED_FUNCTION_123();
        v49 = (void *)ML14_UntypedColumnC_s5Error_pTgm5;
        v31 = v39;
        v26 = *(_QWORD *)(v2 - 384);
        outlined consume of Result<_DataTable, Error>(v49, v48);
        v32 = *(_QWORD *)(v2 - 344);
        if ((*(_BYTE *)(v2 - 96) & 1) == 0)
        {
          v50 = *(void **)(v2 - 104);
          outlined copy of Result<_DataTable, Error>(v50, 0);
          _DataTable.columnNamesDidChange()();
          outlined consume of Result<_DataTable, Error>(v50, 0);
        }
      }
      static _ImageUtilities.renameImageTableColumns(table:imageColumn:labelColumn:)(v2 - 104, v19, v25, v32, v16);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_10_3();
      outlined consume of Result<_DataTable, Error>(v21, 0);
      OUTLINED_FUNCTION_7_28(v26);
      OUTLINED_FUNCTION_7_28(*(_QWORD *)(v2 - 360));
      OUTLINED_FUNCTION_7_28(v31);
      OUTLINED_FUNCTION_64_14();
    }
  }
  OUTLINED_FUNCTION_7();
}

void MLHandPoseClassifier.DataSource.extractKeypoints()()
{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int EnumTagSinglePayload;
  char *v72;
  uint64_t v73;
  void (*v74)(uint64_t, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[3];

  OUTLINED_FUNCTION_8_1();
  v3 = v0;
  v102 = v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Data>);
  v94 = *(_QWORD *)(v5 - 8);
  v95 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v96 = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v98 = *(_QWORD *)(v8 - 8);
  v99 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v100 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_208();
  v97 = v12;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v13);
  v101 = (uint64_t)&v82 - v14;
  v15 = OUTLINED_FUNCTION_56_6();
  v103 = *(_QWORD *)(v15 - 8);
  v104 = v15;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_50();
  v19 = v17 - v18;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v82 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v82 - v24;
  v26 = OUTLINED_FUNCTION_93();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_64();
  v29 = v28;
  OUTLINED_FUNCTION_36_30();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_53_0();
  outlined init with copy of MLHandPoseClassifier.DataSource(v3, (uint64_t)v2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 5)
  {
    v84 = v23;
    v85 = v19;
    v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
    v40 = (uint64_t *)((char *)v2 + v39[12]);
    v42 = *v40;
    v41 = v40[1];
    v89 = v42;
    v90 = v41;
    v43 = (uint64_t *)((char *)v2 + v39[16]);
    v45 = *v43;
    v44 = (void *)v43[1];
    v88 = v45;
    v92 = v27;
    v93 = v44;
    v46 = (uint64_t *)((char *)v2 + v39[20]);
    v47 = v103;
    v48 = v25;
    v49 = *v46;
    v50 = (void *)v46[1];
    v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
    v52 = v29;
    v91 = v26;
    v86 = v51;
    v51(v29, (uint64_t)v2, v26);
    MEMORY[0x220758A1C](v49, v50);
    v53 = AnyColumn.wrappedElementType.getter();
    v54 = v47;
    v55 = *(void (**)(char *, uint64_t))(v47 + 8);
    v56 = v104;
    OUTLINED_FUNCTION_62_24();
    if (v53 == MEMORY[0x24BEE0D00])
    {
      v83 = v48;
      v61 = v56;
      v60 = v100;
      v87 = v49;
      v96 = v50;
      v97 = v52;
      OUTLINED_FUNCTION_45_25();
      v62 = v101;
      Column<A>.parseAsJSONArrays()(v101);
      if (v1)
      {

        OUTLINED_FUNCTION_43_22();
        OUTLINED_FUNCTION_73_17(v62, 1, 1);
      }
      else
      {
        OUTLINED_FUNCTION_43_22();
        OUTLINED_FUNCTION_173_0();
        OUTLINED_FUNCTION_73_17(v64, v65, v66);
        if (__swift_getEnumTagSinglePayload(v62, 1, v61) != 1)
        {
          v72 = v84;
          (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v84, v62, v61);
          v73 = OUTLINED_FUNCTION_60_23();
          v74(v73, v72, v61);
          v50 = v96;
          swift_bridgeObjectRetain();
          v75 = OUTLINED_FUNCTION_49_24();
          v52 = v97;
          MEMORY[0x220758A28](v75);
          v55(v72, v61);
          v58 = v91;
          v59 = v90;
          goto LABEL_23;
        }
      }
      v58 = v91;
      v50 = v96;
      v52 = v97;
      v59 = v90;
      v60 = v87;
      outlined destroy of AnyColumn?(v62);
    }
    else
    {
      MEMORY[0x220758A1C](v49, v50);
      v57 = AnyColumn.wrappedElementType.getter();
      OUTLINED_FUNCTION_62_24();
      if (v57 == MEMORY[0x24BDCDDE8])
      {
        v83 = v48;
        v87 = v49;
        OUTLINED_FUNCTION_45_25();
        v63 = v97;
        Column<A>.parseAsJSONArrays()(v97);
        if (v1)
        {

          OUTLINED_FUNCTION_41_25();
          OUTLINED_FUNCTION_53_25(v63);
          v59 = v90;
          v58 = v91;
        }
        else
        {
          OUTLINED_FUNCTION_41_25();
          OUTLINED_FUNCTION_173_0();
          v67 = v104;
          OUTLINED_FUNCTION_69_12(v68, v69, v70);
          v60 = v67;
          EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v63, 1, v67);
          v59 = v90;
          if (EnumTagSinglePayload != 1)
          {
            OUTLINED_FUNCTION_216(v85, v63, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 32));
            v76 = OUTLINED_FUNCTION_60_23();
            v77 = v85;
            OUTLINED_FUNCTION_216(v76, v85, v78);
            swift_bridgeObjectRetain();
            v79 = OUTLINED_FUNCTION_49_24();
            MEMORY[0x220758A28](v79);
            v55((char *)v77, v60);
            v58 = v91;
            goto LABEL_23;
          }
          v58 = v91;
        }
        outlined destroy of AnyColumn?(v63);
        v60 = v87;
      }
      else
      {
        v58 = v91;
        v59 = v90;
        v60 = v49;
      }
    }
LABEL_23:
    v80._countAndFlagsBits = v60;
    v80._object = v50;
    DataFrame.flattenNestedArrays(in:shape:)(v80, (Swift::OpaquePointer)&outlined read-only object #0 of MLHandPoseClassifier.DataSource.extractKeypoints());
    if (v81)
    {
      OUTLINED_FUNCTION_47_25();
    }
    else
    {
      static _ImageUtilities.renameFeatureColumns(dataFrame:sessionIdColumn:featureColumn:labelColumn:)(v52, v89, v59, v60, (uint64_t)v50, v88, v93);
      v86(v102, v52, v58);
    }
    OUTLINED_FUNCTION_10_3();
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (EnumCaseMultiPayload == 3)
  {
    v33 = v2[2];
    v32 = v2[3];
    v35 = v2[4];
    v34 = v2[5];
    v37 = v2[6];
    v36 = (void *)v2[7];
    v38 = OUTLINED_FUNCTION_51_28(*v2);
    static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(v38, v37, v36);
    if (!v1)
    {
      static _ImageUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)((uint64_t)v105, v33, v32, v37, (uint64_t)v36, v35, v34);
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_25_39();
      goto LABEL_28;
    }
    OUTLINED_FUNCTION_110_3();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_101();
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  type metadata accessor for MLHandPoseClassifier.FeatureExtractor();
  OUTLINED_FUNCTION_57_22(v3, v105);
  if (!v1)
    OUTLINED_FUNCTION_25_39();
  outlined destroy of MLHandPoseClassifier.DataSource((uint64_t)v2);
LABEL_28:
  OUTLINED_FUNCTION_7();
}

void MLHandPoseClassifier.DataSource.gatherAnnotatedFileNames()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD v61[4];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  OUTLINED_FUNCTION_8_1();
  a19 = v21;
  a20 = v22;
  v73 = v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_4_26(v24, (uint64_t)&a15);
  v64 = v25;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_64();
  v63 = v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_4_26(v28, (uint64_t)&a18);
  v65 = v29;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v31);
  v62 = type metadata accessor for CSVType();
  v61[2] = *(_QWORD *)(v62 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v33);
  type metadata accessor for CSVReadingOptions();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v35);
  type metadata accessor for JSONReadingOptions();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_64();
  v68 = v37;
  v77 = OUTLINED_FUNCTION_93();
  v74 = *(_QWORD *)(v77 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_208();
  v69 = v39;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v40);
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_65_5();
  v61[3] = v42;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_65_5();
  v67 = v44;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v45);
  v47 = OUTLINED_FUNCTION_39_26((uint64_t)v61 - v46);
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v48);
  v76 = OUTLINED_FUNCTION_78();
  v75 = *(_QWORD *)(v76 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v49);
  OUTLINED_FUNCTION_208();
  v66 = v50;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v51);
  OUTLINED_FUNCTION_65_5();
  v70 = v52;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v53);
  OUTLINED_FUNCTION_65_5();
  v71 = v54;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_65_5();
  v72 = v56;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v57);
  MEMORY[0x24BDAC7A8](v58);
  OUTLINED_FUNCTION_36_30();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v59);
  OUTLINED_FUNCTION_53_0();
  outlined init with copy of MLHandPoseClassifier.DataSource(v78, v20);
  v60 = (char *)sub_21AF8D9F8 + 4 * word_21AFEFDB8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21AF8D9F8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v2 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
  v3 = v0 + v2[12];
  v4 = (_QWORD *)(v0 + v2[16]);
  v5 = v4[1];
  *(_QWORD *)(v1 - 208) = *v4;
  v6 = (uint64_t *)(v0 + v2[20]);
  v8 = *v6;
  v7 = v6[1];
  v9 = *(_QWORD *)(v1 - 160);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v11 = v0;
  v12 = *(_QWORD *)(v1 - 136);
  v10(*(_QWORD *)(v1 - 184), v11, v12);
  v13 = *(_QWORD *)(v1 - 192);
  v10(v13, v3, v12);
  v15 = URL.pathExtension.getter() == 1852797802 && v14 == 0xE400000000000000;
  *(_QWORD *)(v1 - 360) = v7;
  *(_QWORD *)(v1 - 112) = v5;
  *(_QWORD *)(v1 - 368) = v8;
  if (v15)
  {
    v16 = v5;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v16 = v5;
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  OUTLINED_FUNCTION_123();
  if ((v17 & 1) != 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_133_0(*(_QWORD *)(v1 - 200), v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v33 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v1 - 256) = xmmword_21AFE7F70;
    *(_OWORD *)(v33 + 16) = xmmword_21AFE7F70;
    v34 = *(_QWORD *)(v1 - 208);
    *(_QWORD *)(v33 + 32) = v34;
    *(_QWORD *)(v33 + 40) = v16;
    *(_QWORD *)(v33 + 48) = v8;
    *(_QWORD *)(v33 + 56) = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, JSONType)>);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, JSONType));
    v36 = *(_QWORD *)(v35 - 8);
    v37 = *(_QWORD *)(v36 + 72);
    v38 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    v39 = OUTLINED_FUNCTION_72_16();
    *(_OWORD *)(v39 + 16) = *(_OWORD *)(v1 - 256);
    v40 = (_QWORD *)(v39 + v38);
    v41 = v39 + v38 + *(int *)(v35 + 48);
    v42 = *(_QWORD *)(v1 - 112);
    *v40 = v34;
    v40[1] = v42;
    v30 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for JSONType() - 8) + 104);
    OUTLINED_FUNCTION_79_11(v41);
    v43 = (_QWORD *)((char *)v40 + v37);
    v44 = *(_QWORD *)(v1 - 360);
    v45 = (uint64_t)v40 + v37 + *(int *)(v35 + 48);
    *v43 = *(_QWORD *)(v1 - 368);
    v43[1] = v44;
    OUTLINED_FUNCTION_79_11(v45);
    OUTLINED_FUNCTION_45_27();
    OUTLINED_FUNCTION_45_27();
    Dictionary.init(dictionaryLiteral:)();
    JSONReadingOptions.init()();
    v46 = *(_QWORD *)(v1 - 232);
    v47 = *(_QWORD *)(v1 - 120);
    DataFrame.init(contentsOfJSONFile:columns:types:options:)();
    if (v47)
    {
      OUTLINED_FUNCTION_7_28(*(_QWORD *)(v1 - 192));
      OUTLINED_FUNCTION_12_0();
      goto LABEL_11;
    }
    v48 = OUTLINED_FUNCTION_56_22();
    v50 = v46;
LABEL_14:
    v51 = *(_QWORD *)(v1 - 128);
    *(_QWORD *)(v1 - 120) = v49;
    v49(v48, v50, v51);
    v52 = *(_QWORD *)(v1 - 208);
    v53 = *(_QWORD *)(v1 - 112);
    DataFrame.subscript.getter();
    *(_QWORD *)(v1 - 104) = 0;
    *(_QWORD *)(v1 - 96) = 0xE000000000000000;
    lazy protocol witness table accessor for type Column<String> and conformance Column<A>();
    v54 = *(_QWORD *)(v1 - 280);
    OptionalColumnProtocol.filled(with:)();
    v55 = OUTLINED_FUNCTION_74_17(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 296) + 8));
    MEMORY[0x24BDAC7A8](v55);
    OUTLINED_FUNCTION_52_19();
    v56 = *(_QWORD *)(v1 - 184);
    *(_QWORD *)(v57 - 16) = v56;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData12FilledColumnVyAF0G0VySSGG_SSSgs5NeverOTg5();
    OUTLINED_FUNCTION_195();
    DataFrame.subscript.setter();
    OUTLINED_FUNCTION_5_53(v52, v53);
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_58_8(*(_QWORD *)(v1 - 368), *(_QWORD *)(v1 - 360));
    OUTLINED_FUNCTION_123();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 272) + 8))(v54, *(_QWORD *)(v1 - 264));
    OUTLINED_FUNCTION_7_28(*(_QWORD *)(v1 - 192));
    OUTLINED_FUNCTION_7_28(v56);
    v58 = *(_QWORD *)(v1 - 128);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 - 120))(*(_QWORD *)(v1 - 176), v30, v58);
    OUTLINED_FUNCTION_173_0();
    __swift_storeEnumTagSinglePayload(v59, v60, v61, v58);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_133_0(*(_QWORD *)(v1 - 256), v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v18 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v1 - 224) = xmmword_21AFE7F70;
  *(_QWORD *)(v1 - 200) = v18;
  *(_OWORD *)(v18 + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(v18 + 32) = *(_QWORD *)(v1 - 208);
  *(_QWORD *)(v18 + 40) = v5;
  *(_QWORD *)(v18 + 48) = v8;
  *(_QWORD *)(v18 + 56) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CSVType)>);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CSVType));
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 72);
  v22 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v23 = OUTLINED_FUNCTION_72_16();
  *(_OWORD *)(v23 + 16) = *(_OWORD *)(v1 - 224);
  v24 = (_QWORD *)(v23 + v22);
  v25 = v23 + v22 + *(int *)(v19 + 48);
  *v24 = *(_QWORD *)(v1 - 208);
  v24[1] = v5;
  v26 = *MEMORY[0x24BDF5FC0];
  OUTLINED_FUNCTION_58_16(v25, v26);
  v27 = (_QWORD *)((char *)v24 + v21);
  v28 = *(_QWORD *)(v1 - 360);
  v29 = (uint64_t)v27 + *(int *)(v19 + 48);
  *v27 = v8;
  v27[1] = v28;
  OUTLINED_FUNCTION_58_16(v29, v26);
  OUTLINED_FUNCTION_45_27();
  OUTLINED_FUNCTION_45_27();
  Dictionary.init(dictionaryLiteral:)();
  default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
  v30 = *(_QWORD *)(v1 - 320);
  OUTLINED_FUNCTION_58_16(v30, *MEMORY[0x24BDF5FB8]);
  CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
  v31 = *(_QWORD *)(v1 - 344);
  v32 = *(_QWORD *)(v1 - 120);
  DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)();
  if (!v32)
  {
    v48 = OUTLINED_FUNCTION_56_22();
    v50 = v31;
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_7_28(*(_QWORD *)(v1 - 192));
  OUTLINED_FUNCTION_80();
LABEL_11:
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_28(*(_QWORD *)(v1 - 184));
LABEL_15:
  OUTLINED_FUNCTION_7();
}

#error "21AF8E584: call analysis failed (funcsize=133)"

void default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)()
{
  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
}

void specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (!*(_QWORD *)(a1 + 16)
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>),
        v2 = static _SetStorage.allocate(capacity:)(),
        (v3 = *(_QWORD *)(a1 + 16)) == 0))
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
  v4 = 0;
  while (v4 < *(_QWORD *)(a1 + 16))
  {
    v5 = (uint64_t *)(a1 + 32 + 16 * v4);
    v7 = *v5;
    v6 = v5[1];
    Hasher.init(_seed:)();
    OUTLINED_FUNCTION_195();
    String.hash(into:)();
    v8 = Hasher._finalize()();
    v9 = -1 << *(_BYTE *)(v2 + 32);
    v10 = v8 & ~v9;
    OUTLINED_FUNCTION_66_20();
    if ((v13 & v12) != 0)
    {
      v14 = *(_QWORD *)(v2 + 48);
      v15 = (_QWORD *)(v14 + 16 * v10);
      v16 = *v15 == v7 && v15[1] == v6;
      if (v16 || (OUTLINED_FUNCTION_74_5() & 1) != 0)
      {
LABEL_11:
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      v17 = ~v9;
      while (1)
      {
        v10 = (v10 + 1) & v17;
        OUTLINED_FUNCTION_66_20();
        if ((v12 & v13) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * v10);
        v19 = *v18 == v7 && v18[1] == v6;
        if (v19 || (OUTLINED_FUNCTION_74_5() & 1) != 0)
          goto LABEL_11;
      }
    }
    *(_QWORD *)(v2 + 56 + 8 * v11) = v13 | v12;
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    *v20 = v7;
    v20[1] = v6;
    v21 = *(_QWORD *)(v2 + 16);
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_25;
    *(_QWORD *)(v2 + 16) = v23;
LABEL_22:
    if (++v4 == v3)
      goto LABEL_23;
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

uint64_t initializeBufferWithCopyOfBuffer for MLHandPoseClassifier.DataSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_21AF8EC1C + 4 * byte_21AFEFDCA[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for MLHandPoseClassifier.DataSource(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v4 = type metadata accessor for URL();
      v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
      v5(a1, v4);
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v5(a1 + *(int *)(v6 + 48), v4);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 1:
    case 2:
      v3 = type metadata accessor for URL();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 3:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 4:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 5:
      v7 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 6:
      v8 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      swift_bridgeObjectRelease();
LABEL_8:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for MLHandPoseClassifier.DataSource()
{
  char *v0;

  v0 = (char *)sub_21AF8F0E4 + 4 * byte_21AFEFDD8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AF8F0E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = type metadata accessor for URL();
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16);
  v3(v0, v1, v2);
  v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
  v3(v0 + v4[12], v1 + v4[12], v2);
  v5 = v4[16];
  v6 = (_QWORD *)(v0 + v5);
  v7 = (_QWORD *)(v1 + v5);
  v8 = v7[1];
  *v6 = *v7;
  v6[1] = v8;
  v9 = v4[20];
  v10 = (_QWORD *)(v0 + v9);
  v11 = (_QWORD *)(v1 + v9);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for MLHandPoseClassifier.DataSource(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of MLHandPoseClassifier.DataSource(result);
    v2 = (char *)&loc_21AF8F3E4 + 4 * byte_21AFEFDDF[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

char *initializeWithTake for MLHandPoseClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for URL();
      v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v7(&a1[v8[12]], &a2[v8[12]], v6);
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      *(_OWORD *)&a1[v8[20]] = *(_OWORD *)&a2[v8[20]];
      goto LABEL_7;
    case 1u:
    case 2u:
      v9 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      goto LABEL_7;
    case 5u:
      v10 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      *(_OWORD *)&a1[v11[12]] = *(_OWORD *)&a2[v11[12]];
      *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
      *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
      goto LABEL_7;
    case 6u:
      v12 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      *(_OWORD *)&a1[*(int *)(v13 + 48)] = *(_OWORD *)&a2[*(int *)(v13 + 48)];
      *(_OWORD *)&a1[*(int *)(v13 + 64)] = *(_OWORD *)&a2[*(int *)(v13 + 64)];
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for MLHandPoseClassifier.DataSource(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.DataSource((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for URL();
        v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
        v7(a1, a2, v6);
        v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v7(&a1[v8[12]], &a2[v8[12]], v6);
        *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
        *(_OWORD *)&a1[v8[20]] = *(_OWORD *)&a2[v8[20]];
        goto LABEL_8;
      case 1u:
      case 2u:
        v9 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        goto LABEL_8;
      case 5u:
        v10 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v11[12]] = *(_OWORD *)&a2[v11[12]];
        *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
        *(_OWORD *)&a1[v11[20]] = *(_OWORD *)&a2[v11[20]];
        goto LABEL_8;
      case 6u:
        v12 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&a1[*(int *)(v13 + 48)] = *(_OWORD *)&a2[*(int *)(v13 + 48)];
        *(_OWORD *)&a1[*(int *)(v13 + 64)] = *(_OWORD *)&a2[*(int *)(v13 + 64)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLHandPoseClassifier.DataSource()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = (void *)v5;
    v7 = &unk_21AFEFE00;
    v8 = &unk_21AFEFE00;
    swift_getTupleTypeLayout();
    v10 = &v9;
    v11 = v5;
    v12 = v5;
    v13 = &unk_21AFEFE18;
    v14 = &unk_21AFEFE30;
    result = type metadata accessor for DataFrame();
    if (v2 <= 0x3F)
    {
      v5 = *(_QWORD *)(result - 8) + 64;
      v6 = &unk_21AFEFE00;
      v7 = &unk_21AFEFE00;
      v8 = &unk_21AFEFE00;
      swift_getTupleTypeLayout();
      v15 = &v4;
      swift_getTupleTypeLayout3();
      v16 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_59()
{
  uint64_t v0;
  void *v1;
  char v2;

  v1 = *(void **)(v0 - 288);
  v2 = *(_BYTE *)(v0 - 280);
  *(_QWORD *)(v0 - 104) = v1;
  *(_BYTE *)(v0 - 96) = v2;
  *(_QWORD *)(v0 - 288) = v1;
  *(_BYTE *)(v0 - 280) = v2;
  outlined copy of Result<_DataTable, Error>(v1, v2);
  return static _ImageUtilities.validateImageInput(trainingData:imageColumn:labelColumn:)(v0 - 288, 0x7461506567616D69, 0xE900000000000068, 0x6C6562616CLL, 0xE500000000000000);
}

uint64_t OUTLINED_FUNCTION_4_59@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return outlined init with copy of MLHandPoseClassifier.DataSource(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

void OUTLINED_FUNCTION_5_53(uint64_t a1, uint64_t a2)
{
  Swift::String v2;

  v2._countAndFlagsBits = 0x7461506567616D69;
  v2._object = (void *)0xE900000000000068;
  DataFrame.renameColumn(_:to:)(*(Swift::String *)&a1, v2);
}

uint64_t OUTLINED_FUNCTION_8_60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized DataFrame.init<A>(expanding:keysColumnName:valuesColumnName:)(a1, 0x7461506567616D69, 0xE900000000000068, a2);
}

void OUTLINED_FUNCTION_12_48(uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
  Swift::String v3;

  v3._countAndFlagsBits = 0x6966206567616D49;
  v3._object = (void *)0xEF656D616E20656CLL;
  DataFrame.validateColumnTypes(_:_:context:)(*(Swift::String *)&a1, a3, v3);
}

uint64_t OUTLINED_FUNCTION_18_35()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 168) + 8))(v0, *(_QWORD *)(v1 - 128));
}

uint64_t OUTLINED_FUNCTION_25_39()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 - 96);
  *(_QWORD *)(v0 - 120) = *(_QWORD *)(v0 - 104);
  *(_BYTE *)(v0 - 112) = v1;
  return DataFrame.init(_:)(v0 - 120);
}

uint64_t OUTLINED_FUNCTION_26_39()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void OUTLINED_FUNCTION_27_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::OpaquePointer v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v6 = *(_QWORD *)(v5 - 112);
  v7 = 0xE500000000000000;
  DataFrame.validateColumnTypes(_:_:context:)(*(Swift::String *)&a1, v4, *(Swift::String *)&a4);
}

uint64_t OUTLINED_FUNCTION_36_30()
{
  return type metadata accessor for MLHandPoseClassifier.DataSource();
}

uint64_t OUTLINED_FUNCTION_39_26@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for UTType();
}

uint64_t OUTLINED_FUNCTION_41_25()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 208) + 8))(v0, *(_QWORD *)(v1 - 200));
}

uint64_t OUTLINED_FUNCTION_43_22()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 176) + 8))(v0, *(_QWORD *)(v1 - 168));
}

uint64_t OUTLINED_FUNCTION_45_27()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_49_24()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_51_28@<X0>(uint64_t a1@<X8>)
{
  char v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  *(_BYTE *)(v2 - 96) = v1;
  return v2 - 104;
}

uint64_t OUTLINED_FUNCTION_53_25(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, *(_QWORD *)(v1 - 128));
}

uint64_t OUTLINED_FUNCTION_54_22()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 160) + 8))(v0, *(_QWORD *)(v1 - 152));
}

uint64_t OUTLINED_FUNCTION_56_22()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 312);
}

uint64_t OUTLINED_FUNCTION_57_22@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return static MLHandPoseClassifier.FeatureExtractor.extractFeatures(from:startingSessionId:)(a1, 0, a2);
}

uint64_t OUTLINED_FUNCTION_58_16(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_60_23()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 296);
}

uint64_t OUTLINED_FUNCTION_72_16()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_73_17(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v3);
}

uint64_t OUTLINED_FUNCTION_74_17@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_76_12()
{
  uint64_t v0;

  return outlined destroy of MLHandPoseClassifier.DataSource(v0);
}

uint64_t OUTLINED_FUNCTION_79_11(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

uint64_t static MLLinearRegressor.ModelParameters.firstIncompatibility(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32))
  {
    if (*(double *)(a1 + 40) == *(double *)(a2 + 40))
    {
      if (*(double *)(a1 + 48) == *(double *)(a2 + 48))
      {
        if (*(double *)(a1 + 56) == *(double *)(a2 + 56))
        {
          if (*(double *)(a1 + 64) == *(double *)(a2 + 64))
          {
            v6 = *(unsigned __int8 *)(a1 + 72);
            v7 = 1702195828;
            v8 = *(unsigned __int8 *)(a2 + 72);
            if (*(_BYTE *)(a1 + 72))
              v9 = 1702195828;
            else
              v9 = 0x65736C6166;
            if (*(_BYTE *)(a1 + 72))
              v10 = 0xE400000000000000;
            else
              v10 = 0xE500000000000000;
            if (*(_BYTE *)(a2 + 72))
            {
              v11 = 0xE400000000000000;
            }
            else
            {
              v7 = 0x65736C6166;
              v11 = 0xE500000000000000;
            }
            if (v6 == v8)
              v12 = 0;
            else
              v12 = 0x2065727574616546;
            if (v6 == v8)
              v13 = 0;
            else
              v13 = 0xEF676E696C616373;
            if (v6 == v8)
              v3 = 0;
            else
              v3 = v9;
            if (v6 == v8)
              v4 = 0;
            else
              v4 = v10;
            if (v6 == v8)
              result = 0;
            else
              result = v7;
            if (v6 == v8)
              v15 = 0;
            else
              v15 = v11;
          }
          else
          {
            Double.description.getter();
            result = OUTLINED_FUNCTION_0_49();
            v13 = 0x800000021AFF65D0;
            v12 = 0xD000000000000015;
          }
        }
        else
        {
          Double.description.getter();
          result = OUTLINED_FUNCTION_0_49();
          v13 = 0xE900000000000065;
          v12 = 0x7A69732070657453;
        }
      }
      else
      {
        v13 = 0xEA00000000007974;
        Double.description.getter();
        result = OUTLINED_FUNCTION_0_49();
        v12 = 0x6C616E657020324CLL;
      }
    }
    else
    {
      v13 = 0xEA00000000007974;
      v12 = 0x6C616E657020314CLL;
      Double.description.getter();
      result = OUTLINED_FUNCTION_0_49();
    }
  }
  else
  {
    v3 = OUTLINED_FUNCTION_123_0();
    v4 = v16;
    result = OUTLINED_FUNCTION_123_0();
    v13 = 0xEF736E6F69746172;
    v12 = 0x657469202E78614DLL;
  }
  *a3 = v12;
  a3[1] = v13;
  a3[2] = v3;
  a3[3] = v4;
  a3[4] = result;
  a3[5] = v15;
  return result;
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeClassifierTrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_9_56();
  v1 = (_QWORD *)OUTLINED_FUNCTION_73_14();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_5_54(v1, (uint64_t)protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeClassifierTrainingSessionDelegate);
  return OUTLINED_FUNCTION_2_56(v2, v3);
}

uint64_t specialized TrainingSessionDelegate.extractFeatures(from:)()
{
  uint64_t v0;

  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8), v0, 0, 1);
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance MLStyleTransfer.TrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance MLStyleTransfer.TrainingSessionDelegate;
  return specialized TrainingSessionDelegate.extractFeatures(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance MLStyleTransfer.TrainingSessionDelegate(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = OUTLINED_FUNCTION_52_0();
  if (v2)
  {
    v7 = 0;
  }
  else
  {
    v7 = a2 & 1;
    v6 = a1;
  }
  return OUTLINED_FUNCTION_6_63(v6, v7, *(uint64_t (**)(void))(v3 + 8));
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance LogisticRegressionClassifierTrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_9_56();
  v1 = (_QWORD *)OUTLINED_FUNCTION_73_14();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_5_54(v1, (uint64_t)protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeClassifierTrainingSessionDelegate);
  return OUTLINED_FUNCTION_2_56(v2, v3);
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance LinearRegressorTrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_9_56();
  v1 = (_QWORD *)OUTLINED_FUNCTION_73_14();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_5_54(v1, (uint64_t)protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeClassifierTrainingSessionDelegate);
  return OUTLINED_FUNCTION_2_56(v2, v3);
}

uint64_t protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance TreeRegressorTrainingSessionDelegate(unsigned __int8 *a1)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(*a1);
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeRegressorTrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_9_56();
  v1 = (_QWORD *)OUTLINED_FUNCTION_73_14();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_5_54(v1, (uint64_t)protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance TreeClassifierTrainingSessionDelegate);
  return OUTLINED_FUNCTION_2_56(v2, v3);
}

uint64_t protocol witness for TrainingSessionDelegate.shouldTransition(from:to:) in conformance TreeRegressorTrainingSessionDelegate()
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType() & 1;
}

uint64_t protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance LogisticRegressionClassifierTrainingSessionDelegate(unsigned __int8 *a1)
{
  return protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance TreeRegressorTrainingSessionDelegate(a1);
}

uint64_t OUTLINED_FUNCTION_5_54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_6_63(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t specialized CoreMLExportable.exportAsCoreMLModel()()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_43_23();
  v0[12] = v1;
  v0[13] = *(_QWORD *)(v1 - 8);
  v0[14] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  NSString *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD *v8;
  uint64_t v9;

  OUTLINED_FUNCTION_108_6();
  v2 = OUTLINED_FUNCTION_30_36();
  OUTLINED_FUNCTION_61_19();
  OUTLINED_FUNCTION_28_37();
  v3 = OUTLINED_FUNCTION_10_50();
  v4 = OUTLINED_FUNCTION_2_62(v3, (uint64_t)"A model trained using CreateML for use with CoreML.");
  specialized CoreMLExportable.export(metadata:)(v4);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_32_27();
  v5 = OUTLINED_FUNCTION_59_26();
  if (v0)
  {
    OUTLINED_FUNCTION_47_29();
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
    return OUTLINED_FUNCTION_0_30(v6);
  }
  else
  {
    OUTLINED_FUNCTION_55_25(v5, (unint64_t *)&lazy cache variable for type metadata for MLModel);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 120) = v8;
    v9 = OUTLINED_FUNCTION_17_33(v8, (uint64_t)specialized CoreMLExportable.exportAsCoreMLModel());
    return OUTLINED_FUNCTION_5_55(v9);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_1_60();
  if (!v1)
    *(_QWORD *)(v2 + 136) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_43_23();
  v0[12] = v1;
  v0[13] = *(_QWORD *)(v1 - 8);
  v0[14] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  NSString *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD *v8;
  uint64_t v9;

  OUTLINED_FUNCTION_108_6();
  v2 = OUTLINED_FUNCTION_30_36();
  OUTLINED_FUNCTION_61_19();
  OUTLINED_FUNCTION_28_37();
  v3 = OUTLINED_FUNCTION_10_50();
  v4 = OUTLINED_FUNCTION_2_62(v3, (uint64_t)"A model trained using CreateML for use with CoreML.");
  specialized CoreMLExportable.export(metadata:)(v4);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_32_27();
  v5 = OUTLINED_FUNCTION_59_26();
  if (v0)
  {
    OUTLINED_FUNCTION_47_29();
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
    return OUTLINED_FUNCTION_0_30(v6);
  }
  else
  {
    OUTLINED_FUNCTION_55_25(v5, (unint64_t *)&lazy cache variable for type metadata for MLModel);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 120) = v8;
    v9 = OUTLINED_FUNCTION_17_33(v8, (uint64_t)specialized CoreMLExportable.exportAsCoreMLModel());
    return OUTLINED_FUNCTION_5_55(v9);
  }
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_43_23();
  v0[12] = v1;
  v0[13] = *(_QWORD *)(v1 - 8);
  v0[14] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  NSString *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD *v8;
  uint64_t v9;

  OUTLINED_FUNCTION_108_6();
  v2 = OUTLINED_FUNCTION_30_36();
  OUTLINED_FUNCTION_61_19();
  OUTLINED_FUNCTION_28_37();
  v3 = OUTLINED_FUNCTION_10_50();
  v4 = OUTLINED_FUNCTION_2_62(v3, (uint64_t)"A model trained using CreateML for use with CoreML.");
  specialized CoreMLExportable.export(metadata:)(v4);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_32_27();
  v5 = OUTLINED_FUNCTION_59_26();
  if (v0)
  {
    OUTLINED_FUNCTION_47_29();
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
    return OUTLINED_FUNCTION_0_30(v6);
  }
  else
  {
    OUTLINED_FUNCTION_55_25(v5, (unint64_t *)&lazy cache variable for type metadata for MLModel);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 120) = v8;
    v9 = OUTLINED_FUNCTION_17_33(v8, (uint64_t)specialized CoreMLExportable.exportAsCoreMLModel());
    return OUTLINED_FUNCTION_5_55(v9);
  }
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_43_23();
  v0[12] = v1;
  v0[13] = *(_QWORD *)(v1 - 8);
  v0[14] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[11] = v0;
  v2 = type metadata accessor for Model();
  v1[12] = v2;
  v1[13] = *(_QWORD *)(v2 - 8);
  v1[14] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSString *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD *v8;
  uint64_t v9;

  OUTLINED_FUNCTION_108_6();
  v2 = OUTLINED_FUNCTION_30_36();
  OUTLINED_FUNCTION_61_19();
  OUTLINED_FUNCTION_28_37();
  v3 = OUTLINED_FUNCTION_10_50();
  v4 = OUTLINED_FUNCTION_2_62(v3, (uint64_t)"A model trained using CreateML for use with CoreML.");
  specialized CoreMLExportable.export(metadata:)(v4);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_32_27();
  v5 = OUTLINED_FUNCTION_59_26();
  if (v0)
  {
    OUTLINED_FUNCTION_47_29();
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
    return OUTLINED_FUNCTION_0_30(v6);
  }
  else
  {
    OUTLINED_FUNCTION_55_25(v5, (unint64_t *)&lazy cache variable for type metadata for MLModel);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 120) = v8;
    v9 = OUTLINED_FUNCTION_17_33(v8, (uint64_t)specialized CoreMLExportable.exportAsCoreMLModel());
    return OUTLINED_FUNCTION_5_55(v9);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_1_60();
  if (!v1)
    *(_QWORD *)(v2 + 136) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  OUTLINED_FUNCTION_31();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 136));
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  OUTLINED_FUNCTION_47_29();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "21AF90620: call analysis failed (funcsize=37)"

uint64_t specialized MLRegressorMetrics.init<A>(data:predictionColumnName:model:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v6 = type metadata accessor for AnyColumn();
  v5[13] = v6;
  v5[14] = *(_QWORD *)(v6 - 8);
  v5[15] = swift_task_alloc();
  v7 = type metadata accessor for DataFrame();
  v5[16] = v7;
  v5[17] = *(_QWORD *)(v7 - 8);
  v8 = swift_task_alloc();
  v5[18] = v8;
  MLLinearRegressor.Model.applied(to:eventHandler:)(v8);
  v5[19] = 0;
  return swift_task_switch();
}

uint64_t specialized MLRegressorMetrics.init<A>(data:predictionColumnName:model:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = v0[14];
  MEMORY[0x220758A1C](v0[10], v0[11]);
  AnyColumn.convertedToDoubles()();
  v3 = v2;
  v4 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  OUTLINED_FUNCTION_104_9();
  if (!v3)
  {
    v14 = v0[15];
    v37 = v0[17];
    v39 = v0[16];
    v16 = v0[12];
    v15 = v0[13];
    v18 = v0[10];
    v17 = v0[11];
    v19 = v0[9];
    OUTLINED_FUNCTION_57_23();
    OUTLINED_FUNCTION_51_29((uint64_t)"Regression target values must be numeric but got ");
    MEMORY[0x220758A1C](v18, v17);
    swift_bridgeObjectRelease();
    AnyColumn.wrappedElementType.getter();
    v4(v14, v15);
    v20._countAndFlagsBits = OUTLINED_FUNCTION_91_11();
    String.append(_:)(v20);
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_73_18();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v21 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_36_31(v21, v22);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v16, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
    v23 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v23(v19, v39);
LABEL_6:
    v23(v0[18], v0[16]);
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  v5 = v0[15];
  v6 = v0[13];
  MEMORY[0x220758A1C](v0[10], v0[11]);
  AnyColumn.convertedToDoubles()();
  v8 = v7;
  v4(v5, v6);
  if (!v8)
  {
    v38 = v0[17];
    v40 = v0[16];
    v24 = v0[12];
    v26 = v0[10];
    v25 = v0[11];
    v27 = v0[9];
    swift_release();
    OUTLINED_FUNCTION_57_23();
    OUTLINED_FUNCTION_51_29((uint64_t)"Regression target values must be numeric but got ");
    MEMORY[0x220758A1C](v26, v25);
    swift_bridgeObjectRelease();
    AnyColumn.wrappedElementType.getter();
    OUTLINED_FUNCTION_104_9();
    v28._countAndFlagsBits = OUTLINED_FUNCTION_91_11();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_73_18();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v29 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_36_31(v29, v30);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v24, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
    v23 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v23(v27, v40);
    goto LABEL_6;
  }
  v35 = v0[16];
  v36 = v0[18];
  v32 = v0[12];
  v9 = v0[8];
  v33 = v0[9];
  v34 = v0[17];
  swift_bridgeObjectRelease();
  v0[3] = v3;
  v0[4] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<Double>);
  lazy protocol witness table accessor for type Double and conformance Double();
  lazy protocol witness table accessor for type ContiguousArray<Double> and conformance ContiguousArray<A>();
  OUTLINED_FUNCTION_83_13();
  maximumAbsoluteError<A, B, C>(_:_:)();
  v10 = v0[2];
  v0[6] = v3;
  v0[7] = v8;
  OUTLINED_FUNCTION_83_13();
  rootMeanSquaredError<A, B, C>(_:_:)();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v32, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  v11 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v11(v33, v35);
  v11(v36, v35);
  swift_release();
  swift_release();
  v12 = v0[5];
  *(_QWORD *)v9 = v10;
  *(_QWORD *)(v9 + 8) = v12;
  *(_BYTE *)(v9 + 16) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 96), (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  (*(void (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 128));
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

void MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, char *, uint64_t);
  void (*v81)(_QWORD, _QWORD, _QWORD);
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  Swift::Int v88;
  Swift::String v89;
  int *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t);
  void (*v110)(uint64_t, uint64_t, uint64_t);
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  void (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(_QWORD, _QWORD, _QWORD);
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  _QWORD *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  _BYTE v164[48];
  __int128 v165;
  char v166;
  uint64_t v167;

  OUTLINED_FUNCTION_8_1();
  a19 = v21;
  a20 = v22;
  v158 = v20;
  v24 = v23;
  v156 = (char *)v25;
  v160 = v26;
  v155 = (_QWORD *)v27;
  v29 = v28;
  v31 = v30;
  v32 = type metadata accessor for MLLinearRegressor();
  v137 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v138 = v33;
  v140 = (uint64_t)&v131 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = OUTLINED_FUNCTION_93();
  v35 = OUTLINED_FUNCTION_4_26(v34, (uint64_t)&a17);
  v161 = v36;
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_101_0();
  OUTLINED_FUNCTION_68_3(v37);
  v136 = v38;
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_211();
  v139 = v40;
  v41 = OUTLINED_FUNCTION_28_29();
  v141 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_101_0();
  OUTLINED_FUNCTION_68_3(v42);
  v142 = v43;
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_211();
  v46 = OUTLINED_FUNCTION_82_11(v45);
  OUTLINED_FUNCTION_4_26(v46, (uint64_t)&a10);
  v151 = v47;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v49);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinearRegressor<Double>.Configuration);
  OUTLINED_FUNCTION_4_26(v50, (uint64_t)&v167);
  v148 = v51;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v52);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v53);
  v55 = (char *)&v131 - v54;
  v146 = type metadata accessor for MLLinearRegressor.Regressor();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v56);
  OUTLINED_FUNCTION_64();
  v153 = v57;
  OUTLINED_FUNCTION_96_10();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v58);
  OUTLINED_FUNCTION_5();
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v60);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v61);
  v63 = (char *)&v131 - v62;
  v64 = v31 + *(int *)(v32 + 36);
  *(_QWORD *)v64 = 0;
  *(_QWORD *)(v64 + 8) = 0;
  v157 = v64;
  *(_BYTE *)(v64 + 16) = 0;
  v144 = (int *)v32;
  v65 = *(int *)(v32 + 40);
  v145 = v31;
  v66 = v31 + v65;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v67, 0xD0000000000000C0);
  *(_QWORD *)v66 = v68;
  *(_QWORD *)(v66 + 8) = 0;
  *(_BYTE *)(v66 + 16) = 1;
  a10 = v24;
  _sypSgWOcTm_0(v24, (uint64_t)&v162, &demangling cache variable for type metadata for Any?);
  if (v163)
  {
    v69 = (uint64_t)&v63[*(int *)(v59 + 48)];
    outlined init with take of Any(&v162, &v165);
    swift_dynamicCast();
    v70 = v158;
    MLLinearRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    if (v70)
    {
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_52_20();
      v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v161 + 8))(v29, v159);
      OUTLINED_FUNCTION_203(v72, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
    }
    else
    {
      v132 = v59;
      v133 = v69;
      v158 = v29;
      OUTLINED_FUNCTION_203(v71, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
      v73 = (uint64_t)v155;
      v74 = (uint64_t)v160;
      static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v63, (uint64_t)v155, v160, (uint64_t)v156);
      v76 = v75;
      OUTLINED_FUNCTION_101();
      v156 = v63;
      outlined init with copy of MLLinearRegressor.ModelParameters(a10, (uint64_t)&v165);
      v77 = v153;
      *v153 = v73;
      v77[1] = v74;
      v77[2] = v76;
      outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)&v165, (uint64_t)(v77 + 3));
      outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)&v165, (uint64_t)&v162);
      lazy protocol witness table accessor for type Double and conformance Double();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LinearRegressor.Configuration.init()();
      v78 = v149;
      LinearRegressor.Configuration.maximumIterations.setter();
      LinearRegressor.Configuration.l1Penalty.setter();
      LinearRegressor.Configuration.l2Penalty.setter();
      LinearRegressor.Configuration.stepSize.setter();
      LinearRegressor.Configuration.convergenceThreshold.setter();
      outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)&v162);
      v79 = v148;
      v80 = *(void (**)(uint64_t, char *, uint64_t))(v148 + 16);
      v131 = v76;
      v80(v147, v55, v78);
      v81 = v150;
      BaseLinearRegressor.init(configuration:)();
      outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)&v165);
      v82 = *(void (**)(char *, uint64_t))(v79 + 8);
      v83 = (uint64_t)v156;
      v82(v55, v78);
      (*(void (**)(char *, _QWORD, uint64_t))(v151 + 32))((char *)v77 + *(int *)(v146 + 28), v81, v152);
      v84 = v154;
      MLLinearRegressor.Regressor.fitted(to:validateOn:eventHandler:)(v83, v133, 0, 0, v154);
      v85 = v131;
      v86 = AnalyticsReporter.init()();
      v87 = v157;
      if ((v86 & 1) == 0)
      {
        v88 = DataFrame.shape.getter();
        v89._object = (void *)0x800000021AFF21D0;
        v89._countAndFlagsBits = 0xD000000000000015;
        AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_linearRegressor, v89, v88);
      }
      v90 = v144;
      v91 = v145;
      v92 = (uint64_t *)(v145 + v144[6]);
      v93 = (uint64_t)v155;
      v94 = (uint64_t)v160;
      v155 = v92;
      *v92 = v93;
      v92[1] = v94;
      v160 = (void *)(v91 + v90[8]);
      outlined init with copy of MLLinearRegressor.ModelParameters(a10, (uint64_t)v160);
      v152 = v90[7];
      *(_QWORD *)(v91 + v152) = v85;
      v95 = v143;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v84, v143, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
      v96 = (*(unsigned __int8 *)(v141 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
      v97 = swift_allocObject();
      outlined init with take of TreeRegressorModel(v95, v97 + v96, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
      specialized blockAwait<A>(_:)();
      v99 = v98;
      OUTLINED_FUNCTION_217();
      v151 = v90[5];
      *(_QWORD *)(v91 + v151) = v99;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v154, v91, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
      v100 = v161;
      v101 = v159;
      v150 = *(void (**)(_QWORD, _QWORD, _QWORD))(v161 + 16);
      v150(v139, v156, v159);
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v91, v140, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor);
      v102 = *(unsigned __int8 *)(v100 + 80);
      v103 = (v102 + 16) & ~v102;
      v104 = *(unsigned __int8 *)(v137 + 80);
      v105 = (v136 + v104 + v103) & ~v104;
      v148 = v105 + v138;
      v147 = v102 | v104 | 7;
      v106 = swift_allocObject();
      v149 = v103;
      v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 32);
      v108 = v101;
      v109 = v107;
      v107(v106 + v103, v139, v108);
      outlined init with take of TreeRegressorModel(v140, v106 + v105, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor);
      specialized blockAwait<A>(_:)();
      v110 = v109;
      v144 = (int *)v105;
      v146 = 0;
      swift_release();
      v111 = v165;
      LOBYTE(v103) = v166;
      OUTLINED_FUNCTION_107_7();
      *(_OWORD *)v87 = v111;
      v112 = v159;
      *(_BYTE *)(v87 + 16) = v103;
      v113 = v135;
      v114 = v135 + *(int *)(v132 + 48);
      v115 = (uint64_t)v156;
      v116 = v150;
      v150(v135, v156, v112);
      _sypSgWOcTm_0(v133, v114, &demangling cache variable for type metadata for DataFrame?);
      if (__swift_getEnumTagSinglePayload(v114, 1, v112) == 1)
      {
        outlined destroy of MLLinearRegressor.ModelParameters(a10);
        v117 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
        OUTLINED_FUNCTION_62_27((uint64_t)&a16);
        OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model, (uint64_t)&a12);
        OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Regressor, (uint64_t)&a11);
        outlined destroy of URL?(v115, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        OUTLINED_FUNCTION_69_9(v118, &demangling cache variable for type metadata for DataFrame?);
        v117(v113, v112);
        goto LABEL_6;
      }
      v119 = v134;
      v120 = v114;
      v121 = v110;
      v110(v134, v120, v112);
      v161 = *(_QWORD *)(v161 + 8);
      ((void (*)(uint64_t, uint64_t))v161)(v113, v112);
      v122 = v139;
      v116(v139, v119, v112);
      v123 = v145;
      v124 = v140;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v145, v140, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor);
      v125 = swift_allocObject();
      v121(v125 + v149, v122, v112);
      outlined init with take of TreeRegressorModel(v124, (uint64_t)v144 + v125, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor);
      v126 = v146;
      specialized blockAwait<A>(_:)();
      v146 = v126;
      if (!v126)
      {
        swift_release();
        OUTLINED_FUNCTION_52_20();
        OUTLINED_FUNCTION_63_18();
        OUTLINED_FUNCTION_62_27((uint64_t)v164);
        OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model, (uint64_t)&a12);
        OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Regressor, (uint64_t)&a11);
        OUTLINED_FUNCTION_19_3(v128, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        v129 = v165;
        v130 = v166;
        OUTLINED_FUNCTION_69_13();
        *(_OWORD *)v66 = v129;
        *(_BYTE *)(v66 + 16) = v130;
        goto LABEL_6;
      }
      swift_release();
      OUTLINED_FUNCTION_52_20();
      OUTLINED_FUNCTION_63_18();
      OUTLINED_FUNCTION_62_27((uint64_t)v164);
      OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model, (uint64_t)&a12);
      OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Regressor, (uint64_t)&a11);
      OUTLINED_FUNCTION_19_3(v127, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      outlined destroy of MLHandPoseClassifier.ModelParameters(v123, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of MLLinearRegressor.ModelParameters((uint64_t)v160);
    }
    OUTLINED_FUNCTION_107_7();
    OUTLINED_FUNCTION_69_13();
LABEL_6:
    OUTLINED_FUNCTION_7();
    return;
  }
  __break(1u);
}

uint64_t type metadata accessor for MLLinearRegressor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLLinearRegressor;
  if (!type metadata singleton initialization cache for MLLinearRegressor)
    return swift_getSingletonMetadata();
  return result;
}

id MLLinearRegressor.trainingMetrics.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;

  v0 = OUTLINED_FUNCTION_8_61();
  v1 = (void *)OUTLINED_FUNCTION_66_1(*(int *)(v0 + 36));
  return OUTLINED_FUNCTION_53_3(v1, v2, v3);
}

id MLLinearRegressor.validationMetrics.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;

  v0 = OUTLINED_FUNCTION_8_61();
  v1 = (void *)OUTLINED_FUNCTION_66_1(*(int *)(v0 + 40));
  return OUTLINED_FUNCTION_53_3(v1, v2, v3);
}

void MLLinearRegressor.targetColumn.getter()
{
  OUTLINED_FUNCTION_8_61();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_22();
}

uint64_t MLLinearRegressor.featureColumns.getter()
{
  OUTLINED_FUNCTION_8_61();
  return swift_bridgeObjectRetain();
}

id MLLinearRegressor.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_8_61() + 20));
}

void key path setter for MLLinearRegressor.model : MLLinearRegressor(id *a1)
{
  MLLinearRegressor.model.setter((uint64_t)*a1);
}

void MLLinearRegressor.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_8_61() + 20);

  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

void MLLinearRegressor.model.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_8_61() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(void **)(v1 + v3);
  *(_QWORD *)a1 = v4;
  v5 = v4;
  OUTLINED_FUNCTION_22();
}

void MLLinearRegressor.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(OUTLINED_FUNCTION_8_61() + 24));
  swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLLinearRegressor.targetColumn.modify())(_QWORD)
{
  OUTLINED_FUNCTION_8_61();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLLinearRegressor.featureColumns.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_8_61() + 28);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLLinearRegressor.featureColumns.modify())(_QWORD)
{
  OUTLINED_FUNCTION_8_61();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLinearRegressor.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_8_61() + 32);
  return outlined init with copy of MLLinearRegressor.ModelParameters(v3, a1);
}

void static MLLinearRegressor._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLLinearRegressor._defaultSessionParameters);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLLinearRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

uint64_t MLLinearRegressor.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t (*v18)(void);

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = (int *)OUTLINED_FUNCTION_8_61();
  *(_QWORD *)(v0 + 64) = v5;
  v6 = v5[9];
  *(_DWORD *)(v0 + 96) = v6;
  v7 = v4 + v6;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = 0;
  v8 = v5[10];
  *(_DWORD *)(v0 + 100) = v8;
  v9 = v4 + v8;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v10, 0xD0000000000000C0);
  *(_QWORD *)v9 = v11;
  *(_QWORD *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 16) = 1;
  OUTLINED_FUNCTION_94_7(v11, v12, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  v13 = v5[7];
  *(_DWORD *)(v0 + 104) = v13;
  *(_QWORD *)(v4 + v13) = v2;
  v14 = v5[6];
  *(_DWORD *)(v0 + 108) = v14;
  v15 = (_QWORD *)(v4 + v14);
  *v15 = v3;
  v15[1] = v1;
  v18 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                          + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v16;
  *v16 = v0;
  v16[1] = MLLinearRegressor.init(_:targetColumn:featureColumns:parameters:);
  return OUTLINED_FUNCTION_24_44(v18);
}

{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(const void **)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 16);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 24), (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  *(_QWORD *)(v4 + *(int *)(v3 + 20)) = v1;
  memcpy((void *)(v4 + *(int *)(v3 + 32)), v2, 0x49uLL);
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = v1 + *(int *)(v0 + 96);
  v4 = v1 + *(int *)(v0 + 100);
  outlined destroy of MLLinearRegressor.ModelParameters(*(_QWORD *)(v0 + 56));
  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  return OUTLINED_FUNCTION_24_44(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t MLLinearRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

uint64_t closure #1 in MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:);
  return v4();
}

uint64_t partial apply for closure #1 in MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_28_29();
  OUTLINED_FUNCTION_61_2();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(v2);
}

uint64_t closure #1 in MLLinearRegressor.computeMetrics(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MLLinearRegressor.Model();
  v3[5] = swift_task_alloc();
  v4 = type metadata accessor for DataFrame();
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in MLLinearRegressor.computeMetrics(on:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v9;

  v1 = v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[7] + 16))(v0[8], v0[3], v0[6]);
  v2 = OUTLINED_FUNCTION_8_61();
  v3 = (uint64_t *)(v1 + *(int *)(v2 + 24));
  v4 = *v3;
  v5 = v3[1];
  OUTLINED_FUNCTION_94_7(v2, v6, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  v9 = (char *)&async function pointer to specialized MLRegressorMetrics.init<A>(data:predictionColumnName:model:)
     + async function pointer to specialized MLRegressorMetrics.init<A>(data:predictionColumnName:model:);
  swift_bridgeObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  v0[9] = v7;
  *v7 = v0;
  v7[1] = closure #1 in MLLinearRegressor.computeMetrics(on:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))v9)(v0[2], v0[8], v4, v5, v0[5]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_18();
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_31();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v2 + 8));
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t partial apply for closure #1 in MLLinearRegressor.computeMetrics(on:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_8_61();
  OUTLINED_FUNCTION_18_36();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  v2 = OUTLINED_FUNCTION_40_11(v1);
  return OUTLINED_FUNCTION_13_54(v2, v3, v4);
}

void MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_161();
  v12 = *(_BYTE *)(a1 + 8);
  v16 = *(_QWORD *)a1;
  LOBYTE(v17) = v12;
  DataFrame.init(_:)((uint64_t)&v16);
  outlined init with copy of MLLinearRegressor.ModelParameters(a5, (uint64_t)&v16);
  MLLinearRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(v5, a2, a3, a4, (uint64_t)&v16, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26,
    v27);
  outlined destroy of MLLinearRegressor.ModelParameters(a5);
  OUTLINED_FUNCTION_127();
}

void MLLinearRegressor.init(checkpoint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;

  OUTLINED_FUNCTION_8_1();
  a19 = v20;
  a20 = v21;
  v23 = v22;
  v25 = v24;
  v26 = OUTLINED_FUNCTION_28_29();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_101_0();
  OUTLINED_FUNCTION_68_3(v27);
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_211();
  v30 = OUTLINED_FUNCTION_82_11(v29);
  OUTLINED_FUNCTION_4_26(v30, (uint64_t)&a14);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinearRegressor<Double>.Configuration);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v34);
  type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v36);
  type metadata accessor for MLLinearRegressor.Regressor();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v37);
  v38 = OUTLINED_FUNCTION_39_27();
  v39 = v25 + *(int *)(v38 + 36);
  *(_QWORD *)v39 = 0;
  *(_QWORD *)(v39 + 8) = 0;
  *(_BYTE *)(v39 + 16) = 0;
  v40 = v25 + *(int *)(v38 + 40);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v41, 0xD0000000000000C0);
  *(_QWORD *)v40 = v42;
  *(_QWORD *)(v40 + 8) = 0;
  *(_BYTE *)(v40 + 16) = 1;
  v43 = (char *)sub_21AF92410
      + 4 * byte_21AFEFE90[*(unsigned __int8 *)(v23 + *(int *)(type metadata accessor for MLCheckpoint() + 20))];
  __asm { BR              X10 }
}

void sub_21AF92410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;

  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v16 = 0xD00000000000003BLL;
    *(_QWORD *)(v16 + 8) = 0x800000021AFF8140;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_BYTE *)(v16 + 48) = 0;
    swift_willThrow(0.0);
    v23 = type metadata accessor for MLCheckpoint;
    v24 = *(_QWORD *)(v5 - 72);
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_85_14();
  v8 = *(_QWORD *)(v7 - 256);
  swift_storeEnumTagMultiPayload();
  *(_OWORD *)(v5 - 176) = 0u;
  *(_OWORD *)(v5 - 160) = 0u;
  *(_QWORD *)(v5 - 144) = 10;
  *(_OWORD *)(v5 - 400) = xmmword_21AFE9550;
  *(_OWORD *)(v5 - 136) = xmmword_21AFE9550;
  *(_OWORD *)(v5 - 416) = xmmword_21AFE9560;
  *(_OWORD *)(v5 - 120) = xmmword_21AFE9560;
  *(_BYTE *)(v5 - 104) = 1;
  v9 = *(_QWORD *)(v5 - 272);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v4, v9, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
  *(_QWORD *)(v5 - 232) = v8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v5 - 256));
  outlined init with take of TreeRegressorModel(v9, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
  outlined assign with take of Any?(v5 - 256, v5 - 176);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0xE000000000000000;
  *((_QWORD *)v3 + 2) = MEMORY[0x24BEE4AF8];
  outlined init with copy of MLLinearRegressor.ModelParameters(v5 - 176, (uint64_t)(v3 + 24));
  outlined init with copy of MLLinearRegressor.ModelParameters(v5 - 176, v5 - 256);
  lazy protocol witness table accessor for type Double and conformance Double();
  LinearRegressor.Configuration.init()();
  LinearRegressor.Configuration.maximumIterations.setter();
  LinearRegressor.Configuration.l1Penalty.setter();
  LinearRegressor.Configuration.l2Penalty.setter();
  LinearRegressor.Configuration.stepSize.setter();
  LinearRegressor.Configuration.convergenceThreshold.setter();
  outlined destroy of MLLinearRegressor.ModelParameters(v5 - 256);
  v11 = *(_QWORD *)(v5 - 320);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 16))(*(_QWORD *)(v5 - 328), v0, v1);
  v12 = *(_QWORD *)(v5 - 312);
  BaseLinearRegressor.init(configuration:)();
  outlined destroy of MLLinearRegressor.ModelParameters(v5 - 176);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0, v1);
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v5 - 304) + 32))(&v3[*(int *)(*(_QWORD *)(v5 - 336) + 28)], v12, *(_QWORD *)(v5 - 296));
  lazy protocol witness table accessor for type MLLinearRegressor.Regressor and conformance MLLinearRegressor.Regressor();
  v13 = *(_QWORD *)(v5 - 280);
  v14 = *(_QWORD *)(v5 - 72);
  v15 = *(_QWORD *)(v5 - 288);
  UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
  if (v15)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters(v14, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v23 = type metadata accessor for MLLinearRegressor.Regressor;
    v24 = (uint64_t)v3;
LABEL_6:
    outlined destroy of MLHandPoseClassifier.ModelParameters(v24, (uint64_t (*)(_QWORD))v23);
    OUTLINED_FUNCTION_69_13();
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
    goto LABEL_7;
  }
  v17 = *(_QWORD *)(v5 - 344);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v13, v17, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  v18 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 360) + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject();
  outlined init with take of TreeRegressorModel(v17, v20 + v19, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  specialized blockAwait<A>(_:)();
  v22 = v21;
  swift_release();
  v25 = *(int **)(v5 - 376);
  v26 = *(_QWORD *)(v5 - 368);
  *(_QWORD *)(v26 + v25[5]) = v22;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v13, v26, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  OUTLINED_FUNCTION_85_14();
  v28 = *(_QWORD *)(v27 - 256);
  swift_storeEnumTagMultiPayload();
  v29 = v26 + v25[8];
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_QWORD *)(v29 + 32) = 10;
  *(_OWORD *)(v29 + 40) = *(_OWORD *)(v5 - 400);
  *(_OWORD *)(v29 + 56) = *(_OWORD *)(v5 - 416);
  *(_BYTE *)(v29 + 72) = 1;
  v30 = *(_QWORD *)(v5 - 272);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v4, v30, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
  *(_QWORD *)(v5 - 152) = v28;
  v31 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v5 - 176));
  outlined init with take of TreeRegressorModel(v30, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
  outlined assign with take of Any?(v5 - 176, v29);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
  v32 = (_QWORD *)(v26 + v25[6]);
  *v32 = 0;
  v32[1] = 0xE000000000000000;
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v5 - 72), (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v13, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Regressor);
  *(_QWORD *)(v26 + v25[7]) = MEMORY[0x24BEE4AF8];
LABEL_7:
  OUTLINED_FUNCTION_7();
}

uint64_t closure #1 in MLLinearRegressor.init(checkpoint:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(checkpoint:);
  return v4();
}

void static MLLinearRegressor.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_8_1();
  v2 = OUTLINED_FUNCTION_93();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_91_1();
  v4 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v4);
  static MLLinearRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLLinearRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;

  static MLLinearRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLLinearRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
}

void static MLLinearRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_1();
  v1 = OUTLINED_FUNCTION_93();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_5();
  v3 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v3);
  static MLLinearRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _UNKNOWN **v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  OUTLINED_FUNCTION_8_1();
  v44 = v1;
  v3 = v2;
  v37 = v4;
  v38 = v5;
  v36 = v6;
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_208();
  v33 = v8;
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_211();
  v35 = v10;
  OUTLINED_FUNCTION_96_10();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_5();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v31 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v31 - v20;
  v34 = v3;
  _sypSgWOcTm_0(v3, (uint64_t)&v42, &demangling cache variable for type metadata for Any?);
  if (v43)
  {
    v22 = (uint64_t)&v21[*(int *)(v12 + 48)];
    outlined init with take of Any(&v42, &v39);
    swift_dynamicCast();
    MLLinearRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    OUTLINED_FUNCTION_203(v23, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData);
    if (!v0)
    {
      v24 = (uint64_t)&v18[*(int *)(v12 + 48)];
      v31[1] = *(_QWORD *)(OUTLINED_FUNCTION_93() - 8);
      OUTLINED_FUNCTION_81_6((uint64_t)v18);
      v32 = v24;
      _sypSgWOcTm_0(v22, v24, &demangling cache variable for type metadata for DataFrame?);
      v25 = (uint64_t)&v15[*(int *)(v12 + 48)];
      v31[0] = v25;
      OUTLINED_FUNCTION_81_6((uint64_t)v15);
      _sypSgWOcTm_0(v22, v25, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLLinearRegressor.ModelParameters(v34, (uint64_t)&v39);
      OUTLINED_FUNCTION_97(v44, v26, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      v27 = type metadata accessor for LinearRegressorTrainingSessionDelegate();
      OUTLINED_FUNCTION_15_1();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28 = LinearRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:parameters:sessionParameters:)();
      OUTLINED_FUNCTION_27_14();
      outlined destroy of URL?(v32, &demangling cache variable for type metadata for DataFrame?);
      v40 = v27;
      v41 = &protocol witness table for LinearRegressorTrainingSessionDelegate;
      *(_QWORD *)&v39 = v28;
      v29 = v33;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v44, v33, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>);
      OUTLINED_FUNCTION_15_1();
      swift_retain();
      specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v39, v29, 6);
      OUTLINED_FUNCTION_69_9(v30, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      OUTLINED_FUNCTION_217();
    }
    OUTLINED_FUNCTION_7();
  }
  else
  {
    __break(1u);
  }
}

void static MLLinearRegressor.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLLinearRegressor>);
  OUTLINED_FUNCTION_15_1();
  swift_retain();
  specialized MLJob.init(_:)();
}

void static MLLinearRegressor.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14[-1] - v7;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(a1, (uint64_t)&v14[-1] - v7, v9);
  v10 = type metadata accessor for LinearRegressorTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v11 = LinearRegressorTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v8);
  if (!v1)
  {
    v14[3] = v10;
    v14[4] = &protocol witness table for LinearRegressorTrainingSessionDelegate;
    v14[0] = v11;
    OUTLINED_FUNCTION_97(a1, v12, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v14, (uint64_t)v5, 6);
  }
}

void closure #1 in closure #1 in static MLLinearRegressor.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  _BYTE v20[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a2 & 1) != 0)
  {
    *v5 = a1;
    swift_storeEnumTagMultiPayload();
    v18 = a1;
    a4(v5);
    outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for LinearRegressorTrainingSessionDelegate();
    swift_dynamicCast();
    v15 = v19;
    v16 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 1, 1, v16);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v15;
    v17[5] = a4;
    v17[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:), (uint64_t)v17);
    swift_release();
  }
}

uint64_t closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  v6[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Result<>.init(catching:)
                                                + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = v1;
  *v1 = v0;
  v1[1] = closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:);
  return v3(v0[5], v0[2]);
}

{
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  OUTLINED_FUNCTION_10();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLLinearRegressor.init(delegate:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[28] = a1;
  v2[29] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.Model?);
  v2[30] = OUTLINED_FUNCTION_0();
  v2[31] = OUTLINED_FUNCTION_8_61();
  v2[32] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  v2[33] = OUTLINED_FUNCTION_0();
  v2[34] = type metadata accessor for MLLinearRegressor.PersistentParameters();
  v2[35] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLLinearRegressor.init(delegate:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = v0[33];
  v2 = v0[34];
  v3 = v0[29] + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v3, v1, &demangling cache variable for type metadata for MLLinearRegressor.PersistentParameters?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v5 = (int *)v0[34];
    v6 = v0[35];
    v8 = v0[29];
    v7 = v0[30];
    outlined init with take of TreeRegressorModel(v0[33], v6, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
    outlined init with copy of MLLinearRegressor.ModelParameters(v6 + v5[8], (uint64_t)(v0 + 2));
    v9 = v5[7];
    v10 = (uint64_t *)(v6 + v5[6]);
    v12 = *v10;
    v11 = v10[1];
    v13 = *(_QWORD *)(v6 + v9);
    v14 = v8 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v14, v7, &demangling cache variable for type metadata for MLLinearRegressor.Model?);
    v15 = OUTLINED_FUNCTION_28_29();
    result = __swift_getEnumTagSinglePayload(v7, 1, v15);
    if ((_DWORD)result != 1)
    {
      outlined init with copy of MLLinearRegressor.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 12));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16 = (_QWORD *)swift_task_alloc();
      v0[36] = v16;
      *v16 = v0;
      v16[1] = MLLinearRegressor.init(delegate:);
      return MLLinearRegressor.init(_:targetColumn:featureColumns:parameters:)(v0[32], v0[30], v12, v11, v13, (uint64_t)(v0 + 12));
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_108_6();
  v1 = *(_QWORD *)(v0 + 280);
  swift_release();
  outlined destroy of MLLinearRegressor.ModelParameters(v0 + 16);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MLLinearRegressor.init(delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 232);
  outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 224), (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor);
  v2 = v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics;
  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_trainingMetrics + 16);
  if (v3 == 255)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 224);
    v6 = *(_QWORD *)(v0 + 232);
    v8 = v3 & 1;
    v10 = *(id *)v2;
    v9 = *(_QWORD *)(v2 + 8);
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v2, v9, v3 & 1);
    outlined destroy of MLLinearRegressor.ModelParameters(v0 + 16);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.PersistentParameters);
    v11 = v7 + *(int *)(v5 + 36);
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    *(_QWORD *)v11 = v10;
    *(_QWORD *)(v11 + 8) = v9;
    *(_BYTE *)(v11 + 16) = v8;
    v13 = *(void **)(v6 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics);
    v12 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 8);
    v14 = *(unsigned __int8 *)(v6
                             + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics
                             + 16);
    outlined copy of MLRegressorMetrics?(v13, v12, *(_BYTE *)(v6 + OBJC_IVAR____TtC8CreateML38LinearRegressorTrainingSessionDelegate_validationMetrics + 16));
    swift_release();
    if (v14 != 255)
    {
      v15 = *(_QWORD *)(v0 + 224) + *(int *)(*(_QWORD *)(v0 + 248) + 40);
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
      *(_QWORD *)v15 = v13;
      *(_QWORD *)(v15 + 8) = v12;
      *(_BYTE *)(v15 + 16) = v14 & 1;
    }
    swift_task_dealloc();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
  }
}

void MLLinearRegressor.predictions(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::OpaquePointer v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;

  v2 = OUTLINED_FUNCTION_93();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = OUTLINED_FUNCTION_39_27();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v5, v6);
  if (!v7)
  {
    OUTLINED_FUNCTION_18();
    MLLinearRegressor.Model.applied(to:eventHandler:)(v8);
    MEMORY[0x220758A1C](*(_QWORD *)(v0 + *(int *)(v4 + 24)), *(_QWORD *)(v0 + *(int *)(v4 + 24) + 8));
    OUTLINED_FUNCTION_23_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
  OUTLINED_FUNCTION_127();
}

void MLLinearRegressor.predictions(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  char v10;

  v6 = OUTLINED_FUNCTION_93();
  MEMORY[0x24BDAC7A8](v6);
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_54_0();
  v8 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v8;
  outlined copy of Result<_DataTable, Error>(v9, v8);
  DataFrame.init(_:)((uint64_t)&v9);
  MLLinearRegressor.predictions(from:)();
  OUTLINED_FUNCTION_60_5();
  if (!v2)
    MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v3, 1, a2);
  OUTLINED_FUNCTION_127();
}

void MLLinearRegressor.evaluation(on:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::OpaquePointer v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t inited;
  Swift::OpaquePointer v14;
  _QWORD *v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  v3 = v2;
  v6 = OUTLINED_FUNCTION_8_61();
  v26 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v26 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v27 = OUTLINED_FUNCTION_93();
  v8 = *(_QWORD *)(v27 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v27);
  v28 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v10, v11);
  if (v12)
    goto LABEL_4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14._rawValue = (void *)inited;
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  v15 = (_QWORD *)(v2 + *(int *)(v6 + 24));
  v16 = v15[1];
  *((_QWORD *)v14._rawValue + 4) = *v15;
  *((_QWORD *)v14._rawValue + 5) = v16;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 0x6C6562614CLL;
  v17._object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)(v14, v17);
  swift_setDeallocating();
  v18 = (uint64_t)v25;
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (v12)
  {
LABEL_4:
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    v19 = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v28, a1, v27);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v3, v18, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor);
    v20 = v18;
    v21 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v22 = (v9 + *(unsigned __int8 *)(v26 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v23 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v23 + v21, v28, v19);
    outlined init with take of TreeRegressorModel(v20, v23 + v22, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor);
    specialized blockAwait<A>(_:)();
    swift_release();
  }
}

uint64_t MLLinearRegressor.evaluation(on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v9;
  char v10;

  v5 = OUTLINED_FUNCTION_93();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  v7 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLLinearRegressor.evaluation(on:)(v2, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
}

void MLLinearRegressor.write(to:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[10];

  OUTLINED_FUNCTION_8_1();
  v31 = v0;
  v5 = v4;
  v37 = v6;
  OUTLINED_FUNCTION_28_29();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v8 = type metadata accessor for Model();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_91_1();
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_53_0();
  v30 = v5[1];
  v35 = v5[2];
  v36 = *v5;
  v33 = v5[4];
  v34 = v5[3];
  v12 = v5[6];
  v32 = v5[5];
  v13 = v5[7];
  v14 = v5[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v37, 0x65527261656E694CLL, 0xEF726F7373657267, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v3);
  if (!v1)
  {
    v29 = v12;
    v38 = v2;
    v28 = v8;
    OUTLINED_FUNCTION_97(v31, v15, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
    if (v30)
    {
      v16 = v36;
      v17 = v36;
      v18 = v30;
      v19 = v35;
      v20 = v34;
      v21 = v33;
      v22 = v32;
      v23 = v29;
      v24 = v13;
    }
    else
    {
      v25 = NSFullUserName();
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v26;

      v21 = 0;
      v22 = 0;
      v14 = 0;
      v20 = 0x800000021AFF2260;
      v24 = 0xE100000000000000;
      v19 = 0xD000000000000033;
      v23 = 49;
      v16 = v36;
    }
    v39[0] = v17;
    v39[1] = v18;
    v39[2] = v19;
    v39[3] = v20;
    v39[4] = v21;
    v39[5] = v22;
    v39[6] = v23;
    v39[7] = v24;
    v39[8] = v14;
    outlined copy of MLModelMetadata?(v16, v30);
    specialized CoreMLExportable.export(metadata:)(v39);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_101();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_3();
    v27 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_203(v27, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor.Model);
    Model.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v38, v28);
    OUTLINED_FUNCTION_23_2(v3, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  }
  OUTLINED_FUNCTION_7();
}

void MLLinearRegressor.write(toFile:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  OUTLINED_FUNCTION_8_1();
  v19 = v2;
  v4 = v3;
  v5 = type metadata accessor for URL.DirectoryHint();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_161();
  v12 = *v4;
  v17 = v4[1];
  v18 = v12;
  v13 = v4[2];
  v15 = v4[3];
  v16 = v13;
  v14 = *((_QWORD *)v4 + 8);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 1, 1, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v0, *MEMORY[0x24BDCD7A0], v5);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  v20 = v18;
  v21 = v17;
  v22 = v16;
  v23 = v15;
  v24 = v14;
  MLLinearRegressor.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v10);
  OUTLINED_FUNCTION_7();
}

unint64_t MLLinearRegressor.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  char v8;
  unint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v16;

  v1 = OUTLINED_FUNCTION_8_61();
  v2 = MLLinearRegressor.ModelParameters.description.getter();
  v4 = v3;
  v5 = MLRegressorMetrics.description.getter();
  v7 = v6;
  v8 = *(_BYTE *)(v0 + *(int *)(v1 + 40) + 16);
  v9 = MLRegressorMetrics.description.getter();
  v11 = v10;
  v12._countAndFlagsBits = v2;
  v12._object = v4;
  String.append(_:)(v12);
  OUTLINED_FUNCTION_105_4();
  v13._countAndFlagsBits = v5;
  v13._object = v7;
  String.append(_:)(v13);
  String.append(_:)(v16);
  OUTLINED_FUNCTION_104();
  if ((v8 & 1) == 0)
  {
    OUTLINED_FUNCTION_105_4();
    v14._countAndFlagsBits = v9;
    v14._object = v11;
    String.append(_:)(v14);
    String.append(_:)(v16);
    OUTLINED_FUNCTION_15_0();
  }
  OUTLINED_FUNCTION_15_0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD00000000000001CLL;
}

void MLLinearRegressor.playgroundDescription.getter(uint64_t a1@<X0>, NSAttributedString *a2@<X8>)
{
  objc_class *v3;
  objc_class *v4;
  Swift::String v5;
  NSAttributedString v6;

  OUTLINED_FUNCTION_55_25(a1, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v4 = v3;
  v5._countAndFlagsBits = MLLinearRegressor.description.getter();
  v6.super.isa = NSAttributedString.__allocating_init(string:)(v5).super.isa;
  a2[3].super.isa = v4;
  a2->super.isa = v6.super.isa;
  OUTLINED_FUNCTION_125();
}

uint64_t objectdestroyTm_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_28_29() - 8) + 80);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + ((v1 + 16) & ~v1) + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v2 = type metadata accessor for BaseLinearRegressorModel();
  OUTLINED_FUNCTION_11_1(v2);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLLinearRegressor.init(checkpoint:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_28_29();
  OUTLINED_FUNCTION_61_2();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLLinearRegressor.init(checkpoint:)(v2);
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = OUTLINED_FUNCTION_93();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (int *)OUTLINED_FUNCTION_8_61();
  v6 = *(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v7 = v0 + ((v3 + v4 + v6) & ~v6);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v8 = v7 + *(int *)(OUTLINED_FUNCTION_28_29() + 24);
  v9 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v7 + v5[8];
  if (*(_QWORD *)(v10 + 24))
    __swift_destroy_boxed_opaque_existential_0(v10);
  OUTLINED_FUNCTION_77_13(v5[9]);
  OUTLINED_FUNCTION_77_13(v5[10]);
  return swift_deallocObject();
}

id sub_21AF94368@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = MLLinearRegressor.model.getter();
  *a1 = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MLLinearRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  id v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  id v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  id v42;
  uint64_t v43;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for BaseLinearRegressorModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[5];
    v18 = a3[6];
    v19 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)a1 + v17) = v19;
    v20 = (_QWORD *)((char *)a1 + v18);
    v21 = (_QWORD *)((char *)a2 + v18);
    v22 = *v21;
    v23 = v21[1];
    v24 = a3[7];
    v25 = a3[8];
    v26 = *(_QWORD *)((char *)a2 + v24);
    *v20 = v22;
    v20[1] = v23;
    *(_QWORD *)((char *)a1 + v24) = v26;
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    v29 = *(_QWORD *)((char *)a2 + v25 + 24);
    v30 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29)
    {
      *((_QWORD *)v27 + 3) = v29;
      (**(void (***)(char *, char *, uint64_t))(v29 - 8))(v27, v28, v29);
    }
    else
    {
      v31 = *((_OWORD *)v28 + 1);
      *(_OWORD *)v27 = *(_OWORD *)v28;
      *((_OWORD *)v27 + 1) = v31;
    }
    v32 = *((_OWORD *)v28 + 3);
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
    *((_OWORD *)v27 + 3) = v32;
    *((_QWORD *)v27 + 8) = *((_QWORD *)v28 + 8);
    v27[72] = v28[72];
    v33 = a3[9];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(id *)v35;
    v37 = *((_QWORD *)v35 + 1);
    v38 = v35[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v35, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = a3[10];
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    v42 = *(id *)v41;
    v43 = *((_QWORD *)v41 + 1);
    LOBYTE(v36) = v41[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v41, v43, (char)v36);
    *(_QWORD *)v40 = v42;
    *((_QWORD *)v40 + 1) = v43;
    v40[16] = (char)v36;
  }
  return a1;
}

void destroy for MLLinearRegressor(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
  v5 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + a2[8];
  if (*(_QWORD *)(v6 + 24))
    __swift_destroy_boxed_opaque_existential_0(v6);
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8), *(_BYTE *)(a1 + a2[9] + 16));
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)(a1 + a2[10]), *(_QWORD *)(a1 + a2[10] + 8), *(_BYTE *)(a1 + a2[10] + 16));
}

_QWORD *initializeWithCopy for MLLinearRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  id v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  id v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  id v40;
  uint64_t v41;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[5];
  v16 = a3[6];
  v17 = *(void **)((char *)a2 + v15);
  *(_QWORD *)((char *)a1 + v15) = v17;
  v18 = (_QWORD *)((char *)a1 + v16);
  v19 = (_QWORD *)((char *)a2 + v16);
  v20 = *v19;
  v21 = v19[1];
  v22 = a3[7];
  v23 = a3[8];
  v24 = *(_QWORD *)((char *)a2 + v22);
  *v18 = v20;
  v18[1] = v21;
  *(_QWORD *)((char *)a1 + v22) = v24;
  v25 = (char *)a1 + v23;
  v26 = (char *)a2 + v23;
  v27 = *(_QWORD *)((char *)a2 + v23 + 24);
  v28 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27)
  {
    *((_QWORD *)v25 + 3) = v27;
    (**(void (***)(char *, char *, uint64_t))(v27 - 8))(v25, v26, v27);
  }
  else
  {
    v29 = *((_OWORD *)v26 + 1);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v29;
  }
  v30 = *((_OWORD *)v26 + 3);
  *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
  *((_OWORD *)v25 + 3) = v30;
  *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
  v25[72] = v26[72];
  v31 = a3[9];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(id *)v33;
  v35 = *((_QWORD *)v33 + 1);
  v36 = v33[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v33, v35, v36);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  v37 = a3[10];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(id *)v39;
  v41 = *((_QWORD *)v39 + 1);
  LOBYTE(v34) = v39[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v39, v41, (char)v34);
  *(_QWORD *)v38 = v40;
  *((_QWORD *)v38 + 1) = v41;
  v38[16] = (char)v34;
  return a1;
}

_QWORD *assignWithCopy for MLLinearRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  id v30;
  uint64_t v31;
  char v32;
  void *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  char v43;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[5];
  v16 = *(void **)((char *)a2 + v15);
  v17 = *(void **)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = v16;
  v18 = v16;

  v19 = a3[6];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = (uint64_t)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)((char *)a2 + v22 + 24);
  if (!*(_QWORD *)((char *)a1 + v22 + 24))
  {
    if (v25)
    {
      *(_QWORD *)(v23 + 24) = v25;
      (**(void (***)(uint64_t, char *))(v25 - 8))(v23, v24);
      goto LABEL_15;
    }
LABEL_14:
    v26 = *((_OWORD *)v24 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v26;
    goto LABEL_15;
  }
  if (!v25)
  {
    __swift_destroy_boxed_opaque_existential_0(v23);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v23, (uint64_t *)v24);
LABEL_15:
  *(_QWORD *)(v23 + 32) = *((_QWORD *)v24 + 4);
  *(_QWORD *)(v23 + 40) = *((_QWORD *)v24 + 5);
  *(_QWORD *)(v23 + 48) = *((_QWORD *)v24 + 6);
  *(_QWORD *)(v23 + 56) = *((_QWORD *)v24 + 7);
  *(_QWORD *)(v23 + 64) = *((_QWORD *)v24 + 8);
  *(_BYTE *)(v23 + 72) = v24[72];
  v27 = a3[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(id *)v29;
  v31 = *((_QWORD *)v29 + 1);
  v32 = v29[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v29, v31, v32);
  v33 = *(void **)v28;
  v34 = *((_QWORD *)v28 + 1);
  v35 = v28[16];
  *(_QWORD *)v28 = v30;
  *((_QWORD *)v28 + 1) = v31;
  v28[16] = v32;
  outlined consume of Result<_RegressorMetrics, Error>(v33, v34, v35);
  v36 = a3[10];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(id *)v38;
  v40 = *((_QWORD *)v38 + 1);
  LOBYTE(v30) = v38[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v38, v40, (char)v30);
  v41 = *(void **)v37;
  v42 = *((_QWORD *)v37 + 1);
  v43 = v37[16];
  *(_QWORD *)v37 = v39;
  *((_QWORD *)v37 + 1) = v40;
  v37[16] = (char)v30;
  outlined consume of Result<_RegressorMetrics, Error>(v41, v42, v43);
  return a1;
}

uint64_t initializeWithTake for MLLinearRegressor(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  memcpy((void *)(a1 + v12), (const void *)(a2 + v12), 0x49uLL);
  v13 = a3[9];
  v14 = a3[10];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  return a1;
}

_QWORD *assignWithTake for MLLinearRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  void *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  void *v34;
  uint64_t v35;
  char v36;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  v9 = *(int *)(type metadata accessor for MLLinearRegressor.Model() + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[5];
  v14 = *(void **)((char *)a1 + v13);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);

  v15 = a3[6];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (char *)a1 + v20;
  if (*(_QWORD *)((char *)a1 + v20 + 24))
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1 + v20);
  v22 = *(_OWORD *)((char *)a2 + v20 + 16);
  *(_OWORD *)v21 = *(_OWORD *)((char *)a2 + v20);
  *((_OWORD *)v21 + 1) = v22;
  *((_QWORD *)v21 + 4) = *(_QWORD *)((char *)a2 + v20 + 32);
  *(_OWORD *)(v21 + 40) = *(_OWORD *)((char *)a2 + v20 + 40);
  *(_OWORD *)(v21 + 56) = *(_OWORD *)((char *)a2 + v20 + 56);
  v21[72] = *((_BYTE *)a2 + v20 + 72);
  v23 = a3[9];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = v25[16];
  v27 = *(void **)v24;
  v28 = *((_QWORD *)v24 + 1);
  v29 = v24[16];
  *(_OWORD *)v24 = *(_OWORD *)v25;
  v24[16] = v26;
  outlined consume of Result<_RegressorMetrics, Error>(v27, v28, v29);
  v30 = a3[10];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = v32[16];
  v34 = *(void **)v31;
  v35 = *((_QWORD *)v31 + 1);
  v36 = v31[16];
  *(_OWORD *)v31 = *(_OWORD *)v32;
  v31[16] = v33;
  outlined consume of Result<_RegressorMetrics, Error>(v34, v35, v36);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLinearRegressor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AF94D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = OUTLINED_FUNCTION_28_29();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MLLinearRegressor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AF94D80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_28_29();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    OUTLINED_FUNCTION_125();
  }
}

uint64_t type metadata completion function for MLLinearRegressor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLLinearRegressor.Model();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21AF94E8C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = swift_task_alloc();
  v10 = (_QWORD *)OUTLINED_FUNCTION_30_0(v9);
  *v10 = v2;
  v10[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in static MLLinearRegressor.handleResult(_:session:fulfill:)(a1, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type ContiguousArray<Double> and conformance ContiguousArray<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ContiguousArray<Double> and conformance ContiguousArray<A>;
  if (!lazy protocol witness table cache variable for type ContiguousArray<Double> and conformance ContiguousArray<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ContiguousArray<Double>);
    result = MEMORY[0x22075B938](MEMORY[0x24BEE2A60], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContiguousArray<Double> and conformance ContiguousArray<A>);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_60()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 128) = v0;
  return swift_task_dealloc();
}

_QWORD *OUTLINED_FUNCTION_2_62@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  result[3] = (a2 - 32) | 0x8000000000000000;
  result[4] = 0;
  result[5] = 0;
  result[6] = 49;
  result[7] = 0xE100000000000000;
  result[8] = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_5_55(uint64_t a1)
{
  return static MLModel.compile(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_8_61()
{
  return type metadata accessor for MLLinearRegressor();
}

_QWORD *OUTLINED_FUNCTION_10_50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;

  v0[2] = v1;
  v0[3] = v2;
  result = v0 + 2;
  v0[4] = 0xD000000000000033;
  return result;
}

uint64_t OUTLINED_FUNCTION_13_54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in MLLinearRegressor.computeMetrics(on:)(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_17_33@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 112);
}

uint64_t OUTLINED_FUNCTION_24_44(uint64_t (*a1)(void))
{
  return a1();
}

void OUTLINED_FUNCTION_28_37()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_29_34@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 - 280), *(_QWORD *)(v1 - 272));
}

NSString *OUTLINED_FUNCTION_30_36()
{
  return NSFullUserName();
}

uint64_t OUTLINED_FUNCTION_32_27()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_36_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 1;
  return swift_willThrow(0.0);
}

uint64_t OUTLINED_FUNCTION_39_27()
{
  return type metadata accessor for MLLinearRegressor();
}

uint64_t OUTLINED_FUNCTION_43_23()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = v0;
  return type metadata accessor for Model();
}

uint64_t OUTLINED_FUNCTION_47_29()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_51_29(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v1);
}

uint64_t OUTLINED_FUNCTION_52_20()
{
  uint64_t v0;

  return outlined destroy of MLLinearRegressor.ModelParameters(*(_QWORD *)(v0 - 72));
}

void OUTLINED_FUNCTION_55_25(uint64_t a1, unint64_t *a2)
{
  _sSo18NSAttributedStringCMaTm_0(0, a2);
}

void OUTLINED_FUNCTION_57_23()
{
  _StringGuts.grow(_:)(52);
}

uint64_t OUTLINED_FUNCTION_59_26()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_61_19()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_62_27@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), v2);
}

uint64_t OUTLINED_FUNCTION_63_18()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 - 256))(*(_QWORD *)(v1 - 280), v0);
}

void OUTLINED_FUNCTION_69_13()
{
  uint64_t v0;

  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void OUTLINED_FUNCTION_73_18()
{
  Swift::String v0;

  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_77_13(uint64_t a1@<X8>)
{
  uint64_t v1;

  outlined consume of Result<_RegressorMetrics, Error>(*(id *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8), *(_BYTE *)(v1 + a1 + 16));
}

uint64_t OUTLINED_FUNCTION_82_11@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return type metadata accessor for BaseLinearRegressor();
}

uint64_t OUTLINED_FUNCTION_85_14()
{
  uint64_t v0;

  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_WORD *)(v0 + 16) = 256;
  return v0;
}

uint64_t OUTLINED_FUNCTION_91_11()
{
  return _typeName(_:qualified:)();
}

void OUTLINED_FUNCTION_94_7(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_96_10()
{
  return type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
}

uint64_t OUTLINED_FUNCTION_104_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void OUTLINED_FUNCTION_107_7()
{
  uint64_t v0;

  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t getEnumTagSinglePayload for ModelType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE5)
  {
    if (a2 + 27 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 27) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 28;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1C;
  v5 = v6 - 28;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 27 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 27) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE4)
    return ((uint64_t (*)(void))((char *)&loc_21AF952FC + 4 * byte_21AFEFFA5[v4]))();
  *a1 = a2 + 27;
  return ((uint64_t (*)(void))((char *)sub_21AF95330 + 4 * byte_21AFEFFA0[v4]))();
}

uint64_t sub_21AF95330(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF95338(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AF95340);
  return result;
}

uint64_t sub_21AF9534C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AF95354);
  *(_BYTE *)result = a2 + 27;
  return result;
}

uint64_t sub_21AF95358(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF95360(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelType()
{
  return &type metadata for ModelType;
}

unint64_t lazy protocol witness table accessor for type ModelType and conformance ModelType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelType and conformance ModelType;
  if (!lazy protocol witness table cache variable for type ModelType and conformance ModelType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ModelType, &type metadata for ModelType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelType and conformance ModelType);
  }
  return result;
}

uint64_t ModelType.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21AF953F4 + 4 * byte_21AFEFFAA[a1]))(0xD000000000000015, 0x800000021AFF2240);
}

uint64_t sub_21AF953F4()
{
  return 0x65527261656E694CLL;
}

void sub_21AF95568()
{
  OUTLINED_FUNCTION_27_2();
}

void sub_21AF95578()
{
  OUTLINED_FUNCTION_27_2();
}

void sub_21AF95584()
{
  OUTLINED_FUNCTION_27_2();
}

void sub_21AF95594()
{
  OUTLINED_FUNCTION_27_2();
}

void sub_21AF955A4()
{
  OUTLINED_FUNCTION_27_2();
}

void sub_21AF955B0()
{
  JUMPOUT(0x21AF955BCLL);
}

uint64_t sub_21AF955C0()
{
  return OUTLINED_FUNCTION_3_54(0x6147u);
}

uint64_t sub_21AF955D0()
{
  return 0x65626D4564726F57;
}

uint64_t ModelType.nameKey.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21AF9562C + 4 * byte_21AFEFFC6[a1]))(0xD000000000000018, 0x800000021AFF8430);
}

void sub_21AF9562C()
{
  OUTLINED_FUNCTION_27_2();
}

uint64_t sub_21AF957D4()
{
  return OUTLINED_FUNCTION_3_54(0x6167u);
}

uint64_t sub_21AF957E4()
{
  return 0x626D655F64726F77;
}

CreateML::ModelType_optional __swiftcall ModelType.init(nameKey:)(Swift::String nameKey)
{
  void *object;
  uint64_t countAndFlagsBits;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  char v9;

  object = nameKey._object;
  countAndFlagsBits = nameKey._countAndFlagsBits;
  if (nameKey._countAndFlagsBits == 0xD000000000000018
    && (OUTLINED_FUNCTION_1_61((uint64_t)"decision_tree_regression"), v4)
    || (OUTLINED_FUNCTION_48_1() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)2;
  }
  else if (countAndFlagsBits == 0xD000000000000018
         && (OUTLINED_FUNCTION_1_61((uint64_t)"decision_tree_classifier"), v4)
         || (OUTLINED_FUNCTION_48_1() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)3;
  }
  else if (countAndFlagsBits == 0xD000000000000018
         && (OUTLINED_FUNCTION_1_61((uint64_t)"boosted_trees_regression"), v4)
         || (OUTLINED_FUNCTION_48_1() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)4;
  }
  else if (countAndFlagsBits == 0xD000000000000018
         && (OUTLINED_FUNCTION_1_61((uint64_t)"boosted_trees_classifier"), v4)
         || (OUTLINED_FUNCTION_48_1() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)5;
  }
  else if (countAndFlagsBits == 0xD000000000000018
         && (OUTLINED_FUNCTION_1_61((uint64_t)"random_forest_regression"), v4)
         || (OUTLINED_FUNCTION_48_1() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (countAndFlagsBits == 0xD000000000000018
         && (OUTLINED_FUNCTION_1_61((uint64_t)"random_forest_classifier"), v4)
         || (OUTLINED_FUNCTION_48_1() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)1;
  }
  else if (countAndFlagsBits == 0xD00000000000001CLL && (OUTLINED_FUNCTION_2_63(), v4)
         || (OUTLINED_FUNCTION_48_1() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)6;
  }
  else if (countAndFlagsBits == 0xD00000000000001FLL && (OUTLINED_FUNCTION_2_63(), v4)
         || (OUTLINED_FUNCTION_48_1() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)7;
  }
  else if (countAndFlagsBits == 0xD00000000000001ELL && (OUTLINED_FUNCTION_2_63(), v4)
         || (OUTLINED_FUNCTION_48_1() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)8;
  }
  else if (countAndFlagsBits == 0xD000000000000021 && (OUTLINED_FUNCTION_2_63(), v4)
         || (OUTLINED_FUNCTION_48_1() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (CreateML::ModelType_optional)9;
  }
  else
  {
    v4 = countAndFlagsBits == 0x6966697373616C63 && object == (void *)0xEE006D76735F7265;
    if (v4 || (OUTLINED_FUNCTION_48_1() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return (CreateML::ModelType_optional)10;
    }
    else
    {
      v5 = countAndFlagsBits == 0x6D69735F6D657469 && object == (void *)0xEF79746972616C69;
      if (v5 || (OUTLINED_FUNCTION_48_1() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return (CreateML::ModelType_optional)11;
      }
      else if (countAndFlagsBits == 0xD000000000000010 && (OUTLINED_FUNCTION_1_61((uint64_t)"image_classifier"), v4)
             || (OUTLINED_FUNCTION_48_1() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return (CreateML::ModelType_optional)12;
      }
      else if (countAndFlagsBits == 0xD000000000000012 && (OUTLINED_FUNCTION_1_61((uint64_t)"drawing_classifier"), v4)
             || (OUTLINED_FUNCTION_48_1() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return (CreateML::ModelType_optional)13;
      }
      else
      {
        v6 = countAndFlagsBits == 0x72745F656C797473 && object == (void *)0xEE00726566736E61;
        if (v6 || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)14;
        }
        else if (countAndFlagsBits == 0xD000000000000012
               && (OUTLINED_FUNCTION_1_61((uint64_t)"nlp_sequence_model"), v4)
               || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)16;
        }
        else if (countAndFlagsBits == 0xD000000000000014
               && (OUTLINED_FUNCTION_1_61((uint64_t)"nlp_classifier_model"), v4)
               || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)15;
        }
        else if (countAndFlagsBits == 0xD000000000000011 && (OUTLINED_FUNCTION_2_63(), v4)
               || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)17;
        }
        else if (countAndFlagsBits == 0xD000000000000013 && (OUTLINED_FUNCTION_2_63(), v4)
               || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)18;
        }
        else if (countAndFlagsBits == 0xD000000000000010 && (OUTLINED_FUNCTION_1_61((uint64_t)"sound_classifier"), v4)
               || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)19;
        }
        else if (countAndFlagsBits == 0xD000000000000019 && (OUTLINED_FUNCTION_2_63(), v4)
               || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)20;
        }
        else if (countAndFlagsBits == 0xD000000000000017
               && (OUTLINED_FUNCTION_1_61((uint64_t)"human_action_recognizer"), v4)
               || (OUTLINED_FUNCTION_48_1() & 1) != 0
               || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)22;
        }
        else if (countAndFlagsBits == 0xD000000000000014
               && (OUTLINED_FUNCTION_1_61((uint64_t)"hand_pose_classifier"), v4)
               || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)23;
        }
        else if (countAndFlagsBits == 0xD000000000000017
               && (OUTLINED_FUNCTION_1_61((uint64_t)"hand_gesture_classifier"), v4)
               || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)24;
        }
        else if (countAndFlagsBits == 0xD000000000000016 && (OUTLINED_FUNCTION_2_63(), v4)
               || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::ModelType_optional)25;
        }
        else
        {
          v7 = countAndFlagsBits == 0x65657474657A6167 && object == (void *)0xE900000000000072;
          if (v7 || (OUTLINED_FUNCTION_48_1() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return (CreateML::ModelType_optional)26;
          }
          else if (countAndFlagsBits == 0x626D655F64726F77 && object == (void *)0xEE00676E69646465)
          {
            swift_bridgeObjectRelease();
            return (CreateML::ModelType_optional)27;
          }
          else
          {
            v9 = OUTLINED_FUNCTION_48_1();
            swift_bridgeObjectRelease();
            if ((v9 & 1) != 0)
              return (CreateML::ModelType_optional)27;
            else
              return (CreateML::ModelType_optional)28;
          }
        }
      }
    }
  }
}

unint64_t ModelType.playgroundDescription.getter@<X0>(unsigned __int8 a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;

  v3 = ModelType.description.getter(a1);
  v5 = v4;
  v6 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  @nonobjc NSAttributedString.init(string:attributes:)(v3, v5, 0);
  v8 = v7;
  result = type metadata accessor for NSAttributedString();
  a2[3] = result;
  *a2 = v8;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModelType()
{
  unsigned __int8 *v0;

  return ModelType.description.getter(*v0);
}

unint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance ModelType@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  return ModelType.playgroundDescription.getter(*v1, a1);
}

unint64_t OUTLINED_FUNCTION_1_61@<X0>(uint64_t a1@<X8>)
{
  return (a1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_3_54(unsigned __int16 a1)
{
  return a1 | 0x65657474657A0000;
}

void ColumnDescriptor.ColumnTypeDescriptor.featureSize.getter(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_21AF9611C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_21AF9613C()
{
  return sub_21AF9611C();
}

uint64_t sub_21AF96144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v16;
    v3 = (char *)(v0 + 56);
    do
    {
      v4 = *((_QWORD *)v3 - 1);
      v5 = *v3;
      swift_bridgeObjectRetain();
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v4, v5);
      ColumnDescriptor.ColumnTypeDescriptor.featureSize.getter(v4, v5);
      v7 = v6;
      swift_bridgeObjectRelease();
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v4, v5);
      v9 = *(_QWORD *)(v16 + 16);
      v8 = *(_QWORD *)(v16 + 24);
      v10 = v9 + 1;
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v3 += 32;
      *(_QWORD *)(v16 + 16) = v10;
      *(_QWORD *)(v16 + 8 * v9 + 32) = v7;
      --v1;
    }
    while (v1);
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
    v10 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v10)
    {
      swift_bridgeObjectRelease();
      return sub_21AF9611C();
    }
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = *(_QWORD *)(v2 + 8 * v11 + 32);
    v14 = __OFADD__(v12, v13);
    v12 += v13;
    if (v14)
    {
      __break(1u);
      JUMPOUT(0x21AF96260);
    }
    ++v11;
  }
  while (v10 != v11);
  OUTLINED_FUNCTION_123();
  return sub_21AF9611C();
}

void ColumnDescriptor.featureDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_14_5();
  v6 = type metadata accessor for FeatureType();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_91_1();
  __asm { BR              X10 }
}

uint64_t sub_21AF9631C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v1, *MEMORY[0x24BE624C8], v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v4 + 32) = v2;
  OUTLINED_FUNCTION_23_3();
  static FeatureType.shapedArray(dataType:shape:optional:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return FeatureDescription.init(name:type:description:)();
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    v4 = OUTLINED_FUNCTION_35_26();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4, v5, v6);
    v7 = a1 + 32;
    v2 = v12;
    do
    {
      v7 += 8;
      OUTLINED_FUNCTION_60_24();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(key: MLDataValue, value: MLDataValue)]?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(MLDataValue, MLDataValue)]?);
      OUTLINED_FUNCTION_16_0();
      swift_bridgeObjectRelease();
      if ((OUTLINED_FUNCTION_20_12() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v12;
      }
      v9 = *(_QWORD *)(v2 + 16);
      v8 = *(_QWORD *)(v2 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v2 = v12;
      }
      *(_QWORD *)(v2 + 16) = v9 + 1;
      *(_QWORD *)(v2 + 8 * v9 + 32) = v11;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  int64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v17 = MEMORY[0x24BEE4AF8];
    v4 = (char *)OUTLINED_FUNCTION_35_26();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4, v5, v6);
    v2 = v17;
    v7 = (uint64_t *)(a1 + 32);
    v8 = MEMORY[0x24BEE13C8];
    v9 = MEMORY[0x24BEE1408];
    do
    {
      v10 = *v7;
      v17 = v2;
      v12 = *(_QWORD *)(v2 + 16);
      v11 = *(_QWORD *)(v2 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
        v2 = v17;
      }
      v15 = v8;
      v16 = v9;
      *(_QWORD *)&v14 = v10;
      *(_QWORD *)(v2 + 16) = v12 + 1;
      outlined init with take of BinaryFloatingPoint(&v14, v2 + 40 * v12 + 32);
      ++v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_35_26();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v12;
    v4 = a1 + 56;
    do
    {
      OUTLINED_FUNCTION_60_24();
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (text: String, label: String));
      OUTLINED_FUNCTION_16_0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((OUTLINED_FUNCTION_20_12() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v12;
      }
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v12;
      }
      v4 += 32;
      *(_QWORD *)(v2 + 16) = v5 + 1;
      v6 = (_QWORD *)(v2 + 32 * v5);
      v6[4] = v8;
      v6[5] = v9;
      v6[6] = v10;
      v6[7] = v11;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[32];
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v8;
    v4 = a1 + 32;
    do
    {
      outlined init with copy of Any?(v4, (uint64_t)v7);
      v8 = v2;
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      *(_QWORD *)(v2 + 16) = v5 + 1;
      outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      v4 += 32;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[32];
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = a1 + 32;
    v2 = v8;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      *(_QWORD *)(v2 + 16) = v5 + 1;
      outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[32];
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = a1 + 32;
    v2 = v8;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      *(_QWORD *)(v2 + 16) = v5 + 1;
      outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[32];
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = a1 + 32;
    v2 = v8;
    do
    {
      v4 += 4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      *(_QWORD *)(v2 + 16) = v5 + 1;
      outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[32];
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = a1 + 32;
    v2 = v8;
    do
    {
      ++v4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      *(_QWORD *)(v2 + 16) = v5 + 1;
      outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[32];
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = a1 + 32;
    v2 = v8;
    do
    {
      v4 += 8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      *(_QWORD *)(v2 + 16) = v5 + 1;
      outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[32];
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_35_26();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v8;
    v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      OUTLINED_FUNCTION_16_0();
      if ((OUTLINED_FUNCTION_20_12() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      v5 = *(_QWORD *)(v2 + 16);
      if (v5 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v8;
      }
      v4 += 16;
      *(_QWORD *)(v2 + 16) = v5 + 1;
      outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v7, v2 + 32 * v5 + 32, &demangling cache variable for type metadata for Any?);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t ColumnDescriptor.init(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t result;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t);
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, _QWORD);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t, _QWORD);
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(uint64_t, _QWORD);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t, _QWORD);
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, _QWORD);
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t, _QWORD);
  id v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(uint64_t, uint64_t, _QWORD);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t, _QWORD);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t (*v174)(uint64_t, uint64_t, _QWORD);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(uint64_t, _QWORD);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t (*v183)(uint64_t, uint64_t, _QWORD);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t (*v189)(uint64_t, uint64_t, _QWORD);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t (*v195)(uint64_t, uint64_t, _QWORD);
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t (*v201)(uint64_t, uint64_t, _QWORD);
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  Swift::String v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209[2];
  uint64_t v210;
  uint64_t v211;
  uint64_t v212[4];
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD v221[3];
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD v230[2];
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  _BYTE v235[32];
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  Swift::String v241;
  Swift::String v242;
  Swift::String v243;

  OUTLINED_FUNCTION_8_1();
  v239 = v1;
  v240 = v2;
  v229 = v0;
  v4 = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any?]>);
  OUTLINED_FUNCTION_4_26(v5, (uint64_t)&v222);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  OUTLINED_FUNCTION_4_26(v9, (uint64_t)v221);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  OUTLINED_FUNCTION_4_26(v13, (uint64_t)&v217);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int32]>);
  OUTLINED_FUNCTION_4_26(v17, (uint64_t)&v215);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v20);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : UInt8]>);
  OUTLINED_FUNCTION_4_26(v21, (uint64_t)&v213);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v24);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  OUTLINED_FUNCTION_4_26(v25, (uint64_t)v212);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v28);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  OUTLINED_FUNCTION_4_26(v29, (uint64_t)v209);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>??);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v33);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  OUTLINED_FUNCTION_4_26(v34, (uint64_t)&v226);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v36);
  v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v38);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  OUTLINED_FUNCTION_4_26(v39, (uint64_t)v230);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v41);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>??);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v43);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  OUTLINED_FUNCTION_4_26(v44, (uint64_t)&v234);
  v211 = v45;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v47);
  v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v49);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  OUTLINED_FUNCTION_4_26(v50, (uint64_t)&v236);
  v213 = v51;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v52);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v53);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>??);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v54);
  OUTLINED_FUNCTION_64();
  v216 = v55;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>);
  OUTLINED_FUNCTION_4_26(v56, (uint64_t)&v237);
  v215 = v57;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v58);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v59);
  v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v60);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v61);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float16]>);
  v218 = *(_QWORD *)(v62 - 8);
  v219 = v62;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v63);
  OUTLINED_FUNCTION_64();
  v217 = v64;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>??);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v65);
  OUTLINED_FUNCTION_64();
  v223 = v66;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  v221[1] = *(_QWORD *)(v67 - 8);
  v221[2] = v67;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v68);
  OUTLINED_FUNCTION_64();
  v221[0] = v69;
  v220 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v70);
  OUTLINED_FUNCTION_64();
  v222 = v71;
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[UInt8]>);
  v225 = *(_QWORD *)(v72 - 8);
  v226 = v72;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v73);
  OUTLINED_FUNCTION_64();
  v224 = v74;
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int32]>);
  v227 = *(_QWORD *)(v75 - 8);
  v228 = v75;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v76);
  OUTLINED_FUNCTION_49();
  v79 = v78 - v77;
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  v81 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  OUTLINED_FUNCTION_49();
  v84 = v83 - v82;
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v86 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  OUTLINED_FUNCTION_49();
  v89 = v88 - v87;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v90);
  OUTLINED_FUNCTION_49();
  v230[0] = AnyColumn.name.getter();
  v230[1] = v91;
  v231 = v4;
  AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype()
    || OUTLINED_FUNCTION_27_10()
    || OUTLINED_FUNCTION_27_10()
    || OUTLINED_FUNCTION_27_10()
    || OUTLINED_FUNCTION_27_10()
    || OUTLINED_FUNCTION_27_10())
  {
    goto LABEL_4;
  }
  if (OUTLINED_FUNCTION_27_10())
  {
    v94 = v231;
    AnyColumn.assumingType<A>(_:)();
    v232 = 0;
    v233 = 0xE000000000000000;
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata((unint64_t *)&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, MEMORY[0x24BDF5F90]);
    OptionalColumnProtocol.filled(with:)();
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v89, v85);
    specialized Set.init<A>(_:)();
    swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    v96 = v95;
    OUTLINED_FUNCTION_123();
    v232 = v96;
    v97 = v229;
    specialized MutableCollection<>.sort(by:)(&v232);
    if (!v97)
    {
      v98 = OUTLINED_FUNCTION_123_1();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 8))(v94, v98);
      OUTLINED_FUNCTION_123();
      return v230[0];
    }
    goto LABEL_120;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  if (OUTLINED_FUNCTION_18_5())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized Collection.first.getter();
    v100 = v99;
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v84, v80);
    if (!v100)
    {
LABEL_21:
      OUTLINED_FUNCTION_123_1();
      v103 = OUTLINED_FUNCTION_50_25();
      goto LABEL_22;
    }
    if (v100 != 1)
    {
      OUTLINED_FUNCTION_18_37();
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_105;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32]);
  if (OUTLINED_FUNCTION_18_5())
  {
    OUTLINED_FUNCTION_9_57();
    specialized Collection.first.getter();
    v102 = v101;
    (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v79, v228);
    if (!v102)
    {
LABEL_20:
      OUTLINED_FUNCTION_123_1();
      v103 = OUTLINED_FUNCTION_27_4();
LABEL_22:
      v104(v103);
      return v230[0];
    }
    if (v102 != 1)
    {
      OUTLINED_FUNCTION_18_37();
      goto LABEL_20;
    }
    __break(1u);
LABEL_111:
    v204 = OUTLINED_FUNCTION_123_1();
    OUTLINED_FUNCTION_0_72(v204);
    v178 = OUTLINED_FUNCTION_41_26();
    goto LABEL_115;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  if (OUTLINED_FUNCTION_18_5())
  {
    OUTLINED_FUNCTION_3_55();
    specialized Collection.first.getter();
    v106 = v105;
    OUTLINED_FUNCTION_71_15(v225);
    if (v106)
    {
      if (v106 != 1)
      {
        outlined consume of [Double]??(v106);
        goto LABEL_4;
      }
      __break(1u);
LABEL_114:
      v207 = OUTLINED_FUNCTION_123_1();
      OUTLINED_FUNCTION_0_72(v207);
      v178 = OUTLINED_FUNCTION_40_28();
      goto LABEL_115;
    }
LABEL_4:
    v92 = OUTLINED_FUNCTION_123_1();
    OUTLINED_FUNCTION_0_72(v92);
    return v230[0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  if (OUTLINED_FUNCTION_21_41())
  {
    OUTLINED_FUNCTION_9_57();
    OUTLINED_FUNCTION_64_18();
    specialized Collection.first.getter(v107);
    v108 = OUTLINED_FUNCTION_50_25();
    v109(v108);
    v110 = OUTLINED_FUNCTION_77_14();
    if (__swift_getEnumTagSinglePayload(v110, v111, v220) != 1)
    {
      outlined init with take of (key: String, value: MLDataValueConvertible)?(v223, v222, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
      OUTLINED_FUNCTION_22_38();
      if (v112)
      {
        outlined destroy of MLShapedArray<Double>?(v222, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
      }
      else
      {
        MLShapedArray.shape.getter();
        OUTLINED_FUNCTION_10_51();
      }
      OUTLINED_FUNCTION_76_13();
      if (!v115)
        goto LABEL_83;
      goto LABEL_40;
    }
    __break(1u);
    goto LABEL_117;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float16]);
  if (OUTLINED_FUNCTION_18_5())
  {
    OUTLINED_FUNCTION_3_55();
    specialized Collection.first.getter();
    v114 = v113;
    OUTLINED_FUNCTION_71_15(v218);
    if (!v114)
      goto LABEL_4;
    if (v114 != 1)
    {
      OUTLINED_FUNCTION_18_37();
      goto LABEL_4;
    }
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  if (OUTLINED_FUNCTION_21_41())
  {
    OUTLINED_FUNCTION_9_57();
    OUTLINED_FUNCTION_64_18();
    specialized Collection.first.getter(v119);
    v120 = OUTLINED_FUNCTION_50_25();
    OUTLINED_FUNCTION_34_3(v120, v121);
    v122 = OUTLINED_FUNCTION_77_14();
    if (__swift_getEnumTagSinglePayload(v122, v123, v214) == 1)
    {
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    OUTLINED_FUNCTION_38_25(v216, &demangling cache variable for type metadata for MLShapedArray<Float16>?, (uint64_t)&v238);
    OUTLINED_FUNCTION_22_38();
    if (v112)
    {
      OUTLINED_FUNCTION_68_22(&demangling cache variable for type metadata for MLShapedArray<Float16>?, (uint64_t)&v238);
    }
    else
    {
      OUTLINED_FUNCTION_67_20();
      OUTLINED_FUNCTION_10_51();
    }
    OUTLINED_FUNCTION_76_13();
    if (!v115)
      goto LABEL_83;
LABEL_40:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_75_15();
    OUTLINED_FUNCTION_2_42(v116, v117);
    v118 = OUTLINED_FUNCTION_123_1();
    OUTLINED_FUNCTION_0_72(v118);
    OUTLINED_FUNCTION_26_2();
    return swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (OUTLINED_FUNCTION_18_5())
  {
    OUTLINED_FUNCTION_2_64();
    specialized Collection.first.getter();
    v125 = v124;
    v126 = OUTLINED_FUNCTION_51_30();
    OUTLINED_FUNCTION_34_3(v126, v127);
    if (!v125)
      goto LABEL_4;
    if (v125 != 1)
    {
      OUTLINED_FUNCTION_18_37();
      goto LABEL_4;
    }
LABEL_119:
    __break(1u);
LABEL_120:
    result = swift_release();
    __break(1u);
    goto LABEL_121;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  if (OUTLINED_FUNCTION_21_41())
  {
    OUTLINED_FUNCTION_9_57();
    OUTLINED_FUNCTION_64_18();
    specialized Collection.first.getter(v128);
    v129 = OUTLINED_FUNCTION_50_25();
    OUTLINED_FUNCTION_34_3(v129, v130);
    v131 = OUTLINED_FUNCTION_77_14();
    result = __swift_getEnumTagSinglePayload(v131, v132, v210);
    if ((_DWORD)result == 1)
    {
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }
    OUTLINED_FUNCTION_38_25(v212[2], &demangling cache variable for type metadata for MLShapedArray<Float>?, (uint64_t)v235);
    OUTLINED_FUNCTION_22_38();
    if (v112)
    {
      OUTLINED_FUNCTION_68_22(&demangling cache variable for type metadata for MLShapedArray<Float>?, (uint64_t)v235);
    }
    else
    {
      OUTLINED_FUNCTION_67_20();
      OUTLINED_FUNCTION_10_51();
    }
    OUTLINED_FUNCTION_76_13();
    if (v115)
      goto LABEL_40;
    goto LABEL_83;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (OUTLINED_FUNCTION_18_5())
  {
    OUTLINED_FUNCTION_2_64();
    specialized Collection.first.getter();
    v134 = v133;
    v135 = OUTLINED_FUNCTION_51_30();
    result = OUTLINED_FUNCTION_34_3(v135, v136);
    if (v134)
    {
      if (v134 == 1)
      {
LABEL_122:
        __break(1u);
        goto LABEL_123;
      }
      OUTLINED_FUNCTION_18_37();
    }
    goto LABEL_4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  if (OUTLINED_FUNCTION_21_41())
  {
    OUTLINED_FUNCTION_9_57();
    OUTLINED_FUNCTION_64_18();
    specialized Collection.first.getter(v137);
    v138 = OUTLINED_FUNCTION_50_25();
    OUTLINED_FUNCTION_34_3(v138, v139);
    v140 = OUTLINED_FUNCTION_77_14();
    result = __swift_getEnumTagSinglePayload(v140, v141, v208);
    if ((_DWORD)result == 1)
    {
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
    OUTLINED_FUNCTION_38_25(v209[1], &demangling cache variable for type metadata for MLShapedArray<Double>?, (uint64_t)&v227);
    OUTLINED_FUNCTION_22_38();
    if (v112)
    {
      OUTLINED_FUNCTION_68_22(&demangling cache variable for type metadata for MLShapedArray<Double>?, (uint64_t)&v227);
    }
    else
    {
      OUTLINED_FUNCTION_67_20();
      OUTLINED_FUNCTION_10_51();
    }
    OUTLINED_FUNCTION_76_13();
    if (v115)
      goto LABEL_40;
LABEL_83:
    v169 = OUTLINED_FUNCTION_123_1();
    OUTLINED_FUNCTION_0_72(v169);
    OUTLINED_FUNCTION_123();
    return v230[0];
  }
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  if (!OUTLINED_FUNCTION_18_5())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
    if (OUTLINED_FUNCTION_18_5())
    {
      OUTLINED_FUNCTION_2_64();
      OUTLINED_FUNCTION_39_28();
      v154 = OUTLINED_FUNCTION_19_41();
      OUTLINED_FUNCTION_31_34(v154, v155, v156);
      v157 = OUTLINED_FUNCTION_47_30();
      specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v157);
      if (v0)
      {
        OUTLINED_FUNCTION_26_2();
        v158 = OUTLINED_FUNCTION_123_1();
        OUTLINED_FUNCTION_0_72(v158);
        v159 = OUTLINED_FUNCTION_36_32();
        return v160(v159, *(_QWORD *)(v161 - 256));
      }
      v177 = OUTLINED_FUNCTION_123_1();
      OUTLINED_FUNCTION_0_72(v177);
      v178 = OUTLINED_FUNCTION_36_32();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UInt8]);
      if (OUTLINED_FUNCTION_18_5())
      {
        OUTLINED_FUNCTION_2_64();
        OUTLINED_FUNCTION_39_28();
        v172 = OUTLINED_FUNCTION_19_41();
        OUTLINED_FUNCTION_31_34(v172, v173, v174);
        v175 = OUTLINED_FUNCTION_47_30();
        specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v175);
        if (v0)
        {
          OUTLINED_FUNCTION_26_2();
          v176 = OUTLINED_FUNCTION_123_1();
          OUTLINED_FUNCTION_0_72(v176);
          v159 = OUTLINED_FUNCTION_46_25();
          return v160(v159, *(_QWORD *)(v161 - 256));
        }
        v186 = OUTLINED_FUNCTION_123_1();
        OUTLINED_FUNCTION_0_72(v186);
        v178 = OUTLINED_FUNCTION_46_25();
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int32]);
        if (!OUTLINED_FUNCTION_18_5())
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
          if (OUTLINED_FUNCTION_18_5())
          {
            OUTLINED_FUNCTION_2_64();
            OUTLINED_FUNCTION_39_28();
            v187 = OUTLINED_FUNCTION_19_41();
            OUTLINED_FUNCTION_31_34(v187, v188, v189);
            v190 = OUTLINED_FUNCTION_47_30();
            specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v190);
            if (!v0)
            {
LABEL_105:
              v198 = OUTLINED_FUNCTION_123_1();
              OUTLINED_FUNCTION_0_72(v198);
              v178 = OUTLINED_FUNCTION_43_24();
              goto LABEL_115;
            }
            OUTLINED_FUNCTION_26_2();
            v191 = OUTLINED_FUNCTION_123_1();
            OUTLINED_FUNCTION_0_72(v191);
            v159 = OUTLINED_FUNCTION_43_24();
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
            if (OUTLINED_FUNCTION_18_5())
            {
              OUTLINED_FUNCTION_2_64();
              OUTLINED_FUNCTION_39_28();
              v193 = OUTLINED_FUNCTION_19_41();
              OUTLINED_FUNCTION_31_34(v193, v194, v195);
              v196 = OUTLINED_FUNCTION_47_30();
              specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v196);
              if (!v0)
                goto LABEL_111;
              OUTLINED_FUNCTION_26_2();
              v197 = OUTLINED_FUNCTION_123_1();
              OUTLINED_FUNCTION_0_72(v197);
              v159 = OUTLINED_FUNCTION_41_26();
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any?]);
              if (!OUTLINED_FUNCTION_18_5())
              {
                OUTLINED_FUNCTION_26_2();
                v232 = 0;
                v233 = 0xE000000000000000;
                _StringGuts.grow(_:)(45);
                swift_bridgeObjectRelease();
                v242._countAndFlagsBits = OUTLINED_FUNCTION_23_43();
                OUTLINED_FUNCTION_43_2(v242);
                OUTLINED_FUNCTION_123();
                OUTLINED_FUNCTION_75_15();
                v206._countAndFlagsBits = v205 - 16;
                v206._object = (void *)0x800000021AFF8530;
                String.append(_:)(v206);
                AnyColumn.wrappedElementType.getter();
                v243._countAndFlagsBits = _typeName(_:qualified:)();
                OUTLINED_FUNCTION_43_2(v243);
                OUTLINED_FUNCTION_123();
                v163 = 46;
                v164 = 0xE100000000000000;
                goto LABEL_82;
              }
              OUTLINED_FUNCTION_2_64();
              OUTLINED_FUNCTION_39_28();
              v199 = OUTLINED_FUNCTION_19_41();
              OUTLINED_FUNCTION_31_34(v199, v200, v201);
              v202 = OUTLINED_FUNCTION_47_30();
              specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v202);
              if (!v0)
                goto LABEL_114;
              OUTLINED_FUNCTION_26_2();
              v203 = OUTLINED_FUNCTION_123_1();
              OUTLINED_FUNCTION_0_72(v203);
              v159 = OUTLINED_FUNCTION_40_28();
            }
          }
          return v160(v159, *(_QWORD *)(v161 - 256));
        }
        OUTLINED_FUNCTION_2_64();
        OUTLINED_FUNCTION_39_28();
        v181 = OUTLINED_FUNCTION_19_41();
        OUTLINED_FUNCTION_31_34(v181, v182, v183);
        v184 = OUTLINED_FUNCTION_47_30();
        specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v184);
        if (v0)
        {
          OUTLINED_FUNCTION_26_2();
          v185 = OUTLINED_FUNCTION_123_1();
          OUTLINED_FUNCTION_0_72(v185);
          v159 = OUTLINED_FUNCTION_44_28();
          return v160(v159, *(_QWORD *)(v161 - 256));
        }
        v192 = OUTLINED_FUNCTION_123_1();
        OUTLINED_FUNCTION_0_72(v192);
        v178 = OUTLINED_FUNCTION_44_28();
      }
    }
LABEL_115:
    OUTLINED_FUNCTION_34_3(v178, v179);
    return v230[0];
  }
  OUTLINED_FUNCTION_2_64();
  specialized Collection.first.getter();
  v143 = v142;
  v144 = OUTLINED_FUNCTION_51_30();
  result = OUTLINED_FUNCTION_34_3(v144, v145);
  if (!v143)
  {
    OUTLINED_FUNCTION_26_2();
    v232 = 0;
    v233 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v241._countAndFlagsBits = OUTLINED_FUNCTION_23_43();
    OUTLINED_FUNCTION_43_2(v241);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_75_15();
    v163 = v162 - 26;
    v164 = 0x800000021AFF8560;
LABEL_82:
    String.append(_:)(*(Swift::String *)&v163);
    v165 = v232;
    v166 = v233;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v167 = v165;
    *(_QWORD *)(v167 + 8) = v166;
    *(_OWORD *)(v167 + 16) = 0u;
    *(_OWORD *)(v167 + 32) = 0u;
    *(_BYTE *)(v167 + 48) = 1;
    swift_willThrow(0.0);
    v168 = OUTLINED_FUNCTION_123_1();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 8))(v85, v168);
  }
  if (v143 != (void *)1)
  {
    v146 = objc_msgSend(v143, sel_shape);
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v147 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v148 = v229;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(v147);
    v150 = v149;
    OUTLINED_FUNCTION_12_0();
    if (*(_QWORD *)(v150 + 16) <= 1uLL)
    {
      OUTLINED_FUNCTION_123();
      result = ColumnDescriptor.ColumnTypeDescriptor.init(_:)(v143);
      if (!v148)
      {
        if (v170 != -1)
        {
          v180 = OUTLINED_FUNCTION_123_1();
          OUTLINED_FUNCTION_0_72(v180);
          outlined consume of MLMultiArray??(v143);
          return v230[0];
        }
        goto LABEL_125;
      }
      v171 = OUTLINED_FUNCTION_123_1();
      OUTLINED_FUNCTION_0_72(v171);
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_75_15();
      OUTLINED_FUNCTION_2_42(v151, v152);
      v153 = OUTLINED_FUNCTION_123_1();
      OUTLINED_FUNCTION_0_72(v153);
      OUTLINED_FUNCTION_123();
    }
    outlined consume of MLMultiArray??(v143);
    return swift_bridgeObjectRelease();
  }
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
  return result;
}

uint64_t ColumnDescriptor.ColumnTypeDescriptor.featureType.getter(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21AF98294 + 4 * byte_21AFF00B7[a2]))(4);
}

uint64_t sub_21AF98294()
{
  return 5;
}

uint64_t sub_21AF9829C()
{
  return 6;
}

uint64_t sub_21AF982A4()
{
  return 7;
}

uint64_t sub_21AF982AC()
{
  return 8;
}

uint64_t sub_21AF982B4()
{
  return 9;
}

uint64_t sub_21AF982BC@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t ColumnDescriptor.ColumnTypeDescriptor.init(_:)(void *a1)
{
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t result;
  Swift::String v9;
  Swift::String v10;

  v2 = objc_msgSend(a1, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(v3);
  v5 = v4;
  OUTLINED_FUNCTION_12_0();
  if (*(_QWORD *)(v5 + 16) > 1uLL)
  {
    v6 = 0;
LABEL_12:
    swift_bridgeObjectRelease();

    return v6;
  }
  v7 = OUTLINED_FUNCTION_66_21();
  if (v7 == (id)65552)
  {
    if (*(_QWORD *)(v5 + 16))
      goto LABEL_9;
    goto LABEL_11;
  }
  if (v7 == (id)65568)
  {
    if (*(_QWORD *)(v5 + 16))
      goto LABEL_9;
LABEL_11:
    v6 = 1;
    goto LABEL_12;
  }
  if (v7 == (id)131104)
  {
    if (!*(_QWORD *)(v5 + 16))
      goto LABEL_11;
LABEL_9:
    v6 = *(_QWORD *)(v5 + 32);
    goto LABEL_12;
  }
  if (v7 == (id)65600)
  {
    if (!*(_QWORD *)(v5 + 16))
      goto LABEL_11;
    goto LABEL_9;
  }
  _StringGuts.grow(_:)(28);
  v9._object = (void *)0x800000021AFF85E0;
  v9._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v9);
  OUTLINED_FUNCTION_66_21();
  type metadata accessor for MLMultiArrayDataType(0);
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 46;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  char *v17;
  _QWORD *v18;
  uint64_t (*v19)();
  uint64_t (*v20)();
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(_QWORD **, _QWORD);
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  char v46;
  uint64_t v47;
  _BOOL8 v48;
  Swift::Int v49;
  unint64_t v50;
  char v51;
  Swift::Bool v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  void *v72;
  unint64_t v73;
  char v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  char v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  int64_t v86;
  uint64_t v87;
  char v88;
  _QWORD *v89;
  _QWORD *v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;
  Swift::String v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t result;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  void (*v109)(char *, char *, uint64_t);
  char *v110;
  char *v111;
  _QWORD *v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  _QWORD *v118;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : Int]>>);
  v118 = *(_QWORD **)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int]>>>);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v102 - v9;
  v116 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[String : Int]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : Int]>, MEMORY[0x24BDF5F90]);
  v102 = v11;
  v103 = a1;
  OptionalColumnProtocol.filled(with:)();
  swift_bridgeObjectRelease();
  v12 = v118;
  v109 = (void (*)(char *, char *, uint64_t))v118[2];
  v109(v8, v4, v2);
  v13 = v2;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : Int]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : Int]>>, MEMORY[0x24BDF5E58]);
  v15 = v14;
  dispatch thunk of Collection.startIndex.getter();
  v16 = (void (*)(char *, uint64_t))v12[1];
  v110 = v4;
  v108 = v16;
  v16(v4, v2);
  *(_QWORD *)&v8[*(int *)(v5 + 36)] = v116;
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v8, (uint64_t)v10, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int]>>>);
  v17 = &v10[*(int *)(v5 + 36)];
  v18 = *(_QWORD **)v17;
  v111 = v10;
  dispatch thunk of Collection.endIndex.getter();
  if (v18 == v116)
  {
    v19 = 0;
    v20 = 0;
    v21 = (_QWORD *)MEMORY[0x24BEE4B00];
    v22 = (uint64_t)v111;
    goto LABEL_37;
  }
  v23 = v17;
  v20 = 0;
  v19 = 0;
  v24 = v13;
  v21 = (_QWORD *)MEMORY[0x24BEE4B00];
  v106 = v15;
  v107 = v24;
  v105 = v23;
  while (2)
  {
    v25 = (void (*)(_QWORD **, _QWORD))dispatch thunk of Collection.subscript.read();
    v27 = *v26;
    swift_bridgeObjectRetain();
    v25(&v116, 0);
    v28 = v110;
    v109(v110, v111, v24);
    dispatch thunk of Collection.formIndex(after:)();
    v108(v28, v24);
    v29 = 0;
    v30 = *(_QWORD *)(v27 + 64);
    v112 = (_QWORD *)(v27 + 64);
    v31 = 1 << *(_BYTE *)(v27 + 32);
    if (v31 < 64)
      v32 = ~(-1 << v31);
    else
      v32 = -1;
    v33 = v32 & v30;
    v113 = (unint64_t)(v31 + 63) >> 6;
    v114 = v27;
    if (v33)
    {
LABEL_8:
      v115 = (v33 - 1) & v33;
      v118 = v29;
      v34 = __clz(__rbit64(v33)) | ((_QWORD)v29 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v35 = (int64_t)v29 + 1;
      v22 = (uint64_t)v111;
      if (__OFADD__(v29, 1))
        goto LABEL_57;
      if (v35 >= v113)
        break;
      v36 = v112[v35];
      v37 = (int64_t)v29 + 1;
      if (v36)
        goto LABEL_22;
      v37 = (int64_t)v29 + 2;
      if ((uint64_t)v29 + 2 >= v113)
        break;
      v36 = v112[v37];
      if (v36)
        goto LABEL_22;
      v37 = (int64_t)v29 + 3;
      if ((uint64_t)v29 + 3 >= v113)
        break;
      v36 = v112[v37];
      if (v36)
        goto LABEL_22;
      v38 = (uint64_t)v29 + 4;
      if ((uint64_t)v29 + 4 >= v113)
        break;
      v36 = v112[v38];
      if (!v36)
      {
        while (1)
        {
          v37 = v38 + 1;
          if (__OFADD__(v38, 1))
            goto LABEL_58;
          if (v37 >= v113)
            goto LABEL_36;
          v36 = v112[v37];
          ++v38;
          if (v36)
            goto LABEL_22;
        }
      }
      v37 = (int64_t)v29 + 4;
LABEL_22:
      v115 = (v36 - 1) & v36;
      v118 = (_QWORD *)v37;
      v34 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_23:
      v39 = (uint64_t *)(*(_QWORD *)(v114 + 48) + 16 * v34);
      v40 = *v39;
      v41 = v39[1];
      v42 = *(_QWORD *)(*(_QWORD *)(v114 + 56) + 8 * v34);
      swift_bridgeObjectRetain();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(_QWORD *)(v43 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v116 = v21;
      v45 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
      v47 = v21[2];
      v48 = (v46 & 1) == 0;
      v49 = v47 + v48;
      if (__OFADD__(v47, v48))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      v50 = v45;
      v51 = v46;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Int]>);
      v52 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v49);
      v21 = v116;
      if (v52)
      {
        v53 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
        if ((v51 & 1) != (v54 & 1))
          goto LABEL_62;
        v50 = v53;
      }
      swift_bridgeObjectRelease();
      v55 = swift_bridgeObjectRetain();
      if ((v51 & 1) == 0)
      {
        v56 = (*(uint64_t (**)(uint64_t))(v43 + 16))(v55);
        v21[(v50 >> 6) + 8] |= 1 << v50;
        v57 = (uint64_t *)(v21[6] + 16 * v50);
        *v57 = v40;
        v57[1] = v41;
        *(_QWORD *)(v21[7] + 8 * v50) = v56;
        v58 = v21[2];
        v59 = __OFADD__(v58, 1);
        v60 = v58 + 1;
        if (v59)
          goto LABEL_56;
        v21[2] = v60;
        swift_bridgeObjectRetain();
      }
      v61 = v21[7];
      swift_bridgeObjectRelease();
      v62 = *(_QWORD *)(v61 + 8 * v50);
      v63 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v61 + 8 * v50) = v62;
      if ((v63 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v62 + 16) + 1, 1, v62);
        v62 = v66;
        *(_QWORD *)(v61 + 8 * v50) = v66;
      }
      v65 = *(_QWORD *)(v62 + 16);
      v64 = *(_QWORD *)(v62 + 24);
      if (v65 >= v64 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, v62);
        v62 = v67;
        *(_QWORD *)(v61 + 8 * v50) = v67;
      }
      *(_QWORD *)(v62 + 16) = v65 + 1;
      *(_QWORD *)(v62 + 8 * v65 + 32) = v42;
      swift_bridgeObjectRelease();
      v19 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      v20 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      v29 = v118;
      v33 = v115;
      if (v115)
        goto LABEL_8;
    }
LABEL_36:
    swift_release();
    v118 = *(_QWORD **)v105;
    v24 = v107;
    dispatch thunk of Collection.endIndex.getter();
    if (v118 != v116)
      continue;
    break;
  }
LABEL_37:
  outlined destroy of MLShapedArray<Double>?(v22, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int]>>>);
  swift_bridgeObjectRetain_n();
  v68 = (_QWORD *)specialized _copyCollectionToContiguousArray<A>(_:)(v21);
  swift_bridgeObjectRelease();
  v116 = v68;
  v69 = v104;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v116);
  if (v69)
  {
LABEL_63:
    result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v70 = v116;
  if (!v116[2])
  {
    v118 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_53:
    (*(void (**)(uint64_t))(*(_QWORD *)(v102 - 8) + 8))(v103);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
    return (uint64_t)v118;
  }
  if (!v21[2])
  {
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_62:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_63;
  }
  v114 = v116[2];
  v71 = v116[4];
  v72 = (void *)v116[5];
  swift_bridgeObjectRetain_n();
  v115 = v71;
  v73 = specialized __RawDictionaryStorage.find<A>(_:)(v71, (uint64_t)v72);
  if ((v74 & 1) == 0)
    goto LABEL_61;
  v111 = 0;
  v112 = v70;
  v75 = (void **)(v70 + 7);
  v118 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v76 = *(_QWORD *)(v21[7] + 8 * v73);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v77 = specialized _arrayForceCast<A, B>(_:)(v76);
    swift_bridgeObjectRelease();
    v78 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v77);
    if (v79 == -1)
      break;
    v80 = v78;
    v81 = v79;
    v82 = swift_isUniquelyReferenced_nonNull_native();
    v113 = (int64_t)v72;
    if ((v82 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v118 = v89;
    }
    v83 = v118[2];
    if (v83 >= v118[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v118 = v90;
    }
    v84 = v118;
    v118[2] = v83 + 1;
    v85 = &v84[4 * v83];
    v86 = v113;
    v85[4] = v115;
    v85[5] = v86;
    v85[6] = v80;
    *((_BYTE *)v85 + 56) = v81;
    if (v114 == 1)
      goto LABEL_53;
    if (!v21[2])
      goto LABEL_59;
    --v114;
    v87 = (uint64_t)*(v75 - 1);
    v72 = *v75;
    swift_bridgeObjectRetain_n();
    v115 = v87;
    v73 = specialized __RawDictionaryStorage.find<A>(_:)(v87, (uint64_t)v72);
    v75 += 2;
    if ((v88 & 1) == 0)
      goto LABEL_61;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v116 = 0;
  v117 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v91._object = (void *)0x800000021AFF8600;
  v91._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v91);
  v92._countAndFlagsBits = v115;
  v92._object = v72;
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  v93._countAndFlagsBits = 0x6C6F63206E692027;
  v93._object = (void *)0xED000027206E6D75;
  String.append(_:)(v93);
  v95 = v102;
  v94 = v103;
  v96._countAndFlagsBits = Column.name.getter();
  String.append(_:)(v96);
  swift_bridgeObjectRelease();
  v97._countAndFlagsBits = 0xD000000000000028;
  v97._object = (void *)0x800000021AFF8620;
  String.append(_:)(v97);
  v98 = v116;
  v99 = v117;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(_QWORD *)v100 = v98;
  *(_QWORD *)(v100 + 8) = v99;
  *(_OWORD *)(v100 + 16) = 0u;
  *(_OWORD *)(v100 + 32) = 0u;
  *(_BYTE *)(v100 + 48) = 0;
  swift_willThrow(0.0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 8))(v94, v95);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
  return (uint64_t)v118;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  char *v17;
  _QWORD *v18;
  uint64_t (*v19)();
  uint64_t (*v20)();
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(_QWORD **, _QWORD);
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  char v46;
  uint64_t v47;
  _BOOL8 v48;
  Swift::Int v49;
  unint64_t v50;
  char v51;
  Swift::Bool v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  char v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  char v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  int64_t v85;
  uint64_t v86;
  char v87;
  _QWORD *v88;
  _QWORD *v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  uint64_t v93;
  uint64_t v94;
  Swift::String v95;
  Swift::String v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t result;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  void (*v108)(char *, char *, uint64_t);
  char *v109;
  char *v110;
  _QWORD *v111;
  int64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  _QWORD *v117;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : UInt8]>>);
  v117 = *(_QWORD **)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : UInt8]>>>);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v101 - v9;
  v115 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : UInt8]>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[String : UInt8]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : UInt8]>, MEMORY[0x24BDF5F90]);
  v101 = v11;
  v102 = a1;
  OptionalColumnProtocol.filled(with:)();
  swift_bridgeObjectRelease();
  v12 = v117;
  v108 = (void (*)(char *, char *, uint64_t))v117[2];
  v108(v8, v4, v2);
  v13 = v2;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : UInt8]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : UInt8]>>, MEMORY[0x24BDF5E58]);
  v15 = v14;
  dispatch thunk of Collection.startIndex.getter();
  v16 = (void (*)(char *, uint64_t))v12[1];
  v109 = v4;
  v107 = v16;
  v16(v4, v2);
  *(_QWORD *)&v8[*(int *)(v5 + 36)] = v115;
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v8, (uint64_t)v10, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : UInt8]>>>);
  v17 = &v10[*(int *)(v5 + 36)];
  v18 = *(_QWORD **)v17;
  v110 = v10;
  dispatch thunk of Collection.endIndex.getter();
  if (v18 == v115)
  {
    v19 = 0;
    v20 = 0;
    v21 = (_QWORD *)MEMORY[0x24BEE4B00];
    v22 = (uint64_t)v110;
    goto LABEL_37;
  }
  v23 = v17;
  v20 = 0;
  v19 = 0;
  v24 = v13;
  v21 = (_QWORD *)MEMORY[0x24BEE4B00];
  v105 = v15;
  v106 = v24;
  v104 = v23;
  while (2)
  {
    v25 = (void (*)(_QWORD **, _QWORD))dispatch thunk of Collection.subscript.read();
    v27 = *v26;
    swift_bridgeObjectRetain();
    v25(&v115, 0);
    v28 = v109;
    v108(v109, v110, v24);
    dispatch thunk of Collection.formIndex(after:)();
    v107(v28, v24);
    v29 = 0;
    v30 = *(_QWORD *)(v27 + 64);
    v111 = (_QWORD *)(v27 + 64);
    v31 = 1 << *(_BYTE *)(v27 + 32);
    if (v31 < 64)
      v32 = ~(-1 << v31);
    else
      v32 = -1;
    v33 = v32 & v30;
    v112 = (unint64_t)(v31 + 63) >> 6;
    v113 = v27;
    if (v33)
    {
LABEL_8:
      v114 = (v33 - 1) & v33;
      v117 = v29;
      v34 = __clz(__rbit64(v33)) | ((_QWORD)v29 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v35 = (int64_t)v29 + 1;
      v22 = (uint64_t)v110;
      if (__OFADD__(v29, 1))
        goto LABEL_57;
      if (v35 >= v112)
        break;
      v36 = v111[v35];
      v37 = (int64_t)v29 + 1;
      if (v36)
        goto LABEL_22;
      v37 = (int64_t)v29 + 2;
      if ((uint64_t)v29 + 2 >= v112)
        break;
      v36 = v111[v37];
      if (v36)
        goto LABEL_22;
      v37 = (int64_t)v29 + 3;
      if ((uint64_t)v29 + 3 >= v112)
        break;
      v36 = v111[v37];
      if (v36)
        goto LABEL_22;
      v38 = (uint64_t)v29 + 4;
      if ((uint64_t)v29 + 4 >= v112)
        break;
      v36 = v111[v38];
      if (!v36)
      {
        while (1)
        {
          v37 = v38 + 1;
          if (__OFADD__(v38, 1))
            goto LABEL_58;
          if (v37 >= v112)
            goto LABEL_36;
          v36 = v111[v37];
          ++v38;
          if (v36)
            goto LABEL_22;
        }
      }
      v37 = (int64_t)v29 + 4;
LABEL_22:
      v114 = (v36 - 1) & v36;
      v117 = (_QWORD *)v37;
      v34 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_23:
      v39 = (uint64_t *)(*(_QWORD *)(v113 + 48) + 16 * v34);
      v40 = *v39;
      v41 = v39[1];
      v42 = *(_BYTE *)(*(_QWORD *)(v113 + 56) + v34);
      swift_bridgeObjectRetain();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(_QWORD *)(v43 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v115 = v21;
      v45 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
      v47 = v21[2];
      v48 = (v46 & 1) == 0;
      v49 = v47 + v48;
      if (__OFADD__(v47, v48))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      v50 = v45;
      v51 = v46;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [UInt8]>);
      v52 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v49);
      v21 = v115;
      if (v52)
      {
        v53 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
        if ((v51 & 1) != (v54 & 1))
          goto LABEL_62;
        v50 = v53;
      }
      swift_bridgeObjectRelease();
      v55 = swift_bridgeObjectRetain();
      if ((v51 & 1) == 0)
      {
        v56 = (*(uint64_t (**)(uint64_t))(v43 + 16))(v55);
        v21[(v50 >> 6) + 8] |= 1 << v50;
        v57 = (uint64_t *)(v21[6] + 16 * v50);
        *v57 = v40;
        v57[1] = v41;
        *(_QWORD *)(v21[7] + 8 * v50) = v56;
        v58 = v21[2];
        v59 = __OFADD__(v58, 1);
        v60 = v58 + 1;
        if (v59)
          goto LABEL_56;
        v21[2] = v60;
        swift_bridgeObjectRetain();
      }
      v61 = v21[7];
      swift_bridgeObjectRelease();
      v62 = *(_QWORD *)(v61 + 8 * v50);
      v63 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v61 + 8 * v50) = v62;
      if ((v63 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v62 = v65;
        *(_QWORD *)(v61 + 8 * v50) = v65;
      }
      v64 = *(_QWORD *)(v62 + 16);
      if (v64 >= *(_QWORD *)(v62 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v62 = v66;
        *(_QWORD *)(v61 + 8 * v50) = v66;
      }
      *(_QWORD *)(v62 + 16) = v64 + 1;
      *(_BYTE *)(v62 + v64 + 32) = v42;
      swift_bridgeObjectRelease();
      v19 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      v20 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      v29 = v117;
      v33 = v114;
      if (v114)
        goto LABEL_8;
    }
LABEL_36:
    swift_release();
    v117 = *(_QWORD **)v104;
    v24 = v106;
    dispatch thunk of Collection.endIndex.getter();
    if (v117 != v115)
      continue;
    break;
  }
LABEL_37:
  outlined destroy of MLShapedArray<Double>?(v22, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : UInt8]>>>);
  swift_bridgeObjectRetain_n();
  v67 = (_QWORD *)specialized _copyCollectionToContiguousArray<A>(_:)(v21);
  swift_bridgeObjectRelease();
  v115 = v67;
  v68 = v103;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v115);
  if (v68)
  {
LABEL_63:
    result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v69 = v115;
  if (!v115[2])
  {
    v117 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_53:
    (*(void (**)(uint64_t))(*(_QWORD *)(v101 - 8) + 8))(v102);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
    return (uint64_t)v117;
  }
  if (!v21[2])
  {
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_62:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_63;
  }
  v113 = v115[2];
  v70 = v115[4];
  v71 = (void *)v115[5];
  swift_bridgeObjectRetain_n();
  v114 = v70;
  v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, (uint64_t)v71);
  if ((v73 & 1) == 0)
    goto LABEL_61;
  v110 = 0;
  v111 = v69;
  v74 = (void **)(v69 + 7);
  v117 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v75 = *(_QWORD *)(v21[7] + 8 * v72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v76 = specialized _arrayForceCast<A, B>(_:)(v75);
    swift_bridgeObjectRelease();
    v77 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v76);
    if (v78 == -1)
      break;
    v79 = v77;
    v80 = v78;
    v81 = swift_isUniquelyReferenced_nonNull_native();
    v112 = (int64_t)v71;
    if ((v81 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v117 = v88;
    }
    v82 = v117[2];
    if (v82 >= v117[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v117 = v89;
    }
    v83 = v117;
    v117[2] = v82 + 1;
    v84 = &v83[4 * v82];
    v85 = v112;
    v84[4] = v114;
    v84[5] = v85;
    v84[6] = v79;
    *((_BYTE *)v84 + 56) = v80;
    if (v113 == 1)
      goto LABEL_53;
    if (!v21[2])
      goto LABEL_59;
    --v113;
    v86 = (uint64_t)*(v74 - 1);
    v71 = *v74;
    swift_bridgeObjectRetain_n();
    v114 = v86;
    v72 = specialized __RawDictionaryStorage.find<A>(_:)(v86, (uint64_t)v71);
    v74 += 2;
    if ((v87 & 1) == 0)
      goto LABEL_61;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v115 = 0;
  v116 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v90._object = (void *)0x800000021AFF8600;
  v90._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v90);
  v91._countAndFlagsBits = v114;
  v91._object = v71;
  String.append(_:)(v91);
  swift_bridgeObjectRelease();
  v92._countAndFlagsBits = 0x6C6F63206E692027;
  v92._object = (void *)0xED000027206E6D75;
  String.append(_:)(v92);
  v94 = v101;
  v93 = v102;
  v95._countAndFlagsBits = Column.name.getter();
  String.append(_:)(v95);
  swift_bridgeObjectRelease();
  v96._countAndFlagsBits = 0xD000000000000028;
  v96._object = (void *)0x800000021AFF8620;
  String.append(_:)(v96);
  v97 = v115;
  v98 = v116;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(_QWORD *)v99 = v97;
  *(_QWORD *)(v99 + 8) = v98;
  *(_OWORD *)(v99 + 16) = 0u;
  *(_OWORD *)(v99 + 32) = 0u;
  *(_BYTE *)(v99 + 48) = 0;
  swift_willThrow(0.0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 8))(v93, v94);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
  return (uint64_t)v117;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  char *v17;
  _QWORD *v18;
  uint64_t (*v19)();
  uint64_t (*v20)();
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(_QWORD **, _QWORD);
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  char v46;
  uint64_t v47;
  _BOOL8 v48;
  Swift::Int v49;
  unint64_t v50;
  char v51;
  Swift::Bool v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  char v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  char v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  int64_t v85;
  uint64_t v86;
  char v87;
  _QWORD *v88;
  _QWORD *v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  uint64_t v93;
  uint64_t v94;
  Swift::String v95;
  Swift::String v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t result;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  void (*v108)(char *, char *, uint64_t);
  char *v109;
  char *v110;
  _QWORD *v111;
  int64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  _QWORD *v117;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : Int32]>>);
  v117 = *(_QWORD **)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int32]>>>);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v101 - v9;
  v115 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int32]>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[String : Int32]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : Int32]>, MEMORY[0x24BDF5F90]);
  v101 = v11;
  v102 = a1;
  OptionalColumnProtocol.filled(with:)();
  swift_bridgeObjectRelease();
  v12 = v117;
  v108 = (void (*)(char *, char *, uint64_t))v117[2];
  v108(v8, v4, v2);
  v13 = v2;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : Int32]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : Int32]>>, MEMORY[0x24BDF5E58]);
  v15 = v14;
  dispatch thunk of Collection.startIndex.getter();
  v16 = (void (*)(char *, uint64_t))v12[1];
  v109 = v4;
  v107 = v16;
  v16(v4, v2);
  *(_QWORD *)&v8[*(int *)(v5 + 36)] = v115;
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v8, (uint64_t)v10, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int32]>>>);
  v17 = &v10[*(int *)(v5 + 36)];
  v18 = *(_QWORD **)v17;
  v110 = v10;
  dispatch thunk of Collection.endIndex.getter();
  if (v18 == v115)
  {
    v19 = 0;
    v20 = 0;
    v21 = (_QWORD *)MEMORY[0x24BEE4B00];
    v22 = (uint64_t)v110;
    goto LABEL_37;
  }
  v23 = v17;
  v20 = 0;
  v19 = 0;
  v24 = v13;
  v21 = (_QWORD *)MEMORY[0x24BEE4B00];
  v105 = v15;
  v106 = v24;
  v104 = v23;
  while (2)
  {
    v25 = (void (*)(_QWORD **, _QWORD))dispatch thunk of Collection.subscript.read();
    v27 = *v26;
    swift_bridgeObjectRetain();
    v25(&v115, 0);
    v28 = v109;
    v108(v109, v110, v24);
    dispatch thunk of Collection.formIndex(after:)();
    v107(v28, v24);
    v29 = 0;
    v30 = *(_QWORD *)(v27 + 64);
    v111 = (_QWORD *)(v27 + 64);
    v31 = 1 << *(_BYTE *)(v27 + 32);
    if (v31 < 64)
      v32 = ~(-1 << v31);
    else
      v32 = -1;
    v33 = v32 & v30;
    v112 = (unint64_t)(v31 + 63) >> 6;
    v113 = v27;
    if (v33)
    {
LABEL_8:
      v114 = (v33 - 1) & v33;
      v117 = v29;
      v34 = __clz(__rbit64(v33)) | ((_QWORD)v29 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v35 = (int64_t)v29 + 1;
      v22 = (uint64_t)v110;
      if (__OFADD__(v29, 1))
        goto LABEL_57;
      if (v35 >= v112)
        break;
      v36 = v111[v35];
      v37 = (int64_t)v29 + 1;
      if (v36)
        goto LABEL_22;
      v37 = (int64_t)v29 + 2;
      if ((uint64_t)v29 + 2 >= v112)
        break;
      v36 = v111[v37];
      if (v36)
        goto LABEL_22;
      v37 = (int64_t)v29 + 3;
      if ((uint64_t)v29 + 3 >= v112)
        break;
      v36 = v111[v37];
      if (v36)
        goto LABEL_22;
      v38 = (uint64_t)v29 + 4;
      if ((uint64_t)v29 + 4 >= v112)
        break;
      v36 = v111[v38];
      if (!v36)
      {
        while (1)
        {
          v37 = v38 + 1;
          if (__OFADD__(v38, 1))
            goto LABEL_58;
          if (v37 >= v112)
            goto LABEL_36;
          v36 = v111[v37];
          ++v38;
          if (v36)
            goto LABEL_22;
        }
      }
      v37 = (int64_t)v29 + 4;
LABEL_22:
      v114 = (v36 - 1) & v36;
      v117 = (_QWORD *)v37;
      v34 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_23:
      v39 = (uint64_t *)(*(_QWORD *)(v113 + 48) + 16 * v34);
      v40 = *v39;
      v41 = v39[1];
      v42 = *(_DWORD *)(*(_QWORD *)(v113 + 56) + 4 * v34);
      swift_bridgeObjectRetain();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(_QWORD *)(v43 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v115 = v21;
      v45 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
      v47 = v21[2];
      v48 = (v46 & 1) == 0;
      v49 = v47 + v48;
      if (__OFADD__(v47, v48))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      v50 = v45;
      v51 = v46;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Int32]>);
      v52 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v49);
      v21 = v115;
      if (v52)
      {
        v53 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
        if ((v51 & 1) != (v54 & 1))
          goto LABEL_62;
        v50 = v53;
      }
      swift_bridgeObjectRelease();
      v55 = swift_bridgeObjectRetain();
      if ((v51 & 1) == 0)
      {
        v56 = (*(uint64_t (**)(uint64_t))(v43 + 16))(v55);
        v21[(v50 >> 6) + 8] |= 1 << v50;
        v57 = (uint64_t *)(v21[6] + 16 * v50);
        *v57 = v40;
        v57[1] = v41;
        *(_QWORD *)(v21[7] + 8 * v50) = v56;
        v58 = v21[2];
        v59 = __OFADD__(v58, 1);
        v60 = v58 + 1;
        if (v59)
          goto LABEL_56;
        v21[2] = v60;
        swift_bridgeObjectRetain();
      }
      v61 = v21[7];
      swift_bridgeObjectRelease();
      v62 = *(_QWORD *)(v61 + 8 * v50);
      v63 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v61 + 8 * v50) = v62;
      if ((v63 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v62 = v65;
        *(_QWORD *)(v61 + 8 * v50) = v65;
      }
      v64 = *(_QWORD *)(v62 + 16);
      if (v64 >= *(_QWORD *)(v62 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v62 = v66;
        *(_QWORD *)(v61 + 8 * v50) = v66;
      }
      *(_QWORD *)(v62 + 16) = v64 + 1;
      *(_DWORD *)(v62 + 4 * v64 + 32) = v42;
      swift_bridgeObjectRelease();
      v19 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      v20 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      v29 = v117;
      v33 = v114;
      if (v114)
        goto LABEL_8;
    }
LABEL_36:
    swift_release();
    v117 = *(_QWORD **)v104;
    v24 = v106;
    dispatch thunk of Collection.endIndex.getter();
    if (v117 != v115)
      continue;
    break;
  }
LABEL_37:
  outlined destroy of MLShapedArray<Double>?(v22, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Int32]>>>);
  swift_bridgeObjectRetain_n();
  v67 = (_QWORD *)specialized _copyCollectionToContiguousArray<A>(_:)(v21);
  swift_bridgeObjectRelease();
  v115 = v67;
  v68 = v103;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v115);
  if (v68)
  {
LABEL_63:
    result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v69 = v115;
  if (!v115[2])
  {
    v117 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_53:
    (*(void (**)(uint64_t))(*(_QWORD *)(v101 - 8) + 8))(v102);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
    return (uint64_t)v117;
  }
  if (!v21[2])
  {
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_62:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_63;
  }
  v113 = v115[2];
  v70 = v115[4];
  v71 = (void *)v115[5];
  swift_bridgeObjectRetain_n();
  v114 = v70;
  v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, (uint64_t)v71);
  if ((v73 & 1) == 0)
    goto LABEL_61;
  v110 = 0;
  v111 = v69;
  v74 = (void **)(v69 + 7);
  v117 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v75 = *(_QWORD *)(v21[7] + 8 * v72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v76 = specialized _arrayForceCast<A, B>(_:)(v75);
    swift_bridgeObjectRelease();
    v77 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v76);
    if (v78 == -1)
      break;
    v79 = v77;
    v80 = v78;
    v81 = swift_isUniquelyReferenced_nonNull_native();
    v112 = (int64_t)v71;
    if ((v81 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v117 = v88;
    }
    v82 = v117[2];
    if (v82 >= v117[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v117 = v89;
    }
    v83 = v117;
    v117[2] = v82 + 1;
    v84 = &v83[4 * v82];
    v85 = v112;
    v84[4] = v114;
    v84[5] = v85;
    v84[6] = v79;
    *((_BYTE *)v84 + 56) = v80;
    if (v113 == 1)
      goto LABEL_53;
    if (!v21[2])
      goto LABEL_59;
    --v113;
    v86 = (uint64_t)*(v74 - 1);
    v71 = *v74;
    swift_bridgeObjectRetain_n();
    v114 = v86;
    v72 = specialized __RawDictionaryStorage.find<A>(_:)(v86, (uint64_t)v71);
    v74 += 2;
    if ((v87 & 1) == 0)
      goto LABEL_61;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v115 = 0;
  v116 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v90._object = (void *)0x800000021AFF8600;
  v90._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v90);
  v91._countAndFlagsBits = v114;
  v91._object = v71;
  String.append(_:)(v91);
  swift_bridgeObjectRelease();
  v92._countAndFlagsBits = 0x6C6F63206E692027;
  v92._object = (void *)0xED000027206E6D75;
  String.append(_:)(v92);
  v94 = v101;
  v93 = v102;
  v95._countAndFlagsBits = Column.name.getter();
  String.append(_:)(v95);
  swift_bridgeObjectRelease();
  v96._countAndFlagsBits = 0xD000000000000028;
  v96._object = (void *)0x800000021AFF8620;
  String.append(_:)(v96);
  v97 = v115;
  v98 = v116;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(_QWORD *)v99 = v97;
  *(_QWORD *)(v99 + 8) = v98;
  *(_OWORD *)(v99 + 16) = 0u;
  *(_OWORD *)(v99 + 32) = 0u;
  *(_BYTE *)(v99 + 48) = 0;
  swift_willThrow(0.0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 8))(v93, v94);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
  return (uint64_t)v117;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  char *v17;
  _QWORD *v18;
  uint64_t (*v19)();
  void (*v20)(_QWORD *@<X8>);
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(_QWORD **, _QWORD);
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  char v47;
  uint64_t v48;
  _BOOL8 v49;
  Swift::Int v50;
  unint64_t v51;
  char v52;
  Swift::Bool v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  char v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  char v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  char v89;
  _QWORD *v90;
  _QWORD *v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  Swift::String v97;
  Swift::String v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t result;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  void (*v110)(char *, char *, uint64_t);
  char *v111;
  char *v112;
  _QWORD *v113;
  int64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : Double]>>);
  v116 = *(_QWORD **)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Double]>>>);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v103 - v9;
  v117 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[String : Double]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : Double]>, MEMORY[0x24BDF5F90]);
  v103 = v11;
  v104 = a1;
  OptionalColumnProtocol.filled(with:)();
  swift_bridgeObjectRelease();
  v12 = v116;
  v110 = (void (*)(char *, char *, uint64_t))v116[2];
  v110(v8, v4, v2);
  v13 = v2;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : Double]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : Double]>>, MEMORY[0x24BDF5E58]);
  v15 = v14;
  dispatch thunk of Collection.startIndex.getter();
  v16 = (void (*)(char *, uint64_t))v12[1];
  v111 = v4;
  v109 = v16;
  v16(v4, v2);
  *(_QWORD *)&v8[*(int *)(v5 + 36)] = v117;
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v8, (uint64_t)v10, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Double]>>>);
  v17 = &v10[*(int *)(v5 + 36)];
  v18 = *(_QWORD **)v17;
  v112 = v10;
  dispatch thunk of Collection.endIndex.getter();
  if (v18 == v117)
  {
    v19 = 0;
    v20 = 0;
    v21 = (_QWORD *)MEMORY[0x24BEE4B00];
    v22 = (uint64_t)v112;
    goto LABEL_37;
  }
  v23 = v17;
  v20 = 0;
  v19 = 0;
  v24 = v13;
  v21 = (_QWORD *)MEMORY[0x24BEE4B00];
  v107 = v15;
  v108 = v24;
  v106 = v23;
  while (2)
  {
    v25 = (void (*)(_QWORD **, _QWORD))dispatch thunk of Collection.subscript.read();
    v27 = *v26;
    swift_bridgeObjectRetain();
    v25(&v117, 0);
    v28 = v111;
    v110(v111, v112, v24);
    dispatch thunk of Collection.formIndex(after:)();
    v109(v28, v24);
    v29 = 0;
    v30 = *(_QWORD *)(v27 + 64);
    v113 = (_QWORD *)(v27 + 64);
    v31 = 1 << *(_BYTE *)(v27 + 32);
    if (v31 < 64)
      v32 = ~(-1 << v31);
    else
      v32 = -1;
    v33 = v32 & v30;
    v114 = (unint64_t)(v31 + 63) >> 6;
    v115 = v27;
    if ((v32 & v30) != 0)
    {
LABEL_8:
      v34 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v116 = v29;
      v35 = v34 | ((_QWORD)v29 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v36 = (int64_t)v29 + 1;
      v22 = (uint64_t)v112;
      if (__OFADD__(v29, 1))
        goto LABEL_57;
      if (v36 >= v114)
        break;
      v37 = v113[v36];
      v38 = (int64_t)v29 + 1;
      if (v37)
        goto LABEL_22;
      v38 = (int64_t)v29 + 2;
      if ((uint64_t)v29 + 2 >= v114)
        break;
      v37 = v113[v38];
      if (v37)
        goto LABEL_22;
      v38 = (int64_t)v29 + 3;
      if ((uint64_t)v29 + 3 >= v114)
        break;
      v37 = v113[v38];
      if (v37)
        goto LABEL_22;
      v39 = (uint64_t)v29 + 4;
      if ((uint64_t)v29 + 4 >= v114)
        break;
      v37 = v113[v39];
      if (!v37)
      {
        while (1)
        {
          v38 = v39 + 1;
          if (__OFADD__(v39, 1))
            goto LABEL_58;
          if (v38 >= v114)
            goto LABEL_36;
          v37 = v113[v38];
          ++v39;
          if (v37)
            goto LABEL_22;
        }
      }
      v38 = (int64_t)v29 + 4;
LABEL_22:
      v33 = (v37 - 1) & v37;
      v116 = (_QWORD *)v38;
      v35 = __clz(__rbit64(v37)) + (v38 << 6);
LABEL_23:
      v40 = (uint64_t *)(*(_QWORD *)(v115 + 48) + 16 * v35);
      v41 = *v40;
      v42 = v40[1];
      v43 = *(_QWORD *)(*(_QWORD *)(v115 + 56) + 8 * v35);
      swift_bridgeObjectRetain();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      v44 = swift_allocObject();
      *(_QWORD *)(v44 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(_QWORD *)(v44 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v117 = v21;
      v46 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
      v48 = v21[2];
      v49 = (v47 & 1) == 0;
      v50 = v48 + v49;
      if (__OFADD__(v48, v49))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      v51 = v46;
      v52 = v47;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
      v53 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v50);
      v21 = v117;
      if (v53)
      {
        v54 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
        if ((v52 & 1) != (v55 & 1))
          goto LABEL_62;
        v51 = v54;
      }
      swift_bridgeObjectRelease();
      v56 = swift_bridgeObjectRetain();
      if ((v52 & 1) == 0)
      {
        v57 = (*(uint64_t (**)(uint64_t))(v44 + 16))(v56);
        v21[(v51 >> 6) + 8] |= 1 << v51;
        v58 = (uint64_t *)(v21[6] + 16 * v51);
        *v58 = v41;
        v58[1] = v42;
        *(_QWORD *)(v21[7] + 8 * v51) = v57;
        v59 = v21[2];
        v60 = __OFADD__(v59, 1);
        v61 = v59 + 1;
        if (v60)
          goto LABEL_56;
        v21[2] = v61;
        swift_bridgeObjectRetain();
      }
      v62 = v21[7];
      swift_bridgeObjectRelease();
      v63 = *(_QWORD *)(v62 + 8 * v51);
      v64 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v62 + 8 * v51) = v63;
      if ((v64 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v63 = v66;
        *(_QWORD *)(v62 + 8 * v51) = v66;
      }
      v65 = *(_QWORD *)(v63 + 16);
      if (v65 >= *(_QWORD *)(v63 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v63 = v67;
        *(_QWORD *)(v62 + 8 * v51) = v67;
      }
      *(_QWORD *)(v63 + 16) = v65 + 1;
      *(_QWORD *)(v63 + 8 * v65 + 32) = v43;
      swift_bridgeObjectRelease();
      v19 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      v20 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      v29 = v116;
      if (v33)
        goto LABEL_8;
    }
LABEL_36:
    swift_release();
    v116 = *(_QWORD **)v106;
    v24 = v108;
    dispatch thunk of Collection.endIndex.getter();
    if (v116 != v117)
      continue;
    break;
  }
LABEL_37:
  outlined destroy of MLShapedArray<Double>?(v22, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Double]>>>);
  swift_bridgeObjectRetain_n();
  v68 = (_QWORD *)specialized _copyCollectionToContiguousArray<A>(_:)(v21);
  swift_bridgeObjectRelease();
  v117 = v68;
  v69 = v105;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v117);
  if (v69)
  {
LABEL_63:
    result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v70 = v117;
  if (!v117[2])
  {
    v116 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_53:
    (*(void (**)(uint64_t))(*(_QWORD *)(v103 - 8) + 8))(v104);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
    return (uint64_t)v116;
  }
  if (!v21[2])
  {
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_62:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_63;
  }
  v114 = v117[2];
  v71 = v117[4];
  v72 = (_QWORD *)v117[5];
  swift_bridgeObjectRetain_n();
  v115 = v71;
  v73 = specialized __RawDictionaryStorage.find<A>(_:)(v71, (uint64_t)v72);
  if ((v74 & 1) == 0)
    goto LABEL_61;
  v111 = 0;
  v112 = (char *)v70;
  v75 = (void **)(v70 + 7);
  v116 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v76 = *(_QWORD *)(v21[7] + 8 * v73);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v77 = specialized _arrayForceCast<A, B>(_:)(v76);
    swift_bridgeObjectRelease();
    v78 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v77);
    if (v79 == -1)
      break;
    v80 = v78;
    v81 = v79;
    v82 = swift_isUniquelyReferenced_nonNull_native();
    v113 = v72;
    if ((v82 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v116 = v90;
    }
    v83 = v116[2];
    if (v83 >= v116[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v116 = v91;
    }
    v85 = v115;
    v84 = v116;
    v116[2] = v83 + 1;
    v86 = &v84[4 * v83];
    v87 = v113;
    v86[4] = v85;
    v86[5] = v87;
    v86[6] = v80;
    *((_BYTE *)v86 + 56) = v81;
    if (v114 == 1)
      goto LABEL_53;
    if (!v21[2])
      goto LABEL_59;
    --v114;
    v88 = (uint64_t)*(v75 - 1);
    v72 = *v75;
    swift_bridgeObjectRetain_n();
    v115 = v88;
    v73 = specialized __RawDictionaryStorage.find<A>(_:)(v88, (uint64_t)v72);
    v75 += 2;
    if ((v89 & 1) == 0)
      goto LABEL_61;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v117 = 0;
  v118 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v92._object = (void *)0x800000021AFF8600;
  v92._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v92);
  v93._countAndFlagsBits = v115;
  v93._object = v72;
  String.append(_:)(v93);
  swift_bridgeObjectRelease();
  v94._countAndFlagsBits = 0x6C6F63206E692027;
  v94._object = (void *)0xED000027206E6D75;
  String.append(_:)(v94);
  v96 = v103;
  v95 = v104;
  v97._countAndFlagsBits = Column.name.getter();
  String.append(_:)(v97);
  swift_bridgeObjectRelease();
  v98._countAndFlagsBits = 0xD000000000000028;
  v98._object = (void *)0x800000021AFF8620;
  String.append(_:)(v98);
  v99 = v117;
  v100 = v118;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(_QWORD *)v101 = v99;
  *(_QWORD *)(v101 + 8) = v100;
  *(_OWORD *)(v101 + 16) = 0u;
  *(_OWORD *)(v101 + 32) = 0u;
  *(_BYTE *)(v101 + 48) = 0;
  swift_willThrow(0.0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 8))(v95, v96);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
  return (uint64_t)v116;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  char *v17;
  _QWORD *v18;
  uint64_t (*v19)();
  uint64_t (*v20)();
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(_QWORD **, _QWORD);
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  char v47;
  uint64_t v48;
  _BOOL8 v49;
  Swift::Int v50;
  unint64_t v51;
  char v52;
  Swift::Bool v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  char v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  char v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  char v89;
  _QWORD *v90;
  _QWORD *v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  Swift::String v97;
  Swift::String v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t result;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  void (*v110)(char *, char *, uint64_t);
  char *v111;
  char *v112;
  _QWORD *v113;
  int64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : Float]>>);
  v116 = *(_QWORD **)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Float]>>>);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v103 - v9;
  v117 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[String : Float]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : Float]>, MEMORY[0x24BDF5F90]);
  v103 = v11;
  v104 = a1;
  OptionalColumnProtocol.filled(with:)();
  swift_bridgeObjectRelease();
  v12 = v116;
  v110 = (void (*)(char *, char *, uint64_t))v116[2];
  v110(v8, v4, v2);
  v13 = v2;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : Float]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : Float]>>, MEMORY[0x24BDF5E58]);
  v15 = v14;
  dispatch thunk of Collection.startIndex.getter();
  v16 = (void (*)(char *, uint64_t))v12[1];
  v111 = v4;
  v109 = v16;
  v16(v4, v2);
  *(_QWORD *)&v8[*(int *)(v5 + 36)] = v117;
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v8, (uint64_t)v10, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Float]>>>);
  v17 = &v10[*(int *)(v5 + 36)];
  v18 = *(_QWORD **)v17;
  v112 = v10;
  dispatch thunk of Collection.endIndex.getter();
  if (v18 == v117)
  {
    v19 = 0;
    v20 = 0;
    v21 = (_QWORD *)MEMORY[0x24BEE4B00];
    v22 = (uint64_t)v112;
    goto LABEL_37;
  }
  v23 = v17;
  v20 = 0;
  v19 = 0;
  v24 = v13;
  v21 = (_QWORD *)MEMORY[0x24BEE4B00];
  v107 = v15;
  v108 = v24;
  v106 = v23;
  while (2)
  {
    v25 = (void (*)(_QWORD **, _QWORD))dispatch thunk of Collection.subscript.read();
    v27 = *v26;
    swift_bridgeObjectRetain();
    v25(&v117, 0);
    v28 = v111;
    v110(v111, v112, v24);
    dispatch thunk of Collection.formIndex(after:)();
    v109(v28, v24);
    v29 = 0;
    v30 = *(_QWORD *)(v27 + 64);
    v113 = (_QWORD *)(v27 + 64);
    v31 = 1 << *(_BYTE *)(v27 + 32);
    if (v31 < 64)
      v32 = ~(-1 << v31);
    else
      v32 = -1;
    v33 = v32 & v30;
    v114 = (unint64_t)(v31 + 63) >> 6;
    v115 = v27;
    if ((v32 & v30) != 0)
    {
LABEL_8:
      v34 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v116 = v29;
      v35 = v34 | ((_QWORD)v29 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v36 = (int64_t)v29 + 1;
      v22 = (uint64_t)v112;
      if (__OFADD__(v29, 1))
        goto LABEL_57;
      if (v36 >= v114)
        break;
      v37 = v113[v36];
      v38 = (int64_t)v29 + 1;
      if (v37)
        goto LABEL_22;
      v38 = (int64_t)v29 + 2;
      if ((uint64_t)v29 + 2 >= v114)
        break;
      v37 = v113[v38];
      if (v37)
        goto LABEL_22;
      v38 = (int64_t)v29 + 3;
      if ((uint64_t)v29 + 3 >= v114)
        break;
      v37 = v113[v38];
      if (v37)
        goto LABEL_22;
      v39 = (uint64_t)v29 + 4;
      if ((uint64_t)v29 + 4 >= v114)
        break;
      v37 = v113[v39];
      if (!v37)
      {
        while (1)
        {
          v38 = v39 + 1;
          if (__OFADD__(v39, 1))
            goto LABEL_58;
          if (v38 >= v114)
            goto LABEL_36;
          v37 = v113[v38];
          ++v39;
          if (v37)
            goto LABEL_22;
        }
      }
      v38 = (int64_t)v29 + 4;
LABEL_22:
      v33 = (v37 - 1) & v37;
      v116 = (_QWORD *)v38;
      v35 = __clz(__rbit64(v37)) + (v38 << 6);
LABEL_23:
      v40 = (uint64_t *)(*(_QWORD *)(v115 + 48) + 16 * v35);
      v41 = *v40;
      v42 = v40[1];
      v43 = *(_DWORD *)(*(_QWORD *)(v115 + 56) + 4 * v35);
      swift_bridgeObjectRetain();
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      v44 = swift_allocObject();
      *(_QWORD *)(v44 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(_QWORD *)(v44 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v117 = v21;
      v46 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
      v48 = v21[2];
      v49 = (v47 & 1) == 0;
      v50 = v48 + v49;
      if (__OFADD__(v48, v49))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      v51 = v46;
      v52 = v47;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Float]>);
      v53 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v50);
      v21 = v117;
      if (v53)
      {
        v54 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
        if ((v52 & 1) != (v55 & 1))
          goto LABEL_62;
        v51 = v54;
      }
      swift_bridgeObjectRelease();
      v56 = swift_bridgeObjectRetain();
      if ((v52 & 1) == 0)
      {
        v57 = (*(uint64_t (**)(uint64_t))(v44 + 16))(v56);
        v21[(v51 >> 6) + 8] |= 1 << v51;
        v58 = (uint64_t *)(v21[6] + 16 * v51);
        *v58 = v41;
        v58[1] = v42;
        *(_QWORD *)(v21[7] + 8 * v51) = v57;
        v59 = v21[2];
        v60 = __OFADD__(v59, 1);
        v61 = v59 + 1;
        if (v60)
          goto LABEL_56;
        v21[2] = v61;
        swift_bridgeObjectRetain();
      }
      v62 = v21[7];
      swift_bridgeObjectRelease();
      v63 = *(_QWORD *)(v62 + 8 * v51);
      v64 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v62 + 8 * v51) = v63;
      if ((v64 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v63 = v66;
        *(_QWORD *)(v62 + 8 * v51) = v66;
      }
      v65 = *(_QWORD *)(v63 + 16);
      if (v65 >= *(_QWORD *)(v63 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v63 = v67;
        *(_QWORD *)(v62 + 8 * v51) = v67;
      }
      *(_QWORD *)(v63 + 16) = v65 + 1;
      *(_DWORD *)(v63 + 4 * v65 + 32) = v43;
      swift_bridgeObjectRelease();
      v19 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      v20 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      v29 = v116;
      if (v33)
        goto LABEL_8;
    }
LABEL_36:
    swift_release();
    v116 = *(_QWORD **)v106;
    v24 = v108;
    dispatch thunk of Collection.endIndex.getter();
    if (v116 != v117)
      continue;
    break;
  }
LABEL_37:
  outlined destroy of MLShapedArray<Double>?(v22, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Float]>>>);
  swift_bridgeObjectRetain_n();
  v68 = (_QWORD *)specialized _copyCollectionToContiguousArray<A>(_:)(v21);
  swift_bridgeObjectRelease();
  v117 = v68;
  v69 = v105;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v117);
  if (v69)
  {
LABEL_63:
    result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v70 = v117;
  if (!v117[2])
  {
    v116 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_53:
    (*(void (**)(uint64_t))(*(_QWORD *)(v103 - 8) + 8))(v104);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
    return (uint64_t)v116;
  }
  if (!v21[2])
  {
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_62:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_63;
  }
  v114 = v117[2];
  v71 = v117[4];
  v72 = (_QWORD *)v117[5];
  swift_bridgeObjectRetain_n();
  v115 = v71;
  v73 = specialized __RawDictionaryStorage.find<A>(_:)(v71, (uint64_t)v72);
  if ((v74 & 1) == 0)
    goto LABEL_61;
  v111 = 0;
  v112 = (char *)v70;
  v75 = (void **)(v70 + 7);
  v116 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v76 = *(_QWORD *)(v21[7] + 8 * v73);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v77 = specialized _arrayForceCast<A, B>(_:)(v76);
    swift_bridgeObjectRelease();
    v78 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v77);
    if (v79 == -1)
      break;
    v80 = v78;
    v81 = v79;
    v82 = swift_isUniquelyReferenced_nonNull_native();
    v113 = v72;
    if ((v82 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v116 = v90;
    }
    v83 = v116[2];
    if (v83 >= v116[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v116 = v91;
    }
    v85 = v115;
    v84 = v116;
    v116[2] = v83 + 1;
    v86 = &v84[4 * v83];
    v87 = v113;
    v86[4] = v85;
    v86[5] = v87;
    v86[6] = v80;
    *((_BYTE *)v86 + 56) = v81;
    if (v114 == 1)
      goto LABEL_53;
    if (!v21[2])
      goto LABEL_59;
    --v114;
    v88 = (uint64_t)*(v75 - 1);
    v72 = *v75;
    swift_bridgeObjectRetain_n();
    v115 = v88;
    v73 = specialized __RawDictionaryStorage.find<A>(_:)(v88, (uint64_t)v72);
    v75 += 2;
    if ((v89 & 1) == 0)
      goto LABEL_61;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v117 = 0;
  v118 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v92._object = (void *)0x800000021AFF8600;
  v92._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v92);
  v93._countAndFlagsBits = v115;
  v93._object = v72;
  String.append(_:)(v93);
  swift_bridgeObjectRelease();
  v94._countAndFlagsBits = 0x6C6F63206E692027;
  v94._object = (void *)0xED000027206E6D75;
  String.append(_:)(v94);
  v96 = v103;
  v95 = v104;
  v97._countAndFlagsBits = Column.name.getter();
  String.append(_:)(v97);
  swift_bridgeObjectRelease();
  v98._countAndFlagsBits = 0xD000000000000028;
  v98._object = (void *)0x800000021AFF8620;
  String.append(_:)(v98);
  v99 = v117;
  v100 = v118;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(_QWORD *)v101 = v99;
  *(_QWORD *)(v101 + 8) = v100;
  *(_OWORD *)(v101 + 16) = 0u;
  *(_OWORD *)(v101 + 32) = 0u;
  *(_BYTE *)(v101 + 48) = 0;
  swift_willThrow(0.0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 8))(v95, v96);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
  return (uint64_t)v116;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  _QWORD *v17;
  _QWORD *v18;
  uint64_t (*v19)();
  uint64_t (*v20)();
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD **, _QWORD);
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _BOOL8 v50;
  Swift::Int v51;
  unint64_t v52;
  char v53;
  Swift::Bool v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  char v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  char v89;
  _QWORD *v90;
  _QWORD *v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  Swift::String v97;
  Swift::String v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t result;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  void (*v111)(char *, char *, uint64_t);
  char *v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  _OWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  _QWORD *v120;
  _BYTE v121[32];
  __int128 v122;
  _OWORD v123[2];
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;

  v106 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[String : Any?]>>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Any?]>>>);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v103 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v124 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any?]>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[String : Any?]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String : Any?]>, MEMORY[0x24BDF5F90]);
  v104 = v11;
  OptionalColumnProtocol.filled(with:)();
  v12 = (uint64_t)v10;
  swift_bridgeObjectRelease();
  v111 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v111(v8, v4, v1);
  v13 = v1;
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type FilledColumn<Column<[String : Any?]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[String : Any?]>>, MEMORY[0x24BDF5E58]);
  v15 = v14;
  dispatch thunk of Collection.startIndex.getter();
  v16 = *(void (**)(char *, uint64_t))(v2 + 8);
  v112 = v4;
  v110 = v16;
  v16(v4, v1);
  *(_QWORD *)&v8[*(int *)(v5 + 36)] = v124;
  outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v8, v12, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Any?]>>>);
  v17 = (_QWORD *)(v12 + *(int *)(v5 + 36));
  v18 = (_QWORD *)*v17;
  dispatch thunk of Collection.endIndex.getter();
  if (v18 == v124)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_43;
  }
  v23 = v15;
  v21 = 0;
  v20 = 0;
  v19 = 0;
  v116 = v123;
  v118 = &v126;
  v24 = v13;
  v22 = (_QWORD *)MEMORY[0x24BEE4B00];
  v109 = v24;
  v113 = v23;
  v108 = v17;
  do
  {
    v25 = (void (*)(_QWORD **, _QWORD))dispatch thunk of Collection.subscript.read();
    v27 = *v26;
    swift_bridgeObjectRetain();
    v25(&v124, 0);
    v28 = v112;
    v111(v112, (char *)v12, v24);
    dispatch thunk of Collection.formIndex(after:)();
    v110(v28, v24);
    v119 = 0;
    v29 = *(_QWORD *)(v27 + 64);
    v114 = v27 + 64;
    v117 = v27;
    v30 = 1 << *(_BYTE *)(v27 + 32);
    if (v30 < 64)
      v31 = ~(-1 << v30);
    else
      v31 = -1;
    v32 = v31 & v29;
    v115 = (unint64_t)(v30 + 63) >> 6;
    v107 = v115 - 1;
    if ((v31 & v29) != 0)
    {
LABEL_8:
      v33 = __clz(__rbit64(v32));
      v34 = (v32 - 1) & v32;
      v35 = v33 | (v119 << 6);
LABEL_9:
      v36 = *(_QWORD *)(v117 + 56);
      v37 = (_QWORD *)(*(_QWORD *)(v117 + 48) + 16 * v35);
      v38 = v37[1];
      *(_QWORD *)&v122 = *v37;
      *((_QWORD *)&v122 + 1) = v38;
      outlined init with copy of Any?(v36 + 32 * v35, (uint64_t)v116);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    while (1)
    {
      v39 = v119 + 1;
      if (__OFADD__(v119, 1))
        goto LABEL_63;
      if (v39 < v115)
      {
        v40 = *(_QWORD *)(v114 + 8 * v39);
        if (v40)
          goto LABEL_13;
        v41 = v119 + 2;
        ++v119;
        if (v39 + 1 < v115)
        {
          v40 = *(_QWORD *)(v114 + 8 * v41);
          if (v40)
            goto LABEL_16;
          v119 = v39 + 1;
          if (v39 + 2 < v115)
          {
            v40 = *(_QWORD *)(v114 + 8 * (v39 + 2));
            if (v40)
            {
              v39 += 2;
              goto LABEL_13;
            }
            v41 = v39 + 3;
            v119 = v39 + 2;
            if (v39 + 3 < v115)
            {
              v40 = *(_QWORD *)(v114 + 8 * v41);
              if (v40)
              {
LABEL_16:
                v39 = v41;
LABEL_13:
                v34 = (v40 - 1) & v40;
                v35 = __clz(__rbit64(v40)) + (v39 << 6);
                v119 = v39;
                goto LABEL_9;
              }
              while (1)
              {
                v39 = v41 + 1;
                if (__OFADD__(v41, 1))
                  break;
                if (v39 >= v115)
                {
                  v119 = v107;
                  goto LABEL_27;
                }
                v40 = *(_QWORD *)(v114 + 8 * v39);
                ++v41;
                if (v40)
                  goto LABEL_13;
              }
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
              goto LABEL_67;
            }
          }
        }
      }
LABEL_27:
      v34 = 0;
      memset(v123, 0, sizeof(v123));
      v122 = 0u;
LABEL_28:
      outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)&v122, (uint64_t)&v124, &demangling cache variable for type metadata for (key: String, value: Any?)?);
      v42 = v125;
      if (!v125)
        break;
      v120 = (_QWORD *)v34;
      v43 = v12;
      v44 = (uint64_t)v124;
      outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v118, (uint64_t)&v122, &demangling cache variable for type metadata for Any?);
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
      outlined init with copy of Any?((uint64_t)&v122, (uint64_t)v121);
      v45 = swift_allocObject();
      *(_QWORD *)(v45 + 16) = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      *(_QWORD *)(v45 + 24) = 0;
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v127 = v22;
      v47 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v42);
      v49 = v22[2];
      v50 = (v48 & 1) == 0;
      v51 = v49 + v50;
      if (__OFADD__(v49, v50))
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      v52 = v47;
      v53 = v48;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Any?]>);
      v54 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v51);
      v22 = v127;
      if (v54)
      {
        v55 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v42);
        if ((v53 & 1) != (v56 & 1))
          goto LABEL_68;
        v52 = v55;
      }
      swift_bridgeObjectRelease();
      v57 = swift_bridgeObjectRetain();
      if ((v53 & 1) == 0)
      {
        v58 = (*(uint64_t (**)(uint64_t))(v45 + 16))(v57);
        v22[(v52 >> 6) + 8] |= 1 << v52;
        v59 = (uint64_t *)(v22[6] + 16 * v52);
        *v59 = v44;
        v59[1] = v42;
        *(_QWORD *)(v22[7] + 8 * v52) = v58;
        v60 = v22[2];
        v61 = __OFADD__(v60, 1);
        v62 = v60 + 1;
        if (v61)
          goto LABEL_62;
        v22[2] = v62;
        swift_bridgeObjectRetain();
      }
      v63 = v22[7];
      swift_bridgeObjectRelease();
      v64 = *(_QWORD *)(v63 + 8 * v52);
      v65 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v63 + 8 * v52) = v64;
      if ((v65 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v64 = v67;
        *(_QWORD *)(v63 + 8 * v52) = v67;
      }
      v66 = *(_QWORD *)(v64 + 16);
      if (v66 >= *(_QWORD *)(v64 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v64 = v68;
        *(_QWORD *)(v63 + 8 * v52) = v68;
      }
      *(_QWORD *)(v64 + 16) = v66 + 1;
      outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)v121, v64 + 32 * v66 + 32, &demangling cache variable for type metadata for Any?);
      swift_bridgeObjectRelease();
      outlined destroy of MLShapedArray<Double>?((uint64_t)&v122, &demangling cache variable for type metadata for Any?);
      v19 = specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:);
      v20 = partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A]);
      v21 = v45;
      v12 = v43;
      v32 = (unint64_t)v120;
      if (v120)
        goto LABEL_8;
    }
    swift_release();
    v120 = (_QWORD *)*v108;
    v24 = v109;
    dispatch thunk of Collection.endIndex.getter();
  }
  while (v120 != v124);
LABEL_43:
  outlined destroy of MLShapedArray<Double>?(v12, &demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[String : Any?]>>>);
  swift_bridgeObjectRetain_n();
  v69 = (_QWORD *)specialized _copyCollectionToContiguousArray<A>(_:)(v22);
  swift_bridgeObjectRelease();
  v124 = v69;
  v70 = v105;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v124);
  if (v70)
  {
LABEL_69:
    result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v71 = v124;
  v72 = v124[2];
  if (!v72)
  {
    v120 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_59:
    (*(void (**)(uint64_t))(*(_QWORD *)(v104 - 8) + 8))(v106);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
    outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
    return (uint64_t)v120;
  }
  if (!v22[2])
    goto LABEL_66;
  v117 = v21;
  v118 = (uint64_t *)v72;
  v73 = v124[4];
  v74 = (void *)v124[5];
  swift_bridgeObjectRetain_n();
  v75 = specialized __RawDictionaryStorage.find<A>(_:)(v73, (uint64_t)v74);
  if ((v76 & 1) == 0)
  {
LABEL_67:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_68:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_69;
  }
  v119 = v73;
  v115 = 0;
  v116 = v71;
  v77 = (void **)(v71 + 7);
  v120 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v78 = *(_QWORD *)(v22[7] + 8 * v75);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v79 = specialized _arrayForceCast<A, B>(_:)(v78);
    swift_bridgeObjectRelease();
    v80 = specialized ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)(v79);
    if (v81 == -1)
      break;
    v82 = v80;
    v83 = v81;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v120 = v90;
    }
    v84 = v120[2];
    if (v84 >= v120[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v120 = v91;
    }
    v86 = v119;
    v85 = v120;
    v120[2] = v84 + 1;
    v87 = &v85[4 * v84];
    v87[4] = v86;
    v87[5] = v74;
    v87[6] = v82;
    *((_BYTE *)v87 + 56) = v83;
    if (v118 == (uint64_t *)1)
      goto LABEL_59;
    if (!v22[2])
      goto LABEL_64;
    v118 = (uint64_t *)((char *)v118 - 1);
    v88 = (uint64_t)*(v77 - 1);
    v74 = *v77;
    swift_bridgeObjectRetain_n();
    v119 = v88;
    v75 = specialized __RawDictionaryStorage.find<A>(_:)(v88, (uint64_t)v74);
    v77 += 2;
    if ((v89 & 1) == 0)
      goto LABEL_67;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v124 = 0;
  v125 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v92._object = (void *)0x800000021AFF8600;
  v92._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v92);
  v93._countAndFlagsBits = v119;
  v93._object = v74;
  String.append(_:)(v93);
  swift_bridgeObjectRelease();
  v94._countAndFlagsBits = 0x6C6F63206E692027;
  v94._object = (void *)0xED000027206E6D75;
  String.append(_:)(v94);
  v95 = v104;
  v96 = v106;
  v97._countAndFlagsBits = Column.name.getter();
  String.append(_:)(v97);
  swift_bridgeObjectRelease();
  v98._countAndFlagsBits = 0xD000000000000028;
  v98._object = (void *)0x800000021AFF8620;
  String.append(_:)(v98);
  v99 = v124;
  v100 = v125;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(_QWORD *)v101 = v99;
  *(_QWORD *)(v101 + 8) = v100;
  *(_OWORD *)(v101 + 16) = 0u;
  *(_OWORD *)(v101 + 32) = 0u;
  *(_BYTE *)(v101 + 48) = 0;
  swift_willThrow(0.0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 8))(v96, v95);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v19);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v20);
  return (uint64_t)v120;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t DynamicType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34[3];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = a1 + 32;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x24BEE4AF8];
    v5 = v2;
    do
    {
      outlined init with copy of Any?(v3, (uint64_t)&v36);
      outlined init with take of (key: String, value: MLDataValueConvertible)?((uint64_t)&v36, (uint64_t)&v32, &demangling cache variable for type metadata for Any?);
      if (v33)
      {
        outlined init with take of Any(&v32, v34);
        outlined init with take of Any(v34, &v32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v4 = v7;
        }
        v6 = *(_QWORD *)(v4 + 16);
        if (v6 >= *(_QWORD *)(v4 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v4 = v8;
        }
        *(_QWORD *)(v4 + 16) = v6 + 1;
        outlined init with take of Any(&v32, (_OWORD *)(v4 + 32 * v6 + 32));
      }
      else
      {
        outlined destroy of MLShapedArray<Double>?((uint64_t)&v32, &demangling cache variable for type metadata for Any?);
      }
      v3 += 32;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = MEMORY[0x24BEE4AF8];
  }
  specialized Collection.first.getter(v4, v34);
  swift_bridgeObjectRelease();
  if (!v35)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MLShapedArray<Double>?((uint64_t)v34, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  outlined init with take of Any(v34, &v36);
  __swift_project_boxed_opaque_existential_1(&v36, v37);
  DynamicType = swift_getDynamicType();
  if (!v2)
  {
LABEL_23:
    if (swift_dynamicCastMetatype())
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
      return 0;
    }
    if (swift_dynamicCastMetatype())
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
      return 2;
    }
    if (swift_dynamicCastMetatype())
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
      return 1;
    }
    if (swift_dynamicCastMetatype()
      || (type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber), swift_dynamicCastMetatype()))
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
      return 3;
    }
    if (swift_dynamicCastMetatype())
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = MEMORY[0x24BEE4AF8];
      if (v15)
      {
        v29 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v17 = a1 + 32;
        do
        {
          outlined init with copy of Any?(v17, (uint64_t)v34);
          outlined init with copy of Any?((uint64_t)v34, (uint64_t)&v30);
          if (v31)
          {
            outlined init with take of Any(&v30, &v32);
            swift_dynamicCast();
            v18 = v27;
            v19 = v28;
          }
          else
          {
            outlined destroy of MLShapedArray<Double>?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
            v18 = 0;
            v19 = 0xE000000000000000;
          }
          outlined destroy of MLShapedArray<Double>?((uint64_t)v34, &demangling cache variable for type metadata for Any?);
          v16 = v29;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v16 = v29;
          }
          v20 = *(_QWORD *)(v16 + 16);
          v21 = v20 + 1;
          if (v20 >= *(_QWORD *)(v16 + 24) >> 1)
          {
            v25 = *(_QWORD *)(v16 + 16);
            v26 = v20 + 1;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v20 = v25;
            v21 = v26;
            v16 = v29;
          }
          *(_QWORD *)(v16 + 16) = v21;
          v22 = v16 + 16 * v20;
          *(_QWORD *)(v22 + 32) = v18;
          *(_QWORD *)(v22 + 40) = v19;
          v17 += 32;
          --v15;
        }
        while (v15);
      }
      specialized Set.init<A>(_:)(v16);
      swift_bridgeObjectRetain();
      specialized _copyCollectionToContiguousArray<A>(_:)();
      v24 = v23;
      swift_bridgeObjectRelease();
      v34[0] = v24;
      specialized MutableCollection<>.sort(by:)(v34);
      swift_bridgeObjectRelease();
      v13 = v34[0];
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
      swift_bridgeObjectRelease();
      return v13;
    }
    swift_bridgeObjectRelease();
LABEL_28:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v36);
    return 0;
  }
  v10 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of Any?(v10, (uint64_t)v34);
    v11 = v35;
    outlined init with copy of Any?((uint64_t)v34, (uint64_t)&v32);
    if (v11)
      break;
    outlined destroy of MLShapedArray<Double>?((uint64_t)&v32, &demangling cache variable for type metadata for Any?);
    outlined destroy of MLShapedArray<Double>?((uint64_t)v34, &demangling cache variable for type metadata for Any?);
LABEL_21:
    v10 += 32;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
  outlined init with copy of Any?((uint64_t)&v32, (uint64_t)&v30);
  if (v31)
  {
    __swift_project_boxed_opaque_existential_1(&v30, v31);
    v12 = swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v30);
    outlined destroy of MLShapedArray<Double>?((uint64_t)&v32, &demangling cache variable for type metadata for Any?);
    outlined destroy of MLShapedArray<Double>?((uint64_t)v34, &demangling cache variable for type metadata for Any?);
    if (v12 != DynamicType)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t static ColumnDescriptor.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  BOOL v8;

  v8 = a1 == a5 && a2 == a6;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return static ColumnDescriptor.ColumnTypeDescriptor.== infix(_:_:)(a3, a4);
  else
    return 0;
}

uint64_t ColumnDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6373654465707974 && a2 == 0xEE00726F74706972)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t ColumnDescriptor.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6373654465707974;
  else
    return 1701667182;
}

void ColumnDescriptor.encode(to:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_8_1();
  v2 = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ColumnDescriptor.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_91_1();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  OUTLINED_FUNCTION_24_22(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_7();
}

uint64_t ColumnDescriptor.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ColumnDescriptor.CodingKeys>);
  OUTLINED_FUNCTION_63_19();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    v8 = KeyedDecodingContainer.decode(_:forKey:)();
    lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_12_7(v7, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v10, v11);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    OUTLINED_FUNCTION_104();
    outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v10, v11);
  }
  return v8;
}

uint64_t static ColumnDescriptor.ColumnTypeDescriptor.== infix(_:_:)(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_21AF9C488 + 4 * byte_21AFF00BE[a2]))();
}

BOOL sub_21AF9C488(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return !a4 && a1 == a3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ColumnDescriptor.CodingKeys()
{
  char *v0;

  return ColumnDescriptor.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ColumnDescriptor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ColumnDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ColumnDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ColumnDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ColumnDescriptor@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = ColumnDescriptor.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance ColumnDescriptor()
{
  ColumnDescriptor.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ColumnDescriptor(uint64_t a1, uint64_t *a2)
{
  return static ColumnDescriptor.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *a2, a2[1]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1)
{
  return static ColumnDescriptor.ColumnTypeDescriptor.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t specialized implicit closure #1 in ColumnDescriptor.ColumnTypeDescriptor.init<A>(_:)()
{
  return MEMORY[0x24BEE4AF8];
}

CreateML::ColumnDescriptor::FeatureType_optional __swiftcall ColumnDescriptor.FeatureType.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ColumnDescriptor.FeatureType.init(rawValue:), v2);
  OUTLINED_FUNCTION_123();
  if (v3 >= 0xA)
    return (CreateML::ColumnDescriptor::FeatureType_optional)10;
  else
    return (CreateML::ColumnDescriptor::FeatureType_optional)v3;
}

uint64_t ColumnDescriptor.FeatureType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21AF9CC14 + 4 * byte_21AFF00C9[a1]))(7630441, 0xE300000000000000);
}

uint64_t sub_21AF9CC14()
{
  return 0x363174616F6C66;
}

uint64_t sub_21AF9CC2C()
{
  return 0x74616F6C66;
}

uint64_t sub_21AF9CC40()
{
  return 0x656C62756F64;
}

uint64_t sub_21AF9CC54()
{
  return 0x6570616853746E69;
}

unint64_t sub_21AF9CC78()
{
  return 0xD000000000000012;
}

unint64_t sub_21AF9CCA0()
{
  return 0xD000000000000011;
}

uint64_t sub_21AF9CCC0()
{
  return OUTLINED_FUNCTION_27_45();
}

uint64_t sub_21AF9CCD0()
{
  return 0x616E6F6974636964;
}

CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional __swiftcall ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.init(rawValue:), v2);
  OUTLINED_FUNCTION_123();
  if (v3 >= 4)
    return (CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional)4;
  else
    return (CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional)v3;
}

uint64_t ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.rawValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = OUTLINED_FUNCTION_48_26();
  return ((uint64_t (*)(uint64_t))((char *)j__OUTLINED_FUNCTION_52_21 + 4 * byte_21AFF00D3[v1]))(v0);
}

uint64_t sub_21AF9CD5C()
{
  return OUTLINED_FUNCTION_27_45();
}

uint64_t sub_21AF9CD68()
{
  return 0x7470697263736564;
}

uint64_t ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.stringValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = OUTLINED_FUNCTION_48_26();
  return ((uint64_t (*)(uint64_t))((char *)j__OUTLINED_FUNCTION_52_21_0 + 4 * byte_21AFF00D7[v1]))(v0);
}

uint64_t sub_21AF9CDB0()
{
  return OUTLINED_FUNCTION_27_45();
}

uint64_t sub_21AF9CDBC()
{
  return 0x7470697263736564;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ColumnDescriptor.FeatureType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ColumnDescriptor.FeatureType()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ColumnDescriptor.FeatureType(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ColumnDescriptor.FeatureType()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

CreateML::ColumnDescriptor::FeatureType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ColumnDescriptor.FeatureType@<W0>(Swift::String *a1@<X0>, CreateML::ColumnDescriptor::FeatureType_optional *a2@<X8>)
{
  CreateML::ColumnDescriptor::FeatureType_optional result;

  result.value = ColumnDescriptor.FeatureType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ColumnDescriptor.FeatureType(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = ColumnDescriptor.FeatureType.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ColumnDescriptor.FeatureType()
{
  lazy protocol witness table accessor for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ColumnDescriptor.FeatureType()
{
  lazy protocol witness table accessor for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
  specialized RawRepresentable<>.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys@<W0>(Swift::String *a1@<X0>, CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional *a2@<X8>)
{
  CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional result;

  result.value = ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
  return ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.stringValue.getter();
}

CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys@<W0>(uint64_t a1@<X0>, CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional *a2@<X8>)
{
  CreateML::ColumnDescriptor::ColumnTypeDescriptor::CodingKeys_optional result;

  result.value = ColumnDescriptor.ColumnTypeDescriptor.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys();
  return CodingKey.debugDescription.getter();
}

_QWORD *ColumnDescriptor.ColumnTypeDescriptor.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ColumnDescriptor.ColumnTypeDescriptor.CodingKeys>);
  OUTLINED_FUNCTION_63_19();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_14_5();
  v4 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __asm { BR              X10 }
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v4;
}

void sub_21AF9D0F8()
{
  uint64_t v0;

  OUTLINED_FUNCTION_6_64();
  __swift_destroy_boxed_opaque_existential_0(v0);
  JUMPOUT(0x21AF9D0B4);
}

void ColumnDescriptor.ColumnTypeDescriptor.encode(to:)()
{
  uint64_t v0;
  unsigned __int8 v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_8_1();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ColumnDescriptor.ColumnTypeDescriptor.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_91_1();
  __swift_project_boxed_opaque_existential_1(v6, v6[3]);
  lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  ColumnDescriptor.ColumnTypeDescriptor.featureType.getter(v4, v2);
  lazy protocol witness table accessor for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType();
  OUTLINED_FUNCTION_32_11();
  if (!v0)
    __asm { BR              X10 }
  OUTLINED_FUNCTION_24_22(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  OUTLINED_FUNCTION_7();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance ColumnDescriptor.ColumnTypeDescriptor@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  char v5;

  result = ColumnDescriptor.ColumnTypeDescriptor.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance ColumnDescriptor.ColumnTypeDescriptor()
{
  ColumnDescriptor.ColumnTypeDescriptor.encode(to:)();
}

void outlined consume of MLMultiArray??(id a1)
{
  if (a1 != (id)1)

}

uint64_t outlined consume of [Double]??(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)()
{
  char *v0;
  char *v1;
  unint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v14;
  char *v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;

  OUTLINED_FUNCTION_8_1();
  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = v0;
  v8 = v1 - v0;
  v9 = (v1 - v0) / 16;
  v10 = v2 - (_QWORD)v1;
  v11 = (uint64_t)(v2 - (_QWORD)v1) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v1, (uint64_t)(v2 - (_QWORD)v1) / 16, v3);
    v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v18 = (char *)(v5 - 16);
    while (1)
    {
      v19 = v18 + 16;
      v20 = (char *)(v12 - 16);
      v21 = *(_QWORD *)(v12 - 16) == *((_QWORD *)v6 - 2) && *(_QWORD *)(v12 - 8) == *((_QWORD *)v6 - 1);
      if (v21 || (OUTLINED_FUNCTION_34_31() & 1) == 0)
      {
        v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23)
          goto LABEL_43;
      }
      else
      {
        v22 = v19 != v6 || v18 >= v6;
        v20 = v6 - 16;
        v6 -= 16;
        if (!v22)
          goto LABEL_43;
      }
      *(_OWORD *)v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_47;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v0, (v1 - v0) / 16, v3);
  v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < v5 && v8 >= 16)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
      if (!v14 && (OUTLINED_FUNCTION_34_31() & 1) != 0)
        break;
      v15 = v4;
      v14 = v7 == v4;
      v4 += 16;
      if (!v14)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= v5)
        goto LABEL_21;
    }
    v15 = v6;
    v14 = v7 == v6;
    v6 += 16;
    if (v14)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - (_QWORD)v4) / 16, v6);
  return 1;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()()
{
  char *v0;
  int64_t v1;
  char v2;
  char *v3;

  v0 = (char *)OUTLINED_FUNCTION_11_25();
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v0 = OUTLINED_FUNCTION_11_25();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

{
  OUTLINED_FUNCTION_11_25();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_11_25();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_11_25();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v0 = OUTLINED_FUNCTION_11_25();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

{
  OUTLINED_FUNCTION_11_25();
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void partial apply for specialized thunk for @callee_guaranteed () -> (@owned [A])(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = (*(uint64_t (**)(void))(v1 + 16))();
  OUTLINED_FUNCTION_22();
}

void outlined destroy of MLShapedArray<Double>?(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(a2);
  v2 = OUTLINED_FUNCTION_27_4();
  v3(v2);
  OUTLINED_FUNCTION_22();
}

unint64_t lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys, &type metadata for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys, &type metadata for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys, &type metadata for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys, &type metadata for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor.CodingKeys and conformance ColumnDescriptor.ColumnTypeDescriptor.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.FeatureType, &type metadata for ColumnDescriptor.FeatureType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.FeatureType, &type metadata for ColumnDescriptor.FeatureType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.FeatureType, &type metadata for ColumnDescriptor.FeatureType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.FeatureType, &type metadata for ColumnDescriptor.FeatureType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.FeatureType and conformance ColumnDescriptor.FeatureType);
  }
  return result;
}

void _sSay8CreateML16ColumnDescriptorVGSayxGSesSeRzlWlTm_0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!*a1)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ColumnDescriptor]);
    v7 = a2();
    atomic_store(MEMORY[0x22075B938](a3, v6, &v7), a1);
  }
  OUTLINED_FUNCTION_27_0();
}

void lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!*a1)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v7 = a2;
    atomic_store(MEMORY[0x22075B938](a3, v6, &v7), a1);
  }
  OUTLINED_FUNCTION_27_0();
}

uint64_t getEnumTagSinglePayload for ColumnDescriptor.FeatureType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 9) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v5 = v6 - 10;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ColumnDescriptor.FeatureType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_21AF9E16C + 4 * byte_21AFF00F1[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_21AF9E1A0 + 4 * byte_21AFF00EC[v4]))();
}

uint64_t sub_21AF9E1A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF9E1A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AF9E1B0);
  return result;
}

uint64_t sub_21AF9E1BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AF9E1C4);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_21AF9E1C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF9E1D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ColumnDescriptor.FeatureType()
{
  OUTLINED_FUNCTION_25_17();
}

uint64_t storeEnumTagSinglePayload for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21AF9E234 + 4 * byte_21AFF00FB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21AF9E268 + 4 * byte_21AFF00F6[v4]))();
}

uint64_t sub_21AF9E268(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF9E270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AF9E278);
  return result;
}

uint64_t sub_21AF9E284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AF9E28CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21AF9E290(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF9E298(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ColumnDescriptor.ColumnTypeDescriptor.CodingKeys()
{
  OUTLINED_FUNCTION_25_17();
}

uint64_t initializeBufferWithCopyOfBuffer for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ColumnDescriptor.ColumnTypeDescriptor(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1)
{
  return outlined consume of ColumnDescriptor.ColumnTypeDescriptor(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ColumnDescriptor.ColumnTypeDescriptor(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v5, v6);
  return a1;
}

uint64_t assignWithTake for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFA && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 249;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 6)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColumnDescriptor.ColumnTypeDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 5u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t destructiveInjectEnumTag for ColumnDescriptor.ColumnTypeDescriptor(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void type metadata accessor for ColumnDescriptor.ColumnTypeDescriptor()
{
  OUTLINED_FUNCTION_25_17();
}

uint64_t destroy for ColumnDescriptor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return outlined consume of ColumnDescriptor.ColumnTypeDescriptor(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for ColumnDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v4, v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return a1;
}

uint64_t assignWithCopy for ColumnDescriptor(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v4, (char)v2);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = (_BYTE)v2;
  outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v5, v6);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ColumnDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColumnDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColumnDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ColumnDescriptor()
{
  OUTLINED_FUNCTION_25_17();
}

unint64_t lazy protocol witness table accessor for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.CodingKeys, &unk_24DE25840);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.CodingKeys, &unk_24DE25840);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.CodingKeys, &unk_24DE25840);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.CodingKeys, &unk_24DE25840);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.CodingKeys and conformance ColumnDescriptor.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.ColumnTypeDescriptor, &type metadata for ColumnDescriptor.ColumnTypeDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor;
  if (!lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for ColumnDescriptor.ColumnTypeDescriptor, &type metadata for ColumnDescriptor.ColumnTypeDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnDescriptor.ColumnTypeDescriptor and conformance ColumnDescriptor.ColumnTypeDescriptor);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ColumnDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21AF9E870 + 4 * byte_21AFF0105[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21AF9E8A4 + 4 * byte_21AFF0100[v4]))();
}

uint64_t sub_21AF9E8A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF9E8AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AF9E8B4);
  return result;
}

uint64_t sub_21AF9E8C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AF9E8C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21AF9E8CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AF9E8D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ColumnDescriptor.CodingKeys()
{
  return &unk_24DE25840;
}

uint64_t OUTLINED_FUNCTION_0_72(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(*(_QWORD *)(v1 - 112), a1);
}

uint64_t OUTLINED_FUNCTION_2_64()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_3_55()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_6_64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_7_59()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_9_57()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_10_51()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_14_52()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_18_37()
{
  uint64_t v0;

  return outlined consume of [Double]??(v0);
}

uint64_t OUTLINED_FUNCTION_19_41()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 256);
}

uint64_t OUTLINED_FUNCTION_21_41()
{
  return swift_dynamicCastMetatype();
}

uint64_t OUTLINED_FUNCTION_22_38()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_23_43()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 0x206E6D756C6F43;
  *(_QWORD *)(v0 - 96) = 0xE700000000000000;
  return AnyColumn.name.getter();
}

uint64_t OUTLINED_FUNCTION_25_40()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_27_45()
{
  return 0x69726F6765746163;
}

uint64_t OUTLINED_FUNCTION_31_34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

uint64_t OUTLINED_FUNCTION_34_31()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_35_26()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_36_32()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 616);
}

void OUTLINED_FUNCTION_38_25(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  outlined init with take of (key: String, value: MLDataValueConvertible)?(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t OUTLINED_FUNCTION_40_28()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 464);
}

uint64_t OUTLINED_FUNCTION_41_26()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 488);
}

uint64_t OUTLINED_FUNCTION_43_24()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 520);
}

uint64_t OUTLINED_FUNCTION_44_28()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 552);
}

uint64_t OUTLINED_FUNCTION_46_25()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 584);
}

uint64_t OUTLINED_FUNCTION_47_30()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_48_26()
{
  return 0x54746E656D656C65;
}

uint64_t OUTLINED_FUNCTION_50_25()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_51_30()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_52_21()
{
  return 1702521203;
}

uint64_t OUTLINED_FUNCTION_60_24()
{
  return swift_bridgeObjectRetain_n();
}

id OUTLINED_FUNCTION_66_21()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 968));
}

uint64_t OUTLINED_FUNCTION_67_20()
{
  return MLShapedArray.shape.getter();
}

void OUTLINED_FUNCTION_68_22(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  outlined destroy of MLShapedArray<Double>?(*(_QWORD *)(a2 - 256), a1);
}

char *OUTLINED_FUNCTION_70_20(char *a1, int64_t a2)
{
  char *v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_71_15@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_73_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(_QWORD *)(a13 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_77_14()
{
  uint64_t v0;

  return v0;
}

void MLSoundClassifier.Model.export(internalMetadata:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a2;
  v5 = type metadata accessor for ModelKind();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_6();
  v7 = OUTLINED_FUNCTION_12_49();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_208();
  v27 = v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v20 - v11;
  MLSoundClassifier.Model.createFeatureExtractorModel(internalMetadata:)((uint64_t)a1, (uint64_t)&v20 - v11);
  if (!v3)
  {
    v23 = v12;
    v24 = v8;
    v20 = v2;
    v21 = v6;
    v25 = v7;
    v22 = v5;
    v13 = v27;
    MLSoundClassifier.Model.createClassifierModel(internalMetadata:)(a1, v27);
    v14 = v23;
    Model.outputs.getter();
    Model.inputs.setter();
    Model.init()();
    Model.inputs.getter();
    Model.inputs.setter();
    Model.outputs.getter();
    Model.outputs.setter();
    Model.predictedFeatureName.getter();
    Model.predictedFeatureName.setter();
    Model.predictedProbabilitiesName.getter();
    Model.predictedProbabilitiesName.setter();
    v15 = Model.nestedModels.getter();
    v16 = Model.nestedModels.getter();
    v28 = v15;
    specialized Array.append<A>(contentsOf:)(v16);
    v17 = v20;
    PipelineClassifierConfiguration.init(models:names:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v17, *MEMORY[0x24BE63268], v22);
    Model.kind.setter();
    v18 = v25;
    v19 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v19(v13, v25);
    v19((uint64_t)v14, v18);
  }
  OUTLINED_FUNCTION_7();
}

void MLSoundClassifier.Model.createFeatureExtractorModel(internalMetadata:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  _QWORD v67[5];
  uint64_t v68;

  v65 = a1;
  v52 = a2;
  v54 = type metadata accessor for AudioFeaturePrint();
  v64 = *(_QWORD *)(v54 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v63 = v7;
  v51 = OUTLINED_FUNCTION_12_49();
  v50 = *(_QWORD *)(v51 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_208();
  v53 = v9;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v48 - v11;
  v13 = type metadata accessor for URL.DirectoryHint();
  v60 = *(_QWORD *)(v13 - 8);
  v61 = v13;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_64();
  v58 = v15;
  v16 = OUTLINED_FUNCTION_18_38();
  v55 = *(_QWORD *)(v16 - 8);
  v56 = v16;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  v59 = OUTLINED_FUNCTION_5_56();
  v68 = *(_QWORD *)(v59 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_6_65();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_127_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_22_11();
  MEMORY[0x24BDAC7A8](v21);
  v57 = (char *)v48 - v22;
  v23 = (void *)objc_opt_self();
  v24 = objc_msgSend(v23, sel_defaultManager);
  NSFileManager.createTemporaryModelDirectory()();

  if (!v25)
  {
    v48[1] = v3;
    v48[0] = (uint64_t)v12;
    v49 = 0;
    v26 = objc_msgSend(v23, sel_defaultManager);
    OUTLINED_FUNCTION_15_45();

    UUID.init()();
    v27 = UUID.uuidString.getter();
    v29 = v28;
    OUTLINED_FUNCTION_16_46(v55);
    v67[0] = v27;
    v67[1] = v29;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v60 + 104))(v58, *MEMORY[0x24BDCD7A0], v61);
    lazy protocol witness table accessor for type String and conformance String();
    OUTLINED_FUNCTION_7_60();
    OUTLINED_FUNCTION_9_58();
    swift_bridgeObjectRelease();
    v30 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
    v31 = v4;
    v32 = (uint64_t *)v59;
    v30(v31, v59);
    v33 = v57;
    OUTLINED_FUNCTION_3_56();
    v30(v2, (uint64_t)v32);
    v34 = type metadata accessor for MLSoundClassifier.ModelParameters();
    outlined init with copy of Any?(v62 + *(int *)(v34 + 28), (uint64_t)v67, &demangling cache variable for type metadata for Any?);
    if (v67[3])
    {
      swift_dynamicCast();
      OUTLINED_FUNCTION_14_53();
      if ((v35 & 1) != 0 && (v66 & 1) == 0)
      {
        v36 = v48[0];
        v37 = v49;
        static MLSoundClassifier.VGGishFeatureExtractor.buildCoreMLSpec(outputName:)(0x7365727574616566, 0xE800000000000000, v48[0]);
        if (!v37)
        {
          v38 = Model.metadata.getter();
          specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(v38, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v32);
          v30((uint64_t)v33, (uint64_t)v32);
          v39 = OUTLINED_FUNCTION_17_34();
          v40(v39, v36);
          goto LABEL_13;
        }
        goto LABEL_10;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v67);
      OUTLINED_FUNCTION_14_53();
    }
    MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
    AudioFeaturePrint.init(windowDuration:overlapFactor:)();
    lazy protocol witness table accessor for type AudioFeaturePrint and conformance AudioFeaturePrint();
    v41 = v49;
    TemporalTransformer.export(to:)();
    if (!v41)
    {
      (*(void (**)(uint64_t, char *, uint64_t *))(v68 + 16))(v5, v33, v32);
      v43 = v53;
      Model.init(contentsOf:)();
      v45 = Model.metadata.getter();
      specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(v45, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v32);
      v46 = OUTLINED_FUNCTION_17_34();
      v47(v46, v43);
      $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
      OUTLINED_FUNCTION_4_60();
      v44 = v33;
      v42 = v32;
      goto LABEL_12;
    }
    OUTLINED_FUNCTION_4_60();
LABEL_10:
    v42 = v32;
    v44 = v33;
LABEL_12:
    v30((uint64_t)v44, (uint64_t)v42);
  }
LABEL_13:
  OUTLINED_FUNCTION_7();
}

void MLSoundClassifier.Model.createClassifierModel(internalMetadata:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v70 = a1;
  v52 = a2;
  v51 = OUTLINED_FUNCTION_12_49();
  v69 = *(_QWORD *)(v51 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v53 = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v56 = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v54 = *(_QWORD *)(v11 - 8);
  v55 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_6();
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v67 = v14;
  v15 = type metadata accessor for URL.DirectoryHint();
  v63 = *(_QWORD *)(v15 - 8);
  v64 = v15;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_64();
  v62 = v17;
  v18 = OUTLINED_FUNCTION_18_38();
  v59 = *(_QWORD *)(v18 - 8);
  v60 = v18;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v19);
  v65 = OUTLINED_FUNCTION_5_56();
  v73 = *(_QWORD *)(v65 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_6_65();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_127_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_22_11();
  MEMORY[0x24BDAC7A8](v23);
  v61 = (char *)&v48 - v24;
  v25 = (void *)objc_opt_self();
  v26 = objc_msgSend(v25, sel_defaultManager);
  NSFileManager.createTemporaryModelDirectory()();

  if (!v27)
  {
    v48 = v4;
    v49 = v2;
    v50 = 0;
    v28 = objc_msgSend(v25, sel_defaultManager);
    OUTLINED_FUNCTION_15_45();

    UUID.init()();
    v29 = UUID.uuidString.getter();
    v31 = v30;
    OUTLINED_FUNCTION_16_46(v59);
    v71 = v29;
    v72 = v31;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v63 + 104))(v62, *MEMORY[0x24BDCD7A0], v64);
    lazy protocol witness table accessor for type String and conformance String();
    OUTLINED_FUNCTION_7_60();
    OUTLINED_FUNCTION_9_58();
    swift_bridgeObjectRelease();
    v32 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
    v33 = v65;
    v32(v5, v65);
    v34 = v61;
    OUTLINED_FUNCTION_3_56();
    v32(v3, v33);
    v35 = type metadata accessor for MLSoundClassifier.Model();
    v36 = v67;
    outlined init with copy of Any?(v68 + *(int *)(v35 + 20), v67, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    v37 = v33;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v38 = v56;
      v39 = v57;
      v40 = v58;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v56, v36, v58);
      lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifierModel<Float, String> and conformance FullyConnectedNetworkClassifierModel<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>, MEMORY[0x24BDC6058]);
      OUTLINED_FUNCTION_10_52();
      v42 = v69;
      v41 = v70;
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    }
    else
    {
      v44 = v54;
      v43 = v55;
      v45 = v49;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v49, v36, v55);
      lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type LogisticRegressionClassifierModel<Float, String> and conformance LogisticRegressionClassifierModel<A, B>, &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>, MEMORY[0x24BDC6030]);
      OUTLINED_FUNCTION_10_52();
      v42 = v69;
      v41 = v70;
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v43);
    }
    v46 = v53;
    (*(void (**)(uint64_t, char *, uint64_t))(v73 + 16))(v48, v34, v37);
    Model.init(contentsOf:)();
    v47 = Model.metadata.getter();
    specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(v47, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v41);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v52, v46, v51);
    $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
    v32((uint64_t)v34, v37);
  }
  OUTLINED_FUNCTION_7();
}

unint64_t lazy protocol witness table accessor for type AudioFeaturePrint and conformance AudioFeaturePrint()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AudioFeaturePrint and conformance AudioFeaturePrint;
  if (!lazy protocol witness table cache variable for type AudioFeaturePrint and conformance AudioFeaturePrint)
  {
    v1 = type metadata accessor for AudioFeaturePrint();
    result = MEMORY[0x22075B938](MEMORY[0x24BDC5A40], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFeaturePrint and conformance AudioFeaturePrint);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_56()
{
  return URL.appendingPathExtension(_:)();
}

uint64_t OUTLINED_FUNCTION_4_60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_5_56()
{
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_7_60()
{
  return URL.appending<A>(component:directoryHint:)();
}

unint64_t OUTLINED_FUNCTION_8_62()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_9_58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_10_52()
{
  return Transformer.export(to:)();
}

uint64_t OUTLINED_FUNCTION_12_49()
{
  return type metadata accessor for Model();
}

uint64_t OUTLINED_FUNCTION_15_45()
{
  return NSFileManager.temporaryModelDirectory.getter();
}

uint64_t OUTLINED_FUNCTION_16_46@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_17_34()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 248);
}

uint64_t OUTLINED_FUNCTION_18_38()
{
  return type metadata accessor for UUID();
}

void static Dense.loadLayer(from:layerName:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;

  v81 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_208();
  v83 = v8;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v72 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  MEMORY[0x24BDAC7A8](v12);
  v82 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Tensor();
  v80 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  v79 = v15;
  MEMORY[0x24BDAC7A8](v16);
  v86 = (uint64_t)&v72 - v17;
  v18 = type metadata accessor for TensorShape();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_208();
  v78 = v20;
  MEMORY[0x24BDAC7A8](v21);
  v85 = (char *)&v72 - v22;
  v88 = a2;
  v89 = a3;
  OUTLINED_FUNCTION_113_0();
  v23._countAndFlagsBits = OUTLINED_FUNCTION_6_66() & 0xFFFFFFFFFFFFLL | 0x74000000000000;
  v23._object = (void *)0xE700000000000000;
  String.append(_:)(v23);
  v24 = OUTLINED_FUNCTION_4_61();
  v26 = specialized Dictionary.subscript.getter(v24, v25, a1);
  OUTLINED_FUNCTION_30();
  v84 = v26;
  if (!v26)
  {
    v88 = 0;
    v89 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    OUTLINED_FUNCTION_113_0();
    swift_bridgeObjectRelease();
    v88 = a2;
    v89 = a3;
    v38 = 0x800000021AFF3580;
    v39 = 0xD000000000000025;
LABEL_14:
    String.append(_:)(*(Swift::String *)&v39);
    v41 = v88;
    v40 = v89;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v42 = v41;
    *(_QWORD *)(v42 + 8) = v40;
    *(_OWORD *)(v42 + 16) = 0u;
    *(_OWORD *)(v42 + 32) = 0u;
    *(_BYTE *)(v42 + 48) = 2;
    swift_willThrow(0.0);
    return;
  }
  v87 = v14;
  v88 = a2;
  v89 = a3;
  OUTLINED_FUNCTION_113_0();
  v27._countAndFlagsBits = OUTLINED_FUNCTION_6_66() & 0xFFFFFFFFFFFFLL | 0x2E74000000000000;
  v27._object = (void *)0xED00006570616873;
  String.append(_:)(v27);
  v28 = OUTLINED_FUNCTION_4_61();
  v77 = a1;
  v30 = specialized Dictionary.subscript.getter(v28, v29, a1);
  OUTLINED_FUNCTION_30();
  if (!v30)
  {
    swift_bridgeObjectRelease();
    v88 = 0;
    v89 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    OUTLINED_FUNCTION_113_0();
    swift_bridgeObjectRelease();
    v88 = a2;
    v89 = a3;
    v39 = 0xD00000000000002BLL;
    v38 = 0x800000021AFF35B0;
    goto LABEL_14;
  }
  v74 = a2;
  v76 = v11;
  v31 = *(_QWORD *)(v30 + 16);
  v90 = v19;
  if (v31)
  {
    OUTLINED_FUNCTION_0_73(MEMORY[0x24BEE4AF8]);
    v32 = 0;
    v33 = v88;
    while (1)
    {
      v34 = *(double *)(v30 + 8 * v32 + 32);
      if ((~*(_QWORD *)&v34 & 0x7FF0000000000000) == 0)
        break;
      if (v34 <= -9.22337204e18)
        goto LABEL_32;
      if (v34 >= 9.22337204e18)
        goto LABEL_33;
      v35 = v18;
      v88 = v33;
      v37 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v33 + 24);
      if (v37 >= v36 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
        v33 = v88;
      }
      ++v32;
      *(_QWORD *)(v33 + 16) = v37 + 1;
      *(_QWORD *)(v33 + 8 * v37 + 32) = (uint64_t)v34;
      v18 = v35;
      v19 = v90;
      if (v31 == v32)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  v33 = MEMORY[0x24BEE4AF8];
LABEL_16:
  v43 = v85;
  v44 = (uint64_t)v82;
  v75 = v18;
  MEMORY[0x220758C74](v33);
  v73 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 16);
  v73(v44, v43, v18);
  __swift_storeEnumTagSinglePayload(v44, 0, 1, v18);
  Array<A>.floatTensor(shape:)(v44, v84, v86);
  v45 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_57(v45, &demangling cache variable for type metadata for TensorShape?);
  v46 = (uint64_t)v76;
  v47 = v87;
  __swift_storeEnumTagSinglePayload((uint64_t)v76, 1, 1, v87);
  v48 = v74;
  v88 = v74;
  v89 = a3;
  OUTLINED_FUNCTION_113_0();
  v49._countAndFlagsBits = 0x736169622ELL;
  v49._object = (void *)0xE500000000000000;
  String.append(_:)(v49);
  v50 = OUTLINED_FUNCTION_4_61();
  v51 = v77;
  v53 = specialized Dictionary.subscript.getter(v50, v52, v77);
  OUTLINED_FUNCTION_30();
  v54 = v83;
  if (!v53)
  {
LABEL_30:
    v69 = v80;
    v70 = v86;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v79, v86, v47);
    outlined init with copy of Tensor?(v46, v54);
    v71 = Dense.init(weight:bias:)();
    OUTLINED_FUNCTION_5_57(v71, &demangling cache variable for type metadata for Tensor?);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v47);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v85, v75);
    return;
  }
  v88 = v48;
  v89 = a3;
  OUTLINED_FUNCTION_113_0();
  v55._countAndFlagsBits = 0x68732E736169622ELL;
  v55._object = (void *)0xEB00000000657061;
  String.append(_:)(v55);
  v56 = OUTLINED_FUNCTION_4_61();
  v58 = specialized Dictionary.subscript.getter(v56, v57, v51);
  OUTLINED_FUNCTION_30();
  if (!v58)
  {
    swift_bridgeObjectRelease();
    v54 = v83;
    v46 = (uint64_t)v76;
    goto LABEL_30;
  }
  v59 = *(_QWORD *)(v58 + 16);
  if (!v59)
  {
    swift_bridgeObjectRelease();
    v61 = MEMORY[0x24BEE4AF8];
LABEL_29:
    v65 = (uint64_t)v82;
    v66 = v78;
    MEMORY[0x220758C74](v61);
    v67 = v75;
    v73(v65, v66, v75);
    __swift_storeEnumTagSinglePayload(v65, 0, 1, v67);
    v54 = v83;
    Array<A>.floatTensor(shape:)(v65, v53, v83);
    swift_bridgeObjectRelease();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v65, &demangling cache variable for type metadata for TensorShape?);
    v68 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v66, v67);
    v46 = (uint64_t)v76;
    OUTLINED_FUNCTION_5_57(v68, &demangling cache variable for type metadata for Tensor?);
    __swift_storeEnumTagSinglePayload(v54, 0, 1, v47);
    outlined init with take of Tensor?(v54, v46);
    goto LABEL_30;
  }
  OUTLINED_FUNCTION_0_73(MEMORY[0x24BEE4AF8]);
  v60 = 0;
  v61 = v88;
  while (1)
  {
    v62 = *(double *)(v58 + 8 * v60 + 32);
    if ((~*(_QWORD *)&v62 & 0x7FF0000000000000) == 0)
      break;
    if (v62 <= -9.22337204e18)
      goto LABEL_35;
    if (v62 >= 9.22337204e18)
      goto LABEL_36;
    v88 = v61;
    v64 = *(_QWORD *)(v61 + 16);
    v63 = *(_QWORD *)(v61 + 24);
    if (v64 >= v63 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
      v61 = v88;
    }
    ++v60;
    *(_QWORD *)(v61 + 16) = v64 + 1;
    *(_QWORD *)(v61 + 8 * v64 + 32) = (uint64_t)v62;
    v47 = v87;
    if (v59 == v60)
    {
      swift_bridgeObjectRelease();
      v19 = v90;
      goto LABEL_29;
    }
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void OUTLINED_FUNCTION_0_73(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = a1;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
}

uint64_t OUTLINED_FUNCTION_4_61()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 120);
}

uint64_t OUTLINED_FUNCTION_5_57(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_6_66()
{
  return 0x68676965772ELL;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.init(validation:maxDepth:minLossReduction:minChildWeight:randomSeed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v18[4];

  v12 = OUTLINED_FUNCTION_1_62();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_QWORD *)a4 = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(_QWORD *)(a4 + 56) = a3;
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(a1, (uint64_t)v15);
  v18[3] = v12;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v18);
  outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v15, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v18, a4 + 8);
  return outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(a1);
}

uint64_t MLDecisionTreeClassifier.ModelParameters.validation.getter()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  result = outlined init with copy of Any?(v0 + 8, (uint64_t)&v2);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    OUTLINED_FUNCTION_1_62();
    return OUTLINED_FUNCTION_16_0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.init(validationData:maxDepth:minLossReduction:minChildWeight:randomSeed:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v6;
  char v7;
  uint64_t v9;
  char v10;

  v6 = *a1;
  v7 = *((_BYTE *)a1 + 8);
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)a4 = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(_QWORD *)(a4 + 56) = a3;
  v9 = v6;
  v10 = v7;
  return MLDecisionTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v9);
}

uint64_t MLDecisionTreeClassifier.ModelParameters.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v7;

  v0._countAndFlagsBits = OUTLINED_FUNCTION_5_11();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28_7();
  _StringGuts.grow(_:)(23);
  v1._countAndFlagsBits = 0xD000000000000014;
  v1._object = (void *)0x800000021AFF13C0;
  String.append(_:)(v1);
  OUTLINED_FUNCTION_2_11();
  OUTLINED_FUNCTION_28_7();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(21);
  v3._object = (void *)0x800000021AFF13E0;
  v3._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v3);
  OUTLINED_FUNCTION_2_11();
  OUTLINED_FUNCTION_28_7();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v7, "Random Seed: ");
  HIWORD(v7._object) = -4864;
  v5._countAndFlagsBits = OUTLINED_FUNCTION_5_11();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28_7();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0x747065442078614DLL;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.maxDepth.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.maxDepth.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*MLDecisionTreeClassifier.ModelParameters.maxDepth.modify())(_QWORD)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.validationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  OUTLINED_FUNCTION_1_62();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_91_1();
  result = outlined init with copy of Any?(v0 + 8, (uint64_t)&v4);
  if (v5)
  {
    outlined init with take of Any(&v4, &v6);
    OUTLINED_FUNCTION_16_0();
    MLDecisionTreeClassifier.ModelParameters.ValidationData.asTable()();
    return outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLDecisionTreeClassifier.ModelParameters.validationData : MLDecisionTreeClassifier.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = MLDecisionTreeClassifier.ModelParameters.validationData.getter();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for MLDecisionTreeClassifier.ModelParameters.validationData : MLDecisionTreeClassifier.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1;
  id v3;
  unsigned __int8 v4;

  v1 = *(_BYTE *)(a1 + 8);
  v3 = *(id *)a1;
  v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLDecisionTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLDecisionTreeClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v11[4];

  v3 = v1;
  OUTLINED_FUNCTION_1_62();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_91_1();
  v6 = *(void **)a1;
  v7 = *(unsigned __int8 *)(a1 + 8);
  v11[3] = v8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v11);
  if (v7 == 255)
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_WORD *)(v2 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(_QWORD *)v2 = v6;
    *(_BYTE *)(v2 + 8) = v7 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v6, v7);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData(v2, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v11, v3 + 8);
}

void (*MLDecisionTreeClassifier.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  MLDecisionTreeClassifier.ModelParameters.validationData.getter();
  return MLDecisionTreeClassifier.ModelParameters.validationData.modify;
}

void MLDecisionTreeClassifier.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned __int8 v5;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(void **)a1;
  v5 = v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of MLDataTable?(v2, v3);
    MLDecisionTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    MLDecisionTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLDecisionTreeClassifier.ModelParameters.validation : MLDecisionTreeClassifier.ModelParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(a1, (uint64_t)v4);
  return MLDecisionTreeClassifier.ModelParameters.validation.setter((uint64_t)v4);
}

uint64_t MLDecisionTreeClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v5[4];

  v5[3] = OUTLINED_FUNCTION_1_62();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1 + 8);
}

uint64_t outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void (*MLDecisionTreeClassifier.ModelParameters.validation.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void (*result)(uint64_t **, char);

  v3 = malloc(0xA0uLL);
  *a1 = v3;
  v3[16] = v1;
  v4 = OUTLINED_FUNCTION_1_62();
  v3[17] = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[18] = malloc(v5);
  v3[19] = malloc(v5);
  result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v1 + 8, (uint64_t)(v3 + 4));
  if (v3[7])
  {
    outlined init with take of Any((_OWORD *)v3 + 2, v3);
    OUTLINED_FUNCTION_16_0();
    return MLDecisionTreeClassifier.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLDecisionTreeClassifier.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v7;

  v2 = *a1;
  v3 = (void *)(*a1)[18];
  v4 = (void *)(*a1)[19];
  v5 = (*a1)[17];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    OUTLINED_FUNCTION_8_15();
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v5;
    v7 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v7);
    OUTLINED_FUNCTION_8_15();
  }
  free(v4);
  free(v3);
  free(v2);
}

double MLDecisionTreeClassifier.ModelParameters.minLossReduction.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void MLDecisionTreeClassifier.ModelParameters.minLossReduction.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*MLDecisionTreeClassifier.ModelParameters.minLossReduction.modify())(_QWORD)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLDecisionTreeClassifier.ModelParameters.minChildWeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void MLDecisionTreeClassifier.ModelParameters.minChildWeight.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLDecisionTreeClassifier.ModelParameters.minChildWeight.modify())(_QWORD)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.randomSeed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t MLDecisionTreeClassifier.ModelParameters.randomSeed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*MLDecisionTreeClassifier.ModelParameters.randomSeed.modify())(_QWORD)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeClassifier.ModelParameters.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MLDecisionTreeClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21AFA0BC0()
{
  return MLDecisionTreeClassifier.ModelParameters.validation.getter();
}

uint64_t initializeWithCopy for MLDecisionTreeClassifier.ModelParameters(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;

  v5 = *a2;
  v4 = a2 + 1;
  *(_QWORD *)a1 = v5;
  v6 = (_OWORD *)(a1 + 8);
  v7 = a2[4];
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v6, v4);
  }
  else
  {
    v8 = v4[1];
    *v6 = *v4;
    v6[1] = v8;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 56) = a2[7];
  return a1;
}

_QWORD *assignWithCopy for MLDecisionTreeClassifier.ModelParameters(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;

  *a1 = *a2;
  v4 = a1 + 1;
  v5 = a2 + 1;
  v6 = a2[4];
  if (!a1[4])
  {
    if (v6)
    {
      a1[4] = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
      goto LABEL_8;
    }
LABEL_7:
    v7 = v5[1];
    *v4 = *v5;
    v4[1] = v7;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(a1 + 1));
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0(a1 + 1, a2 + 1);
LABEL_8:
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for MLDecisionTreeClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *v4 = *(_OWORD *)(a2 + 8);
  v4[1] = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDecisionTreeClassifier.ModelParameters(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 32);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDecisionTreeClassifier.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDecisionTreeClassifier.ModelParameters()
{
  return &type metadata for MLDecisionTreeClassifier.ModelParameters;
}

uint64_t OUTLINED_FUNCTION_1_62()
{
  return type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
}

uint64_t specialized Result<>.init(catching:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_20_43(a1, a2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_1_63(v3);
  *(_QWORD *)(v2 + 48) = OUTLINED_FUNCTION_8_63();
  OUTLINED_FUNCTION_3_1();
  v4 = OUTLINED_FUNCTION_8_63();
  v5 = (_QWORD *)OUTLINED_FUNCTION_17_35(v4);
  v6 = OUTLINED_FUNCTION_10_53(v5);
  return MLRandomForestRegressor.init(delegate:)(v6, v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_20_43(a1, a2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_1_63(v3);
  *(_QWORD *)(v2 + 48) = OUTLINED_FUNCTION_8_63();
  OUTLINED_FUNCTION_3_1();
  v4 = OUTLINED_FUNCTION_8_63();
  v5 = (_QWORD *)OUTLINED_FUNCTION_17_35(v4);
  v6 = OUTLINED_FUNCTION_10_53(v5);
  return MLDecisionTreeRegressor.init(delegate:)(v6, v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_20_43(a1, a2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_1_63(v3);
  *(_QWORD *)(v2 + 48) = OUTLINED_FUNCTION_8_63();
  OUTLINED_FUNCTION_3_1();
  v4 = OUTLINED_FUNCTION_8_63();
  v5 = (_QWORD *)OUTLINED_FUNCTION_17_35(v4);
  v6 = OUTLINED_FUNCTION_10_53(v5);
  return MLRandomForestClassifier.init(delegate:)(v6, v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_20_43(a1, a2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_1_63(v3);
  *(_QWORD *)(v2 + 48) = OUTLINED_FUNCTION_8_63();
  OUTLINED_FUNCTION_3_1();
  v4 = OUTLINED_FUNCTION_8_63();
  v5 = (_QWORD *)OUTLINED_FUNCTION_17_35(v4);
  v6 = OUTLINED_FUNCTION_10_53(v5);
  return MLBoostedTreeRegressor.init(delegate:)(v6, v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_20_43(a1, a2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_1_63(v3);
  *(_QWORD *)(v2 + 48) = OUTLINED_FUNCTION_8_63();
  OUTLINED_FUNCTION_3_1();
  v4 = OUTLINED_FUNCTION_8_63();
  v5 = (_QWORD *)OUTLINED_FUNCTION_17_35(v4);
  v6 = OUTLINED_FUNCTION_10_53(v5);
  return MLDecisionTreeClassifier.init(delegate:)(v6, v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_20_43(a1, a2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_1_63(v3);
  *(_QWORD *)(v2 + 48) = OUTLINED_FUNCTION_8_63();
  OUTLINED_FUNCTION_3_1();
  v4 = OUTLINED_FUNCTION_8_63();
  v5 = (_QWORD *)OUTLINED_FUNCTION_17_35(v4);
  v6 = OUTLINED_FUNCTION_10_53(v5);
  return MLSoundClassifier.init(delegate:)(v6, v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_20_43(a1, a2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_1_63(v3);
  *(_QWORD *)(v2 + 48) = OUTLINED_FUNCTION_8_63();
  OUTLINED_FUNCTION_3_1();
  v4 = OUTLINED_FUNCTION_8_63();
  v5 = (_QWORD *)OUTLINED_FUNCTION_17_35(v4);
  v6 = OUTLINED_FUNCTION_10_53(v5);
  return MLBoostedTreeClassifier.init(delegate:)(v6, v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_20_43(a1, a2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_1_63(v3);
  *(_QWORD *)(v2 + 48) = OUTLINED_FUNCTION_8_63();
  OUTLINED_FUNCTION_3_1();
  v4 = OUTLINED_FUNCTION_8_63();
  v5 = (_QWORD *)OUTLINED_FUNCTION_17_35(v4);
  v6 = OUTLINED_FUNCTION_10_53(v5);
  return MLLinearRegressor.init(delegate:)(v6, v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_20_43(a1, a2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_1_63(v3);
  *(_QWORD *)(v2 + 48) = OUTLINED_FUNCTION_8_63();
  OUTLINED_FUNCTION_3_1();
  v4 = OUTLINED_FUNCTION_8_63();
  v5 = (_QWORD *)OUTLINED_FUNCTION_17_35(v4);
  v6 = OUTLINED_FUNCTION_10_53(v5);
  return MLImageClassifier.init(delegate:)(v6, v7);
}

uint64_t ResultBox.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Result<Any, Error>?(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResultBox()
{
  return objc_opt_self();
}

uint64_t outlined destroy of Result<Any, Error>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Any, Error>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Result<MLImageClassifier, Error>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_74()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_1_63(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_4_62()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 48) = *(_QWORD *)(v0 + 64);
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_6_67()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_7_61()
{
  uint64_t *v0;
  uint64_t v1;

  return outlined init with take of Result<MLImageClassifier, Error>(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), v0);
}

uint64_t OUTLINED_FUNCTION_8_63()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_9_59()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  return outlined init with take of Result<MLImageClassifier, Error>(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_10_53(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_13_56(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return outlined init with take of Result<MLImageClassifier, Error>(v3, a2, a3);
}

uint64_t OUTLINED_FUNCTION_17_35(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_43(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

id static MLHandPoseClassifier.FeatureExtractor.extractFeatures(from:startingSessionId:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t inited;
  uint64_t v9;

  v6 = *a1;
  v7 = *((_BYTE *)a1 + 8);
  inited = swift_initStackObject();
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(inited + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(inited + 40) = v9;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = v9;
  *(_QWORD *)(inited + 16) = v6;
  *(_BYTE *)(inited + 24) = v7;
  if (v3)
    return OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_0_7();
  MLHandPoseClassifier.FeatureExtractor.extractFeaturesFromFileTable(startingSessionId:)(a2, a3);
  return (id)swift_release();
}

uint64_t static MLHandPoseClassifier.FeatureExtractor.extractFeatures(from:startingSessionId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;

  v7 = type metadata accessor for MLHandPoseClassifier.DataSource();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLHandPoseClassifier.DataSource(a1, (uint64_t)v9);
  result = MLHandPoseClassifier.FeatureExtractor.__allocating_init(source:)(v9);
  if (!v3)
  {
    MLHandPoseClassifier.FeatureExtractor.extractFeaturesFromFileTable(startingSessionId:)(a2, a3);
    return swift_release();
  }
  return result;
}

#error "21AFA1C04: call analysis failed (funcsize=33)"

uint64_t MLHandPoseClassifier.FeatureExtractor.extractFeaturesFromFileTable(startingSessionId:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char **v9;
  id v10;
  char v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  os_log_type_t v17;
  Swift::String v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char **v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  char v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  void *v59;
  void *v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t v67;
  id v68;
  os_log_type_t v69;
  Swift::String v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t inited;
  void **v74;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v76;
  char v77;
  char **v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t *v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  _QWORD *v93;
  void *v94;
  id v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  void *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t result;
  Swift::String v104;
  void *v105;
  id v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  __int128 v112;
  char **v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  char **v119;
  uint64_t *v120;
  uint64_t *v121;
  _QWORD *v122;
  void *v123;
  char *v124;
  Swift::Int v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char *v131;
  void *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;

  v3 = v2;
  v115 = a1;
  v108 = a2;
  v4 = type metadata accessor for URL();
  v116 = *(_QWORD *)(v4 - 8);
  v117 = v4;
  MEMORY[0x24BDAC7A8]();
  v126 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for Date();
  v125 = *(_QWORD *)(v139 - 8);
  MEMORY[0x24BDAC7A8]();
  v124 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for _TablePrinter(0);
  MEMORY[0x24BDAC7A8]();
  v9 = (char **)((char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(id *)(v2 + 16);
  v11 = *(_BYTE *)(v2 + 24);
  v135 = (uint64_t)v10;
  LOBYTE(v136) = v11;
  outlined copy of Result<_DataTable, Error>(v10, v11);
  MLDataTable.size.getter();
  v12 = (void *)specialized RandomAccessCollection<>.distance(from:to:)();
  outlined consume of Result<_DataTable, Error>(v10, v11);
  v135 = 0;
  v136 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v135 = 0x69737365636F7250;
  v136 = 0xEB0000000020676ELL;
  v132 = v12;
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0xD000000000000011;
  v14._object = (void *)0x800000021AFF86F0;
  String.append(_:)(v14);
  v15 = v135;
  v16 = (void *)v136;
  v17 = static os_log_type_t.info.getter();
  v18._countAndFlagsBits = v15;
  v18._object = v16;
  log(_:type:)(v18, v17);
  swift_bridgeObjectRelease();
  v19 = (char *)v9 + v7[5];
  Date.init()();
  *v9 = (char *)v12;
  type metadata accessor for OS_os_log();
  v20 = OS_os_log.init(subsystem:category:)();
  v109 = v7[6];
  *(char **)((char *)v9 + v109) = (char *)v20;
  v21 = (char **)((char *)v9 + v7[7]);
  *v21 = 0xD000000000000010;
  v21[1] = 0x800000021AFF8740;
  v22 = v124;
  Date.init()();
  v23 = *(void (**)(char *, char *, uint64_t))(v125 + 40);
  v114 = v19;
  v24 = v19;
  v25 = v9;
  v23(v24, v22, v139);
  _TablePrinter.beginTable()();
  _TablePrinter.printRow(currentFileIndex:)(0);
  v135 = (uint64_t)v10;
  LOBYTE(v136) = v11;
  v119 = (char **)(v3 + 48);
  v120 = (uint64_t *)(v3 + 32);
  v118 = (void **)(v3 + 40);
  v121 = (uint64_t *)(v3 + 56);
  v137 = 0;
  v138 = 0;
  outlined copy of Result<_DataTable, Error>(v10, v11);
  v132 = v10;
  LOBYTE(v133) = v11;
  if (MLDataTable.size.getter())
  {
    v26 = 0;
    v112 = xmmword_21AFE7DA0;
    v110 = (void *)0x800000021AFF87D0;
    v111 = (void *)0x800000021AFF87B0;
    v113 = v9;
    while (1)
    {
      MLDataTable.Rows.subscript.getter(v26, &v132);
      v28 = v132;
      v27 = v133;
      v139 = v134;
      v29 = v11 & 1;
      outlined copy of Result<_DataTable, Error>(v10, v11 & 1);
      v30 = specialized RandomAccessCollection<>.index(after:)(v26);
      outlined consume of Result<_DataTable, Error>(v10, v29);
      v137 = v30;
      v31 = v138;
      if (__OFADD__(v138, 1))
        break;
      ++v138;
      if (!v27[2])
        goto LABEL_23;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(0x7461506567616D69, 0xE900000000000068);
      if ((v33 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_23;
      }
      v124 = v31 + 1;
      v125 = (Swift::Int)v31;
      v34 = *(_QWORD *)(v27[7] + 8 * v32);
      swift_retain_n();
      v35 = v34;
      v36 = v127;
      CMLSequence.value(at:)(v35);
      if (v36)
        goto LABEL_29;
      swift_release();
      MLDataValue.init(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      v38 = v132;
      v37 = v133;
      v39 = v134;
      if (v134 != 2)
      {
        v94 = v132;
        v95 = v133;
        goto LABEL_20;
      }
      if (!v27[2])
        goto LABEL_19;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v40 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C6562616CLL, 0xE500000000000000);
      if ((v41 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
LABEL_19:
        v94 = v38;
        v95 = v37;
        v39 = 2;
LABEL_20:
        outlined consume of MLDataValue(v94, v95, v39);
LABEL_22:
        v31 = (char *)v125;
LABEL_23:
        v132 = 0;
        v133 = (_QWORD *)0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v96._countAndFlagsBits = 0xD000000000000029;
        v96._object = (void *)0x800000021AFF8760;
        String.append(_:)(v96);
        v131 = v31;
        v97._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v97);
        swift_bridgeObjectRelease();
        v98._object = (void *)0xE900000000000065;
        v98._countAndFlagsBits = 0x6C626174206E6920;
        String.append(_:)(v98);
        v99 = v132;
        v100 = v133;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v101 = v99;
        *(_QWORD *)(v101 + 8) = v100;
        *(_OWORD *)(v101 + 16) = 0u;
        *(_OWORD *)(v101 + 32) = 0u;
        *(_BYTE *)(v101 + 48) = 0;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Result<_DataTable, Error>((id)v135, v136);
        goto LABEL_24;
      }
      v42 = *(_QWORD *)(v27[7] + 8 * v40);
      swift_retain_n();
      CMLSequence.value(at:)(v42);
      swift_release();
      MLDataValue.init(_:)();
      swift_bridgeObjectRelease();
      v123 = v28;
      swift_release();
      swift_release_n();
      v43 = v132;
      v44 = v133;
      if (v134 != 2)
      {
        outlined consume of MLDataValue(v132, v133, v134);
        outlined consume of MLDataValue(v38, v37, 2);
        v25 = v113;
        goto LABEL_22;
      }
      v122 = v27;
      v45 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v46 = (void *)MEMORY[0x22075A8AC](v38, v37);
      v47 = objc_msgSend(v45, sel_fileExistsAtPath_, v46);

      if ((v47 & 1) == 0)
      {
        outlined consume of MLDataValue(v43, v44, 2);
        v132 = 0;
        v133 = (_QWORD *)0xE000000000000000;
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease();
        v132 = (void *)0xD000000000000018;
        v133 = (_QWORD *)0x800000021AFF8790;
        v104._countAndFlagsBits = (uint64_t)v38;
        v104._object = v37;
        String.append(_:)(v104);
        outlined consume of MLDataValue(v38, v37, 2);
        v105 = v132;
        v106 = v133;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v107 = v105;
        *(_QWORD *)(v107 + 8) = v106;
        *(_OWORD *)(v107 + 16) = 0u;
        *(_OWORD *)(v107 + 32) = 0u;
        *(_BYTE *)(v107 + 48) = 0;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Result<_DataTable, Error>((id)v135, v136);
        v102 = (uint64_t)v113;
        return outlined destroy of MLImageClassifier.CustomFeatureExtractor(v102, type metadata accessor for _TablePrinter);
      }
      URL.init(fileURLWithPath:)();
      outlined consume of MLDataValue(v38, v37, 2);
      v48 = URL.lastPathComponent.getter();
      v50 = v49;
      static _VideoUtilities.getHandKeyPointsFromImageUrl(url:)();
      v52 = v51;
      v53 = v125;
      if (__OFADD__(v125, v115))
        goto LABEL_28;
      v127 = 0;
      v54 = *(_QWORD *)(v51 + 16);
      v55 = specialized Array.init(repeating:count:)(v125 + v115, v54);
      specialized Array.init(repeating:count:)((uint64_t)v43, (uint64_t)v44, v54);
      specialized Array.init(repeating:count:)(v48, v50, v54);
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)(v52);
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)(v55);
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)();
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)();
      swift_endAccess();
      v25 = v113;
      _TablePrinter.printRow(currentFileIndex:)(v53);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v56 = swift_allocObject();
      *(_OWORD *)(v56 + 16) = v112;
      Date.timeIntervalSinceNow.getter();
      *(_QWORD *)(v56 + 56) = MEMORY[0x24BEE13C8];
      *(_QWORD *)(v56 + 64) = MEMORY[0x24BEE1448];
      *(double *)(v56 + 32) = -v57;
      v58 = String.init(format:_:)();
      v60 = v59;
      v132 = 0;
      v133 = (_QWORD *)0xE000000000000000;
      _StringGuts.grow(_:)(76);
      v61._countAndFlagsBits = 0xD000000000000018;
      v61._object = v111;
      String.append(_:)(v61);
      v131 = v124;
      v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      v63._countAndFlagsBits = 0x20666F2074756F20;
      v63._object = (void *)0xE800000000000000;
      String.append(_:)(v63);
      v131 = *v25;
      v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      v65._countAndFlagsBits = 0xD000000000000026;
      v65._object = v110;
      String.append(_:)(v65);
      v66._countAndFlagsBits = v58;
      v66._object = v60;
      String.append(_:)(v66);
      swift_bridgeObjectRelease();
      v67 = (uint64_t)v132;
      v68 = v133;
      v69 = static os_log_type_t.default.getter();
      v70._countAndFlagsBits = v67;
      v70._object = v68;
      log(_:type:)(v70, v69);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v116 + 8))(v126, v117);
      v26 = v137;
      v10 = (id)v135;
      v11 = v136;
      v132 = (void *)v135;
      LOBYTE(v133) = v136;
      if (v26 == MLDataTable.size.getter())
        goto LABEL_14;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    swift_release();
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
LABEL_14:
    outlined consume of Result<_DataTable, Error>(v10, v11);
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = xmmword_21AFE7DA0;
    v72 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v71 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v71 + 64) = v72;
    *(_QWORD *)(v71 + 32) = 3;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7D90;
    *(_QWORD *)(inited + 32) = 0x6C6562616CLL;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    v74 = v118;
    swift_beginAccess();
    v132 = *v74;
    MEMORY[0x24BDAC7A8]();
    *(&v108 - 2) = &v132;
    swift_bridgeObjectRetain();
    ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    v77 = v76;
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
    *(_BYTE *)(inited + 56) = v77 & 1;
    *(_QWORD *)(inited + 64) = 0x5F6E6F6973736573;
    *(_QWORD *)(inited + 72) = 0xEA00000000006469;
    v78 = v119;
    swift_beginAccess();
    v131 = *v78;
    MEMORY[0x24BDAC7A8]();
    *(&v108 - 2) = &v131;
    swift_bridgeObjectRetain();
    v79 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    v81 = v80;
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 80) = v79;
    *(_BYTE *)(inited + 88) = v81 & 1;
    *(_QWORD *)(inited + 96) = 0x746E696F7079656BLL;
    *(_QWORD *)(inited + 104) = 0xE900000000000073;
    v82 = v120;
    swift_beginAccess();
    v130 = *v82;
    MEMORY[0x24BDAC7A8]();
    *(&v108 - 2) = &v130;
    swift_bridgeObjectRetain();
    v83 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    v85 = v84;
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 112) = v83;
    *(_BYTE *)(inited + 120) = v85 & 1;
    *(_QWORD *)(inited + 128) = 0x7461506567616D69;
    *(_QWORD *)(inited + 136) = 0xE900000000000068;
    v86 = v121;
    swift_beginAccess();
    v128 = *v86;
    MEMORY[0x24BDAC7A8]();
    *(&v108 - 2) = &v128;
    swift_bridgeObjectRetain();
    v87 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
    v89 = v88;
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 144) = v87;
    *(_BYTE *)(inited + 152) = v89 & 1;
    v90 = Dictionary.init(dictionaryLiteral:)();
    v91 = v127;
    specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v90, (uint64_t)&v128);
    if (!v91)
    {
      v92 = v129;
      v93 = v108;
      *v108 = v128;
      *((_BYTE *)v93 + 8) = v92;
    }
LABEL_24:
    v102 = (uint64_t)v25;
    return outlined destroy of MLImageClassifier.CustomFeatureExtractor(v102, type metadata accessor for _TablePrinter);
  }
  return result;
}

uint64_t type metadata accessor for MLHandPoseClassifier.FeatureExtractor()
{
  return objc_opt_self();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k106OIegnrzr_TR143_s8CreateML16MLTextClassifierV10evaluation2on10textColumn05labelH0AA19MLClassifierMetricsV11f31Data0M5FrameV_S2StFSS0G0_SS0I0tM19_AOtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(_QWORD *, _QWORD);
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char *v31;
  void (*v32)(_QWORD *, _QWORD);
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD *, _QWORD);
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  uint64_t v56;
  void (*v57)(_QWORD *, _QWORD);
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t result;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[4];
  uint64_t v83;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v78 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  MEMORY[0x24BDAC7A8](v80);
  v6 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
  MEMORY[0x24BDAC7A8](v81);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s11TabularData6ColumnVySSGACyxGSTAAWlTm_0(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, MEMORY[0x24BDF5F98]);
  v9 = dispatch thunk of Sequence.underestimatedCount.getter();
  v10 = a1;
  v11 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (v11 >= v9)
    v12 = v9;
  else
    v12 = v11;
  v83 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  outlined init with copy of Zip2Sequence<Column<String>, Column<String>>(v10, (uint64_t)v6);
  v13 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
  v13(v4, v6, v2);
  v14 = v4;
  dispatch thunk of Sequence.makeIterator()();
  v15 = v2;
  v16 = v12;
  v13(v4, &v6[*(int *)(v80 + 52)], v15);
  v17 = (uint64_t)v8;
  v18 = v81;
  v76 = &v8[*(int *)(v81 + 52)];
  dispatch thunk of Sequence.makeIterator()();
  v77 = *(int *)(v18 + 56);
  v8[v77] = 0;
  if (v12 < 0)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v74 = v8;
    v75 = v14;
    v73 = v15;
    if (v12)
    {
      v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>)
                   + 36);
      v20 = &v8[v19];
      v21 = &v76[v19];
      v71 = &v76[v19];
      v72 = (char *)(v17 + v19);
      do
      {
        if (!v16)
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if ((*(_BYTE *)(v17 + v77) & 1) != 0)
          goto LABEL_50;
        v22 = *(_QWORD *)v20;
        _s11TabularData6ColumnVySSGACyxGSTAAWlTm_0(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, MEMORY[0x24BDF5FA0]);
        dispatch thunk of Collection.endIndex.getter();
        if (v22 == v82[0])
          goto LABEL_51;
        v81 = v16;
        v23 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
        v25 = v24[1];
        v80 = *v24;
        swift_bridgeObjectRetain();
        v23(v82, 0);
        v26 = v78;
        v27 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
        v28 = v75;
        v27(v75, v17, v15);
        dispatch thunk of Collection.formIndex(after:)();
        v29 = *(void (**)(char *, uint64_t))(v26 + 8);
        v29(v28, v15);
        v30 = *(_QWORD *)v21;
        v31 = v76;
        dispatch thunk of Collection.endIndex.getter();
        if (v30 == v82[0])
          goto LABEL_53;
        v32 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
        v34 = v33[1];
        v79 = *v33;
        swift_bridgeObjectRetain();
        v32(v82, 0);
        v27(v28, (uint64_t)v31, v15);
        dispatch thunk of Collection.formIndex(after:)();
        v29(v28, v15);
        if (v25)
          v35 = v80;
        else
          v35 = 0;
        if (v25)
          v36 = v25;
        else
          v36 = 0xE000000000000000;
        if (v34)
          v37 = v79;
        else
          v37 = 0;
        if (v34)
          v38 = v34;
        else
          v38 = 0xE000000000000000;
        v39 = v83;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v39 = v83;
        }
        v40 = v81;
        v41 = *(_QWORD *)(v39 + 16);
        if (v41 >= *(_QWORD *)(v39 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v39 = v83;
        }
        *(_QWORD *)(v39 + 16) = v41 + 1;
        v42 = (_QWORD *)(v39 + 32 * v41);
        v42[4] = v35;
        v42[5] = v36;
        v42[6] = v37;
        v42[7] = v38;
        v16 = v40 - 1;
        v15 = v73;
        v17 = (uint64_t)v74;
        v21 = v71;
        v20 = v72;
      }
      while (v16);
      if ((v74[v77] & 1) != 0)
        goto LABEL_48;
    }
    v43 = _s11TabularData6ColumnVySSGACyxGSTAAWlTm_0(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, MEMORY[0x24BDF5FA0]);
    while (1)
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<Column<String>>);
      v45 = *(_QWORD *)(v17 + *(int *)(v44 + 36));
      dispatch thunk of Collection.endIndex.getter();
      if (v45 == v82[0])
        break;
      v46 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v48 = v47[1];
      v80 = *v47;
      v81 = v48;
      swift_bridgeObjectRetain();
      v46(v82, 0);
      v49 = v78;
      v50 = v17;
      v51 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
      v52 = v43;
      v53 = v75;
      v51(v75, v50, v15);
      dispatch thunk of Collection.formIndex(after:)();
      v54 = *(void (**)(char *, uint64_t))(v49 + 8);
      v54(v53, v15);
      v55 = v76;
      v56 = *(_QWORD *)&v76[*(int *)(v44 + 36)];
      dispatch thunk of Collection.endIndex.getter();
      if (v56 == v82[0])
      {
        swift_bridgeObjectRelease();
        v17 = (uint64_t)v74;
        break;
      }
      v57 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
      v59 = *v58;
      v60 = v58[1];
      swift_bridgeObjectRetain();
      v57(v82, 0);
      v51(v53, (uint64_t)v55, v15);
      v61 = v52;
      dispatch thunk of Collection.formIndex(after:)();
      v54(v53, v15);
      v62 = v81;
      if (v81)
        v63 = v80;
      else
        v63 = 0;
      if (!v81)
        v62 = 0xE000000000000000;
      v81 = v62;
      if (v60)
      {
        v64 = v60;
      }
      else
      {
        v59 = 0;
        v64 = 0xE000000000000000;
      }
      v65 = v83;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v65 = v83;
      }
      v66 = *(_QWORD *)(v65 + 16);
      v43 = v61;
      if (v66 >= *(_QWORD *)(v65 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v65 = v83;
      }
      *(_QWORD *)(v65 + 16) = v66 + 1;
      v67 = (_QWORD *)(v65 + 32 * v66);
      v68 = v81;
      v67[4] = v63;
      v67[5] = v68;
      v67[6] = v59;
      v67[7] = v64;
      v15 = v73;
      v17 = (uint64_t)v74;
      if ((v74[v77] & 1) != 0)
        goto LABEL_48;
    }
    *(_BYTE *)(v17 + v77) = 1;
LABEL_48:
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v17, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>.Iterator);
    return v83;
  }
  return result;
}

uint64_t MLTextClassifier.evaluation(on:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = static _TextUtilities.getTextLabeledDictionary(from:)(a1);
  v2 = unpackLabeledTexts(_:)(v1);
  OUTLINED_FUNCTION_1_64(v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;

  v1 = unpackLabeledTexts(_:)(a1);
  OUTLINED_FUNCTION_1_64(v1);
  return swift_bridgeObjectRelease();
}

void MLTextClassifier.evaluation(on:textColumn:labelColumn:)(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t ML16MLTextClassifierV10evaluation2on10textColumn05labelH0AA19MLClassifierMetricsV11f31Data0M5FrameV_S2StFSS0G0_SS0I0tM19_AOtXEfU_Tf3nnnpf_nTf1cn_n;
  void (*v25)(char *, uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  __int128 v30;
  Swift::String v31;
  _QWORD *v32;

  v31._countAndFlagsBits = a3;
  v31._object = a4;
  v32 = a5;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  MEMORY[0x24BDAC7A8](v27);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v28 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v26 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
  v15 = OUTLINED_FUNCTION_47_9();
  v30 = xmmword_21AFE7DA0;
  *(_OWORD *)(v15 + 16) = xmmword_21AFE7DA0;
  v16 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v15 + 32) = MEMORY[0x24BEE0D00];
  v17._countAndFlagsBits = a1;
  v26 = a2;
  v17._object = a2;
  v18._countAndFlagsBits = 1954047316;
  v18._object = (void *)0xE400000000000000;
  DataFrame.validateColumnTypes(_:_:context:)(v17, (Swift::OpaquePointer)v15, v18);
  swift_bridgeObjectRelease();
  if (v19
    || (v20 = OUTLINED_FUNCTION_47_9(),
        *(_OWORD *)(v20 + 16) = v30,
        *(_QWORD *)(v20 + 32) = v16,
        v21._countAndFlagsBits = 0x6C6562614CLL,
        v21._object = (void *)0xE500000000000000,
        DataFrame.validateColumnTypes(_:_:context:)(v31, (Swift::OpaquePointer)v20, v21),
        swift_bridgeObjectRelease(),
        v19))
  {
    *v32 = v19;
    type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    OUTLINED_FUNCTION_2_65();
    OUTLINED_FUNCTION_2_65();
    v22 = v28;
    v23 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
    v23(v8, v14, v9);
    v23(&v8[*(int *)(v27 + 52)], v11, v9);
    ML16MLTextClassifierV10evaluation2on10textColumn05labelH0AA19MLClassifierMetricsV11f31Data0M5FrameV_S2StFSS0G0_SS0I0tM19_AOtXEfU_Tf3nnnpf_nTf1cn_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData6ColumnVySSGAKG_SS4text_SS5labelts5NeverOTg5043_sSSSgAAS2SIgggoo_AA_AAtSS4text_SS5labelts5k106OIegnrzr_TR143_s8CreateML16MLTextClassifierV10evaluation2on10textColumn05labelH0AA19MLClassifierMetricsV11f31Data0M5FrameV_S2StFSS0G0_SS0I0tM19_AOtXEfU_Tf3nnnpf_nTf1cn_n((uint64_t)v8);
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v8, &demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
    specialized static MLTextClassifier.evaluation<A>(on:using:)(ML16MLTextClassifierV10evaluation2on10textColumn05labelH0AA19MLClassifierMetricsV11f31Data0M5FrameV_S2StFSS0G0_SS0I0tM19_AOtXEfU_Tf3nnnpf_nTf1cn_n, *v29);
    v25 = *(void (**)(char *, uint64_t))(v22 + 8);
    v25(v11, v9);
    v25(v14, v9);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_5();
  }
}

void MLTextClassifier.evaluation(on:textColumn:labelColumn:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  id v17;
  char v18;

  v12 = type metadata accessor for DataFrame();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_BYTE *)(a1 + 8);
  v17 = *(id *)a1;
  v18 = v16;
  outlined copy of Result<_DataTable, Error>(v17, v16);
  DataFrame.init(_:)((uint64_t)&v17);
  MLTextClassifier.evaluation(on:textColumn:labelColumn:)(a2, a3, a4, a5, a6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  OUTLINED_FUNCTION_9_5();
}

uint64_t outlined init with copy of Zip2Sequence<Column<String>, Column<String>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Column<String>, Column<String>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s11TabularData6ColumnVySSGACyxGSTAAWlTm_0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Column<String>);
    result = MEMORY[0x22075B938](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_64(uint64_t a1)
{
  void **v1;

  return specialized static MLTextClassifier.evaluation<A>(on:using:)(a1, *v1);
}

uint64_t OUTLINED_FUNCTION_2_65()
{
  return DataFrame.subscript.getter();
}

uint64_t MLHandActionClassifier.GraphCNN.iterateTraining(trainingData:validationData:epochCount:)(uint64_t a1, uint64_t a2, Swift::Int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v9;
  uint64_t v11;

  v5 = v3;
  v11 = MEMORY[0x24BEE4B00];
  v9 = (void *)MEMORY[0x22075B47C]();
  closure #1 in MLHandActionClassifier.GraphCNN.iterateTraining(trainingData:validationData:epochCount:)(v5, a1, (uint64_t)&v11, a3, a2);
  objc_autoreleasePoolPop(v9);
  if (v4)
    return swift_bridgeObjectRelease();
  else
    return v11;
}

uint64_t MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v3 + 112) = v2;
  v6 = type metadata accessor for Event();
  *(_QWORD *)(v3 + 120) = v6;
  *(_QWORD *)(v3 + 128) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 136) = OUTLINED_FUNCTION_0();
  v7 = type metadata accessor for MetricsKey();
  *(_QWORD *)(v3 + 144) = v7;
  *(_QWORD *)(v3 + 152) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 160) = OUTLINED_FUNCTION_0();
  v8 = type metadata accessor for Tensor();
  *(_QWORD *)(v3 + 168) = v8;
  *(_QWORD *)(v3 + 176) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 184) = OUTLINED_FUNCTION_0();
  type metadata accessor for MLClassifierMetrics(0);
  *(_QWORD *)(v3 + 192) = swift_task_alloc();
  *(_QWORD *)(v3 + 200) = swift_task_alloc();
  *(_QWORD *)(v3 + 208) = type metadata accessor for TrainingTablePrinter(0);
  *(_QWORD *)(v3 + 216) = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsKey?);
  *(_QWORD *)(v3 + 224) = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
  *(_QWORD *)(v3 + 232) = OUTLINED_FUNCTION_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  *(_QWORD *)(v3 + 240) = v9;
  *(_QWORD *)(v3 + 248) = *(_QWORD *)(v9 - 8);
  v10 = OUTLINED_FUNCTION_0();
  v11 = *a1;
  *(_QWORD *)(v3 + 256) = v10;
  *(_QWORD *)(v3 + 264) = v11;
  *(_BYTE *)(v3 + 304) = *((_BYTE *)a1 + 8);
  *(_QWORD *)(v3 + 272) = *(_QWORD *)a2;
  *(_BYTE *)(v3 + 305) = *(_BYTE *)(a2 + 8);
  return OUTLINED_FUNCTION_70();
}

uint64_t MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;

  v1 = *(_BYTE *)(v0 + 305);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_BYTE *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD ***)(v0 + 112);
  v7 = *v6;
  v73 = *(_QWORD *)(v0 + 264);
  v74 = v3;
  v75 = v2;
  LOBYTE(v76) = v1;
  v8 = type metadata accessor for MLHandActionClassifier();
  v9 = (char *)v6 + *(int *)(v8 + 28);
  static MLHandActionClassifier.prepareDataset(classLabels:trainingFeatures:validationFeatures:parameters:)(v4, v5, v7, (uint64_t)&v73, (uint64_t)&v75);
  MLHandActionClassifier.GraphCNN.loadPretrainedCoreMLModel()();
  if (v10)
  {
    v11 = *(_QWORD *)(v0 + 232);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
    v12 = v11;
LABEL_3:
    outlined destroy of URL?(v12, &demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
    OUTLINED_FUNCTION_13_57();
    swift_task_dealloc();
    OUTLINED_FUNCTION_10();
    swift_task_dealloc();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v72 = v8;
  v15 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 240);
  MLHandActionClassifier.GraphCNN.initDevice()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MetricsKey)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MetricsKey));
  OUTLINED_FUNCTION_21_24();
  v18 = v17 & ~v16;
  v19 = OUTLINED_FUNCTION_72_16();
  *(_OWORD *)(v19 + 16) = xmmword_21AFE7DA0;
  v20 = (_QWORD *)(v19 + v18);
  *v20 = 0xD000000000000011;
  v20[1] = 0x800000021AFF7A90;
  static MetricsKey.trainingAccuracy.getter();
  v21 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v0 + 80) = v21;
  if (__swift_getEnumTagSinglePayload(v15, 1, v14) != 1)
  {
    v22 = *(_QWORD *)(v0 + 224);
    v23 = *(_QWORD *)(v0 + 144);
    static MetricsKey.validationAccuracy.getter();
    __swift_storeEnumTagSinglePayload(v22, 0, 1, v23);
    specialized Dictionary.subscript.setter(v22, 0xD000000000000013, 0x800000021AFF7AB0);
    v21 = *(_QWORD *)(v0 + 80);
  }
  v24 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v25 + *(int *)(v24 + 24)) = v21;
  type metadata accessor for OS_os_log();
  *(_QWORD *)(v25 + *(int *)(v24 + 20)) = OS_os_log.init(subsystem:category:)();
  Date.init()();
  TrainingTablePrinter.beginTable()();
  result = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  v26 = *(_QWORD *)&v9[*(int *)(result + 24)];
  if (v26 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v26)
    {
      v27 = 0;
      v28 = (_OWORD *)(v0 + 16);
      v70 = *(_QWORD *)(v0 + 176);
      v71 = (_OWORD *)(v0 + 48);
      v65 = *(_QWORD *)(v0 + 152);
      v68 = *(_QWORD *)(v0 + 128);
      v69 = v26;
      while (1)
      {
        v29 = MLHandActionClassifier.GraphCNN.iterateTraining(trainingData:validationData:epochCount:)(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 232), v27);
        specialized Dictionary.subscript.getter(0xD000000000000012, 0x800000021AFF16D0, v29, v28);
        if (!*(_QWORD *)(v0 + 40))
        {
          OUTLINED_FUNCTION_12_0();
          outlined destroy of URL?((uint64_t)v28, &demangling cache variable for type metadata for Any?);
          goto LABEL_19;
        }
        type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
        if ((OUTLINED_FUNCTION_18_40() & 1) == 0)
          break;
        static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(**(_QWORD **)(v0 + 112), *(double **)(v0 + 200));
        v30 = *(_QWORD *)(v0 + 184);
        v31 = *(_QWORD *)(v0 + 168);
        v32 = *(_QWORD *)(v0 + 112);
        outlined assign with take of MLClassifierMetrics(*(_QWORD *)(v0 + 200), v32 + *(int *)(v72 + 32));
        _MetricUtilities.ConfusionMatrixMeter.value(normalized:)();
        static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v30, *(_QWORD *)(*(_QWORD *)v32 + 16));
        v34 = v33;
        v35 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
        v35(v30, v31);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MetricsKey, Double)>);
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MetricsKey, Double));
        OUTLINED_FUNCTION_21_24();
        v39 = v38 & ~v37;
        v40 = OUTLINED_FUNCTION_72_16();
        *(_OWORD *)(v40 + 16) = xmmword_21AFE7DA0;
        v41 = v40 + v39;
        v42 = *(int *)(v36 + 48);
        static MetricsKey.trainingAccuracy.getter();
        *(_QWORD *)(v41 + v42) = v34;
        lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC5810], MEMORY[0x24BDC5820]);
        v43 = Dictionary.init(dictionaryLiteral:)();
        specialized Dictionary.subscript.getter(0xD000000000000014, 0x800000021AFF1720, v29, v71);
        OUTLINED_FUNCTION_12_0();
        if (*(_QWORD *)(v0 + 72))
        {
          if ((OUTLINED_FUNCTION_18_40() & 1) != 0)
          {
            static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(**(_QWORD **)(v0 + 112), *(double **)(v0 + 192));
            v44 = *(_QWORD *)(v0 + 184);
            v45 = *(_QWORD *)(v0 + 160);
            v66 = *(_QWORD *)(v0 + 168);
            v67 = *(_QWORD *)(v0 + 144);
            v46 = *(_QWORD *)(v0 + 112);
            outlined assign with take of MLClassifierMetrics(*(_QWORD *)(v0 + 192), v46 + *(int *)(v72 + 36));
            static MetricsKey.validationAccuracy.getter();
            _MetricUtilities.ConfusionMatrixMeter.value(normalized:)();
            static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v44, *(_QWORD *)(*(_QWORD *)v46 + 16));
            v48 = v47;
            v35(v44, v66);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v75 = v43;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v45, isUniquelyReferenced_nonNull_native, v48);
            v43 = v75;
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v45, v67);
            swift_release();
          }
        }
        else
        {
          outlined destroy of URL?((uint64_t)v71, &demangling cache variable for type metadata for Any?);
        }
        v50 = *(_QWORD *)(v0 + 136);
        v51 = *(_QWORD *)(v0 + 120);
        specialized _dictionaryUpCast<A, B, C, D>(_:)(v43);
        swift_bridgeObjectRelease();
        Event.init(origin:itemCount:totalItemCount:metrics:)();
        TrainingTablePrinter.print(_:)(v50);
        OUTLINED_FUNCTION_24_2();
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v50, v51);
        ++v27;
        v28 = (_OWORD *)(v0 + 16);
        if (v69 == v27)
          goto LABEL_16;
      }
      OUTLINED_FUNCTION_12_0();
LABEL_19:
      v56 = *(_QWORD *)(v0 + 248);
      v55 = *(_QWORD *)(v0 + 256);
      v57 = *(_QWORD *)(v0 + 232);
      v58 = *(_QWORD *)(v0 + 240);
      v59 = *(_QWORD *)(v0 + 216);
      v75 = 0;
      v76 = 0xE000000000000000;
      _StringGuts.grow(_:)(60);
      v60._countAndFlagsBits = 0xD00000000000003ALL;
      v60._object = (void *)0x800000021AFF8AD0;
      String.append(_:)(v60);
      *(_QWORD *)(v0 + 88) = v27;
      v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      v62 = v75;
      v63 = v76;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v64 = v62;
      *(_QWORD *)(v64 + 8) = v63;
      *(_OWORD *)(v64 + 16) = 0u;
      *(_OWORD *)(v64 + 32) = 0u;
      *(_BYTE *)(v64 + 48) = 0;
      swift_willThrow(0.0);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v59, type metadata accessor for TrainingTablePrinter);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v58);
      v12 = v57;
      goto LABEL_3;
    }
LABEL_16:
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_21AFE7DA0;
    v53 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v52 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v52 + 64) = v53;
    *(_QWORD *)(v52 + 32) = 3;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    v54 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 280) = v54;
    *v54 = v0;
    v54[1] = MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:);
    return MLHandActionClassifier.GraphCNN.compile()();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 112);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 216), type metadata accessor for TrainingTablePrinter);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);

  *(_QWORD *)(v6 + 16) = v1;
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  swift_task_dealloc();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 232);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 216), type metadata accessor for TrainingTablePrinter);
  OUTLINED_FUNCTION_24_45(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  outlined destroy of URL?(v2, &demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
  OUTLINED_FUNCTION_13_57();
  OUTLINED_FUNCTION_10();
  swift_task_dealloc();
  OUTLINED_FUNCTION_17();
  swift_task_dealloc();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 288) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 296) = a1;
  return OUTLINED_FUNCTION_70();
}

void MLHandActionClassifier.GraphCNN.evaluate(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t *);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (**v56)(uint64_t *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v3 = v1;
  v62 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LossReduction?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_36(v5, v50);
  v64 = type metadata accessor for Tensor();
  v6 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  OUTLINED_FUNCTION_6_65();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v55 = (char *)&v50 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v54 = (char *)&v50 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v52 = (char *)&v50 - v12;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  v13 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  OUTLINED_FUNCTION_64();
  v51 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_49();
  v18 = v17 - v16;
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_64();
  v66 = v20;
  v21 = OUTLINED_FUNCTION_22_39();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_49();
  v25 = v24 - v23;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v24 - v23, *MEMORY[0x24BE6B9A8], v21);
  v26 = v1 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  OUTLINED_FUNCTION_1_28();
  v63 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  Layer.prepare(for:)();
  OUTLINED_FUNCTION_25_11();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v25, v21);
  OUTLINED_FUNCTION_28_38();
  OUTLINED_FUNCTION_15_1();
  v27 = v68;
  v28 = _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v26);
  if (v27)
  {
LABEL_10:
    OUTLINED_FUNCTION_117_0();
  }
  else
  {
    v63 = v28;
    v50 = 0;
    v60 = v3;
    v61 = v18;
    v67 = v13;
    v59 = v2;
    v57 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
    v29 = v66;
    Dataset.makeIterator()();
    v56 = (void (**)(uint64_t *))(v29 + *(int *)(v58 + 44));
    v62 = lazy protocol witness table accessor for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator and conformance Batches<A>.Iterator();
    v68 = 0;
    LODWORD(v58) = *MEMORY[0x24BE6B9C8];
    v30 = 0.0;
    v31 = (uint64_t)v54;
    v32 = (uint64_t)v55;
    v33 = (uint64_t)v52;
    v34 = v53;
    v35 = v51;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator);
      dispatch thunk of IteratorProtocol.next()();
      if (v70)
      {
        v36 = *v56;
        v69 = v70;
        v37 = v61;
        v36(&v69);
        v38 = v37;
        swift_bridgeObjectRelease();
        v39 = v37;
        v40 = 0;
      }
      else
      {
        v38 = v61;
        v39 = v61;
        v40 = 1;
      }
      OUTLINED_FUNCTION_110_1(v39, v40);
      v41 = v67;
      if (__swift_getEnumTagSinglePayload(v38, 1, v34) == 1)
      {
        outlined destroy of URL?(v66, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
        goto LABEL_10;
      }
      v42 = v34;
      v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v35, v38, v34);
      v44 = MEMORY[0x22075B47C](v43);
      DataSample.features.getter();
      DataSample.labels.getter();
      MLHandActionClassifier.GraphCNN.callAsFunction(_:)();
      v45 = type metadata accessor for LossReduction();
      v46 = v65;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v65, v58, v45);
      __swift_storeEnumTagSinglePayload(v46, 0, 1, v45);
      v47 = v59;
      softmaxCrossEntropy(logits:labels:labelSmoothing:axis:reduction:)();
      outlined destroy of URL?(v46, &demangling cache variable for type metadata for LossReduction?);
      _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)();
      Tensor.scalar<A>(as:)();
      if (__OFADD__(v68, 1))
        break;
      v30 = v30 + *(float *)&v70;
      v48 = (void *)v44;
      v49 = v68;
      OUTLINED_FUNCTION_88_5(v47);
      OUTLINED_FUNCTION_88_5(v32);
      OUTLINED_FUNCTION_88_5(v31);
      OUTLINED_FUNCTION_88_5(v33);
      objc_autoreleasePoolPop(v48);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v35, v42);
      v68 = v49 + 1;
      v34 = v42;
    }
    __break(1u);
  }
}

Swift::Void __swiftcall MLHandActionClassifier.GraphCNN.initDevice()()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(char *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21[3];

  v3 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  v8 = type metadata accessor for ComputeDevice();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_6_65();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v20 - v11;
  static ComputeDevice.gpu.getter();
  if (__swift_getEnumTagSinglePayload(v7, 1, v8) == 1)
  {
    static ComputeDevice.cpu.getter();
    outlined destroy of URL?(v7, &demangling cache variable for type metadata for ComputeDevice?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v12, v7, v8);
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static MLHandActionClassifier.logger);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v1, v12, v8);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v20[1] = v3;
    v17 = (uint8_t *)v16;
    v21[0] = swift_slowAlloc();
    *(_DWORD *)v17 = 136315138;
    v20[0] = v17 + 4;
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type ComputeDevice and conformance ComputeDevice, (uint64_t (*)(uint64_t))MEMORY[0x24BE6B988], MEMORY[0x24BE6B998]);
    v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v20[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_55();
    _os_log_impl(&dword_21ADEE000, v14, v15, "Using %s to create model", v17, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_9_6();
  }
  OUTLINED_FUNCTION_11_55();

  swift_beginAccess();
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  Layer.place(on:)();
  swift_endAccess();
  v2(v12, v8);
}

void closure #1 in MLHandActionClassifier.GraphCNN.iterateTraining(trainingData:validationData:epochCount:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  v27 = a5;
  v24 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLHandActionClassifier.GraphCNN.train(_:)(a2);
  if (!v5)
  {
    v17 = v15;
    v26 = MEMORY[0x24BEE13C8];
    v25[0] = v16;
    specialized Dictionary.subscript.setter((uint64_t)v25, 0x676E696E69617274, 0xED000073736F6C5FLL);
    v22 = type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
    v26 = v22;
    v25[0] = v17;
    swift_retain();
    v23 = a3;
    specialized Dictionary.subscript.setter((uint64_t)v25, 0xD000000000000012, 0x800000021AFF16D0);
    MLHandActionClassifier.GraphCNN.adjustLearningRate(epoch:)(v24);
    outlined init with copy of Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?(v27, (uint64_t)v10);
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11) == 1)
    {
      swift_release();
      outlined destroy of URL?((uint64_t)v10, &demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
      MLHandActionClassifier.GraphCNN.evaluate(_:)((unint64_t)v14);
      v19 = v18;
      v26 = MEMORY[0x24BEE13C8];
      v25[0] = v20;
      specialized Dictionary.subscript.setter((uint64_t)v25, 0x69746164696C6176, 0xEF73736F6C5F6E6FLL);
      v26 = v22;
      v25[0] = v19;
      specialized Dictionary.subscript.setter((uint64_t)v25, 0xD000000000000014, 0x800000021AFF1720);
      swift_release();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
}

void MLHandActionClassifier.GraphCNN.train(_:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[2];
  char *v55;
  void (**v56)(uint64_t *);
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[3];
  uint64_t v75;

  v71 = a1;
  v2 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v65 = v4;
  v5 = type metadata accessor for Tensor();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v64 = (char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v54 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)v54 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v55 = (char *)v54 - v15;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  v73 = *(_QWORD *)(v67 - 8);
  MEMORY[0x24BDAC7A8](v67);
  OUTLINED_FUNCTION_36(v16, v54[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_64();
  v68 = v18;
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_64();
  v69 = v20;
  v21 = OUTLINED_FUNCTION_22_39();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_49();
  v25 = v24 - v23;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v24 - v23, *MEMORY[0x24BE6B9A0], v21);
  v70 = v1;
  v26 = (uint64_t)&v1[OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model];
  OUTLINED_FUNCTION_1_28();
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  v66 = v2;
  v62 = v27;
  v63 = v26;
  Layer.prepare(for:)();
  OUTLINED_FUNCTION_25_11();
  v28 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v29 = v71;
  v28(v25, v21);
  if (specialized Dataset.isEmpty.getter())
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v30 = 0xD000000000000036;
    *(_QWORD *)(v30 + 8) = 0x800000021AFF8840;
    *(_OWORD *)(v30 + 16) = 0u;
    *(_OWORD *)(v30 + 32) = 0u;
    *(_BYTE *)(v30 + 48) = 1;
    swift_willThrow(0.0);
LABEL_4:
    OUTLINED_FUNCTION_117_0();
    return;
  }
  v31 = v70;
  OUTLINED_FUNCTION_28_38();
  OUTLINED_FUNCTION_15_1();
  v32 = v61;
  v33 = _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v29);
  if (v32)
    goto LABEL_4;
  v61 = v33;
  v54[1] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  v34 = v69;
  Dataset.makeIterator()();
  v56 = (void (**)(uint64_t *))(v34 + *(int *)(v60 + 44));
  v58 = &v31[OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer];
  v35 = 0.0;
  v60 = lazy protocol witness table accessor for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator and conformance Batches<A>.Iterator();
  v71 = 0;
  v36 = (uint64_t)v55;
  v37 = v67;
  v59 = v11;
  v57 = v14;
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator);
    dispatch thunk of IteratorProtocol.next()();
    v38 = v68;
    if (v75)
    {
      v39 = *v56;
      v74[0] = v75;
      v39(v74);
      swift_bridgeObjectRelease();
      v40 = v38;
      v41 = 0;
    }
    else
    {
      v40 = v68;
      v41 = 1;
    }
    OUTLINED_FUNCTION_110_1(v40, v41);
    v42 = v72;
    v43 = v73;
    if (__swift_getEnumTagSinglePayload(v38, 1, v37) == 1)
    {
      outlined destroy of URL?(v69, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
      goto LABEL_4;
    }
    v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v42, v38, v37);
    v70 = (char *)MEMORY[0x22075B47C](v44);
    DataSample.features.getter();
    DataSample.labels.getter();
    v45 = v6;
    v46 = v5;
    v47 = v65;
    v48 = outlined init with copy of MLHandActionClassifier.GraphCNNModel(v63, v65);
    MEMORY[0x24BDAC7A8](v48);
    v54[-4] = v36;
    v54[-3] = (uint64_t)v14;
    v54[-2] = v61;
    v49 = v64;
    valueWithGradient<A>(at:of:)();
    v50 = v47;
    v5 = v46;
    v6 = v45;
    v51 = (uint64_t)v59;
    outlined destroy of MLHandPoseClassifier.ModelParameters(v50, type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v51, v49, v5);
    OUTLINED_FUNCTION_1_28();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
    SGD.update(_:with:)();
    swift_endAccess();
    OUTLINED_FUNCTION_25_11();
    swift_bridgeObjectRelease();
    Tensor.scalar<A>(as:)();
    v52 = v71;
    if (__OFADD__(v71, 1))
      break;
    v35 = v35 + *(float *)&v75;
    OUTLINED_FUNCTION_88_5(v51);
    v53 = (uint64_t)v57;
    OUTLINED_FUNCTION_88_5((uint64_t)v57);
    OUTLINED_FUNCTION_88_5(v36);
    objc_autoreleasePoolPop(v70);
    v37 = v67;
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v67);
    v71 = v52 + 1;
    v14 = (char *)v53;
  }
  __break(1u);
}

Swift::Void __swiftcall MLHandActionClassifier.GraphCNN.adjustLearningRate(epoch:)(Swift::Int epoch)
{
  uint64_t v1;
  uint64_t v3;
  Swift::Int *v4;
  float v5;
  Swift::Int v6;
  float *v7;

  if (one-time initialization token for adjustLearningRateSteps != -1)
    swift_once();
  v3 = *(_QWORD *)(static MLHandActionClassifier.GraphCNN.ModelTrainingInternalParameters.adjustLearningRateSteps + 16);
  if (v3)
  {
    v4 = (Swift::Int *)(static MLHandActionClassifier.GraphCNN.ModelTrainingInternalParameters.adjustLearningRateSteps
                      + 32);
    v5 = 0.01;
    do
    {
      v6 = *v4++;
      if (v6 <= epoch)
        v5 = v5 * 0.1;
      --v3;
    }
    while (v3);
  }
  else
  {
    v5 = 0.01;
  }
  v7 = (float *)(v1 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer);
  swift_beginAccess();
  *v7 = v5;
}

BOOL specialized Dataset.isEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  uint64_t v13;
  uint64_t v14;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  Dataset.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator);
  lazy protocol witness table accessor for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator and conformance Batches<A>.Iterator();
  dispatch thunk of IteratorProtocol.next()();
  if (v14)
  {
    v6 = *(void (**)(uint64_t *))&v5[*(int *)(v3 + 44)];
    v13 = v14;
    v6(&v13);
    swift_bridgeObjectRelease();
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
    v8 = (uint64_t)v2;
    v9 = 0;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
    v8 = (uint64_t)v2;
    v9 = 1;
  }
  __swift_storeEnumTagSinglePayload(v8, v9, 1, v7);
  outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, keypoints: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v2, 1, v10);
  if (EnumTagSinglePayload != 1)
    outlined destroy of URL?((uint64_t)v2, &demangling cache variable for type metadata for DataSample<Tensor, Tensor>?);
  return EnumTagSinglePayload == 1;
}

uint64_t closure #1 in closure #1 in MLHandActionClassifier.GraphCNN.train(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LossReduction?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Tensor();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  Layer.callAsFunction(_:)();
  v13 = *MEMORY[0x24BE6B9C8];
  v14 = type metadata accessor for LossReduction();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v8, v13, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v14);
  softmaxCrossEntropy(logits:labels:labelSmoothing:axis:reduction:)();
  outlined destroy of URL?((uint64_t)v8, &demangling cache variable for type metadata for LossReduction?);
  v17 = a4;
  v18 = v12;
  v19 = a3;
  withoutGradient<A>(_:)();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t partial apply for closure #1 in closure #1 in MLHandActionClassifier.GraphCNN.train(_:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in MLHandActionClassifier.GraphCNN.train(_:)(a1, v1[2], v1[3], v1[4]);
}

void partial apply for closure #1 in closure #1 in closure #1 in MLHandActionClassifier.GraphCNN.train(_:)()
{
  _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)();
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x24BEE4AF8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x24BEE4AF8];
LABEL_6:
  v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_11_55()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_13_57()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_18_40()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_22_39()
{
  return type metadata accessor for LearningPhase();
}

uint64_t OUTLINED_FUNCTION_24_45@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_28_38()
{
  return type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
}

uint64_t *initializeBufferWithCopyOfBuffer for TrainingTablePrinter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    v11 = v10;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TrainingTablePrinter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrainingTablePrinter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v10 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrainingTablePrinter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TrainingTablePrinter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for TrainingTablePrinter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingTablePrinter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_21AFA6234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    OUTLINED_FUNCTION_51_3(a1, a2, v6);
  }
  else
  {
    OUTLINED_FUNCTION_19_42(*(_QWORD *)(a1 + *(int *)(a3 + 20)));
    OUTLINED_FUNCTION_125();
  }
}

uint64_t storeEnumTagSinglePayload for TrainingTablePrinter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AFA629C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_25_16();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    OUTLINED_FUNCTION_16_6(v5, v4, v4, v8);
  }
  else
  {
    *(_QWORD *)(v5 + *(int *)(a4 + 20)) = (v4 - 1);
    OUTLINED_FUNCTION_125();
  }
}

uint64_t type metadata accessor for TrainingTablePrinter(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for TrainingTablePrinter);
}

uint64_t type metadata completion function for TrainingTablePrinter()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized EnumeratedSequence.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = -1;
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  v7 = -1 << v2;
  if (-v7 < 64)
    v3 = ~(-1 << -(char)v7);
  a2[1] = result;
  a2[2] = ~v7;
  a2[3] = 0;
  a2[4] = v3 & v5;
  a2[5] = 0;
  return result;
}

uint64_t specialized EnumeratedSequence.Iterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t result;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v2;
  if (!v1)
  {
    v6 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_26;
    v7 = (unint64_t)(v0[2] + 64) >> 6;
    if (v6 < v7)
    {
      v8 = v0[1];
      v9 = *(_QWORD *)(v8 + 8 * v6);
      if (v9)
      {
LABEL_8:
        v4 = (v9 - 1) & v9;
        v3 = v6;
        goto LABEL_3;
      }
      v10 = v2 + 2;
      v3 = v2 + 1;
      if (v2 + 2 < v7)
      {
        v9 = *(_QWORD *)(v8 + 8 * v10);
        if (v9)
        {
LABEL_11:
          v6 = v10;
          goto LABEL_8;
        }
        v3 = v2 + 2;
        if (v2 + 3 < v7)
        {
          v9 = *(_QWORD *)(v8 + 8 * (v2 + 3));
          if (v9)
          {
            v6 = v2 + 3;
            goto LABEL_8;
          }
          v10 = v2 + 4;
          v3 = v2 + 3;
          if (v2 + 4 < v7)
          {
            v9 = *(_QWORD *)(v8 + 8 * v10);
            if (v9)
              goto LABEL_11;
            v6 = v2 + 5;
            v3 = v2 + 4;
            if (v2 + 5 < v7)
            {
              v9 = *(_QWORD *)(v8 + 8 * v6);
              if (v9)
                goto LABEL_8;
              v3 = v7 - 1;
              v11 = v2 + 6;
              while (v11 < v7)
              {
                v9 = *(_QWORD *)(v8 + 8 * v11++);
                if (v9)
                {
                  v6 = v11 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    v5 = 0;
    v0[3] = v3;
    v0[4] = 0;
    return v5;
  }
  v4 = (v1 - 1) & v1;
LABEL_3:
  v0[3] = v3;
  v0[4] = v4;
  v5 = v0[5];
  if (!__OFADD__(v5, 1))
  {
    v0[5] = v5 + 1;
    swift_bridgeObjectRetain();
    return v5;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized EnumeratedSequence.Iterator.next()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  _QWORD *v36;

  v36 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: MetricsKey));
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MetricsKey();
  v9 = *(_QWORD *)(v8 - 8);
  result = MEMORY[0x24BDAC7A8](v8);
  v34 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v4;
  v13 = *v1;
  v12 = v1[1];
  v15 = v1[2];
  v14 = v1[3];
  v16 = v1[4];
  if (!v16)
  {
    v28 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_32;
    v29 = (unint64_t)(v15 + 64) >> 6;
    if (v28 >= v29)
    {
      v17 = 0;
      v19 = 1;
      goto LABEL_4;
    }
    v30 = *(_QWORD *)(v12 + 8 * v28);
    if (v30)
      goto LABEL_12;
    v31 = v14 + 2;
    if (v14 + 2 < v29)
    {
      v30 = *(_QWORD *)(v12 + 8 * v31);
      if (v30)
        goto LABEL_16;
      if (v14 + 3 >= v29)
        goto LABEL_29;
      v30 = *(_QWORD *)(v12 + 8 * (v14 + 3));
      if (v30)
      {
        v28 = v14 + 3;
        goto LABEL_12;
      }
      v31 = v14 + 4;
      if (v14 + 4 >= v29)
      {
        v17 = 0;
        v19 = 1;
        v14 += 3;
        goto LABEL_4;
      }
      v30 = *(_QWORD *)(v12 + 8 * v31);
      if (v30)
      {
LABEL_16:
        v28 = v31;
LABEL_12:
        v17 = (v30 - 1) & v30;
        v18 = __clz(__rbit64(v30)) + (v28 << 6);
        v14 = v28;
        goto LABEL_3;
      }
      v28 = v14 + 5;
      if (v14 + 5 >= v29)
      {
LABEL_29:
        v17 = 0;
        v19 = 1;
        v14 = v31;
        goto LABEL_4;
      }
      v30 = *(_QWORD *)(v12 + 8 * v28);
      if (v30)
        goto LABEL_12;
      v28 = v29 - 1;
      v32 = v14 + 6;
      while (v32 < v29)
      {
        v30 = *(_QWORD *)(v12 + 8 * v32++);
        if (v30)
        {
          v28 = v32 - 1;
          goto LABEL_12;
        }
      }
    }
    v17 = 0;
    v19 = 1;
    v14 = v28;
    goto LABEL_4;
  }
  v17 = (v16 - 1) & v16;
  v18 = __clz(__rbit64(v16)) | (v14 << 6);
LABEL_3:
  (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, *(_QWORD *)(v13 + 56) + *(_QWORD *)(v9 + 72) * v18, v8);
  v19 = 0;
LABEL_4:
  __swift_storeEnumTagSinglePayload((uint64_t)v7, v19, 1, v8);
  *v1 = v13;
  v1[1] = v12;
  v1[2] = v15;
  v1[3] = v14;
  v1[4] = v17;
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
  {
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v7, &demangling cache variable for type metadata for MetricsKey?);
    v20 = (uint64_t)v36;
    v21 = 1;
    return __swift_storeEnumTagSinglePayload(v20, v21, 1, v2);
  }
  v22 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v23 = v34;
  v22(v34, v7, v8);
  v24 = &v35[*(int *)(v2 + 48)];
  v25 = v1[5];
  result = ((uint64_t (*)(char *, char *, uint64_t))v22)(v24, v23, v8);
  if (!__OFADD__(v25, 1))
  {
    v1[5] = v25 + 1;
    v26 = v36;
    v27 = (char *)v36 + *(int *)(v2 + 48);
    *v36 = v25;
    v22(v27, v24, v8);
    v20 = (uint64_t)v26;
    v21 = 0;
    return __swift_storeEnumTagSinglePayload(v20, v21, 1, v2);
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized EnumeratedSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)(v1 + 8);
  result = CMLSequence.size.getter();
  if (v3 == result)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = -1;
    return result;
  }
  swift_retain();
  CMLSequence.value(at:)(v3);
  swift_release();
  MLDataValue.init(_:)();
  swift_retain();
  v5 = CMLSequence.size.getter();
  result = swift_release();
  if (v3 < 0 || v3 >= v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  *(_QWORD *)(v1 + 8) = v3 + 1;
  v6 = *(_QWORD *)(v1 + 16);
  if (__OFADD__(v6, 1))
  {
LABEL_9:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  *(_QWORD *)(v1 + 16) = v6 + 1;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  return result;
}

Swift::Void __swiftcall log(_:type:)(Swift::String _, os_log_type_t type)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v4 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v4 + 16) = xmmword_21AFE7DA0;
  v5 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v4 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v4 + 32) = countAndFlagsBits;
  *(_QWORD *)(v4 + 40) = object;
  swift_bridgeObjectRetain();
  print(_:separator:terminator:)();
  OUTLINED_FUNCTION_30();
  type metadata accessor for OS_os_log();
  v6 = (void *)static OS_os_log.default.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v7 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v7 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v7 + 56) = v5;
  *(_QWORD *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v7 + 32) = countAndFlagsBits;
  *(_QWORD *)(v7 + 40) = object;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_12_50();

  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _TablePrinter.beginTable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = type metadata accessor for _TablePrinter(0);
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v2 = OUTLINED_FUNCTION_9_1();
  v3 = MEMORY[0x24BEE1768];
  *(_OWORD *)(v2 + 16) = xmmword_21AFE7DA0;
  v4 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(v2 + 56) = v3;
  *(_QWORD *)(v2 + 64) = v4;
  *(_QWORD *)(v2 + 32) = 0;
  os_log(_:dso:log:type:_:)();
  OUTLINED_FUNCTION_10_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  OUTLINED_FUNCTION_24_46();
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = 0xEC000000656D6954;
  v8 = (uint64_t *)(v6 + 40);
  v9 = (uint64_t *)(v0 + *(int *)(v1 + 28));
  v17 = *v9;
  v18 = v9[1];
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 0x737365636F725020;
  v10._object = (void *)0xEA00000000006465;
  String.append(_:)(v10);
  *(_QWORD *)(inited + 48) = v17;
  *(_QWORD *)(inited + 56) = v18;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_18_41();
  OUTLINED_FUNCTION_10_3();
  *(_QWORD *)(inited + 64) = 0xD000000000000010;
  *(_QWORD *)(inited + 72) = 0x800000021AFF8B90;
  swift_bridgeObjectRetain();
  v11 = 0;
  v12 = MEMORY[0x24BEE45B8];
  v13 = MEMORY[0x24BEE0D00];
  do
  {
    v15 = *(v8 - 1);
    v14 = *v8;
    swift_bridgeObjectRetain();
    static os_log_type_t.info.getter();
    v16 = OUTLINED_FUNCTION_0_75();
    *(_OWORD *)(v16 + 16) = xmmword_21AFE7F40;
    *(_QWORD *)(v16 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v16 + 64) = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v16 + 32) = 1;
    *(_QWORD *)(v16 + 96) = MEMORY[0x24BEE4568];
    *(_QWORD *)(v16 + 104) = v12;
    *(_QWORD *)(v16 + 72) = v11;
    *(_QWORD *)(v16 + 136) = v13;
    *(_QWORD *)(v16 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v16 + 112) = v15;
    *(_QWORD *)(v16 + 120) = v14;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_27_46();
    OUTLINED_FUNCTION_11_56();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_80();
    v8 += 2;
    ++v11;
  }
  while (v11 != 3);
  OUTLINED_FUNCTION_30();
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
}

Swift::Void __swiftcall _TablePrinter.printRow(currentFileIndex:)(Swift::Int currentFileIndex)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _QWORD *v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  _QWORD *v27;
  uint64_t v28;

  type metadata accessor for _TablePrinter(0);
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v3 = OUTLINED_FUNCTION_0_75();
  v4 = MEMORY[0x24BEE1768];
  *(_OWORD *)(v3 + 16) = xmmword_21AFE7F40;
  v5 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(v3 + 56) = v4;
  *(_QWORD *)(v3 + 64) = v5;
  *(_QWORD *)(v3 + 32) = 2;
  *(_QWORD *)(v3 + 96) = v4;
  *(_QWORD *)(v3 + 104) = v5;
  *(_QWORD *)(v3 + 72) = 0;
  Date.timeIntervalSinceNow.getter();
  v6 = MEMORY[0x24BEE1448];
  *(_QWORD *)(v3 + 136) = MEMORY[0x24BEE13C8];
  *(_QWORD *)(v3 + 144) = v6;
  *(double *)(v3 + 112) = -v7;
  OUTLINED_FUNCTION_2_66();
  OUTLINED_FUNCTION_10_3();
  static os_log_type_t.info.getter();
  v8 = (__n128 *)OUTLINED_FUNCTION_0_75();
  OUTLINED_FUNCTION_13_58(v8, v9, v10, v11, v12, v13, v14, v15, v16);
  v17[9] = 1;
  v17[17] = v4;
  v17[18] = v5;
  v17[14] = currentFileIndex;
  OUTLINED_FUNCTION_2_66();
  OUTLINED_FUNCTION_10_3();
  static os_log_type_t.info.getter();
  v18 = (__n128 *)OUTLINED_FUNCTION_0_75();
  OUTLINED_FUNCTION_13_58(v18, v19, v20, v21, v22, v23, v24, v25, v26);
  v27[9] = 2;
  v28 = *v1;
  v27[17] = v4;
  v27[18] = v5;
  v27[14] = v28;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for _TablePrinter(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for _TablePrinter);
}

Swift::String __swiftcall getOSVersion()()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  uint64_t v8;
  void *v9;
  Swift::String result;
  uint64_t v11;
  void *v12;

  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  OUTLINED_FUNCTION_10_54(v0);

  v11 = OUTLINED_FUNCTION_47_3();
  v12 = v1;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_51_6();
  OUTLINED_FUNCTION_12_0();
  v2 = OUTLINED_FUNCTION_23_44();
  OUTLINED_FUNCTION_10_54(v2);

  OUTLINED_FUNCTION_47_3();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_18_41();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_51_6();
  OUTLINED_FUNCTION_12_0();
  v3 = OUTLINED_FUNCTION_23_44();
  OUTLINED_FUNCTION_10_54(v3);

  v4 = OUTLINED_FUNCTION_47_3();
  v6 = v5;
  OUTLINED_FUNCTION_31_2();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  OUTLINED_FUNCTION_12_0();
  swift_bridgeObjectRelease();
  v8 = v11;
  v9 = v12;
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

Swift::Void __swiftcall TrainingTablePrinter.beginTable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v18 = type metadata accessor for TrainingTablePrinter(0);
  static os_log_type_t.info.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v0 = OUTLINED_FUNCTION_9_1();
  v1 = MEMORY[0x24BEE1768];
  *(_OWORD *)(v0 + 16) = xmmword_21AFE7DA0;
  v2 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = v2;
  *(_QWORD *)(v0 + 32) = 0;
  os_log(_:dso:log:type:_:)();
  OUTLINED_FUNCTION_10_3();
  static os_log_type_t.info.getter();
  v3 = OUTLINED_FUNCTION_0_75();
  *(_OWORD *)(v3 + 16) = xmmword_21AFE7F40;
  *(_QWORD *)(v3 + 56) = v1;
  *(_QWORD *)(v3 + 64) = v2;
  *(_QWORD *)(v3 + 32) = 1;
  *(_QWORD *)(v3 + 96) = v1;
  *(_QWORD *)(v3 + 104) = v2;
  *(_QWORD *)(v3 + 72) = 0;
  v4 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v3 + 136) = MEMORY[0x24BEE0D00];
  v5 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v3 + 144) = v5;
  *(_QWORD *)(v3 + 112) = 0x6F69746172657449;
  *(_QWORD *)(v3 + 120) = 0xE90000000000006ELL;
  OUTLINED_FUNCTION_27_46();
  OUTLINED_FUNCTION_11_56();
  OUTLINED_FUNCTION_80();
  static os_log_type_t.info.getter();
  v6 = OUTLINED_FUNCTION_0_75();
  *(_OWORD *)(v6 + 16) = xmmword_21AFE7F40;
  *(_QWORD *)(v6 + 56) = v1;
  *(_QWORD *)(v6 + 64) = v2;
  *(_QWORD *)(v6 + 32) = 1;
  *(_QWORD *)(v6 + 96) = v1;
  *(_QWORD *)(v6 + 104) = v2;
  *(_QWORD *)(v6 + 72) = 1;
  *(_QWORD *)(v6 + 136) = v4;
  *(_QWORD *)(v6 + 144) = v5;
  OUTLINED_FUNCTION_24_46();
  *(_QWORD *)(v7 + 112) = v8;
  *(_QWORD *)(v7 + 120) = 0xEC000000656D6954;
  OUTLINED_FUNCTION_27_46();
  OUTLINED_FUNCTION_11_56();
  OUTLINED_FUNCTION_80();
  specialized EnumeratedSequence.makeIterator()(*(_QWORD *)(v19 + *(int *)(v18 + 24)), &v20);
  swift_bridgeObjectRetain_n();
  v9 = specialized EnumeratedSequence.Iterator.next()();
  if (v11)
  {
    v12 = v9;
    v13 = v10;
    v14 = v11;
    while (1)
    {
      static os_log_type_t.info.getter();
      v15 = OUTLINED_FUNCTION_0_75();
      *(_OWORD *)(v15 + 16) = xmmword_21AFE7F40;
      *(_QWORD *)(v15 + 56) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v15 + 64) = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v15 + 32) = 1;
      if (v12 < 0)
        break;
      *(_QWORD *)(v15 + 96) = MEMORY[0x24BEE4568];
      *(_QWORD *)(v15 + 104) = MEMORY[0x24BEE45B8];
      *(_QWORD *)(v15 + 72) = v12 + 2;
      *(_QWORD *)(v15 + 136) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v15 + 144) = v5;
      *(_QWORD *)(v15 + 112) = v13;
      *(_QWORD *)(v15 + 120) = v14;
      OUTLINED_FUNCTION_27_46();
      OUTLINED_FUNCTION_12_50();
      OUTLINED_FUNCTION_12_0();
      v12 = specialized EnumeratedSequence.Iterator.next()();
      v13 = v16;
      v14 = v17;
      if (!v17)
        goto LABEL_5;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_5:
    outlined consume of [String : [Int]].Iterator._Variant();
    swift_bridgeObjectRelease();
  }
}

uint64_t TrainingTablePrinter.print(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  Swift::String v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v39 = a1;
  v1 = type metadata accessor for MetricsKey();
  v37 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: MetricsKey)?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (_QWORD *)((char *)v33 - v6);
  v34 = type metadata accessor for TrainingTablePrinter(0);
  v36 = *(int *)(v34 + 20);
  LODWORD(v35) = static os_log_type_t.info.getter();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v9 = OUTLINED_FUNCTION_0_75();
  v38 = xmmword_21AFE7F40;
  *(_OWORD *)(v9 + 16) = xmmword_21AFE7F40;
  v10 = MEMORY[0x24BEE1768];
  v11 = MEMORY[0x24BEE17F0];
  OUTLINED_FUNCTION_14_54((_QWORD *)v9)[9] = 0;
  v12 = Event.itemCount.getter();
  *(_QWORD *)(v9 + 136) = v10;
  *(_QWORD *)(v9 + 144) = v11;
  *(_QWORD *)(v9 + 112) = v12;
  OUTLINED_FUNCTION_12_50();
  OUTLINED_FUNCTION_12_0();
  static os_log_type_t.info.getter();
  v35 = v8;
  v13 = OUTLINED_FUNCTION_0_75();
  *(_OWORD *)(v13 + 16) = v38;
  OUTLINED_FUNCTION_14_54((_QWORD *)v13)[9] = 1;
  v14 = v33[1];
  Date.timeIntervalSinceNow.getter();
  v15 = MEMORY[0x24BEE1448];
  *(_QWORD *)(v13 + 136) = MEMORY[0x24BEE13C8];
  *(_QWORD *)(v13 + 144) = v15;
  *(double *)(v13 + 112) = -v16;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  v17 = v14;
  v18 = *(_QWORD *)(v14 + *(int *)(v34 + 24));
  specialized EnumeratedSequence.makeIterator()(v18, &v43);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_26_40();
  OUTLINED_FUNCTION_17_36();
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: MetricsKey));
  OUTLINED_FUNCTION_16_47(v19);
  if (v20)
    return outlined consume of [String : [Int]].Iterator._Variant();
  v21 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  while (1)
  {
    v22 = *v7;
    v21(v3, (char *)v7 + *(int *)(v18 + 48), v1);
    v23 = Event.metrics.getter();
    if (*(_QWORD *)(v23 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(), (v25 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v23 + 56) + 32 * v24, (uint64_t)&v41);
    }
    else
    {
      v41 = 0u;
      v42 = 0u;
    }
    OUTLINED_FUNCTION_30();
    if (!*((_QWORD *)&v42 + 1))
      break;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_15;
    v26 = v40;
    v18 = *(_QWORD *)(v17 + v36);
    static os_log_type_t.info.getter();
    v27 = OUTLINED_FUNCTION_0_75();
    *(_OWORD *)(v27 + 16) = v38;
    v28 = MEMORY[0x24BEE1768];
    *(_QWORD *)(v27 + 56) = MEMORY[0x24BEE1768];
    v29 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v27 + 64) = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v27 + 32) = 2;
    if (__OFADD__(v22, 2))
    {
      __break(1u);
      break;
    }
    *(_QWORD *)(v27 + 96) = v28;
    *(_QWORD *)(v27 + 104) = v29;
    *(_QWORD *)(v27 + 72) = v22 + 2;
    *(_QWORD *)(v27 + 136) = MEMORY[0x24BEE13C8];
    *(_QWORD *)(v27 + 144) = MEMORY[0x24BEE1448];
    *(_QWORD *)(v27 + 112) = v26;
    OUTLINED_FUNCTION_12_50();
    OUTLINED_FUNCTION_12_0();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v3, v1);
    OUTLINED_FUNCTION_26_40();
    OUTLINED_FUNCTION_17_36();
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: MetricsKey));
    OUTLINED_FUNCTION_16_47(v30);
    if (v20)
      return outlined consume of [String : [Int]].Iterator._Variant();
  }
  outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)&v41, &demangling cache variable for type metadata for Sendable?);
LABEL_15:
  *(_QWORD *)&v41 = 0;
  *((_QWORD *)&v41 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v32._object = (void *)0x800000021AFF8C10;
  v32._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v32);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_51_6();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of (offset: Int, element: MetricsKey)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: MetricsKey)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for _TablePrinter(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = a3[7];
    v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)v4 + v11) = (uint64_t)v13;
    v14 = (uint64_t *)((char *)v4 + v12);
    v15 = (uint64_t *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = v13;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for _TablePrinter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for _TablePrinter(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = *(void **)((char *)a2 + v10);
  *(_QWORD *)((char *)a1 + v10) = v12;
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v12;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _TablePrinter(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(void **)((char *)a2 + v10);
  v12 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = v11;
  v13 = v11;

  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for _TablePrinter(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

_QWORD *assignWithTake for _TablePrinter(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);

  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _TablePrinter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_21AFA7B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_25_16();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    OUTLINED_FUNCTION_51_3(v4 + *(int *)(a3 + 20), v3, v6);
  }
  else
  {
    OUTLINED_FUNCTION_19_42(*(_QWORD *)(v4 + *(int *)(a3 + 24)));
    OUTLINED_FUNCTION_125();
  }
}

uint64_t storeEnumTagSinglePayload for _TablePrinter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AFA7B74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_25_16();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    OUTLINED_FUNCTION_16_6(v5 + *(int *)(a4 + 20), v4, v4, v8);
  }
  else
  {
    *(_QWORD *)(v5 + *(int *)(a4 + 24)) = (v4 - 1);
    OUTLINED_FUNCTION_125();
  }
}

uint64_t type metadata completion function for _TablePrinter()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_75()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_2_66()
{
  return os_log(_:dso:log:type:_:)();
}

id OUTLINED_FUNCTION_10_54(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 660));
}

uint64_t OUTLINED_FUNCTION_11_56()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t OUTLINED_FUNCTION_12_50()
{
  return os_log(_:dso:log:type:_:)();
}

__n128 OUTLINED_FUNCTION_13_58(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 result;

  result = a9;
  a1[1] = a9;
  a1[3].n128_u64[1] = v9;
  a1[4].n128_u64[0] = v10;
  a1[2].n128_u64[0] = v11;
  a1[6].n128_u64[0] = v9;
  a1[6].n128_u64[1] = v10;
  return result;
}

_QWORD *OUTLINED_FUNCTION_14_54(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  result[7] = v1;
  result[8] = v2;
  result[4] = 2;
  result[12] = v1;
  result[13] = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_16_47(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_17_36()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of (offset: Int, element: MetricsKey)?(v0, v1);
}

void OUTLINED_FUNCTION_18_41()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_19_42@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF)
    LODWORD(a1) = -1;
  return (a1 + 1);
}

id OUTLINED_FUNCTION_23_44()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 135));
}

uint64_t OUTLINED_FUNCTION_26_40()
{
  _QWORD *v0;

  return specialized EnumeratedSequence.Iterator.next()(v0);
}

uint64_t BlobMetadata.dataType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(_DWORD *)(v0 + 4);
  if (v1 >= 4)
    return 3;
  else
    return 0x2010003u >> (8 * v1);
}

uint64_t getEnumTagSinglePayload for BlobMetadata(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BlobMetadata(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BlobMetadata()
{
  return &type metadata for BlobMetadata;
}

ValueMetadata *type metadata accessor for Header()
{
  return &type metadata for Header;
}

uint64_t MLTextClassifier.ModelParameters.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_66_17() + 36));
}

uint64_t type metadata accessor for MLTextClassifier.ModelParameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLTextClassifier.ModelParameters;
  if (!type metadata singleton initialization cache for MLTextClassifier.ModelParameters)
    return swift_getSingletonMetadata();
  return result;
}

void MLTextClassifier.ModelParameters.init(validation:algorithm:language:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v17[4];

  v8 = OUTLINED_FUNCTION_3_57();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)OUTLINED_FUNCTION_66_17();
  v13 = v12[5];
  v14 = (_OWORD *)(a4 + v12[6]);
  *v14 = 0u;
  v14[1] = 0u;
  v15 = (_QWORD *)(a4 + v12[7]);
  *v15 = 0;
  v15[1] = 0;
  OUTLINED_FUNCTION_10_55((uint64_t)v12);
  outlined init with copy of MLTrainingSessionParameters(a2, a4, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  *(_QWORD *)(a4 + v13) = a3;
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  *v15 = 0;
  v15[1] = 0;
  v17[3] = v8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v17);
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v11, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v17, (uint64_t)v14);
  outlined destroy of MLClassifierMetrics.Contents(a2, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  outlined destroy of MLClassifierMetrics.Contents(a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  OUTLINED_FUNCTION_9_5();
}

uint64_t MLTextClassifier.ModelParameters.validation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;

  v1 = OUTLINED_FUNCTION_66_17();
  result = outlined init with copy of Any?(v0 + *(int *)(v1 + 24), (uint64_t)&v3);
  if (v4)
  {
    outlined init with take of Any(&v3, &v5);
    OUTLINED_FUNCTION_3_57();
    return OUTLINED_FUNCTION_16_0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLTextClassifier.ModelParameters.init(validationData:algorithm:language:textColumnValidationData:labelColumnValidationData:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v14;
  int *v15;
  _OWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v31[4];

  v28 = *(void **)a1;
  v14 = *(unsigned __int8 *)(a1 + 8);
  v15 = (int *)OUTLINED_FUNCTION_66_17();
  v16 = (_OWORD *)(a8 + v15[6]);
  *v16 = 0u;
  v16[1] = 0u;
  v29 = (uint64_t)v16;
  v17 = (_QWORD *)(a8 + v15[7]);
  *v17 = 0;
  v17[1] = 0;
  v18 = (_QWORD *)(a8 + v15[8]);
  *v18 = 0;
  v18[1] = 0;
  v19 = a8 + v15[9];
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  if (v14 != 255)
  {
    if (a5)
    {
      if (a7)
        goto LABEL_4;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v25 = OUTLINED_FUNCTION_37_20();
      *(_OWORD *)(v25 + 16) = xmmword_21AFE7DA0;
      *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
      OUTLINED_FUNCTION_9_60(v25, 0xD00000000000005CLL);
      OUTLINED_FUNCTION_101();
      if (a7)
        goto LABEL_4;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v26 = OUTLINED_FUNCTION_37_20();
    *(_OWORD *)(v26 + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(v26 + 56) = MEMORY[0x24BEE0D00];
    OUTLINED_FUNCTION_9_60(v26, 0xD00000000000005ELL);
    OUTLINED_FUNCTION_101();
  }
LABEL_4:
  v20 = v15[5];
  outlined init with copy of MLTrainingSessionParameters(a2, a8, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  *(_QWORD *)(a8 + v20) = a3;
  v31[3] = OUTLINED_FUNCTION_3_57();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v31);
  v22 = boxed_opaque_existential_0;
  if (v14 == 255)
  {
    *boxed_opaque_existential_0 = 0;
    boxed_opaque_existential_0[1] = 0;
    *((_WORD *)boxed_opaque_existential_0 + 8) = 256;
    swift_storeEnumTagMultiPayload();
    v24 = a3;
  }
  else
  {
    v23 = a3;
    if (MLDataTable.size.getter())
    {
      *v22 = (uint64_t)v28;
      *((_BYTE *)v22 + 8) = v14 & 1;
      v22[2] = 1954047348;
      v22[3] = 0xE400000000000000;
      v22[4] = 0x6C6562616CLL;
      v22[5] = 0xE500000000000000;
    }
    else
    {
      outlined consume of MLDataTable?(v28, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  outlined assign with take of Any?((uint64_t)v31, v29);
  MLTextClassifier.ModelParameters.textColumnValidationData.setter(a4, a5);
  MLTextClassifier.ModelParameters.labelColumnValidationData.setter(a6, a7);

  OUTLINED_FUNCTION_19_43(v27, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
}

unint64_t MLTextClassifier.ModelParameters.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  id v3;
  void *v4;
  Swift::String v5;
  Swift::String v7;

  MLTextClassifier.ModelAlgorithmType.description.getter();
  String.append(_:)(v1);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_84();
  v2._countAndFlagsBits = 0x676175676E614C0ALL;
  v2._object = (void *)0xEB00000000203A65;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_15_0();
  v3 = *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_66_17() + 20));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLLanguage?);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  v7._object = v4;
  v5._countAndFlagsBits = 10;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  OUTLINED_FUNCTION_84();
  String.append(_:)(v7);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_101();
  return 0xD000000000000010;
}

void MLTextClassifier.ModelParameters.algorithm.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  outlined init with copy of MLTrainingSessionParameters(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
}

uint64_t MLTextClassifier.ModelParameters.algorithm.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of MLTextClassifier.ModelAlgorithmType(a1, v1);
}

uint64_t (*MLTextClassifier.ModelParameters.algorithm.modify())(_QWORD)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLTextClassifier.ModelParameters.language.getter()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_66_17() + 20));
  OUTLINED_FUNCTION_22();
}

void MLTextClassifier.ModelParameters.language.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_66_17() + 20);

  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLTextClassifier.ModelParameters.language.modify())(_QWORD)
{
  OUTLINED_FUNCTION_66_17();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t key path setter for MLTextClassifier.ModelParameters.validation : MLTextClassifier.ModelParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v7;

  v2 = type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v4, v5);
  return MLTextClassifier.ModelParameters.validation.setter((uint64_t)v4);
}

uint64_t MLTextClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v7[4];

  v3 = OUTLINED_FUNCTION_66_17();
  v4 = (_QWORD *)(v1 + *(int *)(v3 + 28));
  swift_bridgeObjectRelease();
  *v4 = 0;
  v4[1] = 0;
  v7[3] = OUTLINED_FUNCTION_3_57();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v7);
  outlined init with take of MLHandPoseClassifier.ModelParameters(a1, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  return outlined assign with take of Any?((uint64_t)v7, v1 + *(int *)(v3 + 24));
}

void MLTextClassifier.ModelParameters.validation.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[8] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(OUTLINED_FUNCTION_3_57() - 8) + 64);
  v3[9] = malloc(v4);
  v3[10] = malloc(v4);
  v5 = OUTLINED_FUNCTION_66_17();
  outlined init with copy of Any?(v1 + *(int *)(v5 + 24), (uint64_t)(v3 + 4));
  if (v3[7])
  {
    outlined init with take of Any((_OWORD *)v3 + 2, v3);
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_164();
  }
  else
  {
    __break(1u);
  }
}

void MLTextClassifier.ModelParameters.validation.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 72);
  v4 = *(void **)(*(_QWORD *)a1 + 80);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of MLTrainingSessionParameters(*(_QWORD *)(*(_QWORD *)a1 + 80), (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
    MLTextClassifier.ModelParameters.validation.setter((uint64_t)v3);
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
  }
  else
  {
    MLTextClassifier.ModelParameters.validation.setter(*(_QWORD *)(*(_QWORD *)a1 + 80));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t key path getter for MLTextClassifier.ModelParameters.maxIterations : MLTextClassifier.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = MLTextClassifier.ModelParameters.maxIterations.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

void key path setter for MLTextClassifier.ModelParameters.maxIterations : MLTextClassifier.ModelParameters(uint64_t a1)
{
  MLTextClassifier.ModelParameters.maxIterations.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

void MLTextClassifier.ModelParameters.maxIterations.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + *(int *)(OUTLINED_FUNCTION_66_17() + 36);
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  OUTLINED_FUNCTION_125();
}

void MLTextClassifier.ModelParameters.maxIterations.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_66_17() + 36);
  *(_DWORD *)(a1 + 12) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  LOBYTE(v4) = *((_BYTE *)v4 + 8);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (_BYTE)v4;
  OUTLINED_FUNCTION_22();
}

uint64_t MLTextClassifier.ModelParameters.maxIterations.modify(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(result + 16) + *(int *)(result + 12);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLTextClassifier.ModelParameters.validateRevision()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;

  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_91_1();
  outlined init with copy of MLTrainingSessionParameters(v0, v1, v3);
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    if ((*(_BYTE *)(v1
                   + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                            + 48)
                   + 8) & 1) == 0
      && (NLPClassifierModelIsRevisionSupported() & 1) == 0)
    {
      OUTLINED_FUNCTION_17_37();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_13_59();
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      OUTLINED_FUNCTION_50_26(v11);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_14_55((uint64_t)" is not supported.");
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v6 = OUTLINED_FUNCTION_49_0();
      *v7 = v8;
      v7[1] = v9;
      OUTLINED_FUNCTION_5_8(v6, (uint64_t)v7);
    }
    outlined destroy of MLClassifierMetrics.Contents(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);
  }
  else if ((*(_BYTE *)(v1 + 8) & 1) == 0 && (NLPClassifierModelIsRevisionSupported() & 1) == 0)
  {
    OUTLINED_FUNCTION_17_37();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_59();
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    OUTLINED_FUNCTION_50_26(v10);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_55((uint64_t)" is not supported.");
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v4 = OUTLINED_FUNCTION_49_0();
    *v5 = v8;
    v5[1] = v9;
    OUTLINED_FUNCTION_5_8(v4, (uint64_t)v5);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLTextClassifier.ModelParameters.validateCustomEmbeddingURL()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;

  v1 = v0;
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v32 = (char *)&v31 - v7;
  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLTextClassifier.FeatureExtractorType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v31 - v15;
  outlined init with copy of MLTrainingSessionParameters(v1, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v10, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    if (!__swift_getEnumTagSinglePayload((uint64_t)v13, 4, v2))
    {
      v19 = (uint64_t)v32;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v32, v13, v2);
      v20 = URL.isFileURL.getter();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v19, v2);
      if ((v20 & 1) != 0)
      {
        v21 = URL.pathExtension.getter();
        v23 = specialized Sequence<>.contains(_:)(v21, v22, outlined read-only object #0 of MLTextClassifier.ModelParameters.validateCustomEmbeddingURL());
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_30_5((uint64_t)v5);
        if ((v23 & 1) != 0)
        {
          OUTLINED_FUNCTION_30_5(v19);
          v18 = type metadata accessor for MLTextClassifier.FeatureExtractorType;
          v17 = (uint64_t)v16;
          goto LABEL_5;
        }
      }
      else
      {
        OUTLINED_FUNCTION_30_5((uint64_t)v5);
      }
      v33 = 0;
      v34 = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v24._object = (void *)0x800000021AFF8D10;
      v24._countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v24);
      lazy protocol witness table accessor for type URL and conformance URL();
      v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 0xD00000000000001DLL;
      v26._object = (void *)0x800000021AFF8D30;
      String.append(_:)(v26);
      v27 = v33;
      v28 = v34;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v29 = OUTLINED_FUNCTION_49_0();
      *v30 = v27;
      v30[1] = v28;
      OUTLINED_FUNCTION_5_8(v29, (uint64_t)v30);
      OUTLINED_FUNCTION_30_5(v19);
      outlined destroy of MLClassifierMetrics.Contents((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);
      return;
    }
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.FeatureExtractorType);
    v17 = (uint64_t)v13;
    v18 = type metadata accessor for MLTextClassifier.FeatureExtractorType;
  }
  else
  {
    v18 = type metadata accessor for MLTextClassifier.ModelAlgorithmType;
    v17 = (uint64_t)v10;
  }
LABEL_5:
  outlined destroy of MLClassifierMetrics.Contents(v17, (uint64_t (*)(_QWORD))v18);
}

void MLTextClassifier.ModelParameters.playgroundDescription.getter(unint64_t *a1@<X8>)
{
  unint64_t v2;
  unint64_t v3;

  v2 = MLTextClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

void MLTextClassifier.ModelParameters.validationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_3_57();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_91_1();
  v2 = OUTLINED_FUNCTION_66_17();
  OUTLINED_FUNCTION_27_47(v2);
  if (v3)
  {
    OUTLINED_FUNCTION_44_29();
    OUTLINED_FUNCTION_16_0();
    MLTextClassifier.ModelParameters.ValidationData.table.getter();
    outlined destroy of MLClassifierMetrics.Contents(v0, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
    OUTLINED_FUNCTION_125();
  }
  else
  {
    __break(1u);
  }
}

void key path getter for MLTextClassifier.ModelParameters.validationData : MLTextClassifier.ModelParameters(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  MLTextClassifier.ModelParameters.validationData.getter();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
}

uint64_t key path setter for MLTextClassifier.ModelParameters.validationData : MLTextClassifier.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1;
  id v3;
  unsigned __int8 v4;

  v1 = *(_BYTE *)(a1 + 8);
  v3 = *(id *)a1;
  v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLTextClassifier.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLTextClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v5[4];

  v2 = *(unsigned __int8 *)(a1 + 8);
  v5[3] = OUTLINED_FUNCTION_3_57();
  __swift_allocate_boxed_opaque_existential_0(v5);
  if (v2 == 255)
  {
    OUTLINED_FUNCTION_6_68();
  }
  else if (OUTLINED_FUNCTION_22_40())
  {
    OUTLINED_FUNCTION_0_76();
  }
  else
  {
    OUTLINED_FUNCTION_8_64();
  }
  swift_storeEnumTagMultiPayload();
  v3 = OUTLINED_FUNCTION_66_17();
  return outlined assign with take of Any?((uint64_t)v5, v1 + *(int *)(v3 + 24));
}

void MLTextClassifier.ModelParameters.validationData.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  MLTextClassifier.ModelParameters.validationData.getter();
  OUTLINED_FUNCTION_22();
}

void MLTextClassifier.ModelParameters.validationData.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = *(void **)(*a1 + 32);
  v5 = *(unsigned __int8 *)(*a1 + 40);
  *(_QWORD *)(v3 + 24) = OUTLINED_FUNCTION_3_57();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)v3);
  if ((a2 & 1) != 0)
  {
    if (v5 == 255)
    {
      OUTLINED_FUNCTION_6_68();
    }
    else
    {
      outlined copy of MLDataTable?(v4, v5);
      if (MLDataTable.size.getter())
        OUTLINED_FUNCTION_0_76();
      else
        OUTLINED_FUNCTION_8_64();
    }
    swift_storeEnumTagMultiPayload();
    v6 = OUTLINED_FUNCTION_66_17();
    OUTLINED_FUNCTION_26_41(v6);
    outlined consume of MLDataTable?(*(void **)(v3 + 32), *(_BYTE *)(v3 + 40));
  }
  else
  {
    if (v5 == 255)
    {
      OUTLINED_FUNCTION_6_68();
    }
    else if (OUTLINED_FUNCTION_22_40())
    {
      OUTLINED_FUNCTION_0_76();
    }
    else
    {
      OUTLINED_FUNCTION_8_64();
    }
    swift_storeEnumTagMultiPayload();
    v7 = OUTLINED_FUNCTION_66_17();
    OUTLINED_FUNCTION_26_41(v7);
  }
  free((void *)v3);
}

void MLTextClassifier.ModelParameters.textColumnValidationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  OUTLINED_FUNCTION_3_57();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = OUTLINED_FUNCTION_66_17();
  outlined init with copy of Any?(v0 + *(int *)(v4 + 24), (uint64_t)&v8);
  if (v9)
  {
    outlined init with take of Any(&v8, &v10);
    OUTLINED_FUNCTION_16_0();
    v5 = OUTLINED_FUNCTION_55_7();
    if ((_DWORD)v5 == 1)
    {
      v6 = *(void **)v3;
      v7 = v3[8];
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v6, v7);
    }
    else
    {
      OUTLINED_FUNCTION_19_43(v5, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
      OUTLINED_FUNCTION_84();
    }
    OUTLINED_FUNCTION_164();
  }
  else
  {
    __break(1u);
  }
}

void MLTextClassifier.ModelParameters.textColumnValidationData.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[4];

  OUTLINED_FUNCTION_3_57();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_6_65();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v18 - v9;
  v11 = OUTLINED_FUNCTION_66_17();
  OUTLINED_FUNCTION_16_48(v11);
  if (v18[3])
  {
    OUTLINED_FUNCTION_38_26();
    OUTLINED_FUNCTION_16_0();
    if (OUTLINED_FUNCTION_46_26() == 1)
    {
      v12 = *(_QWORD *)v10;
      v13 = v10[8];
      v14 = *((_QWORD *)v10 + 4);
      v15 = *((_QWORD *)v10 + 5);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_35_27();
      v16 = 1954047348;
      if (a2)
        v16 = a1;
      *v4 = 0;
      v4[1] = 0;
      v17 = 0xE400000000000000;
      if (a2)
        v17 = a2;
      *(_QWORD *)v3 = v12;
      *(_BYTE *)(v3 + 8) = v13;
      *(_QWORD *)(v3 + 16) = v16;
      *(_QWORD *)(v3 + 24) = v17;
      *(_QWORD *)(v3 + 32) = v14;
      *(_QWORD *)(v3 + 40) = v15;
      OUTLINED_FUNCTION_31_35();
      MLTextClassifier.ModelParameters.validation.setter(v3);
    }
    else
    {
      outlined destroy of MLClassifierMetrics.Contents((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
      OUTLINED_FUNCTION_49_25();
      *v2 = a1;
      v2[1] = a2;
    }
    OUTLINED_FUNCTION_9_5();
  }
  else
  {
    __break(1u);
  }
}

void MLTextClassifier.ModelParameters.textColumnValidationData.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  MLTextClassifier.ModelParameters.textColumnValidationData.getter();
  *a1 = v3;
  a1[1] = v4;
  OUTLINED_FUNCTION_22();
}

void MLTextClassifier.ModelParameters.textColumnValidationData.modify(uint64_t a1, char a2)
{
  MLTextClassifier.ModelParameters.textColumnValidationData.modify(a1, a2);
}

{
  if ((a2 & 1) != 0)
  {
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_42_25();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_42_25();
    OUTLINED_FUNCTION_125();
  }
}

void MLTextClassifier.ModelParameters.init(validationData:algorithm:language:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  _OWORD *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = (int *)OUTLINED_FUNCTION_66_17();
  v9 = v8[5];
  v10 = (_OWORD *)(a4 + v8[6]);
  *v10 = 0u;
  v10[1] = 0u;
  v11 = (_QWORD *)(a4 + v8[7]);
  *v11 = 0;
  v11[1] = 0;
  OUTLINED_FUNCTION_10_55((uint64_t)v8);
  outlined init with copy of MLTrainingSessionParameters(a2, a4, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  *(_QWORD *)(a4 + v9) = a3;
  v12 = a3;
  static _TextUtilities.getTextLabeledDictionary(from:)(a1);
  OUTLINED_FUNCTION_2_58();
  specialized generateTextTable<A>(_:textColumn:labelColumn:using:)(v13, v14, v15, v16, 0xE500000000000000, v17);
  OUTLINED_FUNCTION_30();
  v31 = v36;
  v32 = v37;
  v18 = OUTLINED_FUNCTION_3_57();
  v26 = OUTLINED_FUNCTION_45_28(v18, v19, v20, v21, v22, v23, v24, v25, v33, v34, v35, (uint64_t)v36, v37, v38, v39);
  v27 = v26;
  if (v32 == 255)
  {
    *v26 = 0;
    v26[1] = 0;
    *((_WORD *)v26 + 8) = 256;
  }
  else if (OUTLINED_FUNCTION_41_27())
  {
    *v27 = (uint64_t)v31;
    *((_BYTE *)v27 + 8) = v32 != 0;
    v27[2] = 1954047348;
    v27[3] = 0xE400000000000000;
    OUTLINED_FUNCTION_36_33();
    v27[4] = v29;
    v27[5] = v28;
  }
  else
  {
    outlined consume of MLDataTable?(v31, v32);
  }
  swift_storeEnumTagMultiPayload();
  outlined assign with take of Any?((uint64_t)&v36, (uint64_t)v10);
  MLTextClassifier.ModelParameters.textColumnValidationData.setter(1954047348, 0xE400000000000000);
  OUTLINED_FUNCTION_20_44();

  outlined destroy of MLClassifierMetrics.Contents(a2, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  OUTLINED_FUNCTION_19_43(v30, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.DataSource);
  OUTLINED_FUNCTION_61_0();
}

void MLTextClassifier.ModelParameters.labelColumnValidationData.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_3_57();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_6_65();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - v9;
  v11 = OUTLINED_FUNCTION_66_17();
  OUTLINED_FUNCTION_16_48(v11);
  if (v20)
  {
    OUTLINED_FUNCTION_38_26();
    OUTLINED_FUNCTION_16_0();
    if (OUTLINED_FUNCTION_46_26() == 1)
    {
      v12 = *(_QWORD *)v10;
      v13 = v10[8];
      v14 = *((_QWORD *)v10 + 2);
      v19 = *((_QWORD *)v10 + 3);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_35_27();
      v15 = 0x6C6562616CLL;
      if (a2)
        v15 = a1;
      *v4 = 0;
      v4[1] = 0;
      v16 = 0xE500000000000000;
      if (a2)
        v16 = a2;
      *(_QWORD *)v3 = v12;
      *(_BYTE *)(v3 + 8) = v13;
      v17 = v19;
      *(_QWORD *)(v3 + 16) = v14;
      *(_QWORD *)(v3 + 24) = v17;
      *(_QWORD *)(v3 + 32) = v15;
      *(_QWORD *)(v3 + 40) = v16;
      OUTLINED_FUNCTION_31_35();
      MLTextClassifier.ModelParameters.validation.setter(v3);
    }
    else
    {
      outlined destroy of MLClassifierMetrics.Contents((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
      OUTLINED_FUNCTION_49_25();
      *v2 = a1;
      v2[1] = a2;
    }
    OUTLINED_FUNCTION_9_5();
  }
  else
  {
    __break(1u);
  }
}

uint64_t outlined assign with take of MLTextClassifier.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void MLTextClassifier.ModelParameters.init(validationData:algorithm:language:)(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = (int *)OUTLINED_FUNCTION_66_17();
  v7 = v6[5];
  v8 = (_OWORD *)(a3 + v6[6]);
  *v8 = 0u;
  v8[1] = 0u;
  v9 = (_QWORD *)(a3 + v6[7]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(a3 + v6[8]);
  *v10 = 0;
  v10[1] = 0;
  v11 = a3 + v6[9];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  outlined init with copy of MLTrainingSessionParameters(a1, a3, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  *(_QWORD *)(a3 + v7) = a2;
  v12 = a2;
  OUTLINED_FUNCTION_2_58();
  specialized generateTextTable<A>(_:textColumn:labelColumn:using:)(v13, v14, v15, v16, 0xE500000000000000, v17);
  OUTLINED_FUNCTION_30();
  v18 = v36;
  v19 = v37;
  v20 = OUTLINED_FUNCTION_3_57();
  v28 = OUTLINED_FUNCTION_45_28(v20, v21, v22, v23, v24, v25, v26, v27, v33, v34, v35, (uint64_t)v36, v37, v38, v39);
  v29 = v28;
  if (v19 == 255)
  {
    *v28 = 0;
    v28[1] = 0;
    *((_WORD *)v28 + 8) = 256;
  }
  else if (OUTLINED_FUNCTION_41_27())
  {
    *v29 = (uint64_t)v18;
    *((_BYTE *)v29 + 8) = v19 != 0;
    v29[2] = 1954047348;
    v29[3] = 0xE400000000000000;
    OUTLINED_FUNCTION_36_33();
    v29[4] = v31;
    v29[5] = v30;
  }
  else
  {
    outlined consume of MLDataTable?(v18, v19);
  }
  swift_storeEnumTagMultiPayload();
  outlined assign with take of Any?((uint64_t)&v36, (uint64_t)v8);
  MLTextClassifier.ModelParameters.textColumnValidationData.setter(1954047348, 0xE400000000000000);
  OUTLINED_FUNCTION_20_44();

  OUTLINED_FUNCTION_19_43(v32, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
  OUTLINED_FUNCTION_61_0();
}

uint64_t MLTextClassifier.ModelParameters.labelColumnValidationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  _QWORD v10[4];

  OUTLINED_FUNCTION_3_57();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = OUTLINED_FUNCTION_66_17();
  result = OUTLINED_FUNCTION_27_47(v4);
  if (v10[3])
  {
    OUTLINED_FUNCTION_44_29();
    OUTLINED_FUNCTION_16_0();
    v6 = OUTLINED_FUNCTION_55_7();
    if ((_DWORD)v6 == 1)
    {
      v7 = *(void **)v3;
      v8 = v3[8];
      v9 = *((_QWORD *)v3 + 4);
      swift_bridgeObjectRelease();
      outlined consume of Result<_DataTable, Error>(v7, v8);
    }
    else
    {
      OUTLINED_FUNCTION_19_43(v6, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelParameters.ValidationData);
      v9 = *(_QWORD *)(v0 + *(int *)(v4 + 32));
      swift_bridgeObjectRetain();
    }
    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void key path setter for MLTextClassifier.ModelParameters.textColumnValidationData : MLTextClassifier.ModelParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain();
  a5(v6, v7);
  OUTLINED_FUNCTION_125();
}

void MLTextClassifier.ModelParameters.labelColumnValidationData.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = MLTextClassifier.ModelParameters.labelColumnValidationData.getter();
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

void MLTextClassifier.ModelParameters.labelColumnValidationData.modify(uint64_t a1, char a2)
{
  MLTextClassifier.ModelParameters.textColumnValidationData.modify(a1, a2);
}

void sub_21AFA97BC()
{
  MLTextClassifier.ModelParameters.validation.getter();
  OUTLINED_FUNCTION_22();
}

void sub_21AFA97EC(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  MLTextClassifier.ModelParameters.textColumnValidationData.getter();
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

void sub_21AFA9810(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for MLTextClassifier.ModelParameters.textColumnValidationData : MLTextClassifier.ModelParameters(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))MLTextClassifier.ModelParameters.textColumnValidationData.setter);
}

void sub_21AFA982C(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = MLTextClassifier.ModelParameters.labelColumnValidationData.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_22();
}

void sub_21AFA9850(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for MLTextClassifier.ModelParameters.textColumnValidationData : MLTextClassifier.ModelParameters(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))MLTextClassifier.ModelParameters.labelColumnValidationData.setter);
}

uint64_t *initializeBufferWithCopyOfBuffer for MLTextClassifier.ModelParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  _OWORD *v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v8 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v8))
      {
        v9 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v8);
      }
      v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                   + 48);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      *(_QWORD *)v12 = *(_QWORD *)v13;
      v12[8] = v13[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v14 = a3[5];
    v15 = a3[6];
    v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v16;
    v17 = (char *)a1 + v15;
    v18 = (_OWORD *)((char *)a2 + v15);
    v19 = *(uint64_t *)((char *)a2 + v15 + 24);
    v20 = v16;
    if (v19)
    {
      *((_QWORD *)v17 + 3) = v19;
      (**(void (***)(char *, _OWORD *, uint64_t))(v19 - 8))(v17, v18, v19);
    }
    else
    {
      v21 = v18[1];
      *(_OWORD *)v17 = *v18;
      *((_OWORD *)v17 + 1) = v21;
    }
    v22 = a3[7];
    v23 = a3[8];
    v24 = (uint64_t *)((char *)a1 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = (uint64_t *)((char *)a1 + v23);
    v28 = (uint64_t *)((char *)a2 + v23);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = a3[9];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v31[8] = v32[8];
    *(_QWORD *)v31 = *(_QWORD *)v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MLTextClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v4 = type metadata accessor for URL();
    if (!__swift_getEnumTagSinglePayload(a1, 4, v4))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }

  v5 = a1 + *(int *)(a2 + 24);
  if (*(_QWORD *)(v5 + 24))
    __swift_destroy_boxed_opaque_existential_0(v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for MLTextClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  id v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;

  v6 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
    {
      v8 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
    }
    v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                + 48);
    v10 = &a1[v9];
    v11 = &a2[v9];
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v12 = a3[5];
  v13 = a3[6];
  v14 = *(void **)&a2[v12];
  *(_QWORD *)&a1[v12] = v14;
  v15 = &a1[v13];
  v16 = &a2[v13];
  v17 = *(_QWORD *)&a2[v13 + 24];
  v18 = v14;
  if (v17)
  {
    *((_QWORD *)v15 + 3) = v17;
    (**(void (***)(char *, char *, uint64_t))(v17 - 8))(v15, v16, v17);
  }
  else
  {
    v19 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v19;
  }
  v20 = a3[7];
  v21 = a3[8];
  v22 = &a1[v20];
  v23 = &a2[v20];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  v25 = &a1[v21];
  v26 = &a2[v21];
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v27;
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v29[8] = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for MLTextClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  if (a1 != a2)
  {
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    v6 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v7 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
      {
        v8 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
      }
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                  + 48);
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = v11[8];
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v10[8] = v12;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v13 = a3[5];
  v14 = *(void **)&a1[v13];
  v15 = *(void **)&a2[v13];
  *(_QWORD *)&a1[v13] = v15;
  v16 = v15;

  v17 = a3[6];
  v18 = (uint64_t)&a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)&a2[v17 + 24];
  if (!*(_QWORD *)&a1[v17 + 24])
  {
    if (v20)
    {
      *(_QWORD *)(v18 + 24) = v20;
      (**(void (***)(uint64_t, char *))(v20 - 8))(v18, v19);
      goto LABEL_15;
    }
LABEL_14:
    v21 = *((_OWORD *)v19 + 1);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *(_OWORD *)(v18 + 16) = v21;
    goto LABEL_15;
  }
  if (!v20)
  {
    __swift_destroy_boxed_opaque_existential_0(v18);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v18, (uint64_t *)v19);
LABEL_15:
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = a3[8];
  v26 = &a1[v25];
  v27 = &a2[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = *(_QWORD *)v30;
  v29[8] = v30[8];
  *(_QWORD *)v29 = v31;
  return a1;
}

char *initializeWithTake for MLTextClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
    {
      v8 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
    }
    v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                + 48);
    v10 = &a1[v9];
    v11 = &a2[v9];
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v12 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v16 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  v17 = a3[9];
  v18 = &a1[v17];
  v19 = &a2[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  return a1;
}

char *assignWithTake for MLTextClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;

  if (a1 != a2)
  {
    outlined destroy of MLClassifierMetrics.Contents((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTextClassifier.ModelAlgorithmType);
    v6 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v7 = type metadata accessor for URL();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 4, v7))
      {
        v8 = type metadata accessor for MLTextClassifier.FeatureExtractorType();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 4, v7);
      }
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLTextClassifier.FeatureExtractorType, revision: Int?))
                  + 48);
      v10 = &a1[v9];
      v11 = &a2[v9];
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v10[8] = v11[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v12 = a3[5];
  v13 = *(void **)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];

  v14 = a3[6];
  v15 = &a1[v14];
  if (*(_QWORD *)&a1[v14 + 24])
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&a1[v14]);
  v16 = *(_OWORD *)&a2[v14 + 16];
  *(_OWORD *)v15 = *(_OWORD *)&a2[v14];
  *((_OWORD *)v15 + 1) = v16;
  v17 = a3[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v21 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  v27 = a3[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v29[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLTextClassifier.ModelParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AFAA1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;
  int v9;

  v6 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  v9 = v8 - 1;
  if (v9 < 0)
    v9 = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MLTextClassifier.ModelParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AFAA264(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
    OUTLINED_FUNCTION_125();
  }
}

uint64_t type metadata completion function for MLTextClassifier.ModelParameters()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLTextClassifier.ModelAlgorithmType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_76()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_QWORD *)v0 = v1;
  *(_BYTE *)(v0 + 8) = v2;
  *(_QWORD *)(v0 + 16) = 1954047348;
  *(_QWORD *)(v0 + 24) = 0xE400000000000000;
  *(_QWORD *)(v0 + 32) = 0x6C6562616CLL;
  *(_QWORD *)(v0 + 40) = 0xE500000000000000;
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_57()
{
  return type metadata accessor for MLTextClassifier.ModelParameters.ValidationData();
}

uint64_t OUTLINED_FUNCTION_6_68()
{
  uint64_t v0;

  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_WORD *)(v0 + 16) = 256;
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_64()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 v2;

  outlined consume of MLDataTable?(v1, v2);
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = (v2 - 32) | 0x8000000000000000;
  return print(_:separator:terminator:)();
}

uint64_t OUTLINED_FUNCTION_10_55(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(v1 + *(int *)(result + 32));
  *v2 = 0;
  v2[1] = 0;
  v3 = v1 + *(int *)(result + 36);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

void OUTLINED_FUNCTION_13_59()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 48) = 0x6E6F697369766552;
  *(_QWORD *)(v0 - 40) = 0xE900000000000020;
}

void OUTLINED_FUNCTION_14_55(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v1);
}

uint64_t OUTLINED_FUNCTION_16_48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with copy of Any?(v1 + *(int *)(a1 + 24), v2 - 144);
}

void OUTLINED_FUNCTION_17_37()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 48) = 0;
  *(_QWORD *)(v0 - 40) = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
}

void OUTLINED_FUNCTION_19_43(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLClassifierMetrics.Contents(v2, a2);
}

void OUTLINED_FUNCTION_20_44()
{
  MLTextClassifier.ModelParameters.labelColumnValidationData.setter(0x6C6562616CLL, 0xE500000000000000);
}

uint64_t OUTLINED_FUNCTION_22_40()
{
  return MLDataTable.size.getter();
}

uint64_t OUTLINED_FUNCTION_26_41(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return outlined assign with take of Any?(v1, v2 + *(int *)(a1 + 24));
}

uint64_t OUTLINED_FUNCTION_27_47(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with copy of Any?(v1 + *(int *)(a1 + 24), v2 - 96);
}

uint64_t OUTLINED_FUNCTION_31_35()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_35_27()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_37_20()
{
  return swift_allocObject();
}

_OWORD *OUTLINED_FUNCTION_38_26()
{
  uint64_t v0;

  return outlined init with take of Any((_OWORD *)(v0 - 144), (_OWORD *)(v0 - 112));
}

uint64_t OUTLINED_FUNCTION_41_27()
{
  return MLDataTable.size.getter();
}

uint64_t OUTLINED_FUNCTION_42_25()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

_OWORD *OUTLINED_FUNCTION_44_29()
{
  uint64_t v0;

  return outlined init with take of Any((_OWORD *)(v0 - 96), (_OWORD *)(v0 - 64));
}

uint64_t *OUTLINED_FUNCTION_45_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  a15 = a1;
  return __swift_allocate_boxed_opaque_existential_0(&a12);
}

uint64_t OUTLINED_FUNCTION_46_26()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_49_25()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_50_26(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t MLHandActionClassifier.GraphCNN.compile()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = type metadata accessor for Model();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  _OWORD v3[4];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  MLHandActionClassifier.GraphCNN.export(metadata:)((uint64_t)v3);
  type metadata accessor for MLModel();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = MLHandActionClassifier.GraphCNN.compile();
  return static MLModel.compile(_:)(*(_QWORD *)(v0 + 40));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_79_1(*(_QWORD *)(v0 + 32));
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 64));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_79_1(*(_QWORD *)(v0 + 32));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLHandActionClassifier.GraphCNN.compile()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch();
}

void MLHandActionClassifier.GraphCNN.trainableSublayers()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24[2];
  _QWORD v25[5];
  __int128 v26;
  uint64_t v27;

  OUTLINED_FUNCTION_20_3();
  v3 = type metadata accessor for BatchNorm();
  v19 = *(_QWORD *)(v3 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_95_1();
  v5 = type metadata accessor for Dense();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_53_0();
  v7 = type metadata accessor for Conv2D();
  v20 = *(_QWORD *)(v7 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_49();
  v11 = v10 - v9;
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_31_4();
  v13 = v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v13, v2);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  Layer.sublayers(recursively:)();
  outlined destroy of MLHandActionClassifier.GraphCNNModel(v2);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  OUTLINED_FUNCTION_188_1();
  if (v27)
  {
    v14 = MEMORY[0x24BEE4AF8];
    do
    {
      outlined init with take of BinaryFloatingPoint(&v26, (uint64_t)v25);
      outlined init with copy of TrainingSessionDelegate((uint64_t)v25, (uint64_t)v24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
      if (OUTLINED_FUNCTION_179_1())
      {
        OUTLINED_FUNCTION_94_8();
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v11, v7);
      }
      else if ((OUTLINED_FUNCTION_179_1() & 1) != 0)
      {
        OUTLINED_FUNCTION_94_8();
        v15 = OUTLINED_FUNCTION_105_5();
        v16(v15, v5);
      }
      else if (OUTLINED_FUNCTION_179_1())
      {
        OUTLINED_FUNCTION_94_8();
        (*(void (**)(uint64_t, unint64_t))(v19 + 8))(v1, v3);
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(v25, v25[3]);
        v3 = *(_QWORD *)(Layer.parameters(recursively:)() + 16);
        swift_bridgeObjectRelease();
        if (v3)
        {
          OUTLINED_FUNCTION_94_8();
        }
        else
        {
          v23 = 0;
          v22 = 0u;
          v21 = 0u;
        }
        OUTLINED_FUNCTION_183_2();
      }
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
      if (*((_QWORD *)&v22 + 1))
      {
        outlined init with take of BinaryFloatingPoint(&v21, (uint64_t)v24);
        outlined init with take of BinaryFloatingPoint(v24, (uint64_t)&v21);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_168_1();
          v14 = v17;
        }
        v3 = *(_QWORD *)(v14 + 16);
        if (v3 >= *(_QWORD *)(v14 + 24) >> 1)
        {
          OUTLINED_FUNCTION_168_1();
          v14 = v18;
        }
        *(_QWORD *)(v14 + 16) = v3 + 1;
        outlined init with take of BinaryFloatingPoint(&v21, v14 + 40 * v3 + 32);
        OUTLINED_FUNCTION_183_2();
      }
      else
      {
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v21, &demangling cache variable for type metadata for Layer?);
      }
      OUTLINED_FUNCTION_188_1();
    }
    while (v27);
  }
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_9_5();
}

void MLHandActionClassifier.GraphCNN.export(metadata:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  Swift::String v45;
  void (*v46)(unint64_t *, _QWORD);
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;

  type metadata accessor for ModelKind();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v63 = v6;
  OUTLINED_FUNCTION_118();
  v62 = type metadata accessor for NeuralNetworkClassifier.ClassLabels();
  v59 = *(_QWORD *)(v62 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v60 = v8;
  OUTLINED_FUNCTION_118();
  type metadata accessor for NeuralNetwork.ArrayShapeMapping();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_118();
  v61 = type metadata accessor for NeuralNetworkClassifier();
  v58 = *(_QWORD *)(v61 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v57 = v11;
  OUTLINED_FUNCTION_118();
  v12 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
  OUTLINED_FUNCTION_4_26(v12, (uint64_t)&v66);
  v52 = v13;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_46_2();
  v15 = type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_4_26(v15, (uint64_t)&v67);
  v54 = v16;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v20);
  v21 = type metadata accessor for LearningPhase();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_31_4();
  v56 = *(_QWORD *)(a1 + 8);
  v51 = *(_QWORD *)(a1 + 64);
  v23 = v1 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  OUTLINED_FUNCTION_4_28();
  v24 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  *(_BYTE *)(v23 + *(int *)(v24 + 36)) = 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v3, *MEMORY[0x24BE6B9A8], v21);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  Layer.prepare(for:)();
  swift_endAccess();
  OUTLINED_FUNCTION_190_1(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  MLHandActionClassifier.GraphCNN.updatedCoreMLLayers()();
  Model.init()();
  Model.specificationVersion.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  type metadata accessor for FeatureDescription();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_21AFE7DA0;
  (*(void (**)(uint64_t, _QWORD))(v52 + 104))(v2, *MEMORY[0x24BE624E0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *(_OWORD *)(OUTLINED_FUNCTION_9_1() + 16) = xmmword_21AFE7F40;
  OUTLINED_FUNCTION_194_2();
  *(_QWORD *)(v25 + 32) = v26;
  *(_OWORD *)(v25 + 40) = xmmword_21AFE7F50;
  static FeatureType.shapedArray(dataType:shape:optional:)();
  OUTLINED_FUNCTION_30();
  (*(void (**)(uint64_t))(v52 + 8))(v2);
  v64 = 0;
  v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(446);
  v27._countAndFlagsBits = 8257;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  OUTLINED_FUNCTION_194_2();
  if (v28 <= 1)
    v29 = 0x736F7020646E6168;
  else
    v29 = 0xD000000000000016;
  if (v28 <= 1)
    v30 = 0xE900000000000065;
  else
    v30 = 0x800000021AFF9260;
  v31 = v30;
  String.append(_:)(*(Swift::String *)&v29);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_15_4(0xD000000000000052, (uint64_t)" to classify. Its multiarray encoding uses the first dimension to index time over ");
  OUTLINED_FUNCTION_194_2();
  v66 = v32;
  v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v33);
  OUTLINED_FUNCTION_104();
  v34._countAndFlagsBits = 0x656D61726620;
  v34._object = (void *)0xE600000000000000;
  String.append(_:)(v34);
  OUTLINED_FUNCTION_194_2();
  if (v35 <= 1)
    v36 = 0;
  else
    v36 = 115;
  if (v35 <= 1)
    v37 = 0xE000000000000000;
  else
    v37 = 0xE100000000000000;
  v38 = v37;
  String.append(_:)(*(Swift::String *)&v36);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_15_4(0xD00000000000015ELL, (uint64_t)". The second dimension indexes x, y, and confidence of hand pose keypoint locations. The last dimension indexes the keypoint type, ordered as wrist, thumbCMC, thumbMP, thumbIP, thumbTip, indexMCP, indexPIP, indexDIP, indexTip, middleMCP, middlePIP, middleDIP, middleTip, ringMCP, ringPIP, ringDIP, ringTip, littleMCP, littlePIP, littleDIP, littleTip.");
  FeatureDescription.init(name:type:description:)();
  Model.inputs.setter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_21AFE7F70;
  static FeatureType.dictionaryWithStringKeys(optional:)();
  OUTLINED_FUNCTION_146_5();
  FeatureDescription.init(name:type:description:)();
  FeatureType.StringParameters.init(optional:)();
  (*(void (**)(uint64_t, _QWORD))(v54 + 104))(v53, *MEMORY[0x24BE62578]);
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v64 = 0xD000000000000011;
  v65 = 0x800000021AFF9240;
  v55 = v24;
  v39 = *(int *)(v24 + 40);
  v40 = v23;
  v41 = *(_QWORD *)(v23 + v39);
  if (v41 <= 1)
    v42 = 1702063984;
  else
    v42 = 0x6E6F69746361;
  if (v41 <= 1)
    v43 = 0xE400000000000000;
  else
    v43 = 0xE600000000000000;
  v44 = v43;
  String.append(_:)(*(Swift::String *)&v42);
  swift_bridgeObjectRelease();
  v45._countAndFlagsBits = 0x726F676574616320;
  v45._object = (void *)0xEA00000000002E79;
  String.append(_:)(v45);
  OUTLINED_FUNCTION_44_12();
  FeatureDescription.init(name:type:description:)();
  Model.outputs.setter();
  OUTLINED_FUNCTION_44_12();
  Model.predictedFeatureName.setter();
  OUTLINED_FUNCTION_146_5();
  Model.predictedProbabilitiesName.setter();
  if (v56)
  {
    OUTLINED_FUNCTION_84();
    Model.modelDescription.setter();
    OUTLINED_FUNCTION_84();
    Model.versionString.setter();
    swift_bridgeObjectRetain();
    Model.author.setter();
    swift_bridgeObjectRetain();
    Model.license.setter();
    if (!v51)
      Dictionary.init(dictionaryLiteral:)();
    swift_bridgeObjectRetain();
    Model.metadata.setter();
  }
  v64 = *(_QWORD *)(v40 + *(int *)(v55 + 40));
  dispatch thunk of CustomStringConvertible.description.getter();
  v46 = (void (*)(unint64_t *, _QWORD))Model.metadata.modify();
  specialized Dictionary._Variant.setValue(_:forKey:)();
  v46(&v64, 0);
  NeuralNetworkClassifier.init(layers:preprocessors:)();
  v47 = OUTLINED_FUNCTION_173_1();
  v48(v47);
  NeuralNetworkClassifier.arrayInputShapeMapping.setter();
  OUTLINED_FUNCTION_146_5();
  NeuralNetworkClassifier.labelProbabilityLayerName.setter();
  *v60 = *(_QWORD *)(v1 + 16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v59 + 104))(v60, *MEMORY[0x24BE62A88], v62);
  swift_bridgeObjectRetain();
  NeuralNetworkClassifier.classLabels.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v63, v57, v61);
  v49 = OUTLINED_FUNCTION_173_1();
  v50(v49);
  Model.kind.setter();
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v61);
  *(_BYTE *)(v40 + *(int *)(v55 + 36)) = 0;
  OUTLINED_FUNCTION_7();
}

void specialized _ModelCheckpoint<>.layerStateKeyPathLookup.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  Swift::Int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  OUTLINED_FUNCTION_20_3();
  v31 = *(_QWORD *)(type metadata accessor for LayerState() - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_64();
  v3 = OUTLINED_FUNCTION_118();
  type metadata accessor for MLHandActionClassifier.GraphCNNModel(v3);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_95_1();
  v5 = v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  OUTLINED_FUNCTION_29_0();
  v30 = v5;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v5, v1);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
  v6 = Layer.layerStateKeyPaths(recursively:)();
  v29 = v1;
  outlined destroy of MLHandActionClassifier.GraphCNNModel(v1);
  if (v6 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_30();
    if (v7)
      goto LABEL_3;
LABEL_22:
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_9_5();
    return;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    goto LABEL_22;
LABEL_3:
  v28 = v6 & 0xC000000000000001;
  v8 = (_QWORD *)MEMORY[0x24BEE4B00];
  v9 = 4;
  v27 = v6;
  while (1)
  {
    if (v28)
    {
      v10 = MEMORY[0x22075AF48](v9 - 4, v6);
    }
    else
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      swift_retain();
    }
    v11 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    outlined init with copy of MLHandActionClassifier.GraphCNNModel(v30, v29);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v29);
    v12 = LayerState.id.getter();
    OUTLINED_FUNCTION_79_1(v31);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v32 = v8;
    v6 = (unint64_t)v8;
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    v16 = v8[2];
    v17 = (v15 & 1) == 0;
    v18 = v16 + v17;
    if (__OFADD__(v16, v17))
      goto LABEL_19;
    v19 = v14;
    v20 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, WritableKeyPath<MLHandActionClassifier.GraphCNNModel, LayerState>>);
    v6 = (unint64_t)&v32;
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18))
      break;
LABEL_12:
    v8 = v32;
    if ((v20 & 1) != 0)
    {
      v23 = v32[7];
      swift_release();
      *(_QWORD *)(v23 + 8 * v19) = v10;
    }
    else
    {
      v32[(v19 >> 6) + 8] |= 1 << v19;
      *(_DWORD *)(v8[6] + 4 * v19) = v12;
      *(_QWORD *)(v8[7] + 8 * v19) = v10;
      v24 = v8[2];
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        goto LABEL_20;
      v8[2] = v26;
    }
    swift_bridgeObjectRelease();
    ++v9;
    v6 = v27;
    if (v11 == v7)
      goto LABEL_22;
  }
  v6 = (unint64_t)v32;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v19 = v21;
    goto LABEL_12;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLHandActionClassifier.GraphCNN.loadPretrainedCoreMLModel()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t ObjCClassFromMetadata;
  id v87;
  id v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  _BOOL4 v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t (*v183)(uint64_t, uint64_t, _QWORD);
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  uint64_t v188;
  NSObject *v189;
  os_log_type_t v190;
  uint8_t *v191;
  uint64_t v192;
  uint64_t (*v193)(uint64_t, _QWORD);
  uint64_t (*v194)(uint64_t, uint64_t, _QWORD);
  uint64_t v195;
  unint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(uint64_t, uint64_t, uint64_t);
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  unint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t (*v226)(uint64_t, _QWORD);
  uint64_t v227;
  uint64_t (*v228)(uint64_t, _QWORD);
  uint64_t (*v229)(uint64_t, uint64_t, _QWORD);
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t (*v237)(uint64_t, uint64_t, uint64_t);
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  unint64_t v243;
  uint64_t v244;
  char v245;
  unint64_t v246;
  uint64_t v247;
  char v248;
  unint64_t v249;
  unint64_t v250;
  char v251;
  char v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void (*v263)(uint64_t, uint64_t, uint64_t);
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t (*v267)(void);
  uint64_t v268;
  uint64_t (*v269)(uint64_t, uint64_t, uint64_t);
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;
  unint64_t v274;
  char v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char v279;
  unint64_t v280;
  uint64_t v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void (*v302)(uint64_t, uint64_t);
  uint64_t v303;
  uint64_t (*v304)(uint64_t, _QWORD);
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  void (*v334)(uint64_t, uint64_t);
  void (*v335)(uint64_t, uint64_t);
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349[4];
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  void (*v354)(uint64_t, uint64_t);
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void (*v359)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD));
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD v366[3];
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388[4];
  char v389[8];
  char v390[8];
  char v391[8];
  char v392[8];
  _QWORD v393[2];
  uint64_t v394;
  uint64_t v395;
  Swift::String v396;
  Swift::String v397;
  Swift::String v398;
  Swift::String v399;
  Swift::String v400;
  Swift::String v401;
  Swift::String v402;
  Swift::String v403;
  Swift::String v404;
  Swift::String v405;
  Swift::String v406;
  Swift::String v407;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dense?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v6);
  v7 = type metadata accessor for Dense();
  OUTLINED_FUNCTION_4_26(v7, (uint64_t)v389);
  v365 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v10);
  v11 = type metadata accessor for NeuralNetwork.Layer.InnerProductParameters();
  OUTLINED_FUNCTION_4_26(v11, (uint64_t)&v395);
  v381 = v12;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v14);
  v15 = type metadata accessor for LayerState();
  OUTLINED_FUNCTION_4_26(v15, (uint64_t)v366);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BatchNorm?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_49();
  v22 = v21 - v20;
  v23 = type metadata accessor for BatchNorm();
  OUTLINED_FUNCTION_4_26(v23, (uint64_t)&v372);
  v350 = v24;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v26);
  v27 = type metadata accessor for NeuralNetwork.Layer.BatchNormalizeParameters();
  OUTLINED_FUNCTION_4_26(v27, (uint64_t)&v373);
  v351 = v28;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v30);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v34);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v36);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Extent<Int>);
  OUTLINED_FUNCTION_4_26(v37, (uint64_t)&v381);
  v353 = v38;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v41);
  v42 = type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_4_26(v42, (uint64_t)v392);
  v357 = v43;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v45);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v49);
  v50 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_4_26(v50, (uint64_t)&v394);
  v369 = v51;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v52);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v53);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v54);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v56);
  v57 = type metadata accessor for Parameter();
  OUTLINED_FUNCTION_4_26(v57, (uint64_t)v393);
  v370 = v58;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v59);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v60);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v61);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v62);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v63);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Conv2D?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v64);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v65);
  v66 = type metadata accessor for Conv2D();
  OUTLINED_FUNCTION_4_26(v66, (uint64_t)v390);
  v366[0] = v67;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v68);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v69);
  v70 = type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters();
  OUTLINED_FUNCTION_4_26(v70, (uint64_t)v391);
  v366[2] = v71;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v72);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v73);
  v387 = type metadata accessor for NeuralNetwork.Layer.Kind();
  v372 = *(_QWORD *)(v387 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v74);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v75);
  v386 = type metadata accessor for NeuralNetwork.Layer();
  v383 = *(_QWORD *)(v386 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v76);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v77);
  OUTLINED_FUNCTION_46_2();
  v78 = type metadata accessor for URL();
  v79 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v80);
  OUTLINED_FUNCTION_65_5();
  v82 = v81;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v83);
  OUTLINED_FUNCTION_99_1();
  MEMORY[0x24BDAC7A8](v84);
  OUTLINED_FUNCTION_211();
  v385 = v85;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v87 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v88 = outlined bridged method (mbbnn) of @objc NSBundle.url(forResource:withExtension:)(0xD00000000000001ELL, 0x800000021AFF8D50, 0x73746867696577, 0xE700000000000000, v87);

  if (!v88)
  {
    __swift_storeEnumTagSinglePayload(v0, 1, 1, v78);
    goto LABEL_88;
  }
  v347 = v22;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32);
  v89(v0, v2, v78);
  OUTLINED_FUNCTION_173_0();
  __swift_storeEnumTagSinglePayload(v90, v91, v92, v78);
  if (__swift_getEnumTagSinglePayload(v0, 1, v78) == 1)
  {
LABEL_88:
    outlined destroy of FeatureMatrixBuilder<Float>(v0, &demangling cache variable for type metadata for URL?);
    goto LABEL_106;
  }
  v93 = v385;
  v89(v385, v0, v78);
  v94 = v82;
  if (one-time initialization token for logger != -1)
    swift_once();
  v95 = type metadata accessor for Logger();
  v96 = __swift_project_value_buffer(v95, (uint64_t)static MLHandActionClassifier.logger);
  v97 = *(_QWORD *)(v79 + 16);
  OUTLINED_FUNCTION_175_1(v94);
  v356 = v96;
  v98 = Logger.logObject.getter();
  v99 = static os_log_type_t.info.getter();
  v100 = v99;
  v101 = os_log_type_enabled(v98, v99);
  v384 = v1;
  if (v101)
  {
    v102 = v94;
    v103 = (uint8_t *)OUTLINED_FUNCTION_166_0();
    v104 = OUTLINED_FUNCTION_166_0();
    v376 = v97;
    v388[0] = v104;
    *(_DWORD *)v103 = 136315138;
    v359 = (void (*)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD)))(v103 + 4);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v105 = dispatch thunk of CustomStringConvertible.description.getter();
    v393[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v106, v388);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_30();
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v102, v78);
    _os_log_impl(&dword_21ADEE000, v98, (os_log_type_t)v100, "Loading pre-trained model at %s", v103, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_9_6();
  }
  v107 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
  OUTLINED_FUNCTION_192_0(v94);

  v108 = v382;
  v109 = v380;
  OUTLINED_FUNCTION_175_1(v380);
  v110 = Data.init(contentsOf:options:)();
  if (v108)
  {
    OUTLINED_FUNCTION_192_0(v109);
    OUTLINED_FUNCTION_192_0(v93);
LABEL_10:
    OUTLINED_FUNCTION_7();
    return;
  }
  BlobsFile.init(data:)(v110, v111);
  v376 = 0;
  v319 = (uint64_t)v107;
  v107(v109, v78);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : Int])>);
  v112 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v112 + 16) = xmmword_21AFF0810;
  *(_QWORD *)(v112 + 32) = 3485304;
  *(_QWORD *)(v112 + 40) = 0xE300000000000000;
  *(_QWORD *)(v112 + 48) = OUTLINED_FUNCTION_7_62();
  *(_QWORD *)(v112 + 56) = 3616376;
  *(_QWORD *)(v112 + 64) = 0xE300000000000000;
  *(_QWORD *)(v112 + 72) = OUTLINED_FUNCTION_7_62();
  *(_QWORD *)(v112 + 80) = 120;
  *(_QWORD *)(v112 + 88) = 0xE100000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 96) = v114;
  *(_QWORD *)(v112 + 104) = v113 & 0xFFFFFFFFFFFFLL | 0x33000000000000;
  *(_QWORD *)(v112 + 112) = 0xE700000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 120) = v116;
  *(_QWORD *)(v112 + 128) = v115 & 0xFFFFFFFFFFFFLL | 0x35000000000000;
  *(_QWORD *)(v112 + 136) = 0xE700000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 144) = v118;
  *(_QWORD *)(v112 + 152) = v117 & 0xFFFFFFFFFFFFLL | 0x37000000000000;
  *(_QWORD *)(v112 + 160) = 0xE700000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 168) = v120;
  *(_QWORD *)(v112 + 176) = v119 & 0xFFFFFFFFFFFFLL | 0x38000000000000;
  *(_QWORD *)(v112 + 184) = 0xE700000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 192) = v122;
  *(_QWORD *)(v112 + 200) = v121 & 0xFFFFFFFFFFFFLL | 0x39000000000000;
  *(_QWORD *)(v112 + 208) = 0xE700000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 216) = v124;
  *(_QWORD *)(v112 + 224) = v123 & 0xFFFFFFFFFFFFLL | 0x3231000000000000;
  *(_QWORD *)(v112 + 232) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 240) = v126;
  *(_QWORD *)(v112 + 248) = v125 & 0xFFFFFFFFFFFFLL | 0x3431000000000000;
  *(_QWORD *)(v112 + 256) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 264) = v128;
  *(_QWORD *)(v112 + 272) = v127 & 0xFFFFFFFFFFFFLL | 0x3531000000000000;
  *(_QWORD *)(v112 + 280) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 288) = v130;
  *(_QWORD *)(v112 + 296) = v129 & 0xFFFFFFFFFFFFLL | 0x3631000000000000;
  *(_QWORD *)(v112 + 304) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 312) = v132;
  *(_QWORD *)(v112 + 320) = v131 & 0xFFFFFFFFFFFFLL | 0x3931000000000000;
  *(_QWORD *)(v112 + 328) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 336) = v134;
  *(_QWORD *)(v112 + 344) = v133 & 0xFFFFFFFFFFFFLL | 0x3132000000000000;
  *(_QWORD *)(v112 + 352) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 360) = v136;
  *(_QWORD *)(v112 + 368) = v135 & 0xFFFFFFFFFFFFLL | 0x3232000000000000;
  *(_QWORD *)(v112 + 376) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 384) = v138;
  *(_QWORD *)(v112 + 392) = v137 & 0xFFFFFFFFFFFFLL | 0x3332000000000000;
  *(_QWORD *)(v112 + 400) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 408) = v140;
  *(_QWORD *)(v112 + 416) = v139 & 0xFFFFFFFFFFFFLL | 0x3632000000000000;
  *(_QWORD *)(v112 + 424) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 432) = v142;
  *(_QWORD *)(v112 + 440) = v141 & 0xFFFFFFFFFFFFLL | 0x3832000000000000;
  *(_QWORD *)(v112 + 448) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 456) = v144;
  *(_QWORD *)(v112 + 464) = v143 & 0xFFFFFFFFFFFFLL | 0x3932000000000000;
  *(_QWORD *)(v112 + 472) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 480) = v146;
  *(_QWORD *)(v112 + 488) = v145 & 0xFFFFFFFFFFFFLL | 0x3033000000000000;
  *(_QWORD *)(v112 + 496) = 0xE800000000000000;
  OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 504) = v148;
  *(_QWORD *)(v112 + 512) = v147 & 0xFFFFFFFFFFFFLL | 0x3333000000000000;
  *(_QWORD *)(v112 + 520) = 0xE800000000000000;
  *(_QWORD *)(v112 + 528) = OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 536) = v149 & 0xFFFFFFFFFFFFLL | 0x3533000000000000;
  *(_QWORD *)(v112 + 544) = 0xE800000000000000;
  *(_QWORD *)(v112 + 552) = OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 560) = v150 & 0xFFFFFFFFFFFFLL | 0x3633000000000000;
  *(_QWORD *)(v112 + 568) = 0xE800000000000000;
  *(_QWORD *)(v112 + 576) = OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 584) = v151 & 0xFFFFFFFFFFFFLL | 0x3933000000000000;
  *(_QWORD *)(v112 + 592) = 0xE800000000000000;
  *(_QWORD *)(v112 + 600) = OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 608) = v152 & 0xFFFFFFFFFFFFLL | 0x3134000000000000;
  *(_QWORD *)(v112 + 616) = 0xE800000000000000;
  *(_QWORD *)(v112 + 624) = OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 632) = v153 & 0xFFFFFFFFFFFFLL | 0x3234000000000000;
  *(_QWORD *)(v112 + 640) = 0xE800000000000000;
  *(_QWORD *)(v112 + 648) = OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 656) = v154 & 0xFFFFFFFFFFFFLL | 0x3334000000000000;
  *(_QWORD *)(v112 + 664) = 0xE800000000000000;
  *(_QWORD *)(v112 + 672) = OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 680) = v155 & 0xFFFFFFFFFFFFLL | 0x3634000000000000;
  *(_QWORD *)(v112 + 688) = 0xE800000000000000;
  *(_QWORD *)(v112 + 696) = OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 704) = v156 & 0xFFFFFFFFFFFFLL | 0x3834000000000000;
  *(_QWORD *)(v112 + 712) = 0xE800000000000000;
  *(_QWORD *)(v112 + 720) = OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 728) = v157 & 0xFFFFFFFFFFFFLL | 0x3934000000000000;
  *(_QWORD *)(v112 + 736) = 0xE800000000000000;
  *(_QWORD *)(v112 + 744) = OUTLINED_FUNCTION_7_62();
  OUTLINED_FUNCTION_21_42();
  *(_QWORD *)(v112 + 752) = v158 & 0xFFFFFFFFFFFFLL | 0x3035000000000000;
  *(_QWORD *)(v112 + 760) = 0xE800000000000000;
  *(_QWORD *)(v112 + 768) = OUTLINED_FUNCTION_7_62();
  *(_QWORD *)(v112 + 776) = 0x6C61756469736572;
  *(_QWORD *)(v112 + 784) = 0xEA0000000000312ELL;
  *(_QWORD *)(v112 + 792) = OUTLINED_FUNCTION_7_62();
  *(_QWORD *)(v112 + 800) = 0x6C61756469736572;
  *(_QWORD *)(v112 + 808) = 0xEA0000000000322ELL;
  *(_QWORD *)(v112 + 816) = OUTLINED_FUNCTION_7_62();
  *(_QWORD *)(v112 + 824) = 0x6C61756469736572;
  *(_QWORD *)(v112 + 832) = 0xEA0000000000332ELL;
  *(_QWORD *)(v112 + 840) = OUTLINED_FUNCTION_7_62();
  *(_QWORD *)(v112 + 848) = 0x6C61756469736572;
  *(_QWORD *)(v112 + 856) = 0xEA0000000000342ELL;
  *(_QWORD *)(v112 + 864) = OUTLINED_FUNCTION_7_62();
  *(_QWORD *)(v112 + 872) = 0x6C61756469736572;
  *(_QWORD *)(v112 + 880) = 0xEA0000000000352ELL;
  *(_QWORD *)(v112 + 888) = OUTLINED_FUNCTION_7_62();
  *(_QWORD *)(v112 + 896) = 0x6C61756469736572;
  *(_QWORD *)(v112 + 904) = 0xE800000000000000;
  *(_QWORD *)(v112 + 912) = OUTLINED_FUNCTION_7_62();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  v159 = Dictionary.init(dictionaryLiteral:)();
  MLHandActionClassifier.GraphCNN.defineCoreMLLayers(numberOfKeypointsChannels:numberOfKeypoints:)(3, 21, v160, v161, v162, v163, v164, v165, v318, v319, v78, v320, v321, v323, v324, v326, v328, v329, v330,
    v331);
  v167 = v166;
  MLHandActionClassifier.GraphCNN.coreMLTrainableLayerNames(from:)();
  v339 = v168;
  v169 = MLHandActionClassifier.GraphCNN.getCoreMLAndNeuralNetworksTrainableLayerMap(_:)(v168);
  MLHandActionClassifier.GraphCNN.trainableSublayers()();
  v171 = v170;
  v172 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  specialized _ModelCheckpoint<>.layerStateKeyPathLookup.getter();
  v332 = v173;
  v174 = *(_QWORD *)(v167 + 16);
  v344 = v171;
  v343 = v159;
  v348 = v172;
  if (!v174)
  {
LABEL_74:
    OUTLINED_FUNCTION_85_15();
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_50_9();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_73_20();
    goto LABEL_10;
  }
  v340 = (uint64_t *)(v360 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model);
  v175 = v167 + ((*(unsigned __int8 *)(v383 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v383 + 80));
  LODWORD(v360) = *MEMORY[0x24BE62870];
  v338 = v171 + 32;
  v337 = *MEMORY[0x24BE62868];
  v333 = *MEMORY[0x24BE62878];
  v358 = *(_QWORD *)(v383 + 72);
  v359 = *(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD)))(v383 + 16);
  v176 = v384;
  v177 = v379;
  v178 = (void (*)(uint64_t, uint64_t))v386;
  OUTLINED_FUNCTION_102_6();
  *(_QWORD *)(v179 - 256) = v169;
  v181 = v180;
  while (1)
  {
    v359(v176, v175, v178);
    NeuralNetwork.Layer.kind.getter();
    v182 = (*(uint64_t (**)(uint64_t, uint64_t))(v159 + 88))(v100, v387);
    if (v182 == (_DWORD)v360)
    {
      v382 = v175;
      v380 = v181;
      OUTLINED_FUNCTION_5_26(v100, *(uint64_t (**)(uint64_t, uint64_t))(v159 + 96));
      OUTLINED_FUNCTION_122_5();
      OUTLINED_FUNCTION_31_34(v177, v100, v183);
      v184 = (uint64_t)v176;
      v185 = NeuralNetwork.Layer.name.getter();
      if (!*(_QWORD *)(v169 + 16))
        goto LABEL_86;
      v186 = OUTLINED_FUNCTION_121_8(v185);
      if ((v187 & 1) == 0)
        goto LABEL_86;
      v188 = *(_QWORD *)(*(_QWORD *)(v169 + 56) + 8 * v186);
      OUTLINED_FUNCTION_123();
      v178 = (void (*)(uint64_t, uint64_t))v386;
      if (v188 == *(_QWORD *)(v339 + 16) - 1)
      {
        v189 = Logger.logObject.getter();
        v190 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v189, v190))
        {
          v191 = (uint8_t *)OUTLINED_FUNCTION_166_0();
          *(_WORD *)v191 = 0;
          _os_log_impl(&dword_21ADEE000, v189, v190, "Skipping last innerProduct layer when loading the pretrained-model.", v191, 2u);
          OUTLINED_FUNCTION_9_6();
        }

        v192 = OUTLINED_FUNCTION_105_5();
        OUTLINED_FUNCTION_34_3(v192, v193);
        v176 = (uint64_t *)v184;
        OUTLINED_FUNCTION_5_26(v184, *(uint64_t (**)(uint64_t, uint64_t))(v383 + 8));
        goto LABEL_69;
      }
      if (v188 < 0)
        goto LABEL_76;
      OUTLINED_FUNCTION_203_2();
      if (v200)
        goto LABEL_78;
      OUTLINED_FUNCTION_115_7();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
      v268 = v355;
      if (!OUTLINED_FUNCTION_198_1())
      {
        OUTLINED_FUNCTION_0_68(v268, 1);
        outlined destroy of FeatureMatrixBuilder<Float>(v268, &demangling cache variable for type metadata for Dense?);
        OUTLINED_FUNCTION_58_17();
        _StringGuts.grow(_:)(81);
        OUTLINED_FUNCTION_44_30();
        OUTLINED_FUNCTION_15_4(v313 + 39, (uint64_t)"Cannot cast neural networks framework layer to innerProduct for ");
        v403._countAndFlagsBits = OUTLINED_FUNCTION_187_1();
        OUTLINED_FUNCTION_37_21(v403);
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_22_41();
        OUTLINED_FUNCTION_40_29();
        goto LABEL_106;
      }
      OUTLINED_FUNCTION_0_68(v268, 0);
      OUTLINED_FUNCTION_122_5();
      OUTLINED_FUNCTION_176_1(v377, v269);
      v270 = OUTLINED_FUNCTION_187_1();
      v272 = v271;
      v273 = v374;
      if (!*(_QWORD *)(v343 + 16)
        || (v274 = specialized __RawDictionaryStorage.find<A>(_:)(v270, v271), v175 = v382, (v275 & 1) == 0)
        || (v159 = *(_QWORD *)(*(_QWORD *)(v343 + 56) + 8 * v274),
            swift_bridgeObjectRetain(),
            OUTLINED_FUNCTION_123(),
            !*(_QWORD *)(v159 + 16))
        || (v276 = OUTLINED_FUNCTION_202_0(),
            v278 = specialized __RawDictionaryStorage.find<A>(_:)(v276, v277),
            (v279 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_58_17();
        _StringGuts.grow(_:)(58);
        OUTLINED_FUNCTION_44_30();
        OUTLINED_FUNCTION_15_4(v310 + 6, (uint64_t)"Cannot load innerProduct layer ");
        v400._countAndFlagsBits = OUTLINED_FUNCTION_61_20();
        OUTLINED_FUNCTION_37_21(v400);
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_78_12((uint64_t)" in from MIL Blob Storage");
        OUTLINED_FUNCTION_40_29();
        goto LABEL_106;
      }
      v280 = *(_QWORD *)(*(_QWORD *)(v159 + 56) + 8 * v278);
      OUTLINED_FUNCTION_177_0();
      Dense.$weight.getter();
      Parameter.id.getter();
      OUTLINED_FUNCTION_159_1();
      v178 = *(void (**)(uint64_t, uint64_t))(v281 + 8);
      v178(v172, v273);
      if (!*(_QWORD *)(v348 + 16))
        goto LABEL_91;
      specialized __RawDictionaryStorage.find<A>(_:)(v272);
      if ((v282 & 1) == 0)
        goto LABEL_91;
      v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v283 = OUTLINED_FUNCTION_9_1();
      OUTLINED_FUNCTION_158_1(v283, (uint64_t)v349);
      *(_QWORD *)(v283 + 32) = NeuralNetwork.Layer.InnerProductParameters.outputChannelCount.getter();
      *(_QWORD *)(v283 + 40) = NeuralNetwork.Layer.InnerProductParameters.inputChannelCount.getter();
      MEMORY[0x220758C74](v283);
      v284 = OUTLINED_FUNCTION_96_11(v280);
      OUTLINED_FUNCTION_125_6(v284);
      v285 = OUTLINED_FUNCTION_127_6();
      *(_QWORD *)(v287 - 256) = v286;
      __swift_storeEnumTagSinglePayload(v285, v288, v289, v286);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
      Tensor.init<A>(shape:scalars:on:)();
      v176 = v340;
      OUTLINED_FUNCTION_4_28();
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      v100 = v349[3];
      Layer.updateValue<A>(_:for:)();
      OUTLINED_FUNCTION_99_9();
      OUTLINED_FUNCTION_171_2(*(uint64_t (**)(void))(v369 + 8));
      outlined destroy of FeatureMatrixBuilder<Float>(v100, &demangling cache variable for type metadata for Tensor?);
      if (!*(_QWORD *)(v159 + 16)
        || (v176 = (uint64_t *)v159,
            v290 = specialized __RawDictionaryStorage.find<A>(_:)(1935763810, 0xE400000000000000),
            (v291 & 1) == 0))
      {
        OUTLINED_FUNCTION_217();
        OUTLINED_FUNCTION_104();
        OUTLINED_FUNCTION_34_3(v377, *(uint64_t (**)(uint64_t, _QWORD))(v365 + 8));
        OUTLINED_FUNCTION_182_0();
        v177 = *(_QWORD *)(v303 - 256);
        OUTLINED_FUNCTION_34_3(v177, v304);
        OUTLINED_FUNCTION_72_17();
        OUTLINED_FUNCTION_102_6();
        v169 = *(_QWORD *)(v305 - 256);
        v181 = v380;
        goto LABEL_70;
      }
      v292 = *(_QWORD *)(*(_QWORD *)(v159 + 56) + 8 * v290);
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_196_2();
      Dense.$bias.getter();
      v293 = v374;
      if (__swift_getEnumTagSinglePayload(v159, 1, v374) == 1)
      {
        outlined destroy of FeatureMatrixBuilder<Float>(v159, &demangling cache variable for type metadata for Parameter?);
LABEL_105:
        OUTLINED_FUNCTION_58_17();
        _StringGuts.grow(_:)(62);
        OUTLINED_FUNCTION_44_30();
        v407._countAndFlagsBits = OUTLINED_FUNCTION_61_20();
        OUTLINED_FUNCTION_37_21(v407);
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_51_6();
        OUTLINED_FUNCTION_40_29();
        goto LABEL_106;
      }
      v294 = OUTLINED_FUNCTION_199_1();
      v178(v159, v293);
      if (!specialized Dictionary.subscript.getter(v294, v348))
        goto LABEL_105;
      v295 = OUTLINED_FUNCTION_9_1();
      *(_OWORD *)(v295 + 16) = xmmword_21AFE7DA0;
      v296 = v379;
      *(_QWORD *)(v295 + 32) = NeuralNetwork.Layer.InnerProductParameters.outputChannelCount.getter();
      MEMORY[0x220758C74](v295);
      v297 = OUTLINED_FUNCTION_96_11(v292);
      v376 = 0;
      v388[0] = v297;
      v298 = OUTLINED_FUNCTION_127_6();
      __swift_storeEnumTagSinglePayload(v298, v300, v301, *(_QWORD *)(v299 - 256));
      OUTLINED_FUNCTION_177_0();
      Tensor.init<A>(shape:scalars:on:)();
      OUTLINED_FUNCTION_4_28();
      Layer.updateValue<A>(_:for:)();
      OUTLINED_FUNCTION_99_9();
      swift_release();
      OUTLINED_FUNCTION_217();
      OUTLINED_FUNCTION_71_16();
      outlined destroy of FeatureMatrixBuilder<Float>(v341, &demangling cache variable for type metadata for Tensor?);
      OUTLINED_FUNCTION_90_7();
      OUTLINED_FUNCTION_190_1(*(uint64_t (**)(uint64_t, uint64_t))(v381 + 8));
      v176 = v384;
      v302 = (void (*)(_QWORD, _QWORD))v386;
      (*(void (**)(uint64_t *, uint64_t))(v383 + 8))(v384, v386);
      v177 = v296;
      v178 = v302;
      goto LABEL_67;
    }
    if (v182 == v337)
    {
      OUTLINED_FUNCTION_106_8();
      OUTLINED_FUNCTION_122_5();
      OUTLINED_FUNCTION_31_34(v172, v100, v194);
      v195 = NeuralNetwork.Layer.name.getter();
      if (!*(_QWORD *)(v169 + 16) || (v196 = OUTLINED_FUNCTION_121_8(v195), (v197 & 1) == 0))
      {
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_79_12();
        v307 = OUTLINED_FUNCTION_84_12();
        OUTLINED_FUNCTION_15_4(v307, (uint64_t)"Cannot locate neural networks framework layer for ");
        v397._countAndFlagsBits = OUTLINED_FUNCTION_61_20();
        OUTLINED_FUNCTION_37_21(v397);
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_22_41();
        OUTLINED_FUNCTION_40_29();
        goto LABEL_106;
      }
      v198 = *(_QWORD *)(*(_QWORD *)(v169 + 56) + 8 * v196);
      OUTLINED_FUNCTION_123();
      v199 = v374;
      if (v198 < 0)
      {
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_79_12();
        v306 = OUTLINED_FUNCTION_84_12();
        OUTLINED_FUNCTION_15_4(v306, (uint64_t)"Cannot locate neural networks framework layer for ");
        v396._countAndFlagsBits = OUTLINED_FUNCTION_187_1();
        OUTLINED_FUNCTION_37_21(v396);
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_22_41();
        OUTLINED_FUNCTION_40_29();
        goto LABEL_106;
      }
      OUTLINED_FUNCTION_203_2();
      if (v200)
        goto LABEL_77;
      OUTLINED_FUNCTION_115_7();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
      v201 = v352;
      v202 = v366[1];
      if (!swift_dynamicCast())
      {
        __swift_storeEnumTagSinglePayload(v201, 1, 1, v202);
        outlined destroy of FeatureMatrixBuilder<Float>(v201, &demangling cache variable for type metadata for Conv2D?);
        OUTLINED_FUNCTION_58_17();
        _StringGuts.grow(_:)(80);
        OUTLINED_FUNCTION_44_30();
        OUTLINED_FUNCTION_15_4(v312 + 38, (uint64_t)"Cannot cast neural networks framework layer to convolution for ");
        v402._countAndFlagsBits = OUTLINED_FUNCTION_61_20();
        OUTLINED_FUNCTION_37_21(v402);
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_22_41();
        OUTLINED_FUNCTION_40_29();
        goto LABEL_106;
      }
      OUTLINED_FUNCTION_173_0();
      __swift_storeEnumTagSinglePayload(v203, v204, v205, v202);
      OUTLINED_FUNCTION_122_5();
      v206(v375, v201, v202);
      v207 = OUTLINED_FUNCTION_61_20();
      v209 = v208;
      if (!*(_QWORD *)(v343 + 16)
        || (v210 = OUTLINED_FUNCTION_121_8(v207), (v211 & 1) == 0)
        || (v212 = *(_QWORD *)(*(_QWORD *)(v343 + 56) + 8 * v210),
            swift_bridgeObjectRetain(),
            OUTLINED_FUNCTION_123(),
            !*(_QWORD *)(v212 + 16))
        || (v213 = OUTLINED_FUNCTION_202_0(),
            v215 = specialized __RawDictionaryStorage.find<A>(_:)(v213, v214),
            (v216 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_58_17();
        _StringGuts.grow(_:)(57);
        OUTLINED_FUNCTION_44_30();
        OUTLINED_FUNCTION_15_4(v308 + 5, (uint64_t)"Cannot load convolution layer ");
        v398._countAndFlagsBits = OUTLINED_FUNCTION_61_20();
        OUTLINED_FUNCTION_37_21(v398);
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_78_12((uint64_t)" in from MIL Blob Storage");
        OUTLINED_FUNCTION_40_29();
        goto LABEL_106;
      }
      v382 = v175;
      v217 = *(_QWORD *)(*(_QWORD *)(v212 + 56) + 8 * v215);
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_196_2();
      MEMORY[0x220758FD4](v218);
      OUTLINED_FUNCTION_199_1();
      OUTLINED_FUNCTION_159_1();
      (*(void (**)(uint64_t, uint64_t))(v219 + 8))(v159, v199);
      if (!*(_QWORD *)(v348 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v209), (v220 & 1) == 0))
      {
LABEL_91:
        OUTLINED_FUNCTION_126_2();
        v309 = OUTLINED_FUNCTION_160_1();
        v399._countAndFlagsBits = OUTLINED_FUNCTION_61_20();
        OUTLINED_FUNCTION_37_21(v399);
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_51_6();
        OUTLINED_FUNCTION_40_29();
        goto LABEL_106;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v221 = OUTLINED_FUNCTION_9_1();
      OUTLINED_FUNCTION_158_1(v221, (uint64_t)&v347);
      *(_QWORD *)(v221 + 32) = NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.getter();
      *(_QWORD *)(v221 + 40) = NeuralNetwork.Layer.ConvolutionParameters.kernelChannelCount.getter();
      NeuralNetwork.Layer.ConvolutionParameters.kernelSize.getter();
      v178 = v354;
      NeuralNetwork.Extent.height.getter();
      OUTLINED_FUNCTION_181_0();
      NeuralNetwork.Layer.ConvolutionParameters.kernelSize.getter();
      NeuralNetwork.Extent.width.getter();
      OUTLINED_FUNCTION_181_0();
      OUTLINED_FUNCTION_196_2();
      MEMORY[0x220758C74](v221);
      v222 = OUTLINED_FUNCTION_96_11(v217);
      v223 = OUTLINED_FUNCTION_125_6(v222);
      __swift_storeEnumTagSinglePayload(v373, 1, 1, v223);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
      Tensor.init<A>(shape:scalars:on:)();
      v176 = v340;
      OUTLINED_FUNCTION_4_28();
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
      v224 = v361;
      Layer.updateValue<A>(_:for:)();
      OUTLINED_FUNCTION_99_9();
      OUTLINED_FUNCTION_217();
      outlined destroy of FeatureMatrixBuilder<Float>(v224, &demangling cache variable for type metadata for Tensor?);
      v225 = OUTLINED_FUNCTION_105_5();
      OUTLINED_FUNCTION_34_3(v225, v226);
      OUTLINED_FUNCTION_34_3(v375, *(uint64_t (**)(uint64_t, _QWORD))(v366[0] + 8));
      v227 = OUTLINED_FUNCTION_151_3();
      OUTLINED_FUNCTION_34_3(v227, v228);
      OUTLINED_FUNCTION_72_17();
      v177 = v379;
      goto LABEL_68;
    }
    v178 = (void (*)(uint64_t, uint64_t))v386;
    if (v182 != v333)
    {
      OUTLINED_FUNCTION_5_26((uint64_t)v176, *(uint64_t (**)(uint64_t, uint64_t))(v383 + 8));
      (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v100, v387);
      goto LABEL_70;
    }
    OUTLINED_FUNCTION_106_8();
    OUTLINED_FUNCTION_122_5();
    OUTLINED_FUNCTION_31_34(v362, v100, v229);
    v230 = NeuralNetwork.Layer.name.getter();
    v232 = specialized Dictionary.subscript.getter(v230, v231, v169);
    v234 = v233;
    OUTLINED_FUNCTION_30();
    if ((v234 & 1) != 0)
    {
      OUTLINED_FUNCTION_79_12();
      v315 = OUTLINED_FUNCTION_84_12();
      OUTLINED_FUNCTION_15_4(v315, (uint64_t)"Cannot locate neural networks framework layer for ");
      v405._countAndFlagsBits = OUTLINED_FUNCTION_61_20();
      OUTLINED_FUNCTION_37_21(v405);
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_22_41();
      OUTLINED_FUNCTION_40_29();
      goto LABEL_106;
    }
    v235 = v349[0];
    if ((v232 & 0x8000000000000000) != 0)
      goto LABEL_79;
    if (v232 >= *(_QWORD *)(v344 + 16))
      goto LABEL_80;
    outlined init with copy of TrainingSessionDelegate(v338 + 40 * v232, (uint64_t)v388);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    v236 = v347;
    if (!OUTLINED_FUNCTION_198_1())
    {
      OUTLINED_FUNCTION_0_68(v236, 1);
      outlined destroy of FeatureMatrixBuilder<Float>(v236, &demangling cache variable for type metadata for BatchNorm?);
      OUTLINED_FUNCTION_58_17();
      _StringGuts.grow(_:)(88);
      OUTLINED_FUNCTION_44_30();
      OUTLINED_FUNCTION_15_4(v316 + 46, (uint64_t)"Cannot cast neural networks framework batchnorm layer to batchnorm for ");
      v406._countAndFlagsBits = OUTLINED_FUNCTION_61_20();
      OUTLINED_FUNCTION_37_21(v406);
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_22_41();
      OUTLINED_FUNCTION_40_29();
      goto LABEL_106;
    }
    OUTLINED_FUNCTION_0_68(v236, 0);
    OUTLINED_FUNCTION_122_5();
    OUTLINED_FUNCTION_176_1(v235, v237);
    v238 = OUTLINED_FUNCTION_61_20();
    v240 = specialized Dictionary.subscript.getter(v238, v239, v343);
    OUTLINED_FUNCTION_123();
    if (!v240)
      goto LABEL_95;
    v241 = OUTLINED_FUNCTION_149_2(1851876717, 0xE400000000000000);
    if ((v242 & 1) != 0
      || (v243 = v241, v244 = OUTLINED_FUNCTION_149_2(0x65636E6169726176, 0xE800000000000000), (v245 & 1) != 0)
      || (v246 = v244, v247 = OUTLINED_FUNCTION_149_2(1635018082, 0xE400000000000000), (v248 & 1) != 0))
    {
      OUTLINED_FUNCTION_30();
LABEL_95:
      OUTLINED_FUNCTION_58_17();
      _StringGuts.grow(_:)(55);
      OUTLINED_FUNCTION_44_30();
      OUTLINED_FUNCTION_15_4(v311 + 3, (uint64_t)"Cannot load batchnorm layer ");
      v401._countAndFlagsBits = OUTLINED_FUNCTION_61_20();
      OUTLINED_FUNCTION_37_21(v401);
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_78_12((uint64_t)" in from MIL Blob Storage");
      OUTLINED_FUNCTION_40_29();
      goto LABEL_106;
    }
    v249 = v247;
    v250 = OUTLINED_FUNCTION_149_2(0x616D6D6167, 0xE500000000000000);
    v252 = v251;
    OUTLINED_FUNCTION_30();
    if ((v252 & 1) != 0)
      goto LABEL_95;
    v253 = NeuralNetwork.Layer.BatchNormalizeParameters.inputChannelCount.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v254 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v254 + 16) = xmmword_21AFE7DA0;
    v334 = (void (*)(_QWORD, _QWORD))v253;
    *(_QWORD *)(v254 + 32) = v253;
    MEMORY[0x220758C74](v254);
    v255 = OUTLINED_FUNCTION_96_11(v243);
    v327 = BlobsFile.floatBlob(at:)(v246);
    v325 = BlobsFile.floatBlob(at:)(v249);
    v322 = BlobsFile.floatBlob(at:)(v250);
    v376 = 0;
    BatchNorm.$offset.getter();
    Parameter.id.getter();
    OUTLINED_FUNCTION_159_1();
    (*(void (**)(uint64_t, uint64_t))(v256 + 8))(v345, v374);
    v257 = v348;
    if (!specialized Dictionary.subscript.getter(v250, v348))
      goto LABEL_101;
    OUTLINED_FUNCTION_152_2();
    BatchNorm.$scale.getter();
    v258 = OUTLINED_FUNCTION_199_1();
    OUTLINED_FUNCTION_124_4();
    v259 = specialized Dictionary.subscript.getter(v258, v257);
    v260 = v367;
    if (!v259)
      goto LABEL_100;
    OUTLINED_FUNCTION_152_2();
    BatchNorm.$runningMean.getter();
    v261 = LayerState.id.getter();
    OUTLINED_FUNCTION_124_4();
    if (!specialized Dictionary.subscript.getter(v261, v332))
      goto LABEL_99;
    v382 = v175;
    OUTLINED_FUNCTION_152_2();
    BatchNorm.$runningVariance.getter();
    v262 = LayerState.id.getter();
    OUTLINED_FUNCTION_124_4();
    if (!specialized Dictionary.subscript.getter(v262, v332))
      break;
    v263 = *(void (**)(uint64_t, uint64_t, uint64_t))(v357 + 16);
    v263(v364, v260, v368);
    v264 = v361;
    v265 = v373;
    if ((v253 & 0x8000000000000000) != 0)
      goto LABEL_81;
    if (*(_QWORD *)(v255 + 16) < v253)
      goto LABEL_82;
    v388[0] = v255;
    v388[1] = v255 + 32;
    v388[2] = 0;
    v388[3] = (2 * v253) | 1;
    v336 = type metadata accessor for ComputeDevice();
    __swift_storeEnumTagSinglePayload(v265, 1, 1, v336);
    v176 = &demangling cache variable for type metadata for ArraySlice<Float>;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Float>);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ArraySlice<Float> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<Float>);
    Tensor.init<A>(shape:scalars:on:)();
    OUTLINED_FUNCTION_4_28();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, (void (*)(uint64_t))type metadata accessor for MLHandActionClassifier.GraphCNNModel);
    OUTLINED_FUNCTION_150_2();
    OUTLINED_FUNCTION_93_8();
    OUTLINED_FUNCTION_105_5();
    v266 = v378;
    OUTLINED_FUNCTION_171_2(v267);
    outlined destroy of FeatureMatrixBuilder<Float>(v264, &demangling cache variable for type metadata for Tensor?);
    v263((uint64_t)&demangling cache variable for type metadata for ArraySlice<Float>, v260, v368);
    if (*(_QWORD *)(v327 + 16) < (unint64_t)v334)
      goto LABEL_83;
    v178 = v334;
    OUTLINED_FUNCTION_28_39();
    OUTLINED_FUNCTION_4_28();
    OUTLINED_FUNCTION_150_2();
    OUTLINED_FUNCTION_93_8();
    v335(v346, v266);
    outlined destroy of FeatureMatrixBuilder<Float>(v264, &demangling cache variable for type metadata for Tensor?);
    OUTLINED_FUNCTION_114_6();
    if (*(_QWORD *)(v325 + 16) < (unint64_t)v334)
      goto LABEL_84;
    OUTLINED_FUNCTION_28_39();
    OUTLINED_FUNCTION_4_28();
    OUTLINED_FUNCTION_150_2();
    OUTLINED_FUNCTION_93_8();
    OUTLINED_FUNCTION_71_16();
    outlined destroy of FeatureMatrixBuilder<Float>(v264, &demangling cache variable for type metadata for Tensor?);
    OUTLINED_FUNCTION_114_6();
    if (*(_QWORD *)(v322 + 16) < (unint64_t)v334)
      goto LABEL_85;
    OUTLINED_FUNCTION_28_39();
    OUTLINED_FUNCTION_4_28();
    OUTLINED_FUNCTION_150_2();
    OUTLINED_FUNCTION_99_9();
    OUTLINED_FUNCTION_119_6();
    OUTLINED_FUNCTION_119_6();
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_71_16();
    outlined destroy of FeatureMatrixBuilder<Float>(v264, &demangling cache variable for type metadata for Tensor?);
    OUTLINED_FUNCTION_34_3(v367, *(uint64_t (**)(uint64_t, _QWORD))(v357 + 8));
    OUTLINED_FUNCTION_34_3(v349[0], *(uint64_t (**)(uint64_t, _QWORD))(v350 + 8));
    OUTLINED_FUNCTION_34_3(v362, *(uint64_t (**)(uint64_t, _QWORD))(v351 + 8));
    OUTLINED_FUNCTION_72_17();
    v177 = v379;
LABEL_67:
    v172 = v363;
LABEL_68:
    v159 = v372;
    v100 = v371;
    v169 = v342;
LABEL_69:
    v181 = v380;
    v175 = v382;
LABEL_70:
    v175 += v358;
    if (!--v181)
      goto LABEL_74;
  }
  OUTLINED_FUNCTION_119_6();
LABEL_99:
  OUTLINED_FUNCTION_119_6();
LABEL_100:
  OUTLINED_FUNCTION_119_6();
LABEL_101:
  OUTLINED_FUNCTION_58_17();
  _StringGuts.grow(_:)(74);
  OUTLINED_FUNCTION_44_30();
  OUTLINED_FUNCTION_15_4(v314 + 32, (uint64_t)"Cannot locate all parameter and layer state keypaths for ");
  v404._countAndFlagsBits = OUTLINED_FUNCTION_61_20();
  OUTLINED_FUNCTION_37_21(v404);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_22_41();
  OUTLINED_FUNCTION_40_29();
LABEL_106:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void MLHandActionClassifier.GraphCNN.coreMLTrainableLayerNames(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;

  OUTLINED_FUNCTION_20_3();
  v2 = v1;
  v27 = type metadata accessor for NeuralNetwork.Layer.Kind();
  v3 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_46_2();
  v4 = type metadata accessor for NeuralNetwork.Layer();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v8 = v7 - v6;
  v9 = *(_QWORD *)(v2 + 16);
  if (v9)
  {
    v10 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v32 = *(_QWORD *)(v5 + 72);
    v30 = *MEMORY[0x24BE62870];
    v26 = *MEMORY[0x24BE62868];
    v25 = *MEMORY[0x24BE62878];
    OUTLINED_FUNCTION_84();
    v11 = MEMORY[0x24BEE4AF8];
    v12 = v27;
    v28 = v5;
    v29 = v3;
    while (1)
    {
      v31(v8, v10, v4);
      NeuralNetwork.Layer.kind.getter();
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v0, v12);
      if (v13 == v30 || v13 == v26)
      {
        v14 = NeuralNetwork.Layer.name.getter();
        if ((OUTLINED_FUNCTION_193_0() & 1) == 0)
        {
          OUTLINED_FUNCTION_91_12();
          v11 = v20;
        }
        v15 = *(_QWORD *)(v11 + 16);
        if (v15 >= *(_QWORD *)(v11 + 24) >> 1)
        {
          OUTLINED_FUNCTION_91_12();
          v11 = v21;
        }
        *(_QWORD *)(v11 + 16) = v15 + 1;
        v16 = v11 + 16 * v15;
        *(_QWORD *)(v16 + 32) = v14;
        v17 = v16 + 32;
        v12 = v27;
      }
      else
      {
        if (v13 != v25)
          goto LABEL_11;
        v24 = NeuralNetwork.Layer.name.getter();
        if ((OUTLINED_FUNCTION_193_0() & 1) == 0)
        {
          OUTLINED_FUNCTION_91_12();
          v11 = v22;
        }
        v18 = *(_QWORD *)(v11 + 16);
        if (v18 >= *(_QWORD *)(v11 + 24) >> 1)
        {
          OUTLINED_FUNCTION_91_12();
          v11 = v23;
        }
        *(_QWORD *)(v11 + 16) = v18 + 1;
        v19 = v11 + 16 * v18;
        *(_QWORD *)(v19 + 32) = v24;
        v17 = v19 + 32;
      }
      *(_QWORD *)(v17 + 8) = v3;
      v5 = v28;
      v3 = v29;
LABEL_11:
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v12);
      v10 += v32;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  OUTLINED_FUNCTION_9_5();
}

void MLHandActionClassifier.GraphCNN.defineCoreMLLayers(numberOfKeypointsChannels:numberOfKeypoints:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(_QWORD, _QWORD, _QWORD);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void (*v287)(uint64_t);
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _OWORD *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  char *v317;
  char *v318;
  char *v319;
  char *v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  char *v328;
  char *v329;
  char *v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  char *v336;
  char *v337;
  char *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  char *v345;
  char *v346;
  char *v347;
  char *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  char *v357;
  char *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  _QWORD v370[2];
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  void (*v412)(uint64_t);
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  void (*v420)(_QWORD, _QWORD, _QWORD);
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;

  OUTLINED_FUNCTION_20_3();
  a19 = v23;
  a20 = v24;
  v409 = v20;
  v411 = v25;
  v412 = v26;
  v27 = type metadata accessor for NeuralNetwork.Layer.Kind();
  OUTLINED_FUNCTION_4_26(v27, (uint64_t)&v395);
  v386 = v28;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v30);
  v31 = type metadata accessor for NeuralNetwork.Layer.PoolParameters();
  OUTLINED_FUNCTION_4_26(v31, (uint64_t)&v396);
  v389 = v32;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v34);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_64();
  v416 = v36;
  OUTLINED_FUNCTION_118();
  v414 = type metadata accessor for NeuralNetwork.Layer.PoolParameters.Kind();
  v410 = *(_QWORD *)(v414 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_64();
  v415 = v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v40);
  v419 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Extent<Int>);
  v374 = *(_QWORD *)(v419 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_211();
  v418 = v43;
  OUTLINED_FUNCTION_118();
  v417 = type metadata accessor for NeuralNetwork.Layer();
  v423 = *(_QWORD *)(v417 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  v46 = MEMORY[0x24BDAC7A8](v45);
  v48 = (char *)v370 - v47;
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v49);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v50);
  OUTLINED_FUNCTION_15_3();
  v52 = MEMORY[0x24BDAC7A8](v51);
  v54 = (char *)v370 - v53;
  MEMORY[0x24BDAC7A8](v52);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v56);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v57);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v58);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v59);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v60);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v61);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v62);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v63);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v64);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v65);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v66);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v67);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v68);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v69);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v70);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v71);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v72);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v73);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v74);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v75);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v76);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v77);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v78);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v79);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v80);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v81);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v82);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v83);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v84);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v85);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v86);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v87);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v88);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v89);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v90);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v91);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v92);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v93);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v94);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v95);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v96);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v97);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v98);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v99);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v100);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v101);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v102);
  OUTLINED_FUNCTION_99_1();
  MEMORY[0x24BDAC7A8](v103);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v104);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v105);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v106);
  OUTLINED_FUNCTION_65_5();
  v422 = v107;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v108);
  OUTLINED_FUNCTION_65_5();
  v421 = v109;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v110);
  OUTLINED_FUNCTION_65_5();
  v420 = (void (*)(_QWORD, _QWORD, _QWORD))v111;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v112);
  OUTLINED_FUNCTION_65_5();
  v413 = v113;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v114);
  OUTLINED_FUNCTION_65_5();
  v116 = v115;
  OUTLINED_FUNCTION_29_3();
  v118 = MEMORY[0x24BDAC7A8](v117);
  v120 = (char *)v370 - v119;
  MEMORY[0x24BDAC7A8](v118);
  OUTLINED_FUNCTION_65_5();
  v122 = v121;
  OUTLINED_FUNCTION_29_3();
  v124 = MEMORY[0x24BDAC7A8](v123);
  v126 = (char *)v370 - v125;
  v127 = MEMORY[0x24BDAC7A8](v124);
  v129 = (char *)v370 - v128;
  MEMORY[0x24BDAC7A8](v127);
  v131 = (char *)v370 - v130;
  v431 = (char *)MEMORY[0x24BEE4AF8];
  static NeuralNetwork.Layer.expandDimensions(name:inputName:outputName:axes:)();
  v132 = OUTLINED_FUNCTION_116_7();
  v385 = v48;
  v382 = v54;
  v373 = v22;
  if ((v132 & 1) == 0)
  {
    OUTLINED_FUNCTION_66_22();
    v21 = v306;
  }
  v133 = *((_QWORD *)v21 + 2);
  v134 = v417;
  if (v133 >= *((_QWORD *)v21 + 3) >> 1)
  {
    OUTLINED_FUNCTION_68_23();
    v21 = v307;
  }
  *((_QWORD *)v21 + 2) = v133 + 1;
  v425 = (*(unsigned __int8 *)(v423 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v423 + 80);
  v135 = *(_QWORD *)(v423 + 72);
  v423 = *(_QWORD *)(v423 + 32);
  v424 = v135;
  ((void (*)(char *, char *, uint64_t))v423)(&v21[v425 + v135 * v133], v131, v134);
  v431 = v21;
  OUTLINED_FUNCTION_162_1();
  if ((OUTLINED_FUNCTION_116_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_66_22();
    v21 = v308;
  }
  v136 = *((_QWORD *)v21 + 2);
  if (v136 >= *((_QWORD *)v21 + 3) >> 1)
  {
    OUTLINED_FUNCTION_68_23();
    v21 = v309;
  }
  *((_QWORD *)v21 + 2) = v136 + 1;
  OUTLINED_FUNCTION_30_37((uint64_t)&v21[v425 + v136 * v424], (uint64_t)v129);
  v431 = v21;
  v405 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v137 = swift_allocObject();
  *(_OWORD *)(v137 + 16) = xmmword_21AFE7F40;
  *(_QWORD *)(v137 + 32) = 1;
  v138 = v409 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  OUTLINED_FUNCTION_29_0();
  v139 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  *(_QWORD *)(v137 + 40) = *(_QWORD *)(v138 + *(int *)(v139 + 40));
  *(_QWORD *)(v137 + 48) = -1;
  static NeuralNetwork.Layer.reshapeStatic(name:inputName:outputName:targetShape:)();
  swift_bridgeObjectRelease();
  if ((OUTLINED_FUNCTION_116_7() & 1) == 0)
  {
    OUTLINED_FUNCTION_66_22();
    v137 = v310;
  }
  v140 = *(_QWORD *)(v137 + 16);
  if (v140 >= *(_QWORD *)(v137 + 24) >> 1)
  {
    OUTLINED_FUNCTION_68_23();
    v137 = v311;
  }
  *(_QWORD *)(v137 + 16) = v140 + 1;
  OUTLINED_FUNCTION_30_37(v137 + v425 + v140 * v424, (uint64_t)v126);
  v431 = (char *)v137;
  OUTLINED_FUNCTION_161_1();
  static NeuralNetwork.Layer.expandDimensions(name:inputName:outputName:axes:)();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v126 = v312;
  }
  v141 = *((_QWORD *)v126 + 2);
  if (v141 >= *((_QWORD *)v126 + 3) >> 1)
  {
    OUTLINED_FUNCTION_0_77();
    v126 = v313;
  }
  *((_QWORD *)v126 + 2) = v141 + 1;
  OUTLINED_FUNCTION_30_37((uint64_t)&v126[v425 + v141 * v424], v122);
  v431 = v126;
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_13_60();
  static NeuralNetwork.Layer.transpose(name:inputName:outputName:axes:)();
  if ((OUTLINED_FUNCTION_135_0() & 1) == 0)
  {
    OUTLINED_FUNCTION_56_23();
    v141 = (unint64_t)v314;
  }
  OUTLINED_FUNCTION_183_2();
  v142 = *(_QWORD *)(v141 + 16);
  if (v142 >= *(_QWORD *)(v141 + 24) >> 1)
  {
    OUTLINED_FUNCTION_56_23();
    v141 = (unint64_t)v315;
  }
  *(_QWORD *)(v141 + 16) = v142 + 1;
  OUTLINED_FUNCTION_30_37(v141 + v425 + v142 * v424, (uint64_t)v120);
  if ((unsigned __int128)(v411 * (__int128)(uint64_t)v412) >> 64 == (v411 * (uint64_t)v412) >> 63)
  {
    v120 = (char *)v139;
    OUTLINED_FUNCTION_17_38();
    static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
    OUTLINED_FUNCTION_156_1();
    if (!v143)
      goto LABEL_23;
  }
  else
  {
    __break(1u);
  }
  OUTLINED_FUNCTION_56_23();
  v141 = (unint64_t)v316;
LABEL_23:
  v144 = OUTLINED_FUNCTION_112_8();
  OUTLINED_FUNCTION_30_37(v144, v116);
  v431 = (char *)v141;
  OUTLINED_FUNCTION_162_1();
  if ((OUTLINED_FUNCTION_135_0() & 1) == 0)
  {
    OUTLINED_FUNCTION_56_23();
    v141 = (unint64_t)v317;
  }
  v145 = v371;
  OUTLINED_FUNCTION_156_1();
  if (v143)
  {
    OUTLINED_FUNCTION_56_23();
    v141 = (unint64_t)v318;
  }
  v146 = OUTLINED_FUNCTION_112_8();
  OUTLINED_FUNCTION_30_37(v146, v413);
  v431 = (char *)v141;
  OUTLINED_FUNCTION_155_1();
  OUTLINED_FUNCTION_161_1();
  static NeuralNetwork.Layer.squeeze(name:inputName:outputName:axes:)();
  if ((OUTLINED_FUNCTION_135_0() & 1) == 0)
  {
    OUTLINED_FUNCTION_56_23();
    v141 = (unint64_t)v319;
  }
  OUTLINED_FUNCTION_156_1();
  if (v143)
  {
    OUTLINED_FUNCTION_56_23();
    v141 = (unint64_t)v320;
  }
  v147 = OUTLINED_FUNCTION_112_8();
  OUTLINED_FUNCTION_30_37(v147, (uint64_t)v420);
  OUTLINED_FUNCTION_155_1();
  static NeuralNetwork.Layer.innerProduct(name:inputName:outputName:inputChannelCount:outputChannelCount:)();
  v148 = *(_QWORD *)(v141 + 16);
  if (v148 >= *(_QWORD *)(v141 + 24) >> 1)
  {
    OUTLINED_FUNCTION_56_23();
    v141 = (unint64_t)v321;
  }
  *(_QWORD *)(v141 + 16) = v148 + 1;
  OUTLINED_FUNCTION_30_37(v141 + v425 + v148 * v424, v421);
  v431 = (char *)v141;
  v149 = swift_allocObject();
  *(_OWORD *)(v149 + 16) = xmmword_21AFE7D90;
  *(_QWORD *)(v149 + 32) = 1;
  *(_QWORD *)(v149 + 40) = *(_QWORD *)(v138 + *((int *)v120 + 10));
  *(_OWORD *)(v149 + 48) = xmmword_21AFF0820;
  OUTLINED_FUNCTION_155_1();
  OUTLINED_FUNCTION_161_1();
  static NeuralNetwork.Layer.reshapeStatic(name:inputName:outputName:targetShape:)();
  swift_bridgeObjectRelease();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v149 = v322;
  }
  v150 = v372;
  v151 = v370[1];
  OUTLINED_FUNCTION_109_9();
  if (v143)
  {
    OUTLINED_FUNCTION_1_65();
    v149 = v323;
  }
  v152 = OUTLINED_FUNCTION_80_13();
  ((void (*)(uint64_t, uint64_t, uint64_t))v423)(v152, v422, v134);
  v431 = (char *)v149;
  OUTLINED_FUNCTION_155_1();
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_13_60();
  static NeuralNetwork.Layer.transpose(name:inputName:outputName:axes:)();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_109_9();
  if (v143)
    OUTLINED_FUNCTION_1_65();
  v153 = OUTLINED_FUNCTION_80_13();
  OUTLINED_FUNCTION_30_37(v153, v151);
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_17_38();
  OUTLINED_FUNCTION_13_60();
  OUTLINED_FUNCTION_191_1();
  OUTLINED_FUNCTION_109_9();
  if (v143)
    OUTLINED_FUNCTION_1_65();
  v154 = OUTLINED_FUNCTION_80_13();
  OUTLINED_FUNCTION_30_37(v154, v145);
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_17_38();
  OUTLINED_FUNCTION_13_60();
  static NeuralNetwork.Layer.relu(name:inputName:outputName:)();
  OUTLINED_FUNCTION_109_9();
  if (v143)
    OUTLINED_FUNCTION_1_65();
  v155 = OUTLINED_FUNCTION_80_13();
  ((void (*)(uint64_t, uint64_t, uint64_t))v423)(v155, v150, v134);
  OUTLINED_FUNCTION_39_29();
  v156 = (char *)MEMORY[0x24BEE1768];
  OUTLINED_FUNCTION_189_2();
  v157 = v418;
  OUTLINED_FUNCTION_9_61();
  OUTLINED_FUNCTION_59_27();
  v158 = *MEMORY[0x24BE62780];
  v159 = type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind();
  v160 = OUTLINED_FUNCTION_173_1();
  LODWORD(v421) = v158;
  v420 = v161;
  v161(v160, v158, v159);
  OUTLINED_FUNCTION_173_0();
  v422 = v159;
  __swift_storeEnumTagSinglePayload(v162, v163, v164, v159);
  v426 = v145;
  v427 = v145;
  OUTLINED_FUNCTION_189_2();
  v165 = v370[0];
  OUTLINED_FUNCTION_9_61();
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_177_0();
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_13_60();
  OUTLINED_FUNCTION_123_6();
  v166 = *(_QWORD *)(v374 + 8);
  v167 = OUTLINED_FUNCTION_36_34();
  OUTLINED_FUNCTION_47_31(v167, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_46_27(v157);
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v156 = v324;
  }
  OUTLINED_FUNCTION_12_51();
  v168 = v165;
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v156 = v325;
  }
  v169 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_23_45(v169, v158);
  v431 = v156;
  v170 = v410;
  v171 = *(void (**)(uint64_t))(v410 + 104);
  v172 = v414;
  v173 = v415;
  LODWORD(v411) = *MEMORY[0x24BE626E8];
  v412 = v171;
  v171(v415);
  OUTLINED_FUNCTION_63_20();
  OUTLINED_FUNCTION_189_2();
  v174 = v418;
  OUTLINED_FUNCTION_9_61();
  OUTLINED_FUNCTION_29_35();
  type metadata accessor for NeuralNetwork.Layer.PoolParameters.Padding();
  OUTLINED_FUNCTION_173_0();
  v413 = v175;
  __swift_storeEnumTagSinglePayload(v176, v177, v178, v175);
  v426 = v145;
  v427 = v145;
  OUTLINED_FUNCTION_189_2();
  v179 = v168;
  OUTLINED_FUNCTION_9_61();
  v371 = v168;
  v372 = v158;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_17_38();
  OUTLINED_FUNCTION_13_60();
  static NeuralNetwork.Layer.pool(name:inputName:outputName:kind:kernelSize:strides:padding:)();
  v180 = OUTLINED_FUNCTION_46_27(v168);
  OUTLINED_FUNCTION_70_21(v180, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  OUTLINED_FUNCTION_46_27(v174);
  v410 = *(_QWORD *)(v170 + 8);
  ((void (*)(uint64_t, uint64_t))v410)(v173, v172);
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_183_2();
  OUTLINED_FUNCTION_12_51();
  v181 = v168;
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v182 = v418;
  v183 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v183, (uint64_t)&v397);
  OUTLINED_FUNCTION_51_31();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_31_36();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v422);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_17_38();
  OUTLINED_FUNCTION_13_60();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  v184 = OUTLINED_FUNCTION_41_28(v181);
  OUTLINED_FUNCTION_47_31(v184, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v185 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v185, (uint64_t)&v398);
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_17_38();
  OUTLINED_FUNCTION_13_60();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_12_51();
  v418 = v166;
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v186 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v186, (uint64_t)&v399);
  OUTLINED_FUNCTION_39_29();
  v187 = (char *)MEMORY[0x24BEE1768];
  v188 = MEMORY[0x24BEE1788];
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_59_27();
  OUTLINED_FUNCTION_25_41();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v166);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_13_60();
  OUTLINED_FUNCTION_123_6();
  v189 = OUTLINED_FUNCTION_81_16();
  OUTLINED_FUNCTION_47_31(v189, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_128_5();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v187 = v326;
  }
  v190 = v375;
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v187 = v327;
  }
  v191 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v191, (uint64_t)&v400);
  OUTLINED_FUNCTION_170_1();
  OUTLINED_FUNCTION_17_38();
  OUTLINED_FUNCTION_167_1();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v187 = v328;
  }
  v192 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v192, (uint64_t)&v401);
  v431 = v187;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_50_27();
  OUTLINED_FUNCTION_89_9();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v187 = v329;
  }
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v187 = v330;
  }
  v193 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v193, (uint64_t)&v402);
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_88_7();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v187 = v331;
  }
  *((_QWORD *)v187 + 2) = v188;
  OUTLINED_FUNCTION_23_45((uint64_t)&v187[v425 + v179 * v424], v190);
  OUTLINED_FUNCTION_39_29();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_59_27();
  OUTLINED_FUNCTION_25_41();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v190);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_143_2();
  v194 = OUTLINED_FUNCTION_45_29();
  OUTLINED_FUNCTION_47_31(v194, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v195 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v195, (uint64_t)&v403);
  OUTLINED_FUNCTION_32_28();
  OUTLINED_FUNCTION_63_20();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_29_35();
  OUTLINED_FUNCTION_3_58(v158, 0, 1, v413);
  v375 = v181;
  v376 = v158;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_52_22();
  v196 = OUTLINED_FUNCTION_36_34();
  OUTLINED_FUNCTION_70_21(v196, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  OUTLINED_FUNCTION_46_27(v182);
  OUTLINED_FUNCTION_42_26();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v197 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v197, (uint64_t)&v404);
  OUTLINED_FUNCTION_51_31();
  v198 = MEMORY[0x24BEE1768];
  v199 = MEMORY[0x24BEE1788];
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_31_36();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v422);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_123_6();
  v200 = OUTLINED_FUNCTION_41_28(v181);
  OUTLINED_FUNCTION_47_31(v200, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v198 = v332;
  }
  v201 = v376;
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v198 = v333;
  }
  v202 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v202, (uint64_t)&v405);
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_191_1();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v198 = v334;
  }
  *(_QWORD *)(v198 + 16) = v199;
  OUTLINED_FUNCTION_23_45(v198 + v425 + v179 * v424, v201);
  OUTLINED_FUNCTION_39_29();
  v203 = (char *)MEMORY[0x24BEE1768];
  v204 = MEMORY[0x24BEE1788];
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_59_27();
  OUTLINED_FUNCTION_25_41();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v201);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_143_2();
  v205 = OUTLINED_FUNCTION_81_16();
  OUTLINED_FUNCTION_47_31(v205, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_128_5();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v203 = v335;
  }
  v206 = v377;
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v203 = v336;
  }
  v207 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v207, (uint64_t)&v406);
  OUTLINED_FUNCTION_205_1();
  OUTLINED_FUNCTION_17_38();
  OUTLINED_FUNCTION_55_26();
  OUTLINED_FUNCTION_191_1();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v203 = v337;
  }
  v208 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v208, (uint64_t)&v407);
  v431 = v203;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_50_27();
  OUTLINED_FUNCTION_89_9();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v203 = v338;
  }
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v203 = v339;
  }
  v209 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v209, (uint64_t)&v408);
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_88_7();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v203 = v340;
  }
  *((_QWORD *)v203 + 2) = v204;
  OUTLINED_FUNCTION_23_45((uint64_t)&v203[v425 + v179 * v424], v206);
  OUTLINED_FUNCTION_39_29();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_59_27();
  OUTLINED_FUNCTION_25_41();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v206);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_123_6();
  v210 = OUTLINED_FUNCTION_45_29();
  OUTLINED_FUNCTION_47_31(v210, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v211 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v211, (uint64_t)&v409);
  OUTLINED_FUNCTION_32_28();
  OUTLINED_FUNCTION_63_20();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_29_35();
  OUTLINED_FUNCTION_3_58(v158, 0, 1, v413);
  v379 = v181;
  v380 = v158;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_52_22();
  v212 = OUTLINED_FUNCTION_36_34();
  OUTLINED_FUNCTION_70_21(v212, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  OUTLINED_FUNCTION_46_27(v182);
  OUTLINED_FUNCTION_42_26();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v213 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v213, (uint64_t)&v410);
  OUTLINED_FUNCTION_51_31();
  v214 = MEMORY[0x24BEE1768];
  v215 = MEMORY[0x24BEE1788];
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_31_36();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v422);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  v216 = OUTLINED_FUNCTION_41_28(v181);
  OUTLINED_FUNCTION_47_31(v216, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v214 = v341;
  }
  v217 = v378;
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v214 = v342;
  }
  v218 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v218, (uint64_t)&v411);
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v214 = v343;
  }
  *(_QWORD *)(v214 + 16) = v215;
  OUTLINED_FUNCTION_23_45(v214 + v425 + v179 * v424, v217);
  OUTLINED_FUNCTION_39_29();
  v219 = (char *)MEMORY[0x24BEE1768];
  v220 = MEMORY[0x24BEE1788];
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_59_27();
  OUTLINED_FUNCTION_25_41();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v217);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_123_6();
  v221 = OUTLINED_FUNCTION_81_16();
  OUTLINED_FUNCTION_47_31(v221, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_128_5();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v219 = v344;
  }
  v222 = v379;
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v219 = v345;
  }
  v223 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v223, (uint64_t)&v412);
  OUTLINED_FUNCTION_205_1();
  OUTLINED_FUNCTION_17_38();
  OUTLINED_FUNCTION_55_26();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v219 = v346;
  }
  v224 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v224, (uint64_t)&v413);
  v431 = v219;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_50_27();
  OUTLINED_FUNCTION_89_9();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v219 = v347;
  }
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v219 = v348;
  }
  v225 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v225, (uint64_t)&v414);
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_88_7();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v219 = v349;
  }
  *((_QWORD *)v219 + 2) = v220;
  OUTLINED_FUNCTION_23_45((uint64_t)&v219[v425 + v179 * v424], v222);
  OUTLINED_FUNCTION_39_29();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_59_27();
  OUTLINED_FUNCTION_25_41();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v222);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_144_3();
  v226 = OUTLINED_FUNCTION_45_29();
  OUTLINED_FUNCTION_47_31(v226, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v227 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v227, (uint64_t)&v415);
  OUTLINED_FUNCTION_32_28();
  OUTLINED_FUNCTION_63_20();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_29_35();
  OUTLINED_FUNCTION_3_58(v158, 0, 1, v413);
  v383 = v181;
  v384 = v158;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_52_22();
  v228 = OUTLINED_FUNCTION_36_34();
  OUTLINED_FUNCTION_70_21(v228, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  OUTLINED_FUNCTION_46_27(v182);
  OUTLINED_FUNCTION_42_26();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v229 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v229, (uint64_t)&v416);
  OUTLINED_FUNCTION_51_31();
  OUTLINED_FUNCTION_5_58();
  v426 = 2;
  v427 = 2;
  OUTLINED_FUNCTION_6_69();
  OUTLINED_FUNCTION_31_36();
  __swift_storeEnumTagSinglePayload(v174, 0, 1, v422);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  v230 = static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  OUTLINED_FUNCTION_47_31(v230, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_41_28(v181);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v231 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v231, (uint64_t)&v417);
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_165_2();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v232 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v232, (uint64_t)&v418);
  OUTLINED_FUNCTION_39_29();
  v233 = MEMORY[0x24BEE1788];
  OUTLINED_FUNCTION_5_58();
  v426 = 2;
  v427 = 2;
  OUTLINED_FUNCTION_6_69();
  OUTLINED_FUNCTION_59_27();
  v234 = v422;
  OUTLINED_FUNCTION_64_19();
  __swift_storeEnumTagSinglePayload(v174, 0, 1, v234);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_10_56();
  v235 = OUTLINED_FUNCTION_144_3();
  OUTLINED_FUNCTION_47_31(v235, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_41_28(v181);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v234 = v350;
  }
  v236 = v380;
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v234 = v351;
  }
  v237 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v237, (uint64_t)&v419);
  OUTLINED_FUNCTION_205_1();
  OUTLINED_FUNCTION_17_38();
  OUTLINED_FUNCTION_55_26();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v234 = v352;
  }
  v238 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v238, (uint64_t)&v420);
  v431 = (char *)v234;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_50_27();
  OUTLINED_FUNCTION_89_9();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v234 = v353;
  }
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v234 = v354;
  }
  v239 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v239, (uint64_t)&v421);
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_88_7();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v234 = v355;
  }
  *(_QWORD *)(v234 + 16) = v233;
  OUTLINED_FUNCTION_23_45(v234 + v425 + v179 * v424, v236);
  OUTLINED_FUNCTION_39_29();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_59_27();
  OUTLINED_FUNCTION_25_41();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v236);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_87_7();
  v240 = OUTLINED_FUNCTION_45_29();
  OUTLINED_FUNCTION_47_31(v240, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v241 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v241, (uint64_t)&v422);
  OUTLINED_FUNCTION_32_28();
  OUTLINED_FUNCTION_63_20();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_29_35();
  OUTLINED_FUNCTION_3_58(v158, 0, 1, v413);
  v389 = v181;
  v390 = v158;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_52_22();
  v242 = OUTLINED_FUNCTION_36_34();
  OUTLINED_FUNCTION_70_21(v242, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  OUTLINED_FUNCTION_46_27(v182);
  OUTLINED_FUNCTION_42_26();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v243 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v243, (uint64_t)&v423);
  OUTLINED_FUNCTION_51_31();
  v244 = (char *)MEMORY[0x24BEE1768];
  v245 = MEMORY[0x24BEE1788];
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_31_36();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v422);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  v246 = OUTLINED_FUNCTION_41_28(v181);
  OUTLINED_FUNCTION_47_31(v246, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v244 = v356;
  }
  v247 = v381;
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v244 = v357;
  }
  v248 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v248, (uint64_t)&v424);
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_165_2();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v244 = v358;
  }
  v249 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v249, (uint64_t)&v425);
  v431 = v244;
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_50_27();
  OUTLINED_FUNCTION_89_9();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v244 = v359;
  }
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v244 = v360;
  }
  *((_QWORD *)v244 + 2) = v245;
  OUTLINED_FUNCTION_23_45((uint64_t)&v244[v425 + v179 * v424], v247);
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_88_7();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v250 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v250, (uint64_t)&v426);
  OUTLINED_FUNCTION_39_29();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_59_27();
  OUTLINED_FUNCTION_25_41();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v247);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_87_7();
  v251 = OUTLINED_FUNCTION_45_29();
  OUTLINED_FUNCTION_47_31(v251, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v252 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v252, (uint64_t)&v427);
  OUTLINED_FUNCTION_32_28();
  OUTLINED_FUNCTION_63_20();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_29_35();
  OUTLINED_FUNCTION_3_58(v158, 0, 1, v413);
  v391 = v181;
  v392 = v158;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_52_22();
  v253 = OUTLINED_FUNCTION_36_34();
  OUTLINED_FUNCTION_70_21(v253, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  OUTLINED_FUNCTION_46_27(v182);
  OUTLINED_FUNCTION_42_26();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v254 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v254, (uint64_t)&v428);
  OUTLINED_FUNCTION_51_31();
  OUTLINED_FUNCTION_5_58();
  v426 = 2;
  v427 = 2;
  OUTLINED_FUNCTION_6_69();
  OUTLINED_FUNCTION_31_36();
  __swift_storeEnumTagSinglePayload(v174, 0, 1, v422);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  v255 = static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  OUTLINED_FUNCTION_47_31(v255, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_41_28(v181);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v256 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v256, (uint64_t)&v429);
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v257 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v257, (uint64_t)&v430);
  OUTLINED_FUNCTION_39_29();
  OUTLINED_FUNCTION_5_58();
  v426 = 2;
  v427 = 2;
  OUTLINED_FUNCTION_6_69();
  OUTLINED_FUNCTION_59_27();
  v258 = v422;
  OUTLINED_FUNCTION_64_19();
  __swift_storeEnumTagSinglePayload(v174, 0, 1, v258);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_10_56();
  v259 = OUTLINED_FUNCTION_87_7();
  OUTLINED_FUNCTION_47_31(v259, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_41_28(v181);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
  {
    OUTLINED_FUNCTION_1_65();
    v258 = v361;
  }
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v258 = v362;
  }
  v260 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v260, (uint64_t)&v431);
  OUTLINED_FUNCTION_205_1();
  OUTLINED_FUNCTION_17_38();
  OUTLINED_FUNCTION_55_26();
  static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
  OUTLINED_FUNCTION_12_51();
  if (v143)
  {
    OUTLINED_FUNCTION_0_77();
    v258 = v363;
  }
  v261 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v261, (uint64_t)&v432);
  v431 = (char *)v258;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_50_27();
  OUTLINED_FUNCTION_89_9();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v262 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v262, (uint64_t)&a9);
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_88_7();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v263 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v263, (uint64_t)&a10);
  OUTLINED_FUNCTION_39_29();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_59_27();
  OUTLINED_FUNCTION_25_41();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v247);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_142_0();
  v264 = OUTLINED_FUNCTION_45_29();
  OUTLINED_FUNCTION_47_31(v264, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_34_32();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v265 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_16_49(v265, (uint64_t)&a11);
  OUTLINED_FUNCTION_32_28();
  OUTLINED_FUNCTION_63_20();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_29_35();
  OUTLINED_FUNCTION_3_58(v158, 0, 1, v413);
  v393 = v181;
  v394 = v158;
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_52_22();
  OUTLINED_FUNCTION_36_34();
  outlined destroy of FeatureMatrixBuilder<Float>(v158, &demangling cache variable for type metadata for NeuralNetwork.Layer.PoolParameters.Padding?);
  OUTLINED_FUNCTION_46_27(v182);
  OUTLINED_FUNCTION_42_26();
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  v266 = (uint64_t)v385;
  v267 = (uint64_t)v382;
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v268 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_30_37(v268, v404);
  OUTLINED_FUNCTION_51_31();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_31_36();
  OUTLINED_FUNCTION_3_58(v174, 0, 1, v422);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
  v269 = OUTLINED_FUNCTION_36_34();
  OUTLINED_FUNCTION_47_31(v269, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_46_27(v182);
  if ((OUTLINED_FUNCTION_18_42() & 1) == 0)
    OUTLINED_FUNCTION_1_65();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v270 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_30_37(v270, v406);
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_164_1();
  OUTLINED_FUNCTION_12_51();
  if (v143)
    OUTLINED_FUNCTION_0_77();
  v271 = OUTLINED_FUNCTION_4_63();
  OUTLINED_FUNCTION_30_37(v271, v267);
  OUTLINED_FUNCTION_39_29();
  OUTLINED_FUNCTION_5_58();
  OUTLINED_FUNCTION_59_27();
  v272 = v422;
  OUTLINED_FUNCTION_64_19();
  OUTLINED_FUNCTION_173_0();
  OUTLINED_FUNCTION_3_58(v273, v274, v275, v272);
  OUTLINED_FUNCTION_27_48();
  OUTLINED_FUNCTION_8_65();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_142_0();
  v276 = OUTLINED_FUNCTION_36_34();
  OUTLINED_FUNCTION_47_31(v276, &demangling cache variable for type metadata for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind?);
  OUTLINED_FUNCTION_46_27(v182);
  if ((OUTLINED_FUNCTION_186_2() & 1) == 0)
  {
    OUTLINED_FUNCTION_69_14();
    v174 = v364;
  }
  v277 = v384;
  v278 = v383;
  if (*(_QWORD *)(v174 + 16) >= *(_QWORD *)(v174 + 24) >> 1)
  {
    OUTLINED_FUNCTION_67_21();
    v174 = v365;
  }
  v279 = OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_30_37(v279, v407);
  OUTLINED_FUNCTION_170_1();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_167_1();
  OUTLINED_FUNCTION_164_1();
  if (*(_QWORD *)(v174 + 16) >= *(_QWORD *)(v174 + 24) >> 1)
  {
    OUTLINED_FUNCTION_67_21();
    v174 = v366;
  }
  v280 = OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_30_37(v280, v278);
  v431 = (char *)v174;
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_50_27();
  OUTLINED_FUNCTION_89_9();
  if ((OUTLINED_FUNCTION_186_2() & 1) == 0)
  {
    OUTLINED_FUNCTION_69_14();
    v174 = v367;
  }
  v281 = *(_QWORD *)(v174 + 16);
  if (v281 >= *(_QWORD *)(v174 + 24) >> 1)
  {
    OUTLINED_FUNCTION_67_21();
    v174 = v368;
  }
  *(_QWORD *)(v174 + 16) = v281 + 1;
  OUTLINED_FUNCTION_30_37(v174 + v425 + v281 * v424, v277);
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_15_46();
  OUTLINED_FUNCTION_10_56();
  OUTLINED_FUNCTION_88_7();
  v431 = (char *)v174;
  v282 = *(_QWORD *)(v174 + 16);
  if (v282 >= *(_QWORD *)(v174 + 24) >> 1)
  {
    OUTLINED_FUNCTION_69_14();
    v431 = v369;
  }
  v283 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v282, v266);
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v283);
  ((void (*)(uint64_t, _QWORD, uint64_t))v412)(v415, v411, v414);
  v426 = 0;
  v427 = 0;
  OUTLINED_FUNCTION_174_1();
  v426 = 0;
  v427 = 0;
  OUTLINED_FUNCTION_174_1();
  v284 = v416;
  OUTLINED_FUNCTION_59_27();
  v285 = v413;
  v286 = OUTLINED_FUNCTION_173_1();
  v287(v286);
  __swift_storeEnumTagSinglePayload(v284, 0, 1, v285);
  OUTLINED_FUNCTION_177_0();
  NeuralNetwork.Layer.PoolParameters.init(kind:kernelSize:strides:padding:)();
  NeuralNetwork.Layer.PoolParameters.averageExcludesPadding.setter();
  NeuralNetwork.Layer.PoolParameters.doesGlobalPooling.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v288 = OUTLINED_FUNCTION_74_2();
  v289 = specialized static Array._adoptStorage(_:count:)(v288, 1);
  *v290 = 0x32352E7475706E69;
  v290[1] = 0xE800000000000000;
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v289);
  v291 = OUTLINED_FUNCTION_74_2();
  specialized static Array._adoptStorage(_:count:)(v291, 1);
  OUTLINED_FUNCTION_155_1();
  *v293 = v292 + 196608;
  v293[1] = 0xE300000000000000;
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v294);
  v295 = v389;
  v296 = v387;
  v297 = v390;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v389 + 16))(v387, v266, v390);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v386 + 104))(v296, *MEMORY[0x24BE62888], v388);
  OUTLINED_FUNCTION_196_2();
  NeuralNetwork.Layer.init(name:inputNames:outputNames:kind:)();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v298 = *((_QWORD *)v431 + 2);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v298);
  v299 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v298, 0xE800000000000000);
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v299);
  v300 = OUTLINED_FUNCTION_74_2();
  v301 = specialized static Array._adoptStorage(_:count:)(v300, 2);
  *v302 = xmmword_21AFF0830;
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v301);
  OUTLINED_FUNCTION_11_57();
  OUTLINED_FUNCTION_13_60();
  static NeuralNetwork.Layer.reshapeStatic(name:inputName:outputName:targetShape:)();
  OUTLINED_FUNCTION_30();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_98_8();
  v303 = OUTLINED_FUNCTION_129_3();
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v303);
  specialized Array.count.getter(*(_QWORD *)(v409 + 16));
  OUTLINED_FUNCTION_17_38();
  static NeuralNetwork.Layer.innerProduct(name:inputName:outputName:inputChannelCount:outputChannelCount:)();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_98_8();
  v304 = OUTLINED_FUNCTION_129_3();
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v304);
  static NeuralNetwork.Layer.softmaxND(name:inputName:outputName:axis:)();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  OUTLINED_FUNCTION_98_8();
  v305 = OUTLINED_FUNCTION_129_3();
  MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v305);
  (*(void (**)(uint64_t, uint64_t))(v295 + 8))(v266, v297);
  OUTLINED_FUNCTION_9_5();
}

uint64_t MLHandActionClassifier.GraphCNN.getCoreMLAndNeuralNetworksTrainableLayerMap(_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;

  v2 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (uint64_t)v2;
  OUTLINED_FUNCTION_84();
  v4 = 0;
  v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *(v5 - 1);
    v6 = *v5;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = OUTLINED_FUNCTION_178_0();
    v11 = v2[2];
    v12 = (v10 & 1) == 0;
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      break;
    v14 = v9;
    v15 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13))
    {
      v16 = OUTLINED_FUNCTION_178_0();
      if ((v15 & 1) != (v17 & 1))
        goto LABEL_16;
      v14 = v16;
    }
    if ((v15 & 1) != 0)
    {
      *(_QWORD *)(v2[7] + 8 * v14) = v4;
    }
    else
    {
      v2[(v14 >> 6) + 8] |= 1 << v14;
      v18 = (_QWORD *)(v2[6] + 16 * v14);
      *v18 = v7;
      v18[1] = v6;
      *(_QWORD *)(v2[7] + 8 * v14) = v4;
      v19 = v2[2];
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
        goto LABEL_15;
      v2[2] = v21;
      swift_bridgeObjectRetain();
    }
    ++v4;
    v5 += 2;
    OUTLINED_FUNCTION_101();
    swift_bridgeObjectRelease();
    if (v3 == v4)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MLHandActionClassifier.GraphCNN.updatedCoreMLLayers()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (**v51)(_QWORD, _QWORD, _QWORD);
  void (**v52)(_QWORD, _QWORD, _QWORD);
  void (*v53)(char *, uint64_t);
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t result;
  Swift::String v106;
  Swift::String v107;
  Swift::String v108;
  uint64_t v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  void (**v136)(_QWORD, _QWORD, _QWORD);
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unsigned int v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dense?);
  MEMORY[0x24BDAC7A8](v0);
  v151 = (uint64_t)&v125 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Dense();
  v150 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NeuralNetwork.Layer.InnerProductParameters();
  v6 = *(_QWORD *)(v5 - 8);
  v161 = v5;
  v162 = v6;
  MEMORY[0x24BDAC7A8](v5);
  v152 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BatchNorm?);
  MEMORY[0x24BDAC7A8](v8);
  v126 = (uint64_t)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for BatchNorm();
  v130 = *(_QWORD *)(v131 - 8);
  MEMORY[0x24BDAC7A8](v131);
  v133 = (uint64_t *)((char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for NeuralNetwork.Layer.BatchNormalizeParameters();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v134 = (uint64_t)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Conv2D?);
  MEMORY[0x24BDAC7A8](v14);
  v132 = (uint64_t)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Conv2D();
  v139 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v140 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (void (**)(_QWORD, _QWORD, _QWORD))type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters();
  v142 = (uint64_t)*(v18 - 1);
  MEMORY[0x24BDAC7A8](v18);
  v141 = (char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for NeuralNetwork.Layer.Kind();
  v165 = *(_QWORD *)(v20 - 8);
  v166 = v20;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v146 = (char *)&v125 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v157 = (char *)&v125 - v23;
  v163 = type metadata accessor for NeuralNetwork.Layer();
  v155 = *(_QWORD *)(v163 - 8);
  v24 = MEMORY[0x24BDAC7A8](v163);
  v153 = (char *)&v125 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v154 = (char *)&v125 - v26;
  MLHandActionClassifier.GraphCNN.defineCoreMLLayers(numberOfKeypointsChannels:numberOfKeypoints:)(3, 21, v27, v28, v29, v30, v31, v32, v125, v126, v127, v128, v129, v130, v131, v132, (uint64_t)v133, v134, v135,
    (uint64_t)v136);
  v34 = v33;
  swift_bridgeObjectRetain();
  MLHandActionClassifier.GraphCNN.coreMLTrainableLayerNames(from:)();
  v36 = v35;
  swift_bridgeObjectRelease();
  v37 = MLHandActionClassifier.GraphCNN.getCoreMLAndNeuralNetworksTrainableLayerMap(_:)(v36);
  MLHandActionClassifier.GraphCNN.trainableSublayers()();
  v39 = *(_QWORD *)(v34 + 16);
  v148 = v38;
  v149 = v39;
  if (!v39)
  {
LABEL_46:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v34;
  }
  v147 = v37;
  v143 = v36;
  v40 = 0;
  v156 = *MEMORY[0x24BE62870];
  v144 = *MEMORY[0x24BE62868];
  HIDWORD(v135) = *MEMORY[0x24BE62878];
  v145 = v38 + 32;
  v41 = v163;
  v129 = v11;
  v127 = v12;
  v128 = v16;
  v136 = v18;
  v138 = v4;
  v137 = v2;
  while (1)
  {
    if (v40 >= *(_QWORD *)(v34 + 16))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      swift_bridgeObjectRelease();
LABEL_63:
      v167 = 0;
      v168 = 0xE000000000000000;
      _StringGuts.grow(_:)(80);
      v106._object = (void *)0x800000021AFF9280;
      v106._countAndFlagsBits = 0xD00000000000003FLL;
      String.append(_:)(v106);
      v107._countAndFlagsBits = v160;
      v107._object = v18;
      String.append(_:)(v107);
      v108._countAndFlagsBits = 0x65726F63206E6920;
      v108._object = (void *)0xEF63657073206C6DLL;
      String.append(_:)(v108);
      goto LABEL_71;
    }
    v42 = v161;
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))v162;
    v43 = v34;
    v44 = v155;
    v159 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    v158 = *(_QWORD *)(v155 + 72) * v40;
    v45 = v34 + v159 + v158;
    v46 = *(void (**)(char *, unint64_t, uint64_t))(v155 + 16);
    v47 = v40;
    v48 = v154;
    v46(v154, v45, v41);
    v49 = NeuralNetwork.Layer.name.getter();
    v50 = v163;
    v160 = v49;
    v52 = v51;
    v53 = *(void (**)(char *, uint64_t))(v44 + 8);
    v53(v48, v163);
    v54 = *(_QWORD *)(v43 + 16);
    v164 = v47;
    if (v47 >= v54)
      goto LABEL_48;
    v55 = v43;
    v56 = v153;
    v46(v153, v45, v50);
    v57 = v157;
    NeuralNetwork.Layer.kind.getter();
    v53(v56, v50);
    v59 = v165;
    v58 = v166;
    v60 = (*(uint64_t (**)(char *, uint64_t))(v165 + 88))(v57, v166);
    if (v60 != v156)
      break;
    (*(void (**)(char *, uint64_t))(v59 + 96))(v57, v58);
    ((void (**)(char *, char *, uint64_t))v18)[4](v152, v57, v42);
    v61 = v147;
    v18 = v52;
    if (!*(_QWORD *)(v147 + 16))
      goto LABEL_63;
    swift_bridgeObjectRetain();
    v62 = specialized __RawDictionaryStorage.find<A>(_:)(v160, (uint64_t)v52);
    v63 = v137;
    v64 = v143;
    if ((v65 & 1) == 0)
      goto LABEL_62;
    v66 = *(_QWORD *)(*(_QWORD *)(v61 + 56) + 8 * v62);
    swift_bridgeObjectRelease();
    v67 = v138;
    if ((v66 & 0x8000000000000000) != 0)
      goto LABEL_49;
    if (v66 >= *(_QWORD *)(v148 + 16))
      goto LABEL_50;
    v34 = v55;
    outlined init with copy of TrainingSessionDelegate(v145 + 40 * v66, (uint64_t)&v167);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    if (!swift_dynamicCast())
    {
      v109 = v151;
      __swift_storeEnumTagSinglePayload(v151, 1, 1, v63);
      outlined destroy of FeatureMatrixBuilder<Float>(v109, &demangling cache variable for type metadata for Dense?);
      v167 = 0;
      v168 = 0xE000000000000000;
      _StringGuts.grow(_:)(81);
      v110._countAndFlagsBits = 0xD000000000000040;
      v110._object = (void *)0x800000021AFF8E20;
      String.append(_:)(v110);
      v111._countAndFlagsBits = v160;
      v111._object = v18;
      String.append(_:)(v111);
      v112._countAndFlagsBits = 0x65726F63206E6920;
      v112._object = (void *)0xEF63657073206C6DLL;
      String.append(_:)(v112);
      goto LABEL_71;
    }
    v68 = v151;
    __swift_storeEnumTagSinglePayload(v151, 0, 1, v63);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v150 + 32))(v67, v68, v63);
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v64 + 16) - 1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v70 = v164;
    if ((void (**)(_QWORD, _QWORD, _QWORD))v66 == v18)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v34 = v101;
      }
      if (v70 >= *(_QWORD *)(v34 + 16))
        goto LABEL_54;
    }
    else
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v34 = v103;
      }
      if (v70 >= *(_QWORD *)(v34 + 16))
        goto LABEL_56;
    }
    v98 = v152;
    NeuralNetwork.Layer.loadInnerProductFromNeuralNetworks(_:useBias:into:)();
    v99 = v67;
    v100 = v146;
    (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v146, v98, v161);
    (*(void (**)(char *, _QWORD, uint64_t))(v165 + 104))(v100, v156, v166);
    if (v70 >= *(_QWORD *)(v34 + 16))
      goto LABEL_51;
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))v98;
    NeuralNetwork.Layer.kind.setter();
    (*(void (**)(char *, uint64_t))(v150 + 8))(v99, v63);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v98, v161);
    v41 = v163;
LABEL_45:
    v40 = v70 + 1;
    if (v149 == v40)
      goto LABEL_46;
  }
  if (v60 == v144)
  {
    v71 = v157;
    (*(void (**)(char *, uint64_t))(v165 + 96))(v157, v166);
    (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v141, v71, (uint64_t)v136);
    v72 = v147;
    if (!*(_QWORD *)(v147 + 16))
      goto LABEL_66;
    swift_bridgeObjectRetain();
    v73 = specialized __RawDictionaryStorage.find<A>(_:)(v160, (uint64_t)v52);
    if ((v74 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_66:
      v167 = 0;
      v168 = 0xE000000000000000;
      _StringGuts.grow(_:)(79);
      v113._countAndFlagsBits = 0xD00000000000003ELL;
      v113._object = (void *)0x800000021AFF9340;
      String.append(_:)(v113);
      v114._countAndFlagsBits = v160;
      v114._object = v52;
      String.append(_:)(v114);
      v115._countAndFlagsBits = 0x65726F63206E6920;
      v115._object = (void *)0xEF63657073206C6DLL;
      String.append(_:)(v115);
      goto LABEL_71;
    }
    v75 = v55;
    v76 = *(_QWORD *)(*(_QWORD *)(v72 + 56) + 8 * v73);
    swift_bridgeObjectRelease();
    v77 = v128;
    v78 = v164;
    if ((v76 & 0x8000000000000000) != 0)
      goto LABEL_52;
    if (v76 >= *(_QWORD *)(v148 + 16))
      goto LABEL_53;
    outlined init with copy of TrainingSessionDelegate(v145 + 40 * v76, (uint64_t)&v167);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    v79 = v132;
    if ((swift_dynamicCast() & 1) == 0)
    {
      __swift_storeEnumTagSinglePayload(v79, 1, 1, v77);
      outlined destroy of FeatureMatrixBuilder<Float>(v79, &demangling cache variable for type metadata for Conv2D?);
      v167 = 0;
      v168 = 0xE000000000000000;
      _StringGuts.grow(_:)(80);
      v116._object = (void *)0x800000021AFF8FE0;
      v116._countAndFlagsBits = 0xD00000000000003FLL;
      String.append(_:)(v116);
      v117._countAndFlagsBits = v160;
      v117._object = v52;
      String.append(_:)(v117);
      v118._countAndFlagsBits = 0x65726F63206E6920;
      v118._object = (void *)0xEF63657073206C6DLL;
      String.append(_:)(v118);
      goto LABEL_71;
    }
    __swift_storeEnumTagSinglePayload(v79, 0, 1, v77);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v139 + 32))(v140, v79, v77);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v75 = v102;
    }
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))v140;
    if (v78 >= *(_QWORD *)(v75 + 16))
      goto LABEL_55;
    v80 = v140;
    v81 = v141;
    NeuralNetwork.Layer.loadConv2DFromNeuralNetworks(_:useBias:into:)();
    v82 = v142;
    v83 = v78;
    v84 = v146;
    v18 = v136;
    (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v146, v81, (uint64_t)v136);
    (*(void (**)(char *, _QWORD, uint64_t))(v165 + 104))(v84, v144, v166);
    if (v83 >= *(_QWORD *)(v75 + 16))
      goto LABEL_57;
    NeuralNetwork.Layer.kind.setter();
    (*(void (**)(char *, uint64_t))(v139 + 8))(v80, v77);
    (*(void (**)(char *, void (**)(_QWORD, _QWORD, _QWORD)))(v82 + 8))(v81, v18);
    v41 = v163;
    v34 = v75;
    goto LABEL_44;
  }
  if (v60 != HIDWORD(v135))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v165 + 8))(v157, v166);
    v41 = v163;
    v34 = v55;
LABEL_44:
    v70 = v164;
    goto LABEL_45;
  }
  v85 = v157;
  (*(void (**)(char *, uint64_t))(v165 + 96))(v157, v166);
  (*(void (**)(uint64_t, char *, uint64_t))(v127 + 32))(v134, v85, v129);
  v86 = v147;
  if (!*(_QWORD *)(v147 + 16))
    goto LABEL_69;
  v34 = v55;
  swift_bridgeObjectRetain();
  v87 = specialized __RawDictionaryStorage.find<A>(_:)(v160, (uint64_t)v52);
  v88 = v164;
  if ((v89 & 1) != 0)
  {
    v90 = *(_QWORD *)(*(_QWORD *)(v86 + 56) + 8 * v87);
    swift_bridgeObjectRelease();
    v91 = v129;
    if ((v90 & 0x8000000000000000) != 0)
      goto LABEL_58;
    if (v90 >= *(_QWORD *)(v148 + 16))
      goto LABEL_59;
    outlined init with copy of TrainingSessionDelegate(v145 + 40 * v90, (uint64_t)&v167);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
    v92 = v126;
    v93 = v131;
    if (!swift_dynamicCast())
    {
      __swift_storeEnumTagSinglePayload(v92, 1, 1, v93);
      outlined destroy of FeatureMatrixBuilder<Float>(v92, &demangling cache variable for type metadata for BatchNorm?);
      v167 = 0;
      v168 = 0xE000000000000000;
      _StringGuts.grow(_:)(78);
      v122._countAndFlagsBits = 0xD00000000000003DLL;
      v122._object = (void *)0x800000021AFF9300;
      String.append(_:)(v122);
      v123._countAndFlagsBits = v160;
      v123._object = v52;
      String.append(_:)(v123);
      v124._countAndFlagsBits = 0x65726F63206E6920;
      v124._object = (void *)0xEF63657073206C6DLL;
      String.append(_:)(v124);
      goto LABEL_71;
    }
    __swift_storeEnumTagSinglePayload(v92, 0, 1, v93);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v130 + 32))(v133, v92, v93);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v34 = v104;
    }
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))v133;
    if (v88 >= *(_QWORD *)(v34 + 16))
      goto LABEL_60;
    v94 = v88;
    v95 = v134;
    NeuralNetwork.Layer.loadBatchNormFromNeuralNetworks(_:into:)();
    v96 = v127;
    v97 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v146, v95, v91);
    (*(void (**)(char *, _QWORD, uint64_t))(v165 + 104))(v97, HIDWORD(v135), v166);
    if (v94 >= *(_QWORD *)(v34 + 16))
      goto LABEL_61;
    NeuralNetwork.Layer.kind.setter();
    (*(void (**)(void (**)(_QWORD, _QWORD, _QWORD), uint64_t))(v130 + 8))(v18, v131);
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v91);
    v41 = v163;
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
LABEL_69:
  v167 = 0;
  v168 = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v119._countAndFlagsBits = 0xD00000000000003CLL;
  v119._object = (void *)0x800000021AFF92C0;
  String.append(_:)(v119);
  v120._countAndFlagsBits = v160;
  v120._object = v52;
  String.append(_:)(v120);
  v121._countAndFlagsBits = 0x65726F63206E6920;
  v121._object = (void *)0xEF63657073206C6DLL;
  String.append(_:)(v121);
LABEL_71:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void NeuralNetwork.Layer.loadConv2DFromNeuralNetworks(_:useBias:into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  Swift::String v19;
  Swift::String v20;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_206_2(v2, v3);
  v4 = type metadata accessor for Conv2D();
  v5 = OUTLINED_FUNCTION_204_2(v4);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_131_5(v6, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_80_3(v8, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_100_6();
  OUTLINED_FUNCTION_201_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_99_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_140_2();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_130_5();
  v13 = NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.getter();
  if (v13 == MEMORY[0x220758F8C]())
  {
    OUTLINED_FUNCTION_120_7();
    Conv2D.weight.getter();
    OUTLINED_FUNCTION_209_2();
    OUTLINED_FUNCTION_137_3();
    OUTLINED_FUNCTION_86_9();
    NeuralNetwork.Layer.ConvolutionParameters.weights.setter();
    if ((v18 & 1) != 0)
    {
      Conv2D.bias.getter();
      if (__swift_getEnumTagSinglePayload(v1, 1, v0) == 1)
      {
        outlined destroy of FeatureMatrixBuilder<Float>(v1, &demangling cache variable for type metadata for Tensor?);
      }
      else
      {
        OUTLINED_FUNCTION_138_3();
        OUTLINED_FUNCTION_208_1();
        OUTLINED_FUNCTION_86_9();
        OUTLINED_FUNCTION_157_2();
        NeuralNetwork.Layer.ConvolutionParameters.bias.setter();
        OUTLINED_FUNCTION_180_2();
      }
    }
    OUTLINED_FUNCTION_9_5();
  }
  else
  {
    OUTLINED_FUNCTION_139_3();
    _StringGuts.grow(_:)(99);
    OUTLINED_FUNCTION_15_4(0xD00000000000003BLL, (uint64_t)"Mismatched Conv2D dimension, neural networks framework has ");
    MEMORY[0x220758F8C]();
    v19._countAndFlagsBits = OUTLINED_FUNCTION_77_15();
    OUTLINED_FUNCTION_148_2(v19);
    OUTLINED_FUNCTION_101();
    v14._object = (void *)0x800000021AFF93C0;
    v14._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v14);
    NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.getter();
    v20._countAndFlagsBits = OUTLINED_FUNCTION_77_15();
    OUTLINED_FUNCTION_148_2(v20);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x6C656E6E61686320;
    v15._object = (void *)0xEA00000000002E73;
    String.append(_:)(v15);
    OUTLINED_FUNCTION_133_3();
    __break(1u);
  }
}

void NeuralNetwork.Layer.loadBatchNormFromNeuralNetworks(_:into:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_3();
  v0 = type metadata accessor for Tensor();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_49();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_120_7();
  BatchNorm.scale.getter();
  OUTLINED_FUNCTION_62_28();
  OUTLINED_FUNCTION_95_9();
  OUTLINED_FUNCTION_75_16();
  type metadata accessor for NeuralNetwork.WeightParameters();
  OUTLINED_FUNCTION_54_23();
  NeuralNetwork.Layer.BatchNormalizeParameters.scale.setter();
  OUTLINED_FUNCTION_120_7();
  BatchNorm.offset.getter();
  OUTLINED_FUNCTION_62_28();
  OUTLINED_FUNCTION_95_9();
  OUTLINED_FUNCTION_75_16();
  OUTLINED_FUNCTION_54_23();
  NeuralNetwork.Layer.BatchNormalizeParameters.offset.setter();
  OUTLINED_FUNCTION_120_7();
  BatchNorm.runningMean.getter();
  OUTLINED_FUNCTION_62_28();
  OUTLINED_FUNCTION_95_9();
  OUTLINED_FUNCTION_75_16();
  OUTLINED_FUNCTION_54_23();
  NeuralNetwork.Layer.BatchNormalizeParameters.mean.setter();
  OUTLINED_FUNCTION_120_7();
  BatchNorm.runningVariance.getter();
  OUTLINED_FUNCTION_62_28();
  OUTLINED_FUNCTION_95_9();
  OUTLINED_FUNCTION_75_16();
  OUTLINED_FUNCTION_54_23();
  NeuralNetwork.Layer.BatchNormalizeParameters.variance.setter();
  OUTLINED_FUNCTION_9_5();
}

void NeuralNetwork.Layer.loadInnerProductFromNeuralNetworks(_:useBias:into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  Swift::String v18;
  Swift::String v19;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_206_2(v2, v3);
  v4 = type metadata accessor for Dense();
  v5 = OUTLINED_FUNCTION_204_2(v4);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_131_5(v6, v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_80_3(v8, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_100_6();
  OUTLINED_FUNCTION_201_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_99_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_140_2();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_130_5();
  v13 = NeuralNetwork.Layer.InnerProductParameters.outputChannelCount.getter();
  if (v13 == Dense.unitCount.getter())
  {
    OUTLINED_FUNCTION_120_7();
    Dense.weight.getter();
    OUTLINED_FUNCTION_209_2();
    OUTLINED_FUNCTION_137_3();
    OUTLINED_FUNCTION_86_9();
    NeuralNetwork.Layer.InnerProductParameters.weights.setter();
    if ((v17 & 1) != 0)
    {
      Dense.bias.getter();
      if (__swift_getEnumTagSinglePayload(v1, 1, v0) == 1)
      {
        outlined destroy of FeatureMatrixBuilder<Float>(v1, &demangling cache variable for type metadata for Tensor?);
      }
      else
      {
        OUTLINED_FUNCTION_138_3();
        OUTLINED_FUNCTION_208_1();
        OUTLINED_FUNCTION_86_9();
        OUTLINED_FUNCTION_157_2();
        NeuralNetwork.Layer.InnerProductParameters.bias.setter();
        OUTLINED_FUNCTION_180_2();
      }
    }
    OUTLINED_FUNCTION_9_5();
  }
  else
  {
    OUTLINED_FUNCTION_139_3();
    _StringGuts.grow(_:)(86);
    OUTLINED_FUNCTION_15_4(0xD000000000000041, (uint64_t)"Mismatched innerProduct dimension, neural networks framework has ");
    Dense.unitCount.getter();
    v18._countAndFlagsBits = OUTLINED_FUNCTION_77_15();
    OUTLINED_FUNCTION_148_2(v18);
    OUTLINED_FUNCTION_101();
    v14._object = (void *)0x800000021AFF9430;
    v14._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v14);
    NeuralNetwork.Layer.InnerProductParameters.outputChannelCount.getter();
    v19._countAndFlagsBits = OUTLINED_FUNCTION_77_15();
    OUTLINED_FUNCTION_148_2(v19);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_133_3();
    __break(1u);
  }
}

id outlined bridged method (mbbnn) of @objc NSBundle.url(forResource:withExtension:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;

  v8 = (void *)MEMORY[0x22075A8AC]();
  swift_bridgeObjectRelease();
  v9 = (void *)MEMORY[0x22075A8AC](a3, a4);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(a5, sel_URLForResource_withExtension_, v8, v9);

  return v10;
}

void OUTLINED_FUNCTION_0_77()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_1_65()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_3_58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
  *(_QWORD *)(v5 - 136) = v4;
  *(_QWORD *)(v5 - 128) = v4;
  return NeuralNetwork.Extent.init(height:width:)();
}

uint64_t OUTLINED_FUNCTION_4_63()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = v1;
  return v0 + *(_QWORD *)(v3 - 144) + v2 * *(_QWORD *)(v3 - 152);
}

uint64_t OUTLINED_FUNCTION_5_58()
{
  return NeuralNetwork.Extent.init(height:width:)();
}

uint64_t OUTLINED_FUNCTION_6_69()
{
  return NeuralNetwork.Extent.init(height:width:)();
}

uint64_t OUTLINED_FUNCTION_7_62()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_8_65()
{
  return 0x2E7475706E69;
}

uint64_t OUTLINED_FUNCTION_9_61()
{
  return NeuralNetwork.Extent.init(height:width:)();
}

uint64_t OUTLINED_FUNCTION_11_57()
{
  return 0x2E7475706E69;
}

uint64_t OUTLINED_FUNCTION_16_49@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD, uint64_t);

  return v3(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t OUTLINED_FUNCTION_18_42()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_22_41()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x65726F63206E6920;
  v0._object = (void *)0xEF63657073206C6DLL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_23_45(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_25_41()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1 - 184))(v0, *(unsigned int *)(v1 - 176), *(_QWORD *)(v1 - 168));
}

uint64_t OUTLINED_FUNCTION_28_39()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 - 216) = v0;
  *(_QWORD *)(v2 - 208) = v0 + 32;
  v3 = *(_QWORD *)(v2 - 824);
  *(_QWORD *)(v2 - 200) = 0;
  *(_QWORD *)(v2 - 192) = v3;
  __swift_storeEnumTagSinglePayload(v1, 1, 1, *(_QWORD *)(v2 - 832));
  return Tensor.init<A>(shape:scalars:on:)();
}

uint64_t OUTLINED_FUNCTION_29_35()
{
  return static NeuralNetwork.Layer.PoolParameters.Padding.valid(leadingHeight:trailingHeight:leadingWidth:trailingWidth:)();
}

uint64_t OUTLINED_FUNCTION_30_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 160))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_31_36()
{
  return static NeuralNetwork.Layer.ConvolutionParameters.PaddingKind.valid(leadingHeight:trailingHeight:leadingWidth:trailingWidth:)();
}

uint64_t OUTLINED_FUNCTION_32_28()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 - 248))(*(_QWORD *)(v1 - 224), *(unsigned int *)(v1 - 256), *(_QWORD *)(v1 - 232));
}

uint64_t OUTLINED_FUNCTION_34_32()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_36_34()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, *(_QWORD *)(v2 - 192));
}

void OUTLINED_FUNCTION_37_21(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_39_29()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
  *(_QWORD *)(v1 - 136) = 1;
  *(_QWORD *)(v1 - 128) = 1;
}

uint64_t OUTLINED_FUNCTION_41_28(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_42_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 264))(v1, v0);
}

void OUTLINED_FUNCTION_44_30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 208);
  *(_QWORD *)(v0 - 216) = *(_QWORD *)(v0 - 216);
  *(_QWORD *)(v0 - 208) = v1;
}

uint64_t OUTLINED_FUNCTION_45_29()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 200))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_46_27(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_47_31(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of FeatureMatrixBuilder<Float>(v2, a2);
}

void OUTLINED_FUNCTION_51_31()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
  *(_QWORD *)(v1 - 136) = 1;
  *(_QWORD *)(v1 - 128) = 9;
}

uint64_t OUTLINED_FUNCTION_52_22()
{
  return static NeuralNetwork.Layer.pool(name:inputName:outputName:kind:kernelSize:strides:padding:)();
}

uint64_t OUTLINED_FUNCTION_54_23()
{
  uint64_t v0;
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return v0;
}

void OUTLINED_FUNCTION_56_23()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_58_17()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 216) = 0;
  *(_QWORD *)(v0 - 208) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_59_27()
{
  return NeuralNetwork.ValidPaddingParameters.init()();
}

uint64_t OUTLINED_FUNCTION_61_20()
{
  return NeuralNetwork.Layer.name.getter();
}

uint64_t OUTLINED_FUNCTION_62_28()
{
  return Tensor.scalars<A>(as:)();
}

void OUTLINED_FUNCTION_63_20()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 136) = 3;
  *(_QWORD *)(v0 - 128) = 1;
}

uint64_t OUTLINED_FUNCTION_64_19()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 184))();
}

void OUTLINED_FUNCTION_66_22()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_67_21()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_68_23()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_69_14()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_70_21(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of FeatureMatrixBuilder<Float>(v2, a2);
}

uint64_t OUTLINED_FUNCTION_71_16()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 848))(v0, *(_QWORD *)(v1 - 304));
}

uint64_t OUTLINED_FUNCTION_72_17()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 256) + 8))(*(_QWORD *)(v0 - 248), *(_QWORD *)(v0 - 232));
}

uint64_t OUTLINED_FUNCTION_73_20()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 - 1000))(*(_QWORD *)(v0 - 240), *(_QWORD *)(v0 - 992));
}

uint64_t OUTLINED_FUNCTION_75_16()
{
  return NeuralNetwork.WeightParameters.init(_:updatable:)();
}

uint64_t OUTLINED_FUNCTION_77_15()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_78_12(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
}

void OUTLINED_FUNCTION_79_12()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 216) = 0;
  *(_QWORD *)(v0 - 208) = 0xE000000000000000;
  _StringGuts.grow(_:)(67);
}

uint64_t OUTLINED_FUNCTION_80_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = v1;
  return v0 + *(_QWORD *)(v3 - 144) + v2 * *(_QWORD *)(v3 - 152);
}

uint64_t OUTLINED_FUNCTION_81_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 200))(v1, v0);
}

unint64_t OUTLINED_FUNCTION_84_12()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 208);
  *(_QWORD *)(v0 - 216) = *(_QWORD *)(v0 - 216);
  *(_QWORD *)(v0 - 208) = v1;
  return 0xD000000000000032;
}

uint64_t OUTLINED_FUNCTION_85_15()
{
  uint64_t v0;

  return outlined release of BlobsFile(v0 - 176);
}

uint64_t OUTLINED_FUNCTION_86_9()
{
  return NeuralNetwork.WeightParameters.init(_:updatable:)();
}

uint64_t OUTLINED_FUNCTION_87_7()
{
  return static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
}

uint64_t OUTLINED_FUNCTION_88_7()
{
  return static NeuralNetwork.Layer.relu(name:inputName:outputName:)();
}

uint64_t OUTLINED_FUNCTION_89_9()
{
  return static NeuralNetwork.Layer.add(name:inputNames:outputName:)();
}

uint64_t OUTLINED_FUNCTION_90_7()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 440) + 8))(*(_QWORD *)(v1 - 312), v0);
}

void OUTLINED_FUNCTION_91_12()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_93_8()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_94_8()
{
  uint64_t v0;

  return outlined init with copy of TrainingSessionDelegate(v0 - 192, v0 - 272);
}

uint64_t OUTLINED_FUNCTION_95_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_96_11(unint64_t a1)
{
  return BlobsFile.floatBlob(at:)(a1);
}

uint64_t OUTLINED_FUNCTION_98_8()
{
  uint64_t v0;

  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(*(_QWORD *)(v0 - 96) + 16));
}

uint64_t OUTLINED_FUNCTION_99_9()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_100_6()
{
  return type metadata accessor for Tensor();
}

uint64_t OUTLINED_FUNCTION_105_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_106_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 288) = v0;
  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 96))(v2, *(_QWORD *)(v3 - 224));
}

uint64_t OUTLINED_FUNCTION_112_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = v1;
  return v0 + *(_QWORD *)(v3 - 144) + v2 * *(_QWORD *)(v3 - 152);
}

uint64_t OUTLINED_FUNCTION_114_6()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD, _QWORD);
  uint64_t v2;

  return v1(v0, *(_QWORD *)(v2 - 392), *(_QWORD *)(v2 - 384));
}

uint64_t OUTLINED_FUNCTION_115_7()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of TrainingSessionDelegate(*(_QWORD *)(v1 - 808) + 40 * v0, v1 - 216);
}

uint64_t OUTLINED_FUNCTION_116_7()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_119_6()
{
  return swift_release();
}

unint64_t OUTLINED_FUNCTION_121_8(uint64_t a1)
{
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_123_6()
{
  return static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
}

uint64_t OUTLINED_FUNCTION_124_4()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_125_6(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 320) = v1;
  *(_QWORD *)(v2 - 216) = a1;
  return type metadata accessor for ComputeDevice();
}

void OUTLINED_FUNCTION_126_2()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 216) = 0;
  *(_QWORD *)(v0 - 208) = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
}

uint64_t OUTLINED_FUNCTION_127_6()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 344);
}

uint64_t OUTLINED_FUNCTION_128_5()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_129_3()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v0, v1);
}

void OUTLINED_FUNCTION_130_5()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = v0;
}

void OUTLINED_FUNCTION_131_5(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_133_3()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_135_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_137_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_138_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_139_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v0 + 16))(*(_QWORD *)(v2 - 144), v1, *(_QWORD *)(v2 - 152));
}

uint64_t OUTLINED_FUNCTION_140_2()
{
  return type metadata accessor for NeuralNetwork.WeightParameters();
}

uint64_t OUTLINED_FUNCTION_142_0()
{
  return static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
}

uint64_t OUTLINED_FUNCTION_143_2()
{
  return static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
}

uint64_t OUTLINED_FUNCTION_144_3()
{
  return static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)();
}

unint64_t OUTLINED_FUNCTION_146_5()
{
  return 0xD000000000000012;
}

void OUTLINED_FUNCTION_148_2(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_149_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_150_2()
{
  return Layer.updateValue<A>(_:for:)();
}

uint64_t OUTLINED_FUNCTION_151_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_157_2()
{
  uint64_t v0;
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v0, 0, 1, *(_QWORD *)(v1 - 136));
  return v0;
}

uint64_t OUTLINED_FUNCTION_158_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 256);
  return swift_retain();
}

unint64_t OUTLINED_FUNCTION_160_1()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 208);
  *(_QWORD *)(v0 - 216) = *(_QWORD *)(v0 - 216);
  *(_QWORD *)(v0 - 208) = v1;
  return 0xD00000000000003DLL;
}

uint64_t OUTLINED_FUNCTION_162_1()
{
  return static NeuralNetwork.Layer.transpose(name:inputName:outputName:axes:)();
}

uint64_t OUTLINED_FUNCTION_164_1()
{
  return static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
}

uint64_t OUTLINED_FUNCTION_165_2()
{
  return static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
}

uint64_t OUTLINED_FUNCTION_166_0()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_168_1()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_170_1()
{
  return 0x6C61756469736572;
}

uint64_t OUTLINED_FUNCTION_171_2@<X0>(uint64_t (*a1)(void)@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 848) = a1;
  return a1();
}

uint64_t OUTLINED_FUNCTION_173_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_174_1()
{
  return NeuralNetwork.Extent.init(height:width:)();
}

uint64_t OUTLINED_FUNCTION_175_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v1, v3);
}

uint64_t OUTLINED_FUNCTION_176_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

unint64_t OUTLINED_FUNCTION_178_0()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_179_1()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_180_2()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_181_0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_185_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = v1;
  return v0 + *(_QWORD *)(v3 - 144) + v2 * *(_QWORD *)(v3 - 152);
}

uint64_t OUTLINED_FUNCTION_186_2()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_187_1()
{
  return NeuralNetwork.Layer.name.getter();
}

uint64_t OUTLINED_FUNCTION_188_1()
{
  return dispatch thunk of _AnyIteratorBoxBase.next()();
}

uint64_t OUTLINED_FUNCTION_189_2()
{
  uint64_t v0;

  return v0 - 128;
}

uint64_t OUTLINED_FUNCTION_190_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_191_1()
{
  return static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)();
}

uint64_t OUTLINED_FUNCTION_192_0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_193_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_198_1()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_199_1()
{
  return Parameter.id.getter();
}

uint64_t OUTLINED_FUNCTION_202_0()
{
  return 0x746867696577;
}

uint64_t OUTLINED_FUNCTION_204_2(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_206_2(uint64_t a1, int a2)
{
  uint64_t v2;

  *(_DWORD *)(v2 - 116) = a2;
  return 0;
}

uint64_t OUTLINED_FUNCTION_208_1()
{
  return Tensor.scalars<A>(as:)();
}

uint64_t OUTLINED_FUNCTION_209_2()
{
  return Tensor.scalars<A>(as:)();
}

uint64_t static BatchNorm.loadLayer(from:layerName:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Swift::String v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Tensor();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v51 = (uint64_t)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v50 = (uint64_t)&v44 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v54 = (uint64_t)&v44 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v44 - v16;
  v52 = a1;
  v53 = a2;
  OUTLINED_FUNCTION_23_3();
  v18._countAndFlagsBits = 0x74657366666F2ELL;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19 = OUTLINED_FUNCTION_0_78();
  OUTLINED_FUNCTION_30();
  if (!v19)
  {
    OUTLINED_FUNCTION_5_59();
    _StringGuts.grow(_:)(39);
    OUTLINED_FUNCTION_2_67();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_4_64();
    v33 = v32 + 21;
    v34 = ".offset not found in state dictionary";
LABEL_20:
    v40 = (unint64_t)(v34 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v33);
    v42 = v52;
    v41 = v53;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v43 = v42;
    *(_QWORD *)(v43 + 8) = v41;
    *(_OWORD *)(v43 + 16) = 0u;
    *(_OWORD *)(v43 + 32) = 0u;
    *(_BYTE *)(v43 + 48) = 2;
    return swift_willThrow(0.0);
  }
  v49 = v8;
  v52 = a1;
  v53 = a2;
  OUTLINED_FUNCTION_23_3();
  v20._countAndFlagsBits = 0x656C6163732ELL;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21 = OUTLINED_FUNCTION_0_78();
  OUTLINED_FUNCTION_30();
  if (!v21)
  {
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_5_59();
    _StringGuts.grow(_:)(38);
    OUTLINED_FUNCTION_2_67();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_4_64();
    v33 = v35 + 20;
    v34 = ".scale not found in state dictionary";
    goto LABEL_20;
  }
  v47 = v17;
  v52 = a1;
  v53 = a2;
  OUTLINED_FUNCTION_23_3();
  v22._countAndFlagsBits = 0x676E696E6E75722ELL;
  v22._object = (void *)0xEC0000006E61654DLL;
  String.append(_:)(v22);
  v23 = OUTLINED_FUNCTION_0_78();
  OUTLINED_FUNCTION_30();
  v48 = v23;
  if (!v23)
  {
    OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_5_59();
    _StringGuts.grow(_:)(44);
    OUTLINED_FUNCTION_2_67();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_4_64();
    v33 = v36 + 26;
    v34 = ".runningMean not found in state dictionary";
    goto LABEL_20;
  }
  v46 = a3;
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  OUTLINED_FUNCTION_2_67();
  OUTLINED_FUNCTION_15_0();
  v52 = a1;
  v53 = a2;
  v24._object = (void *)0x800000021AFF94E0;
  v24._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v24);
  v25 = OUTLINED_FUNCTION_0_78();
  OUTLINED_FUNCTION_30();
  if (!v25)
  {
    OUTLINED_FUNCTION_125_1();
    OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_80();
    v52 = 0;
    v53 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    OUTLINED_FUNCTION_2_67();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_4_64();
    v33 = v37 + 30;
    v34 = ".runningVariance not found in state dictionary";
    goto LABEL_20;
  }
  v52 = a1;
  v53 = a2;
  OUTLINED_FUNCTION_23_3();
  v26._countAndFlagsBits = 0x75746E656D6F6D2ELL;
  v26._object = (void *)0xE90000000000006DLL;
  String.append(_:)(v26);
  v27 = OUTLINED_FUNCTION_0_78();
  OUTLINED_FUNCTION_30();
  if (!v27)
  {
LABEL_17:
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_125_1();
    OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_5_59();
    _StringGuts.grow(_:)(41);
    OUTLINED_FUNCTION_2_67();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_4_64();
    v33 = v38 + 23;
    v34 = ".momentum not found in state dictionary";
    goto LABEL_20;
  }
  if (*(_QWORD *)(v27 + 16) != 1)
  {
    OUTLINED_FUNCTION_10_3();
    goto LABEL_17;
  }
  v52 = a1;
  v53 = a2;
  OUTLINED_FUNCTION_23_3();
  v28._countAndFlagsBits = 0x6E6F6C697370652ELL;
  v28._object = (void *)0xE800000000000000;
  String.append(_:)(v28);
  v29 = OUTLINED_FUNCTION_0_78();
  result = OUTLINED_FUNCTION_30();
  if (!v29)
  {
LABEL_19:
    OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_125_1();
    OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_5_59();
    _StringGuts.grow(_:)(40);
    OUTLINED_FUNCTION_2_67();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_4_64();
    v33 = v39 + 22;
    v34 = ".epsilon not found in state dictionary";
    goto LABEL_20;
  }
  if (*(_QWORD *)(v29 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (*(_QWORD *)(v27 + 16))
  {
    v45 = v25;
    OUTLINED_FUNCTION_10_3();
    type metadata accessor for TensorShape();
    v31 = (uint64_t)v49;
    OUTLINED_FUNCTION_1_66();
    Array<A>.floatTensor(shape:)(v31, v19, (uint64_t)v47);
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_11_58();
    OUTLINED_FUNCTION_1_66();
    Array<A>.floatTensor(shape:)(v31, v21, v54);
    OUTLINED_FUNCTION_106_0();
    result = OUTLINED_FUNCTION_11_58();
    if (*(_QWORD *)(v29 + 16))
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_1_66();
      Array<A>.floatTensor(shape:)(v31, v48, v50);
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_11_58();
      OUTLINED_FUNCTION_1_66();
      Array<A>.floatTensor(shape:)(v31, v45, v51);
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_11_58();
      return BatchNorm.init(momentum:offset:scale:epsilon:runningMean:runningVariance:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_0_78()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Dictionary.subscript.getter(*(_QWORD *)(v1 - 112), *(_QWORD *)(v1 - 104), v0);
}

uint64_t OUTLINED_FUNCTION_1_66()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_2_67()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_4_64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = v1;
  *(_QWORD *)(v2 - 104) = v0;
}

void OUTLINED_FUNCTION_5_59()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0;
  *(_QWORD *)(v0 - 104) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_11_58()
{
  uint64_t v0;

  return outlined destroy of TensorShape?(v0);
}

uint64_t MLImageClassifier.FeatureExtractor.init(type:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[12] = a1;
  v2[13] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor>);
  v2[14] = v3;
  v2[15] = *(_QWORD *)(v3 - 8);
  v2[16] = OUTLINED_FUNCTION_0();
  type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  v2[17] = OUTLINED_FUNCTION_0();
  v2[18] = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  v2[19] = OUTLINED_FUNCTION_0();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLImageClassifier.FeatureExtractor.init(type:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of MLImageClassifier.FeatureExtractorType(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 152));
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v1;
    *v1 = v0;
    v1[1] = MLImageClassifier.FeatureExtractor.init(type:);
    return MLImageClassifier.CustomFeatureExtractor.buildTransformer()(*(_QWORD *)(v0 + 128));
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 96);
    objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF648]), sel_init);
    v4 = type metadata accessor for ImageFeaturePrint();
    v5 = MEMORY[0x24BDC5A98];
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = v5;
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 16));
    v6 = ImageFeaturePrint.init(revision:cropAndScale:context:)();
    OUTLINED_FUNCTION_3_59(v6, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    outlined init with take of BinaryFloatingPoint((__int128 *)(v0 + 16), v3);
    OUTLINED_FUNCTION_5_60();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 80) = v2;
  *(_QWORD *)(v0 + 88) = lazy protocol witness table accessor for type ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor> and conformance ComposedTransformer<A, B>();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(boxed_opaque_existential_0, v1, v2);
  v7 = outlined destroy of MLImageClassifier.CustomFeatureExtractor(v4, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  OUTLINED_FUNCTION_3_59(v7, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  outlined init with take of BinaryFloatingPoint((__int128 *)(v0 + 56), v5);
  OUTLINED_FUNCTION_5_60();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = outlined destroy of MLImageClassifier.CustomFeatureExtractor(*(_QWORD *)(v0 + 104), type metadata accessor for MLImageClassifier.FeatureExtractorType);
  OUTLINED_FUNCTION_3_59(v1, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor> and conformance ComposedTransformer<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor> and conformance ComposedTransformer<A, B>;
  if (!lazy protocol witness table cache variable for type ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor> and conformance ComposedTransformer<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor>);
    result = MEMORY[0x22075B938](MEMORY[0x24BDC5BB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComposedTransformer<ImageScaler, MLModelImageFeatureExtractor> and conformance ComposedTransformer<A, B>);
  }
  return result;
}

uint64_t initializeWithCopy for MLImageClassifier.FeatureExtractor(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for MLImageClassifier.FeatureExtractor(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MLImageClassifier.FeatureExtractor(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.FeatureExtractor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.FeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLImageClassifier.FeatureExtractor()
{
  return &type metadata for MLImageClassifier.FeatureExtractor;
}

uint64_t OUTLINED_FUNCTION_3_59(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return outlined destroy of MLImageClassifier.CustomFeatureExtractor(v2, a2);
}

uint64_t OUTLINED_FUNCTION_5_60()
{
  return swift_task_dealloc();
}

uint64_t MLImageClassifier.init(_:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  OUTLINED_FUNCTION_46_24();
  v3[5] = OUTLINED_FUNCTION_4_6();
  type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  v3[6] = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

#error "21AFB3EDC: call analysis failed (funcsize=71)"

uint64_t MLImageClassifier.init(_:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_52_2();
  *v4 = *v3;
  *(_QWORD *)(v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v2 + 72) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD **)(v0 + 16);
  outlined destroy of MLImageClassifier.ModelParameters(*(_QWORD *)(v0 + 32));
  outlined destroy of MLHandPoseClassifier.ModelParameters(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  *v4 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_10();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v3 + 8;
  v5 = v3 + *(int *)(v0 + 88);
  v6 = v3 + *(int *)(v0 + 84);
  v7 = v3 + *(int *)(v0 + 80);
  outlined destroy of MLImageClassifier.ModelParameters(*(_QWORD *)(v0 + 32));
  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  outlined destroy of MLImageClassifier.ModelParameters(v4);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v7, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v6, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v5, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  swift_task_dealloc();
  OUTLINED_FUNCTION_10();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MLImageClassifier.init(checkpoint:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;

  v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  v51 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_101_0();
  v53 = v5;
  v52 = v6;
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_211();
  v54 = v8;
  OUTLINED_FUNCTION_118();
  v9 = type metadata accessor for MLImageClassifier.Model();
  v48 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_101_0();
  v50 = v10;
  v49 = v11;
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_211();
  v66 = v13;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v64 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  OUTLINED_FUNCTION_64();
  v63 = v14;
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>.Configuration);
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_211();
  v59 = v16;
  OUTLINED_FUNCTION_118();
  v62 = type metadata accessor for MLImageClassifier.Classifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_211();
  v68 = v19;
  OUTLINED_FUNCTION_118();
  v58 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_211();
  v57 = v23;
  OUTLINED_FUNCTION_118();
  v55 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_151_1();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_211();
  v56 = v26;
  OUTLINED_FUNCTION_118();
  type metadata accessor for MLImageClassifier.PersistentParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_64();
  v70 = v28;
  OUTLINED_FUNCTION_118();
  v69 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v69);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v29);
  MEMORY[0x24BDAC7A8](v30);
  v75 = (char *)v47 - v31;
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_211();
  v73 = v33;
  OUTLINED_FUNCTION_118();
  v34 = type metadata accessor for MLImageClassifier();
  v72 = a2 + *(int *)(v34 + 24);
  MLClassifierMetrics.init()(v34, v35, v36, v37, v38, v39, v40, v41, v47[0], v47[1], v48, v49, v50, v51, v52, v53, v54, v55, v56,
    v57);
  v47[0] = v34;
  v42 = (_QWORD *)(a2 + *(int *)(v34 + 28));
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_17_39();
  OUTLINED_FUNCTION_44_2(v43, 0xD0000000000000C0);
  *v42 = v44;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  v71 = v42;
  swift_storeEnumTagMultiPayload();
  v45 = *(int *)(type metadata accessor for MLCheckpoint() + 20);
  v74 = a1;
  v46 = *(unsigned __int8 *)(a1 + v45);
  v67 = a2;
  __asm { BR              X10 }
}

void sub_21AFB452C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD, uint64_t);
  _QWORD *v46;

  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v5 - 184);
  if ((v6 & 1) != 0)
  {
    v8 = *(_QWORD *)(v5 - 176);
    URL.deletingLastPathComponent()();
    URL.appendingPathComponent(_:)();
    URL.appendingPathExtension(_:)();
    v9 = v4;
    v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v11 = *(_QWORD *)(v5 - 216);
    v10(v9, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v7, v11);
    v12 = *(_QWORD **)(v5 - 208);
    v13 = *(_QWORD *)(v5 - 224);
    MLImageClassifier.PersistentParameters.init(sessionDirectory:)(v0, v12);
    if (!v13)
    {
      *(_QWORD *)(v5 - 224) = v10;
      v16 = *(_QWORD *)(v5 - 352);
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v12 + v2[5], v16, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      v17 = *(_QWORD *)((char *)v12 + v2[8]);
      v18 = *(_QWORD *)((char *)v12 + v2[9]);
      v19 = *(_QWORD *)(v5 - 344);
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v12 + v2[6], v19, type metadata accessor for MLImageClassifier.FeatureExtractorType);
      v20 = *(_QWORD *)(v5 - 240);
      *(_QWORD *)(v20 + 8) = v17;
      v20 += 8;
      *(_OWORD *)(v20 + 32) = 0u;
      *(_OWORD *)(v20 + 64) = 0u;
      *(_OWORD *)(v20 + 48) = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_QWORD *)(v20 + 8) = v18;
      outlined init with copy of MLTrainingSessionParameters(v16, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      v21 = OUTLINED_FUNCTION_16_50(v5 - 104);
      outlined init with take of MLHandPoseClassifier.ModelParameters(v1, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      outlined assign with take of Any?(v5 - 168, v20 + 16);
      v22 = *(_QWORD *)(v5 - 328);
      outlined init with copy of MLTrainingSessionParameters(v19, v22, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
      v23 = OUTLINED_FUNCTION_16_50(v5 - 80);
      outlined init with take of MLHandPoseClassifier.ModelParameters(v22, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
      outlined assign with take of Any?(v5 - 168, v20 + 48);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v19, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v16, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      outlined init with copy of MLImageClassifier.ModelParameters((__int128 *)v20, v5 - 168);
      MLImageClassifier.ModelParameters.algorithm.getter(v22);
      lazy protocol witness table accessor for type Float and conformance Float();
      v24 = *(_QWORD *)(v5 - 312);
      LogisticRegressionClassifier.Configuration.init()();
      v25 = *(_QWORD *)(v5 - 288);
      LogisticRegressionClassifier.Configuration.maximumIterations.setter();
      v26 = *(_QWORD *)(v5 - 296);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v26 + 16))(*(_QWORD *)(v5 - 320), v24, v25);
      v27 = *(_QWORD *)(v5 - 272);
      LogisticRegressionClassifier.init(labels:configuration:)();
      outlined destroy of MLImageClassifier.ModelParameters(v5 - 168);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
      v28 = *(_QWORD *)(v5 - 304);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 264) + 32))(v28, v27, *(_QWORD *)(v5 - 256));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
      swift_storeEnumTagMultiPayload();
      outlined destroy of MLHandPoseClassifier.ModelParameters(v22, type metadata accessor for MLImageClassifier.FeatureExtractorType);
      outlined init with take of MLHandPoseClassifier.ModelParameters(v28, *(_QWORD *)(v5 - 232), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
      lazy protocol witness table accessor for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier();
      v29 = *(_QWORD *)(v5 - 248);
      UpdatableSupervisedEstimator.readWithOptimizer(from:)();
      v30 = *(_QWORD *)(v5 - 424);
      MLImageClassifier.ModelParameters.algorithm.getter(v30);
      v31 = *(_QWORD *)(v5 - 368);
      outlined init with take of MLHandPoseClassifier.ModelParameters(v30, v31, type metadata accessor for MLImageClassifier.FeatureExtractorType);
      v32 = *(_QWORD *)(v5 - 400);
      OUTLINED_FUNCTION_27_49(v29, v33, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
      v34 = *(_QWORD *)(v5 - 376);
      outlined init with copy of MLTrainingSessionParameters(v31, v34, type metadata accessor for MLImageClassifier.FeatureExtractorType);
      v35 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 416) + 80);
      v36 = (v35 + 16) & ~v35;
      v37 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 392) + 80);
      v38 = (*(_QWORD *)(v5 - 408) + v37 + v36) & ~v37;
      v39 = swift_allocObject();
      outlined init with take of MLHandPoseClassifier.ModelParameters(v32, v39 + v36, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
      outlined init with take of MLHandPoseClassifier.ModelParameters(v34, v39 + v38, type metadata accessor for MLImageClassifier.FeatureExtractorType);
      specialized blockAwait<A>(_:)();
      v42 = v41;
      v43 = swift_release();
      OUTLINED_FUNCTION_87_6(v43, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v31, type metadata accessor for MLImageClassifier.FeatureExtractorType);
      outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v5 - 232), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
      outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v5 - 208), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
      v45 = *(void (**)(_QWORD, uint64_t))(v5 - 224);
      v44 = *(_QWORD *)(v5 - 216);
      v45(*(_QWORD *)(v5 - 72), v44);
      v45(*(_QWORD *)(v5 - 184), v44);
      v46 = *(_QWORD **)(v5 - 240);
      *v46 = v42;
      outlined init with take of MLHandPoseClassifier.ModelParameters(v29, (uint64_t)v46 + *(int *)(*(_QWORD *)(v5 - 432) + 32), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
      return;
    }
    outlined destroy of MLHandPoseClassifier.ModelParameters(v8, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v10(*(_QWORD *)(v5 - 72), v11);
    v10(v7, v11);
  }
  else
  {
    OUTLINED_FUNCTION_17_39();
    *(_QWORD *)v14 = 0xD00000000000003CLL;
    *(_QWORD *)(v14 + 8) = 0x800000021AFF9590;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_BYTE *)(v14 + 48) = 0;
    v15 = swift_willThrow(0.0);
    OUTLINED_FUNCTION_87_6(v15, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
  }
  v40 = *(_QWORD *)(v5 - 200);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v5 - 192), type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v40, type metadata accessor for MLClassifierMetrics);
}

unint64_t lazy protocol witness table accessor for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier;
  if (!lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier)
  {
    v1 = type metadata accessor for MLImageClassifier.Classifier();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLImageClassifier.Classifier, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier);
  }
  return result;
}

uint64_t closure #1 in MLImageClassifier.init(checkpoint:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  *(_QWORD *)(v3 + 16) = a1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = closure #1 in MLImageClassifier.init(checkpoint:);
  return MLImageClassifier.Model.exportAsCompiledMLModel(featureExtractorType:)(a3);
}

uint64_t closure #1 in MLImageClassifier.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;

  OUTLINED_FUNCTION_52_2();
  v4 = *v3;
  *v5 = v4;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  *(_QWORD *)(v2 + 32) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

uint64_t sub_21AFB4CE8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for MLImageClassifier.Model();
  OUTLINED_FUNCTION_46_24();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v0 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v0 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v1 = __swift_instantiateConcreteTypeFromMangledName(v0);
  OUTLINED_FUNCTION_11_1(v1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for URL();
    OUTLINED_FUNCTION_11_1(v2);
    type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLImageClassifier.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(type metadata accessor for MLImageClassifier.Model() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_46_24() - 8) + 80);
  v6 = v0 + ((v3 + v4 + v5) & ~v5);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  v8 = OUTLINED_FUNCTION_18_43(v7);
  return closure #1 in MLImageClassifier.init(checkpoint:)(v8, v9, v6);
}

void static MLImageClassifier.train(trainingData:parameters:sessionParameters:)(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;

  static MLImageClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(a1, a2, a3);
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLImageClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
}

void static MLImageClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[10];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_151_1();
  MEMORY[0x24BDAC7A8](v9);
  static _ImageUtilities.getImageURLsAndLabels(from:)(a1);
  if (!v3)
  {
    outlined init with copy of MLImageClassifier.ModelParameters(a2, (uint64_t)v13);
    OUTLINED_FUNCTION_27_49(a3, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    v11 = type metadata accessor for ImageClassifierTrainingSessionDelegate();
    OUTLINED_FUNCTION_15_1();
    v12 = ImageClassifierTrainingSessionDelegate.init(filesByLabel:modelParameters:sessionParameters:)();
    v13[3] = v11;
    v13[4] = &protocol witness table for ImageClassifierTrainingSessionDelegate;
    v13[0] = v12;
    outlined init with copy of MLTrainingSessionParameters(a3, v4, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v13, v4, 12);
  }
}

void static MLImageClassifier.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLImageClassifier>);
  OUTLINED_FUNCTION_15_1();
  swift_retain();
  specialized MLJob.init(_:)();
}

void static MLImageClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v13[-1] - v6;
  OUTLINED_FUNCTION_27_49(a1, v8, v9);
  v10 = type metadata accessor for ImageClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v11 = ImageClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v7);
  if (!v2)
  {
    v13[3] = v10;
    v13[4] = &protocol witness table for ImageClassifierTrainingSessionDelegate;
    v13[0] = v11;
    outlined init with copy of MLTrainingSessionParameters(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v13, v1, 12);
  }
}

uint64_t closure #1 in closure #1 in static MLImageClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v20;
  uint64_t v21;
  _BYTE v22[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a2 & 1) != 0)
  {
    *v12 = a1;
    swift_storeEnumTagMultiPayload();
    v20 = a1;
    a4(v12);
    return outlined destroy of Result<MLImageClassifier, Error>((uint64_t)v12);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for ImageClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    v16 = v21;
    v17 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v17);
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    v18[4] = v16;
    v18[5] = a4;
    v18[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:), (uint64_t)v18);
    return swift_release();
  }
}

uint64_t closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  v6[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Result<>.init(catching:)
                                                + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = v1;
  *v1 = v0;
  v1[1] = closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:);
  return v3(v0[5], v0[2]);
}

{
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of Result<MLImageClassifier, Error>(v1);
  OUTLINED_FUNCTION_10();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined destroy of Result<MLImageClassifier, Error>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21AFB545C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[6];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  v7 = OUTLINED_FUNCTION_18_43(v6);
  return closure #1 in closure #1 in closure #1 in static MLImageClassifier.resume(_:)(v7, v8, v2, v3, v4, v5);
}

uint64_t *OUTLINED_FUNCTION_16_50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = *(_QWORD *)(a1 - 256);
  return __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v1 - 168));
}

uint64_t OUTLINED_FUNCTION_17_39()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_18_43(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void OUTLINED_FUNCTION_27_49(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with copy of MLTrainingSessionParameters(a1, v3, a3);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t MLHandPoseClassifier.ImageAugmentationOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void specialized OptionSet.union(_:)(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void specialized OptionSet.symmetricDifference(_:)(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

BOOL specialized OptionSet<>.insert(_:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

void specialized OptionSet<>.remove(_:)(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  _QWORD *v2;

  if ((*v2 & a2) != 0)
    *v2 &= ~a2;
  OUTLINED_FUNCTION_1_67(a1);
}

void specialized OptionSet<>.update(with:)(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  _QWORD *v2;

  *v2 |= a2;
  OUTLINED_FUNCTION_1_67(a1);
}

void specialized OptionSet<>.formUnion(_:)(uint64_t a1)
{
  _QWORD *v1;

  OUTLINED_FUNCTION_2_68(*v1 | a1);
}

void specialized OptionSet<>.formSymmetricDifference(_:)(uint64_t a1)
{
  _QWORD *v1;

  OUTLINED_FUNCTION_2_68(*v1 ^ a1);
}

void specialized SetAlgebra.subtracting(_:)(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

BOOL specialized SetAlgebra.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

void specialized SetAlgebra.subtract(_:)(uint64_t a1)
{
  _QWORD *v1;

  OUTLINED_FUNCTION_2_68(*v1 & ~a1);
}

uint64_t MLHandPoseClassifier.ImageAugmentationOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static MLHandPoseClassifier.ImageAugmentationOptions.horizontallyFlip.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLHandPoseClassifier.ImageAugmentationOptions.rotate.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLHandPoseClassifier.ImageAugmentationOptions.translate.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLHandPoseClassifier.ImageAugmentationOptions.scale.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

unint64_t lazy protocol witness table accessor for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandPoseClassifier.ImageAugmentationOptions, &type metadata for MLHandPoseClassifier.ImageAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandPoseClassifier.ImageAugmentationOptions, &type metadata for MLHandPoseClassifier.ImageAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandPoseClassifier.ImageAugmentationOptions, &type metadata for MLHandPoseClassifier.ImageAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandPoseClassifier.ImageAugmentationOptions, &type metadata for MLHandPoseClassifier.ImageAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions);
  }
  return result;
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance MLHandPoseClassifier.ImageAugmentationOptions@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return MLHandPoseClassifier.ImageAugmentationOptions.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance MLHandPoseClassifier.ImageAugmentationOptions()
{
  lazy protocol witness table accessor for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLHandPoseClassifier.ImageAugmentationOptions()
{
  lazy protocol witness table accessor for type MLHandPoseClassifier.ImageAugmentationOptions and conformance MLHandPoseClassifier.ImageAugmentationOptions();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for SetAlgebra.remove(_:) in conformance MLHandPoseClassifier.ImageAugmentationOptions(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  specialized OptionSet<>.remove(_:)(a2, *a1);
}

void protocol witness for SetAlgebra.update(with:) in conformance MLHandPoseClassifier.ImageAugmentationOptions(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  specialized OptionSet<>.update(with:)(a2, *a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MLHandPoseClassifier.ImageAugmentationOptions@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = MLHandPoseClassifier.ImageAugmentationOptions.init(rawValue:)(*a1, (_QWORD *)a2);
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLHandPoseClassifier.ImageAugmentationOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MLHandPoseClassifier.ImageAugmentationOptions.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MLHandPoseClassifier.ImageAugmentationOptions@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized SetAlgebra<>.init(arrayLiteral:)(a1, a2);
}

ValueMetadata *type metadata accessor for MLHandPoseClassifier.ImageAugmentationOptions()
{
  return &type metadata for MLHandPoseClassifier.ImageAugmentationOptions;
}

void OUTLINED_FUNCTION_1_67(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = v2;
}

void OUTLINED_FUNCTION_2_68(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1;
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5(void (*a1)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v2;
  uint64_t v3;

  a1(&v3, &v2);
  return v3;
}

void _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML20MLHandPoseClassifierV_s5Error_pTgm5(void (*a1)(uint64_t *)@<X0>, uint64_t a2@<X8>)
{
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML20MLHandPoseClassifierV_s5Error_pTgm5Tm(a1, &demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>, a2);
}

void _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML22MLHandActionClassifierV_s5Error_pTgm5(void (*a1)(uint64_t *)@<X0>, uint64_t a2@<X8>)
{
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML20MLHandPoseClassifierV_s5Error_pTgm5Tm(a1, &demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>, a2);
}

void _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML20MLHandPoseClassifierV_s5Error_pTgm5Tm(void (*a1)(uint64_t *)@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_14_5();
  a1(&v8);
  swift_storeEnumTagMultiPayload();
  outlined init with take of (key: String, value: MLDataValueConvertible)?(v3, a3, a2);
  OUTLINED_FUNCTION_8_0();
}

void MLUntypedColumn.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_82_12();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in MLUntypedColumn.init<A>(_:));
  OUTLINED_FUNCTION_48_27();
  *(_QWORD *)v0 = v1;
  *(_BYTE *)(v0 + 8) = v2 & 1;
  OUTLINED_FUNCTION_31_22();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_82_12();
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in MLUntypedColumn.init<A>(_:));
  OUTLINED_FUNCTION_48_27();
  *(_QWORD *)v0 = v1;
  *(_BYTE *)(v0 + 8) = v2 & 1;
  OUTLINED_FUNCTION_31_22();
}

void MLUntypedColumn.type.getter()
{
  char *v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_42_27();
  if ((v1 & 1) != 0)
  {
    v2 = 6;
  }
  else
  {
    v3 = OUTLINED_FUNCTION_78_13();
    OUTLINED_FUNCTION_46_28(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, SWORD2(v12), SBYTE6(v12), SHIBYTE(v12));
    OUTLINED_FUNCTION_14_56();
  }
  *v0 = v2;
  OUTLINED_FUNCTION_23_7();
}

void MLUntypedColumn.map<A>(_:)()
{
  MLUntypedColumn.map<A>(_:)();
}

{
  MLUntypedColumn.map<A>(skipUndefined:_:)();
  OUTLINED_FUNCTION_23_7();
}

void MLUntypedColumn.count.getter()
{
  uint64_t v0;
  void *v1;

  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
  {
    v1 = *(void **)v0;
    swift_retain();
    CMLColumn.size.getter();
    outlined consume of Result<_DataTable, Error>(v1, 0);
  }
  OUTLINED_FUNCTION_22();
}

#error "21AFB5B7C: call analysis failed (funcsize=51)"

void MLUntypedColumn.ints.getter()
{
  id *v0;
  char v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_42_27();
  if ((v1 & 1) != 0
    || (v2 = outlined copy of Result<_DataTable, Error>(*v0, 0),
        OUTLINED_FUNCTION_46_28((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v13, v14, SWORD2(v14), SBYTE6(v14), SHIBYTE(v14)), OUTLINED_FUNCTION_14_56(), v10))
  {
    OUTLINED_FUNCTION_34_33();
    OUTLINED_FUNCTION_23_7();
  }
  else
  {
    v11 = (void *)OUTLINED_FUNCTION_18_44();
    OUTLINED_FUNCTION_5_61(v11, v12);
  }
}

void static MLUntypedColumn.== infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_31_15();
  v3 = v2;
  v5 = *(_QWORD **)v4;
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    v6 = v5;
    v7 = 1;
LABEL_7:
    *(_QWORD *)v3 = v5;
    *(_BYTE *)(v3 + 8) = v7;
    OUTLINED_FUNCTION_4_31();
    return;
  }
  v8 = *(_QWORD **)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    v9 = v8;
    v7 = 1;
    v5 = v8;
    goto LABEL_7;
  }
  v10 = v1;
  v11 = *(_QWORD *)(v5[2] + 16);
  v12 = *(_QWORD *)(v8[2] + 16);
  outlined copy of Result<_DataTable, Error>(*(id *)v0, 0);
  OUTLINED_FUNCTION_12_3(v5);
  v13 = specialized handling<A, B, C, D>(_:_:_:_:)(v11, v10, v12);
  if (v13)
  {
    OUTLINED_FUNCTION_10_19();
    v14 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v14 + 16) = v13;
    OUTLINED_FUNCTION_225();
    v15 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v15 + 16) = v14;
    outlined consume of Result<_DataTable, Error>(v8, 0);
    OUTLINED_FUNCTION_16_4();
    v7 = 0;
    v5 = (_QWORD *)v15;
    goto LABEL_7;
  }
  __break(1u);
}

{
  void *v0;
  char v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  char v11;

  OUTLINED_FUNCTION_67_22();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_26_37();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (OUTLINED_FUNCTION_80_14())
    {
      OUTLINED_FUNCTION_122_3(v0);
    }
    else
    {
      OUTLINED_FUNCTION_49_0();
      *v10 = v0;
    }
    OUTLINED_FUNCTION_122_3(v0);
  }
  else
  {
    v3 = v1;
    OUTLINED_FUNCTION_225();
    v4 = OUTLINED_FUNCTION_49_26();
    OUTLINED_FUNCTION_66_23(v4, v5, v6, v7, v8);
    OUTLINED_FUNCTION_79_13();
    static _UntypedColumn.performRightScalar(op:a:b:)(v3);
    v9 = (void *)OUTLINED_FUNCTION_68_24();
    outlined consume of Result<_DataTable, Error>(v9, v11);
  }
  OUTLINED_FUNCTION_88_8();
  OUTLINED_FUNCTION_50_28();
}

{
  void *v0;
  char v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_67_22();
  if ((v1 & 1) != 0)
  {
    OUTLINED_FUNCTION_26_37();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      OUTLINED_FUNCTION_122_3(v0);
    }
    else
    {
      OUTLINED_FUNCTION_49_0();
      *v2 = v0;
    }
    OUTLINED_FUNCTION_122_3(v0);
  }
  else
  {
    OUTLINED_FUNCTION_225();
    OUTLINED_FUNCTION_51_0();
    static _UntypedColumn.performRightScalar(op:a:b:)(4);
    OUTLINED_FUNCTION_3_10();
  }
  OUTLINED_FUNCTION_88_8();
  OUTLINED_FUNCTION_43_0();
}

void MLUntypedColumn.subscript.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  char v8;

  OUTLINED_FUNCTION_42_27();
  if ((v3 & 1) != 0)
  {
    v4 = 0uLL;
    v5 = 6;
  }
  else
  {
    v6 = v2;
    OUTLINED_FUNCTION_78_13();
    _UntypedColumn.valueAtIndex(index:)(v6, (uint64_t)&v7);
    OUTLINED_FUNCTION_102(v1);
    v4 = v7;
    v5 = v8;
  }
  *(_OWORD *)v0 = v4;
  *(_BYTE *)(v0 + 16) = v5;
  OUTLINED_FUNCTION_12_23();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_31_15();
  v4 = v3;
  v5 = *(_QWORD *)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    OUTLINED_FUNCTION_69_15();
    v6 = 1;
LABEL_10:
    *(_QWORD *)v4 = v5;
    *(_BYTE *)(v4 + 8) = v6;
    OUTLINED_FUNCTION_4_31();
    return;
  }
  OUTLINED_FUNCTION_67_22();
  if ((v7 & 1) != 0)
  {
    v8 = v2;
    v6 = 1;
    v5 = (uint64_t)v2;
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_24_47();
  if (v1)
  {
    OUTLINED_FUNCTION_19_44();
    v6 = 1;
LABEL_9:
    v5 = v1;
    goto LABEL_10;
  }
  v10 = v9;
  if (v9)
  {
    OUTLINED_FUNCTION_10_19();
    v11 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v11 + 16) = v10;
    OUTLINED_FUNCTION_225();
    v1 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v1 + 16) = v11;
    OUTLINED_FUNCTION_19_44();
    v6 = 0;
    goto LABEL_9;
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_31_15();
  v4 = v3;
  v5 = *(_QWORD *)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    OUTLINED_FUNCTION_69_15();
    v6 = 1;
LABEL_10:
    *(_QWORD *)v4 = v5;
    *(_BYTE *)(v4 + 8) = v6;
    OUTLINED_FUNCTION_4_31();
    return;
  }
  OUTLINED_FUNCTION_67_22();
  if ((v7 & 1) != 0)
  {
    v6 = 1;
    OUTLINED_FUNCTION_59_22(v2);
    v5 = (uint64_t)v2;
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_24_47();
  if (v1)
  {
    OUTLINED_FUNCTION_19_44();
    v6 = 1;
LABEL_9:
    v5 = v1;
    goto LABEL_10;
  }
  v9 = v8;
  if (v8)
  {
    OUTLINED_FUNCTION_10_19();
    v10 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v10 + 16) = v9;
    OUTLINED_FUNCTION_225();
    v1 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v1 + 16) = v10;
    OUTLINED_FUNCTION_19_44();
    v6 = 0;
    goto LABEL_9;
  }
  __break(1u);
}

{
  uint64_t v0;
  void **v1;
  char v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_42_27();
  if ((v2 & 1) != 0 || (v3 = *v1, v4 = OUTLINED_FUNCTION_61_21(*v1), OUTLINED_FUNCTION_102(v3), v4 < 0))
  {
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    MLUntypedColumn.subscript.getter(v5, v6, v0);
    OUTLINED_FUNCTION_43_0();
  }
}

void MLUntypedColumn.strings.getter()
{
  id *v0;
  char v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_42_27();
  if ((v1 & 1) != 0
    || (v2 = outlined copy of Result<_DataTable, Error>(*v0, 0),
        OUTLINED_FUNCTION_46_28((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v13, v14, SWORD2(v14), SBYTE6(v14), SHIBYTE(v14)), OUTLINED_FUNCTION_14_56(), v10 != 2))
  {
    OUTLINED_FUNCTION_34_33();
    OUTLINED_FUNCTION_23_7();
  }
  else
  {
    v11 = (void *)OUTLINED_FUNCTION_18_44();
    OUTLINED_FUNCTION_5_61(v11, v12);
  }
}

void static MLUntypedColumn.!= infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.> infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.< infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.>= infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.<= infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 4);
}

void static MLUntypedColumn.!= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 5);
}

void static MLUntypedColumn.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  char v12;
  void *v13;

  v3 = *(void **)a2;
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    v13 = *(void **)a2;
    OUTLINED_FUNCTION_26_37();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (OUTLINED_FUNCTION_80_14())
    {
      OUTLINED_FUNCTION_122_3(v3);
    }
    else
    {
      OUTLINED_FUNCTION_49_0();
      *v11 = v13;
    }
    OUTLINED_FUNCTION_122_3(v3);
  }
  else
  {
    OUTLINED_FUNCTION_225();
    v5 = OUTLINED_FUNCTION_49_26();
    OUTLINED_FUNCTION_66_23(v5, v6, v7, v8, v9);
    OUTLINED_FUNCTION_79_13();
    static _UntypedColumn.performLeftScalar(op:a:b:)(a3);
    v10 = (void *)OUTLINED_FUNCTION_68_24();
    outlined consume of Result<_DataTable, Error>(v10, v12);
  }
  OUTLINED_FUNCTION_88_8();
  OUTLINED_FUNCTION_50_28();
}

void static MLUntypedColumn.> infix(_:_:)(uint64_t a1, uint64_t a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 7);
}

void static MLUntypedColumn.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 6);
}

void static MLUntypedColumn.>= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 9);
}

void static MLUntypedColumn.<= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 8);
}

void static MLUntypedColumn.+ infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.- infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.* infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn./ infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

{
  static MLUntypedColumn.== infix(_:_:)();
}

void MLUntypedColumn.map<A>(to:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  char v9;
  Swift::String v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t vars0;
  uint64_t vars8;

  v75 = a3;
  v76 = a2;
  v77 = a1;
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v74 - v6;
  v8 = *(_QWORD **)v3;
  v9 = *(_BYTE *)(v3 + 8);
  v78 = 0;
  v79 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v78 = (_QWORD *)0xD000000000000016;
  v79 = 0x800000021AFF95F0;
  v10._countAndFlagsBits = OUTLINED_FUNCTION_89_10();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_51_6();
  v11 = v78;
  v12 = v79;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v13 = OUTLINED_FUNCTION_49_0();
  *v14 = v11;
  v14[1] = v12;
  OUTLINED_FUNCTION_37_19(v13, (uint64_t)v14);
  if (OUTLINED_FUNCTION_41_29())
  {
    if ((v9 & 1) != 0)
      goto LABEL_13;
    v15 = OUTLINED_FUNCTION_11_59();
    OUTLINED_FUNCTION_29_36(v15, 0, v16, v17, v18, v19, v20, v21, v74, v75, v76, v77, (uint64_t)v78, v79, v80, v81, v82, v83, v84,
      v85,
      v86,
      v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      vars0,
      vars8);
    if (v11)
      goto LABEL_28;
    v23 = v22;
    if (v22)
    {
LABEL_26:
      OUTLINED_FUNCTION_10_19();
      v44 = OUTLINED_FUNCTION_0_20();
      *(_QWORD *)(v44 + 16) = v23;
      OUTLINED_FUNCTION_225();
      v11 = (_QWORD *)OUTLINED_FUNCTION_0_20();
      v11[2] = v44;
      OUTLINED_FUNCTION_62_29();
      OUTLINED_FUNCTION_31_31();
      v34 = 0;
LABEL_29:
      v78 = v11;
      LOBYTE(v79) = v34;
      MLDataColumn.init(from:)((uint64_t)&v78, v75);
      OUTLINED_FUNCTION_9_5();
      return;
    }
    __break(1u);
  }
  if (!OUTLINED_FUNCTION_41_29())
    goto LABEL_11;
  if ((v9 & 1) != 0)
  {
LABEL_13:
    v78 = v8;
    outlined copy of Result<_DataTable, Error>(v8, 1);
    OUTLINED_FUNCTION_69_15();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v32 = _getErrorEmbeddedNSError<A>(_:)();
    if (v32)
    {
      v11 = (_QWORD *)v32;
      OUTLINED_FUNCTION_122_3(v8);
    }
    else
    {
      v11 = (_QWORD *)OUTLINED_FUNCTION_49_0();
      *v33 = v78;
    }
    LOBYTE(v83) = 1;
    OUTLINED_FUNCTION_62_29();
    OUTLINED_FUNCTION_122_3(v8);
    v34 = v83;
    goto LABEL_29;
  }
  v24 = OUTLINED_FUNCTION_11_59();
  OUTLINED_FUNCTION_29_36(v24, 1, v25, v26, v27, v28, v29, v30, v74, v75, v76, v77, (uint64_t)v78, v79, v80, v81, v82, v83, v84,
    v85,
    v86,
    v87,
    v88,
    v89,
    v90,
    v91,
    v92,
    v93,
    vars0,
    vars8);
  if (v11)
    goto LABEL_28;
  v23 = v31;
  if (v31)
    goto LABEL_26;
  __break(1u);
LABEL_11:
  if (!OUTLINED_FUNCTION_41_29())
  {
    if (!OUTLINED_FUNCTION_41_29())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      if (!OUTLINED_FUNCTION_41_29())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if (!OUTLINED_FUNCTION_41_29())
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
          if (!OUTLINED_FUNCTION_41_29())
          {
            if (OUTLINED_FUNCTION_41_29())
            {
              if ((v9 & 1) != 0)
                goto LABEL_13;
              v66 = OUTLINED_FUNCTION_11_59();
              OUTLINED_FUNCTION_29_36(v66, 5, v67, v68, v69, v70, v71, v72, v74, v75, v76, v77, (uint64_t)v78, v79, v80, v81, v82, v83, v84,
                v85,
                v86,
                v87,
                v88,
                v89,
                v90,
                v91,
                v92,
                v93,
                vars0,
                vars8);
              if (v11)
                goto LABEL_28;
              v23 = v73;
              if (v73)
                goto LABEL_26;
              __break(1u);
            }
            v34 = 1;
            v11 = (_QWORD *)v13;
            goto LABEL_29;
          }
        }
      }
    }
    if ((v9 & 1) != 0)
    {
      v78 = v8;
      outlined copy of Result<_DataTable, Error>(v8, 1);
      OUTLINED_FUNCTION_69_15();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v35 = _getErrorEmbeddedNSError<A>(_:)();
      if (v35)
      {
        v11 = (_QWORD *)v35;
        OUTLINED_FUNCTION_122_3(v8);
      }
      else
      {
        v11 = (_QWORD *)OUTLINED_FUNCTION_49_0();
        *v53 = v78;
      }
      v34 = 1;
      LOBYTE(v83) = 1;
      OUTLINED_FUNCTION_62_29();
      OUTLINED_FUNCTION_122_3(v8);
      v54 = v76;
      if ((v83 & 1) != 0)
        goto LABEL_29;
      goto LABEL_35;
    }
    v45 = OUTLINED_FUNCTION_11_59();
    OUTLINED_FUNCTION_29_36(v45, 4, v46, v47, v48, v49, v50, v51, v74, v75, v76, v77, (uint64_t)v78, v79, v80, v81, v82, v83, v84,
      v85,
      v86,
      v87,
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      vars0,
      vars8);
    if (!v11)
    {
      v55 = v52;
      if (!v52)
        goto LABEL_46;
      OUTLINED_FUNCTION_10_19();
      v56 = OUTLINED_FUNCTION_0_20();
      *(_QWORD *)(v56 + 16) = v55;
      v57 = v56;
      OUTLINED_FUNCTION_225();
      v11 = (_QWORD *)OUTLINED_FUNCTION_0_20();
      v11[2] = v57;
      OUTLINED_FUNCTION_62_29();
      OUTLINED_FUNCTION_102(v8);
      v54 = v76;
LABEL_35:
      swift_retain_n();
      v58 = CMLColumn.size.getter();
      OUTLINED_FUNCTION_102(v11);
      if (v58 <= 0)
        goto LABEL_38;
      OUTLINED_FUNCTION_23_22();
      _UntypedColumn.valueAtIndex(index:)(0, (uint64_t)&v78);
      OUTLINED_FUNCTION_102(v11);
      v59 = v77;
      (*(void (**)(_QWORD **, uint64_t, uint64_t))(v54 + 16))(&v78, v77, v54);
      v34 = 1;
      LODWORD(v59) = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v59);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if ((_DWORD)v59 == 1)
      {
        v78 = 0;
        v79 = 0xE000000000000000;
        _StringGuts.grow(_:)(60);
        v60._countAndFlagsBits = 0xD000000000000039;
        v60._object = (void *)0x800000021AFF9610;
        String.append(_:)(v60);
        v61._countAndFlagsBits = OUTLINED_FUNCTION_89_10();
        String.append(_:)(v61);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_51_6();
        v62 = (uint64_t)v78;
        v63 = v79;
        v64 = OUTLINED_FUNCTION_49_0();
        *(_QWORD *)v65 = v62;
        *(_QWORD *)(v65 + 8) = v63;
        *(_OWORD *)(v65 + 16) = 0u;
        *(_OWORD *)(v65 + 32) = 0u;
        *(_BYTE *)(v65 + 48) = 1;
        OUTLINED_FUNCTION_102(v11);
        OUTLINED_FUNCTION_102(v11);
        v11 = (_QWORD *)v64;
      }
      else
      {
LABEL_38:
        outlined consume of Result<_DataTable, Error>(v11, 0);
        v34 = 0;
      }
      goto LABEL_29;
    }
LABEL_28:
    OUTLINED_FUNCTION_62_29();
    OUTLINED_FUNCTION_31_31();
    v34 = 1;
    goto LABEL_29;
  }
  if ((v9 & 1) != 0)
    goto LABEL_13;
  v36 = OUTLINED_FUNCTION_11_59();
  OUTLINED_FUNCTION_29_36(v36, 2, v37, v38, v39, v40, v41, v42, v74, v75, v76, v77, (uint64_t)v78, v79, v80, v81, v82, v83, v84,
    v85,
    v86,
    v87,
    v88,
    v89,
    v90,
    v91,
    v92,
    v93,
    vars0,
    vars8);
  if (v11)
    goto LABEL_28;
  v23 = v43;
  if (v43)
    goto LABEL_26;
  __break(1u);
LABEL_46:
  __break(1u);
}

void static MLUntypedColumn.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 0);
}

void static MLUntypedColumn.- infix(_:_:)(uint64_t a1, uint64_t a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 1);
}

void static MLUntypedColumn.* infix(_:_:)(uint64_t a1, uint64_t a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 3);
}

void static MLUntypedColumn./ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  static MLUntypedColumn.== infix(_:_:)(a1, a2, 2);
}

void static MLUntypedColumn.|| infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

void static MLUntypedColumn.&& infix(_:_:)()
{
  static MLUntypedColumn.== infix(_:_:)();
}

void MLUntypedColumn.doubles.getter()
{
  id *v0;
  char v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_42_27();
  if ((v1 & 1) != 0
    || (v2 = outlined copy of Result<_DataTable, Error>(*v0, 0),
        OUTLINED_FUNCTION_46_28((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v13, v14, SWORD2(v14), SBYTE6(v14), SHIBYTE(v14)), OUTLINED_FUNCTION_14_56(), v10 != 1))
  {
    OUTLINED_FUNCTION_34_33();
    OUTLINED_FUNCTION_23_7();
  }
  else
  {
    v11 = (void *)OUTLINED_FUNCTION_18_44();
    OUTLINED_FUNCTION_5_61(v11, v12);
  }
}

void MLUntypedColumn.sequences.getter()
{
  id *v0;
  char v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_42_27();
  if ((v1 & 1) != 0
    || (v2 = outlined copy of Result<_DataTable, Error>(*v0, 0),
        OUTLINED_FUNCTION_46_28((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v13, v14, SWORD2(v14), SBYTE6(v14), SHIBYTE(v14)), OUTLINED_FUNCTION_14_56(), v10 != 3))
  {
    OUTLINED_FUNCTION_34_33();
    OUTLINED_FUNCTION_23_7();
  }
  else
  {
    v11 = (void *)OUTLINED_FUNCTION_18_44();
    OUTLINED_FUNCTION_5_61(v11, v12);
  }
}

void MLUntypedColumn.dictionaries.getter()
{
  id *v0;
  char v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_42_27();
  if ((v1 & 1) != 0
    || (v2 = outlined copy of Result<_DataTable, Error>(*v0, 0),
        OUTLINED_FUNCTION_46_28((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v13, v14, SWORD2(v14), SBYTE6(v14), SHIBYTE(v14)), OUTLINED_FUNCTION_14_56(), v10 != 4))
  {
    OUTLINED_FUNCTION_34_33();
    OUTLINED_FUNCTION_23_7();
  }
  else
  {
    v11 = (void *)OUTLINED_FUNCTION_18_44();
    OUTLINED_FUNCTION_5_61(v11, v12);
  }
}

void MLUntypedColumn.multiArrays.getter()
{
  id *v0;
  char v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_42_27();
  if ((v1 & 1) != 0
    || (v2 = outlined copy of Result<_DataTable, Error>(*v0, 0),
        OUTLINED_FUNCTION_46_28((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, v13, v14, SWORD2(v14), SBYTE6(v14), SHIBYTE(v14)), OUTLINED_FUNCTION_14_56(), v10 != 5))
  {
    OUTLINED_FUNCTION_34_33();
    OUTLINED_FUNCTION_23_7();
  }
  else
  {
    v11 = (void *)OUTLINED_FUNCTION_18_44();
    OUTLINED_FUNCTION_5_61(v11, v12);
  }
}

void MLUntypedColumn.error.getter()
{
  uint64_t v0;
  id v1;

  if (*(_BYTE *)(v0 + 8) == 1)
    v1 = *(id *)v0;
  OUTLINED_FUNCTION_22();
}

BOOL MLUntypedColumn.isValid.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 8) & 1) == 0;
}

void MLUntypedColumn.init(repeating:count:)(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  __int128 v6;
  char v7;

  v5 = *((_BYTE *)a1 + 16);
  v6 = *a1;
  v7 = v5;
  OUTLINED_FUNCTION_225();
  OUTLINED_FUNCTION_0_20();
  *(_QWORD *)a3 = _UntypedColumn.init(repeating:count:)((uint64_t)&v6, a2);
  *(_BYTE *)(a3 + 8) = 0;
  OUTLINED_FUNCTION_12_23();
}

void MLUntypedColumn.init<A>(repeating:count:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_225();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v4, a1, a3);
  v10 = _UntypedColumn.__allocating_init<A>(repeating:count:)(v4, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a3);
  *(_QWORD *)a4 = v10;
  *(_BYTE *)(a4 + 8) = 0;
  OUTLINED_FUNCTION_8_0();
}

void MLUntypedColumn.init()(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char v5;

  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v2 = OUTLINED_FUNCTION_49_0();
  *v3 = 0xD00000000000001DLL;
  v3[1] = 0x800000021AFF46A0;
  OUTLINED_FUNCTION_37_19(v2, (uint64_t)v3);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
}

void MLUntypedColumn.append(contentsOf:)()
{
  void **v0;
  void *v1;
  void **v2;
  void *v3;
  char v4;
  char v5;
  void *v6;
  void *v7;

  OUTLINED_FUNCTION_31_15();
  v2 = v0;
  v3 = *v0;
  if (((_BYTE)v2[1] & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_67_22();
    if ((v5 & 1) != 0)
    {
      v4 = 1;
      OUTLINED_FUNCTION_59_22(v1);
      OUTLINED_FUNCTION_102(v3);
      v3 = v1;
    }
    else
    {
      outlined copy of Result<_DataTable, Error>(v1, 0);
      OUTLINED_FUNCTION_12_3(v3);
      _UntypedColumn.appending(contentsOf:)((uint64_t)v1);
      v7 = v6;
      outlined consume of Result<_DataTable, Error>(v1, 0);
      OUTLINED_FUNCTION_16_4();
      outlined consume of Result<_DataTable, Error>(v3, 0);
      v3 = v7;
      v4 = 0;
    }
  }
  *v2 = v3;
  *((_BYTE *)v2 + 8) = v4;
  OUTLINED_FUNCTION_4_31();
}

void MLUntypedColumn.materialize()(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  double v4;
  uint64_t v5;

  v3 = *(id *)v1;
  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
  {
    outlined copy of Result<_DataTable, Error>(*(id *)v1, 1);
    swift_willThrow(v4);
  }
  else
  {
    OUTLINED_FUNCTION_35_10();
    CMLColumn.materialize()();
    outlined consume of Result<_DataTable, Error>(v3, 0);
    if (!v5)
    {
      *(_QWORD *)a1 = v3;
      *(_BYTE *)(a1 + 8) = 0;
      OUTLINED_FUNCTION_35_10();
    }
  }
}

void MLUntypedColumn.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v7;
  char v8;
  uint64_t inited;
  uint64_t v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  char v15;

  v7 = *(void **)v3;
  v8 = *(_BYTE *)(v3 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = 7106403;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  *(_QWORD *)(inited + 48) = v7;
  *(_BYTE *)(inited + 56) = v8;
  outlined copy of Result<_DataTable, Error>(v7, v8);
  v10 = Dictionary.init(dictionaryLiteral:)();
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v10, (uint64_t)&v14);
  v11 = v14;
  v12 = v15;
  MLDataTable.subscript.getter(&v14, a1, a2);
  outlined consume of Result<_DataTable, Error>(v11, v12);
  v13 = v14;
  LOBYTE(a2) = v15;
  MLDataTable.subscript.getter(7106403, (void *)0xE300000000000000, a3);
  outlined consume of Result<_DataTable, Error>(v13, a2);
}

void Array<A>.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  OUTLINED_FUNCTION_45_30();
  a23 = v24;
  a24 = v25;
  v27 = *(void **)v26;
  v38 = *(_BYTE *)(v26 + 8);
  if ((v38 & 1) != 0)
  {
LABEL_10:
    outlined consume of Result<_DataTable, Error>(v27, v38);
    OUTLINED_FUNCTION_52_18();
    return;
  }
  v28 = OUTLINED_FUNCTION_61_21(v27);
  OUTLINED_FUNCTION_102(v27);
  if ((v28 & 0x8000000000000000) == 0)
  {
    if (v28)
    {
      v29 = 0;
      v30 = MEMORY[0x24BEE4AF8];
      do
      {
        OUTLINED_FUNCTION_12_3(v27);
        _UntypedColumn.valueAtIndex(index:)(v29, (uint64_t)&a10);
        OUTLINED_FUNCTION_102(v27);
        v31 = a10;
        v32 = a11;
        v33 = a12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v30 = v36;
        }
        v34 = *(_QWORD *)(v30 + 16);
        if (v34 >= *(_QWORD *)(v30 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v30 = v37;
        }
        ++v29;
        *(_QWORD *)(v30 + 16) = v34 + 1;
        v35 = v30 + 24 * v34;
        *(_QWORD *)(v35 + 32) = v31;
        *(_QWORD *)(v35 + 40) = v32;
        *(_BYTE *)(v35 + 48) = v33;
      }
      while (v28 != v29);
    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t MLUntypedColumn.init(doubles:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 1);
}

void MLUntypedColumn.column<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  char v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;

  v6 = *(void **)v3;
  v7 = *(_BYTE *)(v3 + 8);
  if ((v7 & 1) != 0)
  {
    v8 = 6;
  }
  else
  {
    OUTLINED_FUNCTION_12_3(*(void **)v3);
    _UntypedColumn.type.getter(&v11);
    OUTLINED_FUNCTION_102(v6);
    v8 = v11;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 8))(&v11, a2, a3);
  if (v8 == v11)
  {
    v9 = v6;
    v10 = v7;
    MLDataColumn.init(from:)((uint64_t)&v9, (uint64_t)&v11);
    outlined copy of Result<_DataTable, Error>(v6, v7);
  }
  OUTLINED_FUNCTION_88_8();
}

BOOL MLUntypedColumn.isEmpty.getter()
{
  uint64_t v0;
  void *v2;
  uint64_t v3;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return 1;
  v2 = *(void **)v0;
  v3 = OUTLINED_FUNCTION_61_21(*(void **)v0);
  OUTLINED_FUNCTION_102(v2);
  return v3 < 1;
}

void closure #1 in MLUntypedColumn.init<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _UntypedColumn();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
  _UntypedColumn.__allocating_init<A>(_:)((uint64_t)v11, a2);
  if (v4)
    *a3 = v4;
  else
    *a4 = v12;
}

uint64_t closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;

  v17 = a6;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _UntypedColumn();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a2);
  result = _UntypedColumn.__allocating_init<A>(_:)((uint64_t)v14, a2, a3, a4);
  if (v6)
    *a5 = v6;
  else
    *v17 = result;
  return result;
}

uint64_t partial apply for closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in MLUntypedColumn.init<A>(_:)(v2[5], v2[2], v2[3], v2[4], a1, a2);
}

uint64_t MLUntypedColumn.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  OUTLINED_FUNCTION_225();
  v6 = OUTLINED_FUNCTION_0_20();
  OUTLINED_FUNCTION_10_19();
  result = CMLColumn.__allocating_init(_:)(a1, a2);
  *(_QWORD *)(v6 + 16) = result;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = 0;
  return result;
}

void MLUntypedColumn.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  OUTLINED_FUNCTION_225();
  OUTLINED_FUNCTION_0_20();
  _UntypedColumn.init(_:)(a1, a2);
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = 0;
}

uint64_t MLUntypedColumn.map<A>(skipUndefined:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_45_30();
  v25 = v1;
  v26 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = *(void **)v0;
  v16 = *(_BYTE *)(v0 + 8);
  v17 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  v17[2] = v6;
  v17[3] = v4;
  v17[4] = v10;
  v17[5] = v8;
  if ((v16 & 1) != 0)
  {
    v23 = (uint64_t)v15;
    OUTLINED_FUNCTION_59_22(v15);
    OUTLINED_FUNCTION_23_22();
    OUTLINED_FUNCTION_59_22(v15);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v18 = _getErrorEmbeddedNSError<A>(_:)();
    if (v18)
    {
      v19 = v18;
      OUTLINED_FUNCTION_122_3(v15);
    }
    else
    {
      v19 = OUTLINED_FUNCTION_49_0();
      *v20 = v23;
    }
    v21 = 1;
    OUTLINED_FUNCTION_122_3(v15);
    swift_release();
  }
  else
  {
    OUTLINED_FUNCTION_23_22();
    OUTLINED_FUNCTION_12_3(v15);
    closure #2 in MLUntypedColumn.map<A>(skipUndefined:_:)((uint64_t)partial apply for closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:), (uint64_t)v17, v12 & 1, v6, v4, &v23);
    outlined consume of Result<_DataTable, Error>(v15, 0);
    swift_release();
    v21 = 0;
    v19 = v23;
  }
  v23 = v19;
  v24 = v21;
  return MLDataColumn.init(from:)((uint64_t)&v23, v14);
}

uint64_t closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  char v16;
  uint64_t v17;
  _QWORD v19[2];
  void (*v20)(_QWORD *);
  _QWORD v21[2];
  char v22;

  v19[1] = a5;
  v20 = a2;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v19 - v8;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  MLDataValue.init(_:)();
  v14 = (void *)v21[0];
  v15 = (void *)v21[1];
  v16 = v22;
  v20(v21);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    type metadata accessor for CMLFeatureValue();
    v17 = CMLFeatureValue.__allocating_init()();
    outlined consume of MLDataValue(v14, v15, v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, a4);
    v17 = MLDataValueConvertible.featureValue.getter();
    outlined consume of MLDataValue(v14, v15, v16);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a4);
  }
  return v17;
}

void closure #2 in MLUntypedColumn.map<A>(skipUndefined:_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 8))(&v11, a4, a5);
  _UntypedColumn.map(_:skipUndefined:outputType:)(a1, a2, a3, &v11);
  *a6 = v10;
}

uint64_t MLUntypedColumn.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a1;
  v8[5] = a2;
  OUTLINED_FUNCTION_51_0();
  MLUntypedColumn.map<A>(skipUndefined:_:)();
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed MLDataValue) -> (@out A)@<X0>(void (*a1)(void)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  a1();
  return __swift_storeEnumTagSinglePayload(a3, 0, 1, a2);
}

void MLUntypedColumn.mapMissing<A>(_:)()
{
  MLUntypedColumn.map<A>(_:)();
}

uint64_t MLUntypedColumn.dropMissing()()
{
  return MLUntypedColumn.dropMissing()(specialized handling<A, B>(_:_:));
}

void MLUntypedColumn.fillMissing(with:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD **)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    v7 = *(_QWORD **)v0;
    OUTLINED_FUNCTION_26_37();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      OUTLINED_FUNCTION_122_3(v1);
    }
    else
    {
      OUTLINED_FUNCTION_49_0();
      *v4 = v7;
    }
    OUTLINED_FUNCTION_122_3(v1);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_51_0();
  MLDataValue.featureValue.getter();
  specialized handling<A, B, C>(_:_:_:)(*(_QWORD *)(v1[2] + 16), *(_QWORD *)(v2 + 16));
  v5 = v3;
  if (v3)
  {
    OUTLINED_FUNCTION_10_19();
    v6 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v6 + 16) = v5;
    OUTLINED_FUNCTION_225();
    *(_QWORD *)(OUTLINED_FUNCTION_0_20() + 16) = v6;
    swift_release();
    OUTLINED_FUNCTION_3_10();
LABEL_9:
    OUTLINED_FUNCTION_32_9();
    OUTLINED_FUNCTION_31_22();
    return;
  }
  __break(1u);
}

uint64_t MLUntypedColumn.prefix(_:)(uint64_t a1)
{
  return MLUntypedColumn.prefix(_:)(a1, specialized handling<A, B, C>(_:_:_:));
}

uint64_t MLUntypedColumn.suffix(_:)(uint64_t a1)
{
  return MLUntypedColumn.prefix(_:)(a1, specialized handling<A, B, C>(_:_:_:));
}

#error "21AFB79BC: call analysis failed (funcsize=70)"

#error "21AFB7A74: call analysis failed (funcsize=53)"

uint64_t MLUntypedColumn.copy()()
{
  return MLUntypedColumn.dropMissing()(specialized handling<A, B>(_:_:));
}

#error "21AFB7B64: call analysis failed (funcsize=48)"

uint64_t MLUntypedColumn.init(ints:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 0);
}

#error "21AFB7C1C: call analysis failed (funcsize=58)"

uint64_t MLUntypedColumn.init(strings:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 2);
}

uint64_t MLUntypedColumn.init(sequences:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 4);
}

uint64_t MLUntypedColumn.init(dictionaries:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 5);
}

uint64_t MLUntypedColumn.init(multiArrays:)(uint64_t a1)
{
  return MLUntypedColumn.init(doubles:)(a1, 9);
}

void MLUntypedColumn.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[7];
  char v16;
  ValueMetadata *v17;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(void **)v0;
  v9 = *(_BYTE *)(v0 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v10 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v10 + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(v10 + 32) = 0x746E756F63;
  *(_QWORD *)(v10 + 40) = 0xE500000000000000;
  if ((v9 & 1) != 0)
  {
    v11 = -1;
  }
  else
  {
    v11 = OUTLINED_FUNCTION_61_21(v8);
    OUTLINED_FUNCTION_102(v8);
  }
  v12 = MEMORY[0x24BEE1768];
  *(_QWORD *)(v10 + 48) = v11;
  *(_QWORD *)(v10 + 72) = v12;
  *(_QWORD *)(v10 + 80) = 1701869940;
  *(_QWORD *)(v10 + 88) = 0xE400000000000000;
  *(_QWORD *)(v10 + 120) = &type metadata for MLDataValue.ValueType;
  if ((v9 & 1) != 0)
  {
    *(_BYTE *)(v10 + 96) = 6;
  }
  else
  {
    OUTLINED_FUNCTION_12_3(v8);
    _UntypedColumn.type.getter(&v16);
    *(_BYTE *)(v10 + 96) = v16;
    OUTLINED_FUNCTION_102(v8);
  }
  v17 = &type metadata for MLUntypedColumn;
  v13 = *MEMORY[0x24BEE4370];
  v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v7, v13, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43B8], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLUntypedColumn.Type);
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  OUTLINED_FUNCTION_9_5();
}

uint64_t MLUntypedColumn.description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    OUTLINED_FUNCTION_92_7();
    return 0;
  }
  else
  {
    OUTLINED_FUNCTION_51_0();
    _UntypedColumn.description.getter();
    v2 = v3;
    OUTLINED_FUNCTION_102(v1);
  }
  return v2;
}

void MLUntypedColumn.playgroundDescription.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(void **)v1;
  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    OUTLINED_FUNCTION_92_7();
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  else
  {
    OUTLINED_FUNCTION_12_3(*(void **)v1);
    _UntypedColumn.description.getter();
    v4 = v6;
    v5 = v7;
    OUTLINED_FUNCTION_102(v3);
  }
  v8 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  @nonobjc NSAttributedString.init(string:attributes:)(v4, v5, 0);
  v10 = v9;
  a1[3] = type metadata accessor for NSAttributedString();
  *a1 = v10;
  OUTLINED_FUNCTION_12_23();
}

void partial apply for closure #1 in MLUntypedColumn.init<A>(_:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  closure #1 in MLUntypedColumn.init<A>(_:)(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), a1, a2);
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_90_8();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_20_23();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_66_13();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_94_9(v6);
    v6[2] = v1;
    v6[3] = 2 * (v7 / 16);
  }
  if ((v0 & 1) != 0)
  {
    v8 = (char *)OUTLINED_FUNCTION_91_13();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    v11 = OUTLINED_FUNCTION_55_27();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
  OUTLINED_FUNCTION_125();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  OUTLINED_FUNCTION_12_52();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_20_23();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_40_16();
  if (v1)
  {
    OUTLINED_FUNCTION_19_28(v5, v6, v7, v8, v9);
    v10 = (const void *)OUTLINED_FUNCTION_9_1();
    v11 = _swift_stdlib_malloc_size(v10);
    OUTLINED_FUNCTION_57_24((uint64_t)(v11 - 32) / 8);
  }
  if ((v0 & 1) != 0)
  {
    OUTLINED_FUNCTION_38_27();
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    v12 = OUTLINED_FUNCTION_54_24();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15, v16);
  }
  OUTLINED_FUNCTION_164();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const void *v10;
  size_t v11;

  OUTLINED_FUNCTION_12_52();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_20_23();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_40_16();
  if (v1)
  {
    OUTLINED_FUNCTION_19_28(v5, v6, v7, v8, v9);
    v10 = (const void *)OUTLINED_FUNCTION_9_1();
    v11 = _swift_stdlib_malloc_size(v10);
    OUTLINED_FUNCTION_57_24((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    v10 = (const void *)MEMORY[0x24BEE4AF8];
  }
  if ((v0 & 1) != 0)
  {
    OUTLINED_FUNCTION_38_27();
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    OUTLINED_FUNCTION_35_28(v5, v6, (uint64_t)v10 + 32);
  }
  OUTLINED_FUNCTION_164();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(_QWORD);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD);

  OUTLINED_FUNCTION_45_30();
  OUTLINED_FUNCTION_12_52();
  if ((v7 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v11 != v12)
    {
      OUTLINED_FUNCTION_20_23();
      if (v11)
      {
        __break(1u);
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  else
  {
    v10 = v6;
  }
  if (v10 <= *(_QWORD *)(v0 + 16))
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v10;
  if (!v13)
    goto LABEL_17;
  OUTLINED_FUNCTION_19_28(v5, v6, v7, v8, v9);
  v1(0);
  v14 = (const void *)OUTLINED_FUNCTION_37_22();
  v15 = _swift_stdlib_malloc_size(v14);
  if (!v3 || (v15 - v4 == 0x8000000000000000 ? (v16 = v3 == -1) : (v16 = 0), v16))
  {
LABEL_22:
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_81_17();
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_57_24((uint64_t)(v15 - v4) / v3);
LABEL_17:
  v1(0);
  OUTLINED_FUNCTION_71_17();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_83_14(v17);
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    v18 = OUTLINED_FUNCTION_54_24();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v18, v19, v20, v21, v22);
  }
  OUTLINED_FUNCTION_52_18();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_90_8();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_20_23();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_66_13();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Layer>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_94_9(v6);
    v6[2] = v1;
    v6[3] = 2 * (v7 / 40);
  }
  if ((v0 & 1) != 0)
  {
    v8 = OUTLINED_FUNCTION_91_13();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8);
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_55_27();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
  OUTLINED_FUNCTION_164();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_90_8();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_20_23();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_66_13();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BlobMetadata>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_94_9(v6);
    v6[2] = v1;
    v6[3] = 2 * (v7 / 64);
  }
  if ((v0 & 1) != 0)
  {
    v8 = (char *)OUTLINED_FUNCTION_91_13();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    v11 = OUTLINED_FUNCTION_55_27();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
  OUTLINED_FUNCTION_125();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  OUTLINED_FUNCTION_45_30();
  OUTLINED_FUNCTION_12_52();
  if ((v7 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v11 != v12)
    {
      OUTLINED_FUNCTION_20_23();
      if (v11)
      {
        __break(1u);
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  else
  {
    v10 = v6;
  }
  if (v10 <= *(_QWORD *)(v0 + 16))
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v10;
  if (!v13)
    goto LABEL_17;
  OUTLINED_FUNCTION_19_28(v5, v6, v7, v8, v9);
  __swift_instantiateConcreteTypeFromMangledName(v1);
  v14 = (const void *)OUTLINED_FUNCTION_37_22();
  v15 = _swift_stdlib_malloc_size(v14);
  if (!v3 || (v15 - v4 == 0x8000000000000000 ? (v16 = v3 == -1) : (v16 = 0), v16))
  {
LABEL_22:
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_81_17();
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_57_24((uint64_t)(v15 - v4) / v3);
LABEL_17:
  __swift_instantiateConcreteTypeFromMangledName(v1);
  OUTLINED_FUNCTION_71_17();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_83_14(v17);
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    v18 = OUTLINED_FUNCTION_54_24();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v18, v19, v20, v21, v22);
  }
  OUTLINED_FUNCTION_52_18();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const void *v10;
  uint64_t v11;

  OUTLINED_FUNCTION_12_52();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_20_23();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_40_16();
  if (v1)
  {
    OUTLINED_FUNCTION_19_28(v5, v6, v7, v8, v9);
    v10 = (const void *)OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_94_9(v10);
    OUTLINED_FUNCTION_57_24(v11 / 24);
  }
  else
  {
    v10 = (const void *)MEMORY[0x24BEE4AF8];
  }
  if ((v0 & 1) != 0)
  {
    OUTLINED_FUNCTION_38_27();
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    OUTLINED_FUNCTION_35_28(v5, v6, (uint64_t)v10 + 32);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const void *v10;
  uint64_t v11;

  OUTLINED_FUNCTION_12_52();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_20_23();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_40_16();
  if (v1)
  {
    OUTLINED_FUNCTION_19_28(v5, v6, v7, v8, v9);
    v10 = (const void *)OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_94_9(v10);
    OUTLINED_FUNCTION_57_24(v11 / 32);
  }
  else
  {
    v10 = (const void *)MEMORY[0x24BEE4AF8];
  }
  if ((v0 & 1) != 0)
  {
    OUTLINED_FUNCTION_38_27();
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    OUTLINED_FUNCTION_35_28(v5, v6, (uint64_t)v10 + 32);
  }
  OUTLINED_FUNCTION_164();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const void *v10;
  uint64_t v11;

  OUTLINED_FUNCTION_12_52();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_20_23();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_40_16();
  if (v1)
  {
    OUTLINED_FUNCTION_19_28(v5, v6, v7, v8, v9);
    v10 = (const void *)OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_94_9(v10);
    OUTLINED_FUNCTION_57_24(v11 / 4);
  }
  else
  {
    v10 = (const void *)MEMORY[0x24BEE4AF8];
  }
  if ((v0 & 1) != 0)
  {
    OUTLINED_FUNCTION_38_27();
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    OUTLINED_FUNCTION_35_28(v5, v6, (uint64_t)v10 + 32);
  }
  OUTLINED_FUNCTION_164();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  size_t v7;
  char *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_90_8();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_20_23();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_66_13();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * v7 - 64;
  }
  if ((v0 & 1) != 0)
  {
    v8 = (char *)OUTLINED_FUNCTION_91_13();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    v11 = OUTLINED_FUNCTION_55_27();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
  OUTLINED_FUNCTION_125();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

uint64_t sub_21AFB81C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed MLDataValue) -> (@out A)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed MLDataValue) -> (@out A)(*(void (**)(void))(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

ValueMetadata *type metadata accessor for MLUntypedColumn()
{
  return &type metadata for MLUntypedColumn;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *))
{
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;

  v8 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_20_23();
      if (v10)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (v13)
  {
    OUTLINED_FUNCTION_19_28(a1, a2, a3, a4, a5);
    v14 = (char *)OUTLINED_FUNCTION_9_1();
    v15 = _swift_stdlib_malloc_size(v14);
    *((_QWORD *)v14 + 2) = v12;
    *((_QWORD *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 8);
  }
  else
  {
    v14 = (char *)MEMORY[0x24BEE4AF8];
  }
  v16 = v14 + 32;
  if ((v8 & 1) != 0)
  {
    a6(a4 + 32, v12, v16);
    OUTLINED_FUNCTION_7_63();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, v16, a4);
  }
  OUTLINED_FUNCTION_164();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (windowKeypoints: MLMultiArray, range: Range<Int>));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (predicted: String, label: String));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 8 * a1 + 32);
  v6 = &__dst[8 * v4];
  if (v5 >= v6 || &v5[8 * v4] <= __dst)
  {
    memcpy(__dst, v5, 8 * v4);
    OUTLINED_FUNCTION_123();
    return v6;
  }
  OUTLINED_FUNCTION_0_44();
  OUTLINED_FUNCTION_5_33();
LABEL_11:
  result = (char *)OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + (a1 << 6) + 32);
    v6 = &__dst[64 * v4];
    if (v5 >= v6 || &v5[64 * v4] <= __dst)
    {
      memcpy(__dst, v5, v4 << 6);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = &__dst[4 * v4];
    if (v5 >= v6 || &v5[4 * v4] <= __dst)
    {
      memcpy(__dst, v5, 4 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  unint64_t v6;
  char v7;
  BOOL v8;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
    goto LABEL_11;
  }
  a5(0);
  OUTLINED_FUNCTION_32_29();
  if (v7)
    v8 = 0;
  else
    v8 = v6 > a3;
  if (!v8)
  {
    OUTLINED_FUNCTION_65_21();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_13_12();
    return;
  }
  OUTLINED_FUNCTION_0_44();
  OUTLINED_FUNCTION_5_33();
LABEL_11:
  OUTLINED_FUNCTION_3_38();
  __break(1u);
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
    goto LABEL_11;
  }
  v6 = a4 + 8 * a1 + 32;
  v7 = a3 + 8 * v5;
  if (v6 >= v7 || v6 + 8 * v5 <= a3)
  {
    OUTLINED_FUNCTION_19_28(a1, a2, a3, a4, a5);
    swift_arrayInitWithCopy();
    OUTLINED_FUNCTION_123();
    return v7;
  }
  OUTLINED_FUNCTION_0_44();
  OUTLINED_FUNCTION_5_33();
LABEL_11:
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

void specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v6;
  char v7;
  BOOL v8;

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_19_28(a1, a2, a3, a4, a5);
  OUTLINED_FUNCTION_32_29();
  if (v7)
    v8 = 0;
  else
    v8 = v6 > a3;
  if (!v8)
  {
    OUTLINED_FUNCTION_65_21();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_13_12();
    return;
  }
  OUTLINED_FUNCTION_0_44();
  OUTLINED_FUNCTION_5_33();
LABEL_11:
  OUTLINED_FUNCTION_3_38();
  __break(1u);
}

uint64_t partial apply for closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(a1, *(void (**)(_QWORD *))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

id OUTLINED_FUNCTION_5_61(id a1, char a2)
{
  return outlined copy of Result<_DataTable, Error>(a1, a2);
}

uint64_t OUTLINED_FUNCTION_7_63()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_11_59()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0[2] + 16);
  outlined copy of Result<_DataTable, Error>(v0, 0);
  return v1;
}

void OUTLINED_FUNCTION_14_56()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_18_44()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)v0 = v1;
  *(_BYTE *)(v0 + 8) = 0;
  return v1;
}

void OUTLINED_FUNCTION_19_44()
{
  void *v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v0, 0);
  outlined consume of Result<_DataTable, Error>(v1, 0);
}

id OUTLINED_FUNCTION_20_45()
{
  void *v0;

  outlined copy of Result<_DataTable, Error>(v0, 1);
  return v0;
}

void OUTLINED_FUNCTION_24_47()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1[2] + 16);
  v3 = *(_QWORD *)(v0[2] + 16);
  outlined copy of Result<_DataTable, Error>(v0, 0);
  outlined copy of Result<_DataTable, Error>(v1, 0);
  specialized handling<A, B, C>(_:_:_:)(v2, v3);
}

void OUTLINED_FUNCTION_29_36(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  specialized handling<A, B, C, D>(_:_:_:_:)(a1, a2, 0, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30);
}

void OUTLINED_FUNCTION_34_33()
{
  uint64_t v0;

  *(_QWORD *)v0 = 0;
  *(_BYTE *)(v0 + 8) = -1;
}

uint64_t OUTLINED_FUNCTION_35_28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  return v4(0, v5, a3, v3);
}

uint64_t OUTLINED_FUNCTION_37_22()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_38_27()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0 + 32, v2);
}

uint64_t OUTLINED_FUNCTION_41_29()
{
  return swift_dynamicCastMetatype();
}

void OUTLINED_FUNCTION_46_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _UntypedColumn.type.getter(&a13);
}

uint64_t OUTLINED_FUNCTION_48_27()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_49_26()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_54_24()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_55_27()
{
  return 0;
}

void OUTLINED_FUNCTION_57_24(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * a1;
}

uint64_t OUTLINED_FUNCTION_61_21(void *a1)
{
  outlined copy of Result<_DataTable, Error>(a1, 0);
  return CMLColumn.size.getter();
}

void OUTLINED_FUNCTION_62_29()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_65_21()
{
  return swift_arrayInitWithCopy();
}

_QWORD *OUTLINED_FUNCTION_66_23(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *(*v7)(uint64_t *__return_ptr, uint64_t, uint64_t);
  va_list va;

  va_start(va, a5);
  return v7((uint64_t *)va, v5, v6);
}

uint64_t OUTLINED_FUNCTION_68_24()
{
  uint64_t v0;
  void *v1;
  void *v2;
  char v3;

  outlined consume of MLDataValue(v1, v2, v3);
  return v0;
}

id OUTLINED_FUNCTION_69_15()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_78_13()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_80_14()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_81_17()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_83_14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1 + a1, v3);
}

void OUTLINED_FUNCTION_88_8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_QWORD *)v0 = v1;
  *(_BYTE *)(v0 + 8) = v2;
}

uint64_t OUTLINED_FUNCTION_89_10()
{
  return _typeName(_:qualified:)();
}

uint64_t OUTLINED_FUNCTION_91_13()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_92_7()
{
  return _print_unlocked<A, B>(_:_:)();
}

size_t OUTLINED_FUNCTION_94_9(const void *a1)
{
  return _swift_stdlib_malloc_size(a1);
}

uint64_t specialized MLTrainingSession.resume(job:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 1, 1, v13);
  v14 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v5;
  v14[5] = a1;
  v14[6] = a2;
  v14[7] = a3;
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_23_22();
  v15 = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5((uint64_t)v12, a5, (uint64_t)v14);
  outlined destroy of URL?((uint64_t)v12, &demangling cache variable for type metadata for TaskPriority?);
  return v15;
}

uint64_t specialized closure #1 in MLTrainingSession.resume(job:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[2] = a6;
  v7[3] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLTrainingSession.resumeAsync(job:)
                                        + async function pointer to specialized MLTrainingSession.resumeAsync(job:));
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = specialized closure #1 in MLTrainingSession.resume(job:completion:);
  return v11(a5);
}

uint64_t specialized closure #1 in MLTrainingSession.resume(job:completion:)()
{
  OUTLINED_FUNCTION_81_18();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_81_18();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  (*(void (**)(_QWORD, _QWORD))(v0 + 16))(0, 0);
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_90(v1);
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *, uint64_t);
  id v3;
  uint64_t (*v4)(void);

  v1 = *(void **)(v0 + 40);
  v2 = *(void (**)(void *, uint64_t))(v0 + 16);
  v3 = v1;
  v2(v1, 1);
  OUTLINED_FUNCTION_366();
  OUTLINED_FUNCTION_366();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_10_4(v4);
}

uint64_t specialized MLTrainingSession.resumeAsync(job:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for MLCheckpoint();
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized MLTrainingSession.resumeAsync(job:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_98_9();
  if (v0)
  {
    OUTLINED_FUNCTION_203_3();
    OUTLINED_FUNCTION_10();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_98_9();
  if (v0)
  {
    OUTLINED_FUNCTION_203_3();
    OUTLINED_FUNCTION_10();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(void);

  if (objc_msgSend(*(id *)(*(_QWORD *)(v0 + 40) + direct field offset for MLJob.progress), sel_isCancelled))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_BYTE *)(v1 + 48) = 4;
    swift_willThrow(0.0);
    swift_task_dealloc();
    OUTLINED_FUNCTION_10();
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_183_3();
    OUTLINED_FUNCTION_31();
    v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_10_4(v3);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  OUTLINED_FUNCTION_171_3();
  OUTLINED_FUNCTION_47_32();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata);
  OUTLINED_FUNCTION_143_3(v2);
  OUTLINED_FUNCTION_22_42();
  if (v3)
  {
    outlined destroy of URL?(*(_QWORD *)(v1 + 56), &demangling cache variable for type metadata for MLCheckpoint?);
    OUTLINED_FUNCTION_51_32(direct field offset for MLTrainingSession.delegate);
    if (v0)
    {
LABEL_7:
      OUTLINED_FUNCTION_183_3();
      OUTLINED_FUNCTION_31();
      v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_7_64(v8);
    }
  }
  else
  {
    v4 = OUTLINED_FUNCTION_323();
    outlined init with take of MLCheckpoint(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v6 = OUTLINED_FUNCTION_50_29(direct field offset for MLTrainingSession.delegate);
    v7 = OUTLINED_FUNCTION_166_1(v6);
    if (v0)
    {
      OUTLINED_FUNCTION_203(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      OUTLINED_FUNCTION_104();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_117_5();
    OUTLINED_FUNCTION_203(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_321();
  }
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v11;
  OUTLINED_FUNCTION_0_79(v11, (uint64_t)specialized MLTrainingSession.resumeAsync(job:));
  OUTLINED_FUNCTION_170_2();
  return specialized MLTrainingSession.execute(job:)(v12);
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
  v8 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
  {
    outlined destroy of URL?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    v9 = dispatch thunk of Actor.unownedExecutor.getter();
    v11 = v10;
    swift_unknownObjectRelease();
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  if (v11 | v9)
  {
    v13[0] = 0;
    v13[1] = 0;
    v13[2] = v9;
    v13[3] = v11;
  }
  return swift_task_create();
}

uint64_t specialized MLTrainingSession.execute(job:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

uint64_t specialized MLTrainingSession.execute(job:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_218_2(v0[6]);
  v1 = direct field offset for MLJob.progress;
  v0[7] = v2;
  v0[8] = v1;
  v0[9] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_58_18();
  v3 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBC230 + 4 * asc_21AFF0B78[v4]))(v3);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBC454 + 4 * asc_21AFF0B82[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBC594 + 4 * byte_21AFF0B8C[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBC6D4 + 4 * byte_21AFF0B96[v1]))(v0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_218_2(v0[6]);
  v1 = direct field offset for MLJob.progress;
  v0[7] = v2;
  v0[8] = v1;
  v0[9] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_58_18();
  v3 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBC874 + 4 * byte_21AFF0BA0[v4]))(v3);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBCA98 + 4 * asc_21AFF0BAA[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBCBD8 + 4 * byte_21AFF0BB4[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBCD18 + 4 * byte_21AFF0BBE[v1]))(v0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_218_2(v0[6]);
  v1 = direct field offset for MLJob.progress;
  v0[7] = v2;
  v0[8] = v1;
  v0[9] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_58_18();
  v3 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBCEB8 + 4 * byte_21AFF0BC8[v4]))(v3);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBD0DC + 4 * asc_21AFF0BD2[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBD21C + 4 * byte_21AFF0BDC[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBD35C + 4 * byte_21AFF0BE6[v1]))(v0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_218_2(v0[6]);
  v1 = direct field offset for MLJob.progress;
  v0[7] = v2;
  v0[8] = v1;
  v0[9] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_58_18();
  v3 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBD4FC + 4 * byte_21AFF0BF0[v4]))(v3);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBD720 + 4 * asc_21AFF0BFA[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBD860 + 4 * byte_21AFF0C04[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBD9A0 + 4 * byte_21AFF0C0E[v1]))(v0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_218_2(v0[6]);
  v1 = direct field offset for MLJob.progress;
  v0[7] = v2;
  v0[8] = v1;
  v0[9] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_58_18();
  v3 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBDB40 + 4 * byte_21AFF0C18[v4]))(v3);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBDD64 + 4 * asc_21AFF0C22[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBDEA4 + 4 * byte_21AFF0C2C[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_58_18();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBDFE4 + 4 * byte_21AFF0C36[v1]))(v0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_289();
  v0[7] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_218_2(v1);
  v2 = direct field offset for MLJob.progress;
  v0[8] = v3;
  v0[9] = v2;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_27_50();
  v4 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBE178 + 4 * byte_21AFF0C40[v5]))(v4);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBE394 + 4 * byte_21AFF0C4A[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBE4CC + 4 * byte_21AFF0C54[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBE604 + 4 * byte_21AFF0C5E[v1]))(v0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_289();
  v0[7] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_218_2(v1);
  v2 = direct field offset for MLJob.progress;
  v0[8] = v3;
  v0[9] = v2;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_27_50();
  v4 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBE794 + 4 * byte_21AFF0C68[v5]))(v4);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBE9B0 + 4 * byte_21AFF0C72[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBEAE8 + 4 * byte_21AFF0C7C[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBEC20 + 4 * byte_21AFF0C86[v1]))(v0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_289();
  v0[7] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_218_2(v1);
  v2 = direct field offset for MLJob.progress;
  v0[8] = v3;
  v0[9] = v2;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_27_50();
  v4 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBEDB0 + 4 * byte_21AFF0C90[v5]))(v4);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBEFCC + 4 * byte_21AFF0C9A[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBF104 + 4 * byte_21AFF0CA4[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBF23C + 4 * byte_21AFF0CAE[v1]))(v0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_289();
  v0[7] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_218_2(v1);
  v2 = direct field offset for MLJob.progress;
  v0[8] = v3;
  v0[9] = v2;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_27_50();
  v4 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBF3CC + 4 * byte_21AFF0CB8[v5]))(v4);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBF5E8 + 4 * byte_21AFF0CC2[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBF720 + 4 * byte_21AFF0CCC[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBF858 + 4 * byte_21AFF0CD6[v1]))(v0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_289();
  v0[7] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_218_2(v1);
  v2 = direct field offset for MLJob.progress;
  v0[8] = v3;
  v0[9] = v2;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_27_50();
  v4 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBF9E8 + 4 * byte_21AFF0CE0[v5]))(v4);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBFC04 + 4 * byte_21AFF0CEA[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBFD3C + 4 * byte_21AFF0CF4[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFBFE74 + 4 * byte_21AFF0CFE[v1]))(v0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_289();
  v0[7] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_218_2(v1);
  v2 = direct field offset for MLJob.progress;
  v0[8] = v3;
  v0[9] = v2;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_27_50();
  v4 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC0004 + 4 * byte_21AFF0D08[v5]))(v4);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC0220 + 4 * byte_21AFF0D12[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC0358 + 4 * byte_21AFF0D1C[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC0490 + 4 * byte_21AFF0D26[v1]))(v0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_289();
  v0[7] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_218_2(v1);
  v2 = direct field offset for MLJob.progress;
  v0[8] = v3;
  v0[9] = v2;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_27_50();
  v4 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC0620 + 4 * byte_21AFF0D30[v5]))(v4);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC083C + 4 * byte_21AFF0D3A[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC0974 + 4 * byte_21AFF0D44[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC0AAC + 4 * byte_21AFF0D4E[v1]))(v0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_289();
  v0[7] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_218_2(v1);
  v2 = direct field offset for MLJob.progress;
  v0[8] = v3;
  v0[9] = v2;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_27_50();
  v4 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC0C3C + 4 * byte_21AFF0D58[v5]))(v4);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC0E58 + 4 * byte_21AFF0D62[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC0F90 + 4 * byte_21AFF0D6C[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC10C8 + 4 * byte_21AFF0D76[v1]))(v0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_289();
  v0[7] = direct field offset for MLTrainingSession.delegate;
  OUTLINED_FUNCTION_218_2(v1);
  v2 = direct field offset for MLJob.progress;
  v0[8] = v3;
  v0[9] = v2;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_27_50();
  v4 = OUTLINED_FUNCTION_91_0();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC1258 + 4 * byte_21AFF0D80[v5]))(v4);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_78_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_80_15();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_79_14();
  if (v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_316();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC1474 + 4 * byte_21AFF0D8A[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_315();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC15AC + 4 * byte_21AFF0D94[v1]))(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_314();
  OUTLINED_FUNCTION_27_50();
  v0 = OUTLINED_FUNCTION_6_70();
  return ((uint64_t (*)(uint64_t))((char *)sub_21AFC16E4 + 4 * byte_21AFF0D9E[v1]))(v0);
}

uint64_t sub_21AFBC230()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || (OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_214_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFBC1FC + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFBC454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBC438 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBC594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBC578 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBC6D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBC6B8 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBC874()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || (OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_214_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFBC840 + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFBCA98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBCA7C + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBCBD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBCBBC + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBCD18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBCCFC + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBCEB8()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || (OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_214_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFBCE84 + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFBD0DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBD0C0 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBD21C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBD200 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBD35C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBD340 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBD4FC()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || (OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_214_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFBD4C8 + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFBD720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBD704 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBD860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBD844 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBD9A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBD984 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBDB40()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || (OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_214_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFBDB0C + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFBDD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBDD48 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBDEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBDE88 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBDFE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || (OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 64)) & 1) != 0)
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_93_9();
    return ((uint64_t (*)(void))((char *)&loc_21AFBDFC8 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBE178()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_177_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFBE148 + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFBE394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBE37C + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBE4CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBE4B4 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBE604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBE5EC + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBE794()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_177_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFBE764 + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFBE9B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBE998 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBEAE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBEAD0 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBEC20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBEC08 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBEDB0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_177_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFBED80 + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFBEFCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBEFB4 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBF104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBF0EC + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBF23C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBF224 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBF3CC()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_177_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFBF39C + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFBF5E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBF5D0 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBF720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBF708 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBF858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBF840 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBF9E8()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_177_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFBF9B8 + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFBFC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBFBEC + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBFD3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBFD24 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFBFE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFBFE5C + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC0004()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_177_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFBFFD4 + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFC0220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC0208 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC0358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC0340 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC0490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC0478 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC0620()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_177_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFC05F0 + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFC083C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC0824 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC0974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC095C + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC0AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC0A94 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC0C3C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_177_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFC0C0C + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFC0E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC0E40 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC0F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC0F78 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC10C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC10B0 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC1258()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v3 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_215_2(v3);
  OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_200_1();
  if ((v0 & 1) != 0 || OUTLINED_FUNCTION_165_3(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_7_64(v6);
  }
  else
  {
    OUTLINED_FUNCTION_177_1();
    return ((uint64_t (*)(void))((char *)&loc_21AFC1228 + 4 * *(unsigned __int8 *)(v2 + v4)))();
  }
}

uint64_t sub_21AFC1474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC145C + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC15AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC1594 + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

uint64_t sub_21AFC16E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_29_37();
  OUTLINED_FUNCTION_94_10(v2);
  v3 = OUTLINED_FUNCTION_2_69();
  OUTLINED_FUNCTION_104();
  if ((v3 & 1) != 0 || OUTLINED_FUNCTION_37_23(*(_QWORD *)(v1 + 72)))
  {
    v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_12(v6);
  }
  else
  {
    OUTLINED_FUNCTION_67_23();
    return ((uint64_t (*)(void))((char *)&loc_21AFC16CC + 4 * *(unsigned __int8 *)(v0 + v4)))();
  }
}

id MLJob.isCanceled.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + direct field offset for MLJob.progress), sel_isCancelled);
}

uint64_t specialized MLTrainingSession.transition(to:)(char a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  char v12;

  v5 = *(_QWORD *)(v2 + direct field offset for MLTrainingSession.delegate + 24);
  v6 = *(_QWORD *)(v2 + direct field offset for MLTrainingSession.delegate + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + direct field offset for MLTrainingSession.delegate), v5);
  v7 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 112);
  OUTLINED_FUNCTION_44_7();
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v12 = *(_BYTE *)(v7 + *(int *)(v8 + 28));
  v11 = a1;
  result = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v6 + 80))(&v12, &v11, v5, v6);
  v10 = *(int *)(v8 + 28);
  if ((result & 1) != 0)
  {
    *(_BYTE *)(v7 + v10) = a1;
    *(_QWORD *)(v7 + *(int *)(v8 + 32)) = 0;
  }
  else
  {
    *(_BYTE *)(v7 + v10) = 4;
  }
  return result;
}

uint64_t specialized MLTrainingSession.extractFeatures(job:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for MLTrainingSessionParameters();
  v2[11] = swift_task_alloc();
  v3 = type metadata accessor for URL();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for MLTrainingSessionParameters();
  v2[11] = swift_task_alloc();
  v3 = type metadata accessor for URL();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for MLTrainingSessionParameters();
  v2[11] = swift_task_alloc();
  v3 = type metadata accessor for URL();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for MLTrainingSessionParameters();
  v2[11] = swift_task_alloc();
  v3 = type metadata accessor for URL();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for MLTrainingSessionParameters();
  v2[11] = swift_task_alloc();
  v3 = type metadata accessor for URL();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for MLCheckpoint();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for MLTrainingSessionParameters();
  v2[15] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[16] = v4;
  v2[17] = *(_QWORD *)(v4 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

#error "21AFC1ACC: call analysis failed (funcsize=105)"

uint64_t specialized MLTrainingSession.extractFeatures(job:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_232_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_232_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_232_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_232_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_232_0();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_158_2();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_158_2();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_158_2();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_158_2();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_158_2();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_158_2();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_158_2();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_158_2();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_33_36(v2, v3);
  if (v0)
  {
    OUTLINED_FUNCTION_158_2();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_168_0();
  }
}

#error "21AFC1D9C: call analysis failed (funcsize=113)"

#error "21AFC21B4: call analysis failed (funcsize=105)"

#error "21AFC2484: call analysis failed (funcsize=113)"

#error "21AFC289C: call analysis failed (funcsize=105)"

#error "21AFC2B6C: call analysis failed (funcsize=113)"

#error "21AFC2F84: call analysis failed (funcsize=105)"

#error "21AFC3254: call analysis failed (funcsize=113)"

#error "21AFC366C: call analysis failed (funcsize=105)"

#error "21AFC393C: call analysis failed (funcsize=113)"

#error "21AFC3D54: call analysis failed (funcsize=106)"

uint64_t specialized MLTrainingSession.extractFeatures(job:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  __n128 *v45;
  __n128 *v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);

  OUTLINED_FUNCTION_49_4();
  a26 = v30;
  a27 = v31;
  a25 = v29;
  OUTLINED_FUNCTION_105_6();
  if (v33)
  {
    __break(1u);
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_49_27(v32);
  v34 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_88_9();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_220_0();
  if (v33)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x21AFC41F0);
  }
  OUTLINED_FUNCTION_110_7();
  if (v35 >= v36 || (OUTLINED_FUNCTION_325(), (v37 & 1) != 0))
  {
    OUTLINED_FUNCTION_342();
    OUTLINED_FUNCTION_192_1(v38, v39, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v40)
    {
      OUTLINED_FUNCTION_121_9();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v45 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v46 = OUTLINED_FUNCTION_69_16(v45, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC4080 + *((int *)qword_21AFC41F0 + v28)))(v46);
    }
    outlined destroy of URL?(v29[13], &demangling cache variable for type metadata for URL?);
  }
  v41 = v29[32];
  OUTLINED_FUNCTION_326();
  if (v40)
  {
    OUTLINED_FUNCTION_217_1();
    OUTLINED_FUNCTION_205_2(v42, &demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata);
    v43 = v27[4];
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    a15 = v34;
    OUTLINED_FUNCTION_92_8((uint64_t)&a15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 40));
    if (v41)
    {
      OUTLINED_FUNCTION_159_2();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_13(v44);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_286(), sel_isCancelled) & 1) == 0)
  {
    v29[29] = v28;
    v48 = (_QWORD *)OUTLINED_FUNCTION_8_66((_QWORD *)(v29[8] + v29[24]));
    v29[30] = v48;
    v49 = OUTLINED_FUNCTION_15_47(v48, (uint64_t)specialized MLTrainingSession.extractFeatures(job:));
    return OUTLINED_FUNCTION_4_65(v49, v50, v51, v52);
  }
  OUTLINED_FUNCTION_87_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v44);
}

{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  __n128 *v45;
  __n128 *v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);

  OUTLINED_FUNCTION_49_4();
  a26 = v30;
  a27 = v31;
  a25 = v29;
  OUTLINED_FUNCTION_105_6();
  if (v33)
  {
    __break(1u);
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_49_27(v32);
  v34 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_88_9();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_220_0();
  if (v33)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x21AFC48A4);
  }
  OUTLINED_FUNCTION_110_7();
  if (v35 >= v36 || (OUTLINED_FUNCTION_325(), (v37 & 1) != 0))
  {
    OUTLINED_FUNCTION_342();
    OUTLINED_FUNCTION_192_1(v38, v39, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v40)
    {
      OUTLINED_FUNCTION_121_9();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v45 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v46 = OUTLINED_FUNCTION_69_16(v45, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC4734 + dword_21AFC48A4[v28]))(v46);
    }
    outlined destroy of URL?(v29[13], &demangling cache variable for type metadata for URL?);
  }
  v41 = v29[32];
  OUTLINED_FUNCTION_326();
  if (v40)
  {
    OUTLINED_FUNCTION_217_1();
    OUTLINED_FUNCTION_205_2(v42, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata);
    v43 = v27[4];
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    a15 = v34;
    OUTLINED_FUNCTION_92_8((uint64_t)&a15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 40));
    if (v41)
    {
      OUTLINED_FUNCTION_159_2();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_13(v44);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_286(), sel_isCancelled) & 1) == 0)
  {
    v29[29] = v28;
    v48 = (_QWORD *)OUTLINED_FUNCTION_8_66((_QWORD *)(v29[8] + v29[24]));
    v29[30] = v48;
    v49 = OUTLINED_FUNCTION_15_47(v48, (uint64_t)specialized MLTrainingSession.extractFeatures(job:));
    return OUTLINED_FUNCTION_4_65(v49, v50, v51, v52);
  }
  OUTLINED_FUNCTION_87_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v44);
}

{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  __n128 *v45;
  __n128 *v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);

  OUTLINED_FUNCTION_49_4();
  a26 = v30;
  a27 = v31;
  a25 = v29;
  OUTLINED_FUNCTION_105_6();
  if (v33)
  {
    __break(1u);
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_49_27(v32);
  v34 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_88_9();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_220_0();
  if (v33)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x21AFC4F58);
  }
  OUTLINED_FUNCTION_110_7();
  if (v35 >= v36 || (OUTLINED_FUNCTION_325(), (v37 & 1) != 0))
  {
    OUTLINED_FUNCTION_342();
    OUTLINED_FUNCTION_192_1(v38, v39, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v40)
    {
      OUTLINED_FUNCTION_121_9();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v45 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v46 = OUTLINED_FUNCTION_69_16(v45, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC4DE8 + *((int *)qword_21AFC4F58 + v28)))(v46);
    }
    outlined destroy of URL?(v29[13], &demangling cache variable for type metadata for URL?);
  }
  v41 = v29[32];
  OUTLINED_FUNCTION_326();
  if (v40)
  {
    OUTLINED_FUNCTION_217_1();
    OUTLINED_FUNCTION_205_2(v42, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata);
    v43 = v27[4];
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    a15 = v34;
    OUTLINED_FUNCTION_92_8((uint64_t)&a15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 40));
    if (v41)
    {
      OUTLINED_FUNCTION_159_2();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_13(v44);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_286(), sel_isCancelled) & 1) == 0)
  {
    v29[29] = v28;
    v48 = (_QWORD *)OUTLINED_FUNCTION_8_66((_QWORD *)(v29[8] + v29[24]));
    v29[30] = v48;
    v49 = OUTLINED_FUNCTION_15_47(v48, (uint64_t)specialized MLTrainingSession.extractFeatures(job:));
    return OUTLINED_FUNCTION_4_65(v49, v50, v51, v52);
  }
  OUTLINED_FUNCTION_87_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v44);
}

{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  __n128 *v45;
  __n128 *v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);

  OUTLINED_FUNCTION_49_4();
  a26 = v30;
  a27 = v31;
  a25 = v29;
  OUTLINED_FUNCTION_105_6();
  if (v33)
  {
    __break(1u);
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_49_27(v32);
  v34 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_88_9();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_220_0();
  if (v33)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x21AFC560CLL);
  }
  OUTLINED_FUNCTION_110_7();
  if (v35 >= v36 || (OUTLINED_FUNCTION_325(), (v37 & 1) != 0))
  {
    OUTLINED_FUNCTION_342();
    OUTLINED_FUNCTION_192_1(v38, v39, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v40)
    {
      OUTLINED_FUNCTION_121_9();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v45 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v46 = OUTLINED_FUNCTION_69_16(v45, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC549C + dword_21AFC560C[v28]))(v46);
    }
    outlined destroy of URL?(v29[13], &demangling cache variable for type metadata for URL?);
  }
  v41 = v29[32];
  OUTLINED_FUNCTION_326();
  if (v40)
  {
    OUTLINED_FUNCTION_217_1();
    OUTLINED_FUNCTION_205_2(v42, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata);
    v43 = v27[4];
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    a15 = v34;
    OUTLINED_FUNCTION_92_8((uint64_t)&a15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 40));
    if (v41)
    {
      OUTLINED_FUNCTION_159_2();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_13(v44);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_286(), sel_isCancelled) & 1) == 0)
  {
    v29[29] = v28;
    v48 = (_QWORD *)OUTLINED_FUNCTION_8_66((_QWORD *)(v29[8] + v29[24]));
    v29[30] = v48;
    v49 = OUTLINED_FUNCTION_15_47(v48, (uint64_t)specialized MLTrainingSession.extractFeatures(job:));
    return OUTLINED_FUNCTION_4_65(v49, v50, v51, v52);
  }
  OUTLINED_FUNCTION_87_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v44);
}

{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  __n128 *v45;
  __n128 *v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);

  OUTLINED_FUNCTION_49_4();
  a26 = v30;
  a27 = v31;
  a25 = v29;
  OUTLINED_FUNCTION_105_6();
  if (v33)
  {
    __break(1u);
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_49_27(v32);
  v34 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_88_9();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_220_0();
  if (v33)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x21AFC5CC0);
  }
  OUTLINED_FUNCTION_110_7();
  if (v35 >= v36 || (OUTLINED_FUNCTION_325(), (v37 & 1) != 0))
  {
    OUTLINED_FUNCTION_342();
    OUTLINED_FUNCTION_192_1(v38, v39, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v40)
    {
      OUTLINED_FUNCTION_121_9();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v45 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v46 = OUTLINED_FUNCTION_69_16(v45, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC5B50 + *((int *)qword_21AFC5CC0 + v28)))(v46);
    }
    outlined destroy of URL?(v29[13], &demangling cache variable for type metadata for URL?);
  }
  v41 = v29[32];
  OUTLINED_FUNCTION_326();
  if (v40)
  {
    OUTLINED_FUNCTION_217_1();
    OUTLINED_FUNCTION_205_2(v42, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata);
    v43 = v27[4];
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    a15 = v34;
    OUTLINED_FUNCTION_92_8((uint64_t)&a15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 40));
    if (v41)
    {
      OUTLINED_FUNCTION_159_2();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_13(v44);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_286(), sel_isCancelled) & 1) == 0)
  {
    v29[29] = v28;
    v48 = (_QWORD *)OUTLINED_FUNCTION_8_66((_QWORD *)(v29[8] + v29[24]));
    v29[30] = v48;
    v49 = OUTLINED_FUNCTION_15_47(v48, (uint64_t)specialized MLTrainingSession.extractFeatures(job:));
    return OUTLINED_FUNCTION_4_65(v49, v50, v51, v52);
  }
  OUTLINED_FUNCTION_87_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v44);
}

{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  __n128 *v45;
  __n128 *v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);

  OUTLINED_FUNCTION_49_4();
  a26 = v30;
  a27 = v31;
  a25 = v29;
  OUTLINED_FUNCTION_105_6();
  if (v33)
  {
    __break(1u);
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_49_27(v32);
  v34 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_88_9();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_220_0();
  if (v33)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x21AFC6374);
  }
  OUTLINED_FUNCTION_110_7();
  if (v35 >= v36 || (OUTLINED_FUNCTION_325(), (v37 & 1) != 0))
  {
    OUTLINED_FUNCTION_342();
    OUTLINED_FUNCTION_192_1(v38, v39, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v40)
    {
      OUTLINED_FUNCTION_121_9();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v45 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v46 = OUTLINED_FUNCTION_69_16(v45, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC6204 + dword_21AFC6374[v28]))(v46);
    }
    outlined destroy of URL?(v29[13], &demangling cache variable for type metadata for URL?);
  }
  v41 = v29[32];
  OUTLINED_FUNCTION_326();
  if (v40)
  {
    OUTLINED_FUNCTION_217_1();
    OUTLINED_FUNCTION_205_2(v42, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata);
    v43 = v27[4];
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    a15 = v34;
    OUTLINED_FUNCTION_92_8((uint64_t)&a15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 40));
    if (v41)
    {
      OUTLINED_FUNCTION_159_2();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_13(v44);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_286(), sel_isCancelled) & 1) == 0)
  {
    v29[29] = v28;
    v48 = (_QWORD *)OUTLINED_FUNCTION_8_66((_QWORD *)(v29[8] + v29[24]));
    v29[30] = v48;
    v49 = OUTLINED_FUNCTION_15_47(v48, (uint64_t)specialized MLTrainingSession.extractFeatures(job:));
    return OUTLINED_FUNCTION_4_65(v49, v50, v51, v52);
  }
  OUTLINED_FUNCTION_87_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v44);
}

{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  __n128 *v45;
  __n128 *v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);

  OUTLINED_FUNCTION_49_4();
  a26 = v30;
  a27 = v31;
  a25 = v29;
  OUTLINED_FUNCTION_105_6();
  if (v33)
  {
    __break(1u);
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_49_27(v32);
  v34 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_88_9();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_220_0();
  if (v33)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x21AFC6A28);
  }
  OUTLINED_FUNCTION_110_7();
  if (v35 >= v36 || (OUTLINED_FUNCTION_325(), (v37 & 1) != 0))
  {
    OUTLINED_FUNCTION_342();
    OUTLINED_FUNCTION_192_1(v38, v39, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v40)
    {
      OUTLINED_FUNCTION_121_9();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v45 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v46 = OUTLINED_FUNCTION_69_16(v45, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC68B8 + *((int *)qword_21AFC6A28 + v28)))(v46);
    }
    outlined destroy of URL?(v29[13], &demangling cache variable for type metadata for URL?);
  }
  v41 = v29[32];
  OUTLINED_FUNCTION_326();
  if (v40)
  {
    OUTLINED_FUNCTION_217_1();
    OUTLINED_FUNCTION_205_2(v42, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata);
    v43 = v27[4];
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    a15 = v34;
    OUTLINED_FUNCTION_92_8((uint64_t)&a15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 40));
    if (v41)
    {
      OUTLINED_FUNCTION_159_2();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_13(v44);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_286(), sel_isCancelled) & 1) == 0)
  {
    v29[29] = v28;
    v48 = (_QWORD *)OUTLINED_FUNCTION_8_66((_QWORD *)(v29[8] + v29[24]));
    v29[30] = v48;
    v49 = OUTLINED_FUNCTION_15_47(v48, (uint64_t)specialized MLTrainingSession.extractFeatures(job:));
    return OUTLINED_FUNCTION_4_65(v49, v50, v51, v52);
  }
  OUTLINED_FUNCTION_87_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v44);
}

{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  __n128 *v45;
  __n128 *v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);

  OUTLINED_FUNCTION_49_4();
  a26 = v30;
  a27 = v31;
  a25 = v29;
  OUTLINED_FUNCTION_105_6();
  if (v33)
  {
    __break(1u);
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_49_27(v32);
  v34 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_88_9();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_220_0();
  if (v33)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x21AFC70DCLL);
  }
  OUTLINED_FUNCTION_110_7();
  if (v35 >= v36 || (OUTLINED_FUNCTION_325(), (v37 & 1) != 0))
  {
    OUTLINED_FUNCTION_342();
    OUTLINED_FUNCTION_192_1(v38, v39, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v40)
    {
      OUTLINED_FUNCTION_121_9();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v45 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v46 = OUTLINED_FUNCTION_69_16(v45, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC6F6C + dword_21AFC70DC[v28]))(v46);
    }
    outlined destroy of URL?(v29[13], &demangling cache variable for type metadata for URL?);
  }
  v41 = v29[32];
  OUTLINED_FUNCTION_326();
  if (v40)
  {
    OUTLINED_FUNCTION_217_1();
    OUTLINED_FUNCTION_205_2(v42, &demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata);
    v43 = v27[4];
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    a15 = v34;
    OUTLINED_FUNCTION_92_8((uint64_t)&a15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 40));
    if (v41)
    {
      OUTLINED_FUNCTION_159_2();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_13(v44);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_286(), sel_isCancelled) & 1) == 0)
  {
    v29[29] = v28;
    v48 = (_QWORD *)OUTLINED_FUNCTION_8_66((_QWORD *)(v29[8] + v29[24]));
    v29[30] = v48;
    v49 = OUTLINED_FUNCTION_15_47(v48, (uint64_t)specialized MLTrainingSession.extractFeatures(job:));
    return OUTLINED_FUNCTION_4_65(v49, v50, v51, v52);
  }
  OUTLINED_FUNCTION_87_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v44);
}

{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  __n128 *v45;
  __n128 *v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);

  OUTLINED_FUNCTION_49_4();
  a26 = v30;
  a27 = v31;
  a25 = v29;
  OUTLINED_FUNCTION_105_6();
  if (v33)
  {
    __break(1u);
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_49_27(v32);
  v34 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_88_9();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_220_0();
  if (v33)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x21AFC7790);
  }
  OUTLINED_FUNCTION_110_7();
  if (v35 >= v36 || (OUTLINED_FUNCTION_325(), (v37 & 1) != 0))
  {
    OUTLINED_FUNCTION_342();
    OUTLINED_FUNCTION_192_1(v38, v39, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v40)
    {
      OUTLINED_FUNCTION_121_9();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v45 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v46 = OUTLINED_FUNCTION_69_16(v45, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC7620 + *((int *)qword_21AFC7790 + v28)))(v46);
    }
    outlined destroy of URL?(v29[13], &demangling cache variable for type metadata for URL?);
  }
  v41 = v29[32];
  OUTLINED_FUNCTION_326();
  if (v40)
  {
    OUTLINED_FUNCTION_217_1();
    OUTLINED_FUNCTION_205_2(v42, &demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata);
    v43 = v27[4];
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    a15 = v34;
    OUTLINED_FUNCTION_92_8((uint64_t)&a15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 40));
    if (v41)
    {
      OUTLINED_FUNCTION_159_2();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
      return OUTLINED_FUNCTION_13(v44);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_286(), sel_isCancelled) & 1) == 0)
  {
    v29[29] = v28;
    v48 = (_QWORD *)OUTLINED_FUNCTION_8_66((_QWORD *)(v29[8] + v29[24]));
    v29[30] = v48;
    v49 = OUTLINED_FUNCTION_15_47(v48, (uint64_t)specialized MLTrainingSession.extractFeatures(job:));
    return OUTLINED_FUNCTION_4_65(v49, v50, v51, v52);
  }
  OUTLINED_FUNCTION_87_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  v44 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v44);
}

#error "21AFC4408: call analysis failed (funcsize=106)"

#error "21AFC4ABC: call analysis failed (funcsize=106)"

#error "21AFC5170: call analysis failed (funcsize=106)"

#error "21AFC5824: call analysis failed (funcsize=106)"

#error "21AFC5ED8: call analysis failed (funcsize=106)"

#error "21AFC658C: call analysis failed (funcsize=106)"

#error "21AFC6C40: call analysis failed (funcsize=106)"

#error "21AFC72F4: call analysis failed (funcsize=106)"

uint64_t specialized MLTrainingSession.train(job:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for MLTrainingSessionParameters();
  v2[17] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[18] = v4;
  v2[19] = *(_QWORD *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for MLCheckpoint();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for MLTrainingSessionParameters();
  v2[17] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[18] = v4;
  v2[19] = *(_QWORD *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for MLCheckpoint();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for MLTrainingSessionParameters();
  v2[17] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[18] = v4;
  v2[19] = *(_QWORD *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for MLCheckpoint();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for MLTrainingSessionParameters();
  v2[17] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[18] = v4;
  v2[19] = *(_QWORD *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for MLCheckpoint();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for MLTrainingSessionParameters();
  v2[17] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[18] = v4;
  v2[19] = *(_QWORD *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for MLCheckpoint();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Date();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for MLCheckpoint();
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[20] = swift_task_alloc();
  v2[21] = type metadata accessor for MLTrainingSessionParameters();
  v2[22] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v2[23] = v5;
  v2[24] = *(_QWORD *)(v5 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

#error "21AFC79F0: call analysis failed (funcsize=117)"

uint64_t specialized MLTrainingSession.train(job:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_182_1();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_172_0();
  v2 = OUTLINED_FUNCTION_102_7();
  if (v4)
  {
    __break(1u);
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_66_24(v2, v3);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v4)
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x21AFC7F64);
  }
  OUTLINED_FUNCTION_144_4();
  if (v5 != v4 && ((OUTLINED_FUNCTION_360(), v5 ^ v4 | v6) || (*(_BYTE *)(v1 + 322) & 1) == 0))
  {
    OUTLINED_FUNCTION_230_0();
  }
  else
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_192_1(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v6)
    {
      v12 = *(_QWORD *)(v1 + 240);
      OUTLINED_FUNCTION_132_3();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v14 = OUTLINED_FUNCTION_179_2(v13, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC7D68 + dword_21AFC7F64[v12]))(v14);
    }
    v9 = OUTLINED_FUNCTION_335();
    OUTLINED_FUNCTION_78_5(v9, &demangling cache variable for type metadata for URL?);
  }
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (v6)
  {
    if ((AnalyticsReporter.init()() & 1) == 0)
    {
      OUTLINED_FUNCTION_310();
      if (!v6)
        OUTLINED_FUNCTION_164_2();
    }
    OUTLINED_FUNCTION_309();
    OUTLINED_FUNCTION_199_2(v10, &demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
    OUTLINED_FUNCTION_34_34();
    if (v0)
    {
      OUTLINED_FUNCTION_181_1();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_58();
      OUTLINED_FUNCTION_19();
      v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
      return OUTLINED_FUNCTION_62_23(v11);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_358(), sel_isCancelled) & 1) == 0)
  {
    v16 = (_QWORD *)OUTLINED_FUNCTION_14_57();
    *(_QWORD *)(v1 + 288) = v16;
    v17 = OUTLINED_FUNCTION_114_7(v16, (uint64_t)specialized MLTrainingSession.train(job:));
    return OUTLINED_FUNCTION_42_28(v17, v18, v19, v20);
  }
  OUTLINED_FUNCTION_130_6();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_182_1();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_172_0();
  v2 = OUTLINED_FUNCTION_102_7();
  if (v4)
  {
    __break(1u);
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_66_24(v2, v3);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v4)
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x21AFC8738);
  }
  OUTLINED_FUNCTION_144_4();
  if (v5 != v4 && ((OUTLINED_FUNCTION_360(), v5 ^ v4 | v6) || (*(_BYTE *)(v1 + 322) & 1) == 0))
  {
    OUTLINED_FUNCTION_230_0();
  }
  else
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_192_1(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v6)
    {
      v12 = *(_QWORD *)(v1 + 240);
      OUTLINED_FUNCTION_132_3();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v14 = OUTLINED_FUNCTION_179_2(v13, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC853C + *((int *)qword_21AFC8738 + v12)))(v14);
    }
    v9 = OUTLINED_FUNCTION_335();
    OUTLINED_FUNCTION_78_5(v9, &demangling cache variable for type metadata for URL?);
  }
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (v6)
  {
    if ((AnalyticsReporter.init()() & 1) == 0)
    {
      OUTLINED_FUNCTION_310();
      if (!v6)
        OUTLINED_FUNCTION_164_2();
    }
    OUTLINED_FUNCTION_309();
    OUTLINED_FUNCTION_199_2(v10, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>.Metadata);
    OUTLINED_FUNCTION_34_34();
    if (v0)
    {
      OUTLINED_FUNCTION_181_1();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_58();
      OUTLINED_FUNCTION_19();
      v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
      return OUTLINED_FUNCTION_62_23(v11);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_358(), sel_isCancelled) & 1) == 0)
  {
    v16 = (_QWORD *)OUTLINED_FUNCTION_14_57();
    *(_QWORD *)(v1 + 288) = v16;
    v17 = OUTLINED_FUNCTION_114_7(v16, (uint64_t)specialized MLTrainingSession.train(job:));
    return OUTLINED_FUNCTION_42_28(v17, v18, v19, v20);
  }
  OUTLINED_FUNCTION_130_6();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_182_1();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_172_0();
  v2 = OUTLINED_FUNCTION_102_7();
  if (v4)
  {
    __break(1u);
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_66_24(v2, v3);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v4)
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x21AFC8F0CLL);
  }
  OUTLINED_FUNCTION_144_4();
  if (v5 != v4 && ((OUTLINED_FUNCTION_360(), v5 ^ v4 | v6) || (*(_BYTE *)(v1 + 322) & 1) == 0))
  {
    OUTLINED_FUNCTION_230_0();
  }
  else
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_192_1(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v6)
    {
      v12 = *(_QWORD *)(v1 + 240);
      OUTLINED_FUNCTION_132_3();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v14 = OUTLINED_FUNCTION_179_2(v13, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC8D10 + dword_21AFC8F0C[v12]))(v14);
    }
    v9 = OUTLINED_FUNCTION_335();
    OUTLINED_FUNCTION_78_5(v9, &demangling cache variable for type metadata for URL?);
  }
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (v6)
  {
    if ((AnalyticsReporter.init()() & 1) == 0)
    {
      OUTLINED_FUNCTION_310();
      if (!v6)
        OUTLINED_FUNCTION_164_2();
    }
    OUTLINED_FUNCTION_309();
    OUTLINED_FUNCTION_199_2(v10, &demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata);
    OUTLINED_FUNCTION_34_34();
    if (v0)
    {
      OUTLINED_FUNCTION_181_1();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_58();
      OUTLINED_FUNCTION_19();
      v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
      return OUTLINED_FUNCTION_62_23(v11);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_358(), sel_isCancelled) & 1) == 0)
  {
    v16 = (_QWORD *)OUTLINED_FUNCTION_14_57();
    *(_QWORD *)(v1 + 288) = v16;
    v17 = OUTLINED_FUNCTION_114_7(v16, (uint64_t)specialized MLTrainingSession.train(job:));
    return OUTLINED_FUNCTION_42_28(v17, v18, v19, v20);
  }
  OUTLINED_FUNCTION_130_6();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_182_1();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_172_0();
  v2 = OUTLINED_FUNCTION_102_7();
  if (v4)
  {
    __break(1u);
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_66_24(v2, v3);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v4)
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x21AFC96E0);
  }
  OUTLINED_FUNCTION_144_4();
  if (v5 != v4 && ((OUTLINED_FUNCTION_360(), v5 ^ v4 | v6) || (*(_BYTE *)(v1 + 322) & 1) == 0))
  {
    OUTLINED_FUNCTION_230_0();
  }
  else
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_192_1(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v6)
    {
      v12 = *(_QWORD *)(v1 + 240);
      OUTLINED_FUNCTION_132_3();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v14 = OUTLINED_FUNCTION_179_2(v13, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC94E4 + *((int *)qword_21AFC96E0 + v12)))(v14);
    }
    v9 = OUTLINED_FUNCTION_335();
    OUTLINED_FUNCTION_78_5(v9, &demangling cache variable for type metadata for URL?);
  }
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (v6)
  {
    if ((AnalyticsReporter.init()() & 1) == 0)
    {
      OUTLINED_FUNCTION_310();
      if (!v6)
        OUTLINED_FUNCTION_164_2();
    }
    OUTLINED_FUNCTION_309();
    OUTLINED_FUNCTION_199_2(v10, &demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata);
    OUTLINED_FUNCTION_34_34();
    if (v0)
    {
      OUTLINED_FUNCTION_181_1();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_58();
      OUTLINED_FUNCTION_19();
      v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
      return OUTLINED_FUNCTION_62_23(v11);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_358(), sel_isCancelled) & 1) == 0)
  {
    v16 = (_QWORD *)OUTLINED_FUNCTION_14_57();
    *(_QWORD *)(v1 + 288) = v16;
    v17 = OUTLINED_FUNCTION_114_7(v16, (uint64_t)specialized MLTrainingSession.train(job:));
    return OUTLINED_FUNCTION_42_28(v17, v18, v19, v20);
  }
  OUTLINED_FUNCTION_130_6();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_182_1();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_172_0();
  v2 = OUTLINED_FUNCTION_102_7();
  if (v4)
  {
    __break(1u);
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_66_24(v2, v3);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v4)
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x21AFC9EB4);
  }
  OUTLINED_FUNCTION_144_4();
  if (v5 != v4 && ((OUTLINED_FUNCTION_360(), v5 ^ v4 | v6) || (*(_BYTE *)(v1 + 322) & 1) == 0))
  {
    OUTLINED_FUNCTION_230_0();
  }
  else
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_192_1(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_134_4();
    OUTLINED_FUNCTION_22_42();
    if (!v6)
    {
      v12 = *(_QWORD *)(v1 + 240);
      OUTLINED_FUNCTION_132_3();
      OUTLINED_FUNCTION_204_3();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
      v14 = OUTLINED_FUNCTION_179_2(v13, (__n128)xmmword_21AFE7F70);
      return ((uint64_t (*)(__n128 *))((char *)&loc_21AFC9CB8 + dword_21AFC9EB4[v12]))(v14);
    }
    v9 = OUTLINED_FUNCTION_335();
    OUTLINED_FUNCTION_78_5(v9, &demangling cache variable for type metadata for URL?);
  }
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (v6)
  {
    if ((AnalyticsReporter.init()() & 1) == 0)
    {
      OUTLINED_FUNCTION_310();
      if (!v6)
        OUTLINED_FUNCTION_164_2();
    }
    OUTLINED_FUNCTION_309();
    OUTLINED_FUNCTION_199_2(v10, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata);
    OUTLINED_FUNCTION_34_34();
    if (v0)
    {
      OUTLINED_FUNCTION_181_1();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_58();
      OUTLINED_FUNCTION_19();
      v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
      return OUTLINED_FUNCTION_62_23(v11);
    }
  }
  else if ((objc_msgSend((id)OUTLINED_FUNCTION_358(), sel_isCancelled) & 1) == 0)
  {
    v16 = (_QWORD *)OUTLINED_FUNCTION_14_57();
    *(_QWORD *)(v1 + 288) = v16;
    v17 = OUTLINED_FUNCTION_114_7(v16, (uint64_t)specialized MLTrainingSession.train(job:));
    return OUTLINED_FUNCTION_42_28(v17, v18, v19, v20);
  }
  OUTLINED_FUNCTION_130_6();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_120_8();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  uint64_t v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);

  OUTLINED_FUNCTION_172_0();
  v5 = OUTLINED_FUNCTION_102_7();
  if (v7)
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_66_24(v5, v6);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v7)
  {
LABEL_25:
    __break(1u);
    JUMPOUT(0x21AFCA618);
  }
  OUTLINED_FUNCTION_125_7();
  if (v8 != v7)
  {
    OUTLINED_FUNCTION_340();
    if (v8 != v7)
    {
      OUTLINED_FUNCTION_230_0();
      goto LABEL_11;
    }
    if ((*v3 & 1) == 0)
    {
      OUTLINED_FUNCTION_230_0();
      v4 = *(_QWORD *)(v2 + 280);
      goto LABEL_19;
    }
  }
  OUTLINED_FUNCTION_344();
  OUTLINED_FUNCTION_192_1(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_134_4();
  OUTLINED_FUNCTION_22_42();
  if (!v11)
  {
    OUTLINED_FUNCTION_86_10();
    OUTLINED_FUNCTION_204_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
    v14 = OUTLINED_FUNCTION_109_10(v13, (__n128)xmmword_21AFE7F70);
    return ((uint64_t (*)(__n128 *))((char *)&loc_21AFCA3B4 + *((int *)qword_21AFCA618 + v0)))(v14);
  }
  v12 = OUTLINED_FUNCTION_277_0();
  OUTLINED_FUNCTION_78_5(v12, &demangling cache variable for type metadata for URL?);
LABEL_11:
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (!v11)
  {
LABEL_19:
    if ((objc_msgSend(*(id *)(v2 + 264), sel_isCancelled) & 1) == 0)
    {
      *(_QWORD *)(v2 + 280) = v4;
      v18 = (_QWORD *)OUTLINED_FUNCTION_14_57();
      *(_QWORD *)(v2 + 288) = v18;
      v19 = OUTLINED_FUNCTION_114_7(v18, (uint64_t)specialized MLTrainingSession.train(job:));
      return OUTLINED_FUNCTION_42_28(v19, v20, v21, v22);
    }
    goto LABEL_20;
  }
  if ((AnalyticsReporter.init()() & 1) == 0)
  {
    OUTLINED_FUNCTION_310();
    if (!v11)
      OUTLINED_FUNCTION_164_2();
  }
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_199_2(v16, &demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata);
  OUTLINED_FUNCTION_34_34();
  if (v1)
  {
    OUTLINED_FUNCTION_119_7();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_19();
    v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
    return OUTLINED_FUNCTION_62_23(v17);
  }
LABEL_20:
  OUTLINED_FUNCTION_70_22();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_120_8();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  uint64_t v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);

  OUTLINED_FUNCTION_172_0();
  v5 = OUTLINED_FUNCTION_102_7();
  if (v7)
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_66_24(v5, v6);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v7)
  {
LABEL_25:
    __break(1u);
    JUMPOUT(0x21AFCAD7CLL);
  }
  OUTLINED_FUNCTION_125_7();
  if (v8 != v7)
  {
    OUTLINED_FUNCTION_340();
    if (v8 != v7)
    {
      OUTLINED_FUNCTION_230_0();
      goto LABEL_11;
    }
    if ((*v3 & 1) == 0)
    {
      OUTLINED_FUNCTION_230_0();
      v4 = *(_QWORD *)(v2 + 280);
      goto LABEL_19;
    }
  }
  OUTLINED_FUNCTION_344();
  OUTLINED_FUNCTION_192_1(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_134_4();
  OUTLINED_FUNCTION_22_42();
  if (!v11)
  {
    OUTLINED_FUNCTION_86_10();
    OUTLINED_FUNCTION_204_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
    v14 = OUTLINED_FUNCTION_109_10(v13, (__n128)xmmword_21AFE7F70);
    return ((uint64_t (*)(__n128 *))((char *)&loc_21AFCAB18 + dword_21AFCAD7C[v0]))(v14);
  }
  v12 = OUTLINED_FUNCTION_277_0();
  OUTLINED_FUNCTION_78_5(v12, &demangling cache variable for type metadata for URL?);
LABEL_11:
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (!v11)
  {
LABEL_19:
    if ((objc_msgSend(*(id *)(v2 + 264), sel_isCancelled) & 1) == 0)
    {
      *(_QWORD *)(v2 + 280) = v4;
      v18 = (_QWORD *)OUTLINED_FUNCTION_14_57();
      *(_QWORD *)(v2 + 288) = v18;
      v19 = OUTLINED_FUNCTION_114_7(v18, (uint64_t)specialized MLTrainingSession.train(job:));
      return OUTLINED_FUNCTION_42_28(v19, v20, v21, v22);
    }
    goto LABEL_20;
  }
  if ((AnalyticsReporter.init()() & 1) == 0)
  {
    OUTLINED_FUNCTION_310();
    if (!v11)
      OUTLINED_FUNCTION_164_2();
  }
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_199_2(v16, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata);
  OUTLINED_FUNCTION_34_34();
  if (v1)
  {
    OUTLINED_FUNCTION_119_7();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_19();
    v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
    return OUTLINED_FUNCTION_62_23(v17);
  }
LABEL_20:
  OUTLINED_FUNCTION_70_22();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_120_8();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  uint64_t v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);

  OUTLINED_FUNCTION_172_0();
  v5 = OUTLINED_FUNCTION_102_7();
  if (v7)
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_66_24(v5, v6);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v7)
  {
LABEL_25:
    __break(1u);
    JUMPOUT(0x21AFCB4E0);
  }
  OUTLINED_FUNCTION_125_7();
  if (v8 != v7)
  {
    OUTLINED_FUNCTION_340();
    if (v8 != v7)
    {
      OUTLINED_FUNCTION_230_0();
      goto LABEL_11;
    }
    if ((*v3 & 1) == 0)
    {
      OUTLINED_FUNCTION_230_0();
      v4 = *(_QWORD *)(v2 + 280);
      goto LABEL_19;
    }
  }
  OUTLINED_FUNCTION_344();
  OUTLINED_FUNCTION_192_1(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_134_4();
  OUTLINED_FUNCTION_22_42();
  if (!v11)
  {
    OUTLINED_FUNCTION_86_10();
    OUTLINED_FUNCTION_204_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
    v14 = OUTLINED_FUNCTION_109_10(v13, (__n128)xmmword_21AFE7F70);
    return ((uint64_t (*)(__n128 *))((char *)&loc_21AFCB27C + *((int *)qword_21AFCB4E0 + v0)))(v14);
  }
  v12 = OUTLINED_FUNCTION_277_0();
  OUTLINED_FUNCTION_78_5(v12, &demangling cache variable for type metadata for URL?);
LABEL_11:
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (!v11)
  {
LABEL_19:
    if ((objc_msgSend(*(id *)(v2 + 264), sel_isCancelled) & 1) == 0)
    {
      *(_QWORD *)(v2 + 280) = v4;
      v18 = (_QWORD *)OUTLINED_FUNCTION_14_57();
      *(_QWORD *)(v2 + 288) = v18;
      v19 = OUTLINED_FUNCTION_114_7(v18, (uint64_t)specialized MLTrainingSession.train(job:));
      return OUTLINED_FUNCTION_42_28(v19, v20, v21, v22);
    }
    goto LABEL_20;
  }
  if ((AnalyticsReporter.init()() & 1) == 0)
  {
    OUTLINED_FUNCTION_310();
    if (!v11)
      OUTLINED_FUNCTION_164_2();
  }
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_199_2(v16, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata);
  OUTLINED_FUNCTION_34_34();
  if (v1)
  {
    OUTLINED_FUNCTION_119_7();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_19();
    v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
    return OUTLINED_FUNCTION_62_23(v17);
  }
LABEL_20:
  OUTLINED_FUNCTION_70_22();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_120_8();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  uint64_t v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);

  OUTLINED_FUNCTION_172_0();
  v5 = OUTLINED_FUNCTION_102_7();
  if (v7)
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_66_24(v5, v6);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v7)
  {
LABEL_25:
    __break(1u);
    JUMPOUT(0x21AFCBC44);
  }
  OUTLINED_FUNCTION_125_7();
  if (v8 != v7)
  {
    OUTLINED_FUNCTION_340();
    if (v8 != v7)
    {
      OUTLINED_FUNCTION_230_0();
      goto LABEL_11;
    }
    if ((*v3 & 1) == 0)
    {
      OUTLINED_FUNCTION_230_0();
      v4 = *(_QWORD *)(v2 + 280);
      goto LABEL_19;
    }
  }
  OUTLINED_FUNCTION_344();
  OUTLINED_FUNCTION_192_1(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_134_4();
  OUTLINED_FUNCTION_22_42();
  if (!v11)
  {
    OUTLINED_FUNCTION_86_10();
    OUTLINED_FUNCTION_204_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
    v14 = OUTLINED_FUNCTION_109_10(v13, (__n128)xmmword_21AFE7F70);
    return ((uint64_t (*)(__n128 *))((char *)&loc_21AFCB9E0 + dword_21AFCBC44[v0]))(v14);
  }
  v12 = OUTLINED_FUNCTION_277_0();
  OUTLINED_FUNCTION_78_5(v12, &demangling cache variable for type metadata for URL?);
LABEL_11:
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (!v11)
  {
LABEL_19:
    if ((objc_msgSend(*(id *)(v2 + 264), sel_isCancelled) & 1) == 0)
    {
      *(_QWORD *)(v2 + 280) = v4;
      v18 = (_QWORD *)OUTLINED_FUNCTION_14_57();
      *(_QWORD *)(v2 + 288) = v18;
      v19 = OUTLINED_FUNCTION_114_7(v18, (uint64_t)specialized MLTrainingSession.train(job:));
      return OUTLINED_FUNCTION_42_28(v19, v20, v21, v22);
    }
    goto LABEL_20;
  }
  if ((AnalyticsReporter.init()() & 1) == 0)
  {
    OUTLINED_FUNCTION_310();
    if (!v11)
      OUTLINED_FUNCTION_164_2();
  }
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_199_2(v16, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_34_34();
  if (v1)
  {
    OUTLINED_FUNCTION_119_7();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_19();
    v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
    return OUTLINED_FUNCTION_62_23(v17);
  }
LABEL_20:
  OUTLINED_FUNCTION_70_22();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_120_8();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  uint64_t v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);

  OUTLINED_FUNCTION_172_0();
  v5 = OUTLINED_FUNCTION_102_7();
  if (v7)
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_66_24(v5, v6);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v7)
  {
LABEL_25:
    __break(1u);
    JUMPOUT(0x21AFCC3A8);
  }
  OUTLINED_FUNCTION_125_7();
  if (v8 != v7)
  {
    OUTLINED_FUNCTION_340();
    if (v8 != v7)
    {
      OUTLINED_FUNCTION_230_0();
      goto LABEL_11;
    }
    if ((*v3 & 1) == 0)
    {
      OUTLINED_FUNCTION_230_0();
      v4 = *(_QWORD *)(v2 + 280);
      goto LABEL_19;
    }
  }
  OUTLINED_FUNCTION_344();
  OUTLINED_FUNCTION_192_1(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_134_4();
  OUTLINED_FUNCTION_22_42();
  if (!v11)
  {
    OUTLINED_FUNCTION_86_10();
    OUTLINED_FUNCTION_204_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
    v14 = OUTLINED_FUNCTION_109_10(v13, (__n128)xmmword_21AFE7F70);
    return ((uint64_t (*)(__n128 *))((char *)&loc_21AFCC144 + *((int *)qword_21AFCC3A8 + v0)))(v14);
  }
  v12 = OUTLINED_FUNCTION_277_0();
  OUTLINED_FUNCTION_78_5(v12, &demangling cache variable for type metadata for URL?);
LABEL_11:
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (!v11)
  {
LABEL_19:
    if ((objc_msgSend(*(id *)(v2 + 264), sel_isCancelled) & 1) == 0)
    {
      *(_QWORD *)(v2 + 280) = v4;
      v18 = (_QWORD *)OUTLINED_FUNCTION_14_57();
      *(_QWORD *)(v2 + 288) = v18;
      v19 = OUTLINED_FUNCTION_114_7(v18, (uint64_t)specialized MLTrainingSession.train(job:));
      return OUTLINED_FUNCTION_42_28(v19, v20, v21, v22);
    }
    goto LABEL_20;
  }
  if ((AnalyticsReporter.init()() & 1) == 0)
  {
    OUTLINED_FUNCTION_310();
    if (!v11)
      OUTLINED_FUNCTION_164_2();
  }
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_199_2(v16, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata);
  OUTLINED_FUNCTION_34_34();
  if (v1)
  {
    OUTLINED_FUNCTION_119_7();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_19();
    v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
    return OUTLINED_FUNCTION_62_23(v17);
  }
LABEL_20:
  OUTLINED_FUNCTION_70_22();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_120_8();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  uint64_t v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);

  OUTLINED_FUNCTION_172_0();
  v5 = OUTLINED_FUNCTION_102_7();
  if (v7)
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_66_24(v5, v6);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v7)
  {
LABEL_25:
    __break(1u);
    JUMPOUT(0x21AFCCB0CLL);
  }
  OUTLINED_FUNCTION_125_7();
  if (v8 != v7)
  {
    OUTLINED_FUNCTION_340();
    if (v8 != v7)
    {
      OUTLINED_FUNCTION_230_0();
      goto LABEL_11;
    }
    if ((*v3 & 1) == 0)
    {
      OUTLINED_FUNCTION_230_0();
      v4 = *(_QWORD *)(v2 + 280);
      goto LABEL_19;
    }
  }
  OUTLINED_FUNCTION_344();
  OUTLINED_FUNCTION_192_1(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_134_4();
  OUTLINED_FUNCTION_22_42();
  if (!v11)
  {
    OUTLINED_FUNCTION_86_10();
    OUTLINED_FUNCTION_204_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
    v14 = OUTLINED_FUNCTION_109_10(v13, (__n128)xmmword_21AFE7F70);
    return ((uint64_t (*)(__n128 *))((char *)&loc_21AFCC8A8 + dword_21AFCCB0C[v0]))(v14);
  }
  v12 = OUTLINED_FUNCTION_277_0();
  OUTLINED_FUNCTION_78_5(v12, &demangling cache variable for type metadata for URL?);
LABEL_11:
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (!v11)
  {
LABEL_19:
    if ((objc_msgSend(*(id *)(v2 + 264), sel_isCancelled) & 1) == 0)
    {
      *(_QWORD *)(v2 + 280) = v4;
      v18 = (_QWORD *)OUTLINED_FUNCTION_14_57();
      *(_QWORD *)(v2 + 288) = v18;
      v19 = OUTLINED_FUNCTION_114_7(v18, (uint64_t)specialized MLTrainingSession.train(job:));
      return OUTLINED_FUNCTION_42_28(v19, v20, v21, v22);
    }
    goto LABEL_20;
  }
  if ((AnalyticsReporter.init()() & 1) == 0)
  {
    OUTLINED_FUNCTION_310();
    if (!v11)
      OUTLINED_FUNCTION_164_2();
  }
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_199_2(v16, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata);
  OUTLINED_FUNCTION_34_34();
  if (v1)
  {
    OUTLINED_FUNCTION_119_7();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_19();
    v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
    return OUTLINED_FUNCTION_62_23(v17);
  }
LABEL_20:
  OUTLINED_FUNCTION_70_22();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_120_8();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  uint64_t v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);

  OUTLINED_FUNCTION_172_0();
  v5 = OUTLINED_FUNCTION_102_7();
  if (v7)
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_66_24(v5, v6);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v7)
  {
LABEL_25:
    __break(1u);
    JUMPOUT(0x21AFCD270);
  }
  OUTLINED_FUNCTION_125_7();
  if (v8 != v7)
  {
    OUTLINED_FUNCTION_340();
    if (v8 != v7)
    {
      OUTLINED_FUNCTION_230_0();
      goto LABEL_11;
    }
    if ((*v3 & 1) == 0)
    {
      OUTLINED_FUNCTION_230_0();
      v4 = *(_QWORD *)(v2 + 280);
      goto LABEL_19;
    }
  }
  OUTLINED_FUNCTION_344();
  OUTLINED_FUNCTION_192_1(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_134_4();
  OUTLINED_FUNCTION_22_42();
  if (!v11)
  {
    OUTLINED_FUNCTION_86_10();
    OUTLINED_FUNCTION_204_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
    v14 = OUTLINED_FUNCTION_109_10(v13, (__n128)xmmword_21AFE7F70);
    return ((uint64_t (*)(__n128 *))((char *)&loc_21AFCD00C + *((int *)qword_21AFCD270 + v0)))(v14);
  }
  v12 = OUTLINED_FUNCTION_277_0();
  OUTLINED_FUNCTION_78_5(v12, &demangling cache variable for type metadata for URL?);
LABEL_11:
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (!v11)
  {
LABEL_19:
    if ((objc_msgSend(*(id *)(v2 + 264), sel_isCancelled) & 1) == 0)
    {
      *(_QWORD *)(v2 + 280) = v4;
      v18 = (_QWORD *)OUTLINED_FUNCTION_14_57();
      *(_QWORD *)(v2 + 288) = v18;
      v19 = OUTLINED_FUNCTION_114_7(v18, (uint64_t)specialized MLTrainingSession.train(job:));
      return OUTLINED_FUNCTION_42_28(v19, v20, v21, v22);
    }
    goto LABEL_20;
  }
  if ((AnalyticsReporter.init()() & 1) == 0)
  {
    OUTLINED_FUNCTION_310();
    if (!v11)
      OUTLINED_FUNCTION_164_2();
  }
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_199_2(v16, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata);
  OUTLINED_FUNCTION_34_34();
  if (v1)
  {
    OUTLINED_FUNCTION_119_7();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_19();
    v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
    return OUTLINED_FUNCTION_62_23(v17);
  }
LABEL_20:
  OUTLINED_FUNCTION_70_22();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_120_8();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  uint64_t v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);

  OUTLINED_FUNCTION_172_0();
  v5 = OUTLINED_FUNCTION_102_7();
  if (v7)
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_66_24(v5, v6);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v7)
  {
LABEL_25:
    __break(1u);
    JUMPOUT(0x21AFCD9D4);
  }
  OUTLINED_FUNCTION_125_7();
  if (v8 != v7)
  {
    OUTLINED_FUNCTION_340();
    if (v8 != v7)
    {
      OUTLINED_FUNCTION_230_0();
      goto LABEL_11;
    }
    if ((*v3 & 1) == 0)
    {
      OUTLINED_FUNCTION_230_0();
      v4 = *(_QWORD *)(v2 + 280);
      goto LABEL_19;
    }
  }
  OUTLINED_FUNCTION_344();
  OUTLINED_FUNCTION_192_1(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_134_4();
  OUTLINED_FUNCTION_22_42();
  if (!v11)
  {
    OUTLINED_FUNCTION_86_10();
    OUTLINED_FUNCTION_204_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
    v14 = OUTLINED_FUNCTION_109_10(v13, (__n128)xmmword_21AFE7F70);
    return ((uint64_t (*)(__n128 *))((char *)&loc_21AFCD770 + dword_21AFCD9D4[v0]))(v14);
  }
  v12 = OUTLINED_FUNCTION_277_0();
  OUTLINED_FUNCTION_78_5(v12, &demangling cache variable for type metadata for URL?);
LABEL_11:
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (!v11)
  {
LABEL_19:
    if ((objc_msgSend(*(id *)(v2 + 264), sel_isCancelled) & 1) == 0)
    {
      *(_QWORD *)(v2 + 280) = v4;
      v18 = (_QWORD *)OUTLINED_FUNCTION_14_57();
      *(_QWORD *)(v2 + 288) = v18;
      v19 = OUTLINED_FUNCTION_114_7(v18, (uint64_t)specialized MLTrainingSession.train(job:));
      return OUTLINED_FUNCTION_42_28(v19, v20, v21, v22);
    }
    goto LABEL_20;
  }
  if ((AnalyticsReporter.init()() & 1) == 0)
  {
    OUTLINED_FUNCTION_310();
    if (!v11)
      OUTLINED_FUNCTION_164_2();
  }
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_199_2(v16, &demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata);
  OUTLINED_FUNCTION_34_34();
  if (v1)
  {
    OUTLINED_FUNCTION_119_7();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_19();
    v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
    return OUTLINED_FUNCTION_62_23(v17);
  }
LABEL_20:
  OUTLINED_FUNCTION_70_22();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_25_42(v2, v3, v4);
  if (v0)
  {
    OUTLINED_FUNCTION_120_8();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_75_11();
    OUTLINED_FUNCTION_58();
    return OUTLINED_FUNCTION_7_64(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_44_31();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  uint64_t v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);

  OUTLINED_FUNCTION_172_0();
  v5 = OUTLINED_FUNCTION_102_7();
  if (v7)
  {
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_66_24(v5, v6);
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
  OUTLINED_FUNCTION_213_1();
  if (v7)
  {
LABEL_25:
    __break(1u);
    JUMPOUT(0x21AFCE138);
  }
  OUTLINED_FUNCTION_125_7();
  if (v8 != v7)
  {
    OUTLINED_FUNCTION_340();
    if (v8 != v7)
    {
      OUTLINED_FUNCTION_230_0();
      goto LABEL_11;
    }
    if ((*v3 & 1) == 0)
    {
      OUTLINED_FUNCTION_230_0();
      v4 = *(_QWORD *)(v2 + 280);
      goto LABEL_19;
    }
  }
  OUTLINED_FUNCTION_344();
  OUTLINED_FUNCTION_192_1(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_134_4();
  OUTLINED_FUNCTION_22_42();
  if (!v11)
  {
    OUTLINED_FUNCTION_86_10();
    OUTLINED_FUNCTION_204_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v13 = (__n128 *)OUTLINED_FUNCTION_131_6();
    v14 = OUTLINED_FUNCTION_109_10(v13, (__n128)xmmword_21AFE7F70);
    return ((uint64_t (*)(__n128 *))((char *)&loc_21AFCDED4 + *((int *)qword_21AFCE138 + v0)))(v14);
  }
  v12 = OUTLINED_FUNCTION_277_0();
  OUTLINED_FUNCTION_78_5(v12, &demangling cache variable for type metadata for URL?);
LABEL_11:
  OUTLINED_FUNCTION_311();
  OUTLINED_FUNCTION_313();
  if (!v11)
  {
LABEL_19:
    if ((objc_msgSend(*(id *)(v2 + 264), sel_isCancelled) & 1) == 0)
    {
      *(_QWORD *)(v2 + 280) = v4;
      v18 = (_QWORD *)OUTLINED_FUNCTION_14_57();
      *(_QWORD *)(v2 + 288) = v18;
      v19 = OUTLINED_FUNCTION_114_7(v18, (uint64_t)specialized MLTrainingSession.train(job:));
      return OUTLINED_FUNCTION_42_28(v19, v20, v21, v22);
    }
    goto LABEL_20;
  }
  if ((AnalyticsReporter.init()() & 1) == 0)
  {
    OUTLINED_FUNCTION_310();
    if (!v11)
      OUTLINED_FUNCTION_164_2();
  }
  OUTLINED_FUNCTION_309();
  OUTLINED_FUNCTION_199_2(v16, &demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata);
  OUTLINED_FUNCTION_34_34();
  if (v1)
  {
    OUTLINED_FUNCTION_119_7();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_19();
    v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_329();
    return OUTLINED_FUNCTION_62_23(v17);
  }
LABEL_20:
  OUTLINED_FUNCTION_70_22();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v17 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_62_23(v17);
}

#error "21AFC81C4: call analysis failed (funcsize=117)"

#error "21AFC8998: call analysis failed (funcsize=117)"

#error "21AFC916C: call analysis failed (funcsize=117)"

#error "21AFC9940: call analysis failed (funcsize=117)"

#error "21AFCA114: call analysis failed (funcsize=118)"

#error "21AFCA878: call analysis failed (funcsize=118)"

#error "21AFCAFDC: call analysis failed (funcsize=118)"

#error "21AFCB740: call analysis failed (funcsize=118)"

#error "21AFCBEA4: call analysis failed (funcsize=118)"

#error "21AFCC608: call analysis failed (funcsize=118)"

#error "21AFCCD6C: call analysis failed (funcsize=118)"

#error "21AFCD4D0: call analysis failed (funcsize=118)"

#error "21AFCDC34: call analysis failed (funcsize=118)"

uint64_t specialized MLTrainingSession.evaluate(job:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

#error "21AFCE1A0: call analysis failed (funcsize=46)"

uint64_t specialized MLTrainingSession.evaluate(job:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_48_28(a1, a2);
  if (v3)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 120) = v2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

void specialized MLTrainingSession.evaluate(job:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_154_2();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_154_2();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_154_2();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_154_2();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_154_2();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_88_9();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_88_9();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_88_9();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_88_9();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_88_9();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_88_9();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_88_9();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_88_9();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  OUTLINED_FUNCTION_147_2();
  a22 = v27;
  a23 = v28;
  a21 = v25;
  OUTLINED_FUNCTION_104_10();
  if (v29)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_13();
    v30 = Dictionary.init(dictionaryLiteral:)();
    OUTLINED_FUNCTION_88_9();
    OUTLINED_FUNCTION_10_3();
    if (v26 == 1)
    {
      OUTLINED_FUNCTION_219_2();
      OUTLINED_FUNCTION_202_1(v31, &demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata);
      v32 = v23[4];
      __swift_project_boxed_opaque_existential_1(v23, v23[3]);
      a13 = v30;
      OUTLINED_FUNCTION_92_8((uint64_t)&a13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 40));
      if (v24)
      {
        v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_167_0();
LABEL_7:
        OUTLINED_FUNCTION_7_64(v33);
        return;
      }
LABEL_6:
      v33 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
      goto LABEL_7;
    }
    if ((objc_msgSend(*(id *)(v25 + 96), sel_isCancelled) & 1) != 0)
      goto LABEL_6;
    v34 = (_QWORD *)OUTLINED_FUNCTION_16_51();
    *(_QWORD *)(v25 + 104) = v34;
    v35 = OUTLINED_FUNCTION_116_8(v34, (uint64_t)specialized MLTrainingSession.evaluate(job:));
    OUTLINED_FUNCTION_10_57(v35, v36, v37, v38);
  }
}

#error "21AFCE3B4: call analysis failed (funcsize=46)"

#error "21AFCE5C8: call analysis failed (funcsize=46)"

#error "21AFCE7DC: call analysis failed (funcsize=46)"

#error "21AFCE9F0: call analysis failed (funcsize=46)"

#error "21AFCEC04: call analysis failed (funcsize=46)"

#error "21AFCEE18: call analysis failed (funcsize=46)"

#error "21AFCF02C: call analysis failed (funcsize=46)"

#error "21AFCF240: call analysis failed (funcsize=46)"

#error "21AFCF454: call analysis failed (funcsize=46)"

#error "21AFCF668: call analysis failed (funcsize=46)"

#error "21AFCF87C: call analysis failed (funcsize=46)"

#error "21AFCFA90: call analysis failed (funcsize=46)"

#error "21AFCFCA4: call analysis failed (funcsize=46)"

void specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  double v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  NSNumber v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[4];

  OUTLINED_FUNCTION_373();
  v25 = v4;
  v6 = v5;
  OUTLINED_FUNCTION_134_1();
  OUTLINED_FUNCTION_377();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_350();
  OUTLINED_FUNCTION_372();
  if ((v8 & 1) == 0 || !*(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress))
    __asm { BR              X10 }
  OUTLINED_FUNCTION_362();
  OUTLINED_FUNCTION_369();
  v9 = OUTLINED_FUNCTION_356();
  v10 = (void *)MEMORY[0x22075AB7C](v9, v3);
  if (one-time initialization token for elapsedTimeKey != -1)
    swift_once();
  OUTLINED_FUNCTION_231_1();

  LOBYTE(v26[0]) = v6;
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  if (one-time initialization token for phaseKey != -1)
    swift_once();
  OUTLINED_FUNCTION_231_1();
  OUTLINED_FUNCTION_368();
  v11.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  if (one-time initialization token for itemCountKey != -1)
    swift_once();
  OUTLINED_FUNCTION_231_1();

  if ((v2 & 1) != 0)
    goto LABEL_13;
  v11.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  if (one-time initialization token for totalItemCountKey != -1)
    goto LABEL_40;
  while (1)
  {
    OUTLINED_FUNCTION_231_1();

LABEL_13:
    OUTLINED_FUNCTION_353();
    v14 = v13 & v12;
    v16 = (unint64_t)(v15 + 63) >> 6;
    swift_bridgeObjectRetain();
    if (v14)
    {
      v17 = __clz(__rbit64(v14));
      goto LABEL_32;
    }
    if (v16 <= 1)
      break;
    v18 = v1[9];
    v19 = 1;
    if (v18)
      goto LABEL_31;
    v19 = 2;
    if (v16 <= 2)
      break;
    v18 = v1[10];
    if (v18)
      goto LABEL_31;
    v19 = 3;
    if (v16 <= 3)
      break;
    v18 = v1[11];
    if (v18)
      goto LABEL_31;
    v19 = 4;
    if (v16 <= 4)
      break;
    v18 = v1[12];
    if (v18)
      goto LABEL_31;
    v19 = 5;
    if (v16 <= 5)
      break;
    v18 = v1[13];
    if (v18)
      goto LABEL_31;
    v20 = 6;
    if (v16 <= 6)
      break;
    v18 = v1[14];
    if (v18)
    {
      v19 = 6;
LABEL_31:
      v17 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_32:
      v21 = *(unsigned __int8 *)(v1[6] + v17);
      if (v1[2])
      {
        v22 = OUTLINED_FUNCTION_371();
        if ((v23 & 1) != 0)
        {
          OUTLINED_FUNCTION_361(v22);
          __swift_project_boxed_opaque_existential_1(v26, v26[3]);
          _bridgeAnythingToObjectiveC<A>(_:)();
          OUTLINED_FUNCTION_376();
        }
      }
      __asm { BR              X8 }
    }
    while (1)
    {
      v19 = v20 + 1;
      if (__OFADD__(v20, 1))
        break;
      if (v19 >= v16)
        goto LABEL_36;
      v18 = v1[v19 + 8];
      ++v20;
      if (v18)
        goto LABEL_31;
    }
    __break(1u);
LABEL_40:
    swift_once();
  }
LABEL_36:
  OUTLINED_FUNCTION_81();
  v24 = *(void **)(v0 + direct field offset for MLJob.phaseProgress);
  if (v24)
    objc_msgSend(v24, sel_setCompletedUnitCount_, v25);
  OUTLINED_FUNCTION_8_31();
}

{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  double v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  NSNumber v11;
  NSNumber v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[4];

  OUTLINED_FUNCTION_373();
  v26 = v4;
  v6 = v5;
  OUTLINED_FUNCTION_134_1();
  OUTLINED_FUNCTION_377();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_350();
  OUTLINED_FUNCTION_372();
  if ((v8 & 1) == 0 || !*(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress))
    __asm { BR              X10 }
  OUTLINED_FUNCTION_362();
  OUTLINED_FUNCTION_369();
  v9 = OUTLINED_FUNCTION_356();
  v10 = (void *)MEMORY[0x22075AB7C](v9, v3);
  if (one-time initialization token for elapsedTimeKey != -1)
    swift_once();
  OUTLINED_FUNCTION_231_1();

  LOBYTE(v27[0]) = v6;
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  if (one-time initialization token for phaseKey != -1)
    swift_once();
  OUTLINED_FUNCTION_231_1();
  OUTLINED_FUNCTION_368();
  v11.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  if (one-time initialization token for itemCountKey != -1)
    swift_once();
  OUTLINED_FUNCTION_231_1();

  if ((v2 & 1) == 0)
  {
    v12.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
    if (one-time initialization token for totalItemCountKey != -1)
      swift_once();
    OUTLINED_FUNCTION_231_1();

  }
  OUTLINED_FUNCTION_353();
  v15 = v14 & v13;
  v17 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v15)
  {
    v18 = __clz(__rbit64(v15));
    goto LABEL_35;
  }
  if (v17 > 1)
  {
    v19 = v1[9];
    v20 = 1;
    if (v19)
      goto LABEL_34;
    v20 = 2;
    if (v17 <= 2)
      goto LABEL_39;
    v19 = v1[10];
    if (v19)
      goto LABEL_34;
    v20 = 3;
    if (v17 <= 3)
      goto LABEL_39;
    v19 = v1[11];
    if (v19)
      goto LABEL_34;
    v20 = 4;
    if (v17 <= 4)
      goto LABEL_39;
    v19 = v1[12];
    if (v19)
      goto LABEL_34;
    v20 = 5;
    if (v17 <= 5)
      goto LABEL_39;
    v19 = v1[13];
    if (v19)
      goto LABEL_34;
    v20 = 6;
    if (v17 <= 6)
      goto LABEL_39;
    v19 = v1[14];
    if (v19)
    {
LABEL_34:
      v18 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_35:
      v22 = *(unsigned __int8 *)(v1[6] + v18);
      if (v1[2])
      {
        v23 = OUTLINED_FUNCTION_371();
        if ((v24 & 1) != 0)
        {
          OUTLINED_FUNCTION_361(v23);
          __swift_project_boxed_opaque_existential_1(v27, v27[3]);
          _bridgeAnythingToObjectiveC<A>(_:)();
          OUTLINED_FUNCTION_376();
        }
      }
      __asm { BR              X8 }
    }
    v21 = 7;
    if (v17 > 7)
    {
      v19 = v1[15];
      if (v19)
      {
        v20 = 7;
        goto LABEL_34;
      }
      while (1)
      {
        v20 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
          __break(1u);
          JUMPOUT(0x21AFD0C8CLL);
        }
        if (v20 >= v17)
          break;
        v19 = v1[v20 + 8];
        ++v21;
        if (v19)
          goto LABEL_34;
      }
    }
  }
LABEL_39:
  OUTLINED_FUNCTION_81();
  v25 = *(void **)(v0 + direct field offset for MLJob.phaseProgress);
  if (v25)
    objc_msgSend(v25, sel_setCompletedUnitCount_, v26);
  OUTLINED_FUNCTION_8_31();
}

void specialized MLTrainingSession.saveFeatureExtractionCheckpoint(to:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[8];

  v60 = a3;
  v65 = a4;
  v71[6] = *MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v64 = v8;
  v9 = type metadata accessor for Date();
  v62 = *(_QWORD *)(v9 - 8);
  v63 = v9;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v61 = v11;
  v12 = type metadata accessor for URL();
  v68 = *(_QWORD *)(v12 - 8);
  v69 = v12;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v67 = v14;
  v66 = type metadata accessor for MLCheckpoint();
  v59 = *(_QWORD *)(v66 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  v58 = (uint64_t)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v53 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v53 - v21;
  v23 = *(_QWORD *)(v4 + direct field offset for MLTrainingSession.delegate + 24);
  v24 = *(_QWORD *)(v4 + direct field offset for MLTrainingSession.delegate + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v4 + direct field offset for MLTrainingSession.delegate), v23);
  v25 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 112);
  swift_beginAccess();
  v26 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v27 = *(int *)(v26 + 32);
  LOBYTE(v71[0]) = *(_BYTE *)(v25 + *(int *)(v26 + 28));
  v28 = v70;
  v29 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 72))(a1, v71, *(_QWORD *)(v25 + v27), v23, v24);
  if (!v28)
  {
    v30 = (uint64_t)v19;
    v31 = v67;
    v57 = v26;
    v56 = v22;
    v32 = (int *)v66;
    v70 = v4;
    if ((v29 & 1) != 0)
    {
      v55 = 0;
      v33 = v68;
      v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16);
      v35 = a1;
      v36 = v69;
      v34(v67, v35, v69);
      v37 = *(_BYTE *)(v25 + *(int *)(v57 + 28));
      v53 = *(_QWORD *)(v25 + *(int *)(v57 + 32));
      lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
      v54 = Dictionary.init(dictionaryLiteral:)();
      v34(v30, v31, v36);
      *(_BYTE *)(v30 + v32[5]) = v37;
      v38 = (uint64_t)v32;
      *(_QWORD *)(v30 + v32[6]) = v53;
      v39 = v61;
      Date.init()();
      v40 = v31;
      v41 = v25;
      v42 = v57;
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v40, v36);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v30 + v32[7], v39, v63);
      *(_QWORD *)(v30 + v32[8]) = v54;
      v43 = (uint64_t)v56;
      outlined init with take of MLCheckpoint(v30, (uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      v44 = v64;
      specialized BidirectionalCollection.last.getter(*(_QWORD *)(v41 + *(int *)(v42 + 44)), v64);
      if (__swift_getEnumTagSinglePayload(v44, 1, (uint64_t)v32) != 1)
      {
        outlined init with take of MLCheckpoint(v44, v58, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
        OUTLINED_FUNCTION_91_0();
        __asm { BR              X10 }
      }
      outlined destroy of URL?(v44, &demangling cache variable for type metadata for MLCheckpoint?);
      v45 = v55;
      OUTLINED_FUNCTION_355();
      v49 = (uint64_t *)(v41 + *(int *)(v42 + 44));
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v50 = *(_QWORD *)(*v49 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v50);
      v51 = *v49;
      *(_QWORD *)(v51 + 16) = v50 + 1;
      outlined init with copy of MLCheckpoint(v43, v51+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v50, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      v52 = swift_endAccess();
      v60(v52);
      if (v45)
      {
        outlined destroy of MLHandPoseClassifier.ModelParameters(v43, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
        return;
      }
      v47 = v65;
      outlined init with take of MLCheckpoint(v43, v65, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      v46 = 0;
    }
    else
    {
      v46 = 1;
      v47 = v65;
      v38 = v66;
    }
    __swift_storeEnumTagSinglePayload(v47, v46, 1, v38);
  }
}

uint64_t MLJob.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + direct field offset for MLJob.startDate;
  v4 = OUTLINED_FUNCTION_134_1();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id MLJob.progress.getter()
{
  uint64_t v0;

  return *(id *)(v0 + direct field offset for MLJob.progress);
}

void MLJob.checkpoints.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type PassthroughSubject<MLCheckpoint, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>, MEMORY[0x24BDB9CB0]);
  OUTLINED_FUNCTION_364();
  OUTLINED_FUNCTION_27_0();
}

uint64_t MLJob.result.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Connectable;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v1 = type metadata accessor for PassthroughSubject();
  MEMORY[0x22075B938](MEMORY[0x24BDB9CB0], v1);
  Connectable = type metadata accessor for Publishers.MakeConnectable();
  v3 = *(_QWORD *)(Connectable - 8);
  MEMORY[0x24BDAC7A8](Connectable);
  v5 = (char *)&v10 - v4;
  v11 = *(_QWORD *)(v0 + 24);
  swift_retain();
  Publishers.MakeConnectable.init(upstream:)();
  MEMORY[0x22075B938](MEMORY[0x24BDB9630], Connectable);
  v6 = ConnectablePublisher.autoconnect()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, Connectable);
  v11 = v6;
  v7 = type metadata accessor for Publishers.Autoconnect();
  MEMORY[0x22075B938](MEMORY[0x24BDB9510], v7);
  v8 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v8;
}

void MLJob.phase.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type CurrentValueSubject<MLPhase, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>, MEMORY[0x24BDB9D10]);
  OUTLINED_FUNCTION_364();
  OUTLINED_FUNCTION_27_0();
}

uint64_t specialized MLJob.currentPhase.setter()
{
  return CurrentValueSubject.value.setter();
}

Swift::Void __swiftcall MLJob.cancel()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + direct field offset for MLJob.progress), sel_cancel);
}

void specialized MLJob.init(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLHandPoseClassifier, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:), v6, (uint64_t)&unk_24DE264C0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLRandomForestRegressor, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLRandomForestRegressor.resume(_:), v6, (uint64_t)&unk_24DE26470, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLStyleTransfer, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLStyleTransfer.resume(_:), v6, (uint64_t)&unk_24DE26420, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLLogisticRegressionClassifier, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLLogisticRegressionClassifier.resume(_:), v6, (uint64_t)&unk_24DE263D0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLDecisionTreeRegressor, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLDecisionTreeRegressor.resume(_:), v6, (uint64_t)&unk_24DE26380, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLHandActionClassifier, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLHandActionClassifier.resume(_:), v6, (uint64_t)&unk_24DE26330, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLRandomForestClassifier, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLRandomForestClassifier.resume(_:), v6, (uint64_t)&unk_24DE262E0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLBoostedTreeRegressor, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLBoostedTreeRegressor.resume(_:), v6, (uint64_t)&unk_24DE26290, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLDecisionTreeClassifier, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLDecisionTreeClassifier.resume(_:), v6, (uint64_t)&unk_24DE26240, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLSoundClassifier, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLSoundClassifier.resume(_:), v6, (uint64_t)&unk_24DE261F0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLBoostedTreeClassifier, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLBoostedTreeClassifier.resume(_:), v6, (uint64_t)&unk_24DE26150, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLLinearRegressor, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLLinearRegressor.resume(_:), v6, (uint64_t)&unk_24DE26100, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v1 = direct field offset for MLJob.progress;
  v2 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_302(v2, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v0 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLImageClassifier, Error>);
  OUTLINED_FUNCTION_15_1();
  v3 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_207_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_149_3(v4, (uint64_t)partial apply for specialized closure #1 in MLJob.init(_:));
  v5 = OUTLINED_FUNCTION_23_22();
  OUTLINED_FUNCTION_173_2(v5, (uint64_t)partial apply for closure #1 in closure #1 in static MLImageClassifier.resume(_:), v6, (uint64_t)&unk_24DE260B0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_27_0();
}

uint64_t specialized MLJob.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_303();
  v6 = direct field offset for MLJob.progress;
  v7 = (void *)objc_opt_self();
  *(_QWORD *)(v3 + v6) = OUTLINED_FUNCTION_302(v7, sel_progressWithTotalUnitCount_);
  *(_QWORD *)(v3 + direct field offset for MLJob.phaseProgress) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLCheckpoint, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v3 + 16) = OUTLINED_FUNCTION_190_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<MLSoundClassifier.DataSource, Error>);
  OUTLINED_FUNCTION_15_1();
  v8 = OUTLINED_FUNCTION_190_2();
  OUTLINED_FUNCTION_322(v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<MLPhase, Never>);
  OUTLINED_FUNCTION_15_1();
  *(_QWORD *)(v3 + 32) = OUTLINED_FUNCTION_207_2();
  v9 = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v9 + 16) = v4;
  v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v9 + 40) = v10;
  *(_BYTE *)(v9 + 56) = *(_BYTE *)(a3 + 32);
  *(_QWORD *)(v9 + 64) = partial apply for specialized closure #1 in MLJob.init(_:);
  *(_QWORD *)(v9 + 72) = v3;
  swift_retain_n();
  OUTLINED_FUNCTION_23_22();
  specialized MLTrainingSession.resume(job:completion:)(v3, (uint64_t)partial apply for closure #1 in closure #1 in static MLSoundClassifier.extractFeatures(trainingData:parameters:sessionParameters:), v9, (uint64_t)&unk_24DE261A0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:));
  OUTLINED_FUNCTION_206_3();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  swift_release();
  return v3;
}

void specialized closure #1 in MLJob.init(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  id v13;
  uint64_t v14;
  id v15;

  v7 = a3(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - v8;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (id *)((char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TaskPriority?(a1, (uint64_t)v12, a4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = *v12;
    v13 = v15;
    PassthroughSubject.send(completion:)();
    OUTLINED_FUNCTION_366();
    OUTLINED_FUNCTION_366();
  }
  else
  {
    OUTLINED_FUNCTION_291((uint64_t)v12, (uint64_t)v9);
    PassthroughSubject.send(_:)();
    v15 = 0;
    PassthroughSubject.send(completion:)();
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v9, a3);
  }
}

void MLJob.deinit()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_375();
  swift_release();
  OUTLINED_FUNCTION_374();
  v1 = OUTLINED_FUNCTION_134_1();
  OUTLINED_FUNCTION_11_1(v1);

  OUTLINED_FUNCTION_22();
}

uint64_t MLJob.__deallocating_deinit()
{
  MLJob.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for Cancellable.cancel() in conformance MLJob<A>()
{
  MLJob.cancel()();
}

uint64_t type metadata completion function for MLJob()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for MLJob(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLJob);
}

uint64_t method lookup function for MLJob()
{
  return swift_lookUpClassMethod();
}

void partial apply for specialized closure #1 in MLJob.init(_:)(uint64_t a1)
{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier, &demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLLinearRegressor, &demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeClassifier, &demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource, &demangling cache variable for type metadata for Result<MLSoundClassifier.DataSource, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier, &demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeClassifier, &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLBoostedTreeRegressor, &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestClassifier, &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier, &demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeRegressor, &demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier, &demangling cache variable for type metadata for Result<MLLogisticRegressionClassifier, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, type metadata accessor for MLStyleTransfer, &demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestRegressor, &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
}

{
  uint64_t v1;

  specialized closure #1 in MLJob.init(_:)(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier, &demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in static MLImageClassifier.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in static MLImageClassifier.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t partial apply for specialized closure #1 in MLTrainingSession.resume(job:completion:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in MLTrainingSession.resume(job:completion:)(v2, v3, v4, v5, v6, v7, v8);
}

void outlined init with copy of MLCheckpoint(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_166(a1, a2, a3);
  OUTLINED_FUNCTION_19_2(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  OUTLINED_FUNCTION_22();
}

uint64_t outlined assign with copy of MLCheckpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLCheckpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in closure #1 in static MLLinearRegressor.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static MLLinearRegressor.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

void partial apply for closure #1 in closure #1 in static MLBoostedTreeClassifier.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static MLBoostedTreeClassifier.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_21AFD28D4()
{
  OUTLINED_FUNCTION_375();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in static MLSoundClassifier.extractFeatures(trainingData:parameters:sessionParameters:)()
{
  closure #1 in closure #1 in static MLSoundClassifier.extractFeatures(trainingData:parameters:sessionParameters:)();
}

void partial apply for closure #1 in closure #1 in static MLSoundClassifier.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static MLSoundClassifier.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

void partial apply for closure #1 in closure #1 in static MLDecisionTreeClassifier.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static MLDecisionTreeClassifier.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

void partial apply for closure #1 in closure #1 in static MLBoostedTreeRegressor.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static MLBoostedTreeRegressor.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

void partial apply for closure #1 in closure #1 in static MLRandomForestClassifier.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static MLRandomForestClassifier.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

void partial apply for closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

void partial apply for closure #1 in closure #1 in static MLDecisionTreeRegressor.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static MLDecisionTreeRegressor.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

void partial apply for closure #1 in closure #1 in static MLLogisticRegressionClassifier.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static MLLogisticRegressionClassifier.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24));
}

void partial apply for closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  closure #1 in closure #1 in static MLStyleTransfer.resume(_:)();
}

void partial apply for closure #1 in closure #1 in static MLRandomForestRegressor.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static MLRandomForestRegressor.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t objectdestroyTm_7()
{
  OUTLINED_FUNCTION_375();
  OUTLINED_FUNCTION_374();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(void *a1, char a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD *))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t objectdestroy_2Tm()
{
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_374();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_19_2(a2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  OUTLINED_FUNCTION_22();
}

void outlined init with take of MLCheckpoint(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_166(a1, a2, a3);
  OUTLINED_FUNCTION_19_2(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  OUTLINED_FUNCTION_22();
}

void closure #1 in BidirectionalCollection.last(where:)specialized partial apply(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  partial apply for specialized closure #1 in BidirectionalCollection.last(where:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_0_79@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 40);
}

uint64_t OUTLINED_FUNCTION_1_68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = v2;
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  *(_BYTE *)(v0 + 128) = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(v6, v3, v4);
}

uint64_t OUTLINED_FUNCTION_2_69()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_4_65(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_6_70()
{
  return 0x696C616974696E69;
}

uint64_t OUTLINED_FUNCTION_7_64(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_8_66(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_10_57(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_11_60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  a15 = *(_BYTE *)(v18 + *(int *)(v15 + 28));
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 32))(&a15, v16, v17);
}

uint64_t OUTLINED_FUNCTION_14_57()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 88) + *(_QWORD *)(v0 + 248));
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_15_47@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t OUTLINED_FUNCTION_16_51()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 48) + *(_QWORD *)(v0 + 56));
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_17_40()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 48) + *(_QWORD *)(v0 + 56));
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_18_45@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = a1;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + a1), *(_QWORD *)(v2 + a1 + 24));
  *(_QWORD *)(v1 + 64) = *(_QWORD *)(*(_QWORD *)v2 + 112);
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_20_46()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_21_43()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_22_42()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_23_46()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  *(_BYTE *)(v2 + 128) = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(v0, v3, v4);
}

uint64_t OUTLINED_FUNCTION_24_48()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[24] + 16))(v0[25], v0[26], v0[23]);
}

uint64_t OUTLINED_FUNCTION_25_42(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *v4;
  *(_QWORD *)(v5 - 8) = *v4;
  *(_QWORD *)(v5 - 8) = *v4;
  *(_QWORD *)(v6 + 296) = a1;
  *(_QWORD *)(v6 + 304) = a2;
  *(_BYTE *)(v6 + 322) = a3;
  *(_QWORD *)(v6 + 312) = v3;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_27_50()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_28_40()
{
  return 0x61756C617665;
}

uint64_t OUTLINED_FUNCTION_29_37()
{
  return 0x636172747865;
}

uint64_t OUTLINED_FUNCTION_30_38()
{
  return swift_bridgeObjectRetain();
}

_QWORD *OUTLINED_FUNCTION_31_37(_QWORD *(*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *v5;

  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5(a1, v4, a4, v5);
}

uint64_t OUTLINED_FUNCTION_32_30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v15 + 72) = a1;
  a14 = *(_BYTE *)(v17 + *(int *)(a1 + 28));
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 32))(&a14, v14, v16);
}

uint64_t OUTLINED_FUNCTION_33_36(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *v3;
  *(_QWORD *)(v4 - 8) = *v3;
  *(_QWORD *)(v4 - 8) = *v3;
  *(_BYTE *)(v5 + 265) = a2;
  *(_QWORD *)(v5 + 248) = a1;
  *(_QWORD *)(v5 + 256) = v2;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_34_34()
{
  _QWORD *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v0[3];
  v4 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v3);
  *(_BYTE *)(v2 - 81) = v1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40))(v2 - 81, v3, v4);
}

uint64_t OUTLINED_FUNCTION_36_35()
{
  uint64_t *v0;

  return specialized MLTrainingSession.transition(to:)(1, v0);
}

id OUTLINED_FUNCTION_37_23@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(*(id *)(*(_QWORD *)(v1 + 40) + a1), (SEL)(v2 + 2888));
}

uint64_t OUTLINED_FUNCTION_41_30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v24 = v23[3];
  v25 = v23[4];
  __swift_project_boxed_opaque_existential_1(v23, v24);
  *(_BYTE *)(v20 + 320) = *(_BYTE *)(v19 + *(int *)(v21 + 28));
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 72))(v22, a19, *(_QWORD *)(v19 + *(int *)(v21 + 32)), v24, v25);
}

uint64_t OUTLINED_FUNCTION_42_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_44_31()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_45_31()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 232) = *(_QWORD *)(**(_QWORD **)(v0 + 88) + 112);
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_46_29()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 176) = *(_QWORD *)(**(_QWORD **)(v0 + 64) + 112);
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_47_32()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_48_28(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v5 = *v3;
  v6 = (uint64_t *)(v4 - 8);
  *v6 = *v3;
  *v6 = *v3;
  *(_BYTE *)(v5 + 129) = a2;
  *(_QWORD *)(v5 + 112) = v2;
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_49_27(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + a1) = v1;
}

uint64_t OUTLINED_FUNCTION_50_29@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 24));
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_51_32@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + a1 + 24);
  v3 = *(_QWORD *)(v1 + a1 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + a1), v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
}

uint64_t OUTLINED_FUNCTION_57_25()
{
  uint64_t *v0;

  return specialized MLTrainingSession.transition(to:)(1, v0);
}

uint64_t OUTLINED_FUNCTION_58_18()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

void OUTLINED_FUNCTION_60_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of MLCheckpoint(v4 + *(_QWORD *)(v0 + 72) * v1, v3, v2);
}

unint64_t OUTLINED_FUNCTION_63_21()
{
  return lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
}

uint64_t OUTLINED_FUNCTION_64_20()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_65_22()
{
  return 0x696C616974696E69;
}

uint64_t OUTLINED_FUNCTION_66_24@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + a2) = result;
  return result;
}

__n128 *OUTLINED_FUNCTION_69_16(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_70_22()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_71_18()
{
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
}

void OUTLINED_FUNCTION_75_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t (*v15)(_QWORD);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *v16;
  *(_QWORD *)(v19 + 16) = v17 + 1;
  outlined init with copy of MLCheckpoint(v18, v19+ ((*(unsigned __int8 *)(a15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(a15 + 80))+ *(_QWORD *)(a15 + 72) * v17, v15);
}

uint64_t OUTLINED_FUNCTION_76_14()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t OUTLINED_FUNCTION_77_16(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_BYTE *)(v2 + 128) = a2;
  return lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
}

uint64_t OUTLINED_FUNCTION_78_14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_79_14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 120) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_80_15()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 104) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_81_18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_82_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + v1) = v2;
}

uint64_t OUTLINED_FUNCTION_83_15(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 240) = result;
  *(_QWORD *)(v1 + 64) = *(_QWORD *)(v2 + *(int *)(result + 44));
  return result;
}

uint64_t OUTLINED_FUNCTION_84_13(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 184) = result;
  *(_QWORD *)(v1 + 40) = *(_QWORD *)(v2 + *(int *)(result + 44));
  return result;
}

uint64_t OUTLINED_FUNCTION_86_10()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[24] + 32))(v0[27], v0[20], v0[23]);
}

uint64_t OUTLINED_FUNCTION_87_8()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_88_9()
{
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
}

uint64_t OUTLINED_FUNCTION_92_8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_94_10(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
}

uint64_t OUTLINED_FUNCTION_96_12@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 72))(v14, a12, *(_QWORD *)(v12 + a1), v13, v15);
}

void OUTLINED_FUNCTION_97_8(Swift::Double a1)
{
  CreateML::ModelType v1;
  Swift::String v2;

  v2._countAndFlagsBits = 0x676E696E69617254;
  v2._object = (void *)0xE800000000000000;
  AnalyticsReporter.reportEventDuration(model:task:startTime:)(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_98_9()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 - 8);
  *v2 = *v0;
  *v2 = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_101_12()
{
  return 0x636E657265666E69;
}

uint64_t OUTLINED_FUNCTION_102_7()
{
  _QWORD *v0;

  return *(_QWORD *)(v0[11] + v0[29] + *(int *)(v0[30] + 32)) + v0[37];
}

uint64_t OUTLINED_FUNCTION_106_9()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[19] + 16))(v0[20], v0[21], v0[18]);
}

uint64_t OUTLINED_FUNCTION_107_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  __swift_getEnumTagSinglePayload(v11, 1, a10);
  return *(_QWORD *)(v10 + 168);
}

uint64_t OUTLINED_FUNCTION_108_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  __swift_getEnumTagSinglePayload(v11, 1, a10);
  return *(_QWORD *)(v10 + 224);
}

__n128 *OUTLINED_FUNCTION_109_10(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_110_7()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64) + *(_QWORD *)(v0 + 224);
}

uint64_t OUTLINED_FUNCTION_111_8()
{
  return String.init(format:_:)();
}

uint64_t OUTLINED_FUNCTION_112_9()
{
  return String.init(format:_:)();
}

uint64_t OUTLINED_FUNCTION_114_7@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t OUTLINED_FUNCTION_115_8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t OUTLINED_FUNCTION_116_8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

void OUTLINED_FUNCTION_117_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v0 + *(int *)(v3 + 28)) = *(_BYTE *)(v1 + *(int *)(v2 + 20));
}

uint64_t OUTLINED_FUNCTION_118_6()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(v1 + 64) + v0;
}

uint64_t OUTLINED_FUNCTION_119_7()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_120_8()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_121_9()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[17] + 32))(v0[19], v0[13], v0[16]);
}

uint64_t OUTLINED_FUNCTION_122_6()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v3, v1, v2);
}

uint64_t OUTLINED_FUNCTION_125_7()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88) + *(_QWORD *)(v0 + 272);
}

void OUTLINED_FUNCTION_129_4()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, v0);
}

uint64_t OUTLINED_FUNCTION_130_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_131_6()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_132_3()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t OUTLINED_FUNCTION_134_4()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of URL?(v0, v1);
}

void OUTLINED_FUNCTION_135_1()
{
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
}

uint64_t OUTLINED_FUNCTION_136_4()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_137_4(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
}

uint64_t OUTLINED_FUNCTION_140_3(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 16) = v1;
  return result;
}

void OUTLINED_FUNCTION_141_2(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  specialized MLTrainingSession.saveFeatureExtractionCheckpoint(to:)(v10, a2, a3, a10);
}

uint64_t OUTLINED_FUNCTION_143_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return specialized BidirectionalCollection.last.getter(*(_QWORD *)(v1 + *(int *)(a1 + 44)), v2);
}

uint64_t OUTLINED_FUNCTION_144_4()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(v1 + 88) + v0;
}

uint64_t OUTLINED_FUNCTION_145_4()
{
  return 0x676E696E69617274;
}

uint64_t OUTLINED_FUNCTION_148_3()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + *(int *)(v2 + 20)) = v1;
  *(_QWORD *)(v3 + *(int *)(v2 + 24)) = v0;
  return Date.init()();
}

uint64_t OUTLINED_FUNCTION_149_3@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  a1[2] = v3;
  a1[3] = a2;
  a1[4] = v2;
  return swift_retain_n();
}

void OUTLINED_FUNCTION_150_3()
{
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
}

void OUTLINED_FUNCTION_151_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t (*v15)(_QWORD);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *v16;
  *(_QWORD *)(v19 + 16) = v17 + 1;
  outlined init with copy of MLCheckpoint(v18, v19+ ((*(unsigned __int8 *)(a15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(a15 + 80))+ *(_QWORD *)(a15 + 72) * v17, v15);
}

uint64_t OUTLINED_FUNCTION_153_2()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_154_2()
{
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
}

uint64_t OUTLINED_FUNCTION_158_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_159_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_160_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a10 + 32))(v13 + *(int *)(v12 + 28), v11, a11);
}

uint64_t OUTLINED_FUNCTION_161_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_163_1()
{
  uint64_t v0;

  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(*(_QWORD *)v0 + 16));
}

void OUTLINED_FUNCTION_164_2()
{
  uint64_t v0;

  AnalyticsReporter.reportTemplateUsed(model:mode:)(v0, 0);
}

id OUTLINED_FUNCTION_165_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(*(id *)(*(_QWORD *)(v1 + 40) + a1), (SEL)(v2 + 2888));
}

uint64_t OUTLINED_FUNCTION_166_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_167_2()
{
  return PassthroughSubject.send(_:)();
}

uint64_t OUTLINED_FUNCTION_168_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a10 + 32))(a1, v11, a11);
}

uint64_t OUTLINED_FUNCTION_173_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  return specialized MLTrainingSession.resume(job:completion:)(v5, a2, v6, a4, a5);
}

uint64_t OUTLINED_FUNCTION_174_2()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[18], v0[16]);
}

uint64_t OUTLINED_FUNCTION_175_2()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[18], v0[16]);
}

uint64_t OUTLINED_FUNCTION_176_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

__n128 *OUTLINED_FUNCTION_179_2(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_181_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_182_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_183_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_184_1()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v3, v0);
}

uint64_t OUTLINED_FUNCTION_186_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_190_2()
{
  return PassthroughSubject.init()();
}

uint64_t OUTLINED_FUNCTION_191_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_192_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with copy of MLCheckpoint(a1, v3, a3);
}

void OUTLINED_FUNCTION_193_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, a2);
}

uint64_t OUTLINED_FUNCTION_199_2(uint64_t a1, uint64_t *a2)
{
  return specialized MLTrainingSession.transition(to:)(3, a2);
}

uint64_t OUTLINED_FUNCTION_200_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_201_1()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t OUTLINED_FUNCTION_202_1(uint64_t a1, uint64_t *a2)
{
  return specialized MLTrainingSession.transition(to:)(4, a2);
}

uint64_t OUTLINED_FUNCTION_203_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_205_2(uint64_t a1, uint64_t *a2)
{
  return specialized MLTrainingSession.transition(to:)(2, a2);
}

uint64_t OUTLINED_FUNCTION_206_3()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_207_2()
{
  return CurrentValueSubject.init(_:)();
}

uint64_t OUTLINED_FUNCTION_211_1()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t OUTLINED_FUNCTION_212_1()
{
  return Date.init()();
}

uint64_t OUTLINED_FUNCTION_215_2(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0x6974000000000000;
}

uint64_t OUTLINED_FUNCTION_218_2@<X0>(uint64_t a1@<X8>)
{
  return a1 + *(_QWORD *)(*(_QWORD *)a1 + 112);
}

void OUTLINED_FUNCTION_221_1()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  outlined init with take of MLCheckpoint(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_222_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_223_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_224_0()
{
  specialized MLJob.reportProgress(completedUnitCount:phase:phaseUnitCount:metrics:)();
}

void OUTLINED_FUNCTION_225_1()
{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

void OUTLINED_FUNCTION_226_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with take of MLCheckpoint(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_230_0()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_231_1()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  return objc_msgSend(v2, (SEL)(v0 + 100), v1);
}

uint64_t OUTLINED_FUNCTION_232_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_233()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_235_1(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_236_0(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_237_0(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_238_1(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_239_0(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_240_0(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_241_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_242_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_243_0(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_244_0(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_245_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_246_0(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_247_0(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_248_0(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_249_0(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_250_0(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_251_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_252_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_253_0(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_254_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_255_0(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_256_0(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_257(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_258_0(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_259_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_260(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_261_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_262(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_263(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_264_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_265_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_266(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_267_0(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_268_0(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_269_0(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_270(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_271_0(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_272_0(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_273_0(uint64_t a1)
{
  return specialized MLTrainingSession.extractFeatures(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_274_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_275(uint64_t a1)
{
  return specialized MLTrainingSession.train(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_276_0(uint64_t a1)
{
  return specialized MLTrainingSession.evaluate(job:)(a1);
}

uint64_t OUTLINED_FUNCTION_277_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_278()
{
  return PassthroughSubject.send(_:)();
}

void OUTLINED_FUNCTION_279()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandPoseClassifier.ModelParameters(v0, v1);
}

uint64_t OUTLINED_FUNCTION_280_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_282_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void OUTLINED_FUNCTION_285(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 + *(int *)(v14 + 32)) = a14;
}

uint64_t OUTLINED_FUNCTION_286()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 216);
}

void OUTLINED_FUNCTION_291(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of MLCheckpoint(a1, a2, v2);
}

unint64_t OUTLINED_FUNCTION_294@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_295()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t OUTLINED_FUNCTION_297()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_298(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of MLCheckpoint(a1, a2, v2);
}

unint64_t OUTLINED_FUNCTION_299@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
  return lazy protocol witness table accessor for type String and conformance String();
}

id OUTLINED_FUNCTION_302(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 10);
}

uint64_t OUTLINED_FUNCTION_303()
{
  return Date.init()();
}

uint64_t OUTLINED_FUNCTION_305()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_308@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[12] = a2;
  v3[13] = v2;
  v3[8] = result;
  v3[9] = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_312()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_317()
{
  return objc_opt_self();
}

uint64_t OUTLINED_FUNCTION_318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_320@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[12] = a2;
  v3[13] = v2;
  v3[8] = result;
  v3[9] = v4;
  return result;
}

void OUTLINED_FUNCTION_321()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + *(int *)(v2 + 32)) = v1;
}

uint64_t OUTLINED_FUNCTION_322(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_323()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t OUTLINED_FUNCTION_328@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = *(_QWORD *)(v1 + a1);
  *(_QWORD *)(v2 + 96) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_329()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_330(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_331(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 208) = result;
  return result;
}

void OUTLINED_FUNCTION_332()
{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_333(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 + 232) = *a11;
  return *(_QWORD *)(v11 + 224);
}

uint64_t OUTLINED_FUNCTION_334(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_335()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_336(id a1, SEL a2, uint64_t a3)
{
  uint64_t v3;

  return objc_msgSend(a1, a2, a3, v3, 1);
}

uint64_t OUTLINED_FUNCTION_337()
{
  return PassthroughSubject.send(_:)();
}

void OUTLINED_FUNCTION_339(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v13 + *(int *)(v14 + 32)) = a13;
}

uint64_t OUTLINED_FUNCTION_341@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v3[33] = v1;
  result = *(_QWORD *)(v2 + a1);
  v3[34] = result;
  v3[35] = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_346@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = *(_QWORD *)(v1 + a1);
  *(_QWORD *)(v2 + 264) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_347@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = *(_QWORD *)(v1 + a1);
  *(_QWORD *)(v2 + 216) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_348@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v3[27] = v1;
  result = *(_QWORD *)(v2 + a1);
  v3[28] = result;
  v3[29] = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_350()
{
  return CurrentValueSubject.value.getter();
}

uint64_t OUTLINED_FUNCTION_355()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_356()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_358()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 280) = v1;
  return *(_QWORD *)(v0 + 272);
}

uint64_t OUTLINED_FUNCTION_361(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * a1, v2 - 128);
}

uint64_t OUTLINED_FUNCTION_362()
{
  return Date.init()();
}

uint64_t OUTLINED_FUNCTION_364()
{
  return Publisher.eraseToAnyPublisher()();
}

void OUTLINED_FUNCTION_366()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_368()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_369()
{
  return Date.timeIntervalSince(_:)();
}

id OUTLINED_FUNCTION_370(id a1, SEL a2, uint64_t a3)
{
  uint64_t v3;

  return objc_msgSend(a1, a2, a3, v3, 7);
}

uint64_t OUTLINED_FUNCTION_371()
{
  uint64_t v0;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0);
}

void OUTLINED_FUNCTION_372()
{
  specialized == infix<A>(_:_:)();
}

uint64_t OUTLINED_FUNCTION_374()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_375()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_376()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0 - 128);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.ModelParameters.ModelAlgorithmType.validate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_49();
  v4 = v3 - v2;
  type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v8 = v7 - v6;
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(v0, v7 - v6);
  outlined init with take of MLImageClassifier.FeatureExtractorType(v8, v4);
  MLImageClassifier.FeatureExtractorType.validate()();
  outlined destroy of MLImageClassifier.FeatureExtractorType(v4);
}

uint64_t MLImageClassifier.ModelParameters.ModelAlgorithmType.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v13;

  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_49();
  v4 = v3 - v2;
  type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v8 = v7 - v6;
  outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(v0, v7 - v6);
  outlined init with take of MLImageClassifier.FeatureExtractorType(v8, v4);
  MLImageClassifier.FeatureExtractorType.description.getter();
  v13 = v9;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 2108704;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._object = (void *)0x800000021AFF3920;
  v11._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  outlined destroy of MLImageClassifier.FeatureExtractorType(v4);
  return v13;
}

uint64_t type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLImageClassifier.ModelParameters.ModelAlgorithmType;
  if (!type metadata singleton initialization cache for MLImageClassifier.ModelParameters.ModelAlgorithmType)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLImageClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
      v9 = (uint64_t *)((char *)a1 + v8);
      v10 = (uint64_t *)((char *)a2 + v8);
      v11 = v10[1];
      *v9 = *v10;
      v9[1] = v11;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  return a1;
}

uint64_t destroy for MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for MLImageClassifier.ModelParameters.ModelAlgorithmType(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = *((_QWORD *)v8 + 1);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *((_QWORD *)v7 + 1) = v9;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for MLImageClassifier.ModelParameters.ModelAlgorithmType(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.FeatureExtractorType((uint64_t)a1);
    v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
      v7 = &a1[v6];
      v8 = &a2[v6];
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

char *initializeWithTake for MLImageClassifier.ModelParameters.ModelAlgorithmType(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    v6 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for MLImageClassifier.ModelParameters.ModelAlgorithmType(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.FeatureExtractorType((uint64_t)a1);
    v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      v6 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
      *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType));
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (featureExtractor: MLImageClassifier.FeatureExtractorType, classifier: MLImageClassifier.ModelParameters.ClassifierType));
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v6);
}

uint64_t type metadata completion function for MLImageClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  int v4;

  result = type metadata accessor for MLImageClassifier.FeatureExtractorType(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSingleCase();
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = v4;
  }
  return result;
}

void specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21AFD542C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x656C62756F44;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML10_DataTableC_s5Error_pTgm503_s8c10ML11MLDataf74V4pack12columnsNamed2to4type7fillingACSSd_SSAC8PackTypeOAA0C5ValueOtFAA05_E10D0CyKXEfU_AgE11CMLSequenceCSSAE0jS0O0sP0OAMTf1c_n(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7, char a8)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  closure #1 in MLDataTable.pack(columnsNamed:to:type:filling:)(a1, a2, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, &v14, &v13);
  swift_release();
  v11 = v14;
  swift_bridgeObjectRelease();
  outlined consume of MLDataValue(a6, a7, a8);
  return v11;
}

void specialized Array<A>.featureSequence.getter()
{
  OUTLINED_FUNCTION_17_3();
}

id MLDataTable.pack(columnsNamed:to:type:filling:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v2;

  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
  {
    swift_retain();
    OUTLINED_FUNCTION_17_3();
  }
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = 1;
  OUTLINED_FUNCTION_61_0();
  return v2;
}

void sub_21AFD5734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t inited;
  char v18;
  uint64_t ML10_DataTableC_s5Error_pTgm503_s8c10ML11MLDataf74V4pack12columnsNamed2to4type7fillingACSSd_SSAC8PackTypeOAA0C5ValueOtFAA05_E10D0CyKXEfU_AgE11CMLSequenceCSSAE0jS0O0sP0OAMTf1c_n;
  char v20;
  char v21;
  va_list va;

  va_start(va, a8);
  if (a1)
  {
    OUTLINED_FUNCTION_22_0();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_BYTE *)(inited + 24) = 1;
    if (*(_QWORD *)(v15 + 16))
      specialized Array<A>.featureSequence.getter();
    _DataTable.columnNames.getter((uint64_t *)va);
    swift_release();
    swift_bridgeObjectRetain();
    outlined copy of MLDataValue(v12, v13, v14);
    if (v9)
      v18 = 4;
    else
      v18 = 3;
    ML10_DataTableC_s5Error_pTgm503_s8c10ML11MLDataf74V4pack12columnsNamed2to4type7fillingACSSd_SSAC8PackTypeOAA0C5ValueOtFAA05_E10D0CyKXEfU_AgE11CMLSequenceCSSAE0jS0O0sP0OAMTf1c_n = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML10_DataTableC_s5Error_pTgm503_s8c10ML11MLDataf74V4pack12columnsNamed2to4type7fillingACSSd_SSAC8PackTypeOAA0C5ValueOtFAA05_E10D0CyKXEfU_AgE11CMLSequenceCSSAE0jS0O0sP0OAMTf1c_n(v11, (uint64_t *)va, a4, v10, v18, v12, v13, v14);
    v21 = v20;
    swift_release();
    *(_QWORD *)v8 = ML10_DataTableC_s5Error_pTgm503_s8c10ML11MLDataf74V4pack12columnsNamed2to4type7fillingACSSd_SSAC8PackTypeOAA0C5ValueOtFAA05_E10D0CyKXEfU_AgE11CMLSequenceCSSAE0jS0O0sP0OAMTf1c_n;
    *(_BYTE *)(v8 + 8) = v21 & 1;
    OUTLINED_FUNCTION_61_0();
  }
  else
  {
    __break(1u);
  }
}

BOOL static MLDataTable.PackType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t closure #1 in MLDataTable.pack(columnsNamed:to:type:filling:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  _QWORD v19[4];
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;

  v25 = a9;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *a2;
  v15 = 0x5060403020100uLL >> (8 * a5);
  v22 = a6;
  v23 = a7;
  v24 = a8;
  swift_retain();
  MLDataValue.featureValue.getter();
  v19[2] = v13;
  v19[3] = v14;
  v20 = v15;
  v21 = v16;
  v17 = specialized String.withCString<A>(_:)((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in CMLTable.pack(columnNames:newColumnName:type:value:), (uint64_t)v19, a3, a4);
  swift_release();
  result = swift_release();
  if (v10)
  {
    *a10 = v10;
  }
  else
  {
    type metadata accessor for _DataTable();
    swift_allocObject();
    result = (uint64_t)_DataTable.init(impl:)((uint64_t)v17);
    *v25 = result;
  }
  return result;
}

id MLDataTable.unpack(columnNamed:valueTypes:indexSubset:keySubset:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)v1;
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
  {
    outlined copy of Result<_DataTable, Error>(v2, 0);
    OUTLINED_FUNCTION_17_3();
  }
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = 1;
  return outlined copy of Result<_DataTable, Error>(v2, 1);
}

_QWORD *partial apply for closure #1 in CMLTable.unpack(columnName:types:limit:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in CMLTable.unpack(columnName:types:limit:)(a1, v2[2], v2[3], v2[4], a2);
}

void MLDataTable.PackType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int MLDataTable.PackType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type MLDataTable.PackType and conformance MLDataTable.PackType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.PackType and conformance MLDataTable.PackType;
  if (!lazy protocol witness table cache variable for type MLDataTable.PackType and conformance MLDataTable.PackType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.PackType, &type metadata for MLDataTable.PackType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.PackType and conformance MLDataTable.PackType);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLDataTable.PackType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21AFD5FFC + 4 * byte_21AFF0E74[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21AFD6030 + 4 * byte_21AFF0E6F[v4]))();
}

uint64_t sub_21AFD6030(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AFD6038(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AFD6040);
  return result;
}

uint64_t sub_21AFD604C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AFD6054);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21AFD6058(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AFD6060(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MLDataTable.PackType()
{
  return &type metadata for MLDataTable.PackType;
}

uint64_t partial apply for closure #1 in CMLTable.pack(columnNames:newColumnName:type:value:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CMLTable.pack(columnNames:newColumnName:type:value:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void OUTLINED_FUNCTION_0_80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 1;
  outlined consume of Result<_DataTable, Error>(v4, 0);
}

void OUTLINED_FUNCTION_1_69()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x20666F2073692027;
  v0._object = (void *)0xEE00272065707974;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_2_70()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 184) = v0;
  *(_BYTE *)(v3 - 176) = 0;
  outlined copy of Result<_DataTable, Error>(v0, 0);
  MLDataTable.subscript.getter(v1, v2, v3 - 168);
}

void OUTLINED_FUNCTION_3_60()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 168) = v0;
  *(_BYTE *)(v3 - 160) = 0;
  outlined copy of Result<_DataTable, Error>(v0, 0);
  MLDataTable.subscript.getter(v1, v2, v3 - 224);
}

void OUTLINED_FUNCTION_4_66()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 224) = 0;
  *(_QWORD *)(v0 - 216) = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
}

void OUTLINED_FUNCTION_5_62(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD00000000000003DLL;
  String.append(_:)(v1);
}

void OUTLINED_FUNCTION_10_58()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_11_61()
{
  void *v0;
  uint64_t v1;

  outlined consume of Result<_DataTable, Error>(v0, 0);
  outlined consume of Result<_DataTable, Error>(v0, 0);
  return *(unsigned __int8 *)(v1 - 184);
}

void OUTLINED_FUNCTION_14_58()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_15_48()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
  return swift_release();
}

void OUTLINED_FUNCTION_19_45()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_21_44()
{
  uint64_t v0;

  return v0;
}

uint64_t static _AudioUtilities.validateAudioURLs(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v30 = a1;
  if (v12)
  {
    v32 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v13 = a1 + v32;
    v14 = *(_QWORD *)(v3 + 16);
    v37 = *(_QWORD *)(v3 + 72);
    v38 = v14;
    swift_bridgeObjectRetain();
    v39 = MEMORY[0x24BEE4AF8];
    v31 = 0x800000021AFF97C0;
    v36 = xmmword_21AFE7DA0;
    v33 = v5;
    v34 = v3;
    while (1)
    {
      OUTLINED_FUNCTION_1_70((uint64_t)v11, v13);
      OUTLINED_FUNCTION_84_9((uint64_t)v11, 0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v2) == 1)
        break;
      v15 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v15(v8, v11, v2);
      if ((static _AudioUtilities.validateOneAudioURL(from:)((uint64_t)v8) & 1) != 0)
      {
        OUTLINED_FUNCTION_1_70((uint64_t)v5, (uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v39 = v27;
        }
        v16 = *(_QWORD *)(v39 + 16);
        if (v16 >= *(_QWORD *)(v39 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v39 = v28;
        }
        v17 = v39;
        *(_QWORD *)(v39 + 16) = v16 + 1;
        v18 = v37;
        v15((char *)(v17 + v32 + v16 * v37), v5, v2);
      }
      else
      {
        v40 = 0;
        v41 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        v40 = 0xD000000000000020;
        v41 = v31;
        v19._countAndFlagsBits = URL.path.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20._countAndFlagsBits = 46;
        v20._object = (void *)0xE100000000000000;
        String.append(_:)(v20);
        v21 = v40;
        v22 = v41;
        v35 = static os_log_type_t.info.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
        v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = v36;
        v24 = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v23 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v23 + 32) = v21;
        *(_QWORD *)(v23 + 40) = v22;
        swift_bridgeObjectRetain();
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
        type metadata accessor for OS_os_log();
        v25 = (void *)static OS_os_log.default.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = v36;
        *(_QWORD *)(v26 + 56) = v24;
        *(_QWORD *)(v26 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v26 + 32) = v21;
        *(_QWORD *)(v26 + 40) = v22;
        swift_bridgeObjectRetain();
        v5 = v33;
        os_log(_:dso:log:type:_:)();
        v3 = v34;
        swift_bridgeObjectRelease();

        v18 = v37;
        swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v18;
      if (!--v12)
        goto LABEL_14;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v39 = MEMORY[0x24BEE4AF8];
LABEL_14:
    OUTLINED_FUNCTION_84_9((uint64_t)v11, 1);
  }
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t static _AudioUtilities.validateOneAudioURL(from:)(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  double v10;
  double v11;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  id v16;
  Swift::String v17;
  uint64_t v18;
  void *v19;
  os_log_type_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v2 = type metadata accessor for URL();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v5, a1, v2, v3);
  v7 = objc_allocWithZone(MEMORY[0x24BDB1810]);
  v8 = @nonobjc AVAudioFile.init(forReading:)((uint64_t)v5);
  v9 = objc_msgSend(v8, sel_fileFormat);
  objc_msgSend(v9, sel_sampleRate);
  v11 = v10;

  if (v11 <= 0.0)
  {
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v13._countAndFlagsBits = 0xD00000000000002BLL;
    v13._object = (void *)0x800000021AFF97F0;
    String.append(_:)(v13);
    lazy protocol witness table accessor for type URL and conformance URL();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._object = (void *)0x800000021AFF9820;
    v15._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v15);
    v16 = objc_msgSend(v8, sel_fileFormat);
    objc_msgSend(v16, sel_sampleRate);

    Double.write<A>(to:)();
    v17._countAndFlagsBits = 46;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18 = v23;
    v19 = (void *)v24;
    v20 = static os_log_type_t.default.getter();
    v21._countAndFlagsBits = v18;
    v21._object = v19;
    log(_:type:)(v21, v20);
    swift_bridgeObjectRelease();

    return 0;
  }
  else
  {

    return 1;
  }
}

uint64_t OUTLINED_FUNCTION_1_70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 112))(a1, a2, v2);
}

uint64_t specialized MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a1;
  v5[4] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v5[7] = v7;
  v5[8] = *(_QWORD *)(v7 - 8);
  v5[9] = OUTLINED_FUNCTION_0();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v5[10] = v8;
  v5[11] = *(_QWORD *)(v8 - 8);
  v5[12] = OUTLINED_FUNCTION_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v5[13] = v9;
  v5[14] = *(_QWORD *)(v9 - 8);
  v5[15] = OUTLINED_FUNCTION_0();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v5[16] = v10;
  v5[17] = *(_QWORD *)(v10 - 8);
  v5[18] = OUTLINED_FUNCTION_0();
  v5[19] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v5[20] = OUTLINED_FUNCTION_0();
  v5[2] = a2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

uint64_t specialized MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)()
{
  uint64_t *v0;
  _QWORD *v1;
  _QWORD *v3;

  OUTLINED_FUNCTION_108_6();
  outlined init with copy of URL?(v0[6], v0[20], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_26(v0[11]);
    v1 = (_QWORD *)swift_task_alloc();
    v0[23] = (uint64_t)v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    *v1 = v0;
    v1[1] = specialized MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
    return FullyConnectedNetworkClassifier.fitted<A>(to:eventHandler:)();
  }
  else
  {
    OUTLINED_FUNCTION_26(v0[17]);
    v3 = (_QWORD *)swift_task_alloc();
    v0[21] = (uint64_t)v3;
    OUTLINED_FUNCTION_213_2();
    OUTLINED_FUNCTION_220_1(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A]);
    *v3 = v0;
    v3[1] = specialized MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
    return LogisticRegressionClassifier.fitted<A>(to:eventHandler:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 192) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_79_1(*(_QWORD *)(v0 + 136));
  OUTLINED_FUNCTION_119_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_2(v1);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 136));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_79_1(*(_QWORD *)(v0 + 88));
  OUTLINED_FUNCTION_37();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_2(v1);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 88));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a1;
  v6[5] = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v6[8] = v9;
  v6[9] = *(_QWORD *)(v9 - 8);
  v6[10] = OUTLINED_FUNCTION_0();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v6[11] = v10;
  v6[12] = *(_QWORD *)(v10 - 8);
  v6[13] = OUTLINED_FUNCTION_0();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v6[14] = v11;
  v6[15] = *(_QWORD *)(v11 - 8);
  v6[16] = OUTLINED_FUNCTION_0();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v6[17] = v12;
  v6[18] = *(_QWORD *)(v12 - 8);
  v6[19] = OUTLINED_FUNCTION_0();
  v6[20] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v6[21] = OUTLINED_FUNCTION_0();
  v6[2] = a2;
  v6[3] = a3;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_21_45();
}

uint64_t specialized MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)()
{
  uint64_t *v0;
  _QWORD *v1;
  _QWORD *v3;

  outlined init with copy of URL?(v0[7], v0[21], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_26(v0[12]);
    v1 = (_QWORD *)swift_task_alloc();
    v0[24] = (uint64_t)v1;
    OUTLINED_FUNCTION_213_2();
    OUTLINED_FUNCTION_220_1(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A]);
    *v1 = v0;
    v1[1] = specialized MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    return FullyConnectedNetworkClassifier.fitted<A, B>(to:validateOn:eventHandler:)();
  }
  else
  {
    OUTLINED_FUNCTION_26(v0[18]);
    v3 = (_QWORD *)swift_task_alloc();
    v0[22] = (uint64_t)v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    *v3 = v0;
    v3[1] = specialized MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    return LogisticRegressionClassifier.fitted<A, B>(to:validateOn:eventHandler:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 184) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 200) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_79_1(*(_QWORD *)(v0 + 144));
  OUTLINED_FUNCTION_119_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_2(v1);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 144));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_79_1(*(_QWORD *)(v0 + 96));
  OUTLINED_FUNCTION_37();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_2(v1);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 96));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    __swift_instantiateConcreteTypeFromMangledName(a3);
    OUTLINED_FUNCTION_251();
    v8 = a1 + v7;
    v10 = *(_QWORD *)(v9 + 72);
    do
    {
      swift_getKeyPath();
      OUTLINED_FUNCTION_145_5();
      swift_getAtKeyPath();
      swift_release();
      v4 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v4 = v16;
      }
      v11 = *(_QWORD *)(v4 + 16);
      if (v11 >= *(_QWORD *)(v4 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v4 = v16;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      v12 = v4 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v14;
      *(_QWORD *)(v12 + 40) = v15;
      v8 += v10;
      --v3;
    }
    while (v3);
  }
  return v4;
}

double specialized AnnotatedFeatureStore.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  double v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  v25 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  BlobsFile.init()((uint64_t)&v26);
  v33 = a1;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v23 = a2;
    v24 = v5;
    v12 = a1 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    v13 = *(_QWORD *)(v25 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    v22 = a1;
    swift_bridgeObjectRetain_n();
    do
    {
      v14(v10, v12, v8);
      AnnotatedFeature.feature.getter();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
      v15 = MLShapedArrayProtocol.scalars.getter();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v4);
      BlobsFile.appendBlob(_:)((Swift::OpaquePointer)v15);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
      v12 += v13;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease_n();
    a1 = v33;
    a2 = v23;
  }
  v16 = v31;
  v17 = v32;
  result = v27;
  v19 = v28;
  v20 = v29;
  v21 = v30;
  *(_OWORD *)a2 = v26;
  *(double *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 24) = v19;
  *(_OWORD *)(a2 + 40) = v20;
  *(_OWORD *)(a2 + 56) = v21;
  *(_QWORD *)(a2 + 72) = v16;
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 88) = a1;
  return result;
}

uint64_t specialized static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[38] = a2;
  v3[39] = a3;
  v3[37] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>);
  v3[40] = v5;
  v3[41] = *(_QWORD *)(v5 - 8);
  v3[42] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>?);
  v3[43] = OUTLINED_FUNCTION_0();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UpsampledAugmentationSequence<[AnnotatedFeature<CIImage, String>], <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator, String>);
  v3[44] = v6;
  v3[45] = *(_QWORD *)(v6 - 8);
  v3[46] = OUTLINED_FUNCTION_0();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UpsampledAugmentationSequence<[AnnotatedFeature<CIImage, String>], <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator, String>.AsyncIterator);
  v3[47] = v7;
  v3[48] = *(_QWORD *)(v7 - 8);
  v3[49] = OUTLINED_FUNCTION_0();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Augmenter<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator>);
  v3[50] = v8;
  v3[51] = *(_QWORD *)(v8 - 8);
  v3[52] = OUTLINED_FUNCTION_0();
  v3[35] = a1;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t specialized static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (v0[39] && (v1 = v0[38]) != 0)
  {
    v36 = v0[46];
    v38 = v0[45];
    v37 = v0[44];
    v2 = swift_allocEmptyBox();
    v0[53] = v2;
    v35 = OUTLINED_FUNCTION_84_14();
    *(_QWORD *)(v35 + 16) = v1;
    *(_QWORD *)(v35 + 24) = v2;
    OUTLINED_FUNCTION_23_3();
    swift_retain();
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    v3 = OUTLINED_FUNCTION_27_1(v34, (unint64_t *)&lazy cache variable for type metadata for CIImage);
    v33 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    v32 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v31 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    v30 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v29 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    v28 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v27 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0);
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    OUTLINED_FUNCTION_101_13(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v0[32] = v3;
    v0[33] = v8;
    v0[34] = v9;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    OUTLINED_FUNCTION_101_13(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v12 = v11;
    v0[12] = v3;
    v0[13] = v7;
    v0[14] = v6;
    v0[15] = OpaqueTypeConformance2;
    v0[16] = v11;
    v13 = swift_getOpaqueTypeConformance2();
    v0[17] = v3;
    v0[18] = v5;
    v0[19] = v6;
    v0[20] = v13;
    v0[21] = v12;
    v14 = OUTLINED_FUNCTION_38_28();
    OUTLINED_FUNCTION_101_13(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v0[2] = v3;
    v0[3] = v27;
    v0[4] = v4;
    v0[5] = v14;
    v0[6] = v15;
    v16 = OUTLINED_FUNCTION_38_28();
    OUTLINED_FUNCTION_101_13(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v0[27] = v3;
    v0[28] = v29;
    v0[29] = v28;
    v0[30] = v16;
    v0[31] = v17;
    v18 = OUTLINED_FUNCTION_38_28();
    OUTLINED_FUNCTION_101_13(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v0[7] = v3;
    v0[8] = v31;
    v0[9] = v30;
    v0[10] = v18;
    v0[11] = v19;
    v20 = OUTLINED_FUNCTION_38_28();
    OUTLINED_FUNCTION_101_13(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
    v0[22] = v3;
    v0[23] = v33;
    v0[24] = v32;
    v0[25] = v20;
    v0[26] = v21;
    OUTLINED_FUNCTION_38_28();
    Augmenter.init<A>(generator:_:)();
    OUTLINED_FUNCTION_158_0();
    OUTLINED_FUNCTION_227_0(&lazy protocol witness table cache variable for type [AnnotatedFeature<CIImage, String>] and conformance [A]);
    Augmenter.applied<A, B>(to:upsampledBy:)();
    UpsampledAugmentationSequence.makeAsyncIterator()();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type UpsampledAugmentationSequence<[AnnotatedFeature<CIImage, String>], <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator, String>.AsyncIterator and conformance UpsampledAugmentationSequence<A, B, C, D>.AsyncIterator, &demangling cache variable for type metadata for UpsampledAugmentationSequence<[AnnotatedFeature<CIImage, String>], <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0, SystemRandomNumberGenerator, String>.AsyncIterator);
    v0[54] = v22;
    v23 = (_QWORD *)swift_task_alloc();
    v0[55] = v23;
    *v23 = v0;
    v23[1] = specialized static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:);
    OUTLINED_FUNCTION_182_2();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  else
  {
    OUTLINED_FUNCTION_52_1();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    v25 = OUTLINED_FUNCTION_95_11();
    return v26(v25);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_211_2(v2);
  v3 = v0[37];
  if (v1)
  {
    v0[57] = v3;
    v0[58] = v1;
  }
  else
  {
    v0[56] = v3;
  }
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  void (*v10)(_QWORD);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_108_6();
  v1 = v0[43];
  v2 = v0[40];
  v3 = OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128(v3, v4, v2);
  if (v5)
  {
    v6 = v0[51];
    OUTLINED_FUNCTION_62_9(v0[48]);
    OUTLINED_FUNCTION_62_30(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    swift_release();
    swift_task_dealloc();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    v7 = OUTLINED_FUNCTION_95_11();
    return OUTLINED_FUNCTION_33_37(v7, v8);
  }
  else
  {
    v10 = *(void (**)(_QWORD))(v0[41] + 32);
    ((void (*)(_QWORD, uint64_t, uint64_t))v10)(v0[42], v1, v2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = v0[56];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v12 = v18;
    }
    v13 = *(_QWORD *)(v12 + 16);
    if (v13 >= *(_QWORD *)(v12 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v12 = v19;
    }
    v0[59] = v12;
    *(_QWORD *)(v12 + 16) = v13 + 1;
    OUTLINED_FUNCTION_251();
    v10(v14 + v15 + *(_QWORD *)(v16 + 72) * v13);
    v17 = (_QWORD *)swift_task_alloc();
    v0[60] = v17;
    *v17 = v0;
    v17[1] = specialized static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:);
    OUTLINED_FUNCTION_182_2();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 288) = *(_QWORD *)(v0 + 464);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_42();
  v1 = *(_QWORD *)(v0 + 408);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 384) + 8))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 376));
  OUTLINED_FUNCTION_62_30(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_release();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_211_2(v2);
  v3 = v0[59];
  if (v1)
  {
    v0[57] = v3;
    v0[58] = v1;
  }
  else
  {
    v0[56] = v3;
  }
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

void specialized Collection.randomSplit<A, B>(strategy:)(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  char v4;

  if ((a3 & 0x100) != 0)
  {
    if (*(_QWORD *)(a4 + 16) >= 0x32uLL)
    {
LABEL_6:
      OUTLINED_FUNCTION_158_0();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
      OUTLINED_FUNCTION_227_0(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A]);
      OUTLINED_FUNCTION_89_11();
      goto LABEL_7;
    }
  }
  else
  {
    OUTLINED_FUNCTION_169_1();
    if (!v4)
      goto LABEL_6;
  }
  OUTLINED_FUNCTION_52_1();
LABEL_7:
  OUTLINED_FUNCTION_131_7();
}

{
  char v4;

  if ((a3 & 0x100) != 0)
  {
    if (*(_QWORD *)(a4 + 16) >= 0x32uLL)
    {
LABEL_6:
      OUTLINED_FUNCTION_158_0();
      type metadata accessor for URL();
      OUTLINED_FUNCTION_227_0(&lazy protocol witness table cache variable for type [AnnotatedFeature<URL, String>] and conformance [A]);
      OUTLINED_FUNCTION_89_11();
      goto LABEL_7;
    }
  }
  else
  {
    OUTLINED_FUNCTION_169_1();
    if (!v4)
      goto LABEL_6;
  }
  OUTLINED_FUNCTION_52_1();
LABEL_7:
  OUTLINED_FUNCTION_131_7();
}

uint64_t specialized MLImageClassifier.FeatureExtractor.extractFeatures<A>(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

uint64_t specialized MLImageClassifier.FeatureExtractor.extractFeatures<A>(from:)()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<CIImage, String>]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<CIImage, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<CIImage, String>]);
  *v1 = v0;
  v1[1] = specialized MLImageClassifier.FeatureExtractor.extractFeatures<A>(from:);
  OUTLINED_FUNCTION_18();
  return Transformer.applied<A, B>(to:eventHandler:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v3);
  *(_QWORD *)(v2 + 40) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v2 + 48) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_21_45();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 48));
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized Transformer.applied<A, B>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[11] = a6;
  v7[12] = v6;
  v7[9] = a4;
  v7[10] = a5;
  v7[7] = a2;
  v7[8] = a3;
  v7[6] = a1;
  v8 = type metadata accessor for ImageReader();
  v7[13] = v8;
  v7[14] = *(_QWORD *)(v8 - 8);
  v7[15] = swift_task_alloc();
  v9 = type metadata accessor for Event();
  v7[16] = v9;
  v7[17] = *(_QWORD *)(v9 - 8);
  v7[18] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>);
  v7[19] = v10;
  v7[20] = *(_QWORD *)(v10 - 8);
  v7[21] = swift_task_alloc();
  v11 = type metadata accessor for URL();
  v7[22] = v11;
  v7[23] = *(_QWORD *)(v11 - 8);
  v7[24] = swift_task_alloc();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v7[25] = v12;
  v7[26] = *(_QWORD *)(v12 - 8);
  v7[27] = swift_task_alloc();
  return swift_task_switch();
}

void specialized Transformer.applied<A, B>(to:eventHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  OUTLINED_FUNCTION_108_6();
  v1 = v0[8];
  v2 = v0[9] >> 1;
  v0[28] = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
  }
  else
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v2 == v1)
    {
      OUTLINED_FUNCTION_81_19();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_19();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      v4 = OUTLINED_FUNCTION_95_11();
      OUTLINED_FUNCTION_33_37(v4, v5);
      return;
    }
    v6 = v0[26];
    v7 = v0[8];
    v8 = v0[9];
    v0[29] = v7;
    v0[30] = v3;
    swift_unknownObjectRetain();
    if (v7 < (uint64_t)(v8 >> 1))
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v6 + 16))(v0[27], v0[7] + *(_QWORD *)(v6 + 72) * v7, v0[25]);
      static Task<>.checkCancellation()();
      AnnotatedFeature.feature.getter();
      v9 = (_QWORD *)swift_task_alloc();
      v0[31] = v9;
      OUTLINED_FUNCTION_184_2(v9);
      OUTLINED_FUNCTION_76_15();
      return;
    }
  }
  __break(1u);
}

uint64_t specialized Transformer.applied<A, B>(to:eventHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_121_0(v2);
  *(_QWORD *)(v0 + 256) = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 184));
  if (v1)
    OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_108_6();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 208));
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_81_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  return OUTLINED_FUNCTION_0_30(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  _QWORD *v13;

  OUTLINED_FUNCTION_108_6();
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
  *(_QWORD *)(v0 + 200) = v1;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  v3 = v2;
  if (v1)
  {
    v4 = *(_QWORD *)(v0 + 176);
    *(_DWORD *)(v0 + 256) = *(_DWORD *)(*(_QWORD *)(v0 + 184) + 80);
    OUTLINED_FUNCTION_251();
    *(_QWORD *)(v0 + 208) = *(_QWORD *)(v5 + 72);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    *(_QWORD *)(v0 + 224) = 0;
    *(_QWORD *)(v0 + 232) = v3;
    *(_QWORD *)(v0 + 216) = v6;
    v7 = *(_QWORD *)(v0 + 192);
    v10 = v8 + v9;
    swift_bridgeObjectRetain();
    v6(v7, v10, v4);
    static Task<>.checkCancellation()();
    AnnotatedFeature.feature.getter();
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 240) = v13;
    OUTLINED_FUNCTION_185_2(v13);
    return OUTLINED_FUNCTION_76_15();
  }
  else
  {
    OUTLINED_FUNCTION_85_16();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    v11 = OUTLINED_FUNCTION_95_11();
    return OUTLINED_FUNCTION_33_37(v11, v12);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_121_0(v2);
  *(_QWORD *)(v0 + 248) = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 160));
  if (v1)
    OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_108_6();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 184));
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_85_16();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  return OUTLINED_FUNCTION_0_30(*(uint64_t (**)(void))(v0 + 8));
}

#error "21AFD86F8: call analysis failed (funcsize=145)"

uint64_t specialized Transformer.applied<A, B>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  v5 = OUTLINED_FUNCTION_207_3();
  v4[10] = v5;
  v4[11] = *(_QWORD *)(v5 - 8);
  v4[12] = OUTLINED_FUNCTION_0();
  v6 = type metadata accessor for Event();
  v4[13] = v6;
  v4[14] = *(_QWORD *)(v6 - 8);
  v4[15] = OUTLINED_FUNCTION_0();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>);
  v4[16] = v7;
  v4[17] = *(_QWORD *)(v7 - 8);
  v4[18] = OUTLINED_FUNCTION_0();
  v8 = type metadata accessor for URL();
  v4[19] = v8;
  v4[20] = *(_QWORD *)(v8 - 8);
  v4[21] = OUTLINED_FUNCTION_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v4[22] = v9;
  v4[23] = *(_QWORD *)(v9 - 8);
  v4[24] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

#error "21AFD8C38: call analysis failed (funcsize=142)"

uint64_t ImageClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  v4 = OUTLINED_FUNCTION_83_16();
  OUTLINED_FUNCTION_37_0(v3, v5, v6, v4);
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFiles) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles) = v7;
  v8 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore;
  BlobsFile.init()((uint64_t)&v28);
  v9 = v33;
  v10 = v34;
  *(_OWORD *)v8 = v28;
  *(_QWORD *)(v8 + 16) = v29;
  *(_OWORD *)(v8 + 24) = v30;
  *(_OWORD *)(v8 + 40) = v31;
  *(_OWORD *)(v8 + 56) = v32;
  *(_QWORD *)(v8 + 72) = v9;
  *(_QWORD *)(v8 + 80) = v10;
  *(_QWORD *)(v8 + 88) = v7;
  v11 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  BlobsFile.init()((uint64_t)&v35);
  v12 = v40;
  v13 = v41;
  *(_OWORD *)v11 = v35;
  *(_QWORD *)(v11 + 16) = v36;
  *(_OWORD *)(v11 + 24) = v37;
  *(_OWORD *)(v11 + 40) = v38;
  *(_OWORD *)(v11 + 56) = v39;
  *(_QWORD *)(v11 + 72) = v12;
  *(_QWORD *)(v11 + 80) = v13;
  *(_QWORD *)(v11 + 88) = v7;
  v14 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
  v15 = OUTLINED_FUNCTION_125_8();
  OUTLINED_FUNCTION_37_0(v14, v16, v17, v15);
  v18 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model;
  v19 = OUTLINED_FUNCTION_67_8();
  OUTLINED_FUNCTION_37_0(v18, v20, v21, v19);
  v22 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingMetrics;
  type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_159_0(v22, 1);
  OUTLINED_FUNCTION_159_0(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationMetrics, 1);
  v23 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_tablePrinter;
  v24 = OUTLINED_FUNCTION_267();
  OUTLINED_FUNCTION_37_0(v23, v25, v26, v24);
  outlined init with take of MLHandPoseClassifier.ModelParameters(a1, v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

uint64_t ImageClassifierTrainingSessionDelegate.init(filesByLabel:modelParameters:sessionParameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[10];
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  OUTLINED_FUNCTION_8_1();
  v48 = v2;
  v49 = v3;
  v31 = v4;
  v32 = v5;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_54_0();
  v9 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_83_16();
  OUTLINED_FUNCTION_159_0(v9, 1);
  v10 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFiles) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles) = v10;
  v11 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore;
  BlobsFile.init()((uint64_t)&v34);
  v12 = v39;
  v13 = v40;
  *(_OWORD *)v11 = v34;
  *(_QWORD *)(v11 + 16) = v35;
  *(_OWORD *)(v11 + 24) = v36;
  *(_OWORD *)(v11 + 40) = v37;
  *(_OWORD *)(v11 + 56) = v38;
  *(_QWORD *)(v11 + 72) = v12;
  *(_QWORD *)(v11 + 80) = v13;
  *(_QWORD *)(v11 + 88) = v10;
  v14 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  BlobsFile.init()((uint64_t)&v41);
  v15 = v46;
  v16 = v47;
  *(_OWORD *)v14 = v41;
  *(_QWORD *)(v14 + 16) = v42;
  *(_OWORD *)(v14 + 24) = v43;
  *(_OWORD *)(v14 + 40) = v44;
  *(_OWORD *)(v14 + 56) = v45;
  *(_QWORD *)(v14 + 72) = v15;
  *(_QWORD *)(v14 + 80) = v16;
  *(_QWORD *)(v14 + 88) = v10;
  v17 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
  v18 = OUTLINED_FUNCTION_125_8();
  OUTLINED_FUNCTION_37_0(v17, v19, v20, v18);
  v21 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model;
  v22 = OUTLINED_FUNCTION_67_8();
  OUTLINED_FUNCTION_37_0(v21, v23, v24, v22);
  v25 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingMetrics;
  type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_136_5(v25);
  OUTLINED_FUNCTION_136_5(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationMetrics);
  v26 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_tablePrinter;
  v27 = OUTLINED_FUNCTION_267();
  OUTLINED_FUNCTION_37_0(v26, v28, v29, v27);
  outlined init with copy of MLImageClassifier.ModelParameters(v7, (uint64_t)v33);
  MLImageClassifier.PersistentParameters.init(trainingData:modelParameters:)(v31, v33, v1);
  outlined destroy of MLImageClassifier.ModelParameters((uint64_t)v7);
  OUTLINED_FUNCTION_159_0((uint64_t)v1, 0);
  OUTLINED_FUNCTION_44_7();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v1, v9, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  swift_endAccess();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v32, v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  return v0;
}

uint64_t ImageClassifierTrainingSessionDelegate.populateFiles(parameters:)(Swift::OpaquePointer *a1)
{
  uint64_t v1;
  uint64_t result;
  Swift::tuple_training_OpaquePointer_validation_OpaquePointer v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for MLImageClassifier.PersistentParameters();
  v4 = MLImageClassifier.ModelParameters.ValidationData.extractFilesByLabel(trainingFiles:)((Swift::OpaquePointer)a1->_rawValue);
  result = (uint64_t)v4.training._rawValue;
  if (!v5)
  {
    v6 = specialized Sequence.flatMap<A>(_:)((uint64_t)v4.training._rawValue);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFiles) = v6;
    swift_bridgeObjectRelease();
    v7 = specialized Sequence.flatMap<A>(_:)((uint64_t)v4.validation._rawValue);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles) = v7;
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ImageClassifierTrainingSessionDelegate.setUp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  Swift::OpaquePointer *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[32];
  _QWORD v105[2];
  _BYTE v106[32];
  _BYTE v107[32];
  uint64_t v108;
  _QWORD v109[3];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[3];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  Swift::OpaquePointer *v121;

  OUTLINED_FUNCTION_8_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_161();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v100 = *(_QWORD *)(v5 - 8);
  v101 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v99 = v7;
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>.Configuration);
  v95 = *(_QWORD *)(v97 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_208();
  v93 = v9;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_211();
  v94 = v11;
  v12 = OUTLINED_FUNCTION_125_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v96 = v14;
  v89 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_208();
  v92 = v16;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_211();
  v90 = v18;
  v87 = OUTLINED_FUNCTION_231_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v19);
  v86 = (uint64_t)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_190_3(v22, v23, v24, v25, v26, v27, v28, v29, v80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_208();
  v98 = v31;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_211();
  v91 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_53_0();
  v35 = (int *)OUTLINED_FUNCTION_83_16();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_64();
  v121 = v37;
  v38 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_225_2(v38, v2);
  OUTLINED_FUNCTION_128(v2, 1, (uint64_t)v35);
  if (!v39)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters(v2, (uint64_t)v121, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
    ImageClassifierTrainingSessionDelegate.populateFiles(parameters:)(v121);
    if (v1)
    {
      outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v121, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
LABEL_6:
      OUTLINED_FUNCTION_7();
      return;
    }
    v81 = v3;
    BlobsFile.init()((uint64_t)v109);
    v103 = v0;
    v40 = v109[0];
    v41 = v109[1];
    v83 = v111;
    v84 = v110;
    v82 = v112;
    v85 = v12;
    v42 = v113;
    v43 = v114;
    v44 = (_QWORD *)(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore);
    OUTLINED_FUNCTION_44_7();
    v102 = 0;
    *v44 = v40;
    v44[1] = v41;
    OUTLINED_FUNCTION_105_7(*(double *)&v109[2]);
    v44[9] = v42;
    v44[10] = v43;
    v44[11] = MEMORY[0x24BEE4AF8];
    outlined consume of Data._Representation(v45, v46);
    OUTLINED_FUNCTION_10_3();
    swift_bridgeObjectRelease();
    BlobsFile.init()((uint64_t)v115);
    v47 = v115[0];
    v48 = v115[1];
    v83 = v117;
    v84 = v116;
    v82 = v118;
    v50 = v119;
    v49 = v120;
    v51 = (_QWORD *)(v103 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore);
    OUTLINED_FUNCTION_44_7();
    *v51 = v47;
    v51[1] = v48;
    OUTLINED_FUNCTION_105_7(*(double *)&v115[2]);
    v51[9] = v50;
    v51[10] = v49;
    v51[11] = MEMORY[0x24BEE4AF8];
    outlined consume of Data._Representation(v52, v53);
    OUTLINED_FUNCTION_10_3();
    swift_bridgeObjectRelease();
    v54 = OUTLINED_FUNCTION_52_1();
    v55 = v102;
    MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v54, (uint64_t)&v108, &demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    v102 = v55;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v84 = specialized Set.init<A>(_:)(MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm);
    v57 = v88;
    OUTLINED_FUNCTION_29_6((uint64_t)v121 + v35[5], v88);
    v58 = *(uint64_t *)((char *)&v121->_rawValue + v35[8]);
    v59 = *(uint64_t *)((char *)&v121->_rawValue + v35[9]);
    v60 = (uint64_t)v121 + v35[6];
    v61 = v90;
    outlined init with copy of MLTrainingSessionParameters(v60, v90, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    memset(v106, 0, sizeof(v106));
    memset(v107, 0, sizeof(v107));
    v105[0] = v58;
    v105[1] = v59;
    OUTLINED_FUNCTION_29_6(v57, v86);
    v62 = OUTLINED_FUNCTION_195_2(v87);
    OUTLINED_FUNCTION_149_4((uint64_t)v62);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v104, (uint64_t)v106, &demangling cache variable for type metadata for Any?);
    v63 = v92;
    OUTLINED_FUNCTION_166_2(v61, v92);
    v64 = OUTLINED_FUNCTION_195_2(v89);
    OUTLINED_FUNCTION_24_4(v63, (uint64_t)v64);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v104, (uint64_t)v107, &demangling cache variable for type metadata for Any?);
    OUTLINED_FUNCTION_165_4(v61);
    OUTLINED_FUNCTION_245(v57);
    MLImageClassifier.ModelParameters.algorithm.getter(v63);
    lazy protocol witness table accessor for type Float and conformance Float();
    LogisticRegressionClassifier.Configuration.init()();
    LogisticRegressionClassifier.Configuration.maximumIterations.setter();
    v65 = v95;
    OUTLINED_FUNCTION_228_0(v93, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 16));
    v66 = v99;
    v67 = v103;
    LogisticRegressionClassifier.init(labels:configuration:)();
    outlined destroy of MLImageClassifier.ModelParameters((uint64_t)v105);
    OUTLINED_FUNCTION_204_4(*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8));
    v68 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 32))(v96, v66, v101);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    OUTLINED_FUNCTION_150_4();
    outlined destroy of MLHandActionClassifier.DataSource(v63, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    v2 = v91;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v68, v91, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
    v69 = v85;
    __swift_storeEnumTagSinglePayload(v2, 0, 1, v85);
    v70 = v67 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_142_1();
    swift_endAccess();
    v71 = v70;
    v72 = v98;
    OUTLINED_FUNCTION_225_2(v71, v98);
    v73 = OUTLINED_FUNCTION_84_3();
    OUTLINED_FUNCTION_128(v73, v74, v69);
    if (!v39)
    {
      v75 = v81;
      MLImageClassifier.Classifier.makeTransformer()(v81);
      outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v121, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
      outlined destroy of MLHandActionClassifier.DataSource(v72, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
      v76 = OUTLINED_FUNCTION_67_8();
      OUTLINED_FUNCTION_63_7(v75, 0, v77, v76);
      v78 = OUTLINED_FUNCTION_44_7();
      OUTLINED_FUNCTION_229_0(v78, v79, &demangling cache variable for type metadata for MLImageClassifier.Model?);
      swift_endAccess();
      goto LABEL_6;
    }
    __break(1u);
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_73_8();
  OUTLINED_FUNCTION_181_2();
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ImageClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  uint64_t v2;
  Swift::OpaquePointer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  _QWORD *v86;
  char v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  Swift::OpaquePointer *v141;
  int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE v178[32];
  _QWORD v179[2];
  _BYTE v180[32];
  _BYTE v181[32];
  uint64_t v182;
  _BYTE v183[96];
  _BYTE v184[104];

  OUTLINED_FUNCTION_8_1();
  v174 = v2;
  v177 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  v161 = v7;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_211();
  v159 = v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v157 = *(_QWORD *)(v10 - 8);
  v158 = v10;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v156 = v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>.Configuration);
  v154 = *(_QWORD *)(v13 - 8);
  v155 = v13;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  v150 = (uint64_t)&v141 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_211();
  v151 = v17;
  v173 = OUTLINED_FUNCTION_125_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_208();
  v160 = v19;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_190_3(v21, v22, v23, v24, v25, v26, v27, v28, (uint64_t)v141);
  v146 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_208();
  v149 = v30;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_211();
  v147 = v32;
  v144 = OUTLINED_FUNCTION_231_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_208();
  v143 = v34;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_211();
  v145 = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_208();
  v168 = v38;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_65_5();
  v153 = v40;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_211();
  v148 = v42;
  v171 = OUTLINED_FUNCTION_78();
  v166 = *(_QWORD *)(v171 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_208();
  v165 = v44;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v45);
  OUTLINED_FUNCTION_65_5();
  v167 = v46;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_65_5();
  v162 = v48;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v49);
  OUTLINED_FUNCTION_211();
  v169 = v50;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v51);
  OUTLINED_FUNCTION_208();
  v170 = v52;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v53);
  v55 = (char *)&v141 - v54;
  v56 = type metadata accessor for MLCheckpoint();
  v172 = *(_QWORD *)(v56 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v57);
  OUTLINED_FUNCTION_208();
  v164 = v58;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v59);
  OUTLINED_FUNCTION_65_5();
  v163 = v60;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v61);
  OUTLINED_FUNCTION_211();
  v176 = v62;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v63);
  OUTLINED_FUNCTION_161();
  v64 = OUTLINED_FUNCTION_83_16();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v65);
  OUTLINED_FUNCTION_54_0();
  v175 = v1;
  v66 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v66, v4, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  v142 = (int *)v64;
  OUTLINED_FUNCTION_128(v4, 1, v64);
  if (v67)
    goto LABEL_28;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v4, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  v68 = v177;
  specialized BidirectionalCollection.last.getter(v177, (uint64_t)v55);
  OUTLINED_FUNCTION_128((uint64_t)v55, 1, v56);
  if (v67)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v55, &demangling cache variable for type metadata for MLCheckpoint?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v70 = OUTLINED_FUNCTION_18_0(v69, 0xD00000000000001DLL);
LABEL_8:
    OUTLINED_FUNCTION_188_0(v70, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
    goto LABEL_9;
  }
  v71 = (uint64_t)v55;
  v72 = v176;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v71, v176, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
  v73 = v174;
  v74 = v175;
  v75 = ImageClassifierTrainingSessionDelegate.populateFiles(parameters:)(v3);
  if (v73)
    goto LABEL_6;
  v77 = *(unsigned __int8 *)(v72 + *(int *)(v56 + 20));
  if (v77 != 2)
  {
    if (v77 != 1)
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_18_0(v85, 0xD00000000000003ELL);
LABEL_6:
      v76 = v72;
LABEL_7:
      outlined destroy of MLHandActionClassifier.DataSource(v76, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      goto LABEL_8;
    }
    v78 = v169;
    OUTLINED_FUNCTION_133_4();
    URL.appendingPathComponent(_:isDirectory:)();
    AnnotatedFeatureStore.init(contentsOf:)(v78, (uint64_t)v183);
    v141 = v3;
    v79 = (void *)(v74 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore);
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_167_3(v79, v183);
    OUTLINED_FUNCTION_191_3();
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_10_3();
    v80 = v162;
    OUTLINED_FUNCTION_250();
    URL.appendingPathComponent(_:isDirectory:)();
    AnnotatedFeatureStore.init(contentsOf:)(v80, (uint64_t)v184);
    v107 = (void *)(v74 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore);
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_167_3(v107, v184);
    OUTLINED_FUNCTION_191_3();
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_10_3();
    v108 = OUTLINED_FUNCTION_52_1();
    MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v108, (uint64_t)&v182, &demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    v174 = 0;
    swift_bridgeObjectRelease();
    v177 = specialized Set.init<A>(_:)(MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm);
    v111 = (uint64_t)v141;
    v110 = v142;
    v112 = v145;
    OUTLINED_FUNCTION_29_6((uint64_t)v141 + v142[5], v145);
    v113 = *(_QWORD *)(v111 + v110[8]);
    v114 = *(_QWORD *)(v111 + v110[9]);
    v115 = v111 + v110[6];
    v116 = v147;
    outlined init with copy of MLTrainingSessionParameters(v115, v147, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    memset(v180, 0, sizeof(v180));
    memset(v181, 0, sizeof(v181));
    v179[0] = v113;
    v179[1] = v114;
    OUTLINED_FUNCTION_29_6(v112, v143);
    v117 = OUTLINED_FUNCTION_187_3(v144);
    OUTLINED_FUNCTION_149_4((uint64_t)v117);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v178, (uint64_t)v180, &demangling cache variable for type metadata for Any?);
    v4 = v149;
    outlined init with copy of MLTrainingSessionParameters(v116, v149, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    v118 = OUTLINED_FUNCTION_187_3(v146);
    outlined init with take of MLHandPoseClassifier.ModelParameters(v4, (uint64_t)v118, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)v178, (uint64_t)v181, &demangling cache variable for type metadata for Any?);
    outlined destroy of MLHandActionClassifier.DataSource(v116, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    OUTLINED_FUNCTION_245(v112);
    MLImageClassifier.ModelParameters.algorithm.getter(v4);
    lazy protocol witness table accessor for type Float and conformance Float();
    LogisticRegressionClassifier.Configuration.init()();
    LogisticRegressionClassifier.Configuration.maximumIterations.setter();
    v119 = v154;
    OUTLINED_FUNCTION_228_0(v150, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 16));
    v120 = v156;
    v121 = v175;
    LogisticRegressionClassifier.init(labels:configuration:)();
    outlined destroy of MLImageClassifier.ModelParameters((uint64_t)v179);
    OUTLINED_FUNCTION_204_4(*(uint64_t (**)(uint64_t, uint64_t))(v119 + 8));
    v122 = v152;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 32))(v152, v120, v158);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    OUTLINED_FUNCTION_150_4();
    outlined destroy of MLHandActionClassifier.DataSource(v4, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    v123 = v148;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v122, v148, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
    v124 = v173;
    __swift_storeEnumTagSinglePayload(v123, 0, 1, v173);
    v125 = v121 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_142_1();
    swift_endAccess();
    v126 = v125;
    v127 = v153;
    OUTLINED_FUNCTION_225_2(v126, v153);
    v128 = OUTLINED_FUNCTION_84_3();
    OUTLINED_FUNCTION_128(v128, v129, v124);
    if (!v67)
    {
      v130 = v159;
      MLImageClassifier.Classifier.makeTransformer()(v159);
      outlined destroy of MLHandActionClassifier.DataSource(v176, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v141, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
      outlined destroy of MLHandActionClassifier.DataSource(v127, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
      v131 = OUTLINED_FUNCTION_67_8();
      OUTLINED_FUNCTION_63_7(v130, 0, v132, v131);
      v133 = OUTLINED_FUNCTION_44_7();
      OUTLINED_FUNCTION_229_0(v133, v134, &demangling cache variable for type metadata for MLImageClassifier.Model?);
      swift_endAccess();
      goto LABEL_9;
    }
    __break(1u);
LABEL_28:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_73_8();
    OUTLINED_FUNCTION_181_2();
    __break(1u);
    JUMPOUT(0x21AFDA758);
  }
  v179[0] = v68;
  if (*(_QWORD *)(v68 + 16))
  {
    v174 = 0;
    v141 = v3;
    OUTLINED_FUNCTION_251();
    outlined init with copy of MLTrainingSessionParameters(v68 + v83 + *(_QWORD *)(v81 + 72) * (v82 - 1), v164, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_91_0();
    __asm { BR              X9 }
  }
  v86 = v170;
  MEMORY[0x24BDAC7A8](v75);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5((_QWORD *(*)(_QWORD *__return_ptr, uint64_t *))partial apply for specialized closure #1 in BidirectionalCollection.last(where:), 0, v87 & 1, v86);
  OUTLINED_FUNCTION_128((uint64_t)v86, 1, v56);
  if (v67)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v86, &demangling cache variable for type metadata for MLCheckpoint?);
  }
  else
  {
    v88 = v163;
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v86, v163, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLCheckpoint>);
    v89 = (*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80);
    v90 = swift_allocObject();
    *(_OWORD *)(v90 + 16) = xmmword_21AFE7DA0;
    OUTLINED_FUNCTION_29_6(v88, v90 + v89);
    ImageClassifierTrainingSessionDelegate.resume(from:)((Swift::OpaquePointer)v90);
    if (v92)
    {
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      OUTLINED_FUNCTION_245(v88);
      v76 = v176;
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_248(v91, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  v93 = v165;
  OUTLINED_FUNCTION_215_0();
  URL.appendingPathComponent(_:)();
  v94 = v167;
  URL.appendingPathExtension(_:)();
  v95 = *(void (**)(uint64_t, uint64_t))(v166 + 8);
  v96 = v93;
  v97 = v171;
  v95(v96, v171);
  v98 = v74 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
  OUTLINED_FUNCTION_44_7();
  v99 = v98;
  v100 = v168;
  outlined init with copy of URL?(v99, v168, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  v101 = OUTLINED_FUNCTION_84_3();
  OUTLINED_FUNCTION_128(v101, v102, v173);
  if (v67)
  {
    v103 = ((uint64_t (*)(uint64_t, uint64_t))v95)(v94, v97);
    OUTLINED_FUNCTION_248(v103, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_188_0(v104, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v100, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  }
  else
  {
    v105 = v160;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v100, v160, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Classifier);
    v106 = v161;
    UpdatableSupervisedEstimator.readWithOptimizer(from:)();
    outlined destroy of MLHandActionClassifier.DataSource(v105, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
    OUTLINED_FUNCTION_193_2();
    outlined destroy of MLHandActionClassifier.DataSource(v176, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_188_0(v135, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
    v136 = OUTLINED_FUNCTION_67_8();
    OUTLINED_FUNCTION_63_7(v106, 0, v137, v136);
    OUTLINED_FUNCTION_44_7();
    v138 = OUTLINED_FUNCTION_145_5();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v138, v139, v140);
    swift_endAccess();
  }
LABEL_9:
  OUTLINED_FUNCTION_7();
}

Swift::Int_optional __swiftcall ImageClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  Swift::Int_optional result;

  __asm { BR              X10 }
  return result;
}

uint64_t sub_21AFDA7A0()
{
  return 0;
}

uint64_t ImageClassifierTrainingSessionDelegate.extractFeatures(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[34] = a1;
  v2[35] = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v2[36] = v3;
  v2[37] = *(_QWORD *)(v3 - 8);
  v2[38] = OUTLINED_FUNCTION_0();
  v4 = OUTLINED_FUNCTION_207_3();
  v2[39] = v4;
  v2[40] = *(_QWORD *)(v4 - 8);
  v2[41] = OUTLINED_FUNCTION_0();
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  v2[42] = OUTLINED_FUNCTION_0();
  v2[43] = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  v2[44] = OUTLINED_FUNCTION_4_36();
  v2[45] = OUTLINED_FUNCTION_25();
  v2[46] = OUTLINED_FUNCTION_4_12();
  v2[47] = OUTLINED_FUNCTION_4_36();
  v2[48] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  v2[49] = OUTLINED_FUNCTION_0();
  v2[50] = OUTLINED_FUNCTION_83_16();
  v2[51] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v10 = *v2;
  v4 = v10;
  OUTLINED_FUNCTION_121_0(&v10);
  *(_QWORD *)(v4 + 480) = a1;
  *(_QWORD *)(v4 + 488) = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_0();
  if (v1)
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_47_33();
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 408) + *(int *)(v4 + 608));
    v7 = (_QWORD *)OUTLINED_FUNCTION_73_14();
    *(_QWORD *)(v4 + 496) = v7;
    v8 = OUTLINED_FUNCTION_157_4(v7, (uint64_t)ImageClassifierTrainingSessionDelegate.extractFeatures(from:));
    return v9(v8, v6, 1);
  }
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  OUTLINED_FUNCTION_194_3();
  OUTLINED_FUNCTION_121_0(v4);
  v2[71] = a1;
  v2[72] = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_0();
  if (v1)
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_47_33();
  }
  else
  {
    v6 = (_QWORD *)OUTLINED_FUNCTION_73_14();
    v2[73] = v6;
    v7 = OUTLINED_FUNCTION_157_4(v6, (uint64_t)ImageClassifierTrainingSessionDelegate.extractFeatures(from:));
    return OUTLINED_FUNCTION_33_37(v7, v8);
  }
}

void ImageClassifierTrainingSessionDelegate.extractFeatures(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  v3 = OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_128_6(v3, v4, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_128(v1, 1, v2);
  if (v5)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(_QWORD *)(v0 + 392), &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_73_8();
    OUTLINED_FUNCTION_82_14();
    OUTLINED_FUNCTION_171_4();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 280);
    outlined init with take of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 408), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
    v7 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFiles;
    *(_QWORD *)(v0 + 416) = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFiles;
    v8 = *(_QWORD *)(*(_QWORD *)(v6 + v7) + 16);
    v9 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles;
    *(_QWORD *)(v0 + 424) = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles;
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + v9) + 16);
    v11 = __OFADD__(v8, v10);
    v12 = v8 + v10;
    *(_QWORD *)(v0 + 432) = v12;
    if (v11)
    {
      __break(1u);
    }
    else
    {
      if (v12 <= *(_QWORD *)(v0 + 272))
      {
        outlined destroy of MLHandActionClassifier.DataSource(*(_QWORD *)(v0 + 408), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
        swift_task_dealloc();
        OUTLINED_FUNCTION_31();
        OUTLINED_FUNCTION_10();
        OUTLINED_FUNCTION_19();
        OUTLINED_FUNCTION_17();
        OUTLINED_FUNCTION_9();
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_65();
        OUTLINED_FUNCTION_40();
        OUTLINED_FUNCTION_215_3();
        OUTLINED_FUNCTION_171_4();
        __asm { BR              X2 }
      }
      v14 = *(int **)(v0 + 400);
      v13 = *(_QWORD *)(v0 + 408);
      v16 = *(_QWORD *)(v0 + 376);
      v15 = *(_QWORD *)(v0 + 384);
      v28 = *(_QWORD *)(v0 + 368);
      v17 = *(_QWORD *)(v0 + 352);
      v29 = *(_QWORD *)(v0 + 344);
      v30 = *(_QWORD *)(v0 + 336);
      outlined init with copy of MLTrainingSessionParameters(v13 + v14[5], v15, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      v18 = v14[9];
      v19 = *(_QWORD *)(v13 + v14[8]);
      *(_DWORD *)(v0 + 608) = v18;
      v20 = *(_QWORD *)(v13 + v18);
      OUTLINED_FUNCTION_179_3(v13 + v14[6], v21, type metadata accessor for MLImageClassifier.FeatureExtractorType);
      *(_OWORD *)(v0 + 48) = 0u;
      *(_OWORD *)(v0 + 80) = 0u;
      *(_OWORD *)(v0 + 64) = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
      *(_QWORD *)(v0 + 16) = v19;
      *(_QWORD *)(v0 + 24) = v20;
      outlined init with copy of MLTrainingSessionParameters(v15, v16, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      *(_QWORD *)(v0 + 160) = v28;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 136));
      OUTLINED_FUNCTION_146_7((uint64_t)boxed_opaque_existential_0);
      OUTLINED_FUNCTION_163_2();
      OUTLINED_FUNCTION_144_5();
      *(_QWORD *)(v0 + 192) = v29;
      v23 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 168));
      OUTLINED_FUNCTION_148_4((uint64_t)v23);
      OUTLINED_FUNCTION_154_3();
      OUTLINED_FUNCTION_198_3();
      outlined destroy of MLHandActionClassifier.DataSource(v15, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      OUTLINED_FUNCTION_188_2();
      outlined init with take of MLHandPoseClassifier.ModelParameters(v17, v30, type metadata accessor for MLImageClassifier.FeatureExtractorType);
      outlined destroy of MLImageClassifier.ModelParameters(v0 + 16);
      v24 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 440) = v24;
      *v24 = v0;
      v24[1] = ImageClassifierTrainingSessionDelegate.extractFeatures(from:);
      OUTLINED_FUNCTION_171_4();
      MLImageClassifier.FeatureExtractor.init(type:)(v25, v26);
    }
  }
}

uint64_t ImageClassifierTrainingSessionDelegate.extractFeatures(from:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 448) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD);

  v1 = v0[52];
  v3 = v0[34];
  v2 = v0[35];
  ImageReader.init()();
  v4 = *(_QWORD *)(v2 + v1);
  v0[57] = v4;
  v5 = *(_QWORD *)(v4 + 16);
  v6 = v2 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_sessionParameters;
  result = type metadata accessor for MLTrainingSessionParameters();
  v8 = *(_QWORD *)(v6 + *(int *)(result + 20));
  v9 = __OFADD__(v3, v8);
  v10 = v3 + v8;
  v11 = v9;
  if (v5 > v3)
  {
    if ((v11 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v12 = v0[34];
      if (v5 >= v10)
        v13 = v10;
      else
        v13 = v5;
      v0[58] = v13;
      if (v13 >= v12)
      {
        if ((v12 & 0x8000000000000000) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
          OUTLINED_FUNCTION_252();
          v15 = v4 + v14;
          OUTLINED_FUNCTION_158_3((uint64_t)&async function pointer to specialized Transformer.applied<A, B>(to:eventHandler:));
          swift_bridgeObjectRetain();
          v16 = (_QWORD *)swift_task_alloc();
          v0[59] = v16;
          *v16 = v0;
          v16[1] = ImageClassifierTrainingSessionDelegate.extractFeatures(from:);
          v17 = v0[34];
          v18 = v4;
          v19 = v15;
          v20 = (2 * v13) | 1;
          return v30(v18, v19, v17, v20, 0, 0);
        }
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if ((v11 & 1) != 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v21 = v0[34];
  if (v0[54] < v10)
    v10 = v0[54];
  v0[68] = v10;
  v22 = v10 - v5;
  if (__OFSUB__(v10, v5))
    goto LABEL_28;
  v23 = v21 - v5;
  if (v22 < v21 - v5)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v24 = *(_QWORD *)(v0[35] + v0[53]);
  v0[69] = v24;
  if ((v23 & 0x8000000000000000) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v25 = *(_QWORD *)(v24 + 16);
  if (v25 >= v23 && (uint64_t)v25 >= v22)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    OUTLINED_FUNCTION_252();
    v28 = v24 + v27;
    OUTLINED_FUNCTION_158_3((uint64_t)&async function pointer to specialized Transformer.applied<A, B>(to:eventHandler:));
    OUTLINED_FUNCTION_23_3();
    v29 = (_QWORD *)swift_task_alloc();
    v0[70] = v29;
    *v29 = v0;
    v29[1] = ImageClassifierTrainingSessionDelegate.extractFeatures(from:);
    v18 = v24;
    v19 = v28;
    v17 = v23;
    v20 = (2 * v22) | 1;
    return v30(v18, v19, v17, v20, 0, 0);
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v3);
  v2[63] = v0;
  v2[64] = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_21_45();
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = (uint64_t (*)(void))((char *)&async function pointer to specialized MLImageClassifier.FeatureExtractor.extractFeatures<A>(from:)
                           + async function pointer to specialized MLImageClassifier.FeatureExtractor.extractFeatures<A>(from:));
    v5 = (_QWORD *)swift_task_alloc();
    v2[65] = v5;
    v6 = OUTLINED_FUNCTION_157_4(v5, (uint64_t)ImageClassifierTrainingSessionDelegate.extractFeatures(from:));
    return OUTLINED_FUNCTION_2_56(v6, v7);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_63_10();
  *(_QWORD *)(v0 + 528) = v2;
  *(_QWORD *)(v0 + 536) = v1;
  OUTLINED_FUNCTION_73_7();
  if (!v1)
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_110_2();
  v2 = (uint64_t)(v0 + 12);
  v3 = v0[66];
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_186_4();
  specialized Array.append<A>(contentsOf:)();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v12 = v0[37];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
    OUTLINED_FUNCTION_57_26();
    do
    {
      OUTLINED_FUNCTION_97_9();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
      OUTLINED_FUNCTION_147_3();
      OUTLINED_FUNCTION_62_30(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
      OUTLINED_FUNCTION_202_2();
      OUTLINED_FUNCTION_80();
      v2 += v1;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v2 = (uint64_t)(v0 + 12);
  }
  swift_endAccess();
  v5 = v0[58];
  v6 = v0[34];
  OUTLINED_FUNCTION_62_9(v0[40]);
  v7 = outlined destroy of MLImageClassifier.FeatureExtractor(v2);
  OUTLINED_FUNCTION_74_18(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  result = OUTLINED_FUNCTION_30();
  if (__OFSUB__(v5, v6))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_40_30();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_31();
    v9 = OUTLINED_FUNCTION_214_2();
    return OUTLINED_FUNCTION_20_47(v9, v10, v11);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_63_10();
  *(_QWORD *)(v0 + 592) = v2;
  *(_QWORD *)(v0 + 600) = v1;
  OUTLINED_FUNCTION_73_7();
  if (!v1)
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_110_2();
  v2 = (uint64_t)(v0 + 12);
  v3 = v0[74];
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_186_4();
  specialized Array.append<A>(contentsOf:)();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v12 = v0[37];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
    OUTLINED_FUNCTION_57_26();
    do
    {
      OUTLINED_FUNCTION_97_9();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
      OUTLINED_FUNCTION_147_3();
      OUTLINED_FUNCTION_62_30(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
      OUTLINED_FUNCTION_202_2();
      OUTLINED_FUNCTION_80();
      v2 += v1;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v2 = (uint64_t)(v0 + 12);
  }
  swift_endAccess();
  v5 = v0[68];
  v6 = v0[34];
  OUTLINED_FUNCTION_62_9(v0[40]);
  v7 = outlined destroy of MLImageClassifier.FeatureExtractor(v2);
  OUTLINED_FUNCTION_74_18(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  result = OUTLINED_FUNCTION_30();
  if (__OFSUB__(v5, v6))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_40_30();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_31();
    v9 = OUTLINED_FUNCTION_214_2();
    return OUTLINED_FUNCTION_20_47(v9, v10, v11);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_50_6();
  outlined destroy of MLHandActionClassifier.DataSource(*(_QWORD *)(v0 + 408), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_15_49();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_114_8();
  return OUTLINED_FUNCTION_12_16(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 320));
  v1 = OUTLINED_FUNCTION_45_10();
  OUTLINED_FUNCTION_204_0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_15_49();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_114_8();
  return OUTLINED_FUNCTION_12_16(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 320));
  v1 = OUTLINED_FUNCTION_45_10();
  OUTLINED_FUNCTION_74_18(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_15_49();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_114_8();
  return OUTLINED_FUNCTION_12_16(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 320));
  v1 = OUTLINED_FUNCTION_45_10();
  OUTLINED_FUNCTION_74_18(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_15_49();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_114_8();
  return OUTLINED_FUNCTION_12_16(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 320));
  v1 = OUTLINED_FUNCTION_45_10();
  OUTLINED_FUNCTION_204_0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_15_49();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_114_8();
  return OUTLINED_FUNCTION_12_16(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 320));
  v1 = OUTLINED_FUNCTION_45_10();
  OUTLINED_FUNCTION_74_18(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_15_49();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_114_8();
  return OUTLINED_FUNCTION_12_16(v2);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ImageClassifierTrainingSessionDelegate.transitionTo(phase:)(CreateML::MLPhase phase)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_BYTE *)phase;
  v4 = OUTLINED_FUNCTION_267();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_14_5();
  if (*v3 == 3)
  {
    v6 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_tablePrinter;
    OUTLINED_FUNCTION_44_7();
    v7 = OUTLINED_FUNCTION_84_3();
    if (!__swift_getEnumTagSinglePayload(v7, v8, v4))
    {
      OUTLINED_FUNCTION_166_2(v6, v2);
      static os_log_type_t.info.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_21AFE7DA0;
      v10 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v9 + 56) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v9 + 64) = v10;
      *(_QWORD *)(v9 + 32) = 3;
      os_log(_:dso:log:type:_:)();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_165_4(v2);
    }
  }
}

uint64_t ImageClassifierTrainingSessionDelegate.train(from:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1[53] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  v1[54] = OUTLINED_FUNCTION_4_36();
  v1[55] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Model?);
  v1[56] = OUTLINED_FUNCTION_4_36();
  v1[57] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
  v1[58] = OUTLINED_FUNCTION_4_36();
  v1[59] = OUTLINED_FUNCTION_25();
  v1[60] = OUTLINED_FUNCTION_25();
  v1[61] = OUTLINED_FUNCTION_4_12();
  v1[62] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  v1[63] = OUTLINED_FUNCTION_0();
  v1[64] = OUTLINED_FUNCTION_83_16();
  v1[65] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_194_3();
  OUTLINED_FUNCTION_121_0(v2);
  *(_QWORD *)(v1 + 568) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_15_0();
  if (!v0)
    outlined destroy of MLHandActionClassifier.DataSource(*(_QWORD *)(v1 + 440), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = OUTLINED_FUNCTION_189_3();
  OUTLINED_FUNCTION_132_4(v1, v3, v4, v2);
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_221_2(v1, v5, &demangling cache variable for type metadata for MLImageClassifier.Model?);
  OUTLINED_FUNCTION_259();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 600) = v6;
  v7 = OUTLINED_FUNCTION_156_2(v6, (uint64_t)ImageClassifierTrainingSessionDelegate.train(from:));
  return OUTLINED_FUNCTION_112_2(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 448);
  v2 = OUTLINED_FUNCTION_189_3();
  OUTLINED_FUNCTION_132_4(v1, v3, v4, v2);
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_221_2(v1, v5, &demangling cache variable for type metadata for MLImageClassifier.Model?);
  OUTLINED_FUNCTION_259();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 600) = v6;
  v7 = OUTLINED_FUNCTION_156_2(v6, (uint64_t)ImageClassifierTrainingSessionDelegate.train(from:));
  return OUTLINED_FUNCTION_112_2(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_137_5();
  v1 = *(_QWORD *)(v0 + 440);
  v2 = swift_release();
  OUTLINED_FUNCTION_204_0(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  outlined destroy of MLHandActionClassifier.DataSource(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_38();
  return OUTLINED_FUNCTION_12(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_137_5();
  v1 = *(_QWORD *)(v0 + 432);
  v2 = swift_release();
  OUTLINED_FUNCTION_204_0(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  outlined destroy of MLHandActionClassifier.DataSource(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_58();
  return OUTLINED_FUNCTION_12(*(uint64_t (**)(void))(v0 + 8));
}

void ImageClassifierTrainingSessionDelegate.train(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int EnumTagSinglePayload;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  OUTLINED_FUNCTION_49_4();
  v17 = v16[63];
  v18 = v16[64];
  v19 = OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_128_6(v19, v20, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_128(v17, 1, v18);
  if (v21)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v16[63], &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_73_8();
    OUTLINED_FUNCTION_82_14();
    OUTLINED_FUNCTION_90_9();
    return;
  }
  v22 = v16[53];
  outlined init with take of MLHandPoseClassifier.ModelParameters(v16[63], v16[65], (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  v23 = (uint64_t *)(v22 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore);
  OUTLINED_FUNCTION_44_7();
  v24 = v23[11];
  v25 = (uint64_t *)(v22 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore);
  OUTLINED_FUNCTION_44_7();
  v27 = v25[11];
  if (*(_QWORD *)(v27 + 16))
  {
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_84();
  }
  else
  {
    OUTLINED_FUNCTION_179_3(v16[65] + *(int *)(v16[64] + 20), v26, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v29 = v16[62];
    if (EnumCaseMultiPayload)
    {
      OUTLINED_FUNCTION_23_3();
      OUTLINED_FUNCTION_84();
      outlined destroy of MLHandActionClassifier.DataSource(v29, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    }
    else
    {
      a12 = v16 + 2;
      v30 = *(_QWORD *)v29;
      v31 = *(_QWORD *)(v29 + 8);
      v32 = *(unsigned __int8 *)(v29 + 16);
      v33 = *(unsigned __int8 *)(v29 + 17);
      OUTLINED_FUNCTION_23_3();
      specialized Collection.randomSplit<A, B>(strategy:)(v30, v31, v32 | (v33 << 8), v24);
      v27 = v34;
      a11 = v35;
      OUTLINED_FUNCTION_123();
      v36 = swift_bridgeObjectRetain();
      specialized AnnotatedFeatureStore.init<A>(_:)(v36, (uint64_t)(v16 + 14));
      v37 = *v23;
      v38 = v23[1];
      OUTLINED_FUNCTION_177_2(v23);
      outlined consume of Data._Representation(v37, v38);
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_80();
      v39 = OUTLINED_FUNCTION_84();
      specialized AnnotatedFeatureStore.init<A>(_:)(v39, (uint64_t)(v16 + 2));
      v40 = *v25;
      v41 = v25[1];
      OUTLINED_FUNCTION_177_2(v25);
      outlined consume of Data._Representation(v40, v41);
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_80();
      v24 = a11;
    }
  }
  v16[67] = v24;
  v16[66] = v27;
  v42 = v16[60];
  v43 = v16[53];
  type metadata accessor for EventCollector();
  OUTLINED_FUNCTION_84_14();
  v44 = EventCollector.init()();
  v16[68] = v44;
  v45 = v43 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_tablePrinter;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v45, v42, &demangling cache variable for type metadata for TrainingTablePrinter?);
  v46 = type metadata accessor for TrainingTablePrinter(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v42, 1, v46);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v42, &demangling cache variable for type metadata for TrainingTablePrinter?);
  if (EnumTagSinglePayload == 1)
  {
    v49 = v16[58];
    v48 = v16[59];
    ImageClassifierTrainingSessionDelegate.createTablePrinter()(v48);
    __swift_storeEnumTagSinglePayload(v48, 0, 1, v46);
    OUTLINED_FUNCTION_44_7();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v48, v45, &demangling cache variable for type metadata for TrainingTablePrinter?);
    swift_endAccess();
    outlined init with copy of URL?(v45, v49, &demangling cache variable for type metadata for TrainingTablePrinter?);
    OUTLINED_FUNCTION_128(v49, 1, v46);
    if (v21)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    TrainingTablePrinter.beginTable()();
    OUTLINED_FUNCTION_198_0(v50, type metadata accessor for TrainingTablePrinter);
  }
  v51 = v16[53];
  if (*(_QWORD *)(v27 + 16))
  {
    OUTLINED_FUNCTION_44_7();
    v52 = OUTLINED_FUNCTION_145_5();
    outlined init with copy of URL?(v52, v53, v54);
    type metadata accessor for MLImageClassifier.Classifier();
    v55 = OUTLINED_FUNCTION_84_3();
    OUTLINED_FUNCTION_128(v55, v56, v57);
    if (!v21)
    {
      v58 = v16[53];
      v59 = OUTLINED_FUNCTION_84_14();
      v16[72] = v59;
      *(_QWORD *)(v59 + 16) = v44;
      *(_QWORD *)(v59 + 24) = v58;
      OUTLINED_FUNCTION_127_7();
      OUTLINED_FUNCTION_3_1();
      v60 = (_QWORD *)swift_task_alloc();
      v16[73] = v60;
      *v60 = v16;
      v60[1] = ImageClassifierTrainingSessionDelegate.train(from:);
      OUTLINED_FUNCTION_90_9();
      v66(v61, v62, v63, v64, v65, v66, v67, v68, a9, a10, a11, a12, a13, a14, a15, a16);
      return;
    }
    __break(1u);
    goto LABEL_18;
  }
  v69 = v16[55];
  OUTLINED_FUNCTION_15_0();
  v70 = v51 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v70, v69, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  v71 = type metadata accessor for MLImageClassifier.Classifier();
  OUTLINED_FUNCTION_128(v69, 1, v71);
  if (!v21)
  {
    v72 = v16[53];
    v73 = OUTLINED_FUNCTION_84_14();
    v16[69] = v73;
    *(_QWORD *)(v73 + 16) = v44;
    *(_QWORD *)(v73 + 24) = v72;
    OUTLINED_FUNCTION_127_7();
    OUTLINED_FUNCTION_3_1();
    v74 = (_QWORD *)swift_task_alloc();
    v16[70] = v74;
    *v74 = v16;
    v74[1] = ImageClassifierTrainingSessionDelegate.train(from:);
    OUTLINED_FUNCTION_90_9();
    v79(v75, v76, v77, v78, v79, v80, v81, v82, a9, a10, a11, a12, a13, a14, a15, a16);
    return;
  }
LABEL_19:
  __break(1u);
}

uint64_t ImageClassifierTrainingSessionDelegate.train(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  OUTLINED_FUNCTION_108_6();
  a15 = v18;
  a16 = v19;
  a14 = v17;
  a14 = (_QWORD *)*v17;
  v20 = a14;
  OUTLINED_FUNCTION_121_0(&a14);
  v20[74] = v16;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_15_0();
  if (!v16)
    outlined destroy of MLHandActionClassifier.DataSource(v20[54], (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_47_33();
}

uint64_t ImageClassifierTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 608) = a1;
  OUTLINED_FUNCTION_73_7();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t ImageClassifierTrainingSessionDelegate.train(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_49_4();
  v17 = *(_QWORD *)(v16 + 520);
  v27 = *(_QWORD *)(v16 + 448);
  v28 = *(_QWORD *)(v16 + 440);
  v29 = *(_QWORD *)(v16 + 432);
  v31 = *(_QWORD *)(v17 + *(int *)(*(_QWORD *)(v16 + 512) + 32));
  v30 = specialized _dictionaryUpCast<A, B, C, D>(_:)(*(_QWORD **)(v16 + 608));
  OUTLINED_FUNCTION_12_0();
  swift_release();
  outlined destroy of MLHandActionClassifier.DataSource(v17, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_75_11();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_90_9();
  return v21(v18, v19, v20, v21, v22, v23, v24, v25, v27, v28, v29, v30, v31, a14, a15, a16);
}

uint64_t ImageClassifierTrainingSessionDelegate.createTablePrinter()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MetricsKey)>);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MetricsKey))
                                      - 8)
                          + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_21AFE7DA0;
  v9 = (_QWORD *)(v8 + v7);
  *v9 = 0xD000000000000011;
  v9[1] = 0x800000021AFF7A90;
  static MetricsKey.trainingAccuracy.getter();
  v10 = type metadata accessor for MetricsKey();
  v11 = Dictionary.init(dictionaryLiteral:)();
  v16 = v11;
  v12 = v1 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v12 + 88) + 16))
  {
    static MetricsKey.validationAccuracy.getter();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v10);
    specialized Dictionary.subscript.setter((uint64_t)v5, 0xD000000000000013, 0x800000021AFF7AB0);
    v11 = v16;
  }
  v13 = type metadata accessor for TrainingTablePrinter(0);
  *(_QWORD *)(a1 + *(int *)(v13 + 24)) = v11;
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  *(_QWORD *)(a1 + *(int *)(v13 + 20)) = OS_os_log.init(subsystem:category:)();
  return Date.init()();
}

void closure #1 in ImageClassifierTrainingSessionDelegate.train(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  EventCollector.add(_:)();
  v8 = a3 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_tablePrinter;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v8, (uint64_t)v7, &demangling cache variable for type metadata for TrainingTablePrinter?);
  v9 = type metadata accessor for TrainingTablePrinter(0);
  OUTLINED_FUNCTION_128((uint64_t)v7, 1, v9);
  if (v10)
  {
    __break(1u);
  }
  else
  {
    v11 = TrainingTablePrinter.print(_:)(a1);
    OUTLINED_FUNCTION_74_18(v11, type metadata accessor for TrainingTablePrinter);
  }
}

uint64_t ImageClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  const void *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  _BYTE v49[96];
  _BYTE v50[112];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  OUTLINED_FUNCTION_8_1();
  v52 = v3;
  v53 = v4;
  v51 = v1;
  v5 = v0;
  v7 = v6;
  v47[1] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_14_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = OUTLINED_FUNCTION_78();
  v13 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_50();
  v16 = v14 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v47 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v47 - v21;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)v47 - v24;
  v26 = *v7;
  if (v26 != 2)
  {
    if (v26 != 1)
    {
      v44 = 0;
      return v44 & 1;
    }
    v27 = v5;
    v28 = (const void *)(v5 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore);
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_167_3(v50, v28);
    outlined retain of AnnotatedFeatureStore((uint64_t)v50);
    OUTLINED_FUNCTION_133_4();
    URL.appendingPathComponent(_:isDirectory:)();
    v29 = v51;
    AnnotatedFeatureStore.write(to:)((uint64_t)v25);
    if (v29)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v25, v48);
      outlined release of AnnotatedFeatureStore((uint64_t)v50);
      return v44 & 1;
    }
    v41 = *(void (**)(char *, uint64_t))(v13 + 8);
    v42 = v48;
    v41(v25, v48);
    outlined release of AnnotatedFeatureStore((uint64_t)v50);
    v43 = (const void *)(v27 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore);
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_167_3(v49, v43);
    outlined retain of AnnotatedFeatureStore((uint64_t)v49);
    OUTLINED_FUNCTION_250();
    URL.appendingPathComponent(_:isDirectory:)();
    AnnotatedFeatureStore.write(to:)((uint64_t)v22);
    v41(v22, v42);
    outlined release of AnnotatedFeatureStore((uint64_t)v49);
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_215_0();
  URL.appendingPathComponent(_:)();
  URL.appendingPathExtension(_:)();
  v30 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v31 = v48;
  v30(v16, v48);
  v32 = v5 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v32, (uint64_t)v12, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  v33 = OUTLINED_FUNCTION_125_8();
  result = OUTLINED_FUNCTION_128((uint64_t)v12, 1, v33);
  if (v35)
  {
    __break(1u);
  }
  else
  {
    v36 = v5 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_44_7();
    outlined init with copy of URL?(v36, v2, &demangling cache variable for type metadata for MLImageClassifier.Model?);
    v37 = OUTLINED_FUNCTION_67_8();
    result = OUTLINED_FUNCTION_128(v2, 1, v37);
    if (!v35)
    {
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Classifier);
      v38 = v51;
      UpdatableSupervisedEstimator.writeWithOptimizer(_:to:overwrite:)();
      if (v38)
      {
        v39 = ((uint64_t (*)(char *, uint64_t))v30)(v19, v31);
        OUTLINED_FUNCTION_248(v39, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
        OUTLINED_FUNCTION_188_0(v40, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
        return v44 & 1;
      }
      v45 = ((uint64_t (*)(char *, uint64_t))v30)(v19, v31);
      OUTLINED_FUNCTION_248(v45, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
      OUTLINED_FUNCTION_188_0(v46, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
LABEL_12:
      v44 = 1;
      return v44 & 1;
    }
  }
  __break(1u);
  return result;
}

void ImageClassifierTrainingSessionDelegate.save(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OUTLINED_FUNCTION_83_16();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_53_0();
  v7 = v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v7, (uint64_t)v4, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_128((uint64_t)v4, 1, v5);
  if (v8)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v4, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v9 = 0xD000000000000031;
    *(_QWORD *)(v9 + 8) = 0x800000021AFF4540;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_BYTE *)(v9 + 48) = 2;
    swift_willThrow(0.0);
  }
  else
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v4, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
    MLImageClassifier.PersistentParameters.save(toSessionDirectory:)();
    outlined destroy of MLHandActionClassifier.DataSource(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  }
}

void ImageClassifierTrainingSessionDelegate.restore(from:phase:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  OUTLINED_FUNCTION_8_1();
  v29 = v0;
  v30 = v2;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_50();
  v8 = v6 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - v10;
  v12 = OUTLINED_FUNCTION_78();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = OUTLINED_FUNCTION_83_16();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_50();
  v20 = v18 - v19;
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (uint64_t *)((char *)&v29 - v23);
  v25 = *v4;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, v30, v12, v22);
  MLImageClassifier.PersistentParameters.init(sessionDirectory:)((uint64_t)v15, v24);
  if (!v1)
  {
    v26 = v8;
    v27 = v29 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_44_7();
    outlined init with copy of URL?(v27, (uint64_t)v11, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_128((uint64_t)v11, 1, v16);
    if (v28)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v11, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v24, v26, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
      OUTLINED_FUNCTION_159_0(v26, 0);
      OUTLINED_FUNCTION_44_7();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v26, v27, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
      swift_endAccess();
    }
    else
    {
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v11, v20, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
      v31 = v25;
      ImageClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:phase:)();
      OUTLINED_FUNCTION_52_23(v20);
      OUTLINED_FUNCTION_52_23((uint64_t)v24);
    }
  }
  OUTLINED_FUNCTION_7();
}

void ImageClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:phase:)()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  _QWORD **v4;
  _QWORD **v5;
  _QWORD **v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  _QWORD **v58;
  _QWORD **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  OUTLINED_FUNCTION_8_1();
  v54 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v56 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_208();
  v60 = v9;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_65_5();
  v61 = v11;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_65_5();
  v62 = v13;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_211();
  v63 = v15;
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_50();
  v19 = v17 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v54 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLImageClassifier.FeatureExtractorType, MLImageClassifier.FeatureExtractorType));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_14_5();
  v55 = *v3;
  v57 = (int *)OUTLINED_FUNCTION_83_16();
  v58 = v7;
  v25 = v57[6];
  v59 = v5;
  v26 = (uint64_t)v5 + v25;
  v27 = v1 + *(int *)(v23 + 48);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v7 + v25, v1, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  outlined init with copy of MLTrainingSessionParameters(v26, v27, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  OUTLINED_FUNCTION_145_5();
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of MLTrainingSessionParameters(v1, (uint64_t)v22, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    v40 = *(_QWORD *)v22;
    v41 = OUTLINED_FUNCTION_232_1();
    if ((_DWORD)v41 != 1)
    {
      v42 = *(_BYTE *)(v27 + 8);
      if ((v22[8] & 1) != 0)
      {
        if ((*(_BYTE *)(v27 + 8) & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        if (v40 != *(_QWORD *)v27)
          v42 = 1;
        if ((v42 & 1) == 0)
          goto LABEL_31;
      }
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_108_8();
      v47 = OUTLINED_FUNCTION_18_0(v45, v46);
LABEL_28:
      OUTLINED_FUNCTION_248(v47, type metadata accessor for MLImageClassifier.FeatureExtractorType);
      goto LABEL_38;
    }
LABEL_17:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_108_8();
    OUTLINED_FUNCTION_18_0(v43, v44);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for (MLImageClassifier.FeatureExtractorType, MLImageClassifier.FeatureExtractorType));
    goto LABEL_38;
  }
  outlined init with copy of MLTrainingSessionParameters(v1, v19, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  if (OUTLINED_FUNCTION_232_1() != 1)
  {
    outlined destroy of MLHandActionClassifier.DataSource(v19, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
    goto LABEL_17;
  }
  v28 = v63;
  OUTLINED_FUNCTION_24_4(v19, v63);
  v29 = v62;
  OUTLINED_FUNCTION_24_4(v27, v62);
  OUTLINED_FUNCTION_78();
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  v31 = v61;
  OUTLINED_FUNCTION_166_2(v28, v61);
  v32 = v60;
  OUTLINED_FUNCTION_166_2(v29, v60);
  if ((v30 & 1) == 0)
  {
    OUTLINED_FUNCTION_52_23(v32);
    OUTLINED_FUNCTION_52_23(v31);
LABEL_27:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_108_8();
    OUTLINED_FUNCTION_18_0(v48, v49);
    OUTLINED_FUNCTION_52_23(v29);
    OUTLINED_FUNCTION_52_23(v28);
    goto LABEL_28;
  }
  v33 = *(int *)(v56 + 20);
  v34 = (_QWORD *)(v31 + v33);
  v35 = *(_QWORD *)(v31 + v33 + 8);
  v36 = (_QWORD *)(v32 + v33);
  v37 = v36[1];
  if (!v35)
  {
    OUTLINED_FUNCTION_52_1();
    OUTLINED_FUNCTION_52_23(v32);
    OUTLINED_FUNCTION_52_23(v31);
    if (!v37)
      goto LABEL_30;
    goto LABEL_26;
  }
  if (!v37)
  {
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_245(v32);
    OUTLINED_FUNCTION_245(v31);
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (*v34 != *v36 || v35 != v37)
  {
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_165_4(v32);
    OUTLINED_FUNCTION_165_4(v31);
    OUTLINED_FUNCTION_123();
    if ((v39 & 1) != 0)
      goto LABEL_30;
    goto LABEL_27;
  }
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_245(v32);
  OUTLINED_FUNCTION_245(v31);
  OUTLINED_FUNCTION_123();
LABEL_30:
  OUTLINED_FUNCTION_52_23(v29);
  OUTLINED_FUNCTION_52_23(v28);
LABEL_31:
  OUTLINED_FUNCTION_248(v41, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  if (*(_QWORD **)((char *)v58 + v57[8]) != *(_QWORD **)((char *)v59 + v57[8]))
  {
    OUTLINED_FUNCTION_91_0();
    __asm { BR              X9 }
  }
  if (*(_QWORD **)((char *)v58 + v57[9]) != *(_QWORD **)((char *)v59 + v57[9]))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_108_8();
    *(_QWORD *)v53 = v52 + 3;
    *(_QWORD *)(v53 + 8) = 0x800000021AFF9970;
    *(_OWORD *)(v53 + 16) = 0u;
    *(_OWORD *)(v53 + 32) = 0u;
    *(_BYTE *)(v53 + 48) = 0;
    goto LABEL_37;
  }
  specialized static Dictionary<>.== infix(_:_:)(*v58, *v59);
  if ((v50 & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v51 = 1;
    *(_OWORD *)(v51 + 8) = 0u;
    *(_OWORD *)(v51 + 24) = 0u;
    *(_QWORD *)(v51 + 40) = 0;
    *(_BYTE *)(v51 + 48) = 4;
LABEL_37:
    swift_willThrow(0.0);
  }
LABEL_38:
  OUTLINED_FUNCTION_7();
}

uint64_t ImageClassifierTrainingSessionDelegate.evaluate(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[69] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  v1[70] = v2;
  v1[71] = *(_QWORD *)(v2 - 8);
  v1[72] = OUTLINED_FUNCTION_0();
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  v1[73] = OUTLINED_FUNCTION_0();
  v1[74] = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  v1[75] = OUTLINED_FUNCTION_4_36();
  v1[76] = OUTLINED_FUNCTION_25();
  v1[77] = OUTLINED_FUNCTION_4_12();
  v1[78] = OUTLINED_FUNCTION_4_36();
  v1[79] = OUTLINED_FUNCTION_25();
  v3 = OUTLINED_FUNCTION_207_3();
  v1[80] = v3;
  v1[81] = *(_QWORD *)(v3 - 8);
  v1[82] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?);
  v1[83] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  v1[84] = OUTLINED_FUNCTION_0();
  v1[85] = OUTLINED_FUNCTION_83_16();
  v1[86] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Model?);
  v1[87] = OUTLINED_FUNCTION_0();
  v1[88] = type metadata accessor for MLImageClassifier.Model();
  v1[89] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);

  OUTLINED_FUNCTION_110_2();
  v1 = v0[88];
  v2 = v0[87];
  v3 = OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_128_6(v3, v4, &demangling cache variable for type metadata for MLImageClassifier.Model?);
  OUTLINED_FUNCTION_128(v2, 1, v1);
  if (v11)
  {
    v5 = v0[87];
    v6 = &demangling cache variable for type metadata for MLImageClassifier.Model?;
  }
  else
  {
    v7 = v0[85];
    v8 = v0[84];
    v9 = v0[69];
    outlined init with take of MLHandPoseClassifier.ModelParameters(v0[87], v0[89], (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
    v10 = v9 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_44_7();
    outlined init with copy of URL?(v10, v8, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_128(v8, 1, v7);
    if (!v11)
    {
      v16 = v0[69];
      outlined init with take of MLHandPoseClassifier.ModelParameters(v0[84], v0[86], (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
      v17 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore;
      v0[90] = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore;
      v18 = v16 + v17;
      OUTLINED_FUNCTION_44_7();
      v0[91] = *(_QWORD *)(v18 + 88);
      OUTLINED_FUNCTION_84();
      v19 = (_QWORD *)OUTLINED_FUNCTION_8_63();
      v0[92] = v19;
      v20 = OUTLINED_FUNCTION_103_8(v19, (uint64_t)ImageClassifierTrainingSessionDelegate.evaluate(from:));
      return OUTLINED_FUNCTION_29_38(v20, v21, v22, v23);
    }
    v12 = v0[84];
    outlined destroy of MLHandActionClassifier.DataSource(v0[89], (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
    v6 = &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?;
    v5 = v12;
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, v6);
  OUTLINED_FUNCTION_36_36();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  v13 = OUTLINED_FUNCTION_215_3();
  return OUTLINED_FUNCTION_20_47(v13, v14, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v3);
  *(_QWORD *)(v2 + 744) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1)
    *(_QWORD *)(v2 + 752) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_21_45();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v17)(void);

  OUTLINED_FUNCTION_110_2();
  v1 = v0[83];
  v17 = (uint64_t (*)(void))v0[82];
  v2 = v0[69];
  MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v0[94], (uint64_t)(v0 + 63), &demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
  swift_bridgeObjectRelease();
  v0[67] = MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm;
  v4 = swift_bridgeObjectRetain();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v4, (uint64_t)(v0 + 66), &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  swift_bridgeObjectRelease();
  v0[65] = v5;
  v0[95] = OUTLINED_FUNCTION_213_2();
  OUTLINED_FUNCTION_220_1(&lazy protocol witness table cache variable for type [String] and conformance [A]);
  v0[96] = v6;
  ClassificationMetrics.init<A, B>(_:_:)();
  v0[97] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_130_1();
  v0[98] = type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_130_1();
  v7 = type metadata accessor for MLClassifierMetrics(0);
  v0[99] = v7;
  OUTLINED_FUNCTION_132_4(v1, v8, v9, v7);
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_221_2(v1, v10, &demangling cache variable for type metadata for MLClassifierMetrics?);
  OUTLINED_FUNCTION_259();
  ImageReader.init()();
  v11 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles;
  v0[100] = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFiles;
  v0[101] = *(_QWORD *)(v2 + v11);
  OUTLINED_FUNCTION_158_3((uint64_t)&async function pointer to specialized Transformer.applied<A, B>(to:eventHandler:));
  OUTLINED_FUNCTION_84();
  v12 = (_QWORD *)OUTLINED_FUNCTION_8_63();
  v0[102] = v12;
  *v12 = v0;
  v12[1] = ImageClassifierTrainingSessionDelegate.evaluate(from:);
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_29_38(v13, v14, v15, v17);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)*v1;
  OUTLINED_FUNCTION_63_10();
  v2[103] = v3;
  v2[104] = v0;
  OUTLINED_FUNCTION_73_7();
  v4 = v2[81];
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_62_30(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 552);
  if (!*(_QWORD *)(*(_QWORD *)(v1 + *(_QWORD *)(v0 + 800)) + 16))
    goto LABEL_4;
  v2 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  *(_QWORD *)(v0 + 840) = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  v3 = v1 + v2;
  OUTLINED_FUNCTION_44_7();
  if (*(_QWORD *)(*(_QWORD *)(v3 + 88) + 16))
  {
    v1 = *(_QWORD *)(v0 + 552);
LABEL_4:
    swift_bridgeObjectRelease();
    v4 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
    *(_QWORD *)(v0 + 888) = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
    v5 = v1 + v4;
    OUTLINED_FUNCTION_44_7();
    v6 = *(_QWORD *)(v5 + 88);
    *(_QWORD *)(v0 + 896) = v6;
    if (*(_QWORD *)(v6 + 16))
    {
      OUTLINED_FUNCTION_84();
      v7 = (_QWORD *)OUTLINED_FUNCTION_8_63();
      *(_QWORD *)(v0 + 904) = v7;
      *v7 = v0;
      v7[1] = ImageClassifierTrainingSessionDelegate.evaluate(from:);
      OUTLINED_FUNCTION_18();
      OUTLINED_FUNCTION_161_3();
      __asm { BR              X3 }
    }
    v9 = OUTLINED_FUNCTION_129_5();
    outlined destroy of MLHandActionClassifier.DataSource(v9, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
    OUTLINED_FUNCTION_74_18(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
    OUTLINED_FUNCTION_113_9();
    v11 = OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_60_16(v11, v12, &demangling cache variable for type metadata for MLClassifierMetrics?);
    OUTLINED_FUNCTION_259();
    OUTLINED_FUNCTION_42_29();
    swift_task_dealloc();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_264();
    OUTLINED_FUNCTION_161_3();
    __asm { BR              X2 }
  }
  v14 = *(_QWORD *)(v0 + 688);
  v15 = *(int **)(v0 + 680);
  v16 = *(_QWORD *)(v0 + 632);
  v17 = *(_QWORD *)(v0 + 624);
  v28 = *(_QWORD *)(v0 + 616);
  v18 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 584);
  outlined init with copy of MLTrainingSessionParameters(v14 + v15[5], v16, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  v19 = *(_QWORD *)(v14 + v15[8]);
  v20 = *(_QWORD *)(v14 + v15[9]);
  OUTLINED_FUNCTION_179_3(v14 + v15[6], v21, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_QWORD *)(v0 + 112) = v19;
  *(_QWORD *)(v0 + 120) = v20;
  outlined init with copy of MLTrainingSessionParameters(v16, v17, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  *(_QWORD *)(v0 + 288) = v28;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 264));
  OUTLINED_FUNCTION_146_7((uint64_t)boxed_opaque_existential_0);
  OUTLINED_FUNCTION_163_2();
  OUTLINED_FUNCTION_144_5();
  *(_QWORD *)(v0 + 256) = v29;
  v23 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 232));
  OUTLINED_FUNCTION_148_4((uint64_t)v23);
  OUTLINED_FUNCTION_154_3();
  OUTLINED_FUNCTION_198_3();
  outlined destroy of MLHandActionClassifier.DataSource(v16, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  OUTLINED_FUNCTION_188_2();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v18, v30, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  outlined destroy of MLImageClassifier.ModelParameters(v0 + 112);
  v24 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 848) = v24;
  *v24 = v0;
  v24[1] = ImageClassifierTrainingSessionDelegate.evaluate(from:);
  OUTLINED_FUNCTION_161_3();
  return MLImageClassifier.FeatureExtractor.init(type:)(v25, v26);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t (*v6)(void);

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_121_0(v3);
  v0[107] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_21_45();
  }
  else
  {
    v5 = (_QWORD *)OUTLINED_FUNCTION_73_14();
    v0[108] = (uint64_t)v5;
    *v5 = v2;
    v5[1] = ImageClassifierTrainingSessionDelegate.evaluate(from:);
    return OUTLINED_FUNCTION_2_56(v0[103], v6);
  }
}

{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_110_2();
  v1 = (uint64_t *)(v0[69] + v0[105]);
  specialized AnnotatedFeatureStore.init<A>(_:)(v0[110], (uint64_t)(v0 + 2));
  v2 = *v1;
  v3 = v1[1];
  memcpy(v1, v0 + 2, 0x60uLL);
  outlined consume of Data._Representation(v2, v3);
  OUTLINED_FUNCTION_80();
  v4 = v0[69];
  OUTLINED_FUNCTION_10_3();
  v5 = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  v0[111] = OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore;
  v6 = v4 + v5;
  OUTLINED_FUNCTION_44_7();
  v7 = *(_QWORD *)(v6 + 88);
  v0[112] = v7;
  if (*(_QWORD *)(v7 + 16))
  {
    OUTLINED_FUNCTION_84();
    v8 = (_QWORD *)OUTLINED_FUNCTION_8_63();
    v0[113] = v8;
    v9 = OUTLINED_FUNCTION_103_8(v8, (uint64_t)ImageClassifierTrainingSessionDelegate.evaluate(from:));
    return OUTLINED_FUNCTION_29_38(v9, v10, v11, v12);
  }
  else
  {
    v14 = OUTLINED_FUNCTION_129_5();
    outlined destroy of MLHandActionClassifier.DataSource(v14, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
    OUTLINED_FUNCTION_74_18(v15, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
    OUTLINED_FUNCTION_113_9();
    v16 = OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_60_16(v16, v17, &demangling cache variable for type metadata for MLClassifierMetrics?);
    OUTLINED_FUNCTION_259();
    OUTLINED_FUNCTION_36_36();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_38();
    OUTLINED_FUNCTION_120_2();
    v18 = OUTLINED_FUNCTION_264();
    return OUTLINED_FUNCTION_20_47(v18, v19, v20);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v3);
  *(_QWORD *)(v2 + 912) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1)
    *(_QWORD *)(v2 + 920) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_21_45();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v0[99];
  v10 = v0[86];
  v1 = v0[83];
  v2 = v0[72];
  v11 = v0[71];
  v12 = v0[89];
  v14 = v0[69];
  v13 = v0[70];
  MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v0[115], (uint64_t)(v0 + 64), &demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
  OUTLINED_FUNCTION_30();
  v0[68] = MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm;
  v4 = OUTLINED_FUNCTION_52_1();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d72ML38ImageClassifierTrainingSessionDelegateC8evaluate4fromSi_Sb8finishedtu26_tYaKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ANSSTf3nnnpk_nTf1cn_nTm(v4, (uint64_t)(v0 + 61), &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  OUTLINED_FUNCTION_30();
  v0[62] = v5;
  ClassificationMetrics.init<A, B>(_:_:)();
  outlined destroy of MLHandActionClassifier.DataSource(v10, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  outlined destroy of MLHandActionClassifier.DataSource(v12, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v1, v2, v13);
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_130_1();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v15);
  v6 = v14 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationMetrics;
  OUTLINED_FUNCTION_44_7();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v1, v6, &demangling cache variable for type metadata for MLClassifierMetrics?);
  swift_endAccess();
  OUTLINED_FUNCTION_42_29();
  swift_task_dealloc();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  swift_task_dealloc();
  swift_task_dealloc();
  v7 = OUTLINED_FUNCTION_264();
  return v8(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_110_2();
  v0 = OUTLINED_FUNCTION_235_2();
  outlined destroy of MLHandActionClassifier.DataSource(v0, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_198_0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  OUTLINED_FUNCTION_1_71();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_75_11();
  OUTLINED_FUNCTION_38();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_71_19();
  return OUTLINED_FUNCTION_12(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_110_2();
  v0 = OUTLINED_FUNCTION_235_2();
  outlined destroy of MLHandActionClassifier.DataSource(v0, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_198_0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  OUTLINED_FUNCTION_1_71();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_75_11();
  OUTLINED_FUNCTION_38();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_71_19();
  return OUTLINED_FUNCTION_12(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_110_2();
  v0 = OUTLINED_FUNCTION_235_2();
  outlined destroy of MLHandActionClassifier.DataSource(v0, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_198_0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  OUTLINED_FUNCTION_1_71();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_75_11();
  OUTLINED_FUNCTION_38();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_71_19();
  return OUTLINED_FUNCTION_12(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_110_2();
  outlined destroy of MLHandActionClassifier.DataSource(*(_QWORD *)(v0 + 688), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_204_0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_1_71();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_75_11();
  OUTLINED_FUNCTION_38();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_71_19();
  return OUTLINED_FUNCTION_12(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_110_2();
  v0 = OUTLINED_FUNCTION_235_2();
  outlined destroy of MLHandActionClassifier.DataSource(v0, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_198_0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  OUTLINED_FUNCTION_1_71();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_75_11();
  OUTLINED_FUNCTION_38();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_71_19();
  return OUTLINED_FUNCTION_12(v2);
}

uint64_t ImageClassifierTrainingSessionDelegate.evaluate(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v6 = *v2;
  v4 = v6;
  OUTLINED_FUNCTION_121_0(&v6);
  *(_QWORD *)(v4 + 872) = v1;
  swift_task_dealloc();
  if (v1)
  {
    outlined destroy of MLImageClassifier.FeatureExtractor(v4 + 192);
  }
  else
  {
    *(_QWORD *)(v4 + 880) = a1;
    outlined destroy of MLImageClassifier.FeatureExtractor(v4 + 192);
    OUTLINED_FUNCTION_30();
  }
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

uint64_t ImageClassifierTrainingSessionDelegate.deinit()
{
  uint64_t v0;

  outlined destroy of MLHandActionClassifier.DataSource(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_135_2(OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingFeatureStore);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_135_2(OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationFeatureStore);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_123();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_classifier, &demangling cache variable for type metadata for MLImageClassifier.Classifier?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLImageClassifier.Model?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_tablePrinter, &demangling cache variable for type metadata for TrainingTablePrinter?);
  return v0;
}

uint64_t ImageClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  ImageClassifierTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ImageClassifierTrainingSessionDelegate()
{
  return type metadata accessor for ImageClassifierTrainingSessionDelegate();
}

uint64_t type metadata accessor for ImageClassifierTrainingSessionDelegate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ImageClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for ImageClassifierTrainingSessionDelegate)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for ImageClassifierTrainingSessionDelegate()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLImageClassifier.PersistentParameters?, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.PersistentParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLImageClassifier.Classifier?, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Classifier);
      if (v2 <= 0x3F)
      {
        type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLImageClassifier.Model?, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Model);
        if (v3 <= 0x3F)
        {
          type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLClassifierMetrics?, (void (*)(uint64_t))type metadata accessor for MLClassifierMetrics);
          if (v4 <= 0x3F)
          {
            type metadata accessor for MLSoundClassifier.PersistentParameters?(319, (unint64_t *)&lazy cache variable for type metadata for TrainingTablePrinter?, (void (*)(uint64_t))type metadata accessor for TrainingTablePrinter);
            if (v5 <= 0x3F)
              swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance ImageClassifierTrainingSessionDelegate()
{
  ImageClassifierTrainingSessionDelegate.setUp()();
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance ImageClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
  ImageClassifierTrainingSessionDelegate.resume(from:)(a1);
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance ImageClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)ImageClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

void protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance ImageClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  ImageClassifierTrainingSessionDelegate.transitionTo(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance ImageClassifierTrainingSessionDelegate(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return ImageClassifierTrainingSessionDelegate.extractFeatures(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance ImageClassifierTrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return ImageClassifierTrainingSessionDelegate.train(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance ImageClassifierTrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance ImageClassifierTrainingSessionDelegate;
  return ImageClassifierTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance ImageClassifierTrainingSessionDelegate()
{
  return ImageClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)() & 1;
}

void protocol witness for TrainingSessionCodable.save(to:) in conformance ImageClassifierTrainingSessionDelegate()
{
  ImageClassifierTrainingSessionDelegate.save(to:)();
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance ImageClassifierTrainingSessionDelegate()
{
  ImageClassifierTrainingSessionDelegate.restore(from:phase:)();
}

uint64_t sub_21AFDE55C()
{
  return MEMORY[0x24BEE0D10];
}

void partial apply for closure #2 in ImageClassifierTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in ImageClassifierTrainingSessionDelegate.train(from:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t objectdestroyTm_8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21AFDE5B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)(a1);
}

uint64_t OUTLINED_FUNCTION_1_71()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_15_49()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_20_47(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_21_45()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_29_38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_33_37(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_36_36()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_38_28()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t OUTLINED_FUNCTION_40_30()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_42_29()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 712);
}

uint64_t OUTLINED_FUNCTION_47_33()
{
  return swift_task_switch();
}

void OUTLINED_FUNCTION_52_23(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandActionClassifier.DataSource(a1, v1);
}

uint64_t OUTLINED_FUNCTION_54_25()
{
  return dispatch thunk of Transformer.applied(to:eventHandler:)();
}

uint64_t OUTLINED_FUNCTION_57_26()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_62_30@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_65_23@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  return (*(uint64_t (**)(unint64_t))(a1 + 32))(v3+ ((*(unsigned __int8 *)(a1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(a1 + 80))+ *(_QWORD *)(a1 + 72) * v1);
}

uint64_t OUTLINED_FUNCTION_70_23()
{
  return Event.init(origin:itemCount:totalItemCount:metrics:)();
}

uint64_t OUTLINED_FUNCTION_71_19()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void OUTLINED_FUNCTION_74_18(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandActionClassifier.DataSource(v2, a2);
}

uint64_t OUTLINED_FUNCTION_76_15()
{
  return dispatch thunk of Transformer.applied(to:eventHandler:)();
}

uint64_t OUTLINED_FUNCTION_81_19()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_82_14()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_83_16()
{
  return type metadata accessor for MLImageClassifier.PersistentParameters();
}

uint64_t OUTLINED_FUNCTION_84_14()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_85_16()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_89_11()
{
  return Sequence.randomSplit<A, B>(by:seed:)();
}

uint64_t OUTLINED_FUNCTION_95_11()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_97_9()
{
  return AnnotatedFeature.feature.getter();
}

void OUTLINED_FUNCTION_101_13(_QWORD *a1, uint64_t *a2)
{
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(a1, a2);
}

uint64_t OUTLINED_FUNCTION_103_8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

__n128 OUTLINED_FUNCTION_105_7(double a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(v1 + 32);
  result = *(__n128 *)(v1 + 16);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

void OUTLINED_FUNCTION_111_9()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_113_9()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_114_8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_115_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?(v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(v12, a12);
}

uint64_t OUTLINED_FUNCTION_117_6()
{
  return type metadata accessor for MetricsKey();
}

uint64_t OUTLINED_FUNCTION_119_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_125_8()
{
  return type metadata accessor for MLImageClassifier.Classifier();
}

uint64_t OUTLINED_FUNCTION_127_7()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_128_6(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of URL?(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_129_5()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 688);
}

uint64_t OUTLINED_FUNCTION_132_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, a4);
}

uint64_t OUTLINED_FUNCTION_133_4()
{
  return 0x676E696E69617274;
}

uint64_t OUTLINED_FUNCTION_134_5()
{
  return AnnotatedFeature.init(feature:annotation:)();
}

uint64_t OUTLINED_FUNCTION_135_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined consume of Data._Representation(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

uint64_t OUTLINED_FUNCTION_136_5(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_137_5()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 544);
}

void OUTLINED_FUNCTION_142_1()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v2, v0, v1);
}

void OUTLINED_FUNCTION_144_5()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  outlined init with copy of MLTrainingSessionParameters(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_145_5()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_146_7(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with take of MLHandPoseClassifier.ModelParameters(v2, a1, v1);
}

uint64_t OUTLINED_FUNCTION_147_3()
{
  return MLShapedArrayProtocol.scalars.getter();
}

void OUTLINED_FUNCTION_148_4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with take of MLHandPoseClassifier.ModelParameters(v2, a1, v1);
}

void OUTLINED_FUNCTION_149_4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with take of MLHandPoseClassifier.ModelParameters(v2, a1, v1);
}

uint64_t OUTLINED_FUNCTION_150_4()
{
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_154_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_156_2@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 544);
}

uint64_t OUTLINED_FUNCTION_157_4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_158_3@<X0>(uint64_t a1@<X8>)
{
  int v1;

  return v1 + a1;
}

uint64_t OUTLINED_FUNCTION_162_3()
{
  return AnnotatedFeature.annotation.getter();
}

void OUTLINED_FUNCTION_163_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v0, v1, v2);
}

void OUTLINED_FUNCTION_165_4(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandActionClassifier.DataSource(a1, v1);
}

void OUTLINED_FUNCTION_166_2(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of MLTrainingSessionParameters(a1, a2, v2);
}

void *OUTLINED_FUNCTION_167_3(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

void OUTLINED_FUNCTION_168_3()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_172_1@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(v2, a1, v3);
}

void *OUTLINED_FUNCTION_177_2(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0x60uLL);
}

void OUTLINED_FUNCTION_179_3(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with copy of MLTrainingSessionParameters(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_181_2()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_182_2()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 344);
}

_QWORD *OUTLINED_FUNCTION_184_2(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  *result = v2;
  result[1] = v1;
  return result;
}

_QWORD *OUTLINED_FUNCTION_185_2(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  *result = v2;
  result[1] = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_186_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t *OUTLINED_FUNCTION_187_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 320) = a1;
  return __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v1 + 296));
}

void OUTLINED_FUNCTION_188_2()
{
  uint64_t v0;

  MLImageClassifier.ModelParameters.algorithm.getter(v0);
}

uint64_t OUTLINED_FUNCTION_189_3()
{
  return type metadata accessor for MLImageClassifier.Model();
}

void OUTLINED_FUNCTION_190_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 + 88) = (char *)&a9 - v9;
}

uint64_t OUTLINED_FUNCTION_191_3()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_193_2()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD);
  uint64_t v2;

  return v1(v2, *(_QWORD *)(v0 + 240));
}

uint64_t OUTLINED_FUNCTION_194_3()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 560);
}

uint64_t *OUTLINED_FUNCTION_195_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 240) = a1;
  return __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v1 + 216));
}

void OUTLINED_FUNCTION_198_3()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  outlined destroy of MLHandActionClassifier.DataSource(v1, v0);
}

void OUTLINED_FUNCTION_202_2()
{
  Swift::OpaquePointer v0;

  BlobsFile.appendBlob(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_204_4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_207_3()
{
  return type metadata accessor for ImageReader();
}

uint64_t OUTLINED_FUNCTION_211_2@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_213_2()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_214_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_215_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_216_3()
{
  return Dictionary.init(dictionaryLiteral:)();
}

void OUTLINED_FUNCTION_220_1(_QWORD *a1)
{
  uint64_t *v1;

  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(a1, v1);
}

void OUTLINED_FUNCTION_221_2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_222_1()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_225_2(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of URL?(a1, a2, v2);
}

void OUTLINED_FUNCTION_227_0(_QWORD *a1)
{
  uint64_t *v1;

  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(a1, v1);
}

uint64_t OUTLINED_FUNCTION_228_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

void OUTLINED_FUNCTION_229_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_231_2()
{
  return type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
}

uint64_t OUTLINED_FUNCTION_232_1()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_235_2()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 688);
}

uint64_t *initializeBufferWithCopyOfBuffer for MLSoundClassifier.Model(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v9 = (char *)&loc_21AFDEE14 + 4 * byte_21AFF1040[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v11 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
    *(uint64_t *)((char *)a1 + v11[5]) = *(uint64_t *)((char *)a2 + v11[5]);
    *(uint64_t *)((char *)a1 + v11[6]) = *(uint64_t *)((char *)a2 + v11[6]);
    v12 = v11[7];
    v13 = (char *)a1 + v12;
    v14 = (_OWORD *)((char *)a2 + v12);
    v15 = *(uint64_t *)((char *)a2 + v12 + 24);
    if (v15)
    {
      *((_QWORD *)v13 + 3) = v15;
      (**(void (***)(void))(v15 - 8))();
    }
    else
    {
      v16 = v14[1];
      *(_OWORD *)v13 = *v14;
      *((_OWORD *)v13 + 1) = v16;
    }
    v17 = v11[8];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    *(uint64_t *)((char *)a1 + v11[9]) = *(uint64_t *)((char *)a2 + v11[9]);
    v20 = *(int *)(a3 + 20);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
    else
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MLSoundClassifier.Model(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;

  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        v5 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 4u:
        v11 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      default:
        break;
    }
  }
  v6 = a1 + *(int *)(type metadata accessor for MLSoundClassifier.ModelParameters() + 28);
  if (*(_QWORD *)(v6 + 24))
    __swift_destroy_boxed_opaque_existential_0(v6);
  v7 = a1 + *(int *)(a2 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v8 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v8 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v9 = __swift_instantiateConcreteTypeFromMangledName(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
}

_QWORD *initializeWithCopy for MLSoundClassifier.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for MLSoundClassifier.DataSource();
      v8 = (char *)&loc_21AFDF308 + 4 * byte_21AFF104A[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v9 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)((char *)a1 + v9[5]) = *(_QWORD *)((char *)a2 + v9[5]);
  *(_QWORD *)((char *)a1 + v9[6]) = *(_QWORD *)((char *)a2 + v9[6]);
  v10 = v9[7];
  v11 = (char *)a1 + v10;
  v12 = (_OWORD *)((char *)a2 + v10);
  v13 = *(_QWORD *)((char *)a2 + v10 + 24);
  if (v13)
  {
    *((_QWORD *)v11 + 3) = v13;
    (**(void (***)(void))(v13 - 8))();
  }
  else
  {
    v14 = v12[1];
    *(_OWORD *)v11 = *v12;
    *((_OWORD *)v11 + 1) = v14;
  }
  v15 = v9[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)((char *)a1 + v9[9]) = *(_QWORD *)((char *)a2 + v9[9]);
  v18 = *(int *)(a3 + 20);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v21 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v21 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v22 = __swift_instantiateConcreteTypeFromMangledName(v21);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for MLSoundClassifier.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;

  if (a1 != a2)
  {
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)a1);
    v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v8 = (char *)&loc_21AFDF648 + 4 * byte_21AFF104F[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v9 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)((char *)a1 + v9[5]) = *(_QWORD *)((char *)a2 + v9[5]);
  *(_QWORD *)((char *)a1 + v9[6]) = *(_QWORD *)((char *)a2 + v9[6]);
  v10 = v9[7];
  v11 = (uint64_t)a1 + v10;
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *(_QWORD *)((char *)a2 + v10 + 24);
  if (*(_QWORD *)((char *)a1 + v10 + 24))
  {
    if (v13)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v11, v12);
      goto LABEL_14;
    }
    __swift_destroy_boxed_opaque_existential_0(v11);
  }
  else if (v13)
  {
    *(_QWORD *)(v11 + 24) = v13;
    (**(void (***)(uint64_t, char *))(v13 - 8))(v11, (char *)v12);
    goto LABEL_14;
  }
  v14 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v14;
LABEL_14:
  v15 = v9[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)v16 = v18;
  *(_QWORD *)((char *)a1 + v9[9]) = *(_QWORD *)((char *)a2 + v9[9]);
  if (a1 != a2)
  {
    v19 = *(int *)(a3 + 20);
    v20 = (char *)a2 + v19;
    v21 = (char *)a1 + v19;
    outlined destroy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>((uint64_t)a1 + v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v22 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    else
      v22 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    v23 = __swift_instantiateConcreteTypeFromMangledName(v22);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v20, v23);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for MLSoundClassifier.Model(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int EnumCaseMultiPayload;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;

  v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    goto LABEL_10;
  }
  v7 = type metadata accessor for MLSoundClassifier.DataSource();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    v9 = type metadata accessor for DataFrame();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
    *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
    *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
    v11 = v10[20];
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = *((_OWORD *)v13 + 1);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_OWORD *)v12 + 1) = v14;
    v12[32] = v13[32];
  }
  else
  {
    if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      goto LABEL_9;
    }
    v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
  }
  swift_storeEnumTagMultiPayload();
LABEL_9:
  swift_storeEnumTagMultiPayload();
LABEL_10:
  v16 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)&a1[v16[5]] = *(_QWORD *)&a2[v16[5]];
  *(_QWORD *)&a1[v16[6]] = *(_QWORD *)&a2[v16[6]];
  v17 = v16[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v21 = v16[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)&a1[v16[9]] = *(_QWORD *)&a2[v16[9]];
  v24 = *(int *)(a3 + 20);
  v25 = &a1[v24];
  v26 = &a2[v24];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v27 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v27 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for MLSoundClassifier.Model(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int EnumCaseMultiPayload;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;

  if (a1 != a2)
  {
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)a1);
    v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_11;
    }
    v7 = type metadata accessor for MLSoundClassifier.DataSource();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
      *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
      v11 = v10[20];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = *((_OWORD *)v13 + 1);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v14;
      v12[32] = v13[32];
    }
    else
    {
      if (EnumCaseMultiPayload > 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        goto LABEL_10;
      }
      v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
    }
    swift_storeEnumTagMultiPayload();
LABEL_10:
    swift_storeEnumTagMultiPayload();
  }
LABEL_11:
  v16 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  *(_QWORD *)&a1[v16[5]] = *(_QWORD *)&a2[v16[5]];
  *(_QWORD *)&a1[v16[6]] = *(_QWORD *)&a2[v16[6]];
  v17 = v16[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  if (*(_QWORD *)&a1[v17 + 24])
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v21 = v16[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v22[8] = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)&a1[v16[9]] = *(_QWORD *)&a2[v16[9]];
  if (a1 != a2)
  {
    v24 = *(int *)(a3 + 20);
    v25 = &a2[v24];
    v26 = &a1[v24];
    outlined destroy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>((uint64_t)&a1[v24]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v27 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    else
      v27 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    v28 = __swift_instantiateConcreteTypeFromMangledName(v27);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v25, v28);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.Model()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AFDFE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = OUTLINED_FUNCTION_7_65();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    v8 = v4 + *(int *)(a3 + 20);
  }
  return __swift_getEnumTagSinglePayload(v8, v3, v7);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.Model()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AFDFEC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_7_65();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    v10 = v5 + *(int *)(a4 + 20);
  }
  return __swift_storeEnumTagSinglePayload(v10, v4, v4, v9);
}

uint64_t type metadata accessor for MLSoundClassifier.Model()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLSoundClassifier.Model;
  if (!type metadata singleton initialization cache for MLSoundClassifier.Model)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for MLSoundClassifier.Model()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for MLSoundClassifier.ModelParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t MLSoundClassifier.Model.applied(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = OUTLINED_FUNCTION_0();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v5[10] = v7;
  v5[11] = *(_QWORD *)(v7 - 8);
  v5[12] = OUTLINED_FUNCTION_0();
  v5[13] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v5[14] = OUTLINED_FUNCTION_0();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLSoundClassifier.Model.applied(to:eventHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v1 = v0[14];
  v2 = v0[6];
  v3 = type metadata accessor for MLSoundClassifier.Model();
  outlined init with copy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(v2 + *(int *)(v3 + 20), v1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = v0[14];
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v0[8] + 32))(v0[9], v5, v0[7]);
    v6 = (_QWORD *)swift_task_alloc();
    v0[17] = v6;
    *v6 = v0;
    v6[1] = MLSoundClassifier.Model.applied(to:eventHandler:);
    return FullyConnectedNetworkClassifierModel.applied(to:eventHandler:)();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v0[11] + 32))(v0[12], v5, v0[10]);
    v8 = (_QWORD *)swift_task_alloc();
    v0[15] = v8;
    *v8 = v0;
    v8[1] = MLSoundClassifier.Model.applied(to:eventHandler:);
    return LogisticRegressionClassifierModel.applied(to:eventHandler:)();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  *v2 = *v1;
  *(_QWORD *)(v3 + 128) = v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_79_1(*(_QWORD *)(v0 + 88));
  OUTLINED_FUNCTION_10();
  swift_task_dealloc();
  OUTLINED_FUNCTION_19();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  *v2 = *v1;
  *(_QWORD *)(v3 + 144) = v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_79_1(*(_QWORD *)(v0 + 64));
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for Transformer.applied(to:eventHandler:) in conformance MLSoundClassifier.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLSoundClassifier.Model.applied(to:eventHandler:)(a1, a2, a3, a4);
}

unint64_t lazy protocol witness table accessor for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model;
  if (!lazy protocol witness table cache variable for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model)
  {
    v1 = type metadata accessor for MLSoundClassifier.Model();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLSoundClassifier.Model, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLSoundClassifier.Model and conformance MLSoundClassifier.Model);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_7_65()
{
  return type metadata accessor for MLSoundClassifier.ModelParameters();
}

uint64_t Heap._UnsafeHandle.buffer.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*Heap._UnsafeHandle.buffer.modify())(_QWORD)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

_QWORD *Heap._update<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v5 = *(_QWORD *)(a3 + 16);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v9[0] = *(_QWORD *)v3 + ((v7 + 32) & ~v7);
  v9[1] = v6;
  a1(v9[0], v6);
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v9, v9[0], v6);
}

uint64_t Heap._UnsafeHandle.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Heap._UnsafeHandle.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, a2 + *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1, a3);
}

void (*Heap._UnsafeHandle.subscript.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = UnsafeMutableBufferPointer.subscript.modify();
  return Heap._UnsafeHandle.subscript.modify;
}

void Heap._UnsafeHandle.subscript.modify(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t Heap._UnsafeHandle.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 40))(a4 + *(_QWORD *)(*(_QWORD *)(a6 - 8) + 72) * a2, a1, a6);
}

void Heap._UnsafeHandle.ptr(to:)()
{
  OUTLINED_FUNCTION_69_17();
}

uint64_t sub_21AFE055C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
    result += *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72) * v2;
  else
    __break(1u);
  return result;
}

void Heap._UnsafeHandle.extract(_:)()
{
  OUTLINED_FUNCTION_69_17();
}

uint64_t sub_21AFE05A0(uint64_t result)
{
  if (result)
    return UnsafeMutablePointer.move()();
  __break(1u);
  return result;
}

void Heap._UnsafeHandle.initialize(_:to:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  OUTLINED_FUNCTION_76_16();
}

uint64_t sub_21AFE0620(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v6 = result + *(_QWORD *)(v5 + 72) * v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v6, v3, v1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void Heap._UnsafeHandle.swapAt(_:_:)(Swift::Int a1, int a2, Swift::Int a3)
{
  UnsafeMutableBufferPointer.swapAt(_:_:)(a1, a3);
}

void Heap._UnsafeHandle.swapAt(_:with:)()
{
  OUTLINED_FUNCTION_76_16();
}

uint64_t sub_21AFE06B8()
{
  return swap<A>(_:_:)();
}

void Heap._UnsafeHandle.minValue(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_27_51(v2, v3, v4, v5);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_19_5();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_26_42(v8, v9, v10, v11, v12, v13, v14, v15, v16);
  OUTLINED_FUNCTION_66_25();
  OUTLINED_FUNCTION_55_28();
  OUTLINED_FUNCTION_7_28(v0);
  OUTLINED_FUNCTION_7_28(v1);
  OUTLINED_FUNCTION_9_5();
}

void Heap._UnsafeHandle.maxValue(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_27_51(v2, v3, v4, v5);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_19_5();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_26_42(v8, v9, v10, v11, v12, v13, v14, v15, v16);
  OUTLINED_FUNCTION_66_25();
  OUTLINED_FUNCTION_55_28();
  OUTLINED_FUNCTION_7_28(v0);
  OUTLINED_FUNCTION_7_28(v1);
  OUTLINED_FUNCTION_9_5();
}

void Heap._UnsafeHandle.bubbleUp(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_20_3();
  v24 = v1;
  v25 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_6_65();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - v12;
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 72);
    OUTLINED_FUNCTION_5_63((uint64_t)&v22 - v12, v4 + v15 * v8);
    v23 = v15;
    OUTLINED_FUNCTION_5_63(v0, v4 + v15 * ((v8 - 1) / 2));
    if ((v6 & 1) != 0)
      v16 = dispatch thunk of static Comparable.< infix(_:_:)();
    else
      v16 = dispatch thunk of static Comparable.> infix(_:_:)();
    v17 = v16;
    OUTLINED_FUNCTION_7_28(v0);
    OUTLINED_FUNCTION_7_28((uint64_t)v13);
    if ((v17 & 1) != 0)
    {
      --v6;
      OUTLINED_FUNCTION_44_32(v8, (v8 - 1) / 2);
      v8 = (v8 - 1) / 2;
    }
    if ((v6 & 1) != 0)
    {
      if (v8 >= 3)
      {
        do
        {
          v20 = v8 - 3;
          v21 = v23;
          OUTLINED_FUNCTION_5_63((uint64_t)v13, v4 + v23 * v8);
          OUTLINED_FUNCTION_5_63(v0, v4 + ((unint64_t)(v8 - 3) >> 2) * v21);
          LOBYTE(v21) = dispatch thunk of static Comparable.> infix(_:_:)();
          OUTLINED_FUNCTION_7_28(v0);
          OUTLINED_FUNCTION_7_28((uint64_t)v13);
          if ((v21 & 1) == 0)
            break;
          OUTLINED_FUNCTION_44_32(v8, (unint64_t)(v8 - 3) >> 2);
          v8 = (unint64_t)(v8 - 3) >> 2;
        }
        while (v20 > 0xB);
      }
    }
    else if (v8 >= 3)
    {
      do
      {
        v18 = v8 - 3;
        v19 = v23;
        OUTLINED_FUNCTION_5_63((uint64_t)v13, v4 + v23 * v8);
        OUTLINED_FUNCTION_5_63(v0, v4 + ((unint64_t)(v8 - 3) >> 2) * v19);
        LOBYTE(v19) = OUTLINED_FUNCTION_3_61();
        OUTLINED_FUNCTION_7_28(v0);
        OUTLINED_FUNCTION_7_28((uint64_t)v13);
        if ((v19 & 1) == 0)
          break;
        OUTLINED_FUNCTION_44_32(v8, (unint64_t)(v8 - 3) >> 2);
        v8 = (unint64_t)(v8 - 3) >> 2;
      }
      while (v18 > 0xB);
    }
  }
  OUTLINED_FUNCTION_9_5();
}

void Heap._UnsafeHandle.trickleDownMin(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[18];

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_41_31(v0, v1, v2, v3, v4, v5);
  MEMORY[0x24BDAC7A8](v6);
  v20[1] = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_77_17();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_127_3();
  MEMORY[0x24BDAC7A8](v10);
  v20[4] = (char *)v20 - v11;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v12);
  v20[5] = (char *)v20 - v13;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v14);
  v20[15] = (char *)v20 - v15;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_32_31(v17, v18, v19);
}

void sub_21AFE0A60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;

  if (a1)
  {
    *(_QWORD *)(v8 - 112) = *(_QWORD *)(v5 + 72);
    OUTLINED_FUNCTION_13_61();
    OUTLINED_FUNCTION_56_24();
    if (v17 != v18)
    {
      OUTLINED_FUNCTION_70_24();
      OUTLINED_FUNCTION_19_46();
      v9 = *(_QWORD *)(v8 - 184);
      OUTLINED_FUNCTION_11_62(v9, v6 + v1 * v2);
      v10 = OUTLINED_FUNCTION_3_61();
      OUTLINED_FUNCTION_0_81(v9);
      OUTLINED_FUNCTION_0_81(v4);
      if ((v10 & 1) != 0)
        v11 = v3;
      else
        v11 = v3 + 1;
      *(_QWORD *)(v8 - 96) = v11;
      v12 = v3 + 2;
      OUTLINED_FUNCTION_11_62(v4, v6 + v12 * v2);
      OUTLINED_FUNCTION_11_62(v9, v6 + v7 * v2);
      v13 = OUTLINED_FUNCTION_45_32();
      OUTLINED_FUNCTION_0_81(v9);
      OUTLINED_FUNCTION_0_81(v4);
      if ((v13 & 1) == 0)
        v12 = *(_QWORD *)(v8 - 160);
      OUTLINED_FUNCTION_11_62(v4, v6 + *(_QWORD *)(v8 - 96) * v2);
      OUTLINED_FUNCTION_11_62(v9, v6 + v12 * v2);
      v14 = OUTLINED_FUNCTION_8_67();
      OUTLINED_FUNCTION_0_81(v9);
      OUTLINED_FUNCTION_0_81(v4);
      if ((v14 & 1) != 0)
        v15 = *(_QWORD *)(v8 - 96);
      else
        v15 = v12;
      OUTLINED_FUNCTION_11_62(v4, v6 + v15 * v2);
      v16 = OUTLINED_FUNCTION_8_67();
      OUTLINED_FUNCTION_0_81(v4);
      if ((v16 & 1) != 0)
        OUTLINED_FUNCTION_1_72();
      OUTLINED_FUNCTION_50_30();
    }
    else
    {
      OUTLINED_FUNCTION_71_20();
      if (v17 != v18)
      {
        OUTLINED_FUNCTION_20_48();
        Heap._UnsafeHandle._minDescendant(c0:gc0:)();
        OUTLINED_FUNCTION_22_43(v19);
        *(_QWORD *)(v8 - 128) = v1;
        v20 = OUTLINED_FUNCTION_80_16();
        *(_QWORD *)(v8 - 144) = v5;
        OUTLINED_FUNCTION_0_81(v4);
        if ((v20 & 1) != 0)
          OUTLINED_FUNCTION_1_72();
        OUTLINED_FUNCTION_81_20();
      }
    }
    OUTLINED_FUNCTION_63_22();
    OUTLINED_FUNCTION_1_72();
  }
  __break(1u);
  JUMPOUT(0x21AFE0D90);
}

void Heap._UnsafeHandle._trickleDownMin(node:value:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_40_31(v8, v9, v10, v11, v12, v13);
  MEMORY[0x24BDAC7A8](v14);
  v41[0] = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v16);
  v41[1] = (char *)v41 - v17;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v18);
  v41[2] = (char *)v41 - v19;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v20);
  v42 = (uint64_t)v41 - v21;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_17_41(v23);
  v43 = v25;
  if (v26 != v27)
  {
    v28 = *(_QWORD *)(v4 + 72);
    OUTLINED_FUNCTION_52_24();
    v29 = v6 + v28 * v0;
    v30 = v28;
    v31 = v42;
    OUTLINED_FUNCTION_5_63(v42, v29);
    v32 = OUTLINED_FUNCTION_3_61();
    OUTLINED_FUNCTION_6_71(v31);
    OUTLINED_FUNCTION_6_71(v3);
    if ((v32 & 1) != 0)
      v33 = v5;
    else
      v33 = v5 + 1;
    v45 = v33;
    v34 = v5 + 2;
    OUTLINED_FUNCTION_5_63(v3, v6 + v30 * v34);
    OUTLINED_FUNCTION_5_63(v31, v6 + v30 * v2);
    v35 = OUTLINED_FUNCTION_46_30();
    OUTLINED_FUNCTION_6_71(v31);
    OUTLINED_FUNCTION_6_71(v3);
    if ((v35 & 1) == 0)
      v34 = v44;
    OUTLINED_FUNCTION_5_63(v3, v6 + v45 * v30);
    OUTLINED_FUNCTION_5_63(v31, v6 + v34 * v30);
    v36 = OUTLINED_FUNCTION_54_26();
    OUTLINED_FUNCTION_6_71(v31);
    OUTLINED_FUNCTION_6_71(v3);
    if ((v36 & 1) != 0)
      v37 = v45;
    else
      v37 = v34;
    OUTLINED_FUNCTION_5_63(v3, v6 + v37 * v30);
    v38 = OUTLINED_FUNCTION_3_61();
    OUTLINED_FUNCTION_6_71(v3);
    if ((v38 & 1) != 0)
      OUTLINED_FUNCTION_1_72();
  }
  else if (((2 * v24) | 1) < v7)
  {
    OUTLINED_FUNCTION_30_39();
    Heap._UnsafeHandle._minDescendant(c0:gc0:)();
    OUTLINED_FUNCTION_18_46(v39, v40);
    OUTLINED_FUNCTION_79_15();
    OUTLINED_FUNCTION_59_28();
    if ((v0 & 1) != 0)
    {
      v45 = v1;
      v44 = v7;
      v42 = v4;
      OUTLINED_FUNCTION_2_71();
    }
  }
  OUTLINED_FUNCTION_9_5();
}

void Heap._UnsafeHandle._minDescendant(c0:gc0:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_33_38();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_6_65();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_82_15();
  if (v12 != v13)
  {
    OUTLINED_FUNCTION_74_19();
    if (v12 != v13)
    {
      v15 = OUTLINED_FUNCTION_34_35(v14);
      OUTLINED_FUNCTION_16_52(v15, v5 + v0 * v4);
      v16 = OUTLINED_FUNCTION_7_66();
      OUTLINED_FUNCTION_0_81(v3);
      OUTLINED_FUNCTION_0_81(v1);
      if ((v16 & 1) != 0)
        v17 = v6;
      else
        v17 = v6 + 1;
      v18 = OUTLINED_FUNCTION_132(v1, v5 + v17 * v0);
      OUTLINED_FUNCTION_16_52(v18, v5 + v0 * v21);
      OUTLINED_FUNCTION_7_66();
      OUTLINED_FUNCTION_0_81(v3);
      OUTLINED_FUNCTION_0_81(v1);
    }
    else
    {
      v19 = OUTLINED_FUNCTION_132(v1, v5 + v0 * (v4 + 1));
      OUTLINED_FUNCTION_16_52(v19, v5 + v0 * v6);
      OUTLINED_FUNCTION_15_50();
      OUTLINED_FUNCTION_0_81(v3);
      OUTLINED_FUNCTION_0_81(v1);
      v20 = v6 + 1;
      if (v20 < v7)
      {
        OUTLINED_FUNCTION_51_33();
        OUTLINED_FUNCTION_11_62(v3, v5 + v2 * v20);
        OUTLINED_FUNCTION_15_50();
        OUTLINED_FUNCTION_0_81(v3);
        OUTLINED_FUNCTION_0_81(v1);
      }
    }
  }
  else if (v4 + 1 < v7)
  {
    OUTLINED_FUNCTION_28_41(v10, v11);
    OUTLINED_FUNCTION_68_25();
    OUTLINED_FUNCTION_7_66();
    OUTLINED_FUNCTION_6_71(v3);
    OUTLINED_FUNCTION_6_71(v1);
  }
  OUTLINED_FUNCTION_9_5();
}

void Heap._UnsafeHandle.trickleDownMax(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[18];

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_41_31(v0, v1, v2, v3, v4, v5);
  MEMORY[0x24BDAC7A8](v6);
  v20[1] = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_77_17();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_127_3();
  MEMORY[0x24BDAC7A8](v10);
  v20[4] = (char *)v20 - v11;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v12);
  v20[5] = (char *)v20 - v13;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v14);
  v20[15] = (char *)v20 - v15;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_32_31(v17, v18, v19);
}

void sub_21AFE1398(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;

  if (a1)
  {
    *(_QWORD *)(v8 - 112) = *(_QWORD *)(v5 + 72);
    OUTLINED_FUNCTION_13_61();
    OUTLINED_FUNCTION_56_24();
    if (v17 != v18)
    {
      OUTLINED_FUNCTION_70_24();
      OUTLINED_FUNCTION_19_46();
      v9 = *(_QWORD *)(v8 - 184);
      OUTLINED_FUNCTION_11_62(v9, v6 + v1 * v2);
      v10 = OUTLINED_FUNCTION_3_61();
      OUTLINED_FUNCTION_0_81(v9);
      OUTLINED_FUNCTION_0_81(v4);
      if ((v10 & 1) != 0)
        v11 = v3 + 1;
      else
        v11 = v3;
      *(_QWORD *)(v8 - 96) = v11;
      v12 = v3 + 2;
      OUTLINED_FUNCTION_11_62(v4, v6 + v12 * v2);
      OUTLINED_FUNCTION_11_62(v9, v6 + v7 * v2);
      v13 = OUTLINED_FUNCTION_45_32();
      OUTLINED_FUNCTION_0_81(v9);
      OUTLINED_FUNCTION_0_81(v4);
      if ((v13 & 1) != 0)
        v12 = *(_QWORD *)(v8 - 160);
      OUTLINED_FUNCTION_11_62(v4, v6 + *(_QWORD *)(v8 - 96) * v2);
      OUTLINED_FUNCTION_11_62(v9, v6 + v12 * v2);
      v14 = OUTLINED_FUNCTION_8_67();
      OUTLINED_FUNCTION_0_81(v9);
      OUTLINED_FUNCTION_0_81(v4);
      if ((v14 & 1) != 0)
        v15 = v12;
      else
        v15 = *(_QWORD *)(v8 - 96);
      OUTLINED_FUNCTION_11_62(v4, v6 + v15 * v2);
      v16 = OUTLINED_FUNCTION_8_67();
      OUTLINED_FUNCTION_0_81(v4);
      if ((v16 & 1) != 0)
        OUTLINED_FUNCTION_1_72();
      OUTLINED_FUNCTION_50_30();
    }
    else
    {
      OUTLINED_FUNCTION_71_20();
      if (v17 != v18)
      {
        OUTLINED_FUNCTION_20_48();
        Heap._UnsafeHandle._maxDescendant(c0:gc0:)();
        OUTLINED_FUNCTION_22_43(v19);
        *(_QWORD *)(v8 - 128) = v1;
        v20 = OUTLINED_FUNCTION_80_16();
        *(_QWORD *)(v8 - 144) = v5;
        OUTLINED_FUNCTION_0_81(v4);
        if ((v20 & 1) != 0)
          OUTLINED_FUNCTION_1_72();
        OUTLINED_FUNCTION_81_20();
      }
    }
    OUTLINED_FUNCTION_63_22();
    OUTLINED_FUNCTION_1_72();
  }
  __break(1u);
  JUMPOUT(0x21AFE16C8);
}

void Heap._UnsafeHandle._trickleDownMax(node:value:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_40_31(v8, v9, v10, v11, v12, v13);
  MEMORY[0x24BDAC7A8](v14);
  v41[0] = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v16);
  v41[1] = (char *)v41 - v17;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v18);
  v41[2] = (char *)v41 - v19;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v20);
  v42 = (uint64_t)v41 - v21;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_17_41(v23);
  v43 = v25;
  if (v26 != v27)
  {
    v28 = *(_QWORD *)(v4 + 72);
    OUTLINED_FUNCTION_52_24();
    v29 = v6 + v28 * v0;
    v30 = v28;
    v31 = v42;
    OUTLINED_FUNCTION_5_63(v42, v29);
    v32 = OUTLINED_FUNCTION_3_61();
    OUTLINED_FUNCTION_6_71(v31);
    OUTLINED_FUNCTION_6_71(v3);
    if ((v32 & 1) != 0)
      v33 = v5 + 1;
    else
      v33 = v5;
    v45 = v33;
    v34 = v5 + 2;
    OUTLINED_FUNCTION_5_63(v3, v6 + v30 * v34);
    OUTLINED_FUNCTION_5_63(v31, v6 + v30 * v2);
    v35 = OUTLINED_FUNCTION_46_30();
    OUTLINED_FUNCTION_6_71(v31);
    OUTLINED_FUNCTION_6_71(v3);
    if ((v35 & 1) != 0)
      v34 = v44;
    OUTLINED_FUNCTION_5_63(v3, v6 + v45 * v30);
    OUTLINED_FUNCTION_5_63(v31, v6 + v34 * v30);
    v36 = OUTLINED_FUNCTION_54_26();
    OUTLINED_FUNCTION_6_71(v31);
    OUTLINED_FUNCTION_6_71(v3);
    if ((v36 & 1) != 0)
      v37 = v34;
    else
      v37 = v45;
    OUTLINED_FUNCTION_5_63(v3, v6 + v37 * v30);
    v38 = OUTLINED_FUNCTION_3_61();
    OUTLINED_FUNCTION_6_71(v3);
    if ((v38 & 1) != 0)
      OUTLINED_FUNCTION_1_72();
  }
  else if (((2 * v24) | 1) < v7)
  {
    OUTLINED_FUNCTION_30_39();
    Heap._UnsafeHandle._maxDescendant(c0:gc0:)();
    OUTLINED_FUNCTION_18_46(v39, v40);
    OUTLINED_FUNCTION_79_15();
    OUTLINED_FUNCTION_59_28();
    if ((v0 & 1) != 0)
    {
      v45 = v1;
      v44 = v7;
      v42 = v4;
      OUTLINED_FUNCTION_2_71();
    }
  }
  OUTLINED_FUNCTION_9_5();
}

void Heap._UnsafeHandle._maxDescendant(c0:gc0:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_33_38();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_6_65();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_82_15();
  if (v12 != v13)
  {
    OUTLINED_FUNCTION_74_19();
    if (v12 != v13)
    {
      v15 = OUTLINED_FUNCTION_34_35(v14);
      OUTLINED_FUNCTION_16_52(v15, v5 + v0 * v4);
      v16 = OUTLINED_FUNCTION_7_66();
      OUTLINED_FUNCTION_0_81(v3);
      OUTLINED_FUNCTION_0_81(v1);
      if ((v16 & 1) != 0)
        v17 = v6 + 1;
      else
        v17 = v6;
      v18 = OUTLINED_FUNCTION_132(v1, v5 + v17 * v0);
      OUTLINED_FUNCTION_16_52(v18, v5 + v0 * v21);
      OUTLINED_FUNCTION_7_66();
      OUTLINED_FUNCTION_0_81(v3);
      OUTLINED_FUNCTION_0_81(v1);
    }
    else
    {
      v19 = OUTLINED_FUNCTION_132(v1, v5 + v0 * (v4 + 1));
      OUTLINED_FUNCTION_16_52(v19, v5 + v0 * v6);
      OUTLINED_FUNCTION_15_50();
      OUTLINED_FUNCTION_0_81(v3);
      OUTLINED_FUNCTION_0_81(v1);
      v20 = v6 + 1;
      if (v20 < v7)
      {
        OUTLINED_FUNCTION_51_33();
        OUTLINED_FUNCTION_11_62(v3, v5 + v2 * v20);
        OUTLINED_FUNCTION_15_50();
        OUTLINED_FUNCTION_0_81(v3);
        OUTLINED_FUNCTION_0_81(v1);
      }
    }
  }
  else if (v4 + 1 < v7)
  {
    OUTLINED_FUNCTION_28_41(v10, v11);
    OUTLINED_FUNCTION_68_25();
    OUTLINED_FUNCTION_7_66();
    OUTLINED_FUNCTION_6_71(v3);
    OUTLINED_FUNCTION_6_71(v1);
  }
  OUTLINED_FUNCTION_9_5();
}

Swift::Void __swiftcall Heap._UnsafeHandle.heapify()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;

  if (v0 < 2)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_20_3();
    v2 = v1 / 2;
    v3 = 63 - __clz(v1 / 2);
    do
    {
      v4 = ~(-1 << v3);
      v5 = (1 << (v3 + 1)) - 2;
      if (v5 >= v2)
        v5 = v1 / 2 - 1;
      if (v2 > v4)
        v6 = ~(-1 << v3);
      else
        v6 = 0;
      if (v2 > v4)
        v7 = v5;
      else
        v7 = 0;
      v8 = v2 <= v4 || v7 < v6;
      v9 = v8;
      if ((v3 & 1) != 0)
      {
        if ((v9 & 1) == 0)
        {
          OUTLINED_FUNCTION_53_26();
          Heap._UnsafeHandle.trickleDownMax(_:)();
        }
      }
      else if ((v9 & 1) == 0)
      {
        OUTLINED_FUNCTION_53_26();
        Heap._UnsafeHandle.trickleDownMin(_:)();
      }
      v8 = v3-- <= 0;
    }
    while (!v8);
    OUTLINED_FUNCTION_9_5();
  }
}

_QWORD *$defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3)
        return (_QWORD *)type metadata accessor for ContiguousArray();
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Heap._UnsafeHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Heap._UnsafeHandle);
}

uint64_t OUTLINED_FUNCTION_0_81(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_1_72()
{
  JUMPOUT(0x22075AD98);
}

void OUTLINED_FUNCTION_2_71()
{
  JUMPOUT(0x22075AD98);
}

uint64_t OUTLINED_FUNCTION_3_61()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_5_63(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_6_71(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_7_66()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_8_67()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_11_62(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_13_61()
{
  return UnsafeMutablePointer.move()();
}

uint64_t OUTLINED_FUNCTION_15_50()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_16_52(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  return v3(v4, a2, v2);
}

uint64_t OUTLINED_FUNCTION_17_41(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(result + 8);
  *(_QWORD *)(v2 - 128) = v1;
  *(_QWORD *)(v2 - 120) = result;
  *(_QWORD *)(v2 - 96) = v3 + 2;
  return result;
}

uint64_t OUTLINED_FUNCTION_18_46(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 96) = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 128) + 16))(v4, v3 + a1 * *(_QWORD *)(*(_QWORD *)(v5 - 128) + 72), v2);
}

uint64_t OUTLINED_FUNCTION_19_46()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 160) = v0;
  *(_QWORD *)(v4 - 152) = v1;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v4 - 120))(*(_QWORD *)(v4 - 104), *(_QWORD *)(v4 - 168) + v3 * *(_QWORD *)(v4 - 112), v2);
}

void OUTLINED_FUNCTION_20_48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = v1;
  *(_QWORD *)(v2 - 200) = v0;
}

uint64_t OUTLINED_FUNCTION_21_46()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = (v0 - 1) / 2;
  *(_QWORD *)(v5 - 152) = v6;
  return v2(v3, *(_QWORD *)(v5 - 168) + v6 * v4, v1);
}

uint64_t OUTLINED_FUNCTION_22_43(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(v4 - 104);
  v6 = a1 * *(_QWORD *)(v4 - 112);
  *(_QWORD *)(v4 - 96) = v6;
  v7 = v3 + v6;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v4 - 120) = v8;
  return v8(v5, v7, v1);
}

uint64_t OUTLINED_FUNCTION_25_43()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  return v4(v3, v2 + (v5 - 1) / 2 * v1, v0);
}

uint64_t OUTLINED_FUNCTION_26_42(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&a9 - v9, a5 + *(_QWORD *)(v10 + 72) * a1, a7);
}

void OUTLINED_FUNCTION_27_51(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 - 96) = a2;
  *(_QWORD *)(v4 - 88) = a4;
}

uint64_t OUTLINED_FUNCTION_28_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(v6 + 72);
  *(_QWORD *)(v7 - 96) = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v5 + v8 * v4, v2);
}

void OUTLINED_FUNCTION_29_39()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 136) += 2;
}

uint64_t OUTLINED_FUNCTION_31_38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1, v3, v0);
}

void OUTLINED_FUNCTION_32_31(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 - 168) = a3;
  JUMPOUT(0x22075AD98);
}

uint64_t OUTLINED_FUNCTION_34_35@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 96) = a1;
  return v4(v3, v5 + v1 * v6, v2);
}

void OUTLINED_FUNCTION_35_29()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) += 2;
}

uint64_t OUTLINED_FUNCTION_36_37()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 - 120))(*(_QWORD *)(v2 - 104), v1, v0);
}

uint64_t OUTLINED_FUNCTION_37_24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 128) + 32);
  *(_QWORD *)(v3 - 128) = v4;
  return v4(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_38_29@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_39_30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 - 120))(*(_QWORD *)(v2 - 104), v1, v0);
}

void OUTLINED_FUNCTION_40_31(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 - 88) = a6;
  *(_QWORD *)(v6 - 112) = a2;
}

void OUTLINED_FUNCTION_41_31(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 - 88) = a6;
  *(_QWORD *)(v6 - 136) = a2;
}

uint64_t OUTLINED_FUNCTION_42_30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 152))(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_43_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 - 120))(*(_QWORD *)(v2 - 104), v1, v0);
}

void OUTLINED_FUNCTION_44_32(Swift::Int a1, Swift::Int a2)
{
  UnsafeMutableBufferPointer.swapAt(_:_:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_45_32()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_46_30()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_47_34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 128) + 32))(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_48_29()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 144) + 32))(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_49_28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t, uint64_t);
  uint64_t v3;

  return v2(*(_QWORD *)(v3 - 104), v1, v0);
}

uint64_t OUTLINED_FUNCTION_51_33()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 112))(v1, v3 + v2 * *(_QWORD *)(v4 - 120), v0);
}

uint64_t OUTLINED_FUNCTION_52_24()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 136) = v3;
  return v1(v4, v6 + v2 * v5, v0);
}

uint64_t OUTLINED_FUNCTION_53_26()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_54_26()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_55_28()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

void OUTLINED_FUNCTION_56_24()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 176) = v0;
}

uint64_t OUTLINED_FUNCTION_57_27()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 128))(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_59_28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_60_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 104))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_61_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_62_31()
{
  return swap<A>(_:_:)();
}

uint64_t OUTLINED_FUNCTION_63_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v1, v3, v0);
}

uint64_t OUTLINED_FUNCTION_64_21()
{
  return swap<A>(_:_:)();
}

uint64_t OUTLINED_FUNCTION_66_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  return v4(v5, v2 + v0 * v3, v1);
}

uint64_t OUTLINED_FUNCTION_67_24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_68_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  return v5(v3, v4 + v0 * v2, v1);
}

void OUTLINED_FUNCTION_69_17()
{
  JUMPOUT(0x22075AD98);
}

void OUTLINED_FUNCTION_70_24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 - 208) = v1;
  *(_QWORD *)(v4 - 200) = v0;
  v5 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v4 - 128) = v3;
  *(_QWORD *)(v4 - 120) = v5;
  *(_QWORD *)(v4 - 144) = v2;
}

uint64_t OUTLINED_FUNCTION_71_20()
{
  uint64_t v0;

  return (2 * v0) | 1;
}

uint64_t OUTLINED_FUNCTION_72_18()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

void OUTLINED_FUNCTION_75_18()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 120);
  v3 = *(_QWORD *)(v1 - 96);
  *v2 = v0;
  v2[1] = v3;
}

void OUTLINED_FUNCTION_76_16()
{
  JUMPOUT(0x22075AD98);
}

uint64_t OUTLINED_FUNCTION_79_15()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_80_16()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t Heap._storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*Heap._storage.modify())(_QWORD)
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t Heap.init()()
{
  static Array._allocateUninitialized(_:)();
  return ContiguousArray.init(arrayLiteral:)();
}

Swift::Void __swiftcall Heap.reserveCapacity(_:)(Swift::Int a1)
{
  OUTLINED_FUNCTION_14_59();
  ContiguousArray.reserveCapacity(_:)(a1);
}

uint64_t Heap.isEmpty.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_3_62();
  MEMORY[0x22075B938](MEMORY[0x24BEE2A60], v0);
  return Collection.isEmpty.getter() & 1;
}

uint64_t Heap.unordered.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_3_62();
  swift_retain();
  MEMORY[0x22075B938](MEMORY[0x24BEE2A48], v0);
  return Array.init<A>(_:)();
}

void Heap.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, __n128))(v3 + 16))((char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  OUTLINED_FUNCTION_6_72();
  ContiguousArray.append(_:)();
  ContiguousArray._makeMutableAndUnique()();
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v7 = *(_QWORD *)v2 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v8[0] = v7;
  v8[1] = v6;
  closure #1 in Heap.insert(_:)(v7, v6);
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v8, v7, v6);
  OUTLINED_FUNCTION_164();
}

void closure #1 in Heap.insert(_:)(uint64_t a1, uint64_t a2)
{
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else if ((unint64_t)(a2 - 1) <= 0x7FFFFFFFFFFFFFFELL)
  {
    Heap._UnsafeHandle.bubbleUp(_:)();
    return;
  }
  __break(1u);
}

uint64_t Heap.min()()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_3_62();
  MEMORY[0x22075B938](MEMORY[0x24BEE2A60], v0);
  return Collection.first.getter();
}

uint64_t Heap.max()()
{
  type metadata accessor for Optional();
  return ContiguousArray.withUnsafeBufferPointer<A>(_:)();
}

uint64_t closure #1 in Heap.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;
  _QWORD v20[4];

  v7 = *(_QWORD **)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v20 - v12;
  if (v11 < 3)
  {
    v20[0] = a1;
    v20[1] = v11;
    v19 = type metadata accessor for UnsafeBufferPointer();
    MEMORY[0x22075B938](MEMORY[0x24BEE09D0], v19);
    return BidirectionalCollection.last.getter();
  }
  else
  {
    v15 = v7[9];
    v20[3] = v3;
    v16 = (void (*)(char *, uint64_t, uint64_t))v7[2];
    ((void (*)(char *, uint64_t, uint64_t, __n128))v16)((char *)v20 - v12, a1 + v15, a2, v13);
    v16(v9, a1 + 2 * v15, a2);
    max<A>(_:_:)();
    v17 = (void (*)(char *, uint64_t))v7[1];
    v17(v9, a2);
    v17(v14, a2);
    return __swift_storeEnumTagSinglePayload(a3, 0, 1, a2);
  }
}

uint64_t Heap.popMin()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  MEMORY[0x24BDAC7A8](a1);
  if (OUTLINED_FUNCTION_0_82() >= 1)
  {
    OUTLINED_FUNCTION_6_72();
    OUTLINED_FUNCTION_10_59();
  }
  return __swift_storeEnumTagSinglePayload(a2, 1, 1, v3);
}

void closure #1 in Heap.popMin()()
{
  MEMORY[0x22075AD98]();
  swap<A>(_:_:)();
  Heap._UnsafeHandle.trickleDownMin(_:)();
}

void Heap.popMax()(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  OUTLINED_FUNCTION_0_82();
  OUTLINED_FUNCTION_6_72();
  OUTLINED_FUNCTION_10_59();
}

void sub_21AFE2A3C()
{
  OUTLINED_FUNCTION_10_59();
}

uint64_t closure #1 in Heap.popMax()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, __n128);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v8 = *(_QWORD **)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - v12;
  v15 = v8[9];
  if (v16 != 2)
  {
    v21 = (void (*)(char *, uint64_t, uint64_t, __n128))v8[2];
    v21((char *)&v23 - v12, a1 + 2 * v15, a4, v13);
    ((void (*)(char *, uint64_t, uint64_t))v21)(v10, a1 + v15, a4);
    dispatch thunk of static Comparable.< infix(_:_:)();
    v22 = (void (*)(char *, uint64_t))v8[1];
    v22(v10, a4);
    v22(v14, a4);
    MEMORY[0x22075AD98](a1, a2, a4);
    swap<A>(_:_:)();
    Heap._UnsafeHandle.trickleDownMax(_:)();
  }
  v17 = (void (*)(char *, uint64_t, uint64_t, __n128))v8[2];
  v17((char *)&v23 - v12, a1 + v15, a4, v13);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v10, a3, a4);
  v18 = dispatch thunk of static Comparable.> infix(_:_:)();
  v19 = (void (*)(char *, uint64_t))v8[1];
  v19(v10, a4);
  result = ((uint64_t (*)(char *, uint64_t))v19)(v14, a4);
  if ((v18 & 1) != 0)
  {
    MEMORY[0x22075AD98](a1, 2, a4);
    return swap<A>(_:_:)();
  }
  return result;
}

void Heap.removeMin()(uint64_t a1)
{
  Heap.removeMin()(a1, (void (*)(uint64_t, __n128))Heap.popMin());
}

void Heap.removeMax()(uint64_t a1)
{
  Heap.removeMin()(a1, (void (*)(uint64_t, __n128))Heap.popMax());
}

void Heap.removeMin()(uint64_t a1, void (*a2)(uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_16_53();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v9 - v7;
  a2(a1, v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v4) == 1)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_1_73(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
    OUTLINED_FUNCTION_164();
  }
}

Swift::Void __swiftcall Heap.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  OUTLINED_FUNCTION_14_59();
  ContiguousArray.removeAll(keepingCapacity:)(keepingCapacity);
}

uint64_t Heap.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  OUTLINED_FUNCTION_49();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v7 - v6, a1);
  v8 = Array.init<A>(_:)();
  v15 = v8;
  swift_retain();
  v9 = ContiguousArray.count.getter();
  swift_release();
  if (v9 < 2)
  {
    OUTLINED_FUNCTION_7_67();
  }
  else
  {
    type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    v10 = *(_QWORD *)(v15 + 16);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80);
    v12 = v15 + ((v11 + 32) & ~v11);
    v14[0] = v12;
    v14[1] = v10;
    Heap._UnsafeHandle.heapify()();
    $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v12, v10);
    OUTLINED_FUNCTION_7_67();
    return v15;
  }
  return v8;
}

void Heap.insert<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  int EnumTagSinglePayload;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v5 = v4;
  v35 = a1;
  v8 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(v8 - 8);
  v33 = a2;
  MEMORY[0x24BDAC7A8](a1);
  OUTLINED_FUNCTION_49();
  v11 = v10 - v9;
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_16_53();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - v13;
  v36 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v37 = (char *)&v30 - v17;
  v34 = a3;
  v18 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_49();
  v22 = v21 - v20;
  if (!OUTLINED_FUNCTION_15_51())
  {
    swift_release();
    OUTLINED_FUNCTION_12_53(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v18 + 16));
    *v5 = Heap.init<A>(_:)(v22, v8, (uint64_t)v5);
LABEL_8:
    OUTLINED_FUNCTION_9_5();
    return;
  }
  v31 = v18;
  v23 = OUTLINED_FUNCTION_15_51();
  v24 = dispatch thunk of Sequence.underestimatedCount.getter();
  v25 = v23 + v24;
  if (!__OFADD__(v23, v24))
  {
    v30 = v16;
    type metadata accessor for ContiguousArray();
    ContiguousArray.reserveCapacity(_:)(v25);
    OUTLINED_FUNCTION_12_53(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v31 + 16));
    dispatch thunk of Sequence.makeIterator()();
    swift_getAssociatedConformanceWitness();
    OUTLINED_FUNCTION_18_47();
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v8);
    v28 = v32;
    v27 = v33;
    if (EnumTagSinglePayload != 1)
    {
      v29 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 32);
      do
      {
        v29(v11, v14, v8);
        Heap.insert(_:)(v11, v27);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v11, v8);
        OUTLINED_FUNCTION_18_47();
      }
      while (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v8) != 1);
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v37, AssociatedTypeWitness);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t partial apply for closure #1 in Heap.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Heap.max()(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t type metadata accessor for Heap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Heap);
}

uint64_t OUTLINED_FUNCTION_0_82()
{
  return ContiguousArray.count.getter();
}

uint64_t OUTLINED_FUNCTION_1_73@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

uint64_t OUTLINED_FUNCTION_3_62()
{
  return type metadata accessor for ContiguousArray();
}

_QWORD *OUTLINED_FUNCTION_4_67(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_5_64()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

uint64_t OUTLINED_FUNCTION_6_72()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t OUTLINED_FUNCTION_7_67()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_9_62()
{
  return RangeReplaceableCollection<>.removeLast()();
}

void OUTLINED_FUNCTION_10_59()
{
  JUMPOUT(0x22075B938);
}

uint64_t OUTLINED_FUNCTION_12_53@<X0>(uint64_t (*a1)(uint64_t, _QWORD, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 104), *(_QWORD *)(v2 - 112));
}

uint64_t OUTLINED_FUNCTION_13_62()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_14_59()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t OUTLINED_FUNCTION_15_51()
{
  return ContiguousArray.count.getter();
}

uint64_t OUTLINED_FUNCTION_18_47()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t URLResourceValues.isReadable.getter()
{
  return MEMORY[0x24BDCC700]();
}

uint64_t URLResourceValues.isDirectory.getter()
{
  return MEMORY[0x24BDCC710]();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return MEMORY[0x24BDCC818]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCCA20]();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.modify()
{
  return MEMORY[0x24BDCCA30]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x24BDCCA40]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x24BDCCA48]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDCCA60]();
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.modify()
{
  return MEMORY[0x24BDCCA70]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x24BDCCA88]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x24BDCCA90]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t URL.isFileURL.getter()
{
  return MEMORY[0x24BDCD748]();
}

uint64_t URL.absoluteURL.getter()
{
  return MEMORY[0x24BDCD750]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t URL.pathExtension.getter()
{
  return MEMORY[0x24BDCD810]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x24BDCD820]();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return MEMORY[0x24BDCD848]();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return MEMORY[0x24BDCD860]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x24BDCD870]();
}

uint64_t URL.hasDirectoryPath.getter()
{
  return MEMORY[0x24BDCD888]();
}

uint64_t URL.lastPathComponent.getter()
{
  return MEMORY[0x24BDCD898]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

Swift::Void __swiftcall URL.appendPathComponent(_:)(Swift::String a1)
{
  MEMORY[0x24BDCD8E8](a1._countAndFlagsBits, a1._object);
}

Swift::Void __swiftcall URL.appendPathExtension(_:)(Swift::String a1)
{
  MEMORY[0x24BDCD8F0](a1._countAndFlagsBits, a1._object);
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return MEMORY[0x24BDCD918]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x24BDCD928]();
}

uint64_t URL.appendingPathExtension(_:)()
{
  return MEMORY[0x24BDCD938]();
}

uint64_t URL.resolvingSymlinksInPath()()
{
  return MEMORY[0x24BDCD948]();
}

uint64_t URL.deletingLastPathComponent()()
{
  return MEMORY[0x24BDCD968]();
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x24BDCD988]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCD9E8](percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return MEMORY[0x24BDCDA70]();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return MEMORY[0x24BDCDAA8]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t Data.InlineData.init(_:)()
{
  return MEMORY[0x24BDCDB58]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
  MEMORY[0x24BDCDB60]();
}

uint64_t Data.LargeSlice.init(_:)()
{
  return MEMORY[0x24BDCDB68]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x24BDCDB78]();
}

uint64_t Data.InlineSlice.init(_:)()
{
  return MEMORY[0x24BDCDBD0]();
}

uint64_t Data._Representation.resetBytes(in:)()
{
  return MEMORY[0x24BDCDC20]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return MEMORY[0x24BDCDC40]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Data.count.getter()
{
  return MEMORY[0x24BDCDD10]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x24BDCDD20]();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return MEMORY[0x24BDCDE90]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return MEMORY[0x24BDCE628]();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return MEMORY[0x24BDCE780]();
}

uint64_t Date.init()()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t dispatch thunk of DataFrameProtocol.rows.getter()
{
  return MEMORY[0x24BDF5C38]();
}

uint64_t DataFrameProtocol.randomSplit(by:seed:)()
{
  return MEMORY[0x24BDF5C48]();
}

uint64_t DataFrameProtocol.isEmpty.getter()
{
  return MEMORY[0x24BDF5C60]();
}

uint64_t DataFrameProtocol.writeCSV(to:options:)()
{
  return MEMORY[0x24BDF5C68]();
}

uint64_t dispatch thunk of DataFrameProtocol.subscript.getter()
{
  return MEMORY[0x24BDF5C70]();
}

Swift::Void __swiftcall DataFrame.renameColumn(_:to:)(Swift::String _, Swift::String to)
{
  MEMORY[0x24BDF5C80](_._countAndFlagsBits, _._object, to._countAndFlagsBits, to._object);
}

Swift::Int_optional __swiftcall DataFrame.indexOfColumn(_:)(Swift::String a1)
{
  Swift::Int v1;
  Swift::Bool v2;
  Swift::Int_optional result;

  v1 = MEMORY[0x24BDF5C88](a1._countAndFlagsBits, a1._object);
  result.value = v1;
  result.is_nil = v2;
  return result;
}

uint64_t DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)()
{
  return MEMORY[0x24BDF5CA8]();
}

uint64_t DataFrame.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BDF5CB0]();
}

uint64_t DataFrame.init(contentsOfJSONFile:columns:types:options:)()
{
  return MEMORY[0x24BDF5CB8]();
}

uint64_t DataFrame.init(contentsOfSFrameDirectory:columns:rows:)()
{
  return MEMORY[0x24BDF5CC0]();
}

uint64_t DataFrame.Rows.count.getter()
{
  return MEMORY[0x24BDF5D00]();
}

uint64_t type metadata accessor for DataFrame.Rows()
{
  return MEMORY[0x24BDF5D10]();
}

uint64_t DataFrame.rows.getter()
{
  return MEMORY[0x24BDF5D30]();
}

uint64_t type metadata accessor for DataFrame.Slice()
{
  return MEMORY[0x24BDF5D58]();
}

uint64_t DataFrame.Slice.subscript.getter()
{
  return MEMORY[0x24BDF5D68]();
}

uint64_t DataFrame.shape.getter()
{
  return MEMORY[0x24BDF5D78]();
}

uint64_t DataFrame.append<A>(column:)()
{
  return MEMORY[0x24BDF5D90]();
}

uint64_t DataFrame.subscript.getter()
{
  return MEMORY[0x24BDF5DA0]();
}

{
  return MEMORY[0x24BDF5E08]();
}

{
  return MEMORY[0x24BDF5E10]();
}

{
  return MEMORY[0x24BDF5E18]();
}

uint64_t DataFrame.filter<A>(on:_:_:)()
{
  return MEMORY[0x24BDF5DB8]();
}

uint64_t DataFrame.init<A>(columns:)()
{
  return MEMORY[0x24BDF5DC0]();
}

uint64_t DataFrame.columns.getter()
{
  return MEMORY[0x24BDF5DC8]();
}

uint64_t DataFrame.selecting<A>(columnNames:)()
{
  return MEMORY[0x24BDF5DD8]();
}

uint64_t DataFrame.init()()
{
  return MEMORY[0x24BDF5DE8]();
}

uint64_t type metadata accessor for DataFrame()
{
  return MEMORY[0x24BDF5DF0]();
}

uint64_t DataFrame.init(_:)()
{
  return MEMORY[0x24BDF5E00]();
}

uint64_t DataFrame.subscript.setter()
{
  return MEMORY[0x24BDF5E20]();
}

{
  return MEMORY[0x24BDF5E28]();
}

uint64_t FilledColumn.defaultValue.getter()
{
  return MEMORY[0x24BDF5E30]();
}

uint64_t FilledColumn.base.getter()
{
  return MEMORY[0x24BDF5E38]();
}

uint64_t CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)()
{
  return MEMORY[0x24BDF5E88]();
}

uint64_t type metadata accessor for CSVReadingOptions()
{
  return MEMORY[0x24BDF5E90]();
}

uint64_t CSVWritingOptions.init(includesHeader:dateFormat:nilEncoding:trueEncoding:falseEncoding:newline:delimiter:)()
{
  return MEMORY[0x24BDF5E98]();
}

uint64_t type metadata accessor for CSVWritingOptions()
{
  return MEMORY[0x24BDF5EA0]();
}

uint64_t JSONReadingOptions.init()()
{
  return MEMORY[0x24BDF5EB8]();
}

uint64_t type metadata accessor for JSONReadingOptions()
{
  return MEMORY[0x24BDF5EC0]();
}

uint64_t OptionalColumnProtocol.filled(with:)()
{
  return MEMORY[0x24BDF5ED0]();
}

uint64_t Column.eraseToAnyColumn()()
{
  return MEMORY[0x24BDF5F08]();
}

uint64_t Column.map<A>(_:)()
{
  return MEMORY[0x24BDF5F10]();
}

uint64_t Column.init(name:capacity:)()
{
  return MEMORY[0x24BDF5F18]();
}

uint64_t Column.init<A>(name:contents:)()
{
  return MEMORY[0x24BDF5F20]();
}

{
  return MEMORY[0x24BDF5F28]();
}

uint64_t Column.name.getter()
{
  return MEMORY[0x24BDF5F30]();
}

uint64_t Column.count.getter()
{
  return MEMORY[0x24BDF5F40]();
}

uint64_t Column.append<A>(contentsOf:)()
{
  return MEMORY[0x24BDF5F48]();
}

uint64_t Column.append(_:)()
{
  return MEMORY[0x24BDF5F50]();
}

{
  return MEMORY[0x24BDF5F58]();
}

uint64_t Column.decoded<A, B>(_:using:)()
{
  return MEMORY[0x24BDF5F60]();
}

uint64_t Column.mapNonNil<A>(_:)()
{
  return MEMORY[0x24BDF5F68]();
}

uint64_t Column<A>.sum()()
{
  return MEMORY[0x24BDF5F70]();
}

uint64_t Column.init(_:capacity:)()
{
  return MEMORY[0x24BDF5F88]();
}

uint64_t Column.subscript.getter()
{
  return MEMORY[0x24BDF5FA8]();
}

uint64_t type metadata accessor for CSVType()
{
  return MEMORY[0x24BDF5FC8]();
}

uint64_t ColumnID.name.getter()
{
  return MEMORY[0x24BDF5FD8]();
}

uint64_t ColumnID.init(_:_:)()
{
  return MEMORY[0x24BDF5FF0]();
}

uint64_t type metadata accessor for JSONType()
{
  return MEMORY[0x24BDF6008]();
}

uint64_t AnyColumn.assumingType<A>(_:)()
{
  return MEMORY[0x24BDF6028]();
}

uint64_t AnyColumn.wrappedElementType.getter()
{
  return MEMORY[0x24BDF6030]();
}

uint64_t AnyColumn.name.getter()
{
  return MEMORY[0x24BDF6038]();
}

uint64_t AnyColumn.count.getter()
{
  return MEMORY[0x24BDF6040]();
}

uint64_t type metadata accessor for AnyColumn()
{
  return MEMORY[0x24BDF6048]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5118]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x24BEE5120]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x24BEE5130]();
}

uint64_t DataSample.labels.getter()
{
  return MEMORY[0x24BE6B7F8]();
}

uint64_t DataSample.init(features:labels:)()
{
  return MEMORY[0x24BE6B800]();
}

uint64_t DataSample.features.getter()
{
  return MEMORY[0x24BE6B808]();
}

uint64_t LayerState.id.getter()
{
  return MEMORY[0x24BE6B828]();
}

uint64_t LayerState.value.getter()
{
  return MEMORY[0x24BE6B830]();
}

uint64_t type metadata accessor for LayerState()
{
  return MEMORY[0x24BE6B840]();
}

uint64_t static ScalarType.int.getter()
{
  return MEMORY[0x24BE6B860]();
}

uint64_t type metadata accessor for ScalarType()
{
  return MEMORY[0x24BE6B8D0]();
}

uint64_t TensorShape.dimensions.getter()
{
  return MEMORY[0x24BE6B8E8]();
}

uint64_t TensorShape.contiguousSize.getter()
{
  return MEMORY[0x24BE6B8F0]();
}

uint64_t type metadata accessor for TensorShape()
{
  return MEMORY[0x24BE6B8F8]();
}

uint64_t TensorShape.init(_:)()
{
  return MEMORY[0x24BE6B920]();
}

uint64_t TensorShape.subscript.getter()
{
  return MEMORY[0x24BE6B928]();
}

uint64_t AveragePool2D.init(kernelSize:stride:padding:countIncludesPadding:)()
{
  return MEMORY[0x24BE6B940]();
}

uint64_t static ComputeDevice.cpu.getter()
{
  return MEMORY[0x24BE6B970]();
}

uint64_t static ComputeDevice.gpu.getter()
{
  return MEMORY[0x24BE6B978]();
}

uint64_t type metadata accessor for ComputeDevice()
{
  return MEMORY[0x24BE6B988]();
}

uint64_t type metadata accessor for LearningPhase()
{
  return MEMORY[0x24BE6B9B0]();
}

uint64_t type metadata accessor for LossReduction()
{
  return MEMORY[0x24BE6B9D0]();
}

uint64_t withoutGradient<A>(_:)()
{
  return MEMORY[0x24BE6B9F8]();
}

uint64_t valueWithGradient<A>(at:of:)()
{
  return MEMORY[0x24BE6BA08]();
}

uint64_t type metadata accessor for RegularizationKind()
{
  return MEMORY[0x24BE6BA20]();
}

uint64_t GlobalAveragePool2D.init()()
{
  return MEMORY[0x24BE6BA68]();
}

uint64_t softmaxCrossEntropy(logits:labels:labelSmoothing:axis:reduction:)()
{
  return MEMORY[0x24BE6BA98]();
}

uint64_t type metadata accessor for GradientClippingMode()
{
  return MEMORY[0x24BE6BAA8]();
}

uint64_t static ParameterInitializer.randomNormal(mean:standardDeviation:seed:scalarType:on:)()
{
  return MEMORY[0x24BE6BAC8]();
}

uint64_t static ParameterInitializer.glorotUniform(seed:scalarType:on:)()
{
  return MEMORY[0x24BE6BAD0]();
}

uint64_t static ParameterInitializer.ones.getter()
{
  return MEMORY[0x24BE6BAE0]();
}

uint64_t static ParameterInitializer.zeros.getter()
{
  return MEMORY[0x24BE6BAE8]();
}

uint64_t type metadata accessor for ParameterInitializer()
{
  return MEMORY[0x24BE6BB00]();
}

uint64_t static MLPackageWritingOptions.default.getter()
{
  return MEMORY[0x24BE6BB38]();
}

uint64_t type metadata accessor for MLPackageWritingOptions()
{
  return MEMORY[0x24BE6BB40]();
}

uint64_t OptimizerStateDictionary.subscript.getter()
{
  return MEMORY[0x24BE6BB58]();
}

uint64_t OptimizerStateDictionary.subscript.setter()
{
  return MEMORY[0x24BE6BB60]();
}

uint64_t SGD.init(for:learningRate:momentum:usesNesterovMomentum:gradientClippingMode:regularizationKind:gradientScale:)()
{
  return MEMORY[0x24BE6BB70]();
}

uint64_t SGD.update(_:with:)()
{
  return MEMORY[0x24BE6BB78]();
}

uint64_t type metadata accessor for SGD()
{
  return MEMORY[0x24BE6BB80]();
}

uint64_t Adam.init(for:learningRate:beta1:beta2:usesAMSGrad:epsilon:gradientClippingMode:regularizationKind:gradientScale:)()
{
  return MEMORY[0x24BE6BB98]();
}

uint64_t Adam.update(_:with:)()
{
  return MEMORY[0x24BE6BBA8]();
}

uint64_t type metadata accessor for Adam()
{
  return MEMORY[0x24BE6BBB0]();
}

uint64_t type metadata accessor for LSTM()
{
  return MEMORY[0x24BE6BC38]();
}

uint64_t relu(_:)()
{
  return MEMORY[0x24BE6BC58]();
}

uint64_t sqrt(_:)()
{
  return MEMORY[0x24BE6BC60]();
}

uint64_t Dense.bias.getter()
{
  return MEMORY[0x24BE6BC90]();
}

uint64_t Dense.$bias.getter()
{
  return MEMORY[0x24BE6BC98]();
}

uint64_t Dense.init(weight:bias:)()
{
  return MEMORY[0x24BE6BCA0]();
}

uint64_t Dense.weight.getter()
{
  return MEMORY[0x24BE6BCA8]();
}

uint64_t Dense.$weight.getter()
{
  return MEMORY[0x24BE6BCB0]();
}

uint64_t Dense.init(unitCount:weightInitializer:biasInitializer:)()
{
  return MEMORY[0x24BE6BCB8]();
}

uint64_t Dense.unitCount.getter()
{
  return MEMORY[0x24BE6BCC0]();
}

uint64_t type metadata accessor for Dense()
{
  return MEMORY[0x24BE6BCD0]();
}

uint64_t Layer.namedLayerStateKeyPaths(recursively:)()
{
  return MEMORY[0x24BE6BCF8]();
}

uint64_t Layer.parameters(recursively:)()
{
  return MEMORY[0x24BE6BD00]();
}

uint64_t Layer.updateValue<A>(_:for:)()
{
  return MEMORY[0x24BE6BD10]();
}

uint64_t Layer.callAsFunction(_:)()
{
  return MEMORY[0x24BE6BD18]();
}

uint64_t Layer.parameterKeyPaths(recursively:)()
{
  return MEMORY[0x24BE6BD20]();
}

uint64_t Layer.layerStateKeyPaths(recursively:)()
{
  return MEMORY[0x24BE6BD28]();
}

uint64_t Layer.initializeParameters(for:)()
{
  return MEMORY[0x24BE6BD30]();
}

uint64_t Layer.namedParameterKeyPaths(recursively:)()
{
  return MEMORY[0x24BE6BD38]();
}

uint64_t Layer.isEveryParameterInitialized.getter()
{
  return MEMORY[0x24BE6BD40]();
}

uint64_t Layer.place(on:)()
{
  return MEMORY[0x24BE6BD48]();
}

uint64_t Layer.placed(on:)()
{
  return MEMORY[0x24BE6BD58]();
}

uint64_t Layer.prepare(for:)()
{
  return MEMORY[0x24BE6BD60]();
}

uint64_t Layer.sublayers(recursively:)()
{
  return MEMORY[0x24BE6BD70]();
}

uint64_t Layer<>.writeMLPackage(withInput:output:to:options:)()
{
  return MEMORY[0x24BE6BD78]();
}

uint64_t Conv1D.groupCount.getter()
{
  return MEMORY[0x24BE6BD80]();
}

uint64_t Conv1D.kernelSize.getter()
{
  return MEMORY[0x24BE6BD88]();
}

uint64_t Conv1D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)()
{
  return MEMORY[0x24BE6BD90]();
}

uint64_t Conv1D.bias.getter()
{
  return MEMORY[0x24BE6BDA0]();
}

uint64_t Conv1D.stride.getter()
{
  return MEMORY[0x24BE6BDA8]();
}

uint64_t Conv1D.init(weight:bias:stride:padding:dilation:groupCount:)()
{
  return MEMORY[0x24BE6BDB0]();
}

uint64_t Conv1D.weight.getter()
{
  return MEMORY[0x24BE6BDB8]();
}

uint64_t Conv1D.dilation.getter()
{
  return MEMORY[0x24BE6BDC0]();
}

uint64_t type metadata accessor for Conv1D()
{
  return MEMORY[0x24BE6BDD0]();
}

uint64_t Conv2D.groupCount.getter()
{
  return MEMORY[0x24BE6BDF0]();
}

uint64_t Conv2D.kernelSize.getter()
{
  return MEMORY[0x24BE6BDF8]();
}

uint64_t Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)()
{
  return MEMORY[0x24BE6BE00]();
}

uint64_t Conv2D.filterCount.getter()
{
  return MEMORY[0x24BE6BE08]();
}

uint64_t Conv2D.bias.getter()
{
  return MEMORY[0x24BE6BE10]();
}

uint64_t Conv2D.$bias.getter()
{
  return MEMORY[0x24BE6BE18]();
}

uint64_t Conv2D.stride.getter()
{
  return MEMORY[0x24BE6BE20]();
}

uint64_t Conv2D.init(weight:bias:stride:padding:dilation:groupCount:)()
{
  return MEMORY[0x24BE6BE28]();
}

uint64_t Conv2D.weight.getter()
{
  return MEMORY[0x24BE6BE30]();
}

uint64_t Conv2D.$weight.getter()
{
  return MEMORY[0x24BE6BE38]();
}

uint64_t Conv2D.padding.getter()
{
  return MEMORY[0x24BE6BE40]();
}

uint64_t Conv2D.dilation.getter()
{
  return MEMORY[0x24BE6BE48]();
}

uint64_t type metadata accessor for Conv2D()
{
  return MEMORY[0x24BE6BE58]();
}

uint64_t Tensor.scalarType.getter()
{
  return MEMORY[0x24BE6BE80]();
}

uint64_t Tensor.transposed(permutation:)()
{
  return MEMORY[0x24BE6BE88]();
}

uint64_t Tensor.elementType.getter()
{
  return MEMORY[0x24BE6BE98]();
}

uint64_t Tensor.concatenated(with:alongAxis:)()
{
  return MEMORY[0x24BE6BEA8]();
}

uint64_t Tensor.init(floatLiteral:)()
{
  return MEMORY[0x24BE6BEB0]();
}

uint64_t Tensor.init(concatenating:alongAxis:scalarType:)()
{
  return MEMORY[0x24BE6BEB8]();
}

uint64_t Tensor.init(oneHotAtIndex:depth:onValue:offValue:on:)()
{
  return MEMORY[0x24BE6BEC0]();
}

uint64_t Tensor.expandingShape(at:)()
{
  return MEMORY[0x24BE6BED8]();
}

uint64_t Tensor.squeezingShape(at:)()
{
  return MEMORY[0x24BE6BEE0]();
}

{
  return MEMORY[0x24BE6BEE8]();
}

uint64_t Tensor.init<A>(oneHotAtIndices:depth:onValue:offValue:on:)()
{
  return MEMORY[0x24BE6BEF0]();
}

uint64_t Tensor.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x24BE6BEF8]();
}

uint64_t static Tensor./ infix(_:_:)()
{
  return MEMORY[0x24BE6BF00]();
}

uint64_t static Tensor.* infix(_:_:)()
{
  return MEMORY[0x24BE6BF08]();
}

uint64_t static Tensor.+ infix(_:_:)()
{
  return MEMORY[0x24BE6BF10]();
}

uint64_t static Tensor.+ infix<A>(_:_:)()
{
  return MEMORY[0x24BE6BF18]();
}

uint64_t static Tensor.- infix(_:_:)()
{
  return MEMORY[0x24BE6BF20]();
}

uint64_t Tensor.init(unsafeUninitializedShape:scalarType:computeDevice:initializingWith:)()
{
  return MEMORY[0x24BE6BF28]();
}

uint64_t static Tensor.+= infix(_:_:)()
{
  return MEMORY[0x24BE6BF30]();
}

uint64_t Tensor.max(alongAxes:)()
{
  return MEMORY[0x24BE6BF38]();
}

uint64_t Tensor.sum(squeezingAxes:)()
{
  return MEMORY[0x24BE6BF40]();
}

uint64_t Tensor.sum(alongAxes:)()
{
  return MEMORY[0x24BE6BF48]();
}

{
  return MEMORY[0x24BE6BF50]();
}

uint64_t Tensor.sum()()
{
  return MEMORY[0x24BE6BF58]();
}

uint64_t Tensor.cast(to:roundingRule:)()
{
  return MEMORY[0x24BE6BF60]();
}

uint64_t Tensor.mean()()
{
  return MEMORY[0x24BE6BF68]();
}

uint64_t Tensor.rank.getter()
{
  return MEMORY[0x24BE6BF70]();
}

uint64_t Tensor.init<A>(shape:scalars:on:)()
{
  return MEMORY[0x24BE6BF90]();
}

uint64_t Tensor.shape.getter()
{
  return MEMORY[0x24BE6BF98]();
}

uint64_t Tensor.slice(lowerBounds:sizes:)()
{
  return MEMORY[0x24BE6BFA8]();
}

uint64_t Tensor.init(zeros:scalarType:on:)()
{
  return MEMORY[0x24BE6BFC8]();
}

uint64_t Tensor.argmax(squeezingAxis:)()
{
  return MEMORY[0x24BE6BFD0]();
}

uint64_t Tensor.scalar<A>(as:)()
{
  return MEMORY[0x24BE6BFE8]();
}

uint64_t Tensor.scalars<A>(as:)()
{
  return MEMORY[0x24BE6BFF8]();
}

uint64_t Tensor.squared()()
{
  return MEMORY[0x24BE6C000]();
}

uint64_t Tensor.init(coercing:scalarType:on:)()
{
  return MEMORY[0x24BE6C008]();
}

uint64_t Tensor.reshaped(to:)()
{
  return MEMORY[0x24BE6C010]();
}

uint64_t Tensor.init(stacking:alongAxis:scalarType:)()
{
  return MEMORY[0x24BE6C028]();
}

uint64_t type metadata accessor for Tensor()
{
  return MEMORY[0x24BE6C048]();
}

uint64_t Tensor.subscript.getter()
{
  return MEMORY[0x24BE6C070]();
}

uint64_t Dataset.makeIterator()()
{
  return MEMORY[0x24BE6C0B0]();
}

uint64_t Dataset.init(samples:batchSize:batchSampler:dropsLastPartialBatch:prefetchMode:transform:)()
{
  return MEMORY[0x24BE6C0C0]();
}

uint64_t Dropout.init(probability:seed:)()
{
  return MEMORY[0x24BE6C0D0]();
}

uint64_t type metadata accessor for Dropout()
{
  return MEMORY[0x24BE6C0E8]();
}

uint64_t softmax(_:alongAxis:)()
{
  return MEMORY[0x24BE6C110]();
}

uint64_t gradient(at:of:)()
{
  return MEMORY[0x24BE6C120]();
}

uint64_t BatchNorm.runningMean.getter()
{
  return MEMORY[0x24BE6C128]();
}

uint64_t BatchNorm.$runningMean.getter()
{
  return MEMORY[0x24BE6C130]();
}

uint64_t BatchNorm.runningVariance.getter()
{
  return MEMORY[0x24BE6C138]();
}

uint64_t BatchNorm.$runningVariance.getter()
{
  return MEMORY[0x24BE6C140]();
}

uint64_t BatchNorm.init(offsetInitializer:scaleInitializer:momentum:epsilon:)()
{
  return MEMORY[0x24BE6C148]();
}

uint64_t BatchNorm.scale.getter()
{
  return MEMORY[0x24BE6C150]();
}

uint64_t BatchNorm.$scale.getter()
{
  return MEMORY[0x24BE6C158]();
}

uint64_t BatchNorm.offset.getter()
{
  return MEMORY[0x24BE6C160]();
}

uint64_t BatchNorm.$offset.getter()
{
  return MEMORY[0x24BE6C168]();
}

uint64_t BatchNorm.epsilon.getter()
{
  return MEMORY[0x24BE6C170]();
}

uint64_t BatchNorm.init(momentum:offset:scale:epsilon:runningMean:runningVariance:)()
{
  return MEMORY[0x24BE6C178]();
}

uint64_t BatchNorm.momentum.getter()
{
  return MEMORY[0x24BE6C180]();
}

uint64_t type metadata accessor for BatchNorm()
{
  return MEMORY[0x24BE6C190]();
}

uint64_t LeakyReLU.init(alpha:)()
{
  return MEMORY[0x24BE6C1B0]();
}

uint64_t Parameter.id.getter()
{
  return MEMORY[0x24BE6C1D0]();
}

uint64_t Parameter.shape.getter()
{
  return MEMORY[0x24BE6C1D8]();
}

uint64_t Parameter.value.getter()
{
  return MEMORY[0x24BE6C1E0]();
}

uint64_t type metadata accessor for Parameter()
{
  return MEMORY[0x24BE6C1F0]();
}

uint64_t ZeroPad1D.init(size:)()
{
  return MEMORY[0x24BE6C200]();
}

uint64_t static MetricsKey.trainingLoss.getter()
{
  return MEMORY[0x24BDC57D8]();
}

uint64_t static MetricsKey.trainingError.getter()
{
  return MEMORY[0x24BDC57E0]();
}

uint64_t static MetricsKey.validationLoss.getter()
{
  return MEMORY[0x24BDC57E8]();
}

uint64_t static MetricsKey.trainingAccuracy.getter()
{
  return MEMORY[0x24BDC57F8]();
}

uint64_t static MetricsKey.validationAccuracy.getter()
{
  return MEMORY[0x24BDC5800]();
}

uint64_t static MetricsKey.trainingMaximumError.getter()
{
  return MEMORY[0x24BDC5808]();
}

uint64_t type metadata accessor for MetricsKey()
{
  return MEMORY[0x24BDC5810]();
}

uint64_t DenseMatrix.columnCount.getter()
{
  return MEMORY[0x24BDC5830]();
}

uint64_t DenseMatrix.layout.getter()
{
  return MEMORY[0x24BDC5838]();
}

uint64_t DenseMatrix.storage.modify()
{
  return MEMORY[0x24BDC5840]();
}

uint64_t DenseMatrix.init(rowCount:columnCount:layout:repeating:)()
{
  return MEMORY[0x24BDC5848]();
}

uint64_t DenseMatrix.rowCount.getter()
{
  return MEMORY[0x24BDC5850]();
}

uint64_t type metadata accessor for DenseMatrix()
{
  return MEMORY[0x24BDC5858]();
}

uint64_t DenseMatrix.subscript.setter()
{
  return MEMORY[0x24BDC5868]();
}

uint64_t static ImageReader.read(url:)()
{
  return MEMORY[0x24BDC5870]();
}

uint64_t ImageReader.init()()
{
  return MEMORY[0x24BDC5880]();
}

uint64_t type metadata accessor for ImageReader()
{
  return MEMORY[0x24BDC5888]();
}

uint64_t ImageScaler.init(targetSize:)()
{
  return MEMORY[0x24BDC5890]();
}

uint64_t type metadata accessor for ImageScaler()
{
  return MEMORY[0x24BDC58A0]();
}

uint64_t dispatch thunk of Transformer.applied(to:eventHandler:)()
{
  return MEMORY[0x24BDC58B8]();
}

uint64_t Transformer.export(to:)()
{
  return MEMORY[0x24BDC58C8]();
}

uint64_t Transformer.applied<A, B>(to:eventHandler:)()
{
  return MEMORY[0x24BDC58D0]();
}

uint64_t Transformer.appending<A>(_:)()
{
  return MEMORY[0x24BDC58E0]();
}

uint64_t type metadata accessor for ImageFlipper.Orientation()
{
  return MEMORY[0x24BDC58F8]();
}

uint64_t ImageFlipper.init(orientation:)()
{
  return MEMORY[0x24BDC5900]();
}

uint64_t type metadata accessor for ImageFlipper()
{
  return MEMORY[0x24BDC5910]();
}

uint64_t ImageRotator.init(angle:)()
{
  return MEMORY[0x24BDC5920]();
}

uint64_t type metadata accessor for ImageRotator()
{
  return MEMORY[0x24BDC5930]();
}

uint64_t ApplyRandomly.init<A>(probability:_:)()
{
  return MEMORY[0x24BDC5940]();
}

uint64_t Classification.probability.getter()
{
  return MEMORY[0x24BDC5980]();
}

uint64_t Classification.init(label:probability:)()
{
  return MEMORY[0x24BDC5988]();
}

uint64_t Classification.label.getter()
{
  return MEMORY[0x24BDC5990]();
}

uint64_t LinearRegressor.Configuration.maximumIterations.setter()
{
  return MEMORY[0x24BDC59B8]();
}

uint64_t LinearRegressor.Configuration.convergenceThreshold.setter()
{
  return MEMORY[0x24BDC59C0]();
}

uint64_t LinearRegressor.Configuration.stepSize.setter()
{
  return MEMORY[0x24BDC59C8]();
}

uint64_t LinearRegressor.Configuration.l1Penalty.setter()
{
  return MEMORY[0x24BDC59D0]();
}

uint64_t LinearRegressor.Configuration.l2Penalty.setter()
{
  return MEMORY[0x24BDC59D8]();
}

uint64_t LinearRegressor.Configuration.init()()
{
  return MEMORY[0x24BDC59E0]();
}

uint64_t AnnotatedFeature.annotation.getter()
{
  return MEMORY[0x24BDC59F0]();
}

uint64_t AnnotatedFeature.annotation.setter()
{
  return MEMORY[0x24BDC59F8]();
}

uint64_t AnnotatedFeature.init(feature:annotation:)()
{
  return MEMORY[0x24BDC5A00]();
}

uint64_t AnnotatedFeature.feature.getter()
{
  return MEMORY[0x24BDC5A08]();
}

uint64_t AnnotatedFeature.feature.setter()
{
  return MEMORY[0x24BDC5A10]();
}

uint64_t dispatch thunk of EstimatorDecoder.decode<A>(_:)()
{
  return MEMORY[0x24BDC5A28]();
}

uint64_t dispatch thunk of EstimatorEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDC5A30]();
}

uint64_t AudioFeaturePrint.init(windowDuration:overlapFactor:)()
{
  return MEMORY[0x24BDC5A38]();
}

uint64_t type metadata accessor for AudioFeaturePrint()
{
  return MEMORY[0x24BDC5A48]();
}

uint64_t BaseTreeRegressor.configuration.setter()
{
  return MEMORY[0x24BDC5A50]();
}

uint64_t BaseTreeRegressor.init(configuration:)()
{
  return MEMORY[0x24BDC5A58]();
}

uint64_t BaseTreeRegressor.makeTransformer()()
{
  return MEMORY[0x24BDC5A60]();
}

uint64_t BaseTreeRegressor.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:eventHandler:)()
{
  return MEMORY[0x24BDC5A68]();
}

uint64_t BaseTreeRegressor.fitted(features:annotations:eventHandler:)()
{
  return MEMORY[0x24BDC5A70]();
}

uint64_t BaseTreeRegressor.update(_:features:annotations:eventHandler:)()
{
  return MEMORY[0x24BDC5A78]();
}

uint64_t type metadata accessor for BaseTreeRegressor()
{
  return MEMORY[0x24BDC5A80]();
}

uint64_t ImageFeaturePrint.init(revision:cropAndScale:context:)()
{
  return MEMORY[0x24BDC5A90]();
}

uint64_t type metadata accessor for ImageFeaturePrint()
{
  return MEMORY[0x24BDC5AA0]();
}

uint64_t BaseTreeClassifier.configuration.setter()
{
  return MEMORY[0x24BDC5AA8]();
}

uint64_t BaseTreeClassifier.init(configuration:)()
{
  return MEMORY[0x24BDC5AB0]();
}

uint64_t BaseTreeClassifier.makeTransformer(classCount:featureCount:)()
{
  return MEMORY[0x24BDC5AB8]();
}

uint64_t BaseTreeClassifier.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:classCount:eventHandler:)()
{
  return MEMORY[0x24BDC5AC0]();
}

uint64_t BaseTreeClassifier.fitted(features:annotations:classCount:eventHandler:)()
{
  return MEMORY[0x24BDC5AC8]();
}

uint64_t BaseTreeClassifier.update(_:features:annotations:eventHandler:)()
{
  return MEMORY[0x24BDC5AD0]();
}

uint64_t type metadata accessor for BaseTreeClassifier()
{
  return MEMORY[0x24BDC5AD8]();
}

uint64_t RandomImageCropper.init(scale:aspectRatio:)()
{
  return MEMORY[0x24BDC5AE8]();
}

uint64_t type metadata accessor for RandomImageCropper()
{
  return MEMORY[0x24BDC5AF8]();
}

uint64_t AnnotatedPrediction.init(prediction:annotation:)()
{
  return MEMORY[0x24BDC5B28]();
}

uint64_t AnnotatedPrediction.prediction.getter()
{
  return MEMORY[0x24BDC5B30]();
}

uint64_t AnnotatedPrediction.prediction.setter()
{
  return MEMORY[0x24BDC5B38]();
}

uint64_t static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)()
{
  return MEMORY[0x24BDC5B48]();
}

uint64_t static AugmentationBuilder.buildPartialBlock<A>(first:)()
{
  return MEMORY[0x24BDC5B58]();
}

{
  return MEMORY[0x24BDC5B68]();
}

uint64_t BaseLinearRegressor.init(configuration:)()
{
  return MEMORY[0x24BDC5B78]();
}

uint64_t BaseLinearRegressor.makeTransformer()()
{
  return MEMORY[0x24BDC5B80]();
}

uint64_t BaseLinearRegressor.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:eventHandler:)()
{
  return MEMORY[0x24BDC5B88]();
}

uint64_t BaseLinearRegressor.fitted(features:annotations:eventHandler:)()
{
  return MEMORY[0x24BDC5B90]();
}

uint64_t BaseLinearRegressor.update(_:features:annotations:eventHandler:)()
{
  return MEMORY[0x24BDC5B98]();
}

uint64_t type metadata accessor for BaseLinearRegressor()
{
  return MEMORY[0x24BDC5BA0]();
}

uint64_t SupervisedEstimator<>.encode(_:to:)()
{
  return MEMORY[0x24BDC5BD0]();
}

uint64_t TemporalTransformer.export(to:)()
{
  return MEMORY[0x24BDC5BD8]();
}

uint64_t maximumAbsoluteError<A, B, C>(_:_:)()
{
  return MEMORY[0x24BDC5BF8]();
}

uint64_t rootMeanSquaredError<A, B, C>(_:_:)()
{
  return MEMORY[0x24BDC5C00]();
}

uint64_t ClassificationMetrics.recallScore(label:)()
{
  return MEMORY[0x24BDC5C08]();
}

uint64_t ClassificationMetrics.exampleCount.getter()
{
  return MEMORY[0x24BDC5C10]();
}

uint64_t ClassificationMetrics.precisionScore(label:)()
{
  return MEMORY[0x24BDC5C18]();
}

uint64_t ClassificationMetrics.truePositiveCount(of:)()
{
  return MEMORY[0x24BDC5C20]();
}

uint64_t ClassificationMetrics.falseNegativeCount(of:)()
{
  return MEMORY[0x24BDC5C28]();
}

uint64_t ClassificationMetrics.falsePositiveCount(of:)()
{
  return MEMORY[0x24BDC5C30]();
}

uint64_t ClassificationMetrics.makeConfusionMatrix<>()()
{
  return MEMORY[0x24BDC5C38]();
}

uint64_t ClassificationMetrics.count(label:)()
{
  return MEMORY[0x24BDC5C40]();
}

uint64_t ClassificationMetrics.labels.getter()
{
  return MEMORY[0x24BDC5C48]();
}

uint64_t ClassificationMetrics.accuracy.getter()
{
  return MEMORY[0x24BDC5C50]();
}

uint64_t ClassificationMetrics.init<A, B>(predicted:groundTruth:labels:)()
{
  return MEMORY[0x24BDC5C58]();
}

uint64_t ClassificationMetrics.init()()
{
  return MEMORY[0x24BDC5C60]();
}

uint64_t ClassificationMetrics.init<A, B>(_:_:)()
{
  return MEMORY[0x24BDC5C70]();
}

uint64_t ClassificationMetrics.init<A>(_:)()
{
  return MEMORY[0x24BDC5C78]();
}

uint64_t ImageExposureAdjuster.init(amount:)()
{
  return MEMORY[0x24BDC5C80]();
}

uint64_t type metadata accessor for ImageExposureAdjuster()
{
  return MEMORY[0x24BDC5C90]();
}

uint64_t BaseTreeRegressorModel.export(to:)()
{
  return MEMORY[0x24BDC5CA0]();
}

uint64_t BaseTreeRegressorModel.applied(features:eventHandler:)()
{
  return MEMORY[0x24BDC5CA8]();
}

uint64_t type metadata accessor for BaseTreeRegressorModel()
{
  return MEMORY[0x24BDC5CB0]();
}

uint64_t BaseTreeClassifierModel.export(to:)()
{
  return MEMORY[0x24BDC5CD0]();
}

uint64_t BaseTreeClassifierModel.applied(features:eventHandler:)()
{
  return MEMORY[0x24BDC5CD8]();
}

uint64_t type metadata accessor for BaseTreeClassifierModel()
{
  return MEMORY[0x24BDC5CE0]();
}

uint64_t BaseLinearRegressorModel.export(to:)()
{
  return MEMORY[0x24BDC5D00]();
}

uint64_t BaseLinearRegressorModel.applied(features:eventHandler:)()
{
  return MEMORY[0x24BDC5D08]();
}

uint64_t type metadata accessor for BaseLinearRegressorModel()
{
  return MEMORY[0x24BDC5D10]();
}

uint64_t BoostedTreeConfiguration.parallelTreeCount.getter()
{
  return MEMORY[0x24BDC5D30]();
}

uint64_t BoostedTreeConfiguration.parallelTreeCount.setter()
{
  return MEMORY[0x24BDC5D38]();
}

uint64_t BoostedTreeConfiguration.randomSeed.getter()
{
  return MEMORY[0x24BDC5D40]();
}

uint64_t BoostedTreeConfiguration.randomSeed.setter()
{
  return MEMORY[0x24BDC5D48]();
}

uint64_t BoostedTreeConfiguration.learningRate.getter()
{
  return MEMORY[0x24BDC5D50]();
}

uint64_t BoostedTreeConfiguration.learningRate.setter()
{
  return MEMORY[0x24BDC5D58]();
}

uint64_t BoostedTreeConfiguration.maximumDepth.getter()
{
  return MEMORY[0x24BDC5D60]();
}

uint64_t BoostedTreeConfiguration.maximumDepth.setter()
{
  return MEMORY[0x24BDC5D68]();
}

uint64_t BoostedTreeConfiguration.rowSubsample.getter()
{
  return MEMORY[0x24BDC5D70]();
}

uint64_t BoostedTreeConfiguration.rowSubsample.setter()
{
  return MEMORY[0x24BDC5D78]();
}

uint64_t BoostedTreeConfiguration.columnSubsample.getter()
{
  return MEMORY[0x24BDC5D80]();
}

uint64_t BoostedTreeConfiguration.columnSubsample.setter()
{
  return MEMORY[0x24BDC5D88]();
}

uint64_t BoostedTreeConfiguration.maximumIterations.getter()
{
  return MEMORY[0x24BDC5D90]();
}

uint64_t BoostedTreeConfiguration.maximumIterations.setter()
{
  return MEMORY[0x24BDC5D98]();
}

uint64_t BoostedTreeConfiguration.minimumChildWeight.getter()
{
  return MEMORY[0x24BDC5DA0]();
}

uint64_t BoostedTreeConfiguration.minimumChildWeight.setter()
{
  return MEMORY[0x24BDC5DA8]();
}

uint64_t BoostedTreeConfiguration.minimumLossReduction.getter()
{
  return MEMORY[0x24BDC5DB0]();
}

uint64_t BoostedTreeConfiguration.minimumLossReduction.setter()
{
  return MEMORY[0x24BDC5DB8]();
}

uint64_t BoostedTreeConfiguration.earlyStoppingIterationCount.getter()
{
  return MEMORY[0x24BDC5DC0]();
}

uint64_t BoostedTreeConfiguration.earlyStoppingIterationCount.setter()
{
  return MEMORY[0x24BDC5DC8]();
}

uint64_t BoostedTreeConfiguration.init()()
{
  return MEMORY[0x24BDC5DD0]();
}

uint64_t type metadata accessor for BoostedTreeConfiguration()
{
  return MEMORY[0x24BDC5DD8]();
}

uint64_t RandomImageNoiseGenerator.init(intensity:)()
{
  return MEMORY[0x24BDC5DF0]();
}

uint64_t type metadata accessor for RandomImageNoiseGenerator()
{
  return MEMORY[0x24BDC5E00]();
}

uint64_t ClassificationDistribution.mostLikelyLabel.getter()
{
  return MEMORY[0x24BDC5E20]();
}

uint64_t ClassificationDistribution.map<A>(_:)()
{
  return MEMORY[0x24BDC5E28]();
}

uint64_t type metadata accessor for ClassificationDistribution()
{
  return MEMORY[0x24BDC5E30]();
}

uint64_t SupervisedTabularEstimator.read(from:)()
{
  return MEMORY[0x24BDC5E68]();
}

uint64_t SupervisedTabularEstimator.write(_:to:overwrite:)()
{
  return MEMORY[0x24BDC5E70]();
}

uint64_t LogisticRegressionClassifier.Configuration.maximumIterations.setter()
{
  return MEMORY[0x24BDC5E78]();
}

uint64_t LogisticRegressionClassifier.Configuration.convergenceThreshold.setter()
{
  return MEMORY[0x24BDC5E80]();
}

uint64_t LogisticRegressionClassifier.Configuration.stepSize.setter()
{
  return MEMORY[0x24BDC5E88]();
}

uint64_t LogisticRegressionClassifier.Configuration.l1Penalty.setter()
{
  return MEMORY[0x24BDC5E90]();
}

uint64_t LogisticRegressionClassifier.Configuration.l2Penalty.setter()
{
  return MEMORY[0x24BDC5E98]();
}

uint64_t LogisticRegressionClassifier.Configuration.init()()
{
  return MEMORY[0x24BDC5EA0]();
}

uint64_t LogisticRegressionClassifier.makeTransformer()()
{
  return MEMORY[0x24BDC5EB8]();
}

uint64_t LogisticRegressionClassifier.encodeWithOptimizer(_:to:)()
{
  return MEMORY[0x24BDC5EC8]();
}

uint64_t LogisticRegressionClassifier.encode(_:to:)()
{
  return MEMORY[0x24BDC5ED8]();
}

uint64_t LogisticRegressionClassifier.fitted<A, B>(to:validateOn:eventHandler:)()
{
  return MEMORY[0x24BDC5EE0]();
}

uint64_t LogisticRegressionClassifier.fitted<A>(to:eventHandler:)()
{
  return MEMORY[0x24BDC5EF0]();
}

uint64_t LogisticRegressionClassifier.init(labels:configuration:)()
{
  return MEMORY[0x24BDC5F00]();
}

uint64_t LogisticRegressionClassifier.update<A>(_:with:eventHandler:)()
{
  return MEMORY[0x24BDC5F08]();
}

uint64_t MLModelImageFeatureExtractor.init(model:inputName:outputName:context:)()
{
  return MEMORY[0x24BDC5F28]();
}

uint64_t type metadata accessor for MLModelImageFeatureExtractor()
{
  return MEMORY[0x24BDC5F38]();
}

uint64_t UpdatableSupervisedEstimator.readWithOptimizer(from:)()
{
  return MEMORY[0x24BDC5F48]();
}

uint64_t UpdatableSupervisedEstimator.writeWithOptimizer(_:to:overwrite:)()
{
  return MEMORY[0x24BDC5F50]();
}

uint64_t UpsampledAugmentationSequence.makeAsyncIterator()()
{
  return MEMORY[0x24BDC5F68]();
}

uint64_t FullyConnectedNetworkClassifier.makeTransformer()()
{
  return MEMORY[0x24BDC5F78]();
}

uint64_t FullyConnectedNetworkClassifier.encodeWithOptimizer(_:to:)()
{
  return MEMORY[0x24BDC5F88]();
}

uint64_t FullyConnectedNetworkClassifier.fitted<A, B>(to:validateOn:eventHandler:)()
{
  return MEMORY[0x24BDC5F98]();
}

uint64_t FullyConnectedNetworkClassifier.fitted<A>(to:eventHandler:)()
{
  return MEMORY[0x24BDC5FA8]();
}

uint64_t FullyConnectedNetworkClassifier.update<A>(_:with:eventHandler:)()
{
  return MEMORY[0x24BDC5FB8]();
}

uint64_t BaseLogisticRegressionClassifier.init(configuration:)()
{
  return MEMORY[0x24BDC5FD8]();
}

uint64_t BaseLogisticRegressionClassifier.makeTransformer(classCount:)()
{
  return MEMORY[0x24BDC5FE0]();
}

uint64_t BaseLogisticRegressionClassifier.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:classCount:eventHandler:)()
{
  return MEMORY[0x24BDC5FE8]();
}

uint64_t BaseLogisticRegressionClassifier.fitted(features:annotations:classCount:eventHandler:)()
{
  return MEMORY[0x24BDC5FF0]();
}

uint64_t BaseLogisticRegressionClassifier.update(_:features:annotations:eventHandler:)()
{
  return MEMORY[0x24BDC5FF8]();
}

uint64_t type metadata accessor for BaseLogisticRegressionClassifier()
{
  return MEMORY[0x24BDC6000]();
}

uint64_t LogisticRegressionClassifierModel.applied(to:eventHandler:)()
{
  return MEMORY[0x24BDC6018]();
}

uint64_t UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)()
{
  return MEMORY[0x24BDC6038]();
}

uint64_t FullyConnectedNetworkClassifierModel.applied(to:eventHandler:)()
{
  return MEMORY[0x24BDC6040]();
}

uint64_t BaseLogisticRegressionClassifierModel.export(to:)()
{
  return MEMORY[0x24BDC6068]();
}

uint64_t BaseLogisticRegressionClassifierModel.applied(features:eventHandler:)()
{
  return MEMORY[0x24BDC6070]();
}

uint64_t type metadata accessor for BaseLogisticRegressionClassifierModel()
{
  return MEMORY[0x24BDC6078]();
}

uint64_t Event.init(origin:itemCount:totalItemCount:metrics:)()
{
  return MEMORY[0x24BDC6098]();
}

uint64_t Event.metrics.getter()
{
  return MEMORY[0x24BDC60A0]();
}

uint64_t Event.itemCount.getter()
{
  return MEMORY[0x24BDC60A8]();
}

uint64_t type metadata accessor for Event()
{
  return MEMORY[0x24BDC60B0]();
}

uint64_t Augmenter.applied<A, B>(to:upsampledBy:)()
{
  return MEMORY[0x24BDC60C0]();
}

uint64_t Augmenter.init<A>(generator:_:)()
{
  return MEMORY[0x24BDC60C8]();
}

uint64_t ImageBlur.init(radius:)()
{
  return MEMORY[0x24BDC60D8]();
}

uint64_t type metadata accessor for ImageBlur()
{
  return MEMORY[0x24BDC60E8]();
}

uint64_t static FeatureType.shapedArray(dataType:shape:optional:)()
{
  return MEMORY[0x24BE623F8]();
}

uint64_t FeatureType.IntParameters.init(optional:)()
{
  return MEMORY[0x24BE62408]();
}

uint64_t FeatureType.ImageParameters.width.getter()
{
  return MEMORY[0x24BE62498]();
}

uint64_t FeatureType.ImageParameters.height.getter()
{
  return MEMORY[0x24BE624A0]();
}

uint64_t type metadata accessor for FeatureType.ImageParameters()
{
  return MEMORY[0x24BE624B0]();
}

uint64_t FeatureType.DoubleParameters.init(optional:)()
{
  return MEMORY[0x24BE624B8]();
}

uint64_t FeatureType.StringParameters.init(optional:)()
{
  return MEMORY[0x24BE624C0]();
}

uint64_t type metadata accessor for FeatureType.ShapedArrayParameters.DataType()
{
  return MEMORY[0x24BE624E8]();
}

uint64_t FeatureType.ShapedArrayParameters.dataType.setter()
{
  return MEMORY[0x24BE62500]();
}

uint64_t FeatureType.ShapedArrayParameters.init()()
{
  return MEMORY[0x24BE62538]();
}

uint64_t type metadata accessor for FeatureType.ShapedArrayParameters()
{
  return MEMORY[0x24BE62540]();
}

uint64_t static FeatureType.dictionaryWithIntKeys(optional:)()
{
  return MEMORY[0x24BE62550]();
}

uint64_t static FeatureType.dictionaryWithStringKeys(optional:)()
{
  return MEMORY[0x24BE62558]();
}

uint64_t type metadata accessor for FeatureType()
{
  return MEMORY[0x24BE62580]();
}

uint64_t NeuralNetwork.preprocessors.getter()
{
  return MEMORY[0x24BE62650]();
}

uint64_t type metadata accessor for NeuralNetwork.WeightParameters()
{
  return MEMORY[0x24BE62658]();
}

uint64_t NeuralNetwork.WeightParameters.init(_:updatable:)()
{
  return MEMORY[0x24BE62668]();
}

uint64_t type metadata accessor for NeuralNetwork.ArrayShapeMapping()
{
  return MEMORY[0x24BE62678]();
}

uint64_t NeuralNetwork.ValidPaddingParameters.init()()
{
  return MEMORY[0x24BE62680]();
}

uint64_t NeuralNetwork.Layer.inputNames.modify()
{
  return MEMORY[0x24BE62688]();
}

uint64_t static NeuralNetwork.Layer.squeezeAll(name:inputName:outputName:)()
{
  return MEMORY[0x24BE62690]();
}

uint64_t static NeuralNetwork.Layer.convolution(name:inputName:outputName:outputChannelCount:kernelChannelCount:groupCount:kernelSize:strides:padding:)()
{
  return MEMORY[0x24BE62698]();
}

uint64_t NeuralNetwork.Layer.outputNames.modify()
{
  return MEMORY[0x24BE626A0]();
}

uint64_t NeuralNetwork.Layer.outputNames.getter()
{
  return MEMORY[0x24BE626A8]();
}

uint64_t static NeuralNetwork.Layer.innerProduct(name:inputName:outputName:inputChannelCount:outputChannelCount:)()
{
  return MEMORY[0x24BE626B0]();
}

uint64_t static NeuralNetwork.Layer.PadParameters.Kind.constant(value:)()
{
  return MEMORY[0x24BE626B8]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.PadParameters.Kind()
{
  return MEMORY[0x24BE626C0]();
}

uint64_t NeuralNetwork.Layer.PadParameters.init(kind:amount:)()
{
  return MEMORY[0x24BE626C8]();
}

uint64_t static NeuralNetwork.Layer.reshapeStatic(name:inputName:outputName:targetShape:)()
{
  return MEMORY[0x24BE626D0]();
}

uint64_t NeuralNetwork.Layer.PoolParameters.doesGlobalPooling.setter()
{
  return MEMORY[0x24BE626D8]();
}

uint64_t NeuralNetwork.Layer.PoolParameters.averageExcludesPadding.setter()
{
  return MEMORY[0x24BE626E0]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.PoolParameters.Kind()
{
  return MEMORY[0x24BE626F0]();
}

uint64_t NeuralNetwork.Layer.PoolParameters.init(kind:kernelSize:strides:padding:)()
{
  return MEMORY[0x24BE626F8]();
}

uint64_t static NeuralNetwork.Layer.PoolParameters.Padding.valid(leadingHeight:trailingHeight:leadingWidth:trailingWidth:)()
{
  return MEMORY[0x24BE62700]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.PoolParameters.Padding()
{
  return MEMORY[0x24BE62710]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.PoolParameters()
{
  return MEMORY[0x24BE62720]();
}

uint64_t static NeuralNetwork.Layer.batchNormalize(name:inputName:outputName:inputChannelCount:)()
{
  return MEMORY[0x24BE62728]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.SliceParameters.Axis()
{
  return MEMORY[0x24BE62738]();
}

uint64_t static NeuralNetwork.Layer.cosineSimilarity(name:inputNames:outputName:)()
{
  return MEMORY[0x24BE62740]();
}

uint64_t static NeuralNetwork.Layer.expandDimensions(name:inputName:outputName:axes:)()
{
  return MEMORY[0x24BE62748]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.FlattenParameters.ChannelLayout()
{
  return MEMORY[0x24BE62758]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.groupCount.setter()
{
  return MEMORY[0x24BE62760]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.kernelSize.getter()
{
  return MEMORY[0x24BE62768]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.kernelSize.setter()
{
  return MEMORY[0x24BE62770]();
}

uint64_t static NeuralNetwork.Layer.ConvolutionParameters.PaddingKind.valid(leadingHeight:trailingHeight:leadingWidth:trailingWidth:)()
{
  return MEMORY[0x24BE62778]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters.PaddingKind()
{
  return MEMORY[0x24BE62788]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.dilationFactor.setter()
{
  return MEMORY[0x24BE62798]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.kernelChannelCount.getter()
{
  return MEMORY[0x24BE627A0]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.kernelChannelCount.setter()
{
  return MEMORY[0x24BE627A8]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.getter()
{
  return MEMORY[0x24BE627B0]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.outputChannelCount.setter()
{
  return MEMORY[0x24BE627B8]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.bias.setter()
{
  return MEMORY[0x24BE627C0]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.padding.setter()
{
  return MEMORY[0x24BE627C8]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.strides.setter()
{
  return MEMORY[0x24BE627D0]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.weights.setter()
{
  return MEMORY[0x24BE627D8]();
}

uint64_t NeuralNetwork.Layer.ConvolutionParameters.init()()
{
  return MEMORY[0x24BE627E0]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.ConvolutionParameters()
{
  return MEMORY[0x24BE627E8]();
}

uint64_t static NeuralNetwork.Layer.broadcastableSubtract(name:inputNames:outputName:)()
{
  return MEMORY[0x24BE627F0]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.init(inputChannelCount:outputChannelCount:)()
{
  return MEMORY[0x24BE627F8]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.inputChannelCount.getter()
{
  return MEMORY[0x24BE62800]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.outputChannelCount.getter()
{
  return MEMORY[0x24BE62808]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.bias.setter()
{
  return MEMORY[0x24BE62810]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.hasBias.setter()
{
  return MEMORY[0x24BE62818]();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.weights.setter()
{
  return MEMORY[0x24BE62820]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.InnerProductParameters()
{
  return MEMORY[0x24BE62828]();
}

uint64_t NeuralNetwork.Layer.BatchNormalizeParameters.inputChannelCount.getter()
{
  return MEMORY[0x24BE62830]();
}

uint64_t NeuralNetwork.Layer.BatchNormalizeParameters.mean.setter()
{
  return MEMORY[0x24BE62838]();
}

uint64_t NeuralNetwork.Layer.BatchNormalizeParameters.scale.setter()
{
  return MEMORY[0x24BE62840]();
}

uint64_t NeuralNetwork.Layer.BatchNormalizeParameters.offset.setter()
{
  return MEMORY[0x24BE62848]();
}

uint64_t NeuralNetwork.Layer.BatchNormalizeParameters.variance.setter()
{
  return MEMORY[0x24BE62850]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.BatchNormalizeParameters()
{
  return MEMORY[0x24BE62858]();
}

uint64_t static NeuralNetwork.Layer.add(name:inputNames:outputName:)()
{
  return MEMORY[0x24BE62860]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer.Kind()
{
  return MEMORY[0x24BE62890]();
}

uint64_t NeuralNetwork.Layer.kind.getter()
{
  return MEMORY[0x24BE62898]();
}

uint64_t NeuralNetwork.Layer.kind.setter()
{
  return MEMORY[0x24BE628A0]();
}

uint64_t NeuralNetwork.Layer.init(name:inputNames:outputNames:kind:)()
{
  return MEMORY[0x24BE628A8]();
}

uint64_t NeuralNetwork.Layer.name.getter()
{
  return MEMORY[0x24BE628B0]();
}

uint64_t static NeuralNetwork.Layer.pool(name:inputName:outputName:kind:kernelSize:strides:padding:)()
{
  return MEMORY[0x24BE628B8]();
}

uint64_t static NeuralNetwork.Layer.relu(name:inputName:outputName:)()
{
  return MEMORY[0x24BE628C0]();
}

uint64_t static NeuralNetwork.Layer.slice(name:inputName:outputName:startIndex:endIndex:stride:axis:)()
{
  return MEMORY[0x24BE628C8]();
}

uint64_t static NeuralNetwork.Layer.branch(name:inputName:ifBranch:elseBranch:)()
{
  return MEMORY[0x24BE628D0]();
}

uint64_t static NeuralNetwork.Layer.flatten(name:inputName:outputName:targetChannelLayout:)()
{
  return MEMORY[0x24BE628D8]();
}

uint64_t static NeuralNetwork.Layer.softmax(name:inputName:outputName:)()
{
  return MEMORY[0x24BE628E8]();
}

uint64_t static NeuralNetwork.Layer.squeeze(name:inputName:outputName:axes:)()
{
  return MEMORY[0x24BE628F0]();
}

uint64_t static NeuralNetwork.Layer.constant(name:outputName:shape:values:)()
{
  return MEMORY[0x24BE628F8]();
}

uint64_t static NeuralNetwork.Layer.leakyRelu(name:inputName:outputName:negativeSlope:)()
{
  return MEMORY[0x24BE62900]();
}

uint64_t static NeuralNetwork.Layer.softmaxND(name:inputName:outputName:axis:)()
{
  return MEMORY[0x24BE62908]();
}

uint64_t static NeuralNetwork.Layer.transpose(name:inputName:outputName:axes:)()
{
  return MEMORY[0x24BE62910]();
}

uint64_t type metadata accessor for NeuralNetwork.Layer()
{
  return MEMORY[0x24BE62918]();
}

uint64_t NeuralNetwork.Border.init(leadingHeight:trailingHeight:leadingWidth:trailingWidth:)()
{
  return MEMORY[0x24BE62928]();
}

uint64_t type metadata accessor for NeuralNetwork.Border()
{
  return MEMORY[0x24BE62930]();
}

uint64_t NeuralNetwork.Extent.width.getter()
{
  return MEMORY[0x24BE62938]();
}

uint64_t NeuralNetwork.Extent.init(height:width:)()
{
  return MEMORY[0x24BE62940]();
}

uint64_t NeuralNetwork.Extent.height.getter()
{
  return MEMORY[0x24BE62948]();
}

uint64_t NeuralNetwork.init(layers:preprocessors:)()
{
  return MEMORY[0x24BE62958]();
}

uint64_t NeuralNetwork.layers.modify()
{
  return MEMORY[0x24BE62960]();
}

uint64_t NeuralNetwork.layers.getter()
{
  return MEMORY[0x24BE62968]();
}

uint64_t type metadata accessor for NeuralNetwork()
{
  return MEMORY[0x24BE62970]();
}

uint64_t FeatureDescription.featureDescription.setter()
{
  return MEMORY[0x24BE62980]();
}

uint64_t FeatureDescription.init(name:type:description:)()
{
  return MEMORY[0x24BE62988]();
}

uint64_t FeatureDescription.name.getter()
{
  return MEMORY[0x24BE62990]();
}

uint64_t FeatureDescription.name.setter()
{
  return MEMORY[0x24BE62998]();
}

uint64_t FeatureDescription.type.getter()
{
  return MEMORY[0x24BE629A0]();
}

uint64_t FeatureDescription.type.setter()
{
  return MEMORY[0x24BE629A8]();
}

uint64_t FeatureDescription.init()()
{
  return MEMORY[0x24BE629B0]();
}

uint64_t type metadata accessor for FeatureDescription()
{
  return MEMORY[0x24BE629B8]();
}

uint64_t PipelineConfiguration.init(models:names:)()
{
  return MEMORY[0x24BE62A30]();
}

uint64_t NeuralNetworkRegressor.preprocessors.getter()
{
  return MEMORY[0x24BE62A50]();
}

uint64_t NeuralNetworkRegressor.layers.getter()
{
  return MEMORY[0x24BE62A68]();
}

uint64_t type metadata accessor for NeuralNetworkRegressor()
{
  return MEMORY[0x24BE62A70]();
}

uint64_t type metadata accessor for NeuralNetworkClassifier.ClassLabels()
{
  return MEMORY[0x24BE62A90]();
}

uint64_t NeuralNetworkClassifier.classLabels.setter()
{
  return MEMORY[0x24BE62A98]();
}

uint64_t NeuralNetworkClassifier.preprocessors.getter()
{
  return MEMORY[0x24BE62AA0]();
}

uint64_t NeuralNetworkClassifier.arrayInputShapeMapping.setter()
{
  return MEMORY[0x24BE62AA8]();
}

uint64_t NeuralNetworkClassifier.labelProbabilityLayerName.setter()
{
  return MEMORY[0x24BE62AB0]();
}

uint64_t NeuralNetworkClassifier.init(layers:preprocessors:)()
{
  return MEMORY[0x24BE62AB8]();
}

uint64_t NeuralNetworkClassifier.layers.getter()
{
  return MEMORY[0x24BE62AC0]();
}

uint64_t type metadata accessor for NeuralNetworkClassifier()
{
  return MEMORY[0x24BE62AC8]();
}

uint64_t type metadata accessor for CustomModelConfiguration.ParameterValue()
{
  return MEMORY[0x24BE62AD0]();
}

uint64_t CustomModelConfiguration.init(className:parameters:)()
{
  return MEMORY[0x24BE62AD8]();
}

uint64_t type metadata accessor for OneHotEncoderConfiguration.UnknownBehavior()
{
  return MEMORY[0x24BE62AF8]();
}

uint64_t OneHotEncoderConfiguration.init(orderedCategories:sparseOutput:unknownBehavior:)()
{
  return MEMORY[0x24BE62B18]();
}

uint64_t type metadata accessor for LinearClassifierConfiguration.ClassLabels()
{
  return MEMORY[0x24BE62B80]();
}

uint64_t LinearClassifierConfiguration.classLabels.setter()
{
  return MEMORY[0x24BE62B88]();
}

uint64_t type metadata accessor for LinearClassifierConfiguration()
{
  return MEMORY[0x24BE62BD0]();
}

uint64_t SoundAnalysisPreprocessorKind.VGGishParameters.init()()
{
  return MEMORY[0x24BE62BD8]();
}

uint64_t type metadata accessor for SoundAnalysisPreprocessorKind()
{
  return MEMORY[0x24BE62BE8]();
}

uint64_t FeatureVectorizerConfiguration.Input.init(name:size:)()
{
  return MEMORY[0x24BE62BF0]();
}

uint64_t type metadata accessor for FeatureVectorizerConfiguration.Input()
{
  return MEMORY[0x24BE62C10]();
}

uint64_t FeatureVectorizerConfiguration.init(inputs:)()
{
  return MEMORY[0x24BE62C20]();
}

uint64_t PipelineRegressorConfiguration.init(models:names:)()
{
  return MEMORY[0x24BE62C48]();
}

uint64_t PipelineClassifierConfiguration.init(models:names:)()
{
  return MEMORY[0x24BE62C98]();
}

uint64_t DictionaryVectorizerConfiguration.init<A>(keys:)()
{
  return MEMORY[0x24BE62CB8]();
}

uint64_t type metadata accessor for TreeEnsembleClassifierConfiguration.ClassLabels()
{
  return MEMORY[0x24BE62CF0]();
}

uint64_t TreeEnsembleClassifierConfiguration.classLabels.setter()
{
  return MEMORY[0x24BE62CF8]();
}

uint64_t type metadata accessor for TreeEnsembleClassifierConfiguration()
{
  return MEMORY[0x24BE62D10]();
}

uint64_t Model.init(contentsOf:)()
{
  return MEMORY[0x24BE62D18]();
}

uint64_t Model.serialized()()
{
  return MEMORY[0x24BE62D20]();
}

uint64_t Model.nestedModels.getter()
{
  return MEMORY[0x24BE62D28]();
}

uint64_t Model.versionString.setter()
{
  return MEMORY[0x24BE62D30]();
}

uint64_t Model.modelDescription.setter()
{
  return MEMORY[0x24BE62D38]();
}

uint64_t Model.predictedFeatureName.getter()
{
  return MEMORY[0x24BE62D40]();
}

uint64_t Model.predictedFeatureName.setter()
{
  return MEMORY[0x24BE62D48]();
}

uint64_t Model.specificationVersion.getter()
{
  return MEMORY[0x24BE62D50]();
}

uint64_t Model.specificationVersion.setter()
{
  return MEMORY[0x24BE62D58]();
}

uint64_t Model.predictedProbabilitiesName.getter()
{
  return MEMORY[0x24BE62D60]();
}

uint64_t Model.predictedProbabilitiesName.setter()
{
  return MEMORY[0x24BE62D68]();
}

uint64_t Model.kind.getter()
{
  return MEMORY[0x24BE62D70]();
}

uint64_t Model.kind.setter()
{
  return MEMORY[0x24BE62D78]();
}

uint64_t Model.write(to:)()
{
  return MEMORY[0x24BE62D80]();
}

uint64_t Model.author.setter()
{
  return MEMORY[0x24BE62D88]();
}

uint64_t Model.inputs.modify()
{
  return MEMORY[0x24BE62D90]();
}

uint64_t Model.inputs.getter()
{
  return MEMORY[0x24BE62D98]();
}

uint64_t Model.inputs.setter()
{
  return MEMORY[0x24BE62DA0]();
}

uint64_t Model.license.setter()
{
  return MEMORY[0x24BE62DB0]();
}

uint64_t Model.outputs.getter()
{
  return MEMORY[0x24BE62DC0]();
}

uint64_t Model.outputs.setter()
{
  return MEMORY[0x24BE62DC8]();
}

uint64_t Model.metadata.modify()
{
  return MEMORY[0x24BE62DD0]();
}

uint64_t Model.metadata.getter()
{
  return MEMORY[0x24BE62DD8]();
}

uint64_t Model.metadata.setter()
{
  return MEMORY[0x24BE62DE0]();
}

uint64_t Model.init()()
{
  return MEMORY[0x24BE62DE8]();
}

uint64_t type metadata accessor for Model()
{
  return MEMORY[0x24BE62DF0]();
}

uint64_t Package.rootModelURL.getter()
{
  return MEMORY[0x24BE62E08]();
}

uint64_t Package.setRootModel(_:)()
{
  return MEMORY[0x24BE62E10]();
}

uint64_t Package.ModelMetadata.description.setter()
{
  return MEMORY[0x24BE62E20]();
}

uint64_t Package.ModelMetadata.creatorDefined.modify()
{
  return MEMORY[0x24BE62E28]();
}

uint64_t Package.ModelMetadata.creatorDefined.setter()
{
  return MEMORY[0x24BE62E38]();
}

uint64_t Package.ModelMetadata.author.setter()
{
  return MEMORY[0x24BE62E48]();
}

uint64_t Package.ModelMetadata.license.setter()
{
  return MEMORY[0x24BE62E58]();
}

uint64_t Package.ModelMetadata.version.setter()
{
  return MEMORY[0x24BE62E68]();
}

uint64_t Package.ModelMetadata.init()()
{
  return MEMORY[0x24BE62E70]();
}

uint64_t type metadata accessor for Package.ModelMetadata()
{
  return MEMORY[0x24BE62E78]();
}

uint64_t Package.writeMetadata(_:)()
{
  return MEMORY[0x24BE62E88]();
}

uint64_t Package.init(url:)()
{
  return MEMORY[0x24BE62E90]();
}

uint64_t type metadata accessor for Package()
{
  return MEMORY[0x24BE62E98]();
}

uint64_t MLProgram.mainFunction.getter()
{
  return MEMORY[0x24BE62EB0]();
}

uint64_t MLProgram.mainFunction.setter()
{
  return MEMORY[0x24BE62EB8]();
}

uint64_t MLProgram.NamedValueType.init(name:type:)()
{
  return MEMORY[0x24BE62EC0]();
}

uint64_t type metadata accessor for MLProgram.NamedValueType()
{
  return MEMORY[0x24BE62EE0]();
}

uint64_t type metadata accessor for MLProgram.ShapeDimension()
{
  return MEMORY[0x24BE62F08]();
}

uint64_t MLProgram.Block.operations.modify()
{
  return MEMORY[0x24BE62F30]();
}

uint64_t MLProgram.Block.outputs.modify()
{
  return MEMORY[0x24BE62F50]();
}

uint64_t type metadata accessor for MLProgram.Block()
{
  return MEMORY[0x24BE62F58]();
}

uint64_t static MLProgram.Value.immediateList<A>(type:length:contents:)()
{
  return MEMORY[0x24BE62F88]();
}

uint64_t static MLProgram.Value.immediateTensor(dataType:shape:contents:)()
{
  return MEMORY[0x24BE62FC0]();
}

uint64_t type metadata accessor for MLProgram.Value.Tensor()
{
  return MEMORY[0x24BE62FE8]();
}

uint64_t type metadata accessor for MLProgram.Value()
{
  return MEMORY[0x24BE62FF0]();
}

uint64_t type metadata accessor for MLProgram.Argument.Binding()
{
  return MEMORY[0x24BE63068]();
}

uint64_t MLProgram.Argument.init(binding:)()
{
  return MEMORY[0x24BE63078]();
}

uint64_t type metadata accessor for MLProgram.Argument()
{
  return MEMORY[0x24BE63098]();
}

uint64_t type metadata accessor for MLProgram.DataType()
{
  return MEMORY[0x24BE630C8]();
}

uint64_t MLProgram.Function.blockSpecializations.modify()
{
  return MEMORY[0x24BE630F0]();
}

uint64_t MLProgram.Function.blockSpecializations.getter()
{
  return MEMORY[0x24BE630F8]();
}

uint64_t type metadata accessor for MLProgram.Function()
{
  return MEMORY[0x24BE63138]();
}

uint64_t MLProgram.Operation.init(name:inputs:outputs:)()
{
  return MEMORY[0x24BE63160]();
}

uint64_t type metadata accessor for MLProgram.Operation()
{
  return MEMORY[0x24BE631B0]();
}

uint64_t static MLProgram.ValueType.dictionary(keyType:valueType:)()
{
  return MEMORY[0x24BE631C0]();
}

uint64_t static MLProgram.ValueType.tensor(dataType:shape:)()
{
  return MEMORY[0x24BE631E0]();
}

uint64_t type metadata accessor for MLProgram.ValueType()
{
  return MEMORY[0x24BE631F0]();
}

uint64_t type metadata accessor for MLProgram()
{
  return MEMORY[0x24BE63210]();
}

uint64_t type metadata accessor for ModelKind()
{
  return MEMORY[0x24BE632E8]();
}

uint64_t UTType.identifier.getter()
{
  return MEMORY[0x24BEE6190]();
}

uint64_t UTType.init(filenameExtension:conformingTo:)()
{
  return MEMORY[0x24BEE6210]();
}

uint64_t static UTType.commaSeparatedText.getter()
{
  return MEMORY[0x24BEE6230]();
}

uint64_t static UTType.png.getter()
{
  return MEMORY[0x24BEE6278]();
}

uint64_t static UTType.data.getter()
{
  return MEMORY[0x24BEE62A8]();
}

uint64_t static UTType.json.getter()
{
  return MEMORY[0x24BEE62E0]();
}

uint64_t static UTType.text.getter()
{
  return MEMORY[0x24BEE62F0]();
}

uint64_t static UTType.audio.getter()
{
  return MEMORY[0x24BEE6300]();
}

uint64_t static UTType.image.getter()
{
  return MEMORY[0x24BEE6310]();
}

uint64_t static UTType.movie.getter()
{
  return MEMORY[0x24BEE6318]();
}

uint64_t UTType.conforms(to:)()
{
  return MEMORY[0x24BEE6368]();
}

uint64_t static UTType.plainText.getter()
{
  return MEMORY[0x24BEE63B0]();
}

uint64_t type metadata accessor for UTType()
{
  return MEMORY[0x24BEE63B8]();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return MEMORY[0x24BEE76E8]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t MLShapedArray.shape.getter()
{
  return MEMORY[0x24BDBFC40]();
}

uint64_t MLShapedArray.init<A>(scalars:shape:)()
{
  return MEMORY[0x24BDBFC50]();
}

uint64_t MLShapedArray.subscript.setter()
{
  return MEMORY[0x24BDBFC70]();
}

uint64_t type metadata accessor for MLShapedArray()
{
  return MEMORY[0x24BDBFC88]();
}

uint64_t MLShapedArray.init(_:)()
{
  return MEMORY[0x24BDBFCC0]();
}

uint64_t MLShapedArraySlice.init(scalar:)()
{
  return MEMORY[0x24BDBFD30]();
}

uint64_t MLShapedArrayProtocol.init(converting:)()
{
  return MEMORY[0x24BDBFD80]();
}

uint64_t MLShapedArrayProtocol.init<A>(converting:)()
{
  return MEMORY[0x24BDBFD88]();
}

uint64_t MLShapedArrayProtocol.init(arrayLiteral:)()
{
  return MEMORY[0x24BDBFD98]();
}

uint64_t MLShapedArrayProtocol.scalar.getter()
{
  return MEMORY[0x24BDBFDA8]();
}

uint64_t MLShapedArrayProtocol.scalars.getter()
{
  return MEMORY[0x24BDBFDB0]();
}

uint64_t MLShapedArrayProtocol.subscript.getter()
{
  return MEMORY[0x24BDBFDB8]();
}

{
  return MEMORY[0x24BDBFDF8]();
}

uint64_t MLShapedArrayProtocol.subscript.setter()
{
  return MEMORY[0x24BDBFDC0]();
}

{
  return MEMORY[0x24BDBFE00]();
}

uint64_t MLShapedArrayProtocol.init(repeating:shape:)()
{
  return MEMORY[0x24BDBFDC8]();
}

uint64_t type metadata accessor for Publishers.Autoconnect()
{
  return MEMORY[0x24BDB9500]();
}

uint64_t Publishers.MakeConnectable.init(upstream:)()
{
  return MEMORY[0x24BDB9618]();
}

uint64_t type metadata accessor for Publishers.MakeConnectable()
{
  return MEMORY[0x24BDB9620]();
}

uint64_t PassthroughSubject.send(completion:)()
{
  return MEMORY[0x24BDB9C70]();
}

uint64_t PassthroughSubject.send(_:)()
{
  return MEMORY[0x24BDB9C78]();
}

uint64_t PassthroughSubject.init()()
{
  return MEMORY[0x24BDB9C90]();
}

uint64_t type metadata accessor for PassthroughSubject()
{
  return MEMORY[0x24BDB9C98]();
}

uint64_t CurrentValueSubject.value.getter()
{
  return MEMORY[0x24BDB9CD0]();
}

uint64_t CurrentValueSubject.value.setter()
{
  return MEMORY[0x24BDB9CD8]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x24BDB9D00]();
}

uint64_t ConnectablePublisher.autoconnect()()
{
  return MEMORY[0x24BDB9D18]();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return MEMORY[0x24BDB9F20]();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return MEMORY[0x24BEE5428]();
}

uint64_t static DispatchQoS.default.getter()
{
  return MEMORY[0x24BEE54E0]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x24BEE5570]();
}

uint64_t DispatchTime.advanced(by:)()
{
  return MEMORY[0x24BEE5578]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x24BEE5590]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x24BEE01A8]();
}

uint64_t Array.init()()
{
  return MEMORY[0x24BEE01B8]();
}

uint64_t dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter()
{
  return MEMORY[0x24BEE01E0]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter()
{
  return MEMORY[0x24BEE01E8]();
}

uint64_t dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter()
{
  return MEMORY[0x24BEE01F0]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter()
{
  return MEMORY[0x24BEE01F8]();
}

uint64_t static BinaryFloatingPoint._convert<A>(from:)()
{
  return MEMORY[0x24BEE0220]();
}

uint64_t static BinaryFloatingPoint<>._convert<A>(from:)()
{
  return MEMORY[0x24BEE0240]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x24BEE0260]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCF828]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t Dictionary.debugDescription.getter()
{
  return MEMORY[0x24BEE02A8]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t Dictionary.init<A>(uniqueKeysWithValues:)()
{
  return MEMORY[0x24BEE02B8]();
}

uint64_t Dictionary.Keys.description.getter()
{
  return MEMORY[0x24BEE02C0]();
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x24BEE04B0]();
}

uint64_t dispatch thunk of FloatingPoint.sign.getter()
{
  return MEMORY[0x24BEE0588]();
}

uint64_t dispatch thunk of FloatingPoint.init<A>(_:)()
{
  return MEMORY[0x24BEE05F0]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return MEMORY[0x24BEE75F0]();
}

uint64_t BidirectionalCollection.last.getter()
{
  return MEMORY[0x24BEE0780]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return MEMORY[0x24BEE07D8]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t UnsafeBufferPointer.init(_:)()
{
  return MEMORY[0x24BDBFE30]();
}

uint64_t type metadata accessor for UnsafeBufferPointer()
{
  return MEMORY[0x24BEE09B0]();
}

uint64_t String.init(contentsOf:encoding:)()
{
  return MEMORY[0x24BDCF870]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x24BEE0B78]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x24BEE0BE8]();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = MEMORY[0x24BEE0C00]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CD0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0D98]();
}

{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t Sequence.randomSplit<A, B>(by:seed:)()
{
  return MEMORY[0x24BDC60F8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x24BEE0E70]();
}

uint64_t Sequence.lazy.getter()
{
  return MEMORY[0x24BEE0E90]();
}

uint64_t Sequence.sorted(by:)()
{
  return MEMORY[0x24BEE0EC0]();
}

uint64_t Sequence.shuffled<A>(using:)()
{
  return MEMORY[0x24BEE0EF8]();
}

uint64_t dispatch thunk of RangeExpression.relative<A>(to:)()
{
  return MEMORY[0x24BEE0FB8]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x24BEE1000]();
}

{
  return MEMORY[0x24BEE1018]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x24BEE1080]();
}

{
  return MEMORY[0x24BEE1098]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.startIndex.getter()
{
  return MEMORY[0x24BEE1118]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x24BEE1140]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x24BEE11A0]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x24BEE1220]();
}

Swift::Void __swiftcall Array.formIndex(after:)(Swift::Int *after)
{
  MEMORY[0x24BEE1230](after);
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t dispatch thunk of AsyncIteratorProtocol.next()()
{
  return MEMORY[0x24BEE68C8]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x24BEE6B20]();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC58]();
}

uint64_t Double.description.getter()
{
  return MEMORY[0x24BEE1370]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x24BEE13A8]();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC80]();
}

uint64_t Float.description.getter()
{
  return MEMORY[0x24BEE1488]();
}

uint64_t Float.init(sign:exponentBitPattern:significandBitPattern:)()
{
  return MEMORY[0x24BEE14B8]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x24BEE16D8]();
}

uint64_t Set.init<A>(_:)()
{
  return MEMORY[0x24BEE16F8]();
}

uint64_t Int.init(truncating:)()
{
  return MEMORY[0x24BDCFD18]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFD28]();
}

uint64_t RandomAccessCollection<>.indices.getter()
{
  return MEMORY[0x24BEE1890]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x24BEE1908]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x24BEE1980]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t RangeReplaceableCollection<>.removeLast()()
{
  return MEMORY[0x24BEE1B10]();
}

uint64_t RangeReplaceableCollection<>.popLast()()
{
  return MEMORY[0x24BEE1B20]();
}

void __swiftcall CMTimeRange.init(start:end:)(CMTimeRange *__return_ptr retstr, CMTime start, CMTime end)
{
  MEMORY[0x24BEE5228](retstr, start.value, *(_QWORD *)&start.timescale, start.epoch, end.value, *(_QWORD *)&end.timescale, end.epoch);
}

uint64_t MLMultiArray.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x24BDBFE58]();
}

uint64_t MLMultiArray.withUnsafeMutableBytes<A>(_:)()
{
  return MEMORY[0x24BDBFE60]();
}

uint64_t MLMultiArray.init<A>(_:)()
{
  return MEMORY[0x24BDBFE88]();
}

uint64_t NSDictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BDCFDF8]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return MEMORY[0x24BEE5918]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
  MEMORY[0x24BEE5920]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x24BEE5928]();
}

CMTime __swiftcall CMTime.init(seconds:preferredTimescale:)(Swift::Double seconds, Swift::Int32 preferredTimescale)
{
  CMTimeValue v2;
  uint64_t v3;
  CMTimeEpoch v4;
  CMTime result;

  v2 = MEMORY[0x24BEE5320](*(_QWORD *)&preferredTimescale, seconds);
  result.epoch = v4;
  result.timescale = v3;
  result.flags = HIDWORD(v3);
  result.value = v2;
  return result;
}

uint64_t NLModel.predictedLabelHypotheses(for:maximumCount:)()
{
  return MEMORY[0x24BEE5B48]();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)MEMORY[0x24BDD01F8](integerLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x24BEE7978]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x24BEE79A0]();
}

uint64_t UnsafeMutablePointer.move()()
{
  return MEMORY[0x24BEE1C10]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableBufferPointer.baseAddress.getter()
{
  return MEMORY[0x24BEE1CB0]();
}

uint64_t UnsafeMutableBufferPointer.init(_:)()
{
  return MEMORY[0x24BDBFF00]();
}

Swift::Void __swiftcall UnsafeMutableBufferPointer.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  MEMORY[0x24BEE1CD8](a1, a2);
}

uint64_t UnsafeMutableBufferPointer.subscript.modify()
{
  return MEMORY[0x24BEE1D48]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t StringProtocol.padding<A>(toLength:withPad:startingAt:)()
{
  return MEMORY[0x24BDD0630]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x24BEE2068]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x24BEE2070]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x24BEE2078]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x24BEE2090]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x24BEE22D8]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x24BEE22E0]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE23A0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t AnyHashable.base.getter()
{
  return MEMORY[0x24BEE23B0]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x24BEE24F0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t type metadata accessor for LazySequence()
{
  return MEMORY[0x24BEE2588]();
}

uint64_t Zip2Sequence.makeIterator()()
{
  return MEMORY[0x24BEE25F0]();
}

uint64_t Zip2Sequence.Iterator.next()()
{
  return MEMORY[0x24BEE25F8]();
}

uint64_t type metadata accessor for Zip2Sequence.Iterator()
{
  return MEMORY[0x24BEE2600]();
}

uint64_t type metadata accessor for Zip2Sequence()
{
  return MEMORY[0x24BEE2610]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2648](a1);
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2650]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t ContiguousArray.init(arrayLiteral:)()
{
  return MEMORY[0x24BEE2940]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2950](a1);
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

Swift::Void __swiftcall ContiguousArray._makeMutableAndUnique()()
{
  MEMORY[0x24BEE2968]();
}

uint64_t ContiguousArray.withUnsafeBufferPointer<A>(_:)()
{
  return MEMORY[0x24BEE2970]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t ContiguousArray.count.getter()
{
  return MEMORY[0x24BEE2990]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x24BEE29C0]();
}

Swift::Void __swiftcall ContiguousArray.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  MEMORY[0x24BEE29F0](keepingCapacity);
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t ContiguousArray.init<A>(_:)()
{
  return MEMORY[0x24BEE2A20]();
}

uint64_t type metadata accessor for LazyMapSequence()
{
  return MEMORY[0x24BEE2B20]();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return MEMORY[0x24BEE2B80]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return MEMORY[0x24BEE2CB8]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x24BEE2CC8]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x24BEE2E58](isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
  MEMORY[0x24BEE2E68]();
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x24BEE2E70]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x24BEE3070]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x24BEE30D0]();
}

uint64_t LazySequenceProtocol.map<A>(_:)()
{
  return MEMORY[0x24BEE3168]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x24BEE31D0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

{
  return MEMORY[0x24BEE3360]();
}

{
  return MEMORY[0x24BEE3370]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34B0]();
}

{
  return MEMORY[0x24BEE34C0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x24BEE3520]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x24BEE3548](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return MEMORY[0x24BEE3880]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x24BEE38F0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x24BEE3A88]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x24BEE3B20]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t max<A>(_:_:)()
{
  return MEMORY[0x24BEE3DF8]();
}

uint64_t zip<A, B>(_:_:)()
{
  return MEMORY[0x24BEE3E18]();
}

uint64_t swap<A>(_:_:)()
{
  return MEMORY[0x24BEE3EC8]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error<>._code.getter()
{
  return MEMORY[0x24BDD06E0]();
}

uint64_t Error<>._domain.getter()
{
  return MEMORY[0x24BDD06F0]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x24BEE42C8]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x24BEE4318](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return MEMORY[0x24BEE4398]();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return MEMORY[0x24BEE43C8]();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x24BEE43F8]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x24BEE45F8]();
}

uint64_t dispatch thunk of Decoder.userInfo.getter()
{
  return MEMORY[0x24BEE4600]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x24BEE4628]();
}

uint64_t dispatch thunk of Encoder.userInfo.getter()
{
  return MEMORY[0x24BEE4630]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t Float16.init(sign:exponentBitPattern:significandBitPattern:)()
{
  return MEMORY[0x24BEE4658]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x24BDBB780]();
  return result;
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDBB8](name);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE180](data);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x24BDBE5E0](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x24BDD9048](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x24BDD9088](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x24BDD9090](idst);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x24BDD9148](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9180](url, options);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x24BDC04C0](retstr, *(_QWORD *)&preferredTimescale, seconds);
}

uint64_t NLPClassifierModelCreateTrainedModelWithData()
{
  return MEMORY[0x24BDDFC78]();
}

uint64_t NLPClassifierModelIsRevisionSupported()
{
  return MEMORY[0x24BDDFC80]();
}

NSString *NSFullUserName(void)
{
  return (NSString *)MEMORY[0x24BDD0D60]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

OSStatus VTCreateCGImageFromCVPixelBuffer(CVPixelBufferRef pixelBuffer, CFDictionaryRef options, CGImageRef *imageOut)
{
  return MEMORY[0x24BDF9020](pixelBuffer, options, imageOut);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x24BEDCE10]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x24BEDCE18]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x24BEE4B48]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x24BEE4B50]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocEmptyBox()
{
  return MEMORY[0x24BEE4B60]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x24BEE4BF0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x24BEE4DD8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x24BEE4DE8]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return MEMORY[0x24BEE4E38]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow(void)
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

uint64_t tc_v1_error_message()
{
  return MEMORY[0x24BEBA9C8]();
}

uint64_t tc_v1_flex_dict_add_element()
{
  return MEMORY[0x24BEBA9D0]();
}

uint64_t tc_v1_flex_dict_create()
{
  return MEMORY[0x24BEBA9D8]();
}

uint64_t tc_v1_flex_dict_extract_entry()
{
  return MEMORY[0x24BEBA9E0]();
}

uint64_t tc_v1_flex_enum_list_add_element()
{
  return MEMORY[0x24BEBA9F0]();
}

uint64_t tc_v1_flex_enum_list_create()
{
  return MEMORY[0x24BEBA9F8]();
}

uint64_t tc_v1_flex_list_create()
{
  return MEMORY[0x24BEBAA08]();
}

uint64_t tc_v1_ft_create_empty()
{
  return MEMORY[0x24BEBAA20]();
}

uint64_t tc_v1_ft_create_from_double()
{
  return MEMORY[0x24BEBAA30]();
}

uint64_t tc_v1_ft_create_from_int64()
{
  return MEMORY[0x24BEBAA48]();
}

uint64_t tc_v1_ft_double()
{
  return MEMORY[0x24BEBAA58]();
}

uint64_t tc_v1_ft_is_double()
{
  return MEMORY[0x24BEBAA78]();
}

uint64_t tc_v1_ft_is_int64()
{
  return MEMORY[0x24BEBAA80]();
}

uint64_t tc_v1_ft_is_undefined()
{
  return MEMORY[0x24BEBAA88]();
}

uint64_t tc_v1_ft_type()
{
  return MEMORY[0x24BEBAAA0]();
}

uint64_t tc_v1_groupby_aggregator_create()
{
  return MEMORY[0x24BEBAAD0]();
}

uint64_t tc_v1_ndarray_create_from_data()
{
  return MEMORY[0x24BEBAAF8]();
}

uint64_t tc_v1_parameters_create_empty()
{
  return MEMORY[0x24BEBAB38]();
}

uint64_t tc_v1_release()
{
  return MEMORY[0x24BEBAB50]();
}

uint64_t tc_v1_sarray_apply()
{
  return MEMORY[0x24BEBAB60]();
}

uint64_t tc_v1_sarray_create_from_sequence()
{
  return MEMORY[0x24BEBAB88]();
}

uint64_t tc_v1_sarray_materialize()
{
  return MEMORY[0x24BEBABA8]();
}

uint64_t tc_v1_sarray_sort()
{
  return MEMORY[0x24BEBABD8]();
}

uint64_t tc_v1_sarray_to_type()
{
  return MEMORY[0x24BEBABF8]();
}

uint64_t tc_v1_sarray_type()
{
  return MEMORY[0x24BEBAC00]();
}

uint64_t tc_v1_sframe_apply()
{
  return MEMORY[0x24BEBAC20]();
}

uint64_t tc_v1_sframe_create_empty()
{
  return MEMORY[0x24BEBAC38]();
}

uint64_t tc_v1_sframe_join_on_multiple_columns()
{
  return MEMORY[0x24BEBAC78]();
}

uint64_t tc_v1_sframe_pack_columns_vector()
{
  return MEMORY[0x24BEBAC98]();
}

uint64_t tc_v1_sframe_random_split()
{
  return MEMORY[0x24BEBACA0]();
}

uint64_t tc_v1_sframe_remove_column()
{
  return MEMORY[0x24BEBACB8]();
}

uint64_t tc_v1_sframe_sample()
{
  return MEMORY[0x24BEBACD0]();
}

uint64_t tc_v1_sframe_slice()
{
  return MEMORY[0x24BEBACD8]();
}

uint64_t tc_v1_sframe_sort_single_column()
{
  return MEMORY[0x24BEBACE0]();
}

uint64_t tc_v1_sframe_unpack_detailed()
{
  return MEMORY[0x24BEBAD08]();
}

uint64_t tc_v1_variant_is_parameters()
{
  return MEMORY[0x24BEBAD20]();
}

void vDSP_vdpsp(const double *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3360](__A, __IA, __C, __IC, __N);
}

void vDSP_vspdp(const float *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3520](__A, __IA, __C, __IC, __N);
}

