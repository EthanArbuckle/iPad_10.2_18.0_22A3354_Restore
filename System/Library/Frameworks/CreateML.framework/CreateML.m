uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.Classifier(uint64_t *a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_DWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>)
                             - 8)
                 + 80);
  if ((v4 & 0x20000) != 0)
  {
    v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
    else
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22075B920]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t destroy for MLImageClassifier.Classifier(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v2 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  else
    v2 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t initializeWithCopy for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  else
    v4 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
    else
      v4 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
    v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
  else
    v4 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
  v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>;
    else
      v4 = &demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>;
    v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.Classifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21ADF0D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.Classifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21ADF0DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t type metadata accessor for MLImageClassifier.Classifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLImageClassifier.Classifier;
  if (!type metadata singleton initialization cache for MLImageClassifier.Classifier)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for MLImageClassifier.Classifier()
{
  unint64_t v0;

  type metadata accessor for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
    v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
    v5 = type metadata accessor for Either(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22075B92C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void type metadata accessor for NLLanguage(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for NLLanguage);
}

void type metadata accessor for NSProgressUserInfoKey(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for NSProgressUserInfoKey);
}

void type metadata accessor for VNImageCropAndScaleOption(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for VNImageCropAndScaleOption);
}

void type metadata accessor for VNImageOption(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for VNImageOption);
}

uint64_t MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_57(a1, a2, a3, a4, a5, a6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = OUTLINED_FUNCTION_0();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v6[12] = v8;
  v6[13] = *(_QWORD *)(v8 - 8);
  v6[14] = OUTLINED_FUNCTION_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v6[15] = v9;
  v6[16] = *(_QWORD *)(v9 - 8);
  v6[17] = OUTLINED_FUNCTION_0();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v6[18] = v10;
  v6[19] = *(_QWORD *)(v10 - 8);
  v6[20] = OUTLINED_FUNCTION_0();
  v6[21] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v6[22] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v5;

  OUTLINED_FUNCTION_63(v2[8], a2, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (OUTLINED_FUNCTION_60() == 1)
  {
    OUTLINED_FUNCTION_26(v2[13]);
    v3 = (_QWORD *)swift_task_alloc();
    v2[25] = (uint64_t)v3;
    *v3 = v2;
    v3[1] = MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
    OUTLINED_FUNCTION_59();
    return FullyConnectedNetworkClassifier.fitted<A>(to:eventHandler:)();
  }
  else
  {
    OUTLINED_FUNCTION_26(v2[19]);
    v5 = (_QWORD *)swift_task_alloc();
    v2[23] = (uint64_t)v5;
    *v5 = v2;
    v5[1] = MLImageClassifier.Classifier.fitted<A>(to:eventHandler:);
    OUTLINED_FUNCTION_59();
    return LogisticRegressionClassifier.fitted<A>(to:eventHandler:)();
  }
}

uint64_t MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 192) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_42();
  v2 = *(_QWORD *)(v0 + 128);
  OUTLINED_FUNCTION_11(*(_QWORD *)(v0 + 152));
  OUTLINED_FUNCTION_35(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_2(v3);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 208) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_11(*(_QWORD *)(v0 + 104));
  OUTLINED_FUNCTION_37();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_2(v1);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 152));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 104));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v9[10] = v15;
  v9[11] = v8;
  v9[8] = a7;
  v9[9] = a8;
  v9[6] = a5;
  v9[7] = a6;
  v9[4] = a3;
  v9[5] = a4;
  v9[2] = a1;
  v9[3] = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v9[12] = v10;
  v9[13] = *(_QWORD *)(v10 - 8);
  v9[14] = OUTLINED_FUNCTION_0();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v9[15] = v11;
  v9[16] = *(_QWORD *)(v11 - 8);
  v9[17] = OUTLINED_FUNCTION_0();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v9[18] = v12;
  v9[19] = *(_QWORD *)(v12 - 8);
  v9[20] = OUTLINED_FUNCTION_0();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v9[21] = v13;
  v9[22] = *(_QWORD *)(v13 - 8);
  v9[23] = OUTLINED_FUNCTION_0();
  v9[24] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v9[25] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

uint64_t MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v5;

  OUTLINED_FUNCTION_63(v2[11], a2, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (OUTLINED_FUNCTION_60() == 1)
  {
    OUTLINED_FUNCTION_26(v2[16]);
    v3 = (_QWORD *)swift_task_alloc();
    v2[28] = (uint64_t)v3;
    *v3 = v2;
    v3[1] = MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    OUTLINED_FUNCTION_32();
    return FullyConnectedNetworkClassifier.fitted<A, B>(to:validateOn:eventHandler:)();
  }
  else
  {
    OUTLINED_FUNCTION_26(v2[22]);
    v5 = (_QWORD *)swift_task_alloc();
    v2[26] = (uint64_t)v5;
    *v5 = v2;
    v5[1] = MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    OUTLINED_FUNCTION_32();
    return LogisticRegressionClassifier.fitted<A, B>(to:validateOn:eventHandler:)();
  }
}

uint64_t MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 216) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_42();
  v2 = *(_QWORD *)(v0 + 152);
  OUTLINED_FUNCTION_11(*(_QWORD *)(v0 + 176));
  OUTLINED_FUNCTION_35(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_2(v3);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 232) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_11(*(_QWORD *)(v0 + 128));
  OUTLINED_FUNCTION_37();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_2(v1);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 176));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 128));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

void MLImageClassifier.Classifier.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a1;
  v38 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_14(v7, v28);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v32 = *(_QWORD *)(v34 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_36(v8, v28);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v28 = *(_QWORD *)(v30 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_6();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v29 = *(_QWORD *)(v9 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_50();
  v12 = (char *)(v10 - v11);
  MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v28 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  v15 = OUTLINED_FUNCTION_20();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v15, v16, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_54(v17, v18, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    OUTLINED_FUNCTION_56(EnumCaseMultiPayload, v20, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_23() == 1)
    {
      v21 = v31;
      v22 = v32;
      v23 = v34;
      (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v31, v12, v34);
      v24 = v35;
      v25 = v33;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v33, v4, v36);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifierModel<Float, String> and conformance FullyConnectedNetworkClassifierModel<A, B>, &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
      SupervisedEstimator<>.encode(_:to:)();
      OUTLINED_FUNCTION_52(v25, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
LABEL_6:
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
      OUTLINED_FUNCTION_7();
      return;
    }
    v29 = v32;
    v9 = v34;
    v14 = v12;
  }
  else
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, (uint64_t)v14, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_23() != 1)
    {
      v26 = v29;
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v3, v14, v9);
      v27 = v28;
      OUTLINED_FUNCTION_33(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v28 + 32));
      OUTLINED_FUNCTION_61();
      LogisticRegressionClassifier.encode(_:to:)();
      OUTLINED_FUNCTION_52(v2, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v3, v9);
      goto LABEL_6;
    }
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v9);
  OUTLINED_FUNCTION_21();
  __break(1u);
}

uint64_t protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLImageClassifier.Classifier.fitted<A>(to:eventHandler:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLImageClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier()
{
  uint64_t *v0;
  uint64_t v2;

  OUTLINED_FUNCTION_4();
  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void protocol witness for SupervisedEstimator.encode(_:to:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  MLImageClassifier.Classifier.encode(_:to:)(a1, a2);
}

void protocol witness for SupervisedEstimator.decode(from:) in conformance MLImageClassifier.Classifier(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MLImageClassifier.Classifier.decode(from:)(a1, MEMORY[0x24BDC5ED0], MEMORY[0x24BDC5F90], a2);
}

uint64_t MLImageClassifier.Classifier.makeTransformer()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v22 = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_5();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v20 = *(_QWORD *)(v8 - 8);
  v21 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_49();
  v12 = v11 - v10;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_49();
  v17 = v16 - v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_6();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v25, v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_35(v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
    FullyConnectedNetworkClassifier.makeTransformer()();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(a1, v22, v24);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v17, v1, v13);
    LogisticRegressionClassifier.makeTransformer()();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(a1, v12, v21);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  return swift_storeEnumTagMultiPayload();
}

uint64_t MLImageClassifier.Classifier.update<A>(_:with:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_57(a1, a2, a3, a4, a5, a6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = OUTLINED_FUNCTION_16();
  v6[12] = OUTLINED_FUNCTION_25();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v6[13] = v8;
  v6[14] = *(_QWORD *)(v8 - 8);
  v6[15] = OUTLINED_FUNCTION_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v6[16] = v9;
  v6[17] = *(_QWORD *)(v9 - 8);
  v6[18] = OUTLINED_FUNCTION_16();
  v6[19] = OUTLINED_FUNCTION_25();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v6[20] = v10;
  v6[21] = *(_QWORD *)(v10 - 8);
  v6[22] = OUTLINED_FUNCTION_0();
  v6[23] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v6[24] = OUTLINED_FUNCTION_16();
  v6[25] = OUTLINED_FUNCTION_25();
  v6[26] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  v6[27] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLImageClassifier.Classifier.update<A>(_:with:eventHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  _QWORD *v14;

  v1 = v0[2];
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0[8], v0[27], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_63(v1, v2, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v4 = v0[27];
  if (EnumCaseMultiPayload == 1)
  {
    v5 = v0 + 24;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, v0[24], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    v0[32] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = v0[10];
      OUTLINED_FUNCTION_26(v0[14]);
      v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
      v0[33] = v7;
      OUTLINED_FUNCTION_46(v7);
      v8 = (_QWORD *)swift_task_alloc();
      v0[34] = v8;
      *v8 = v0;
      v8[1] = MLImageClassifier.Classifier.update<A>(_:with:eventHandler:);
      OUTLINED_FUNCTION_43(v0[12]);
      return FullyConnectedNetworkClassifier.update<A>(_:with:eventHandler:)();
    }
    v10 = 13;
    v11 = 14;
    goto LABEL_7;
  }
  v5 = v0 + 25;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, v0[25], &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v0[28] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = 20;
    v11 = 21;
LABEL_7:
    (*(void (**)(_QWORD, _QWORD))(v0[v11] + 8))(*v5, v0[v10]);
    return _assertionFailure(_:_:file:line:flags:)();
  }
  v12 = v0[17];
  OUTLINED_FUNCTION_26(v0[21]);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v0[29] = v13;
  OUTLINED_FUNCTION_46(v13);
  v14 = (_QWORD *)swift_task_alloc();
  v0[30] = v14;
  *v14 = v0;
  v14[1] = MLImageClassifier.Classifier.update<A>(_:with:eventHandler:);
  OUTLINED_FUNCTION_43(v0[19]);
  return LogisticRegressionClassifier.update<A>(_:with:eventHandler:)();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 248) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[29];
  v2 = v0[19];
  v3 = v0[18];
  v4 = v0[27];
  v5 = v0[16];
  v6 = v0[2];
  (*(void (**)(_QWORD, _QWORD))(v0[21] + 8))(v0[22], v0[20]);
  v7 = v1(v3, v2, v5);
  OUTLINED_FUNCTION_55(v7, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v1(v6, v3, v5);
  swift_storeEnumTagMultiPayload();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v4, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_19();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v8);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 280) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[33];
  v2 = v0[12];
  v3 = v0[11];
  v4 = v0[9];
  v5 = v0[27];
  v6 = v0[2];
  (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
  v7 = v1(v3, v2, v4);
  OUTLINED_FUNCTION_55(v7, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v1(v6, v3, v4);
  swift_storeEnumTagMultiPayload();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_38();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_31();
  v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_13(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 216);
  OUTLINED_FUNCTION_53();
  v3(v1);
  OUTLINED_FUNCTION_41();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  swift_task_dealloc();
  OUTLINED_FUNCTION_38();
  return OUTLINED_FUNCTION_12(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  OUTLINED_FUNCTION_53();
  v2(v1);
  v3 = OUTLINED_FUNCTION_41();
  OUTLINED_FUNCTION_55(v3, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_38();
  return OUTLINED_FUNCTION_12(*(uint64_t (**)(void))(v0 + 8));
}

void MLImageClassifier.Classifier.encodeWithOptimizer(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a1;
  v39 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v36 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_14(v7, v29);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v33 = *(_QWORD *)(v35 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_36(v8, v29);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v29 = *(_QWORD *)(v31 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_6();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v30 = *(_QWORD *)(v9 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_50();
  v12 = v10 - v11;
  MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v29 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>, Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>));
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  v15 = OUTLINED_FUNCTION_20();
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v15, v16, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_54(v17, v18, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, v12, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_23() == 1)
    {
      v21 = v32;
      v22 = v33;
      v23 = v35;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v32, v12, v35);
      v25 = v36;
      v24 = v37;
      v26 = v34;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v34, v4, v37);
      FullyConnectedNetworkClassifier.encodeWithOptimizer(_:to:)();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v24);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
LABEL_6:
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
      OUTLINED_FUNCTION_7();
      return;
    }
    v30 = v33;
    v9 = v35;
    v14 = (char *)v12;
  }
  else
  {
    OUTLINED_FUNCTION_56(EnumCaseMultiPayload, v20, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (OUTLINED_FUNCTION_23() != 1)
    {
      v27 = v30;
      (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v3, v14, v9);
      v28 = v29;
      OUTLINED_FUNCTION_33(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v29 + 32));
      OUTLINED_FUNCTION_61();
      LogisticRegressionClassifier.encodeWithOptimizer(_:to:)();
      OUTLINED_FUNCTION_52(v2, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v3, v9);
      goto LABEL_6;
    }
  }
  (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v9);
  OUTLINED_FUNCTION_21();
  __break(1u);
}

void MLImageClassifier.Classifier.decode(from:)(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v34 = a2;
  v35 = a3;
  v38 = a1;
  v31 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v28 = *(_QWORD *)(v6 - 8);
  v29 = v6;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_64();
  v36 = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v33 = *(_QWORD *)(v8 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_6();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_14(v10, (uint64_t)v25);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_50();
  v25 = (char *)(v11 - v12);
  MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v25 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_49();
  v19 = v18 - v17;
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v37, v18 - v17, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = v33;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v4, v19, v8);
    v21 = v36;
    v22 = v39;
    v35(v38, v8);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v4, v8);
    if (!v22)
    {
      v14 = v25;
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v25, v21, v29);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      outlined init with take of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>((uint64_t)v14, v31);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v5, v19, v15);
    v23 = v32;
    v24 = v39;
    v34(v38, v15);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v5, v15);
    if (!v24)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v14, v23, v27);
      goto LABEL_6;
    }
  }
  OUTLINED_FUNCTION_7();
}

uint64_t protocol witness for UpdatableSupervisedEstimator.update<A>(_:with:eventHandler:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for SupervisedEstimator.fitted<A>(to:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLImageClassifier.Classifier.update<A>(_:with:eventHandler:)(a1, a2, a3, a4, a5, a6);
}

void protocol witness for UpdatableSupervisedEstimator.encodeWithOptimizer(_:to:) in conformance MLImageClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  MLImageClassifier.Classifier.encodeWithOptimizer(_:to:)(a1, a2);
}

void protocol witness for UpdatableSupervisedEstimator.decodeWithOptimizer(from:) in conformance MLImageClassifier.Classifier(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MLImageClassifier.Classifier.decode(from:)(a1, MEMORY[0x24BDC5EC0], MEMORY[0x24BDC5F80], a2);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance MLMultiArrayDataType(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  MLMultiArrayDataType.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MLMultiArrayDataType(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(*v1);
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey(uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(a1, a2);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSFileAttributeKey(uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2) & 1;
}

void specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  a2(v3);
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_22();
}

uint64_t specialized _SwiftNewtypeWrapper<>.hash(into:)()
{
  OUTLINED_FUNCTION_27();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)()
{
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_45();
  Hasher._finalize()();
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_44();
}

void protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance VNImageOption()
{
  uint64_t *v0;

  specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(*v0, (void (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

void protocol witness for Hashable.hashValue.getter in conformance VNImageOption()
{
  uint64_t *v0;

  specialized _SwiftNewtypeWrapper<>._bridgeToObjectiveC()(*v0, MEMORY[0x24BEE0CD8]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance VNImageOption()
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance VNImageOption()
{
  specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)();
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NLLanguage(_QWORD *a1@<X8>)
{
  uint64_t v2;

  specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NLLanguage()
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance NLLanguage()
{
  specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NLLanguage()
{
  return specialized == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  MEMORY[0x22075B938](&protocol conformance descriptor for CFStringRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  MEMORY[0x22075B938](&protocol conformance descriptor for CFStringRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  MEMORY[0x22075B938](&protocol conformance descriptor for CFStringRef, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSFileAttributeKey(_QWORD *a1, _QWORD *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NLLanguage@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = NLLanguage.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22075B938](&protocol conformance descriptor for CFStringRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSFileAttributeKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance VNImageOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

void base witness table accessor for RawRepresentable in VNImageOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in VNImageOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
}

void lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(_QWORD *a1, void (*a2)(uint64_t))
{
  if (!*a1)
  {
    a2(255);
    OUTLINED_FUNCTION_62();
  }
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MLFeatureValueImageOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CIImageRepresentationOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLLanguage()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NLModelEmbeddingType(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  *a1 = NLModelEmbeddingType.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLModelEmbeddingType()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NSURLResourceKey(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  *a1 = NSURLResourceKey.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSProgressUserInfoKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

void base witness table accessor for RawRepresentable in NSProgressUserInfoKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey);
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in NSProgressUserInfoKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey);
}

void base witness table accessor for RawRepresentable in NLLanguage()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in NLLanguage()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
}

void base witness table accessor for Equatable in NLLanguage()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
}

uint64_t associated type witness table accessor for SupervisedEstimator.Annotation : Equatable in MLImageClassifier.Classifier()
{
  return MEMORY[0x24BEE0D28];
}

void associated type witness table accessor for SupervisedEstimator.Transformer : Transformer in MLImageClassifier.Classifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLImageClassifier.Model and conformance MLImageClassifier.Model, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Model);
}

void base witness table accessor for SupervisedEstimator in MLImageClassifier.Classifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLImageClassifier.Classifier and conformance MLImageClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLImageClassifier.Classifier);
}

void base witness table accessor for Equatable in NSProgressUserInfoKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, type metadata accessor for NSProgressUserInfoKey);
}

void base witness table accessor for Equatable in VNImageOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, type metadata accessor for VNImageOption);
}

uint64_t outlined init with take of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  OUTLINED_FUNCTION_22();
}

void outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_15(*(_QWORD *)(v2 - 8));
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance VNRecognizedPointKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NLLanguage@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x22075A8AC](*a1, a1[1]);
  result = OUTLINED_FUNCTION_30();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLModelConfigurationOptionsKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

void lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(_QWORD *a1, uint64_t *a2)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    OUTLINED_FUNCTION_62();
  }
  OUTLINED_FUNCTION_22();
}

uint64_t specialized == infix<A>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_30();
  return v5 & 1;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  _QWORD *v2;
  char v3;

  OUTLINED_FUNCTION_39(a1, a2);
  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *v2 = 0;
  return v3 & 1;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t result;

  OUTLINED_FUNCTION_39(a1, a2);
  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *v2 = 0;
  return result;
}

void specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)()
{
  uint64_t v0;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  MEMORY[0x22075A8AC](v0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_22();
}

void type metadata accessor for VNRecognizedPointKey(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for VNRecognizedPointKey);
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for NSURLResourceKey);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for CFStringRef);
}

void type metadata accessor for NLModelEmbeddingType(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for NLModelEmbeddingType);
}

void type metadata accessor for NLModelConfigurationOptionsKey(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for NLModelConfigurationOptionsKey);
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for CFErrorRef);
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for NSAttributedStringKey);
}

void type metadata accessor for NSFileAttributeKey(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for NSFileAttributeKey);
}

void type metadata accessor for MLFeatureValueImageOption(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for MLFeatureValueImageOption);
}

void type metadata accessor for CIImageRepresentationOption(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for CIImageRepresentationOption);
}

void type metadata accessor for MLMultiArrayDataType(uint64_t a1)
{
  type metadata accessor for NLLanguage(a1, &lazy cache variable for type metadata for MLMultiArrayDataType);
}

void type metadata accessor for NLLanguage(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void base witness table accessor for RawRepresentable in CIImageRepresentationOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in CIImageRepresentationOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
}

void base witness table accessor for RawRepresentable in MLFeatureValueImageOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in MLFeatureValueImageOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
}

void base witness table accessor for RawRepresentable in NSFileAttributeKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in NSFileAttributeKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
}

void base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

void base witness table accessor for RawRepresentable in NLModelConfigurationOptionsKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in NLModelConfigurationOptionsKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
}

void base witness table accessor for RawRepresentable in NLModelEmbeddingType()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType);
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in NLModelEmbeddingType()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType);
}

void base witness table accessor for Equatable in NLModelEmbeddingType()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelEmbeddingType and conformance NLModelEmbeddingType, type metadata accessor for NLModelEmbeddingType);
}

void base witness table accessor for Hashable in CFStringRef()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

void base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

void base witness table accessor for RawRepresentable in VNRecognizedPointKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey);
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in VNRecognizedPointKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey);
}

void base witness table accessor for Equatable in VNRecognizedPointKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, type metadata accessor for VNRecognizedPointKey);
}

void base witness table accessor for Equatable in NSURLResourceKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

void base witness table accessor for Equatable in CFStringRef()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

void base witness table accessor for Equatable in NLModelConfigurationOptionsKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NLModelConfigurationOptionsKey and conformance NLModelConfigurationOptionsKey, type metadata accessor for NLModelConfigurationOptionsKey);
}

void base witness table accessor for Equatable in NSAttributedStringKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

void base witness table accessor for Equatable in NSFileAttributeKey()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
}

void base witness table accessor for Equatable in MLFeatureValueImageOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, type metadata accessor for MLFeatureValueImageOption);
}

void base witness table accessor for Equatable in CIImageRepresentationOption()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, type metadata accessor for CIImageRepresentationOption);
}

uint64_t OUTLINED_FUNCTION_0()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_1()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_2(uint64_t (*a1)(void))
{
  return a1();
}

void OUTLINED_FUNCTION_4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_8()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_9()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_10()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_11@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_12(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_13(uint64_t (*a1)(void))
{
  return a1();
}

void OUTLINED_FUNCTION_14(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_15@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_16()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_17()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_19()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_20()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 104);
}

uint64_t OUTLINED_FUNCTION_21()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_23()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_25()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_26@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t OUTLINED_FUNCTION_27()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void OUTLINED_FUNCTION_28()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
}

uint64_t OUTLINED_FUNCTION_29()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_30()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_31()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_32()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v1 + 24) = v2;
}

uint64_t OUTLINED_FUNCTION_33@<X0>(uint64_t (*a1)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, *(_QWORD *)(v3 - 160));
}

uint64_t OUTLINED_FUNCTION_34()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_35@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

void OUTLINED_FUNCTION_36(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_37()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_38()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_39(uint64_t a1, id *a2)
{

}

uint64_t OUTLINED_FUNCTION_40()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_41()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_43@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_45()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_46@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_47()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_48()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_51()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_52@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void OUTLINED_FUNCTION_54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(_QWORD *)(v4 - 96), v3, a3);
}

void OUTLINED_FUNCTION_55(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2, a2);
}

void OUTLINED_FUNCTION_56(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_57(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_58()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_60()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_61()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_62()
{
  JUMPOUT(0x22075B938);
}

void OUTLINED_FUNCTION_63(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_65()
{
  return swift_task_dealloc();
}

uint64_t closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  void (*v28)(char *);
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = a2;
  v6 = type metadata accessor for TensorShape();
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  v9 = v8 - v7;
  v10 = type metadata accessor for FloatingPointRoundingRule();
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v13 = v12 - v11;
  v14 = type metadata accessor for Tensor();
  v39 = *(_QWORD *)(v14 - 8);
  v40 = v14;
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_49();
  v41 = v16 - v15;
  v17 = type metadata accessor for ScalarType();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v34 - v22;
  Tensor.elementType.getter();
  v24 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v23, v17);
  if (v24 == *MEMORY[0x24BE6B878]
    || v24 == *MEMORY[0x24BE6B880]
    || v24 == *MEMORY[0x24BE6B898]
    || v24 == *MEMORY[0x24BE6B8A0]
    || v24 == *MEMORY[0x24BE6B8B8])
  {
    OUTLINED_FUNCTION_1_0();
    MEMORY[0x24BDAC7A8](v25);
    OUTLINED_FUNCTION_0_0();
    Tensor.withUnsafeBytes<A>(_:)();
  }
  else
  {
    v28 = *(void (**)(char *))(v18 + 104);
    v35 = a1;
    v36 = v3;
    v28(v21);
    v30 = v37;
    v29 = v38;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v13, *MEMORY[0x24BEE38B8], v38);
    v34 = a3;
    Tensor.cast(to:roundingRule:)();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v13, v29);
    v31 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
    v32 = v31(v21, v17);
    MEMORY[0x24BDAC7A8](v32);
    *(&v34 - 2) = v35;
    v33 = v41;
    Tensor.withUnsafeBytes<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v33, v40);
    v31(v23, v17);
  }
  Tensor.shape.getter();
  v26 = TensorShape.contiguousSize.getter();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v9, v43);
  *v44 = v26;
  return result;
}

void specialized static vDSP.convertElements<A, B>(of:to:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  if (a3[1] >= a2)
    v3 = a2;
  else
    v3 = a3[1];
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    specialized closure #1 in static vDSP.convertElements<A, B>(of:to:)(a3, a1, a2, v3, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))MEMORY[0x24BDB3520]);
    OUTLINED_FUNCTION_4_0();
  }
}

void specialized static vDSP.convertElements<A, B>(of:to:)(uint64_t a1, uint64_t a2, _QWORD *a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))
{
  if (a3[1] == a2)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      specialized closure #1 in static vDSP.convertElements<A, B>(of:to:)(a3, a1, a2, a2, a4);
      OUTLINED_FUNCTION_4_0();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void closure #2 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2, _QWORD *a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t v4;

  if (a1)
    v4 = (a2 - a1) / 2;
  else
    v4 = 0;
  specialized static vDSP.convertElements<A, B>(of:to:)(a1, v4, a3, a4);
  OUTLINED_FUNCTION_2_0();
}

void closure #3 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2, _QWORD *a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t v4;

  if (a1)
    v4 = (a2 - a1) / 4;
  else
    v4 = 0;
  specialized static vDSP.convertElements<A, B>(of:to:)(a1, v4, a3, a4);
  OUTLINED_FUNCTION_2_0();
}

void closure #1 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  if (a1)
    v3 = (a2 - a1) / 4;
  else
    v3 = 0;
  specialized static vDSP.convertElements<A, B>(of:to:)(a1, v3, a3);
  OUTLINED_FUNCTION_2_0();
}

void partial apply for closure #6 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in closure #1 in Tensor.doubleArray()(a1, a2, *(_QWORD **)(v2 + 16));
}

void partial apply for closure #5 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #3 in closure #1 in Tensor.doubleArray()(a1, a2, *(_QWORD **)(v2 + 16), MEMORY[0x24BDB33E0]);
}

void partial apply for closure #4 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #2 in closure #1 in Tensor.doubleArray()(a1, a2, *(_QWORD **)(v2 + 16), MEMORY[0x24BDB33D0]);
}

void partial apply for closure #3 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #3 in closure #1 in Tensor.doubleArray()(a1, a2, *(_QWORD **)(v2 + 16), MEMORY[0x24BDB33B0]);
}

void partial apply for closure #2 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #2 in closure #1 in Tensor.doubleArray()(a1, a2, *(_QWORD **)(v2 + 16), MEMORY[0x24BDB33A0]);
}

void specialized closure #1 in static vDSP.convertElements<A, B>(of:to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))
{
  if (a2)
  {
    if (*a1)
    {
      a5(a2, 1, *a1, 1, a4);
      OUTLINED_FUNCTION_2_0();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void partial apply for closure #1 in closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t a2)
{
  partial apply for closure #6 in closure #1 in Tensor.doubleArray()(a1, a2);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Interaction(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Interaction(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Interaction()
{
  return &type metadata for Interaction;
}

BOOL static Interaction.< infix(_:_:)(double a1, double a2)
{
  return a1 < a2;
}

BOOL static Interaction.== infix(_:_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return a3 == a4 && a1 == a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return static Interaction.< infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.<= infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL specialized static Comparable.<= infix(_:_:)(double a1, double a2)
{
  return a2 >= a1;
}

BOOL specialized static Comparable.<= infix(_:_:)(_BOOL8 result, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (((a6 | a3) & 1) == 0)
  {
    if (a5 == a2)
      return a4 >= result;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.>= infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL specialized static Comparable.>= infix(_:_:)(double a1, double a2)
{
  return a1 >= a2;
}

BOOL specialized static Comparable.>= infix(_:_:)(_BOOL8 result, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (((a3 | a6) & 1) == 0)
  {
    if (a2 == a5)
      return result >= a4;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.> infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

BOOL specialized static Comparable.> infix(_:_:)(double a1, double a2)
{
  return a2 < a1;
}

BOOL specialized static Comparable.> infix(_:_:)(_BOOL8 result, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (((a6 | a3) & 1) == 0)
  {
    if (a5 == a2)
      return a4 < result;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Interaction(uint64_t a1, uint64_t a2)
{
  return static Interaction.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2, *(double *)(a1 + 8), *(double *)(a2 + 8));
}

unint64_t lazy protocol witness table accessor for type Interaction and conformance Interaction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Interaction and conformance Interaction;
  if (!lazy protocol witness table cache variable for type Interaction and conformance Interaction)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for Interaction, &type metadata for Interaction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Interaction and conformance Interaction);
  }
  return result;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  v1 = v0;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_49();
  v4 = v3 - v2;
  result = outlined init with copy of Any?(v1, (uint64_t)&v6, &demangling cache variable for type metadata for Any?);
  if (v7)
  {
    outlined init with take of Any(&v6, &v8);
    OUTLINED_FUNCTION_16_0();
    MLBoostedTreeRegressor.ModelParameters.ValidationData.table.getter();
    return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLBoostedTreeRegressor.ModelParameters.validationData : MLBoostedTreeRegressor.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = MLBoostedTreeRegressor.ModelParameters.validationData.getter();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

void key path setter for MLBoostedTreeRegressor.ModelParameters.validationData : MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1;
  id v2;
  unsigned __int8 v3;

  v1 = *(_BYTE *)(a1 + 8);
  v2 = *(id *)a1;
  v3 = v1;
  outlined copy of MLDataTable?(v2, v1);
  MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v2);
}

void MLBoostedTreeRegressor.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v11[4];

  v2 = v1;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_49();
  v6 = v5 - v4;
  v7 = *(void **)a1;
  v8 = *(unsigned __int8 *)(a1 + 8);
  v11[3] = v9;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v11);
  if (v8 == 255)
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_WORD *)(v6 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(_QWORD *)v6 = v7;
    *(_BYTE *)(v6 + 8) = v8 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v7, v8);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(v6, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v11, v2);
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validation.getter()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  result = outlined init with copy of Any?(v0, (uint64_t)&v2, &demangling cache variable for type metadata for Any?);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    OUTLINED_FUNCTION_4_1();
    return OUTLINED_FUNCTION_16_0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void (*MLBoostedTreeRegressor.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  MLBoostedTreeRegressor.ModelParameters.validationData.getter();
  return MLBoostedTreeRegressor.ModelParameters.validationData.modify;
}

void MLBoostedTreeRegressor.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned __int8 v5;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(void **)a1;
  v5 = v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of MLDataTable?(v2, v3);
    MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLBoostedTreeRegressor.ModelParameters.validation : MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;

  type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)v3);
  return MLBoostedTreeRegressor.ModelParameters.validation.setter((uint64_t)v3);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v5[4];

  v5[3] = OUTLINED_FUNCTION_4_1();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1);
}

void (*MLBoostedTreeRegressor.ModelParameters.validation.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  void (*result)(uint64_t **, char);

  v2 = v1;
  v4 = malloc(0xA0uLL);
  *a1 = v4;
  v4[16] = v2;
  v5 = OUTLINED_FUNCTION_4_1();
  v4[17] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[18] = malloc(v6);
  v4[19] = malloc(v6);
  result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v2, (uint64_t)(v4 + 4), &demangling cache variable for type metadata for Any?);
  if (v4[7])
  {
    outlined init with take of Any((_OWORD *)v4 + 2, v4);
    OUTLINED_FUNCTION_16_0();
    return MLBoostedTreeRegressor.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLBoostedTreeRegressor.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v7;

  v2 = *a1;
  v3 = (void *)(*a1)[18];
  v4 = (void *)(*a1)[19];
  v5 = (*a1)[17];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 8));
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v5;
    v7 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v7);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 12));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.maxDepth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.maxDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.maxDepth.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.maxIterations.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.minLossReduction.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void MLBoostedTreeRegressor.ModelParameters.minLossReduction.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.minLossReduction.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.minChildWeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void MLBoostedTreeRegressor.ModelParameters.minChildWeight.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.minChildWeight.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.randomSeed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.randomSeed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.randomSeed.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.stepSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

void MLBoostedTreeRegressor.ModelParameters.stepSize.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 72) = a1;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.stepSize.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.earlyStoppingRounds.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.earlyStoppingRounds.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = result;
  *(_BYTE *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.earlyStoppingRounds.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.rowSubsample.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

void MLBoostedTreeRegressor.ModelParameters.rowSubsample.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 96) = a1;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.rowSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeRegressor.ModelParameters.columnSubsample.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 104);
}

void MLBoostedTreeRegressor.ModelParameters.columnSubsample.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 104) = a1;
}

uint64_t (*MLBoostedTreeRegressor.ModelParameters.columnSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.init(validation:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:stepSize:earlyStoppingRounds:rowSubsample:columnSubsample:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>, double a12@<D4>)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v30[4];

  v24 = OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_49();
  v27 = v26 - v25;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_QWORD *)(a7 + 32) = a2;
  *(_QWORD *)(a7 + 40) = a3;
  *(double *)(a7 + 48) = a8;
  *(double *)(a7 + 56) = a9;
  *(_QWORD *)(a7 + 64) = a4;
  *(double *)(a7 + 72) = a10;
  *(_QWORD *)(a7 + 80) = a5;
  *(_BYTE *)(a7 + 88) = a6 & 1;
  *(double *)(a7 + 96) = a11;
  *(double *)(a7 + 104) = a12;
  outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(a1, v26 - v25);
  v30[3] = v24;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v30);
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(v27, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v30, a7);
  return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData(a1);
}

void MLBoostedTreeRegressor.ModelParameters.init(validationData:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:stepSize:earlyStoppingRounds:rowSubsample:columnSubsample:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>, double a12@<D4>)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  v12 = *a1;
  v13 = *((_BYTE *)a1 + 8);
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_QWORD *)(a7 + 32) = a2;
  *(_QWORD *)(a7 + 40) = a3;
  *(double *)(a7 + 48) = a8;
  *(double *)(a7 + 56) = a9;
  *(_QWORD *)(a7 + 64) = a4;
  *(double *)(a7 + 72) = a10;
  *(_QWORD *)(a7 + 80) = a5;
  *(_BYTE *)(a7 + 88) = a6 & 1;
  *(double *)(a7 + 96) = a11;
  *(double *)(a7 + 104) = a12;
  v14 = v12;
  v15 = v13;
  MLBoostedTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v14);
}

void MLBoostedTreeRegressor.ModelParameters.init(configuration:validation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v22;
  uint64_t v23[4];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLBoostedTreeRegressor.ModelParameters.ValidationData?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  v9 = v8 - v7;
  v10 = OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_49();
  v14 = v13 - v12;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 32) = BoostedTreeConfiguration.maximumDepth.getter();
  *(_QWORD *)(a3 + 40) = BoostedTreeConfiguration.maximumIterations.getter();
  BoostedTreeConfiguration.minimumLossReduction.getter();
  *(_QWORD *)(a3 + 48) = v15;
  BoostedTreeConfiguration.minimumChildWeight.getter();
  *(_QWORD *)(a3 + 56) = v16;
  *(_QWORD *)(a3 + 64) = BoostedTreeConfiguration.randomSeed.getter();
  BoostedTreeConfiguration.learningRate.getter();
  *(_QWORD *)(a3 + 72) = v17;
  *(_QWORD *)(a3 + 80) = BoostedTreeConfiguration.earlyStoppingIterationCount.getter();
  *(_BYTE *)(a3 + 88) = v18 & 1;
  BoostedTreeConfiguration.rowSubsample.getter();
  *(_QWORD *)(a3 + 96) = v19;
  BoostedTreeConfiguration.columnSubsample.getter();
  *(_QWORD *)(a3 + 104) = v20;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML22MLBoostedTreeRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML22ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(a2, v9);
  if (__swift_getEnumTagSinglePayload(v9, 1, v10) == 1)
  {
    swift_storeEnumTagMultiPayload();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v9, &demangling cache variable for type metadata for MLBoostedTreeRegressor.ModelParameters.ValidationData?);
  }
  else
  {
    outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(v9, v14);
  }
  v23[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
  outlined init with take of MLBoostedTreeRegressor.ModelParameters.ValidationData(v14, (uint64_t)boxed_opaque_existential_0);
  OUTLINED_FUNCTION_17_0((uint64_t)v23);
  outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(a2, &demangling cache variable for type metadata for DataFrame?);
  v22 = type metadata accessor for BoostedTreeConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a1, v22);
  OUTLINED_FUNCTION_8_0();
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML22MLBoostedTreeRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML22ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for DataFrame();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)v10, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {
    v11 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
    v12 = a2;
    v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
    v14 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 = a2;
    v13 = 0;
    v11 = v14;
  }
  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v11);
}

uint64_t MLBoostedTreeRegressor.ModelParameters.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  OUTLINED_FUNCTION_15_0();
  v1._countAndFlagsBits = 10;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v57._countAndFlagsBits = OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_13_0(v57);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_0_1();
  v2._countAndFlagsBits = 0xD000000000000010;
  v2._object = (void *)0x800000021AFF13A0;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(23);
  OUTLINED_FUNCTION_14_0();
  v58._countAndFlagsBits = 0xD000000000000014;
  v58._object = (void *)0x800000021AFF13C0;
  OUTLINED_FUNCTION_13_0(v58);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_0(v3, v4, v5, v6, v7, v8, v9, v10, v46, v51, 0xD000000000000010, (void *)0x800000021AFF13A0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_6_0((uint64_t)"Min Child Weight: ");
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_0(v11, v12, v13, v14, v15, v16, v17, v18, v47, v52, v56._countAndFlagsBits, v56._object);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v56, "Random Seed: ");
  HIWORD(v56._object) = -4864;
  v59._countAndFlagsBits = OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_13_0(v59);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_0(v19, v20, v21, v22, v23, v24, v25, v26, v48, v53, v56._countAndFlagsBits, v56._object);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9_0();
  v27._countAndFlagsBits = 0x7A69532070657453;
  v27._object = (void *)0xEB00000000203A65;
  String.append(_:)(v27);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_0(v28, v29, v30, v31, v32, v33, v34, v35, v49, v54, v56._countAndFlagsBits, v56._object);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(18);
  OUTLINED_FUNCTION_14_0();
  v36._countAndFlagsBits = 0x7362755320776F52;
  v36._object = (void *)0xEF203A656C706D61;
  String.append(_:)(v36);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_0(v37, v38, v39, v40, v41, v42, v43, v44, v50, v55, v56._countAndFlagsBits, v56._object);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_6_0((uint64_t)"Column Subsample: ");
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  return 0x747065442078614DLL;
}

uint64_t MLBoostedTreeRegressor.ModelParameters.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MLBoostedTreeRegressor.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = result;
  a1[1] = v3;
  return result;
}

void outlined consume of MLDataTable?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    outlined consume of Result<_DataTable, Error>(a1, a2 & 1);
}

void outlined consume of Result<_DataTable, Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release();
}

id outlined copy of MLDataTable?(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return outlined copy of Result<_DataTable, Error>(result, a2 & 1);
  return result;
}

id outlined copy of Result<_DataTable, Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain();
}

uint64_t outlined init with copy of MLBoostedTreeRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static String._createEmpty(withInitialCapacity:)(Swift::Int a1)
{
  if (a1 < 16)
    return 0;
  _StringGuts.grow(_:)(a1);
  return 0;
}

uint64_t sub_21ADF5B58()
{
  return MLBoostedTreeRegressor.ModelParameters.validation.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for MLBoostedTreeRegressor.ModelParameters(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for MLBoostedTreeRegressor.ModelParameters(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    return __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t initializeWithCopy for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithCopy for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

void *__swift_memcpy112_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t assignWithTake for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLBoostedTreeRegressor.ModelParameters(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLBoostedTreeRegressor.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLBoostedTreeRegressor.ModelParameters()
{
  return &type metadata for MLBoostedTreeRegressor.ModelParameters;
}

uint64_t outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void OUTLINED_FUNCTION_0_1()
{
  Swift::String v0;

  v0._countAndFlagsBits = 10;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_1_1()
{
  return Double.write<A>(to:)();
}

uint64_t OUTLINED_FUNCTION_4_1()
{
  return type metadata accessor for MLBoostedTreeRegressor.ModelParameters.ValidationData();
}

void OUTLINED_FUNCTION_5_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  Swift::String v12;

  v12._countAndFlagsBits = a11;
  v12._object = a12;
  String.append(_:)(v12);
}

void OUTLINED_FUNCTION_6_0(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v1);
}

uint64_t OUTLINED_FUNCTION_7_0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_10_0()
{
  _StringGuts.grow(_:)(21);
}

void OUTLINED_FUNCTION_11_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  Swift::String v12;

  v12._countAndFlagsBits = a11;
  v12._object = a12;
  String.append(_:)(v12);
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_13_0(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_17_0(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Any?(a1, v1);
}

uint64_t one-time initialization function for _defaultSessionParameters()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLHandPoseClassifier._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLHandPoseClassifier._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 10;
  *(_QWORD *)(v1 + v4) = 20;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLRandomForestRegressor._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLRandomForestRegressor._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 10;
  *(_QWORD *)(v1 + v4) = 50;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLLogisticRegressionClassifier._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLLogisticRegressionClassifier._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 10;
  *(_QWORD *)(v1 + v4) = 50;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLDecisionTreeRegressor._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLDecisionTreeRegressor._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 10;
  *(_QWORD *)(v1 + v4) = 50;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLImageClassifier._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLImageClassifier._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 10;
  *(_QWORD *)(v1 + v4) = 50;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLHandActionClassifier._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLHandActionClassifier._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 10;
  *(_QWORD *)(v1 + v4) = 20;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLRandomForestClassifier._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLRandomForestClassifier._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 10;
  *(_QWORD *)(v1 + v4) = 50;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLBoostedTreeRegressor._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLBoostedTreeRegressor._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 10;
  *(_QWORD *)(v1 + v4) = 50;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLDecisionTreeClassifier._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLDecisionTreeClassifier._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 10;
  *(_QWORD *)(v1 + v4) = 50;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLSoundClassifier._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLSoundClassifier._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 50;
  *(_QWORD *)(v1 + v4) = 100;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLBoostedTreeClassifier._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLBoostedTreeClassifier._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 10;
  *(_QWORD *)(v1 + v4) = 50;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v0 = (int *)type metadata accessor for MLTrainingSessionParameters();
  __swift_allocate_value_buffer((uint64_t)v0, static MLLinearRegressor._defaultSessionParameters);
  v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static MLLinearRegressor._defaultSessionParameters);
  v2 = type metadata accessor for URL();
  result = __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v4 = v0[6];
  v5 = v0[7];
  *(_QWORD *)(v1 + v0[5]) = 10;
  *(_QWORD *)(v1 + v4) = 50;
  *(_QWORD *)(v1 + v5) = 1000;
  return result;
}

void static MLHandPoseClassifier._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLHandPoseClassifier._defaultSessionParameters);
  outlined init with copy of MLTrainingSessionParameters(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_22();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

id MLHandPoseClassifier.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_35_0() + 20));
}

uint64_t type metadata accessor for MLHandPoseClassifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLHandPoseClassifier;
  if (!type metadata singleton initialization cache for MLHandPoseClassifier)
    return swift_getSingletonMetadata();
  return result;
}

void MLHandPoseClassifier.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_35_0() + 20);

  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLHandPoseClassifier.model.modify())(_QWORD)
{
  OUTLINED_FUNCTION_35_0();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandPoseClassifier.modelParameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_131(v0 + *(int *)(v1 + 24), v2, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  OUTLINED_FUNCTION_22();
}

void MLHandPoseClassifier.trainingMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_131(v0 + *(int *)(v1 + 28), v2, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

uint64_t MLHandPoseClassifier.trainingMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_35_0();
  return OUTLINED_FUNCTION_130(a1, v1 + *(int *)(v3 + 28));
}

uint64_t outlined assign with take of MLClassifierMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLClassifierMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*MLHandPoseClassifier.trainingMetrics.modify())(_QWORD)
{
  OUTLINED_FUNCTION_35_0();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandPoseClassifier.validationMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_131(v0 + *(int *)(v1 + 32), v2, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

uint64_t MLHandPoseClassifier.validationMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_35_0();
  return OUTLINED_FUNCTION_130(a1, v1 + *(int *)(v3 + 32));
}

uint64_t (*MLHandPoseClassifier.validationMetrics.modify())(_QWORD)
{
  OUTLINED_FUNCTION_35_0();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandPoseClassifier.init(trainingData:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  unsigned __int8 v79;
  void *v80;
  unsigned __int8 v81;

  OUTLINED_FUNCTION_8_1();
  v74 = v3;
  v75 = v0;
  v5 = v4;
  v7 = v6;
  v8 = OUTLINED_FUNCTION_95();
  v71 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v71 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v73 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_118();
  v10 = (int *)type metadata accessor for MLHandPoseClassifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v72 = v12;
  v13 = OUTLINED_FUNCTION_118();
  v14 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(v13);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_66();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_54_0();
  v17 = v10[5];
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFC8]), sel_init);
  *(_QWORD *)(v7 + v17) = v18;
  v77 = v7 + v10[7];
  MLClassifierMetrics.init()((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, v64, v65, v66, v67, (uint64_t)v68, v69, (uint64_t)v70, v71, v72, v73, v74,
    v75);
  v26 = v10[8];
  v76 = v7;
  v27 = v7 + v26;
  MLClassifierMetrics.init()(v28, v29, v30, v31, v32, v33, v34, v35, v64, v65, v66, v67, (uint64_t)v68, v69, (uint64_t)v70, v71, v72, v73, v74,
    v75);
  v36 = v74;
  v37 = v75;
  MLHandPoseClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)((uint64_t *)&v80, (uint64_t *)&v78);
  if (v37)
  {
    OUTLINED_FUNCTION_203(v38, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    OUTLINED_FUNCTION_48_0(v39, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    v40 = v77;

    OUTLINED_FUNCTION_92(v40);
    OUTLINED_FUNCTION_92(v27);
LABEL_14:
    OUTLINED_FUNCTION_7();
    return;
  }
  v66 = v14;
  v67 = v2;
  v68 = v1;
  v69 = v27;
  v41 = v73;
  v75 = v5;
  v42 = v80;
  v43 = v81;
  v70 = v78;
  v44 = v79;
  if (v81 == 255)
  {
    MLHandPoseClassifier.DataSource.keypointsWithAnnotations()();
    v45 = v36;
  }
  else
  {
    type metadata accessor for MLHandPoseClassifier.FeatureExtractor();
    v78 = v42;
    v79 = v43 & 1;
    outlined copy of Result<_DataTable, Error>(v42, v43 & 1);
    OUTLINED_FUNCTION_103();
    v45 = v36;
    OUTLINED_FUNCTION_64_0();
  }
  v65 = (uint64_t)v80;
  v46 = (uint64_t)v68;
  LODWORD(v74) = v81;
  if (v44 != 255)
  {
    type metadata accessor for MLHandPoseClassifier.FeatureExtractor();
    v78 = v70;
    v79 = v44 & 1;
    OUTLINED_FUNCTION_103();
    v66 = (uint64_t)v42;
    LODWORD(v67) = v43;
LABEL_12:
    v68 = v80;
    v51 = v81;
    goto LABEL_13;
  }
  v47 = v67;
  outlined init with copy of MLTrainingSessionParameters(v45, v67, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters(v47, v46, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    MLHandPoseClassifier.DataSource.keypointsWithAnnotations()();
    v66 = (uint64_t)v42;
    LODWORD(v67) = v43;
    OUTLINED_FUNCTION_203(v52, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    goto LABEL_12;
  }
  outlined destroy of MLHandPoseClassifier.ModelParameters(v47, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  v48 = MEMORY[0x22075BC08](0);
  if (v48)
  {
    v49 = v48;
    v66 = (uint64_t)v42;
    LODWORD(v67) = v43;
    type metadata accessor for CMLTable();
    v50 = OUTLINED_FUNCTION_9_1();
    *(_QWORD *)(v50 + 16) = v49;
    type metadata accessor for _DataTable();
    OUTLINED_FUNCTION_9_1();
    v68 = _DataTable.init(impl:)(v50);
    v51 = 0;
LABEL_13:
    outlined init with copy of MLTrainingSessionParameters(v45, v41, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    v53 = (*(unsigned __int8 *)(v71 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
    v54 = swift_allocObject();
    v55 = v65;
    *(_QWORD *)(v54 + 16) = v65;
    v56 = v74;
    *(_BYTE *)(v54 + 24) = v74;
    v57 = v68;
    *(_QWORD *)(v54 + 32) = v68;
    *(_BYTE *)(v54 + 40) = v51;
    v58 = v54 + v53;
    LOBYTE(v53) = v56;
    v59 = v41;
    v60 = (void *)v55;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v59, v58, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    outlined copy of Result<_DataTable, Error>(v60, v53);
    outlined copy of Result<_DataTable, Error>(v57, v51);
    v61 = v72;
    specialized blockAwait<A>(_:)();
    swift_release();
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_176();
    outlined consume of Result<_DataTable, Error>(v68, v51);
    OUTLINED_FUNCTION_98(v60);
    OUTLINED_FUNCTION_48_0(v62, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    OUTLINED_FUNCTION_82(v63, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    OUTLINED_FUNCTION_174(v17);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v77, type metadata accessor for MLClassifierMetrics);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v69, type metadata accessor for MLClassifierMetrics);
    outlined init with take of MLHandPoseClassifier.ModelParameters(v61, v45, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)(uint64_t a1, void *a2, char a3, void *a4, char a5, uint64_t a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 26) = a5;
  *(_QWORD *)(v6 + 64) = a4;
  *(_QWORD *)(v6 + 72) = a6;
  *(_BYTE *)(v6 + 25) = a3;
  *(_QWORD *)(v6 + 48) = a1;
  *(_QWORD *)(v6 + 56) = a2;
  type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  outlined copy of Result<_DataTable, Error>(a2, a3 & 1);
  outlined copy of Result<_DataTable, Error>(a4, a5 & 1);
  return swift_task_switch();
}

uint64_t closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_BYTE *)(v0 + 26);
  v4 = *(_BYTE *)(v0 + 25);
  v5 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 56);
  *(_BYTE *)(v0 + 24) = v4 & 1;
  *(_QWORD *)(v0 + 32) = v5;
  *(_BYTE *)(v0 + 40) = v3 & 1;
  outlined init with copy of MLTrainingSessionParameters(v1, v2, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v6;
  *v6 = v0;
  v6[1] = closure #1 in MLHandPoseClassifier.init(trainingData:parameters:);
  return MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:)(*(_QWORD *)(v0 + 48), (uint64_t *)(v0 + 16), v0 + 32, *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_18();
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v2 + 8));
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 + 48) = a1;
  *(_QWORD *)(v4 + 56) = a4;
  *(_QWORD *)(v4 + 64) = OUTLINED_FUNCTION_134();
  *(_QWORD *)(v4 + 72) = swift_task_alloc();
  *(_QWORD *)(v4 + 80) = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)(v4 + 88) = swift_task_alloc();
  v7 = swift_task_alloc();
  v8 = *a2;
  *(_QWORD *)(v4 + 96) = v7;
  *(_QWORD *)(v4 + 104) = v8;
  *(_BYTE *)(v4 + 25) = *((_BYTE *)a2 + 8);
  *(_QWORD *)(v4 + 112) = *(_QWORD *)a3;
  *(_BYTE *)(v4 + 26) = *(_BYTE *)(a3 + 8);
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

uint64_t MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  HIDWORD(v38) = *(unsigned __int8 *)(v0 + 26);
  v1 = *(_QWORD *)(v0 + 104);
  v35 = *(_QWORD *)(v0 + 112);
  v2 = *(_BYTE *)(v0 + 25);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(int **)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = (int *)OUTLINED_FUNCTION_35_0();
  v8 = v7[5];
  *(_DWORD *)(v0 + 28) = v8;
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFC8]), sel_init);
  *(_QWORD *)(v6 + v8) = v9;
  *(_DWORD *)(v0 + 44) = v7[7];
  MLClassifierMetrics.init()((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v33, v35, v38, v41, v43, v45, v47, v49, v51, v53, v55,
    v57);
  *(_DWORD *)(v0 + 136) = v7[8];
  MLClassifierMetrics.init()(v17, v18, v19, v20, v21, v22, v23, v24, v34, v36, v39, v42, v44, v46, v48, v50, v52, v54, v56,
    v58);
  v25 = v7[6];
  *(_DWORD *)(v0 + 140) = v25;
  outlined init with copy of MLTrainingSessionParameters(v5, v6 + v25, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  v26 = (int *)OUTLINED_FUNCTION_95();
  v27 = *(_QWORD *)(v5 + v26[7]);
  v28 = *(_QWORD *)(v5 + v26[5]);
  v29 = *(_QWORD *)(v5 + v26[6]);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_WORD *)(v3 + 16) = 256;
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v3 + v4[5]) = v28;
  *(_QWORD *)(v3 + v4[6]) = v29;
  *(_QWORD *)(v3 + v4[7]) = 1;
  *(_QWORD *)(v3 + v4[8]) = v27;
  *(_QWORD *)(v3 + v4[10]) = 0x403E000000000000;
  *(_QWORD *)(v0 + 16) = v1;
  *(_BYTE *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = v37;
  *(_BYTE *)(v0 + 40) = v40;
  OUTLINED_FUNCTION_131(v3, v30, type metadata accessor for MLHandActionClassifier.ModelParameters);
  v31 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v31;
  *v31 = v0;
  v31[1] = MLHandPoseClassifier.init(trainingFeatures:validationFeatures:parameters:);
  return MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(*(_QWORD *)(v0 + 72), (uint64_t *)(v0 + 16), (uint64_t *)(v0 + 32), *(_QWORD *)(v0 + 88));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = v4 + *(int *)(v0 + 136);
  v6 = v4 + *(int *)(v0 + 44);
  v7 = (id *)(v4 + *(int *)(v0 + 28));
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 56), type metadata accessor for MLHandPoseClassifier.ModelParameters);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined init with take of MLHandPoseClassifier.ModelParameters(v2, v4, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
  outlined assign with copy of MLClassifierMetrics(v4 + *(int *)(v3 + 32), v6);
  outlined assign with copy of MLClassifierMetrics(v4 + *(int *)(v3 + 36), v5);
  objc_storeStrong(v7, *(id *)(v4 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(int *)(v0 + 28);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = v3 + *(int *)(v0 + 140);
  v5 = v3 + *(int *)(v0 + 136);
  v6 = v3 + *(int *)(v0 + 44);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 56), type metadata accessor for MLHandPoseClassifier.ModelParameters);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, type metadata accessor for MLHandActionClassifier.ModelParameters);

  outlined destroy of MLHandPoseClassifier.ModelParameters(v4, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v6, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v5, type metadata accessor for MLClassifierMetrics);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized blockAwait<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  dispatch_semaphore_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  uint64_t v9;
  _OWORD v10[2];
  unsigned __int8 v11;
  __int128 v12;

  OUTLINED_FUNCTION_138();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_26_0();
  v2 = OUTLINED_FUNCTION_9_1();
  v3 = OUTLINED_FUNCTION_16_1(v2);
  v4 = OUTLINED_FUNCTION_94();
  OUTLINED_FUNCTION_37_0(v0, v5, v6, v4);
  v7 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_36_0(v7);
  OUTLINED_FUNCTION_3_1();
  v8 = v3;
  OUTLINED_FUNCTION_105((uint64_t)v8, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:));
  swift_release();
  OS_dispatch_semaphore.wait()();
  v9 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_177(v9, (uint64_t)v10, &demangling cache variable for type metadata for Result<Any, Error>?);
  if (v11 == 255)
  {
    __break(1u);
  }
  else
  {
    if ((v11 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      OUTLINED_FUNCTION_81();

    }
    else
    {
      outlined init with take of Any(v10, &v12);
      OUTLINED_FUNCTION_81();

      type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLModel);
      OUTLINED_FUNCTION_16_0();
    }
    OUTLINED_FUNCTION_218();
    OUTLINED_FUNCTION_127();
  }
}

{
  specialized blockAwait<A>(_:)();
}

{
  uint64_t v0;
  void (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  dispatch_semaphore_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  char v15;
  char v16;
  void (*v17)(_QWORD);
  uint64_t v18;

  OUTLINED_FUNCTION_8_1();
  v17 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_161();
  type metadata accessor for ResultBox();
  v8 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  v9 = OUTLINED_FUNCTION_17_1(v8);
  v10 = OUTLINED_FUNCTION_94();
  OUTLINED_FUNCTION_37_0(v0, v11, v12, v10);
  v13 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v8;
  v13[5] = v7;
  v13[6] = v5;
  v13[7] = v9;
  OUTLINED_FUNCTION_149();
  swift_retain();
  v14 = v9;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v0, v3, (uint64_t)v13);
  swift_release();
  OS_dispatch_semaphore.wait()();
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of URL?(v8 + 16, (uint64_t)&v18, &demangling cache variable for type metadata for Result<Any, Error>?);
  OUTLINED_FUNCTION_215();
  if (v16)
  {
    __break(1u);
  }
  else
  {
    if ((v15 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      swift_release();

    }
    else
    {
      OUTLINED_FUNCTION_220();
      swift_release();

      v17(0);
      OUTLINED_FUNCTION_16_0();
    }
    OUTLINED_FUNCTION_88();
    OUTLINED_FUNCTION_7();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  dispatch_semaphore_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  uint64_t v9;
  _OWORD v10[2];
  unsigned __int8 v11;
  __int128 v12;

  OUTLINED_FUNCTION_138();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_26_0();
  v2 = OUTLINED_FUNCTION_9_1();
  v3 = OUTLINED_FUNCTION_16_1(v2);
  v4 = OUTLINED_FUNCTION_94();
  OUTLINED_FUNCTION_37_0(v0, v5, v6, v4);
  v7 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_36_0(v7);
  OUTLINED_FUNCTION_3_1();
  v8 = v3;
  OUTLINED_FUNCTION_105((uint64_t)v8, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:));
  swift_release();
  OS_dispatch_semaphore.wait()();
  v9 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_177(v9, (uint64_t)v10, &demangling cache variable for type metadata for Result<Any, Error>?);
  if (v11 == 255)
  {
    __break(1u);
  }
  else
  {
    if ((v11 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      OUTLINED_FUNCTION_81();

    }
    else
    {
      outlined init with take of Any(v10, &v12);
      OUTLINED_FUNCTION_81();

      type metadata accessor for _Model();
      OUTLINED_FUNCTION_16_0();
    }
    OUTLINED_FUNCTION_218();
    OUTLINED_FUNCTION_127();
  }
}

{
  specialized blockAwait<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  dispatch_semaphore_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;

  OUTLINED_FUNCTION_138();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_26_0();
  v2 = OUTLINED_FUNCTION_9_1();
  v3 = OUTLINED_FUNCTION_16_1(v2);
  v4 = OUTLINED_FUNCTION_94();
  OUTLINED_FUNCTION_37_0(v0, v5, v6, v4);
  v7 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_36_0(v7);
  OUTLINED_FUNCTION_3_1();
  v8 = v3;
  OUTLINED_FUNCTION_105((uint64_t)v8, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:));
  swift_release();
  OS_dispatch_semaphore.wait()();
  v9 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_177(v9, (uint64_t)&v12, &demangling cache variable for type metadata for Result<Any, Error>?);
  OUTLINED_FUNCTION_215();
  if (v11)
  {
    __break(1u);
  }
  else
  {
    if ((v10 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      OUTLINED_FUNCTION_81();

    }
    else
    {
      OUTLINED_FUNCTION_220();
      OUTLINED_FUNCTION_81();

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([AnnotatedFeature<CIImage, String>], [AnnotatedFeature<CIImage, String>]));
      OUTLINED_FUNCTION_16_0();
    }
    OUTLINED_FUNCTION_218();
  }
}

{
  specialized blockAwait<A>(_:)();
}

{
  specialized blockAwait<A>(_:)();
}

{
  specialized blockAwait<A>(_:)();
}

{
  specialized blockAwait<A>(_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  dispatch_semaphore_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  char v16;
  char v17;
  uint64_t *v18;
  _OWORD v19[4];
  __int128 v20;

  OUTLINED_FUNCTION_8_1();
  v18 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_55_0();
  type metadata accessor for ResultBox();
  v9 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  v10 = OUTLINED_FUNCTION_17_1(v9);
  v11 = OUTLINED_FUNCTION_94();
  OUTLINED_FUNCTION_37_0(v0, v12, v13, v11);
  v14 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v9;
  v14[5] = v7;
  v14[6] = v5;
  v14[7] = v10;
  swift_retain();
  OUTLINED_FUNCTION_149();
  v15 = v10;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v0, v3, (uint64_t)v14);
  swift_release();
  OS_dispatch_semaphore.wait()();
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of URL?(v9 + 16, (uint64_t)v19, &demangling cache variable for type metadata for Result<Any, Error>?);
  OUTLINED_FUNCTION_215();
  if (v17)
  {
    __break(1u);
  }
  else
  {
    if ((v16 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      OUTLINED_FUNCTION_136();

    }
    else
    {
      outlined init with take of Any(v19, &v20);
      OUTLINED_FUNCTION_136();

      __swift_instantiateConcreteTypeFromMangledName(v18);
      OUTLINED_FUNCTION_16_0();
    }
    OUTLINED_FUNCTION_88();
    OUTLINED_FUNCTION_7();
  }
}

{
  specialized blockAwait<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  dispatch_semaphore_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  char v13;
  char v14;
  _OWORD v15[4];
  __int128 v16;

  OUTLINED_FUNCTION_8_1();
  v2 = v1;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_20_0();
  type metadata accessor for ResultBox();
  v6 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  v7 = OUTLINED_FUNCTION_17_1(v6);
  v8 = OUTLINED_FUNCTION_94();
  OUTLINED_FUNCTION_37_0(v0, v9, v10, v8);
  v11 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v6;
  v11[5] = v4;
  v11[6] = v2;
  v11[7] = v7;
  swift_retain();
  OUTLINED_FUNCTION_3_1();
  v12 = v7;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in blockAwait<A>(_:), (uint64_t)v11);
  swift_release();
  OS_dispatch_semaphore.wait()();
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of URL?(v6 + 16, (uint64_t)v15, &demangling cache variable for type metadata for Result<Any, Error>?);
  OUTLINED_FUNCTION_215();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    if ((v13 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_willThrowTypedImpl();
      OUTLINED_FUNCTION_136();

    }
    else
    {
      outlined init with take of Any(v15, &v16);
      OUTLINED_FUNCTION_136();

      OUTLINED_FUNCTION_16_0();
    }
    OUTLINED_FUNCTION_88();
    OUTLINED_FUNCTION_7();
  }
}

void MLHandPoseClassifier.init(model:parameters:metricsAttributes:classLabels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(_QWORD);
  uint64_t v86;
  uint64_t v87;
  double *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double *v93;
  uint64_t v94;
  double *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;

  OUTLINED_FUNCTION_8_1();
  v96 = (uint64_t)v10;
  v98 = v13;
  v100 = v14;
  v101 = v15;
  v17 = v16;
  v19 = v18;
  type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_208();
  v93 = v21;
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_211();
  v95 = v23;
  OUTLINED_FUNCTION_118();
  v97 = type metadata accessor for MLHandActionClassifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v24);
  v25 = OUTLINED_FUNCTION_20_0();
  v26 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(v25);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_42_0();
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v92 - v29;
  v31 = OUTLINED_FUNCTION_35_0();
  v32 = *(int *)(v31 + 20);
  v33 = v31;
  v99 = v31;
  v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFC8]), sel_init);
  *(_QWORD *)(v19 + v32) = v34;
  MLClassifierMetrics.init()((uint64_t)v34, v35, v36, v37, v38, v39, v40, v41, v92, (uint64_t)v93, v19 + *(int *)(v33 + 28), (uint64_t)v95, v96, v97, v98, v99, v100, v101, v102,
    *((uint64_t *)&v102 + 1));
  MLClassifierMetrics.init()(v42, v43, v44, v45, v46, v47, v48, v49, v19 + *(int *)(v33 + 32), (uint64_t)v93, v94, (uint64_t)v95, v96, v97, v98, v99, v100, v101, v102,
    *((uint64_t *)&v102 + 1));
  v50 = (int *)OUTLINED_FUNCTION_95();
  v51 = *(_QWORD *)(v17 + v50[7]);
  v52 = *(_QWORD *)(v17 + v50[5]);
  v53 = *(_QWORD *)(v17 + v50[6]);
  OUTLINED_FUNCTION_113();
  OUTLINED_FUNCTION_156();
  *(_QWORD *)&v30[v26[5]] = v52;
  v54 = v19;
  *(_QWORD *)&v30[v26[6]] = v53;
  *(_QWORD *)&v30[v26[7]] = 1;
  *(_QWORD *)&v30[v26[8]] = v51;
  v55 = v98;
  *(_QWORD *)&v30[v26[10]] = 0x403E000000000000;
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v30, v12, type metadata accessor for MLHandActionClassifier.ModelParameters);
  v56 = objc_allocWithZone(MEMORY[0x24BDBFFC8]);
  OUTLINED_FUNCTION_200();
  v57 = objc_msgSend(v10, sel_init);
  v11[2] = (uint64_t)v57;
  v58 = v97;
  MLClassifierMetrics.init()((uint64_t)v57, v59, v60, v61, v62, v63, v64, v65, v92, (uint64_t)v93, v94, (uint64_t)v95, v96, v97, v98, v99, v100, v101, v102,
    *((uint64_t *)&v102 + 1));
  MLClassifierMetrics.init()(v66, v67, v68, v69, v70, v71, v72, v73, v92, (uint64_t)v93, v94, (uint64_t)v95, v96, v97, v98, v99, v100, v101, v102,
    *((uint64_t *)&v102 + 1));
  *v11 = v55;
  outlined init with copy of MLTrainingSessionParameters(v12, (uint64_t)v11 + *(int *)(v58 + 28), type metadata accessor for MLHandActionClassifier.ModelParameters);
  v74 = v100;
  type metadata accessor for MLHandActionClassifier.GraphCNN(0);
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_200();
  v75 = OUTLINED_FUNCTION_83();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v12, type metadata accessor for MLHandActionClassifier.ModelParameters);
  v11[1] = (uint64_t)v75;
  v76 = v101;
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v11, v54, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
  swift_retain();
  swift_release();
  *(_QWORD *)(v54 + 8) = v74;
  v77 = v54 + *(int *)(v99 + 24);
  v99 = v17;
  outlined init with copy of MLTrainingSessionParameters(v17, v77, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  specialized Dictionary.subscript.getter(0xD000000000000012, 0x800000021AFF16D0, v76, &v102);
  if (!v103)
  {
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_30();
    outlined destroy of URL?((uint64_t)&v102, &demangling cache variable for type metadata for Any?);
LABEL_7:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_187();
    OUTLINED_FUNCTION_18_0(v83, v82 + 26);
    v81 = OUTLINED_FUNCTION_79();
LABEL_8:
    OUTLINED_FUNCTION_82(v81, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    OUTLINED_FUNCTION_58_0(v84, type metadata accessor for MLHandActionClassifier.ModelParameters);
    v85 = (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier;
    v86 = v54;
    goto LABEL_10;
  }
  v78 = v55;
  type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
  if ((OUTLINED_FUNCTION_91() & 1) == 0)
  {
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_30();
    goto LABEL_7;
  }
  v80 = v95;
  v79 = v96;
  static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(v55, v95);
  if (v79)
  {
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_217();
    v81 = OUTLINED_FUNCTION_104();
    goto LABEL_8;
  }
  v97 = a10;
  outlined assign with take of MLClassifierMetrics((uint64_t)v80, v94);
  OUTLINED_FUNCTION_187();
  specialized Dictionary.subscript.getter(v87 + 2, 0x800000021AFF1720, v76, &v102);
  OUTLINED_FUNCTION_104();
  if (!v103)
  {
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_185();
    outlined destroy of URL?((uint64_t)&v102, &demangling cache variable for type metadata for Any?);
LABEL_18:
    OUTLINED_FUNCTION_82(v91, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    v85 = type metadata accessor for MLHandActionClassifier.ModelParameters;
    v86 = (uint64_t)v30;
LABEL_10:
    outlined destroy of MLHandPoseClassifier.ModelParameters(v86, v85);
    goto LABEL_11;
  }
  if ((OUTLINED_FUNCTION_91() & 1) == 0)
  {
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_79();
    v91 = OUTLINED_FUNCTION_185();
    goto LABEL_18;
  }
  v88 = v93;
  static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(v78, v93);
  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_184();
  v89 = OUTLINED_FUNCTION_185();
  OUTLINED_FUNCTION_82(v89, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  OUTLINED_FUNCTION_58_0(v90, type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined assign with take of MLClassifierMetrics((uint64_t)v88, v92);
LABEL_11:
  OUTLINED_FUNCTION_7();
}

void MLHandPoseClassifier.init(checkpoint:)()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char v49;
  double v50;
  id v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  _QWORD *v64;
  int *v65;
  uint64_t v66;
  id v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  id v112;
  char v113;
  void *v114;
  char v115;
  uint64_t v116;

  OUTLINED_FUNCTION_8_1();
  v110 = v0;
  v116 = v1;
  v3 = v2;
  v100 = type metadata accessor for MLHandActionClassifier();
  v96 = *(_QWORD *)(v100 - 8);
  v4 = MEMORY[0x24BDAC7A8](v100);
  v102 = (uint64_t *)((char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v97 = v5;
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_211();
  v104 = v6;
  v7 = OUTLINED_FUNCTION_118();
  v99 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(v7);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_208();
  v101 = v9;
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_211();
  v103 = v11;
  OUTLINED_FUNCTION_118();
  v106 = type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_64();
  v105 = v13;
  OUTLINED_FUNCTION_118();
  v98 = (int *)type metadata accessor for MLHandPoseClassifier.PersistentParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_49();
  v17 = (_QWORD *)(v16 - v15);
  v18 = OUTLINED_FUNCTION_78();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (int *)OUTLINED_FUNCTION_35_0();
  v23 = v22[5];
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFC8]), sel_init);
  v109 = v23;
  *(_QWORD *)(v3 + v23) = v24;
  v25 = v3 + v22[7];
  MLClassifierMetrics.init()((uint64_t)v24, v26, v27, v28, v29, v30, v31, v32, v93, v94, v95, v96, v97, (uint64_t)v98, (uint64_t)v99, v100, v101, (uint64_t)v102, (uint64_t)v103,
    v104);
  v33 = v22[8];
  v111 = v3;
  v107 = v3 + v33;
  MLClassifierMetrics.init()(v34, v35, v36, v37, v38, v39, v40, v41, v93, v94, v95, v96, v97, (uint64_t)v98, (uint64_t)v99, v100, v101, (uint64_t)v102, (uint64_t)v103,
    v104);
  URL.deletingLastPathComponent()();
  v42 = OUTLINED_FUNCTION_188();
  v108 = v18;
  v43(v42);
  v44 = v110;
  MLHandPoseClassifier.PersistentParameters.init(sessionDirectory:)(v21, v17);
  if (v44)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters(v116, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_173();
    v46 = v107;

    OUTLINED_FUNCTION_92(v25);
    OUTLINED_FUNCTION_92(v46);
  }
  else
  {
    v110 = v22;
    v95 = v25;
    v47 = v105;
    OUTLINED_FUNCTION_131((uint64_t)v17, v45, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      OUTLINED_FUNCTION_168();
      v48 = *(void **)v47;
      v49 = *(_BYTE *)(v47 + 8);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_123();
      outlined copy of Result<_DataTable, Error>(v48, v49);
      specialized MLDataTable.subscript.getter((char)v48, v49, (uint64_t)&v112, v50);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_98(v48);
      v51 = v112;
      v52 = v113;
      specialized MLDataColumn.dropDuplicates()(v112, v113, (uint64_t)&v114);
      outlined consume of Result<_DataTable, Error>(v51, v52);
      v53 = specialized Array<A>.init(_:)(v114, v115);
      OUTLINED_FUNCTION_98(v48);
    }
    else
    {
      static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)((uint64_t)v17);
      OUTLINED_FUNCTION_168();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_101();
      specialized _copyCollectionToContiguousArray<A>(_:)();
      v53 = v55;
      v56 = OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_48_0(v56, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    }
    v57 = v111 + v110[6];
    v58 = v98;
    v59 = v106;
    OUTLINED_FUNCTION_131(v106 + v98[5], v54, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    v60 = *(_QWORD *)(v59 + v58[6]);
    v61 = *(_QWORD *)(v59 + v58[7]);
    v62 = *(_QWORD *)(v59 + v58[8]);
    v63 = (int *)OUTLINED_FUNCTION_95();
    *(_QWORD *)(v57 + v63[5]) = v60;
    *(_QWORD *)(v57 + v63[6]) = v61;
    *(_QWORD *)(v57 + v63[7]) = v62;
    v64 = v103;
    *v103 = 0;
    v64[1] = 0;
    *((_WORD *)v64 + 8) = 256;
    type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    swift_storeEnumTagMultiPayload();
    v65 = v99;
    *(_QWORD *)((char *)v64 + v99[5]) = v60;
    *(_QWORD *)((char *)v64 + v65[6]) = v61;
    *(_QWORD *)((char *)v64 + v65[7]) = 1;
    *(_QWORD *)((char *)v64 + v65[8]) = v62;
    *(_QWORD *)((char *)v64 + v65[10]) = 0x403E000000000000;
    v66 = v101;
    OUTLINED_FUNCTION_223((uint64_t)v64, v101);
    v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFC8]), sel_init);
    v68 = v102;
    v102[2] = (uint64_t)v67;
    v69 = v100;
    MLClassifierMetrics.init()((uint64_t)v67, v70, v71, v72, v73, v74, v75, v76, v93, v94, v95, v96, v97, (uint64_t)v98, (uint64_t)v99, v100, v101, (uint64_t)v102, (uint64_t)v103,
      v104);
    MLClassifierMetrics.init()(v77, v78, v79, v80, v81, v82, v83, v84, v93, v94, v95, v96, v97, (uint64_t)v98, (uint64_t)v99, v100, v101, (uint64_t)v102, (uint64_t)v103,
      v104);
    *v68 = v53;
    OUTLINED_FUNCTION_223(v66, (uint64_t)v68 + *(int *)(v69 + 28));
    type metadata accessor for MLHandActionClassifier.GraphCNN(0);
    OUTLINED_FUNCTION_15_1();
    swift_bridgeObjectRetain();
    v85 = OUTLINED_FUNCTION_83();
    OUTLINED_FUNCTION_92(v66);
    v68[1] = (uint64_t)v85;
    v86 = v104;
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v68, v104, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
    OUTLINED_FUNCTION_3_1();
    MLHandActionClassifier.GraphCNN.updateGraphCNN(from:)(v116);
    OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_223(v86, (uint64_t)v68);
    v87 = (*(unsigned __int8 *)(v96 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
    v88 = swift_allocObject();
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v68, v88 + v87, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
    specialized blockAwait<A>(_:)();
    v90 = v89;
    OUTLINED_FUNCTION_4_2();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v116, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v64, type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v106, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
    OUTLINED_FUNCTION_75();
    v91 = v109;
    v92 = v111;

    *(_QWORD *)(v92 + v91) = v90;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v86, v92, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
  }
  OUTLINED_FUNCTION_7();
}

void specialized MLDataTable.subscript.getter(char a1@<W2>, char a2@<W3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  if ((a2 & 1) != 0)
  {
    LOBYTE(v3) = a1;
    swift_willThrow();
    goto LABEL_5;
  }
  OUTLINED_FUNCTION_3_1();
  v5 = OUTLINED_FUNCTION_100((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in CMLTable.column(name:));
  if (v3)
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_4_2();
LABEL_5:
    OUTLINED_FUNCTION_111();
    v6 = OUTLINED_FUNCTION_153();
    OUTLINED_FUNCTION_25_0(v6, v7, v8, v9, v10, v11, v12, v13, v28, v29, *((uint64_t *)&v29 + 1));
    v14 = &v29;
    OUTLINED_FUNCTION_152(39);
    OUTLINED_FUNCTION_151();
    v15 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_117(v15, v16);
    goto LABEL_6;
  }
  v17 = v5;
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_225();
  v14 = (__int128 *)OUTLINED_FUNCTION_9_1();
  *((_QWORD *)v14 + 2) = v17;
  OUTLINED_FUNCTION_149();
  OUTLINED_FUNCTION_3_1();
  _UntypedColumn.type.getter(&v29);
  OUTLINED_FUNCTION_4_2();
  if ((_BYTE)v29)
  {
    OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_112();
    v18 = OUTLINED_FUNCTION_153();
    OUTLINED_FUNCTION_23_0(v18, v19, v20, v21, v22, v23, v24, v25, v28, v29);
    OUTLINED_FUNCTION_145(0xD000000000000021, (uint64_t)"' does not support requested type");
    OUTLINED_FUNCTION_151();
    v26 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_56_0(v26, v27);
  }
  else
  {
    swift_release();
    LOBYTE(v3) = 0;
  }
LABEL_6:
  *(_QWORD *)a3 = v14;
  *(_BYTE *)(a3 + 8) = v3;
  OUTLINED_FUNCTION_43_0();
}

void specialized MLDataTable.subscript.getter(char a1@<W2>, char a2@<W3>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  _QWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  if ((a2 & 1) != 0)
  {
    LOBYTE(v4) = a1;
    swift_willThrow(a4);
    goto LABEL_5;
  }
  OUTLINED_FUNCTION_3_1();
  v6 = OUTLINED_FUNCTION_100((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in CMLTable.column(name:));
  if (v4)
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_4_2();
LABEL_5:
    OUTLINED_FUNCTION_111();
    v7 = OUTLINED_FUNCTION_153();
    OUTLINED_FUNCTION_25_0(v7, v8, v9, v10, v11, v12, v13, v14, v29, v30, *((uint64_t *)&v30 + 1));
    v15 = &v30;
    OUTLINED_FUNCTION_152(39);
    OUTLINED_FUNCTION_151();
    v16 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_117(v16, v17);
    goto LABEL_6;
  }
  v18 = v6;
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_225();
  v15 = (__int128 *)OUTLINED_FUNCTION_9_1();
  *((_QWORD *)v15 + 2) = v18;
  OUTLINED_FUNCTION_149();
  OUTLINED_FUNCTION_3_1();
  _UntypedColumn.type.getter(&v30);
  OUTLINED_FUNCTION_4_2();
  if (v30 == 2)
  {
    swift_release();
    LOBYTE(v4) = 0;
  }
  else
  {
    OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_112();
    v19 = OUTLINED_FUNCTION_153();
    OUTLINED_FUNCTION_23_0(v19, v20, v21, v22, v23, v24, v25, v26, v29, v30);
    OUTLINED_FUNCTION_145(0xD000000000000021, (uint64_t)"' does not support requested type");
    OUTLINED_FUNCTION_151();
    v27 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_56_0(v27, v28);
  }
LABEL_6:
  *(_QWORD *)a3 = v15;
  *(_BYTE *)(a3 + 8) = v4;
  OUTLINED_FUNCTION_43_0();
}

void specialized MLDataColumn.dropDuplicates()(id a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  if ((a2 & 1) != 0)
  {
    v7 = a1;
    outlined copy of Result<_DataTable, Error>(a1, 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v8 = _getErrorEmbeddedNSError<A>(_:)();
    if (v8)
    {
      v9 = v8;
      OUTLINED_FUNCTION_204();
    }
    else
    {
      v9 = OUTLINED_FUNCTION_49_0();
      *v13 = a1;
    }
    v12 = 1;
    OUTLINED_FUNCTION_204();
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 16);
  outlined copy of Result<_DataTable, Error>(a1, 0);
  specialized handling<A, B>(_:_:)(v5);
  v10 = v6;
  if (v6)
  {
    type metadata accessor for CMLColumn();
    v11 = OUTLINED_FUNCTION_9_1();
    *(_QWORD *)(v11 + 16) = v10;
    OUTLINED_FUNCTION_225();
    v9 = OUTLINED_FUNCTION_9_1();
    *(_QWORD *)(v9 + 16) = v11;
    OUTLINED_FUNCTION_102(a1);
    v12 = 0;
LABEL_9:
    *(_QWORD *)a3 = v9;
    *(_BYTE *)(a3 + 8) = v12;
    return;
  }
  __break(1u);
}

uint64_t specialized Array<A>.init(_:)(void *a1, char a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char v17;

  if ((a2 & 1) != 0)
    return OUTLINED_FUNCTION_137();
  result = OUTLINED_FUNCTION_186();
  if ((result & 0x8000000000000000) == 0)
  {
    v4 = result;
    if (result)
    {
      v5 = 0;
      v6 = MEMORY[0x24BEE4AF8];
      do
      {
        v7 = outlined copy of Result<_DataTable, Error>(a1, 0);
        OUTLINED_FUNCTION_63_0((uint64_t)v7);
        OUTLINED_FUNCTION_102(a1);
        v8 = v15;
        v9 = (unint64_t)v16;
        if (v17 != 2)
        {
          outlined consume of MLDataValue(v15, v16, v17);
          v8 = 0;
          v9 = 0xE000000000000000;
        }
        if ((OUTLINED_FUNCTION_143() & 1) == 0)
        {
          OUTLINED_FUNCTION_50_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v13;
        }
        v11 = *(_QWORD *)(v6 + 16);
        v10 = *(_QWORD *)(v6 + 24);
        if (v11 >= v10 >> 1)
        {
          OUTLINED_FUNCTION_179(v10);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v14;
        }
        ++v5;
        *(_QWORD *)(v6 + 16) = v11 + 1;
        v12 = v6 + 16 * v11;
        *(_QWORD *)(v12 + 32) = v8;
        *(_QWORD *)(v12 + 40) = v9;
      }
      while (v4 != v5);
    }
    return OUTLINED_FUNCTION_137();
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  void *v18;
  id v19;
  char v20;

  if ((a2 & 1) != 0)
    return OUTLINED_FUNCTION_137();
  result = OUTLINED_FUNCTION_186();
  if ((result & 0x8000000000000000) == 0)
  {
    v4 = result;
    if (result)
    {
      v5 = 0;
      v6 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        v7 = outlined copy of Result<_DataTable, Error>(a1, 0);
        OUTLINED_FUNCTION_63_0((uint64_t)v7);
        OUTLINED_FUNCTION_102(a1);
        v8 = v18;
        if (v20)
        {
          outlined consume of MLDataValue(v18, v19, v20);
          v8 = 0;
          if ((OUTLINED_FUNCTION_143() & 1) == 0)
            goto LABEL_12;
        }
        else if ((OUTLINED_FUNCTION_143() & 1) == 0)
        {
LABEL_12:
          v11 = OUTLINED_FUNCTION_50_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11, v12, v13, v14);
          v6 = v15;
        }
        v10 = *(_QWORD *)(v6 + 16);
        v9 = *(_QWORD *)(v6 + 24);
        if (v10 >= v9 >> 1)
        {
          v16 = OUTLINED_FUNCTION_179(v9);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16, v10 + 1, 1, v6);
          v6 = v17;
        }
        ++v5;
        *(_QWORD *)(v6 + 16) = v10 + 1;
        *(_QWORD *)(v6 + 8 * v10 + 32) = v8;
        if (v4 == v5)
          return OUTLINED_FUNCTION_137();
      }
    }
    return OUTLINED_FUNCTION_137();
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  char v15;

  if ((a2 & 1) != 0)
    return OUTLINED_FUNCTION_137();
  result = OUTLINED_FUNCTION_186();
  if ((result & 0x8000000000000000) == 0)
  {
    v4 = result;
    if (result)
    {
      v5 = 0;
      v6 = MEMORY[0x24BEE4AF8];
      do
      {
        v7 = outlined copy of Result<_DataTable, Error>(a1, 0);
        OUTLINED_FUNCTION_63_0((uint64_t)v7);
        OUTLINED_FUNCTION_102(a1);
        if (v15 == 1)
        {
          v8 = v13;
        }
        else
        {
          outlined consume of MLDataValue(v13, v14, v15);
          v8 = 0;
        }
        if ((OUTLINED_FUNCTION_143() & 1) == 0)
        {
          OUTLINED_FUNCTION_50_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v11;
        }
        v10 = *(_QWORD *)(v6 + 16);
        v9 = *(_QWORD *)(v6 + 24);
        if (v10 >= v9 >> 1)
        {
          OUTLINED_FUNCTION_179(v9);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v6 = v12;
        }
        ++v5;
        *(_QWORD *)(v6 + 16) = v10 + 1;
        *(_QWORD *)(v6 + 8 * v10 + 32) = v8;
      }
      while (v4 != v5);
    }
    return OUTLINED_FUNCTION_137();
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in MLHandPoseClassifier.init(checkpoint:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in MLHandPoseClassifier.init(checkpoint:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = closure #1 in MLHandPoseClassifier.init(checkpoint:);
  return MLHandActionClassifier.GraphCNN.compile()();
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in MLHandPoseClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 40) = a1;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

void static MLHandPoseClassifier.train(trainingData:parameters:sessionParameters:)()
{
  uint64_t v0;

  static MLHandPoseClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLHandPoseClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
}

void static MLHandPoseClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[5];

  OUTLINED_FUNCTION_8_1();
  v3 = v2;
  v5 = v4;
  OUTLINED_FUNCTION_224();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v21[-1] - v8;
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_66();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_54_0();
  v12 = OUTLINED_FUNCTION_188();
  outlined init with copy of MLTrainingSessionParameters(v12, v13, v14);
  outlined init with copy of MLTrainingSessionParameters(v5, v1, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  outlined init with copy of MLTrainingSessionParameters(v3, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  v15 = type metadata accessor for HandPoseClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v16 = HandPoseClassifierTrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)();
  if (!v0)
  {
    v21[3] = v15;
    v21[4] = &protocol witness table for HandPoseClassifierTrainingSessionDelegate;
    v21[0] = v16;
    OUTLINED_FUNCTION_131(v3, v17, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>);
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_171((uint64_t)v21, v18, v19, &demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
  }
  OUTLINED_FUNCTION_7();
}

void static MLHandPoseClassifier.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLHandPoseClassifier>);
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_3_1();
  specialized MLJob.init(_:)();
}

void static MLHandPoseClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  OUTLINED_FUNCTION_224();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v14[-1] - v5;
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)&v14[-1] - v5, v7);
  v8 = type metadata accessor for HandPoseClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v9 = HandPoseClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v6);
  if (!v1)
  {
    v14[3] = v8;
    v14[4] = &protocol witness table for HandPoseClassifierTrainingSessionDelegate;
    v14[0] = v9;
    OUTLINED_FUNCTION_131(a1, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>);
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_171((uint64_t)v14, v11, v12, &demangling cache variable for type metadata for MLTrainingSession<MLHandPoseClassifier>.Metadata);
  }
}

void closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  int *v37;
  uint64_t v38;
  char v39[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_49();
  v15 = (_QWORD *)(v14 - v13);
  v37 = (int *)type metadata accessor for MLHandPoseClassifier.PersistentParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_64();
  v36 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  v19 = OUTLINED_FUNCTION_20_0();
  v20 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(v19);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_42_0();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_211();
  if ((a2 & 1) != 0)
  {
    *v15 = a1;
    swift_storeEnumTagMultiPayload();
    v29 = a1;
    a4(v15);
    outlined destroy of URL?((uint64_t)v15, &demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>);
    return;
  }
  v24 = v23;
  v35[1] = a5;
  outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v39);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
  type metadata accessor for HandPoseClassifierTrainingSessionDelegate();
  if ((swift_dynamicCast() & 1) == 0)
    return;
  v25 = v38;
  v26 = *(_QWORD *)(v38 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_model);
  if (!v26)
    goto LABEL_7;
  v27 = v38 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters;
  swift_beginAccess();
  outlined init with copy of URL?(v27, v5, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  if (__swift_getEnumTagSinglePayload(v5, 1, (uint64_t)v37))
  {
    OUTLINED_FUNCTION_51_0();
    outlined destroy of URL?(v5, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_99();
LABEL_7:
    swift_release();
    return;
  }
  v30 = v36;
  OUTLINED_FUNCTION_131(v5, v28, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
  OUTLINED_FUNCTION_51_0();
  outlined destroy of URL?(v5, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  outlined init with copy of MLTrainingSessionParameters(v36 + v37[5], v6, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  v31 = *(_QWORD *)(v36 + v37[7]);
  v32 = *(_QWORD *)(v36 + v37[8]);
  *(_QWORD *)(v6 + v20[5]) = *(_QWORD *)(v36 + v37[6]);
  *(_QWORD *)(v6 + v20[6]) = v31;
  *(_QWORD *)(v6 + v20[7]) = v32;
  outlined destroy of MLHandPoseClassifier.ModelParameters(v30, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
  outlined init with take of MLHandPoseClassifier.ModelParameters(v6, v24, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  v34 = *(_QWORD *)(v25 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_classLabels);
  if (v34)
  {
    MEMORY[0x24BDAC7A8](v33);
    v35[-4] = v26;
    v35[-3] = v24;
    v35[-2] = v25;
    v35[-1] = v34;
    swift_bridgeObjectRetain();
    _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML20MLHandPoseClassifierV_s5Error_pTgm5(partial apply for closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:), (uint64_t)v15);
    OUTLINED_FUNCTION_123();
    a4(v15);
    OUTLINED_FUNCTION_99();
    swift_release();
    outlined destroy of URL?((uint64_t)v15, &demangling cache variable for type metadata for Result<MLHandPoseClassifier, Error>);
  }
  else
  {
    OUTLINED_FUNCTION_99();
    OUTLINED_FUNCTION_81();
  }
  outlined destroy of MLHandPoseClassifier.ModelParameters(v24, type metadata accessor for MLHandPoseClassifier.ModelParameters);
}

void closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[2];

  v7 = v5;
  v12 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLTrainingSessionParameters(a2, (uint64_t)v14, v15);
  v16 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_metricsAttributesDictionary);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MLHandPoseClassifier.init(model:parameters:metricsAttributes:classLabels:)(a1, (uint64_t)v14, v16, a4, v17, v18, v19, v20, v21[0], v21[1]);
  if (v7)
    *a5 = v7;
}

uint64_t static MLHandPoseClassifier.buildFeatureTable(features:labels:sessionIds:imageFiles:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t inited;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  char v24;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7D90;
  *(_QWORD *)(inited + 32) = 0x746E696F7079656BLL;
  *(_QWORD *)(inited + 40) = 0xE900000000000073;
  v23 = a1;
  OUTLINED_FUNCTION_199();
  ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  v13 = v12;
  OUTLINED_FUNCTION_148();
  *(_QWORD *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(_BYTE *)(inited + 56) = v13 & 1;
  *(_QWORD *)(inited + 64) = 0x6C6562616CLL;
  *(_QWORD *)(inited + 72) = 0xE500000000000000;
  v23 = a2;
  swift_bridgeObjectRetain();
  v14 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(ML14_UntypedColumnC_s5Error_pTgm5) = v15;
  OUTLINED_FUNCTION_148();
  *(_QWORD *)(inited + 80) = v14;
  *(_BYTE *)(inited + 88) = ML14_UntypedColumnC_s5Error_pTgm5 & 1;
  *(_QWORD *)(inited + 96) = 0x5F6E6F6973736573;
  *(_QWORD *)(inited + 104) = 0xEA00000000006469;
  v23 = a3;
  OUTLINED_FUNCTION_195();
  v16 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v14) = v17;
  OUTLINED_FUNCTION_148();
  *(_QWORD *)(inited + 112) = v16;
  *(_BYTE *)(inited + 120) = v14 & 1;
  *(_QWORD *)(inited + 128) = 0x7461506567616D69;
  *(_QWORD *)(inited + 136) = 0xE900000000000068;
  v23 = a4;
  OUTLINED_FUNCTION_84();
  v18 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  LOBYTE(v16) = v19;
  OUTLINED_FUNCTION_148();
  *(_QWORD *)(inited + 144) = v18;
  *(_BYTE *)(inited + 152) = v16 & 1;
  v20 = Dictionary.init(dictionaryLiteral:)();
  result = specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v20, (uint64_t)&v23);
  v22 = v24;
  *(_QWORD *)a5 = v23;
  *(_BYTE *)(a5 + 8) = v22;
  return result;
}

void static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  char v7;
  id v8;
  void *v9;
  char v10;
  char v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t inited;
  id v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;

  v6 = *(id *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  v25 = *(_QWORD *)a1;
  v26 = v7;
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v23);
  v8 = v23;
  if (v24 == 1)
  {
    outlined consume of Result<_DataTable, Error>(v23, 1);
LABEL_14:
    v21 = *(_BYTE *)(a1 + 8);
    v23 = *(id *)a1;
    LOBYTE(v24) = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(inited + 32) = a2;
    *(_QWORD *)(inited + 40) = a3;
    LOBYTE(v25) = 5;
    OUTLINED_FUNCTION_199();
    static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v23, (_QWORD *)inited, (char *)&v25);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    return;
  }
  OUTLINED_FUNCTION_3_1();
  _UntypedColumn.type.getter(&v25);
  OUTLINED_FUNCTION_102(v8);
  OUTLINED_FUNCTION_102(v8);
  if (v25 != 3)
    goto LABEL_14;
  v23 = v6;
  LOBYTE(v24) = v7;
  OUTLINED_FUNCTION_183((uint64_t)&v25);
  v9 = (void *)v25;
  specialized MLUntypedColumn.map<A>(skipUndefined:_:)(1, (uint64_t)partial apply for closure #1 in static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:), 0, (void *)v25, v26, (uint64_t)&v23);
  OUTLINED_FUNCTION_98(v9);
  v27 = v23;
  v10 = v24;
  v11 = *(_BYTE *)(a1 + 8);
  v25 = *(_QWORD *)a1;
  v26 = v11;
  OUTLINED_FUNCTION_183((uint64_t)&v23);
  v12 = v23;
  if ((v24 & 1) != 0)
  {
    v13 = -1;
  }
  else
  {
    OUTLINED_FUNCTION_139();
    v13 = CMLColumn.size.getter();
    OUTLINED_FUNCTION_102(v12);
  }
  OUTLINED_FUNCTION_182();
  specialized MLDataColumn.dropMissing()(v27, v10, (uint64_t)&v25);
  v14 = (void *)v25;
  if ((v26 & 1) != 0)
  {
    v15 = -1;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>((id)v25, 0);
    v15 = CMLColumn.size.getter();
    OUTLINED_FUNCTION_102(v14);
  }
  OUTLINED_FUNCTION_182();
  if (!__OFSUB__(v13, v15))
  {
    if (v13 != v15)
    {
      v23 = 0;
      v24 = 0xE000000000000000;
      _StringGuts.grow(_:)(236);
      v28._countAndFlagsBits = 0xD00000000000003DLL;
      v28._object = (void *)0x800000021AFF1740;
      OUTLINED_FUNCTION_96(v28);
      v25 = v13 - v15;
      v29._countAndFlagsBits = OUTLINED_FUNCTION_59_0();
      OUTLINED_FUNCTION_96(v29);
      OUTLINED_FUNCTION_123();
      v30._countAndFlagsBits = 0xD00000000000006BLL;
      v30._object = (void *)0x800000021AFF1780;
      OUTLINED_FUNCTION_96(v30);
      v25 = 3;
      v31._countAndFlagsBits = OUTLINED_FUNCTION_59_0();
      OUTLINED_FUNCTION_96(v31);
      OUTLINED_FUNCTION_123();
      v16._countAndFlagsBits = 8236;
      v16._object = (void *)0xE200000000000000;
      String.append(_:)(v16);
      v25 = 21;
      v32._countAndFlagsBits = OUTLINED_FUNCTION_59_0();
      OUTLINED_FUNCTION_96(v32);
      OUTLINED_FUNCTION_123();
      v17._object = (void *)0x800000021AFF17F0;
      v17._countAndFlagsBits = 0xD00000000000003CLL;
      String.append(_:)(v17);
      v18 = v23;
      v19 = v24;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v20 = v18;
      *(_QWORD *)(v20 + 8) = v19;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_OWORD *)(v20 + 32) = 0u;
      *(_BYTE *)(v20 + 48) = 0;
      swift_willThrow(0.0);
      outlined consume of Result<_DataTable, Error>(v27, v10);
      return;
    }
    OUTLINED_FUNCTION_199();
    specialized MLDataTable.subscript.setter(v27, v10);
    goto LABEL_14;
  }
  __break(1u);
}

void closure #1 in static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t var8[3];

  if (*(_BYTE *)(a1 + 16) == 3)
    static MLHandPoseClassifier.convertSequenceToMultiArray(value:)(var8, a2, v2, *(_QWORD *)a1, var8[1], (id)var8[2]);
  else
    *a2 = 0;
}

void static MLHandPoseClassifier.convertSequenceToMultiArray(value:)(uint64_t *a1@<X0>, _QWORD *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, id a6)
{
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  int v12;
  id v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v7 = *a1;
  v49 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray.reserveCapacity(_:)();
  objc_msgSend(OUTLINED_FUNCTION_209(), sel_initWithInteger_, 1);
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_210();
  objc_msgSend(OUTLINED_FUNCTION_209(), sel_initWithInteger_, 3);
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_210();
  objc_msgSend(OUTLINED_FUNCTION_209(), sel_initWithInteger_, 21);
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_210();
  v8 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  v9 = @nonobjc MLMultiArray.init(shape:dataType:)(v49, 65600);
  if (!v9)
    goto LABEL_19;
  v10 = v9;
  UnsafeMutableBufferPointer.init(_:)();
  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_140();
  specialized RandomAccessCollection<>.distance(from:to:)();
  OUTLINED_FUNCTION_68();
  if (v8 != (id)1)
  {

LABEL_19:
    *a2 = 0;
    return;
  }
  v47 = 0;
  v48 = 0;
  v46 = v7;
  OUTLINED_FUNCTION_122();
  while (1)
  {
    specialized EnumeratedSequence.Iterator.next()((uint64_t)&v42);
    v12 = (int)v42;
    v11 = v43;
    v13 = v44;
    v14 = v45;
    if (v45 != 3)
    {
      if (v45 == 255)
      {
        swift_release();
        MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v10);
        *a2 = v42;
        return;
      }

      swift_release();
      goto LABEL_27;
    }
    outlined copy of MLDataValue(v43, v44, 3);
    OUTLINED_FUNCTION_205();
    OUTLINED_FUNCTION_157();
    v16 = v15;
    OUTLINED_FUNCTION_24();
    if (v16 != 3)
    {

      swift_release();
      v14 = 3;
      OUTLINED_FUNCTION_24();
LABEL_27:
      outlined consume of (offset: Int, element: MLDataValue)?(v12, v11, v13, v14);
      goto LABEL_19;
    }
    if (OUTLINED_FUNCTION_205())
      break;
LABEL_17:
    outlined consume of (offset: Int, element: MLDataValue)?(v12, v11, v13, 3);
    outlined consume of (offset: Int, element: MLDataValue)?(v12, v11, v13, 3);
    OUTLINED_FUNCTION_24();
  }
  v17 = 0;
  v35 = v13;
  v36 = (uint64_t)a2;
  v34 = v11;
  v39 = v12;
  while (1)
  {
    OUTLINED_FUNCTION_3_1();
    CMLSequence.value(at:)(v17);
    v18 = v17;
    OUTLINED_FUNCTION_24();
    v19 = v11;
    MLDataValue.init(_:)();
    v20 = v42;
    v41 = v43;
    v21 = v44;
    OUTLINED_FUNCTION_3_1();
    v22 = (void *)CMLSequence.size.getter();
    outlined consume of (offset: Int, element: MLDataValue)?(v12, v19, v13, 3);
    v40 = v18;
    if (v18 >= (uint64_t)v22)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      JUMPOUT(0x21ADFA0A4);
    }
    if ((_DWORD)v21 != 3)
    {
      v23 = v41;
      goto LABEL_24;
    }
    v23 = v41;
    OUTLINED_FUNCTION_178(v20);
    OUTLINED_FUNCTION_178(v20);
    v24 = OUTLINED_FUNCTION_108();
    if (CMLSequence.size.getter() < 0)
      goto LABEL_29;
    v22 = (void *)OUTLINED_FUNCTION_108();
    OUTLINED_FUNCTION_14_1();
    if (v24 < 0 || (uint64_t)v22 < v24)
      goto LABEL_30;
    if (v24 != 21)
      break;
    OUTLINED_FUNCTION_139();
    if (OUTLINED_FUNCTION_108())
    {
      OUTLINED_FUNCTION_139();
      CMLSequence.value(at:)(0);
      OUTLINED_FUNCTION_14_1();
      v25 = (char *)&loc_21ADF9B0C + *((int *)qword_21ADFA0F0 + CMLFeatureValue.type.getter());
      __asm { BR              X9 }
    }
    outlined consume of MLDataValue(v20, v41, 3);
    outlined consume of MLDataValue(v20, v41, 3);
    swift_release();
    v17 = v18 + 1;
    v11 = v34;
    v13 = v35;
    a2 = (_QWORD *)v36;
    v12 = v39;
    if (v40 + 1 == CMLSequence.size.getter())
      goto LABEL_17;
  }
  v21 = 3;
  OUTLINED_FUNCTION_14_1();
LABEL_24:
  outlined consume of MLDataValue(v20, v23, v21);
  OUTLINED_FUNCTION_38_0(v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v38, v39);
  outlined consume of (offset: Int, element: MLDataValue)?(0, v22, (id)v21, 3);
  swift_release();
  *v37 = 0;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
    {
      __break(1u);
      return;
    }
    v3 = 0;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v4 = (id)MEMORY[0x22075AF48](v3, a1);
      else
        v4 = *(id *)(a1 + 8 * v3 + 32);
      v5 = v4;
      v6 = objc_msgSend(v4, sel_integerValue);

      v8 = *(_QWORD *)(v9 + 16);
      v7 = *(_QWORD *)(v9 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      ++v3;
      *(_QWORD *)(v9 + 16) = v8 + 1;
      *(_QWORD *)(v9 + 8 * v8 + 32) = v6;
      if (v2 == v3)
        return;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a3 + 16);
  if (v4)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v6 = a3 + 40;
    while (1)
    {
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_89();
      if (v3)
        break;
      OUTLINED_FUNCTION_80();
      v7 = *(_QWORD *)(v11 + 16);
      if (v7 >= *(_QWORD *)(v11 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v6 += 16;
      *(_QWORD *)(v11 + 16) = v7 + 1;
      v8 = v11 + 16 * v7;
      *(_QWORD *)(v8 + 32) = v9;
      *(_QWORD *)(v8 + 40) = v10;
      if (!--v4)
        goto LABEL_9;
    }
    OUTLINED_FUNCTION_184();
    OUTLINED_FUNCTION_80();
  }
LABEL_9:
  OUTLINED_FUNCTION_74();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11TabularData12FilledColumnVyAF0G0VySSGG_SSSgs5NeverOTg5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void (*v4)(_BYTE *, _QWORD);
  __int128 v5;
  unint64_t v6;
  __int128 v7;
  _BYTE v8[32];
  __int128 v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>, MEMORY[0x24BDF5E58]);
  v0 = dispatch thunk of Collection.count.getter();
  v1 = MEMORY[0x24BEE4AF8];
  if (!v0)
    return v1;
  v2 = v0;
  v10 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v1 = v10;
  result = dispatch thunk of Collection.startIndex.getter();
  if ((v2 & 0x8000000000000000) == 0)
  {
    while (1)
    {
      v4 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      swift_bridgeObjectRetain();
      v4(v8, 0);
      OUTLINED_FUNCTION_89();
      if (v4)
        break;
      swift_bridgeObjectRelease();
      v5 = v9;
      v10 = v1;
      v6 = *(_QWORD *)(v1 + 16);
      if (v6 >= *(_QWORD *)(v1 + 24) >> 1)
      {
        v7 = v9;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v5 = v7;
        v1 = v10;
      }
      *(_QWORD *)(v1 + 16) = v6 + 1;
      *(_OWORD *)(v1 + 16 * v6 + 32) = v5;
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v2)
        return v1;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return v1;
  }
  __break(1u);
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5(void (*a1)(int *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
    goto LABEL_18;
  v6 = v4;
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v5 < 0)
    {
LABEL_19:
      __break(1u);
      return;
    }
    v10 = v16;
    v11 = a3;
    while (a4 != v11)
    {
      v14 = v11;
      a1(&v15, &v14);
      if (v6)
      {
        OUTLINED_FUNCTION_99();
        return;
      }
      v6 = 0;
      v12 = v15;
      v16 = v10;
      v13 = *(_QWORD *)(v10 + 16);
      if (v13 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v10 = v16;
      }
      *(_QWORD *)(v10 + 16) = v13 + 1;
      *(_DWORD *)(v10 + 4 * v13 + 32) = v12;
      if (a4 < a3)
        goto LABEL_16;
      if (v11 >= a4)
        goto LABEL_17;
      if (a4 == ++v11)
        return;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v17 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v5 = v17;
    v7 = a3 + 40;
    while (1)
    {
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_89();
      if (v3)
        break;
      OUTLINED_FUNCTION_80();
      v8 = v14;
      v9 = v16;
      v10 = *(_QWORD *)(v17 + 16);
      if (v10 >= *(_QWORD *)(v17 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v9 = v16;
        v8 = v14;
      }
      v7 += 16;
      *(_QWORD *)(v17 + 16) = v10 + 1;
      v11 = v17 + 32 * v10;
      *(_QWORD *)(v11 + 32) = v13;
      *(_QWORD *)(v11 + 40) = v8;
      *(_QWORD *)(v11 + 48) = v15;
      *(_BYTE *)(v11 + 56) = v9;
      if (!--v4)
        return v5;
    }
    OUTLINED_FUNCTION_184();
    OUTLINED_FUNCTION_80();
  }
  return v5;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5()
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5Tm();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void (*v5)(id *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(id *);
  uint64_t v15;
  id v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_1();
  v2 = v0;
  v4 = v3;
  v14 = v5;
  v13 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_146();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v15 = v7;
  if (v4 >> 62)
    goto LABEL_18;
  v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v8)
    {
LABEL_16:
      OUTLINED_FUNCTION_88();
      OUTLINED_FUNCTION_7();
      return;
    }
    v17 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v8 < 0)
      break;
    v9 = 0;
    while (v8 != v9)
    {
      if ((v4 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x22075AF48](v9, v4);
      else
        v10 = *(id *)(v4 + 8 * v9 + 32);
      v11 = v10;
      v16 = v10;
      v14(&v16);
      if (v2)
      {
        swift_release();

        goto LABEL_16;
      }
      v2 = 0;

      v12 = *(_QWORD *)(v17 + 16);
      if (v12 >= *(_QWORD *)(v17 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v9;
      *(_QWORD *)(v17 + 16) = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v1 + 32))(v17+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v12, v15, v13);
      if (v8 == v9)
        goto LABEL_16;
    }
    __break(1u);
LABEL_18:
    OUTLINED_FUNCTION_189();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_80();
  }
  __break(1u);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AIs5NeverOTg5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_8_1();
  v4 = v3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<Int>);
  OUTLINED_FUNCTION_146();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    v12 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v10 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v7 = v4 + v10;
    v9 = *(_QWORD *)(v2 + 72);
    while (1)
    {
      OUTLINED_FUNCTION_89();
      if (v0)
        break;
      v8 = *(_QWORD *)(v12 + 16);
      if (v8 >= *(_QWORD *)(v12 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v12 + 16) = v8 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v12 + v10 + v8 * v9, v1, v11);
      v7 += v9;
      if (!--v6)
        goto LABEL_9;
    }
    OUTLINED_FUNCTION_99();
  }
LABEL_9:
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_7();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5()
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5Tm();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay6CoreML13MLShapedArrayVySfGG_18CreateMLComponents16AnnotatedFeatureVyAISSGs5NeverOTg5()
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5Tm();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  void (*v4)(BOOL, unint64_t, uint64_t);
  void (*v5)(BOOL, unint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_8_1();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v17 = __swift_instantiateConcreteTypeFromMangledName(v8);
  v9 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_55_0();
  v10 = *(_QWORD *)(v7 + 16);
  if (v10)
  {
    v18 = MEMORY[0x24BEE4AF8];
    v5(0, v10, 0);
    __swift_instantiateConcreteTypeFromMangledName(v3);
    OUTLINED_FUNCTION_212();
    v12 = v7 + v11;
    v16 = *(_QWORD *)(v13 + 72);
    while (1)
    {
      OUTLINED_FUNCTION_89();
      if (v0)
        break;
      v15 = *(_QWORD *)(v18 + 16);
      v14 = *(_QWORD *)(v18 + 24);
      if (v15 >= v14 >> 1)
        v5(v14 > 1, v15 + 1, 1);
      *(_QWORD *)(v18 + 16) = v15 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))(v18+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v15, v1, v17);
      v12 += v16;
      if (!--v10)
        goto LABEL_9;
    }
    OUTLINED_FUNCTION_79();
  }
LABEL_9:
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_7();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_Say8CreateML22MLHandActionClassifierV10PredictionVGsAE_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SaySS5label_Sd10confidencetGsAE_pTg5Tm(a1, a2, a3, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SaySS5label_Sd10confidencetGsAE_pTg5Tm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(BOOL, unint64_t, uint64_t))
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v15 = MEMORY[0x24BEE4AF8];
    a4(0, v5, 0);
    OUTLINED_FUNCTION_78();
    OUTLINED_FUNCTION_212();
    v8 = a3 + v7;
    v10 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      OUTLINED_FUNCTION_89();
      if (v4)
        break;
      v12 = *(_QWORD *)(v15 + 16);
      v11 = *(_QWORD *)(v15 + 24);
      if (v12 >= v11 >> 1)
        a4(v11 > 1, v12 + 1, 1);
      *(_QWORD *)(v15 + 16) = v12 + 1;
      *(_QWORD *)(v15 + 8 * v12 + 32) = v14;
      v8 += v10;
      if (!--v5)
        goto LABEL_9;
    }
    OUTLINED_FUNCTION_99();
  }
LABEL_9:
  OUTLINED_FUNCTION_74();
}

uint64_t MLHandPoseClassifier.prediction(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_35_0();
  return MLHandPoseClassifier.modelPrediction(on:using:)(a1, *(void **)(v1 + *(int *)(v3 + 20)));
}

uint64_t MLHandPoseClassifier.modelPrediction(on:using:)(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  id v14;
  unint64_t v15;

  static _VideoUtilities.getHandKeyPointsFromImageUrl(url:)();
  if (v3)
    return (uint64_t)v2;
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    v15 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      v10 = *(id *)(v6 + 8 * v8 + 32);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v8 = v9;
    }
    while (v7 != v9);
    v11 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = static _VideoUtilities.generatePredictionWindows(frameKeypoints:windowSize:numOfKeypoints:)(v11, 1, 21);
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(v12 + 16))
  {
    v14 = *(id *)(v12 + 32);
    swift_bridgeObjectRelease();
    v2 = MLHandPoseClassifier.modelPrediction(on:using:)(v14, a2);

    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

void MLHandPoseClassifier.predictions(from:)(uint64_t a1)
{
  uint64_t v1;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SaySS5label_Sd10confidencetGsAE_pTg5Tm((uint64_t)partial apply for closure #1 in MLHandPoseClassifier.predictions(from:), (uint64_t)&v1, a1, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t closure #1 in MLHandPoseClassifier.predictions(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;

  v9 = type metadata accessor for MLHandPoseClassifier();
  result = MLHandPoseClassifier.modelPrediction(on:using:)(a1, *(void **)(a2 + *(int *)(v9 + 20)));
  if (v4)
    *a3 = v4;
  else
    *a4 = result;
  return result;
}

_QWORD *MLHandPoseClassifier.modelPrediction(on:using:)(void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  id v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t inited;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v38;
  double v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _BYTE v47[40];
  id v48;
  _OWORD v49[2];
  uint64_t v50;
  id v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _OWORD v55[2];
  id v56[2];
  _OWORD v57[2];
  __int128 v58;
  id v59[5];
  void *v60;
  uint64_t v61;

  v3 = v2;
  v61 = *MEMORY[0x24BDAC8D0];
  v6 = objc_msgSend(a1, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    OUTLINED_FUNCTION_195();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  OUTLINED_FUNCTION_101();
  if (v8 != 3)
    goto LABEL_25;
  v9 = objc_msgSend(a1, sel_shape);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(v10);
  v3 = v11;
  swift_bridgeObjectRelease();
  LOBYTE(v10) = specialized static Array<A>.== infix(_:_:)(v3, outlined read-only object #0 of MLHandPoseClassifier.modelPrediction(on:using:));
  OUTLINED_FUNCTION_30();
  if ((v10 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(inited + 32) = 0x7365736F70;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    v13 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
    *(_QWORD *)(inited + 72) = type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for MLFeatureValue);
    *(_QWORD *)(inited + 48) = v13;
    Dictionary.init(dictionaryLiteral:)();
    v3 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
    v14 = @nonobjc MLDictionaryFeatureProvider.init(dictionary:)();
    if (!v2)
    {
      v15 = v14;
      v59[0] = 0;
      v16 = objc_msgSend(a2, sel_predictionFromFeatures_error_, v14, v59);
      v3 = v59[0];
      if (v16)
      {
        v17 = v16;
        v18 = v59[0];
        v19 = (void *)MEMORY[0x22075A8AC](0xD000000000000012, 0x800000021AFF1650);
        v3 = objc_msgSend(v17, sel_featureValueForName_, v19);

        if (v3)
        {
          v20 = objc_msgSend(v3, sel_dictionaryValue);

          v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
          v22 = *(_QWORD *)(v21 + 16);
          if (v22)
          {
            v41 = v15;
            v46 = (_QWORD *)MEMORY[0x24BEE4AF8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v23 = specialized Dictionary.startIndex.getter(v21);
            if (v23 < 0 || (v25 = v23, v23 >= 1 << *(_BYTE *)(v21 + 32)))
            {
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
            }
            v26 = v21 + 64;
            while (1)
            {
              if ((*(_QWORD *)(v26 + 8 * (v25 >> 6)) & (1 << v25)) == 0)
                goto LABEL_33;
              if (v24 != *(_DWORD *)(v21 + 36))
                goto LABEL_34;
              v43 = v24;
              outlined init with copy of AnyHashable(*(_QWORD *)(v21 + 48) + 40 * v25, (uint64_t)v59);
              v60 = *(void **)(*(_QWORD *)(v21 + 56) + 8 * v25);
              v27 = v60;
              outlined init with copy of AnyHashable((uint64_t)v59, (uint64_t)v57);
              *((_QWORD *)&v58 + 1) = v27;
              v55[0] = v57[0];
              v55[1] = v57[1];
              *(_OWORD *)v56 = v58;
              v28 = v27;
              outlined destroy of URL?((uint64_t)v59, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              outlined init with copy of AnyHashable((uint64_t)v55, (uint64_t)v49);
              v51 = v56[1];
              v52 = v49[0];
              v53 = v49[1];
              v54 = v50;
              OUTLINED_FUNCTION_16_0();
              outlined init with copy of AnyHashable((uint64_t)v55, (uint64_t)v47);
              v48 = v56[1];
              objc_msgSend(v56[1], sel_doubleValue);
              v30 = v29;
              outlined destroy of AnyHashable((uint64_t)v47);
              outlined destroy of URL?((uint64_t)v55, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              v3 = v46;
              v42 = v22;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v3 = v46;
              }
              v32 = v3[2];
              v31 = v3[3];
              if (v32 >= v31 >> 1)
              {
                OUTLINED_FUNCTION_179(v31);
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v3 = v46;
              }
              v3[2] = v32 + 1;
              v33 = &v3[3 * v32];
              v33[4] = v44;
              v33[5] = v45;
              v33[6] = v30;
              if ((uint64_t)v25 >= -(-1 << *(_BYTE *)(v21 + 32)))
                goto LABEL_35;
              v26 = v21 + 64;
              if ((*(_QWORD *)(v21 + 64 + 8 * (v25 >> 6)) & (1 << v25)) == 0)
                goto LABEL_36;
              if (v43 != *(_DWORD *)(v21 + 36))
                goto LABEL_37;
              OUTLINED_FUNCTION_188();
              v34 = _HashTable.occupiedBucket(after:)();
              --v22;
              if (v42 == 1)
                break;
              v25 = v34;
              if ((v34 & 0x8000000000000000) == 0)
              {
                v24 = *(_DWORD *)(v21 + 36);
                if (v34 < 1 << *(_BYTE *)(v21 + 32))
                  continue;
              }
              goto LABEL_32;
            }
            OUTLINED_FUNCTION_104();
            swift_unknownObjectRelease();

          }
          else
          {
            OUTLINED_FUNCTION_104();
            swift_unknownObjectRelease();

            return (_QWORD *)MEMORY[0x24BEE4AF8];
          }
        }
        else
        {
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          OUTLINED_FUNCTION_49_0();
          OUTLINED_FUNCTION_18_0(v40, 0xD000000000000028);

          swift_unknownObjectRelease();
        }
      }
      else
      {
        v38 = v59[0];
        OUTLINED_FUNCTION_207();

        swift_willThrow(v39);
      }
    }
  }
  else
  {
LABEL_25:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_187();
    OUTLINED_FUNCTION_18_0(v36, v35 + 19);
  }
  return v3;
}

void MLHandPoseClassifier.evaluation(on:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;

  v3 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_53_0();
  v5 = v0 + *(int *)(OUTLINED_FUNCTION_35_0() + 24);
  v6 = *(_QWORD *)(v5 + *(int *)(OUTLINED_FUNCTION_95() + 20));
  OUTLINED_FUNCTION_113();
  OUTLINED_FUNCTION_156();
  *(_QWORD *)(v2 + v3[5]) = v6;
  *(_QWORD *)(v2 + v3[6]) = 80;
  *(_QWORD *)(v2 + v3[7]) = 1;
  *(_QWORD *)(v2 + v3[8]) = 0;
  *(_QWORD *)(v2 + v3[10]) = 0x403E000000000000;
  MLHandPoseClassifier.DataSource.keypointsWithAnnotations()();
  if (v1)
  {
    OUTLINED_FUNCTION_58_0(v7, type metadata accessor for MLHandActionClassifier.ModelParameters);
  }
  else
  {
    MLHandActionClassifier.evaluation(on:parameters:)();
    OUTLINED_FUNCTION_58_0(v8, type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined consume of Result<_DataTable, Error>(v9, v10);
  }
}

void MLHandPoseClassifier.write(to:metadata:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD v21[18];

  OUTLINED_FUNCTION_8_1();
  v2 = v1;
  v4 = v3;
  v5 = OUTLINED_FUNCTION_78();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v21 - v10;
  v12 = v2[1];
  v21[0] = *v2;
  v21[1] = v12;
  v13 = v2[3];
  v21[2] = v2[2];
  v21[3] = v13;
  v14 = v2[5];
  v21[4] = v2[4];
  v21[5] = v14;
  v15 = v2[7];
  v21[6] = v2[6];
  v21[7] = v15;
  v21[8] = v2[8];
  if (URL.pathExtension.getter() == 0x67616B6361706C6DLL && v16 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_80();
    if ((v18 & 1) == 0)
    {
      static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v4, 0xD000000000000012, 0x800000021AFF1420, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, (uint64_t)v9);
      if (!v0)
      {
        OUTLINED_FUNCTION_21_0();
        MLHandActionClassifier.write(to:metadata:)();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      }
      goto LABEL_11;
    }
  }
  OUTLINED_FUNCTION_187();
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v4, v19 + 2, 0x800000021AFF1440, 0x67616B6361706C6DLL, (void *)0xE900000000000065, (uint64_t)v11);
  if (!v0)
  {
    OUTLINED_FUNCTION_21_0();
    MLHandActionClassifier.GraphCNN.writeMLPackage(to:metadata:)((uint64_t)v11, v20);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
LABEL_11:
  OUTLINED_FUNCTION_7();
}

void MLHandPoseClassifier.write(toFile:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_8_1();
  v3 = type metadata accessor for URL.DirectoryHint();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v6 = OUTLINED_FUNCTION_65_0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_161();
  OUTLINED_FUNCTION_57_0(v0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, *MEMORY[0x24BDCD7A0], v3);
  OUTLINED_FUNCTION_195();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLHandPoseClassifier.write(to:metadata:)();
  OUTLINED_FUNCTION_52(v2, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_7();
}

unint64_t MLHandPoseClassifier.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  void *v20;

  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_20_0();
  v3 = type metadata accessor for MLHandPoseClassifier();
  v4 = MLHandPoseClassifier.ModelParameters.description.getter();
  v6 = v5;
  v7 = MLClassifierMetrics.accuracyDescription.getter();
  v9 = v8;
  outlined init with copy of MLTrainingSessionParameters(v0 + *(int *)(v3 + 32), v1, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, type metadata accessor for MLClassifierMetrics.Contents);
  v10 = MLClassifierMetrics.accuracyDescription.getter();
  v12 = v11;
  v13._countAndFlagsBits = v4;
  v13._object = v6;
  String.append(_:)(v13);
  OUTLINED_FUNCTION_197();
  v20 = v14;
  v15._countAndFlagsBits = v7;
  v15._object = v9;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0xD00000000000001ELL;
  v16._object = v20;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  if (v3 <= 1)
  {
    v17._countAndFlagsBits = v10;
    v17._object = v12;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD000000000000020;
    v18._object = (void *)0x800000021AFF14A0;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_123();
  return 0xD00000000000001FLL;
}

void MLHandPoseClassifier.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  uint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v3._countAndFlagsBits = MLHandPoseClassifier.debugDescription.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

NSAttributedString __swiftcall NSAttributedString.__allocating_init(string:)(Swift::String string)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v3;
  void *v4;
  NSAttributedString result;

  object = string._object;
  countAndFlagsBits = string._countAndFlagsBits;
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = (void *)MEMORY[0x22075A8AC](countAndFlagsBits, object);
  OUTLINED_FUNCTION_123();
  objc_msgSend(v3, sel_initWithString_, v4);

  OUTLINED_FUNCTION_125();
  return result;
}

void specialized OptionSet<>.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void specialized MLTrainingSession.init(delegate:parameters:modelType:)(uint64_t a1, uint64_t a2, char a3)
{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLRandomForestClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeRegressor>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLSoundClassifier.DataSource>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLBoostedTreeClassifier>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLLinearRegressor>.Metadata);
}

{
  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, a2, a3, &demangling cache variable for type metadata for MLTrainingSession<MLImageClassifier>.Metadata);
}

void specialized MLTrainingSession.init(delegate:parameters:modelType:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t EnumTagSinglePayload;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v20;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  v11 = OUTLINED_FUNCTION_67();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_55_0();
  *(_BYTE *)(v4 + direct field offset for MLTrainingSession.modelType) = 28;
  v13 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 112);
  Date.init()();
  v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(a4);
  *(_BYTE *)(v13 + v14[7]) = 0;
  *(_QWORD *)(v13 + v14[8]) = 0;
  OUTLINED_FUNCTION_57_0(v13 + v14[9]);
  OUTLINED_FUNCTION_57_0(v13 + v14[10]);
  *(_QWORD *)(v13 + v14[11]) = MEMORY[0x24BEE4AF8];
  outlined init with copy of TrainingSessionDelegate(a1, v4 + direct field offset for MLTrainingSession.delegate);
  outlined init with copy of MLTrainingSessionParameters(a2, v4 + direct field offset for MLTrainingSession.parameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  *(_BYTE *)(v4 + direct field offset for MLTrainingSession.modelType) = a3;
  outlined init with copy of URL?(a2, v5, &demangling cache variable for type metadata for URL?);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v5, 1, v11);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_58_0(EnumTagSinglePayload, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_destroy_boxed_opaque_existential_0(a1);
    outlined destroy of URL?(v5, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v16 = OUTLINED_FUNCTION_188();
    v17(v16);
    specialized MLTrainingSession.restore(from:)();
    if (v20)
      v18 = OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_58_0(v18, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_destroy_boxed_opaque_existential_0(a1);
    OUTLINED_FUNCTION_52(v6, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  }
  OUTLINED_FUNCTION_218();
}

void specialized MLTrainingSession.restore(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  Swift::String v16;
  os_log_type_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_0;
  void (*v23)(uint64_t *, _QWORD);
  void *v24;
  Swift::String v25;
  os_log_type_t v26;
  Swift::String v27;
  NSURL *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;

  OUTLINED_FUNCTION_8_1();
  v40 = v4;
  v44 = v0;
  v6 = v5;
  v52 = *MEMORY[0x24BDAC8D0];
  v45 = v7;
  v41 = __swift_instantiateConcreteTypeFromMangledName(v7);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_116(v9, v38);
  v10 = type metadata accessor for CodingUserInfoKey();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v46 = OUTLINED_FUNCTION_67();
  v47 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_53_0();
  v12 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  OUTLINED_FUNCTION_109();
  URL.appendingPathComponent(_:)();
  v13 = URL.path.getter();
  v14 = (void *)MEMORY[0x22075A8AC](v13);
  OUTLINED_FUNCTION_30();
  v15 = objc_msgSend(v12, sel_fileExistsAtPath_, v14);

  if (!v15)
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_197();
    v50 = v24;
    v25._countAndFlagsBits = URL.path.getter();
    String.append(_:)(v25);
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_202();
    v26 = static os_log_type_t.default.getter();
    v27._countAndFlagsBits = 0xD00000000000001BLL;
    v27._object = v50;
    log(_:type:)(v27, v26);
    OUTLINED_FUNCTION_101();
    URL._bridgeToObjectiveC()(v28);
    v30 = v29;
    v49 = 0;
    v31 = objc_msgSend(v12, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v29, 1, 0, &v49);

    if ((v31 & 1) == 0)
    {
      v33 = v49;
      OUTLINED_FUNCTION_207();

      swift_willThrow(v34);
      OUTLINED_FUNCTION_141();
      goto LABEL_10;
    }
    v32 = v49;
    specialized MLTrainingSession.save()();
    goto LABEL_8;
  }
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v49 = (id)0xD00000000000001ELL;
  v50 = (void *)0x800000021AFF15B0;
  v16._countAndFlagsBits = URL.path.getter();
  String.append(_:)(v16);
  OUTLINED_FUNCTION_60_0();
  OUTLINED_FUNCTION_202();
  v17 = static os_log_type_t.default.getter();
  v18._countAndFlagsBits = 0xD00000000000001ELL;
  v18._object = (void *)0x800000021AFF15B0;
  log(_:type:)(v18, v17);
  OUTLINED_FUNCTION_60_0();
  v19 = Data.init(contentsOf:options:)();
  if (v1)
  {
LABEL_8:
    OUTLINED_FUNCTION_141();

    goto LABEL_10;
  }
  v39 = v19;
  v42 = v20;
  type metadata accessor for PropertyListDecoder();
  OUTLINED_FUNCTION_15_1();
  PropertyListDecoder.init()();
  if (one-time initialization token for sessionDirectory != -1)
    swift_once();
  v21 = __swift_project_value_buffer(v10, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  OUTLINED_FUNCTION_216(v3, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
  v51 = v46;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v49);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v47 + 16))(boxed_opaque_existential_0, v6, v46);
  v23 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify();
  specialized Dictionary.subscript.setter((uint64_t)&v49);
  v23(&v48, 0);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(v40, v45, (uint64_t)&protocol conformance descriptor for MLTrainingSession<A>.Metadata);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  v35 = v44 + *(_QWORD *)(*(_QWORD *)v44 + 112);
  swift_beginAccess();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v43, v35, v45);
  swift_endAccess();
  v36 = *(_QWORD *)(v44 + direct field offset for MLTrainingSession.delegate + 24);
  v37 = *(_QWORD *)(v44 + direct field offset for MLTrainingSession.delegate + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v44 + direct field offset for MLTrainingSession.delegate), v36);
  LOBYTE(v49) = *(_BYTE *)(v35 + *(int *)(v41 + 28));
  (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)(v37 + 8) + 16))(v6, &v49, v36);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v2, v46);
  OUTLINED_FUNCTION_217();

  outlined consume of Data._Representation(v39, v42);
LABEL_10:
  OUTLINED_FUNCTION_7();
}

void specialized MLTrainingSession.save()()
{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t *boxed_opaque_existential_0;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  void (*v25)(uint64_t *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (**v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[4];

  OUTLINED_FUNCTION_8_1();
  v40 = v5;
  v6 = v1;
  v43 = v7;
  v41 = __swift_instantiateConcreteTypeFromMangledName(v7);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v42 = v9;
  v10 = type metadata accessor for CodingUserInfoKey();
  v38 = *(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_116(v11, v37);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_49();
  v15 = v14 - v13;
  OUTLINED_FUNCTION_224();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  v17 = OUTLINED_FUNCTION_65_0();
  OUTLINED_FUNCTION_146();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_42_0();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)&v37 - v20);
  v44 = v6;
  outlined init with copy of MLTrainingSessionParameters(v6 + direct field offset for MLTrainingSession.parameters, v0, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined init with take of URL?(v0, v15);
  if (__swift_getEnumTagSinglePayload(v15, 1, v17) == 1)
  {
    outlined destroy of URL?(v15, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    OUTLINED_FUNCTION_216((uint64_t)v21, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    v37 = v4;
    OUTLINED_FUNCTION_109();
    URL.appendingPathComponent(_:)();
    type metadata accessor for PropertyListEncoder();
    OUTLINED_FUNCTION_15_1();
    PropertyListEncoder.init()();
    if (one-time initialization token for sessionDirectory != -1)
      swift_once();
    v22 = __swift_project_value_buffer(v10, (uint64_t)static CodingUserInfoKey.sessionDirectory);
    v38[2](v39, v22, v10);
    v46[3] = v17;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v46);
    v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v38 = v21;
    OUTLINED_FUNCTION_216((uint64_t)boxed_opaque_existential_0, (uint64_t)v21, v24);
    v25 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify();
    specialized Dictionary.subscript.setter((uint64_t)v46);
    v25(&v45, 0);
    v26 = v44;
    v27 = v44 + *(_QWORD *)(*(_QWORD *)v44 + 112);
    OUTLINED_FUNCTION_29_0();
    v28 = v27;
    v29 = v43;
    outlined init with copy of URL?(v28, v42, v43);
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(v40, v29, (uint64_t)&protocol conformance descriptor for MLTrainingSession<A>.Metadata);
    v31 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v2)
    {
      swift_release();
      OUTLINED_FUNCTION_180();
      v33 = (char *)v38;
      v34 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    }
    else
    {
      v32 = v30;
      OUTLINED_FUNCTION_180();
      Data.write(to:options:)();
      v33 = (char *)v38;
      v43 = (uint64_t *)v3;
      v35 = *(_QWORD *)(v26 + direct field offset for MLTrainingSession.delegate + 24);
      v36 = *(_QWORD *)(v26 + direct field offset for MLTrainingSession.delegate + 32);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v26 + direct field offset for MLTrainingSession.delegate), v35);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 + 8) + 8))(v33, v35);
      outlined consume of Data._Representation(v31, v32);
      OUTLINED_FUNCTION_221();
      v34 = (void (*)(uint64_t, uint64_t))v43[1];
    }
    v34(v37, v17);
    v34((uint64_t)v33, v17);
  }
  OUTLINED_FUNCTION_7();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

{
  specialized MLTrainingSession.save()();
}

uint64_t sub_21ADFCAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_95() - 8) + 80);
  v2 = (v1 + 41) & ~v1;
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 32), *(_BYTE *)(v0 + 40));
  type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (OUTLINED_FUNCTION_114() == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(OUTLINED_FUNCTION_114())
    {
      case 0u:
        v4 = OUTLINED_FUNCTION_78();
        v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
        v5(v0 + v2, v4);
        v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v5(v0 + v2 + *(int *)(v6 + 48), v4);
        OUTLINED_FUNCTION_34_0();
        goto LABEL_9;
      case 1u:
      case 2u:
        v3 = OUTLINED_FUNCTION_78();
        OUTLINED_FUNCTION_11_1(v3);
        return swift_deallocObject();
      case 3u:
        OUTLINED_FUNCTION_219();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        OUTLINED_FUNCTION_219();
        goto LABEL_9;
      case 5u:
        v7 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_11_1(v7);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        OUTLINED_FUNCTION_34_0();
        OUTLINED_FUNCTION_34_0();
        goto LABEL_9;
      case 6u:
        v8 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_11_1(v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        OUTLINED_FUNCTION_34_0();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        return swift_deallocObject();
    }
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_95() - 8) + 80);
  v5 = *(void **)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v7 = *(void **)(v1 + 32);
  v8 = *(_BYTE *)(v1 + 40);
  v9 = v1 + ((v4 + 41) & ~v4);
  v10 = swift_task_alloc();
  v11 = (_QWORD *)OUTLINED_FUNCTION_30_0(v10);
  *v11 = v2;
  v11[1] = partial apply for closure #1 in MLHandPoseClassifier.init(trainingData:parameters:);
  return closure #1 in MLHandPoseClassifier.init(trainingData:parameters:)(a1, v5, v6, v7, v8, v9);
}

void specialized _copyCollectionToContiguousArray<A>(_:)()
{
  uint64_t v0;
  const void *v1;
  size_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  OUTLINED_FUNCTION_28_0();
  if (*(_QWORD *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v1 = (const void *)OUTLINED_FUNCTION_9_1();
    v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_33_0(v2 - 32);
    specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_41_0();
    if (!v7)
      __break(1u);
  }
  OUTLINED_FUNCTION_7_1();
}

{
  uint64_t v0;
  const void *v1;
  size_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  OUTLINED_FUNCTION_28_0();
  if (*(_QWORD *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v1 = (const void *)OUTLINED_FUNCTION_9_1();
    v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_33_0(v2 - 32);
    specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_41_0();
    if (!v7)
      __break(1u);
  }
  OUTLINED_FUNCTION_7_1();
}

{
  uint64_t v0;
  const void *v1;
  size_t v2;
  char v3;

  OUTLINED_FUNCTION_28_0();
  if (*(_QWORD *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v1 = (const void *)OUTLINED_FUNCTION_9_1();
    v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_33_0(v2 - 32);
    specialized Sequence._copySequenceContents(initializing:)();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_41_0();
    if (!v3)
      __break(1u);
  }
  OUTLINED_FUNCTION_7_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_175();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    if (!v0)
      goto LABEL_8;
    OUTLINED_FUNCTION_85();
    if (!(v6 ^ v4 | v5))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v7 = (_QWORD *)OUTLINED_FUNCTION_9_1();
      _swift_stdlib_malloc_size(v7);
      OUTLINED_FUNCTION_163();
      v7[2] = v0;
      v7[3] = v8;
    }
    if (v3 != v1)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(v2 + 8 * v1, v0);
LABEL_8:
      OUTLINED_FUNCTION_164();
      return;
    }
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  _QWORD *v7;

  OUTLINED_FUNCTION_175();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    if (!v0)
      goto LABEL_8;
    OUTLINED_FUNCTION_85();
    if (!(v6 ^ v4 | v5))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v7 = (_QWORD *)OUTLINED_FUNCTION_9_1();
      OUTLINED_FUNCTION_159(v7);
    }
    if (v3 != v1)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(v2 + 8 * v1, v0);
LABEL_8:
      OUTLINED_FUNCTION_164();
      return;
    }
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  _QWORD *v7;
  size_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_175();
  if (v5)
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v0)
    goto LABEL_13;
  OUTLINED_FUNCTION_85();
  if (v6 ^ v5 | v9)
    goto LABEL_11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NeuralNetwork.Layer>);
  type metadata accessor for NeuralNetwork.Layer();
  v7 = (_QWORD *)OUTLINED_FUNCTION_47_0();
  v8 = _swift_stdlib_malloc_size(v7);
  if (!v3)
    goto LABEL_15;
  v9 = v8 - v4 == 0x8000000000000000 && v3 == -1;
  if (v9)
    goto LABEL_16;
  v7[2] = v0;
  v7[3] = 2 * ((uint64_t)(v8 - v4) / v3);
LABEL_11:
  if (v2 != v1)
  {
    v10 = type metadata accessor for NeuralNetwork.Layer();
    v11 = OUTLINED_FUNCTION_71(v10);
    specialized UnsafeMutablePointer.initialize(from:count:)(v11, v12);
LABEL_13:
    OUTLINED_FUNCTION_8_0();
    return;
  }
LABEL_17:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  _QWORD *v7;
  size_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_175();
  if (v5)
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v0)
    goto LABEL_13;
  OUTLINED_FUNCTION_85();
  if (v6 ^ v5 | v9)
    goto LABEL_11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotatedFeature<URL, String>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v7 = (_QWORD *)OUTLINED_FUNCTION_47_0();
  v8 = _swift_stdlib_malloc_size(v7);
  if (!v3)
    goto LABEL_15;
  v9 = v8 - v4 == 0x8000000000000000 && v3 == -1;
  if (v9)
    goto LABEL_16;
  v7[2] = v0;
  v7[3] = 2 * ((uint64_t)(v8 - v4) / v3);
LABEL_11:
  if (v2 != v1)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    v11 = OUTLINED_FUNCTION_71(v10);
    specialized UnsafeMutablePointer.initialize(from:count:)(v11, v12);
LABEL_13:
    OUTLINED_FUNCTION_8_0();
    return;
  }
LABEL_17:
  __break(1u);
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = CMLDictionary.size.getter();
  specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  if (!v3)
    goto LABEL_6;
  v4 = v3;
  if (v3 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CMLFeatureValue, CMLFeatureValue)>);
    v5 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_150(v5);
  }
  v6 = OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_167(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  specialized Sequence._copySequenceContents(initializing:)();
  OUTLINED_FUNCTION_46_0();
  if (a1 != v4)
    __break(1u);
  else
LABEL_6:
    OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: MLDataValue, value: MLDataValue)>);
    v3 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    v4 = _swift_stdlib_malloc_size(v3);
    v3[2] = v1;
    v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
    v5 = OUTLINED_FUNCTION_84();
    v13 = OUTLINED_FUNCTION_167(v5, v6, v7, v8, v9, v10, v11, v12, v18);
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)v13, v14, v15, a1);
    v17 = v16;
    swift_bridgeObjectRelease();
    outlined consume of [MLDataValue : MLDataValue].Index._Variant(v19, v20, v21);
    if (v17 != v1)
      __break(1u);
  }
  OUTLINED_FUNCTION_43_0();
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  CMLSequence.size.getter();
  OUTLINED_FUNCTION_157();
  if (!v2)
    goto LABEL_6;
  v3 = v2;
  if (v2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLDataValue>);
    v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_201(v4);
  }
  v5 = OUTLINED_FUNCTION_3_1();
  v13 = OUTLINED_FUNCTION_86(v5, v6, v7, v8, v9, v10, v11, v12, v21);
  specialized Sequence._copySequenceContents(initializing:)((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v22, v23, v24, v25, v26, v27);
  OUTLINED_FUNCTION_46_0();
  if (a1 != v3)
    __break(1u);
  else
LABEL_6:
    OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_retain();
  v2 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v2);
  v4 = v3;
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_3_1();
  v5 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v5);
  v7 = v6;
  OUTLINED_FUNCTION_4_2();
  if (v7 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_3_1();
  v8 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v8);
  v10 = v9;
  OUTLINED_FUNCTION_4_2();
  if (v4 < 0 || v10 < v4)
    goto LABEL_9;
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLDataValue>);
    v11 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_201(v11);
    v12 = OUTLINED_FUNCTION_3_1();
    OUTLINED_FUNCTION_86(v12, v13, v14, v15, v16, v17, v18, v19, v20);
    specialized Sequence._copySequenceContents(initializing:)();
    OUTLINED_FUNCTION_46_0();
    if (a1 != v4)
      __break(1u);
  }
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_retain();
  v2 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v2);
  v4 = v3;
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_3_1();
  v5 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v5);
  v7 = v6;
  OUTLINED_FUNCTION_4_2();
  if (v7 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_3_1();
  v8 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v8);
  v10 = v9;
  OUTLINED_FUNCTION_4_2();
  if (v4 < 0 || v10 < v4)
    goto LABEL_9;
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v11 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_150(v11);
    v12 = OUTLINED_FUNCTION_3_1();
    OUTLINED_FUNCTION_86(v12, v13, v14, v15, v16, v17, v18, v19, v20);
    specialized Sequence._copySequenceContents(initializing:)();
    OUTLINED_FUNCTION_46_0();
    if (a1 != v4)
      __break(1u);
  }
  OUTLINED_FUNCTION_27_0();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v2);
  if (!v3)
    goto LABEL_6;
  v4 = v3;
  if (v3 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v5 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_163();
    v5[2] = v4;
    v5[3] = v6;
  }
  v7 = OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_167(v7, v8, v9, v10, v11, v12, v13, v14, v15);
  specialized Sequence._copySequenceContents(initializing:)();
  OUTLINED_FUNCTION_46_0();
  if (a1 != v4)
    __break(1u);
  else
LABEL_6:
    OUTLINED_FUNCTION_27_0();
}

void specialized _copyCollectionToContiguousArray<A>(_:)(void *a1, char a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = a2 & 1;
  v10 = a1;
  v11 = a2 & 1;
  MLDataTable.size.getter();
  v4 = specialized RandomAccessCollection<>.distance(from:to:)();
  if (!v4)
    goto LABEL_7;
  v5 = v4;
  if (v4 <= 0)
  {
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLDataTable.Row>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v5;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 24);
  }
  outlined copy of Result<_DataTable, Error>(a1, v3);
  specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v10, (uint64_t)(v6 + 4), v5, (uint64_t)a1, v3);
  v9 = v8;
  outlined consume of Result<_DataTable, Error>(v10, v11);
  if (v9 != v5)
    __break(1u);
  else
LABEL_7:
    OUTLINED_FUNCTION_43_0();
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_retain();
  v6 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v6);
  v8 = v7;
  OUTLINED_FUNCTION_3_1();
  v9 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v9);
  v11 = v10;
  OUTLINED_FUNCTION_4_2();
  if (v11 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_3_1();
  v12 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v12);
  v14 = v13;
  OUTLINED_FUNCTION_110();
  if (v8 < 0 || v14 < v8)
    goto LABEL_9;
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValue)>);
    v15 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    v16 = _swift_stdlib_malloc_size(v15);
    v15[2] = v8;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 40);
    OUTLINED_FUNCTION_51_0();
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_3_1();
    v17 = specialized Sequence._copySequenceContents(initializing:)(&v18, (uint64_t)(v15 + 4), v8, a1, a2, a3);
    swift_release();
    OUTLINED_FUNCTION_101();
    swift_release();
    if (v17 != v8)
      __break(1u);
  }
  OUTLINED_FUNCTION_43_0();
}

void outlined init with take of MLHandPoseClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_166(a1, a2, a3);
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_22();
}

uint64_t sub_21ADFD3FC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  int EnumCaseMultiPayload;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  id *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;

  v1 = (int *)OUTLINED_FUNCTION_134();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_release();

  v3 = v2 + v1[7];
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (OUTLINED_FUNCTION_206() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(OUTLINED_FUNCTION_206())
    {
      case 0u:
        v5 = OUTLINED_FUNCTION_78();
        v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
        v6(v3, v5);
        v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v6(v3 + *(int *)(v7 + 48), v5);
        OUTLINED_FUNCTION_19_0();
        OUTLINED_FUNCTION_19_0();
        OUTLINED_FUNCTION_19_0();
        goto LABEL_9;
      case 1u:
      case 2u:
        v4 = OUTLINED_FUNCTION_78();
        OUTLINED_FUNCTION_45_0(v4);
        break;
      case 3u:
        OUTLINED_FUNCTION_193();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        OUTLINED_FUNCTION_193();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 5u:
        v8 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_45_0(v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        OUTLINED_FUNCTION_19_0();
        OUTLINED_FUNCTION_19_0();
        goto LABEL_9;
      case 6u:
        v9 = OUTLINED_FUNCTION_93();
        OUTLINED_FUNCTION_45_0(v9);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        OUTLINED_FUNCTION_19_0();
        OUTLINED_FUNCTION_19_0();
        OUTLINED_FUNCTION_19_0();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  v10 = (id *)(v2 + v1[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      v13 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v14 = (char *)v10 + *(int *)(v13 + 20);
      v15 = OUTLINED_FUNCTION_93();
      v16 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
      v16(v14, v15);
      v16((char *)v10 + *(int *)(v13 + 24), v15);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v12 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v12 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v17 = __swift_instantiateConcreteTypeFromMangledName(v12);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v10, v17);
      break;
  }
  v18 = (id *)(v2 + v1[9]);
  v19 = swift_getEnumCaseMultiPayload();
  switch(v19)
  {
    case 2:

      break;
    case 1:
      v21 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v22 = (char *)v18 + *(int *)(v21 + 20);
      v23 = OUTLINED_FUNCTION_93();
      v24 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
      v24(v22, v23);
      v24((char *)v18 + *(int *)(v21 + 24), v23);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (OUTLINED_FUNCTION_114() == 1)
        v20 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v20 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v25 = __swift_instantiateConcreteTypeFromMangledName(v20);
      OUTLINED_FUNCTION_11_1(v25);
      break;
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLHandPoseClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_134() - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = swift_task_alloc();
  v7 = (_QWORD *)OUTLINED_FUNCTION_30_0(v6);
  *v7 = v2;
  v7[1] = partial apply for closure #1 in MLHandPoseClassifier.init(checkpoint:);
  return closure #1 in MLHandPoseClassifier.init(checkpoint:)(a1, v5);
}

uint64_t partial apply for closure #1 in MLHandPoseClassifier.init(checkpoint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_52_0();
  return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t partial apply for closure #1 in MLHandPoseClassifier.predictions(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in MLHandPoseClassifier.predictions(from:)(a1, *(_QWORD *)(v3 + 16), a2, a3);
}

_QWORD *initializeBufferWithCopyOfBuffer for MLHandPoseClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  id v13;
  char *v14;
  int *v15;
  uint64_t v16;
  id *v17;
  id *v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  int *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  id v29;
  id v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id *v35;
  id *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  id v44;
  id v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  id v54;
  char *v55;
  int *v56;
  uint64_t v57;
  id *v58;
  id *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  id v67;
  id v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  void **v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  void *v81;
  id v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v86;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
    return v6;
  }
  v5 = a2;
  v6 = a1;
  v7 = (void *)a2[2];
  a1[1] = a2[1];
  a1[2] = v7;
  v8 = (int *)type metadata accessor for MLHandActionClassifier();
  v9 = v8[7];
  v10 = (char *)v6 + v9;
  v11 = (char *)v5 + v9;
  v12 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_bridgeObjectRetain();
  swift_retain();
  v13 = v7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    v14 = (char *)&loc_21ADFD8E0 + 4 * byte_21AFE7DBE[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  v15 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)&v10[v15[5]] = *(_QWORD *)&v11[v15[5]];
  *(_QWORD *)&v10[v15[6]] = *(_QWORD *)&v11[v15[6]];
  *(_QWORD *)&v10[v15[7]] = *(_QWORD *)&v11[v15[7]];
  *(_QWORD *)&v10[v15[8]] = *(_QWORD *)&v11[v15[8]];
  *(_QWORD *)&v10[v15[10]] = *(_QWORD *)&v11[v15[10]];
  v16 = v8[8];
  v17 = (id *)((char *)v6 + v16);
  v18 = (id *)((char *)v5 + v16);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v29 = *v18;
    v30 = *v18;
    *v17 = v29;
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *v17 = *v18;
    v20 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v21 = *(int *)(v20 + 20);
    v22 = (char *)v17 + v21;
    v23 = (char *)v18 + v21;
    v86 = v6;
    v24 = v5;
    v25 = v8;
    v26 = type metadata accessor for DataFrame();
    v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
    v27(v22, v23, v26);
    v28 = v26;
    v8 = v25;
    v5 = v24;
    v6 = v86;
    v27((char *)v17 + *(int *)(v20 + 24), (char *)v18 + *(int *)(v20 + 24), v28);
LABEL_9:
    v31 = a3;
    goto LABEL_14;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v32 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
  else
    v32 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
  v33 = __swift_instantiateConcreteTypeFromMangledName(v32);
  (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v17, v18, v33);
  swift_storeEnumTagMultiPayload();
  v31 = a3;
LABEL_14:
  swift_storeEnumTagMultiPayload();
  v34 = v8[9];
  v35 = (id *)((char *)v6 + v34);
  v36 = (id *)((char *)v5 + v34);
  v37 = swift_getEnumCaseMultiPayload();
  if (v37 == 2)
  {
    v44 = *v36;
    v45 = *v36;
    *v35 = v44;
  }
  else if (v37 == 1)
  {
    *v35 = *v36;
    v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v39 = *(int *)(v38 + 20);
    v40 = (char *)v35 + v39;
    v41 = (char *)v36 + v39;
    v42 = type metadata accessor for DataFrame();
    v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
    v43(v40, v41, v42);
    v43((char *)v35 + *(int *)(v38 + 24), (char *)v36 + *(int *)(v38 + 24), v42);
    v31 = a3;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v46 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v46 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v47 = __swift_instantiateConcreteTypeFromMangledName(v46);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v35, v36, v47);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v48 = v31[5];
  v49 = v31[6];
  v50 = *(void **)((char *)v5 + v48);
  *(_QWORD *)((char *)v6 + v48) = v50;
  v51 = (char *)v6 + v49;
  v52 = (char *)v5 + v49;
  v53 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  v54 = v50;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    v55 = (char *)&loc_21ADFDECC + 4 * byte_21AFE7DC5[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  v56 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(_QWORD *)&v51[v56[5]] = *(_QWORD *)&v52[v56[5]];
  *(_QWORD *)&v51[v56[6]] = *(_QWORD *)&v52[v56[6]];
  *(_QWORD *)&v51[v56[7]] = *(_QWORD *)&v52[v56[7]];
  v57 = v31[7];
  v58 = (id *)((char *)v6 + v57);
  v59 = (id *)((char *)v5 + v57);
  v60 = swift_getEnumCaseMultiPayload();
  if (v60 == 2)
  {
    v67 = *v59;
    v68 = *v59;
    *v58 = v67;
  }
  else if (v60 == 1)
  {
    *v58 = *v59;
    v61 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v62 = *(int *)(v61 + 20);
    v63 = (char *)v58 + v62;
    v64 = (char *)v59 + v62;
    v65 = type metadata accessor for DataFrame();
    v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16);
    v66(v63, v64, v65);
    v66((char *)v58 + *(int *)(v61 + 24), (char *)v59 + *(int *)(v61 + 24), v65);
    v31 = a3;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v69 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v69 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v70 = __swift_instantiateConcreteTypeFromMangledName(v69);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v58, v59, v70);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v71 = v31[8];
  v72 = (void **)((char *)v6 + v71);
  v73 = (void **)((char *)v5 + v71);
  v74 = swift_getEnumCaseMultiPayload();
  if (v74 == 2)
  {
    v81 = *v73;
    v82 = v81;
    *v72 = v81;
  }
  else if (v74 == 1)
  {
    *v72 = *v73;
    v75 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v76 = *(int *)(v75 + 20);
    v77 = (char *)v72 + v76;
    v78 = (char *)v73 + v76;
    v79 = type metadata accessor for DataFrame();
    v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16);
    v80(v77, v78, v79);
    v80((char *)v72 + *(int *)(v75 + 24), (char *)v73 + *(int *)(v75 + 24), v79);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v83 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v83 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v84 = __swift_instantiateConcreteTypeFromMangledName(v83);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v72, v73, v84);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return v6;
}

void destroy for MLHandPoseClassifier(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  int EnumCaseMultiPayload;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  id *v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id *v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  id *v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  id *v49;
  uint64_t v50;
  void (*v51)(id *, uint64_t);
  void (*v52)(char *, uint64_t);

  swift_bridgeObjectRelease();
  swift_release();

  v4 = (int *)type metadata accessor for MLHandActionClassifier();
  v5 = a1 + v4[7];
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for URL();
        v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
        v8(v5, v7);
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(v5 + *(int *)(v9 + 48), v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 1u:
      case 2u:
        v6 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v5, *(_BYTE *)(v5 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(id *)v5, *(_BYTE *)(v5 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 5u:
        v10 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v5, v10);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 6u:
        v11 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v5, v11);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  v12 = (id *)(a1 + v4[8]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      v15 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v16 = (char *)v12 + *(int *)(v15 + 20);
      v17 = type metadata accessor for DataFrame();
      v18 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
      v18(v16, v17);
      v18((char *)v12 + *(int *)(v15 + 24), v17);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v14 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v14 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v19 = __swift_instantiateConcreteTypeFromMangledName(v14);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v12, v19);
      break;
  }
  v20 = (id *)(a1 + v4[9]);
  v21 = swift_getEnumCaseMultiPayload();
  switch(v21)
  {
    case 2:

      break;
    case 1:
      v23 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v24 = (char *)v20 + *(int *)(v23 + 20);
      v25 = type metadata accessor for DataFrame();
      v26 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8);
      v26(v24, v25);
      v26((char *)v20 + *(int *)(v23 + 24), v25);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v22 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v22 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v27 = __swift_instantiateConcreteTypeFromMangledName(v22);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v20, v27);
      break;
  }

  v28 = a1 + a2[6];
  type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v30 = type metadata accessor for URL();
        v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8);
        v31(v28, v30);
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v31(v28 + *(int *)(v32 + 48), v30);
        swift_bridgeObjectRelease();
        goto LABEL_36;
      case 1u:
      case 2u:
        v29 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v28, v29);
        break;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)v28, *(_BYTE *)(v28 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      case 4u:
        outlined consume of Result<_DataTable, Error>(*(id *)v28, *(_BYTE *)(v28 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_36;
      case 5u:
        v33 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v28, v33);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      case 6u:
        v34 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v28, v34);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        swift_bridgeObjectRelease();
LABEL_36:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  v35 = (id *)(a1 + a2[7]);
  v36 = swift_getEnumCaseMultiPayload();
  switch(v36)
  {
    case 2:

      break;
    case 1:
      v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v39 = (char *)v35 + *(int *)(v38 + 20);
      v40 = type metadata accessor for DataFrame();
      v41 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8);
      v41(v39, v40);
      v41((char *)v35 + *(int *)(v38 + 24), v40);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v37 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v37 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v42 = __swift_instantiateConcreteTypeFromMangledName(v37);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v35, v42);
      break;
  }
  v43 = (id *)(a1 + a2[8]);
  v44 = swift_getEnumCaseMultiPayload();
  switch(v44)
  {
    case 2:

      return;
    case 1:
      v46 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v47 = (char *)v43 + *(int *)(v46 + 20);
      v48 = type metadata accessor for DataFrame();
      v52 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v48 - 8) + 8);
      v52(v47, v48);
      v49 = (id *)((char *)v43 + *(int *)(v46 + 24));
      v50 = v48;
      v51 = (void (*)(id *, uint64_t))v52;
LABEL_56:
      v51(v49, v50);
      return;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v45 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v45 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v50 = __swift_instantiateConcreteTypeFromMangledName(v45);
      v51 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v50 - 8) + 8);
      v49 = v43;
      goto LABEL_56;
  }
}

_QWORD *initializeWithCopy for MLHandPoseClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  char *v13;
  int *v14;
  uint64_t v15;
  id *v16;
  id *v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  int *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  id v28;
  id v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  id *v33;
  id *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  id v43;
  id v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  id v53;
  char *v54;
  int *v55;
  uint64_t v56;
  id *v57;
  id *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  id v67;
  id v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  void **v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  void *v81;
  id v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v86;

  v3 = a2;
  v4 = a1;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = (void *)a2[2];
  a1[2] = v6;
  v7 = (int *)type metadata accessor for MLHandActionClassifier();
  v8 = v7[7];
  v9 = (char *)v4 + v8;
  v10 = (char *)v3 + v8;
  v11 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  swift_bridgeObjectRetain();
  swift_retain();
  v12 = v6;
  v86 = v4;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    v13 = (char *)&loc_21ADFEBDC + 4 * byte_21AFE7DDA[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  v14 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)&v9[v14[5]] = *(_QWORD *)&v10[v14[5]];
  *(_QWORD *)&v9[v14[6]] = *(_QWORD *)&v10[v14[6]];
  *(_QWORD *)&v9[v14[7]] = *(_QWORD *)&v10[v14[7]];
  *(_QWORD *)&v9[v14[8]] = *(_QWORD *)&v10[v14[8]];
  *(_QWORD *)&v9[v14[10]] = *(_QWORD *)&v10[v14[10]];
  v15 = v7[8];
  v16 = (id *)((char *)v4 + v15);
  v17 = (id *)((char *)v3 + v15);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v28 = *v17;
    v29 = *v17;
    *v16 = v28;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *v16 = *v17;
    v19 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v20 = *(int *)(v19 + 20);
    v21 = (char *)v16 + v20;
    v22 = (char *)v17 + v20;
    v23 = type metadata accessor for DataFrame();
    v24 = v3;
    v25 = v7;
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    v27 = v21;
    v4 = v86;
    v26(v27, v22, v23);
    v26((char *)v16 + *(int *)(v19 + 24), (char *)v17 + *(int *)(v19 + 24), v23);
    v7 = v25;
    v3 = v24;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v30 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v30 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v31 = __swift_instantiateConcreteTypeFromMangledName(v30);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v16, v17, v31);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v32 = v7[9];
  v33 = (id *)((char *)v4 + v32);
  v34 = (id *)((char *)v3 + v32);
  v35 = swift_getEnumCaseMultiPayload();
  if (v35 == 2)
  {
    v43 = *v34;
    v44 = *v34;
    *v33 = v43;
  }
  else if (v35 == 1)
  {
    *v33 = *v34;
    v36 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v37 = *(int *)(v36 + 20);
    v38 = (char *)v33 + v37;
    v39 = (char *)v34 + v37;
    v40 = type metadata accessor for DataFrame();
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
    v41(v38, v39, v40);
    v42 = v40;
    v4 = v86;
    v41((char *)v33 + *(int *)(v36 + 24), (char *)v34 + *(int *)(v36 + 24), v42);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v45 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v45 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v46 = __swift_instantiateConcreteTypeFromMangledName(v45);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v33, v34, v46);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v47 = a3[5];
  v48 = a3[6];
  v49 = *(void **)((char *)v3 + v47);
  *(_QWORD *)((char *)v4 + v47) = v49;
  v50 = (char *)v4 + v48;
  v51 = (char *)v3 + v48;
  v52 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  v53 = v49;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    v54 = (char *)&loc_21ADFF198 + 4 * byte_21AFE7DE1[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  v55 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(_QWORD *)&v50[v55[5]] = *(_QWORD *)&v51[v55[5]];
  *(_QWORD *)&v50[v55[6]] = *(_QWORD *)&v51[v55[6]];
  *(_QWORD *)&v50[v55[7]] = *(_QWORD *)&v51[v55[7]];
  v56 = a3[7];
  v57 = (id *)((char *)v4 + v56);
  v58 = (id *)((char *)v3 + v56);
  v59 = swift_getEnumCaseMultiPayload();
  if (v59 == 2)
  {
    v67 = *v58;
    v68 = *v58;
    *v57 = v67;
  }
  else if (v59 == 1)
  {
    *v57 = *v58;
    v60 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v61 = *(int *)(v60 + 20);
    v62 = (char *)v57 + v61;
    v63 = (char *)v58 + v61;
    v64 = type metadata accessor for DataFrame();
    v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
    v65(v62, v63, v64);
    v66 = v64;
    v4 = v86;
    v65((char *)v57 + *(int *)(v60 + 24), (char *)v58 + *(int *)(v60 + 24), v66);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v69 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v69 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v70 = __swift_instantiateConcreteTypeFromMangledName(v69);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v57, v58, v70);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v71 = a3[8];
  v72 = (void **)((char *)v4 + v71);
  v73 = (void **)((char *)v3 + v71);
  v74 = swift_getEnumCaseMultiPayload();
  if (v74 == 2)
  {
    v81 = *v73;
    v82 = v81;
    *v72 = v81;
  }
  else if (v74 == 1)
  {
    *v72 = *v73;
    v75 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v76 = *(int *)(v75 + 20);
    v77 = (char *)v72 + v76;
    v78 = (char *)v73 + v76;
    v79 = type metadata accessor for DataFrame();
    v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16);
    v80(v77, v78, v79);
    v80((char *)v72 + *(int *)(v75 + 24), (char *)v73 + *(int *)(v75 + 24), v79);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v83 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v83 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v84 = __swift_instantiateConcreteTypeFromMangledName(v83);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v72, v73, v84);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return v4;
}

_QWORD *assignWithCopy for MLHandPoseClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  void *v6;
  void *v7;
  id v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  id *v17;
  id *v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  id *v34;
  id *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  int *v58;
  uint64_t v59;
  id *v60;
  id *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  uint64_t v70;
  id v71;
  id v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  void **v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  void *v85;
  id v86;
  uint64_t *v87;
  uint64_t v88;
  int *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  int *v94;

  v4 = a2;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = v4[1];
  swift_retain();
  swift_release();
  v6 = (void *)v4[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  v9 = (int *)type metadata accessor for MLHandActionClassifier();
  v10 = v9[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)v4 + v10;
  v94 = a3;
  if (a1 != v4)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v10, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    v13 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      v14 = (char *)&loc_21ADFF738 + 4 * byte_21AFE7DE8[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v15 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)&v11[v15[5]] = *(_QWORD *)&v12[v15[5]];
  *(_QWORD *)&v11[v15[6]] = *(_QWORD *)&v12[v15[6]];
  *(_QWORD *)&v11[v15[7]] = *(_QWORD *)&v12[v15[7]];
  *(_QWORD *)&v11[v15[8]] = *(_QWORD *)&v12[v15[8]];
  *(_QWORD *)&v11[v15[10]] = *(_QWORD *)&v12[v15[10]];
  if (a1 != v4)
  {
    v16 = v9[8];
    v17 = (id *)((char *)a1 + v16);
    v18 = (id *)((char *)v4 + v16);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v16, type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v29 = *v18;
      v30 = *v18;
      *v17 = v29;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v17 = *v18;
      v20 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v21 = *(int *)(v20 + 20);
      v91 = v4;
      v22 = (char *)v17 + v21;
      v23 = (char *)v18 + v21;
      v90 = v9;
      v24 = type metadata accessor for DataFrame();
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
      v26 = v22;
      v4 = v91;
      v25(v26, v23, v24);
      v27 = *(int *)(v20 + 24);
      a3 = v94;
      v28 = v24;
      v9 = v90;
      v25((char *)v17 + v27, (char *)v18 + v27, v28);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v31 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v31 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v32 = __swift_instantiateConcreteTypeFromMangledName(v31);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v17, v18, v32);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v33 = v9[9];
    v34 = (id *)((char *)a1 + v33);
    v35 = (id *)((char *)v4 + v33);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v33, type metadata accessor for MLClassifierMetrics.Contents);
    v36 = swift_getEnumCaseMultiPayload();
    if (v36 == 2)
    {
      v45 = *v35;
      v46 = *v35;
      *v34 = v45;
    }
    else if (v36 == 1)
    {
      *v34 = *v35;
      v37 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v38 = *(int *)(v37 + 20);
      v39 = (char *)v34 + v38;
      v40 = (char *)v35 + v38;
      v92 = v4;
      v41 = type metadata accessor for DataFrame();
      v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
      v43 = v40;
      a3 = v94;
      v42(v39, v43, v41);
      v44 = v41;
      v4 = v92;
      v42((char *)v34 + *(int *)(v37 + 24), (char *)v35 + *(int *)(v37 + 24), v44);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v47 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v47 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v48 = __swift_instantiateConcreteTypeFromMangledName(v47);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v34, v35, v48);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  v49 = a3[5];
  v50 = *(void **)((char *)v4 + v49);
  v51 = *(void **)((char *)a1 + v49);
  *(_QWORD *)((char *)a1 + v49) = v50;
  v52 = v50;

  v53 = a3[6];
  v54 = (char *)a1 + v53;
  v55 = (char *)v4 + v53;
  if (a1 != v4)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v53, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    v56 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandPoseClassifier.DataSource();
      v57 = (char *)&loc_21ADFFE00 + 4 * byte_21AFE7DEF[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  v58 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(_QWORD *)&v54[v58[5]] = *(_QWORD *)&v55[v58[5]];
  *(_QWORD *)&v54[v58[6]] = *(_QWORD *)&v55[v58[6]];
  *(_QWORD *)&v54[v58[7]] = *(_QWORD *)&v55[v58[7]];
  if (a1 != v4)
  {
    v59 = a3[7];
    v60 = (id *)((char *)a1 + v59);
    v61 = (id *)((char *)v4 + v59);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v59, type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    v62 = swift_getEnumCaseMultiPayload();
    if (v62 == 2)
    {
      v71 = *v61;
      v72 = *v61;
      *v60 = v71;
    }
    else if (v62 == 1)
    {
      *v60 = *v61;
      v63 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v64 = *(int *)(v63 + 20);
      v65 = (char *)v60 + v64;
      v66 = (char *)v61 + v64;
      v93 = v4;
      v67 = type metadata accessor for DataFrame();
      v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16);
      v69 = v66;
      a3 = v94;
      v68(v65, v69, v67);
      v70 = v67;
      v4 = v93;
      v68((char *)v60 + *(int *)(v63 + 24), (char *)v61 + *(int *)(v63 + 24), v70);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v73 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v73 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v74 = __swift_instantiateConcreteTypeFromMangledName(v73);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v60, v61, v74);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v75 = a3[8];
    v76 = (void **)((char *)a1 + v75);
    v77 = (void **)((char *)v4 + v75);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v75, type metadata accessor for MLClassifierMetrics.Contents);
    v78 = swift_getEnumCaseMultiPayload();
    if (v78 == 2)
    {
      v85 = *v77;
      v86 = v85;
      *v76 = v85;
    }
    else if (v78 == 1)
    {
      *v76 = *v77;
      v79 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v80 = *(int *)(v79 + 20);
      v81 = (char *)v76 + v80;
      v82 = (char *)v77 + v80;
      v83 = type metadata accessor for DataFrame();
      v84 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 16);
      v84(v81, v82, v83);
      v84((char *)v76 + *(int *)(v79 + 24), (char *)v77 + *(int *)(v79 + 24), v83);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v87 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v87 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v88 = __swift_instantiateConcreteTypeFromMangledName(v87);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v76, v77, v88);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLHandPoseClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v89;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = (int *)type metadata accessor for MLHandActionClassifier();
  v6 = v5[7];
  v89 = a2;
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v11 = type metadata accessor for URL();
        v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
        v12(v7, v8, v11);
        v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v12(&v7[v13[12]], &v8[v13[12]], v11);
        *(_OWORD *)&v7[v13[16]] = *(_OWORD *)&v8[v13[16]];
        *(_OWORD *)&v7[v13[20]] = *(_OWORD *)&v8[v13[20]];
        *(_OWORD *)&v7[v13[24]] = *(_OWORD *)&v8[v13[24]];
        *(_OWORD *)&v7[v13[28]] = *(_OWORD *)&v8[v13[28]];
        goto LABEL_9;
      case 1u:
      case 2u:
        v14 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v7, v8, v14);
        goto LABEL_9;
      case 5u:
        v15 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v7, v8, v15);
        v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v7[v16[12]] = *(_OWORD *)&v8[v16[12]];
        *(_OWORD *)&v7[v16[16]] = *(_OWORD *)&v8[v16[16]];
        *(_OWORD *)&v7[v16[20]] = *(_OWORD *)&v8[v16[20]];
        goto LABEL_9;
      case 6u:
        v17 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v7, v8, v17);
        v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&v7[v18[12]] = *(_OWORD *)&v8[v18[12]];
        *(_OWORD *)&v7[v18[16]] = *(_OWORD *)&v8[v18[16]];
        *(_OWORD *)&v7[v18[20]] = *(_OWORD *)&v8[v18[20]];
        *(_OWORD *)&v7[v18[24]] = *(_OWORD *)&v8[v18[24]];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v19 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)&v7[v19[5]] = *(_QWORD *)&v8[v19[5]];
  *(_QWORD *)&v7[v19[6]] = *(_QWORD *)&v8[v19[6]];
  *(_QWORD *)&v7[v19[7]] = *(_QWORD *)&v8[v19[7]];
  *(_QWORD *)&v7[v19[8]] = *(_QWORD *)&v8[v19[8]];
  *(_QWORD *)&v7[v19[10]] = *(_QWORD *)&v8[v19[10]];
  v20 = v5[8];
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v27 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v28 = *(int *)(v27 + 20);
    v29 = &v21[v28];
    v30 = &v22[v28];
    v31 = type metadata accessor for DataFrame();
    v32 = v5;
    v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32);
    v33(v29, v30, v31);
    v33(&v21[*(int *)(v27 + 24)], &v22[*(int *)(v27 + 24)], v31);
    v5 = v32;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v25 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v25 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v26 = __swift_instantiateConcreteTypeFromMangledName(v25);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v21, v22, v26);
    swift_storeEnumTagMultiPayload();
    goto LABEL_18;
  }
  memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
LABEL_20:
  v34 = v5[9];
  v35 = (char *)(a1 + v34);
  v36 = (char *)(v89 + v34);
  v37 = swift_getEnumCaseMultiPayload();
  if (v37 == 1)
  {
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v40 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v41 = *(int *)(v40 + 20);
    v42 = &v35[v41];
    v43 = &v36[v41];
    v44 = type metadata accessor for DataFrame();
    v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32);
    v45(v42, v43, v44);
    v45(&v35[*(int *)(v40 + 24)], &v36[*(int *)(v40 + 24)], v44);
LABEL_27:
    swift_storeEnumTagMultiPayload();
    goto LABEL_29;
  }
  if (!v37)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v38 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v38 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v39 = __swift_instantiateConcreteTypeFromMangledName(v38);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v35, v36, v39);
    swift_storeEnumTagMultiPayload();
    goto LABEL_27;
  }
  memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
LABEL_29:
  v46 = a3;
  v47 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(v89 + *(int *)(a3 + 20));
  v48 = (char *)(a1 + v47);
  v49 = (char *)(v89 + v47);
  v50 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v51 = type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v52 = type metadata accessor for URL();
        v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32);
        v53(v48, v49, v52);
        v54 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v53(&v48[v54[12]], &v49[v54[12]], v52);
        *(_OWORD *)&v48[v54[16]] = *(_OWORD *)&v49[v54[16]];
        v55 = v54[20];
        v46 = a3;
        *(_OWORD *)&v48[v55] = *(_OWORD *)&v49[v55];
        goto LABEL_37;
      case 1u:
      case 2u:
        v56 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v48, v49, v56);
        goto LABEL_37;
      case 5u:
        v57 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v48, v49, v57);
        v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v48[v58[12]] = *(_OWORD *)&v49[v58[12]];
        *(_OWORD *)&v48[v58[16]] = *(_OWORD *)&v49[v58[16]];
        *(_OWORD *)&v48[v58[20]] = *(_OWORD *)&v49[v58[20]];
        goto LABEL_37;
      case 6u:
        v59 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v48, v49, v59);
        v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&v48[*(int *)(v60 + 48)] = *(_OWORD *)&v49[*(int *)(v60 + 48)];
        *(_OWORD *)&v48[*(int *)(v60 + 64)] = *(_OWORD *)&v49[*(int *)(v60 + 64)];
LABEL_37:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  v61 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(_QWORD *)&v48[v61[5]] = *(_QWORD *)&v49[v61[5]];
  *(_QWORD *)&v48[v61[6]] = *(_QWORD *)&v49[v61[6]];
  *(_QWORD *)&v48[v61[7]] = *(_QWORD *)&v49[v61[7]];
  v62 = *(int *)(v46 + 28);
  v63 = (char *)(a1 + v62);
  v64 = (char *)(v89 + v62);
  v65 = swift_getEnumCaseMultiPayload();
  if (v65 == 1)
  {
    *(_QWORD *)v63 = *(_QWORD *)v64;
    v68 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v69 = *(int *)(v68 + 20);
    v70 = &v63[v69];
    v71 = &v64[v69];
    v72 = type metadata accessor for DataFrame();
    v73 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32);
    v73(v70, v71, v72);
    v74 = v72;
    v46 = a3;
    v73(&v63[*(int *)(v68 + 24)], &v64[*(int *)(v68 + 24)], v74);
LABEL_46:
    swift_storeEnumTagMultiPayload();
    goto LABEL_48;
  }
  if (!v65)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v66 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v66 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v67 = __swift_instantiateConcreteTypeFromMangledName(v66);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v63, v64, v67);
    swift_storeEnumTagMultiPayload();
    goto LABEL_46;
  }
  memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
LABEL_48:
  v75 = *(int *)(v46 + 32);
  v76 = (char *)(a1 + v75);
  v77 = (char *)(v89 + v75);
  v78 = swift_getEnumCaseMultiPayload();
  if (v78 == 1)
  {
    *(_QWORD *)v76 = *(_QWORD *)v77;
    v81 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v82 = *(int *)(v81 + 20);
    v83 = &v76[v82];
    v84 = &v77[v82];
    v85 = type metadata accessor for DataFrame();
    v86 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32);
    v86(v83, v84, v85);
    v86(&v76[*(int *)(v81 + 24)], &v77[*(int *)(v81 + 24)], v85);
  }
  else
  {
    if (v78)
    {
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v79 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v79 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v80 = __swift_instantiateConcreteTypeFromMangledName(v79);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v76, v77, v80);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithTake for MLHandPoseClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  void *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  void (*v15)(char *, char *, uint64_t);
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  void (*v59)(char *, char *, uint64_t);
  int *v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  int *v94;
  int *v95;
  int *v96;
  int *v97;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  v6 = (void *)a1[2];
  a1[2] = a2[2];

  v7 = (int *)type metadata accessor for MLHandActionClassifier();
  v8 = v7[7];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v8, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    v11 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v95 = a3;
          v13 = type metadata accessor for URL();
          v14 = v7;
          v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
          v15(v9, v10, v13);
          v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v17 = v13;
          a3 = v95;
          v15(&v9[v16[12]], &v10[v16[12]], v17);
          v7 = v14;
          *(_OWORD *)&v9[v16[16]] = *(_OWORD *)&v10[v16[16]];
          *(_OWORD *)&v9[v16[20]] = *(_OWORD *)&v10[v16[20]];
          *(_OWORD *)&v9[v16[24]] = *(_OWORD *)&v10[v16[24]];
          *(_OWORD *)&v9[v16[28]] = *(_OWORD *)&v10[v16[28]];
          goto LABEL_10;
        case 1u:
        case 2u:
          v18 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v9, v10, v18);
          goto LABEL_10;
        case 5u:
          v19 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v9, v10, v19);
          v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v9[v20[12]] = *(_OWORD *)&v10[v20[12]];
          *(_OWORD *)&v9[v20[16]] = *(_OWORD *)&v10[v20[16]];
          *(_OWORD *)&v9[v20[20]] = *(_OWORD *)&v10[v20[20]];
          goto LABEL_10;
        case 6u:
          v21 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v9, v10, v21);
          v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&v9[v22[12]] = *(_OWORD *)&v10[v22[12]];
          *(_OWORD *)&v9[v22[16]] = *(_OWORD *)&v10[v22[16]];
          *(_OWORD *)&v9[v22[20]] = *(_OWORD *)&v10[v22[20]];
          *(_OWORD *)&v9[v22[24]] = *(_OWORD *)&v10[v22[24]];
LABEL_10:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v23 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)&v9[v23[5]] = *(_QWORD *)&v10[v23[5]];
  *(_QWORD *)&v9[v23[6]] = *(_QWORD *)&v10[v23[6]];
  *(_QWORD *)&v9[v23[7]] = *(_QWORD *)&v10[v23[7]];
  *(_QWORD *)&v9[v23[8]] = *(_QWORD *)&v10[v23[8]];
  *(_QWORD *)&v9[v23[10]] = *(_QWORD *)&v10[v23[10]];
  if (a1 != a2)
  {
    v24 = v7[8];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v24, type metadata accessor for MLClassifierMetrics.Contents);
    v27 = type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v96 = a3;
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v31 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v32 = *(int *)(v31 + 20);
      v33 = &v25[v32];
      v34 = &v26[v32];
      v94 = v7;
      v35 = type metadata accessor for DataFrame();
      v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32);
      v36(v33, v34, v35);
      v37 = v35;
      v7 = v94;
      v36(&v25[*(int *)(v31 + 24)], &v26[*(int *)(v31 + 24)], v37);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
LABEL_22:
        v38 = v7[9];
        v39 = (char *)a1 + v38;
        v40 = (char *)a2 + v38;
        outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v38, type metadata accessor for MLClassifierMetrics.Contents);
        v41 = swift_getEnumCaseMultiPayload();
        if (v41 == 1)
        {
          *(_QWORD *)v39 = *(_QWORD *)v40;
          v44 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          v45 = *(int *)(v44 + 20);
          v46 = &v39[v45];
          v47 = &v40[v45];
          v48 = type metadata accessor for DataFrame();
          v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32);
          v49(v46, v47, v48);
          v49(&v39[*(int *)(v44 + 24)], &v40[*(int *)(v44 + 24)], v48);
        }
        else
        {
          if (v41)
          {
            memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
            goto LABEL_31;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          if (swift_getEnumCaseMultiPayload() == 1)
            v42 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          else
            v42 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          v43 = __swift_instantiateConcreteTypeFromMangledName(v42);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v39, v40, v43);
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
LABEL_31:
        a3 = v96;
        goto LABEL_32;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v29 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v29 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v30 = __swift_instantiateConcreteTypeFromMangledName(v29);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v25, v26, v30);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_22;
  }
LABEL_32:
  v50 = a3[5];
  v51 = *(void **)((char *)a1 + v50);
  *(_QWORD *)((char *)a1 + v50) = *(_QWORD *)((char *)a2 + v50);

  v52 = a3[6];
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  if (a1 != a2)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v52, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    v55 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v56 = type metadata accessor for MLHandPoseClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v57 = type metadata accessor for URL();
          v58 = a3;
          v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32);
          v59(v53, v54, v57);
          v60 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v59(&v53[v60[12]], &v54[v60[12]], v57);
          a3 = v58;
          *(_OWORD *)&v53[v60[16]] = *(_OWORD *)&v54[v60[16]];
          *(_OWORD *)&v53[v60[20]] = *(_OWORD *)&v54[v60[20]];
          goto LABEL_41;
        case 1u:
        case 2u:
          v61 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v53, v54, v61);
          goto LABEL_41;
        case 5u:
          v62 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v53, v54, v62);
          v63 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v53[v63[12]] = *(_OWORD *)&v54[v63[12]];
          *(_OWORD *)&v53[v63[16]] = *(_OWORD *)&v54[v63[16]];
          *(_OWORD *)&v53[v63[20]] = *(_OWORD *)&v54[v63[20]];
          goto LABEL_41;
        case 6u:
          v64 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v53, v54, v64);
          v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          *(_OWORD *)&v53[*(int *)(v65 + 48)] = *(_OWORD *)&v54[*(int *)(v65 + 48)];
          *(_OWORD *)&v53[*(int *)(v65 + 64)] = *(_OWORD *)&v54[*(int *)(v65 + 64)];
LABEL_41:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
  }
  v66 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  *(_QWORD *)&v53[v66[5]] = *(_QWORD *)&v54[v66[5]];
  *(_QWORD *)&v53[v66[6]] = *(_QWORD *)&v54[v66[6]];
  *(_QWORD *)&v53[v66[7]] = *(_QWORD *)&v54[v66[7]];
  if (a1 == a2)
    return a1;
  v67 = a3[7];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v67, type metadata accessor for MLClassifierMetrics.Contents);
  v70 = type metadata accessor for MLClassifierMetrics.Contents(0);
  v71 = swift_getEnumCaseMultiPayload();
  if (v71 == 1)
  {
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v74 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v75 = *(int *)(v74 + 20);
    v76 = &v68[v75];
    v77 = &v69[v75];
    v97 = a3;
    v78 = type metadata accessor for DataFrame();
    v79 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32);
    v79(v76, v77, v78);
    v80 = v78;
    a3 = v97;
    v79(&v68[*(int *)(v74 + 24)], &v69[*(int *)(v74 + 24)], v80);
  }
  else
  {
    if (v71)
    {
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      goto LABEL_53;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v72 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v72 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v73 = __swift_instantiateConcreteTypeFromMangledName(v72);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v68, v69, v73);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_53:
  v81 = a3[8];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v81, type metadata accessor for MLClassifierMetrics.Contents);
  v84 = swift_getEnumCaseMultiPayload();
  if (v84 == 1)
  {
    *(_QWORD *)v82 = *(_QWORD *)v83;
    v87 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v88 = *(int *)(v87 + 20);
    v89 = &v82[v88];
    v90 = &v83[v88];
    v91 = type metadata accessor for DataFrame();
    v92 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 32);
    v92(v89, v90, v91);
    v92(&v82[*(int *)(v87 + 24)], &v83[*(int *)(v87 + 24)], v91);
  }
  else
  {
    if (v84)
    {
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v85 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v85 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v86 = __swift_instantiateConcreteTypeFromMangledName(v85);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v82, v83, v86);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandPoseClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE01830(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v6 = OUTLINED_FUNCTION_134();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v11 = OUTLINED_FUNCTION_95();
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v11;
      v12 = a3[6];
    }
    else
    {
      v7 = type metadata accessor for MLClassifierMetrics(0);
      v12 = a3[7];
    }
    v8 = a1 + v12;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + a3[5]);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MLHandPoseClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AE018F4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = OUTLINED_FUNCTION_134();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      OUTLINED_FUNCTION_125();
      return;
    }
    v11 = OUTLINED_FUNCTION_95();
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = a4[6];
    }
    else
    {
      v9 = type metadata accessor for MLClassifierMetrics(0);
      v12 = a4[7];
    }
    v10 = a1 + v12;
  }
  __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
}

uint64_t type metadata completion function for MLHandPoseClassifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for MLHandActionClassifier();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLHandPoseClassifier.ModelParameters(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for MLClassifierMetrics.Contents(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[3];

  v3 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v3)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    v5 = (uint64_t)result;
    if (v3 <= 0)
    {
      v2 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v6 = (_QWORD *)OUTLINED_FUNCTION_9_1();
      OUTLINED_FUNCTION_159(v6);
    }
    result = specialized Sequence._copySequenceContents(initializing:)(v7, (_QWORD *)(v2 + 32), v3, v5, a2);
    if (result == (_QWORD *)v3)
      return (_QWORD *)v2;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  _QWORD v7[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    v4 = (uint64_t)result;
    if (v2 < 1)
    {
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v5[2] = v2;
      v5[3] = 2 * ((uint64_t)(v6 - 32) / 8);
    }
    result = specialized Sequence._copySequenceContents(initializing:)(v7, v5 + 4, v2, v4, a2);
    if (result == (_QWORD *)v2)
      return v5;
  }
  __break(1u);
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<Double>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  _QWORD *v4;
  size_t v5;

  if (a2)
  {
    if (a2 > 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
      v5 = _swift_stdlib_malloc_size(v4);
      v4[2] = a2;
      v4[3] = 2 * ((uint64_t)(v5 - 32) / 4);
    }
    specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
  }
  OUTLINED_FUNCTION_125();
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t, _QWORD *))
{
  _QWORD *v7;
  size_t v8;

  if (a2)
  {
    if (a2 <= 0)
    {
      v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(a3);
      v7 = (_QWORD *)OUTLINED_FUNCTION_9_1();
      v8 = _swift_stdlib_malloc_size(v7);
      v7[2] = a2;
      v7[3] = 2 * ((uint64_t)(v8 - 32) / 8);
    }
    a4(a1, a2, v7 + 4);
  }
  OUTLINED_FUNCTION_125();
}

void specialized Sequence._copySequenceContents(initializing:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_162();
  v5 = v4;
  if (!v2)
  {
LABEL_11:
    v11 = 0;
LABEL_13:
    *v5 = v0;
    v5[1] = v11;
    OUTLINED_FUNCTION_31_0();
    return;
  }
  v6 = v3;
  if (!v3)
  {
    v11 = 0;
    goto LABEL_13;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    v7 = v2;
    if (CMLSequence.size.getter())
    {
      OUTLINED_FUNCTION_133();
      if (!v1)
      {
        v9 = v8;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          OUTLINED_FUNCTION_3_1();
          specialized RandomAccessCollection<>.index(after:)(v11);
          v11 = v12;
          OUTLINED_FUNCTION_4_2();
          *(_QWORD *)(v7 + 8 * v10) = v9;
          if (v6 - 1 == v10 || v11 == CMLSequence.size.getter())
            break;
          OUTLINED_FUNCTION_198();
          v9 = v13;
          ++v10;
        }
        goto LABEL_13;
      }
      OUTLINED_FUNCTION_120();
      __break(1u);
    }
    goto LABEL_11;
  }
  __break(1u);
}

{
  uint64_t v0;
  Swift::String *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  Swift::String *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;

  OUTLINED_FUNCTION_28_0();
  v4 = v3;
  v6 = v5;
  if (!v1)
  {
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  v7 = v2;
  if (!v2)
  {
LABEL_12:
    *v6 = v4;
    v6[1] = v7;
    OUTLINED_FUNCTION_7_1();
    return;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
    v8 = v1;
    OUTLINED_FUNCTION_122();
    v9 = OUTLINED_FUNCTION_140();
    OUTLINED_FUNCTION_5_1(v9);
    OUTLINED_FUNCTION_68();
    if (v0)
    {
      CMLSequence.value(at:)(0);
      v11 = v10;
      for (i = 1; ; ++i)
      {
        v13 = CMLFeatureValue.stringValue()();
        if (v14)
          break;
        OUTLINED_FUNCTION_4_2();
        OUTLINED_FUNCTION_122();
        v15 = OUTLINED_FUNCTION_140();
        OUTLINED_FUNCTION_5_1(v15);
        OUTLINED_FUNCTION_68();
        if (i - 1 >= v11)
        {
          __break(1u);
          goto LABEL_15;
        }
        *v8 = v13;
        if (v7 == i)
          goto LABEL_12;
        OUTLINED_FUNCTION_122();
        v16 = OUTLINED_FUNCTION_140();
        OUTLINED_FUNCTION_5_1(v16);
        OUTLINED_FUNCTION_68();
        if (i == v11)
        {
          v7 = i;
          goto LABEL_12;
        }
        CMLSequence.value(at:)(i);
        v11 = v17;
        ++v8;
      }
      goto LABEL_16;
    }
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_40_0();
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_197();
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_152(46);
  OUTLINED_FUNCTION_121();
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_28_0();
  v2 = v1;
  v4 = v3;
  if (!v5)
    goto LABEL_6;
  v6 = v0;
  if (!v0)
  {
LABEL_7:
    *v4 = v2;
    v4[1] = v6;
    OUTLINED_FUNCTION_7_1();
    return;
  }
  if ((v0 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_3_1();
    v7 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v7);
    v9 = v8;
    OUTLINED_FUNCTION_4_2();
    if (v9)
    {
      OUTLINED_FUNCTION_3_1();
      OUTLINED_FUNCTION_133();
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_214();
      swift_unexpectedError();
      __break(1u);
    }
LABEL_6:
    v6 = 0;
    goto LABEL_7;
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_162();
  v4 = v3;
  if (!v1)
  {
LABEL_9:
    v10 = 0;
LABEL_11:
    *v4 = v0;
    v4[1] = v10;
    OUTLINED_FUNCTION_31_0();
    return;
  }
  v5 = v2;
  if (!v2)
  {
    v10 = 0;
    goto LABEL_11;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
    v6 = v1;
    if (CMLDictionary.size.getter())
    {
      v7 = CMLDictionary.keyAndValue(at:)(0);
      v9 = v8;
      v10 = 0;
      v11 = 1;
      while (1)
      {
        OUTLINED_FUNCTION_3_1();
        specialized RandomAccessCollection<>.index(after:)(v10);
        v10 = v12;
        OUTLINED_FUNCTION_4_2();
        *v6 = v7;
        v6[1] = v9;
        if (v5 == v11 || v10 == CMLDictionary.size.getter())
          break;
        ++v11;
        v7 = CMLDictionary.keyAndValue(at:)(v10);
        v9 = v13;
        v6 += 2;
      }
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  __break(1u);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  OUTLINED_FUNCTION_162();
  v3 = v2;
  v5 = v4;
  v6 = v2 + 64;
  v7 = -1 << *(_BYTE *)(v2 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 64);
  if (!v0)
  {
    v12 = 0;
LABEL_37:
    *v5 = v3;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    OUTLINED_FUNCTION_31_0();
    return;
  }
  v10 = v1;
  if (!v1)
  {
    v12 = 0;
    goto LABEL_37;
  }
  if (v1 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v11 = v0;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_37;
    }
    v11 += 2;
    swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t result;
  Swift::String v23;
  _QWORD *v24;
  void *v27;
  void *v28;
  char v29;

  if (!a2)
  {
    v8 = 0;
    goto LABEL_17;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_17:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = v8;
    return v8;
  }
  if (a3 < 0)
  {
LABEL_20:
    __break(1u);
  }
  else
  {
    v9 = a2;
    v10 = 0;
    v24 = a1;
    while (1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_194();
      v11 = CMLSequence.size.getter();
      OUTLINED_FUNCTION_5_1(v11);
      v13 = v12;
      OUTLINED_FUNCTION_51_0();
      v14 = CMLSequence.size.getter();
      OUTLINED_FUNCTION_5_1(v14);
      v16 = v15;
      OUTLINED_FUNCTION_81();
      if (v16 < 0)
      {
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      OUTLINED_FUNCTION_51_0();
      v17 = CMLSequence.size.getter();
      OUTLINED_FUNCTION_5_1(v17);
      v19 = v18;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_99();
      swift_release_n();
      if (v13 < 0 || v19 < v13)
        goto LABEL_19;
      if (v10 == v13)
      {
        v8 = v10;
LABEL_16:
        a1 = v24;
        goto LABEL_17;
      }
      swift_retain();
      CMLSequence.value(at:)(v10);
      v20 = CMLFeatureValue.stringValue()();
      if (v21)
        break;
      OUTLINED_FUNCTION_99();
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_194();
      CMLSequence.value(at:)(v10);
      OUTLINED_FUNCTION_81();
      ++v10;
      MLDataValue.init(_:)();
      OUTLINED_FUNCTION_81();
      swift_bridgeObjectRetain();
      outlined copy of MLDataValue(v27, v28, v29);
      swift_bridgeObjectRelease();
      outlined consume of MLDataValue(v27, v28, v29);
      *(Swift::String *)v9 = v20;
      *(_QWORD *)(v9 + 16) = v27;
      *(_QWORD *)(v9 + 24) = v28;
      *(_BYTE *)(v9 + 32) = v29;
      v9 += 40;
      v8 = a3;
      if (a3 == v10)
        goto LABEL_16;
    }
    OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_40_0();
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_197();
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_152(46);
    OUTLINED_FUNCTION_121();
    __break(1u);
    OUTLINED_FUNCTION_214();
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v15 = a4;
  v7 = a5 & 1;
  v16 = a5 & 1;
  v17 = 0;
  if (!a2)
  {
LABEL_10:
    v10 = 0;
LABEL_12:
    *(_QWORD *)a1 = a4;
    *(_BYTE *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10;
    OUTLINED_FUNCTION_61_0();
    return;
  }
  if (!a3)
  {
LABEL_11:
    v10 = a3;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = a2;
    *(_QWORD *)&v13 = a4;
    if (OUTLINED_FUNCTION_106())
    {
      v10 = 0;
      while (1)
      {
        MLDataTable.Rows.subscript.getter(v10, &v13);
        v12 = v13;
        v11 = v14;
        *(_QWORD *)&v13 = a4;
        if (v10 >= OUTLINED_FUNCTION_106())
          break;
        *(_OWORD *)v9 = v12;
        *(_QWORD *)(v9 + 16) = v11;
        if (a3 - 1 == v10)
          goto LABEL_11;
        *(_QWORD *)&v13 = a4;
        ++v10;
        v9 += 24;
        if (v10 == OUTLINED_FUNCTION_106())
          goto LABEL_12;
      }
      __break(1u);
      goto LABEL_14;
    }
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;

  OUTLINED_FUNCTION_28_0();
  v18 = v17;
  v20 = v19;
  if (!v15)
  {
LABEL_12:
    v21 = 0;
    goto LABEL_14;
  }
  v21 = v16;
  if (!v16)
  {
LABEL_14:
    *v20 = v18;
    v20[1] = v21;
    OUTLINED_FUNCTION_7_1();
    return;
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    v22 = v15;
    if (CMLSequence.size.getter())
    {
      OUTLINED_FUNCTION_3_1();
      OUTLINED_FUNCTION_133();
      if (!v14)
      {
        for (i = 1; ; ++i)
        {
          OUTLINED_FUNCTION_4_2();
          OUTLINED_FUNCTION_213();
          OUTLINED_FUNCTION_3_1();
          v24 = CMLSequence.size.getter();
          OUTLINED_FUNCTION_4_2();
          if (i - 1 >= v24)
            break;
          *(_QWORD *)v22 = a12;
          *(_QWORD *)(v22 + 8) = a13;
          *(_BYTE *)(v22 + 16) = a14;
          if (v21 == i)
            goto LABEL_14;
          if (i == CMLSequence.size.getter())
          {
            v21 = i;
            goto LABEL_14;
          }
          v22 += 24;
          OUTLINED_FUNCTION_3_1();
          OUTLINED_FUNCTION_198();
        }
        __break(1u);
        goto LABEL_16;
      }
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_119();
      __break(1u);
    }
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v9 = specialized Dictionary.startIndex.getter(a4);
  v11 = v10;
  v12 = v8 & 1;
  if (!a2 || !a3)
  {
LABEL_20:
    *(_QWORD *)a1 = a4;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    *(_BYTE *)(a1 + 24) = v12;
    OUTLINED_FUNCTION_61_0();
    return;
  }
  if (a3 < 0)
    goto LABEL_27;
  if ((v8 & 1) == 0)
  {
    v13 = 0;
    v28 = a4 + 64;
    v23 = a1;
    v24 = a3 - 1;
    while (*(_DWORD *)(a4 + 36) == (_DWORD)v11)
    {
      v14 = 1 << *(_BYTE *)(a4 + 32);
      if (v9 == v14)
      {
        v12 = 0;
        a1 = v23;
        goto LABEL_20;
      }
      if (v9 < 0 || v9 >= v14)
        goto LABEL_22;
      if ((*(_QWORD *)(v28 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0)
        goto LABEL_23;
      v27 = *(_DWORD *)(a4 + 36);
      v25 = v13;
      v26 = a2;
      v15 = *(_QWORD *)(a4 + 48) + 24 * v9;
      v17 = *(void **)v15;
      v16 = *(void **)(v15 + 8);
      v18 = *(_BYTE *)(v15 + 16);
      v19 = *(_QWORD *)(a4 + 56) + 24 * v9;
      v20 = *(void **)v19;
      v21 = *(void **)(v19 + 8);
      v22 = *(_BYTE *)(v19 + 16);
      OUTLINED_FUNCTION_87();
      OUTLINED_FUNCTION_87();
      outlined consume of MLDataValue(v17, v16, v18);
      outlined consume of MLDataValue(v20, v21, v22);
      if (v9 >= -(-1 << *(_BYTE *)(a4 + 32)))
        goto LABEL_24;
      if ((*(_QWORD *)(v28 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0)
        goto LABEL_25;
      if (*(_DWORD *)(a4 + 36) != v27)
        goto LABEL_26;
      swift_bridgeObjectRetain();
      v9 = _HashTable.occupiedBucket(after:)();
      v11 = *(unsigned int *)(a4 + 36);
      swift_bridgeObjectRelease();
      *(_QWORD *)v26 = v17;
      *(_QWORD *)(v26 + 8) = v16;
      *(_BYTE *)(v26 + 16) = v18;
      *(_QWORD *)(v26 + 24) = v20;
      *(_QWORD *)(v26 + 32) = v21;
      *(_BYTE *)(v26 + 40) = v22;
      if (v24 == v25)
      {
        v12 = 0;
        a1 = v23;
        goto LABEL_20;
      }
      a2 = v26 + 48;
      v13 = v25 + 1;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  __break(1u);
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_36:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_36;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_18;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    v13 = v8;
LABEL_18:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_19;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_31;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v13 = v15;
    goto LABEL_18;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_14;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_17;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_35;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (_QWORD *)a3;
  }
  if (a3 < 0)
    goto LABEL_20;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_21;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = a2 + 1;
    while (v6)
    {
      if (a5 == v5)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v5 >= a5)
        goto LABEL_19;
      v8 = v5 + 1;
      *v7++ = v5++;
      if (!--v6)
      {
        v5 = v8;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (_QWORD *)a3;
  }
  if (a3 < 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_23;
  if (a5 <= a4)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v5 = a4 + 1;
  *a2 = a4;
  if (a3 == 1)
    goto LABEL_7;
  if (v5 == a5)
  {
    a3 = 1;
    v5 = a5;
    goto LABEL_7;
  }
  if (v5 < a5)
  {
    v6 = a4 + 2;
    a2[1] = v5;
    if (a3 == 2)
    {
      v5 = a4 + 2;
      goto LABEL_7;
    }
    if (v6 == a5)
    {
LABEL_21:
      v5 = a5;
      a3 = a5 - a4;
      goto LABEL_7;
    }
    v7 = a2 + 2;
    v8 = a3 - 3;
    while (v6 < a5)
    {
      v5 = v6 + 1;
      *v7 = v6;
      if (!v8)
        goto LABEL_7;
      ++v7;
      --v8;
      ++v6;
      if (a5 == v5)
        goto LABEL_21;
    }
    goto LABEL_25;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;

  if (!a2)
  {
    v5 = 0;
    goto LABEL_13;
  }
  if (!a3)
    goto LABEL_11;
  if (a3 < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v5 = a4;
  if (!a4)
  {
LABEL_13:
    *(_QWORD *)result = a4;
    *(_BYTE *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v5;
    return v5;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      v6 = 1;
      while (a3 != v6)
      {
        if (a4 == v6)
        {
          v5 = a4;
          goto LABEL_13;
        }
        a2[v6++] = a5;
        if (a3 == v6)
          goto LABEL_11;
      }
      __break(1u);
      goto LABEL_16;
    }
LABEL_11:
    v5 = a3;
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
  return result;
}

void outlined consume of MLDataValue(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 2:
    case 4:
      swift_bridgeObjectRelease();
      break;
    case 3:
      swift_release();
      break;
    case 5:

      break;
    default:
      return;
  }
}

id outlined copy of MLDataValue(id result, id a2, char a3)
{
  switch(a3)
  {
    case 2:
    case 4:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 3:
      result = (id)swift_retain();
      break;
    case 5:
      result = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined init with copy of TrainingSessionDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in blockAwait<A>(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_52_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_6_1();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_30_0(v0);
  OUTLINED_FUNCTION_0_2(v1);
  OUTLINED_FUNCTION_12_1();
  return specialized closure #1 in blockAwait<A>(_:)(v2, v3, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError;
  if (!lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLCreateError, &type metadata for MLCreateError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError;
  if (!lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLCreateError, &type metadata for MLCreateError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCreateError and conformance MLCreateError);
  }
  return result;
}

void partial apply for closure #1 in CMLTable.column(name:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CMLTable.column(name:)(a1, v1);
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(uint64_t **)(v2 + 16), a1, a2);
}

{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(uint64_t **)(v2 + 16), a1, a2);
}

{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(_QWORD **)(v2 + 16), a1, a2);
}

{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(_QWORD **)(v2 + 16), a1, a2);
}

{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(_QWORD **)(v2 + 16), a1, specialized closure #1 in MLUntypedColumn.init<A>(_:), a2);
}

{
  uint64_t v2;

  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(*(uint64_t **)(v2 + 16), a1, a2);
}

void outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_165(a1, a2, a3);
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  OUTLINED_FUNCTION_22();
}

void lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    atomic_store(MEMORY[0x22075B938](a3, v5), a1);
  }
  OUTLINED_FUNCTION_22();
}

void outlined init with copy of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_165(a1, a2, a3);
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_22();
}

void outlined init with copy of MLTrainingSessionParameters(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_166(a1, a2, a3);
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_22();
}

void partial apply for closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(_QWORD *a1)
{
  uint64_t *v1;

  closure #1 in closure #1 in closure #1 in static MLHandPoseClassifier.resume(_:)(v1[2], v1[3], v1[4], v1[5], a1);
}

void outlined destroy of URL?(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_11_1(v2);
  OUTLINED_FUNCTION_22();
}

void outlined destroy of MLHandPoseClassifier.ModelParameters(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  OUTLINED_FUNCTION_11_1(v2);
  OUTLINED_FUNCTION_22();
}

uint64_t type metadata accessor for NSAttributedString(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void outlined consume of (offset: Int, element: MLDataValue)?(int a1, void *a2, id a3, char a4)
{
  if (a4 != -1)
    outlined consume of MLDataValue(a2, a3, a4);
}

uint64_t objectdestroy_7Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined assign with copy of MLClassifierMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLClassifierMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, a2);
}

{
  return _s8CreateML15MLUntypedColumnVyACxcSTRzAA11MLDataValueO7ElementRtzlufcAA08_UntypedD0CyKXEfU_SayAEG_TG5TA_0(a1, a2);
}

{
  return _s8CreateML15MLUntypedColumnVyACxcSTRzAA22MLDataValueConvertible7ElementRpzlufcAA08_UntypedD0CyKXEfU_SaySiG_TG5TA_0(a1, a2);
}

uint64_t OUTLINED_FUNCTION_0_2(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  return swift_release();
}

void OUTLINED_FUNCTION_5_1(uint64_t a1)
{
  specialized RandomAccessCollection<>.distance(from:to:)(0, a1);
}

uint64_t OUTLINED_FUNCTION_9_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_11_1(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void OUTLINED_FUNCTION_14_1()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v1, v0, 3);
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  return swift_allocObject();
}

dispatch_semaphore_t OUTLINED_FUNCTION_16_1(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 48) = -1;
  return dispatch_semaphore_create(0);
}

dispatch_semaphore_t OUTLINED_FUNCTION_17_1(uint64_t a1)
{
  *(_BYTE *)(a1 + 48) = -1;
  return dispatch_semaphore_create(0);
}

uint64_t OUTLINED_FUNCTION_18_0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  return swift_willThrow(0.0);
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return 0;
}

void OUTLINED_FUNCTION_21_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 - 216);
  *(_QWORD *)(v0 - 152) = *(_QWORD *)(v0 - 224);
  *(_QWORD *)(v0 - 144) = v1;
  v2 = *(_QWORD *)(v0 - 200);
  *(_QWORD *)(v0 - 136) = *(_QWORD *)(v0 - 208);
  *(_QWORD *)(v0 - 128) = v2;
  v3 = *(_QWORD *)(v0 - 184);
  *(_QWORD *)(v0 - 120) = *(_QWORD *)(v0 - 192);
  *(_QWORD *)(v0 - 112) = v3;
  v4 = *(_QWORD *)(v0 - 168);
  *(_QWORD *)(v0 - 104) = *(_QWORD *)(v0 - 176);
  *(_QWORD *)(v0 - 96) = v4;
  *(_QWORD *)(v0 - 88) = *(_QWORD *)(v0 - 160);
}

void OUTLINED_FUNCTION_23_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10)
{
  void *v10;
  uint64_t v11;
  Swift::String v12;

  strcpy((char *)&a10, "Column named '");
  HIBYTE(a10) = -18;
  v12._countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
}

void OUTLINED_FUNCTION_24()
{
  void *v0;
  void *v1;
  int v2;

  outlined consume of (offset: Int, element: MLDataValue)?(v2, v0, v1, 3);
}

void OUTLINED_FUNCTION_25_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v12;
  Swift::String v13;

  v13._countAndFlagsBits = v12;
  v13._object = v11;
  String.append(_:)(v13);
}

uint64_t OUTLINED_FUNCTION_26_0()
{
  return type metadata accessor for ResultBox();
}

uint64_t OUTLINED_FUNCTION_29_0()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_30_0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

void OUTLINED_FUNCTION_33_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t OUTLINED_FUNCTION_34_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_35_0()
{
  return type metadata accessor for MLHandPoseClassifier();
}

uint64_t OUTLINED_FUNCTION_36_0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v2;
  a1[5] = v3;
  a1[6] = v1;
  a1[7] = v4;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_37_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, a4);
}

void OUTLINED_FUNCTION_38_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, int a13)
{
  void *v13;

  outlined consume of (offset: Int, element: MLDataValue)?(a13, a9, a10, 3);
  outlined consume of (offset: Int, element: MLDataValue)?(a13, a9, a10, 3);

}

uint64_t OUTLINED_FUNCTION_39_0()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_40_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_41_0()
{
  return outlined consume of [String : [Int]].Iterator._Variant();
}

uint64_t OUTLINED_FUNCTION_44_0()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t OUTLINED_FUNCTION_45_0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_46_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_47_0()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_48_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, a2);
}

uint64_t OUTLINED_FUNCTION_49_0()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_50_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_52_0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_56_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 1;
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_57_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

void OUTLINED_FUNCTION_58_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, a2);
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_62_0()
{
  unsigned __int8 v0;
  uint64_t v1;

  outlined consume of MLDataTable?(*(void **)(v1 - 176), v0);
}

void OUTLINED_FUNCTION_63_0(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  _UntypedColumn.valueAtIndex(index:)(v1, (uint64_t)va);
}

void OUTLINED_FUNCTION_64_0()
{
  unsigned __int8 v0;
  void *v1;

  outlined consume of MLDataTable?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_65_0()
{
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_66()
{
  return type metadata accessor for MLHandPoseClassifier.DataSource();
}

uint64_t OUTLINED_FUNCTION_67()
{
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_68()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_69()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t OUTLINED_FUNCTION_70()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_71(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return v2 + *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v1;
}

uint64_t OUTLINED_FUNCTION_72@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_75()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 264) + 8))(*(_QWORD *)(v0 - 272), *(_QWORD *)(v0 - 152));
}

uint64_t OUTLINED_FUNCTION_78()
{
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_79()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_80()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_81()
{
  return swift_release();
}

void OUTLINED_FUNCTION_82(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 136), a2);
}

_QWORD *OUTLINED_FUNCTION_83()
{
  return MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
}

uint64_t OUTLINED_FUNCTION_84()
{
  return swift_bridgeObjectRetain();
}

uint64_t *OUTLINED_FUNCTION_86(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

id OUTLINED_FUNCTION_87()
{
  void *v0;
  char v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;

  outlined copy of MLDataValue(v0, v4, v5);
  return outlined copy of MLDataValue(v3, v2, v1);
}

uint64_t OUTLINED_FUNCTION_89()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t OUTLINED_FUNCTION_90(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_91()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_92(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandPoseClassifier.ModelParameters(a1, v1);
}

uint64_t OUTLINED_FUNCTION_93()
{
  return type metadata accessor for DataFrame();
}

uint64_t OUTLINED_FUNCTION_94()
{
  return type metadata accessor for TaskPriority();
}

uint64_t OUTLINED_FUNCTION_95()
{
  return type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
}

void OUTLINED_FUNCTION_96(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_98(void *a1)
{
  char v1;

  outlined consume of Result<_DataTable, Error>(a1, v1);
}

uint64_t OUTLINED_FUNCTION_99()
{
  return swift_release();
}

_QWORD *OUTLINED_FUNCTION_100(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return specialized String.withCString<A>(_:)(a1, v1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_101()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_102(void *a1)
{
  outlined consume of Result<_DataTable, Error>(a1, 0);
}

id OUTLINED_FUNCTION_103()
{
  uint64_t v0;

  return static MLHandPoseClassifier.FeatureExtractor.extractFeatures(from:startingSessionId:)((uint64_t *)(v0 - 112), 0, (_QWORD *)(v0 - 96));
}

uint64_t OUTLINED_FUNCTION_104()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_105(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_106()
{
  return MLDataTable.size.getter();
}

uint64_t OUTLINED_FUNCTION_107()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_108()
{
  return CMLSequence.size.getter();
}

uint64_t OUTLINED_FUNCTION_109()
{
  return 0x696C702E6174656DLL;
}

uint64_t OUTLINED_FUNCTION_110()
{
  return swift_release_n();
}

void OUTLINED_FUNCTION_111()
{
  _StringGuts.grow(_:)(34);
}

void OUTLINED_FUNCTION_112()
{
  _StringGuts.grow(_:)(49);
}

uint64_t OUTLINED_FUNCTION_113()
{
  uint64_t v0;

  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_WORD *)(v0 + 16) = 256;
  return type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
}

uint64_t OUTLINED_FUNCTION_114()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_116(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

double OUTLINED_FUNCTION_117(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_118()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_119()
{
  return swift_unexpectedError();
}

uint64_t OUTLINED_FUNCTION_120()
{
  return swift_unexpectedError();
}

uint64_t OUTLINED_FUNCTION_121()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_122()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_123()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_130(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of MLClassifierMetrics(a1, a2);
}

void OUTLINED_FUNCTION_131(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with copy of MLTrainingSessionParameters(a1, v3, a3);
}

void OUTLINED_FUNCTION_133()
{
  CMLSequence.value(at:)(0);
}

uint64_t OUTLINED_FUNCTION_134()
{
  return type metadata accessor for MLHandActionClassifier();
}

uint64_t OUTLINED_FUNCTION_136()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_137()
{
  void *v0;
  char v1;
  uint64_t v2;

  outlined consume of Result<_DataTable, Error>(v0, v1 & 1);
  return v2;
}

uint64_t OUTLINED_FUNCTION_139()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_140()
{
  return CMLSequence.size.getter();
}

uint64_t OUTLINED_FUNCTION_141()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 160) + 8))(v0, *(_QWORD *)(v1 - 168));
}

uint64_t OUTLINED_FUNCTION_143()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_145(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_148()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_149()
{
  return swift_retain();
}

size_t OUTLINED_FUNCTION_150(_QWORD *a1)
{
  uint64_t v1;
  size_t result;

  result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / 16);
  return result;
}

unint64_t OUTLINED_FUNCTION_151()
{
  return lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
}

void OUTLINED_FUNCTION_152(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_153()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_156()
{
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_157()
{
  specialized RandomAccessCollection<>.distance(from:to:)();
}

void OUTLINED_FUNCTION_158()
{
  void *v0;

}

size_t OUTLINED_FUNCTION_159(_QWORD *a1)
{
  uint64_t v1;
  size_t result;

  result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_165(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

uint64_t OUTLINED_FUNCTION_166(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t *OUTLINED_FUNCTION_167(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

void OUTLINED_FUNCTION_168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 168) = v0;
  *(_QWORD *)(v3 - 272) = v2;
  *(_QWORD *)(v3 - 264) = v1;
}

void OUTLINED_FUNCTION_171(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, v4, 23, a4);
}

uint64_t OUTLINED_FUNCTION_173()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 152));
}

void OUTLINED_FUNCTION_174(uint64_t a1@<X8>)
{
  uint64_t v1;

}

void OUTLINED_FUNCTION_176()
{
  uint64_t v0;

  outlined consume of MLDataTable?(*(void **)(v0 - 208), *(_DWORD *)(v0 - 200));
}

void OUTLINED_FUNCTION_177(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of URL?(v3, a2, a3);
}

id OUTLINED_FUNCTION_178(void *a1)
{
  void *v1;

  return outlined copy of MLDataValue(a1, v1, 3);
}

BOOL OUTLINED_FUNCTION_179@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void OUTLINED_FUNCTION_180()
{
  uint64_t *v0;
  uint64_t v1;

  outlined destroy of URL?(v1, v0);
}

id OUTLINED_FUNCTION_181(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void OUTLINED_FUNCTION_182()
{
  char v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v1, v0);
}

void OUTLINED_FUNCTION_183(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;

  MLDataTable.subscript.getter(v2, v1, a1);
}

uint64_t OUTLINED_FUNCTION_184()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_185()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_186()
{
  return CMLColumn.size.getter();
}

uint64_t OUTLINED_FUNCTION_188()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_189()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_192()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_193()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)v0, *(_BYTE *)(v0 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_194()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_195()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_196()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)(v0 - 216), *(_DWORD *)(v0 - 144));
}

void OUTLINED_FUNCTION_198()
{
  uint64_t v0;

  CMLSequence.value(at:)(v0);
}

uint64_t OUTLINED_FUNCTION_199()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_200()
{
  return swift_bridgeObjectRetain();
}

size_t OUTLINED_FUNCTION_201(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

void OUTLINED_FUNCTION_202()
{
  Swift::String v0;

  v0._countAndFlagsBits = 39;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_203(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, a2);
}

void OUTLINED_FUNCTION_204()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 1);
}

uint64_t OUTLINED_FUNCTION_205()
{
  void *v0;
  void *v1;

  outlined copy of MLDataValue(v0, v1, 3);
  return CMLSequence.size.getter();
}

uint64_t OUTLINED_FUNCTION_206()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_207()
{
  return _convertNSErrorToError(_:)();
}

id OUTLINED_FUNCTION_209()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 1760));
}

uint64_t OUTLINED_FUNCTION_210()
{
  return specialized ContiguousArray._endMutation()();
}

void OUTLINED_FUNCTION_213()
{
  MLDataValue.init(_:)();
}

uint64_t OUTLINED_FUNCTION_214()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_216@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_217()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_219()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)v0, *(_BYTE *)(v0 + 8));
  return swift_bridgeObjectRelease();
}

_OWORD *OUTLINED_FUNCTION_220()
{
  uint64_t v0;

  return outlined init with take of Any((_OWORD *)(v0 - 176), (_OWORD *)(v0 - 112));
}

uint64_t OUTLINED_FUNCTION_221()
{
  return swift_release();
}

void OUTLINED_FUNCTION_223(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of MLTrainingSessionParameters(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_224()
{
  return type metadata accessor for MLTrainingSessionParameters();
}

uint64_t OUTLINED_FUNCTION_225()
{
  return type metadata accessor for _UntypedColumn();
}

_BYTE *initializeBufferWithCopyOfBuffer for MLBoostedTreeClassifier.ModelParameters.ValidationData(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (_BYTE *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for DataFrame();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
      v8 = *(void **)a2;
      v9 = a2[8];
      outlined copy of Result<_DataTable, Error>(v8, v9);
      *(_QWORD *)a1 = v8;
      a1[8] = v9;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v3 = type metadata accessor for DataFrame();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
  }
}

_BYTE *initializeWithCopy for MLBoostedTreeClassifier.ModelParameters.ValidationData(_BYTE *a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  char v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for DataFrame();
    (*(void (**)(_BYTE *, void **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    outlined copy of Result<_DataTable, Error>(v7, v8);
    *(_QWORD *)a1 = v7;
    a1[8] = v8;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for MLBoostedTreeClassifier.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  char v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = *a2;
      v8 = *((_BYTE *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((_BYTE *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLBoostedTreeClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLBoostedTreeClassifier.ModelParameters.ValidationData)
    return swift_getSingletonMetadata();
  return result;
}

void *initializeWithTake for MLBoostedTreeClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v6 = type metadata accessor for DataFrame();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for MLBoostedTreeClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for MLBoostedTreeClassifier.ModelParameters.ValidationData()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for MLBoostedTreeClassifier.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MLBoostedTreeClassifier.ModelParameters.ValidationData.asTable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v1 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v0, v5 - v4);
  v6 = (char *)&loc_21AE04CB8 + dword_21AE04DBC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21AE04CC8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_BYTE *)(v0 + 8) = v2;
}

void MLBoostedTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v10 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v1 = type metadata accessor for DataFrame.Slice();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v0, v8 - v7);
  v9 = (char *)sub_21AE04F38 + 4 * byte_21AFE7ED8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AE04F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v6 = *(_BYTE *)(v4 + 16);
  v7 = *(_BYTE *)(v4 + 17);
  *(_OWORD *)(v5 - 112) = *(_OWORD *)v4;
  *(_BYTE *)(v5 - 96) = v6;
  *(_BYTE *)(v5 - 95) = v7;
  DataFrame.randomSplit(strategy:)(v0, v3, v5 - 112);
  v9 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 152);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v10(v1, v3, v8);
  DataFrame.init(_:)();
  outlined init with copy of DataFrame.Slice?(v0, v2);
  if (__swift_getEnumTagSinglePayload(v2, 1, v8) == 1)
  {
    __swift_storeEnumTagSinglePayload(*(_QWORD *)(v5 - 144), 1, 1, *(_QWORD *)(v5 - 136));
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v2, v8);
    v10(*(_QWORD *)(v5 - 168), v1, v8);
    v12 = *(_QWORD *)(v5 - 144);
    DataFrame.init(_:)();
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v11(v1, v8);
    __swift_storeEnumTagSinglePayload(v12, 0, 1, *(_QWORD *)(v5 - 136));
  }
  v11(v3, v8);
  return outlined destroy of DataFrame.Slice?(v0);
}

uint64_t outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of DataFrame.Slice?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DataFrame.Slice?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v1 + 16))(*(_QWORD *)(v2 - 72), *(_QWORD *)(v2 - 120), v0);
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void BlobsFile.init(data:)(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v5;

  v4 = a2 >> 62;
  outlined copy of Data._Representation(a1, a2);
  static BlobsFile.isShort(_:)(a1, a2);
  if ((v5 & 1) != 0)
    __asm { BR              X9 }
  __asm { BR              X9 }
}

uint64_t sub_21AE052DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v15 - 152) = v11;
  *(_QWORD *)(v15 - 144) = v13 & 0xFFFFFFFFFFFFLL;
  *(_QWORD *)(v15 - 136) = v12;
  *(_QWORD *)(v15 - 128) = v6;
  *(_QWORD *)(v15 - 120) = v7;
  *(_QWORD *)(v15 - 112) = v8;
  *(_QWORD *)(v15 - 104) = v9;
  *(_QWORD *)(v15 - 96) = v10;
  if (HIDWORD(v11) == 2)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_21AE055B8
                                                                                         + *((int *)qword_21AE05818 + v14)))(a1, a2, a3, a4, a5, a6);
  v17 = lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError();
  swift_allocError(&type metadata for BlobsFileError, v17, 0, 0);
  *v18 = 0;
  v19 = swift_willThrow();
  v20 = OUTLINED_FUNCTION_0_4(v19);
  OUTLINED_FUNCTION_0_4(v20);
  return swift_bridgeObjectRelease(MEMORY[0x24BEE4AF8]);
}

void sub_21AE053C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = OUTLINED_FUNCTION_3_2(v26, v28 & 0xFFFFFFFFFFFFLL, BYTE6(v28), (uint64_t)&a26, a5, a6, (void (*)(uint64_t *__return_ptr, uint64_t *, char *, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readShortMetadata(from:header:));
  if (!v27)
  {
    v33 = v32;
    *(_QWORD *)(v31 - 72) = 0;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_1_2();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_0_4();
    OUTLINED_FUNCTION_0_4();
    swift_bridgeObjectRelease();
    *(_QWORD *)v29 = v26;
    *(_QWORD *)(v29 + 8) = v28;
    *(_DWORD *)(v29 + 16) = v30;
    *(_DWORD *)(v29 + 20) = 2;
    *(_QWORD *)(v29 + 24) = 0;
    *(_QWORD *)(v29 + 32) = 0;
    *(_QWORD *)(v29 + 40) = *(_QWORD *)(v31 - 72);
    *(_QWORD *)(v29 + 48) = 0;
    *(_QWORD *)(v29 + 56) = 0;
    *(_QWORD *)(v29 + 64) = 0;
    *(_QWORD *)(v29 + 72) = 0;
    *(_QWORD *)(v29 + 80) = v33;
    JUMPOUT(0x21AE05648);
  }
  OUTLINED_FUNCTION_0_4();
  JUMPOUT(0x21AE05638);
}

void sub_21AE055CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = v6;
  OUTLINED_FUNCTION_3_2(v7, v9 & 0xFFFFFFFFFFFFLL, BYTE6(v9), v10 - 152, a5, a6, (void (*)(uint64_t *__return_ptr, uint64_t *, char *, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readMetadata(from:header:));
  if (v8)
    JUMPOUT(0x21AE055FCLL);
  *(_QWORD *)(v10 - 72) = v11;
  JUMPOUT(0x21AE05778);
}

void sub_21AE0566C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 72) = v0;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_122();
  swift_retain();
  OUTLINED_FUNCTION_2_2(v5, v6, v3 & 0x3FFFFFFFFFFFFFFFLL, v4 - 152, v7, v8, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))closure #1 in static BlobsFile.readMetadata(from:header:));
  if (v2)
  {
    OUTLINED_FUNCTION_184();
    OUTLINED_FUNCTION_217();
    JUMPOUT(0x21AE05634);
  }
  OUTLINED_FUNCTION_184();
  OUTLINED_FUNCTION_217();
  JUMPOUT(0x21AE05774);
}

void static BlobsFile.isShort(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_21AE05890@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if (v1 != 40)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        LODWORD(v6) = v2 - v3;
        if (!__OFSUB__(v2, (_DWORD)v3))
        {
          v6 = (int)v6;
LABEL_9:
          if (v6 == 64)
            goto LABEL_19;
          if (!a1)
          {
LABEL_14:
            if (v1 >= 68)
            {
              if (v3 >> 32 >= (int)v3)
              {
                swift_retain();
                v5 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v3);
                outlined consume of Data._Representation(v3, v4);
                return v5 & 1;
              }
LABEL_26:
              __break(1u);
              JUMPOUT(0x21AE059FCLL);
            }
LABEL_19:
            v5 = 0;
            return v5 & 1;
          }
          if (a1 != 1)
          {
            v11 = *(_QWORD *)(v3 + 16);
            v10 = *(_QWORD *)(v3 + 24);
            v9 = __OFSUB__(v10, v11);
            v12 = v10 - v11;
            if (!v9)
            {
              if (v12 >= 68)
              {
                v14 = *(_QWORD *)(v3 + 16);
                swift_retain();
                swift_retain();
                v5 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v14);
                swift_release();
                swift_release();
                return v5 & 1;
              }
              goto LABEL_19;
            }
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
          LODWORD(v1) = v2 - v3;
          if (!__OFSUB__(v2, (_DWORD)v3))
          {
            v1 = (int)v1;
            goto LABEL_14;
          }
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        __break(1u);
      }
      else
      {
        v8 = *(_QWORD *)(v3 + 16);
        v7 = *(_QWORD *)(v3 + 24);
        v9 = __OFSUB__(v7, v8);
        v6 = v7 - v8;
        if (!v9)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_24;
    }
    v6 = v1;
    goto LABEL_9;
  }
  v5 = 1;
  return v5 & 1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type BlobsFileError and conformance BlobsFileError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError;
  if (!lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for BlobsFileError, &type metadata for BlobsFileError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError;
  if (!lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for BlobsFileError, &type metadata for BlobsFileError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlobsFileError and conformance BlobsFileError);
  }
  return result;
}

void closure #1 in static BlobsFile.readMetadata(from:header:)(int *a1@<X2>, uint64_t a2@<X4>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *a1;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  if (v4)
  {
    if (!__OFADD__(64, 64))
      __asm { BR              X10 }
    __break(1u);
    JUMPOUT(0x21AE05CC4);
  }
  *a3 = v5;
}

void closure #1 in static BlobsFile.readShortMetadata(from:header:)(int *a1@<X2>, uint64_t a2@<X4>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *a1;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  if (v4)
  {
    if (!__OFADD__(40, 56))
      __asm { BR              X10 }
    __break(1u);
    JUMPOUT(0x21AE05F10);
  }
  *a3 = v5;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSay8CreateML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC355LL4from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t *, char *, uint64_t, uint64_t, unint64_t))
{
  uint64_t v7;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v13 = a2;
  v14 = BYTE2(a2);
  v15 = BYTE3(a2);
  v16 = BYTE4(a2);
  v17 = BYTE5(a2);
  a7(&v11, &v12, (char *)&v12 + a3, a4, a5, a6);
  result = outlined consume of Data._Representation(a5, a6);
  if (!v7)
    return v11;
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = __DataStorage._bytes.getter();
  if (v2)
  {
    v3 = v2;
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
      __break(1u);
      goto LABEL_10;
    }
    v5 = v3 + a1 - result;
  }
  else
  {
    v5 = 0;
  }
  result = __DataStorage._length.getter();
  if (!v5)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  return *(_DWORD *)(v5 + 64) != -559038737 && *(_DWORD *)(v5 + 40) == -559038737;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = __DataStorage._bytes.getter();
  if (v4)
  {
    v5 = v4;
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
      __break(1u);
      goto LABEL_8;
    }
    v7 = v5 + a1 - result;
  }
  else
  {
    v7 = 0;
  }
  result = __DataStorage._length.getter();
  if (v7)
  {
    *(_QWORD *)a2 = *(_QWORD *)v7;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v7 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v7 + 24);
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v7;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = __DataStorage._bytes.getter();
  v15 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  v16 = __OFSUB__(a2, a1);
  v17 = a2 - a1;
  if (v16)
  {
    __break(1u);
    goto LABEL_15;
  }
  v18 = __DataStorage._length.getter();
  if (v18 >= v17)
    v19 = v17;
  else
    v19 = v18;
  v20 = v15 + v19;
  if (v15)
    v21 = v20;
  else
    v21 = 0;
  a7(&v22, v15, v21, a4, a5, a6);
  result = outlined consume of Data._Representation(a5, a6);
  if (!v7)
    return v22;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_1_2()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_2_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v7;
  unint64_t v8;

  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(a1, a2, a3, a4, v7, v8, a7);
}

uint64_t OUTLINED_FUNCTION_3_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t *, char *, uint64_t, uint64_t, unint64_t))
{
  uint64_t v7;
  unint64_t v8;

  return _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSay8CreateML12BlobMetadataVGTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_Say8g4ML12iJ6VG_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n03_s8g83ML9BlobsFileV12readMetadata33_51650C64338C8A92DE2EF0956A9CC3554from6headerSayAA04i6F0VG10lM26V_AA6HeaderVtKFZAJSWKXEfU_AF6HeaderV10Foundation0M0VAF9BlobsFileVXMtTf1ncn_nTm(a1, a2, a3, a4, v7, v8, a7);
}

uint64_t OUTLINED_FUNCTION_8_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(a1, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Si5label_So12MLMultiArrayC9keypointstsAE_pTg50108_s8CreateML22MLHandActionClassifierV36makeLabeledKeypointsSequenceFeatures4from11classLabelsSaySi5label_So12ef30C9keypointstGAA11MLDataTableV_T24SSGtKFZSiAG_AiJtSiKXEfU_0I2ML0yZ0VSaySSGTf1cn_n(uint64_t a1, void *a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v20;
  void *v21;
  _QWORD v22[2];
  uint64_t v23;

  v5 = v4;
  v6 = a2;
  v7 = a3 & 1;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v23 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v10 = v23;
    v11 = (void **)(a1 + 32);
    v18 = v6;
    while (1)
    {
      v12 = *v11++;
      v21 = v12;
      closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)(&v21, v6, v7, a4, &v20, v22);
      if (v5)
        break;
      v5 = 0;
      v14 = v22[0];
      v13 = v22[1];
      v23 = v10;
      v15 = *(_QWORD *)(v10 + 16);
      if (v15 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v10 = v23;
      }
      *(_QWORD *)(v10 + 16) = v15 + 1;
      v16 = v10 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v14;
      *(_QWORD *)(v16 + 40) = v13;
      --v8;
      v6 = v18;
      if (!v8)
      {
        outlined consume of Result<_DataTable, Error>(v18, v7);
        goto LABEL_10;
      }
    }
    swift_release();
    outlined consume of Result<_DataTable, Error>(v6, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of Result<_DataTable, Error>(a2, a3 & 1);
    v10 = MEMORY[0x24BEE4AF8];
LABEL_10:
    swift_bridgeObjectRelease();
  }
  return v10;
}

void static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)(uint64_t a1, _QWORD *a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;
  id v7;
  char v8;
  uint64_t v9;
  void *v10;
  char v11;
  id v12;
  char v13;

  v4 = *(_BYTE *)(a1 + 8);
  v12 = *(id *)a1;
  v3 = v12;
  v13 = v4;
  OUTLINED_FUNCTION_78_0();
  MLDataTable.subscript.getter(0x5F6E6F6973736573, (void *)0xEA00000000006469, (uint64_t)&v10);
  outlined consume of Result<_DataTable, Error>(v3, v4);
  v5 = v10;
  v6 = v11;
  MLUntypedColumn.dropDuplicates()(&v12);
  outlined consume of Result<_DataTable, Error>(v5, v6);
  v7 = v12;
  v8 = v13;
  if ((v13 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(v12, 0),
        _UntypedColumn.type.getter(&v10),
        outlined consume of Result<_DataTable, Error>(v7, 0),
        (_BYTE)v10))
  {
    outlined consume of Result<_DataTable, Error>(v7, v8);
    __break(1u);
  }
  else
  {
    v9 = specialized Array<A>.init(_:)(v7, 0);
    OUTLINED_FUNCTION_78_0();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Si5label_So12MLMultiArrayC9keypointstsAE_pTg50108_s8CreateML22MLHandActionClassifierV36makeLabeledKeypointsSequenceFeatures4from11classLabelsSaySi5label_So12ef30C9keypointstGAA11MLDataTableV_T24SSGtKFZSiAG_AiJtSiKXEfU_0I2ML0yZ0VSaySSGTf1cn_n(v9, v3, v4, a2);
    OUTLINED_FUNCTION_30();
  }
}

void closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)(void **a1@<X0>, void *a2@<X1>, char a3@<W2>, _QWORD *a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  void *v11;
  char v12;
  void *v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  _UNKNOWN **v45;
  uint64_t v46;
  char v47;
  id v48;
  char v49;
  id v50;
  char v51;
  uint64_t v52;

  v11 = *a1;
  v12 = a3 & 1;
  LOBYTE(v42) = a3 & 1;
  outlined copy of Result<_DataTable, Error>(a2, a3 & 1);
  MLDataTable.subscript.getter(0x5F6E6F6973736573, (void *)0xEA00000000006469, (uint64_t)&v48);
  outlined consume of Result<_DataTable, Error>(a2, v12);
  v13 = v48;
  v14 = v49;
  v46 = (uint64_t)v48;
  v47 = v49;
  v44 = MEMORY[0x24BEE1768];
  v45 = &protocol witness table for Int;
  v41 = v11;
  static MLUntypedColumn.== infix(_:_:)();
  outlined consume of Result<_DataTable, Error>(v13, v14);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v41);
  v41 = a2;
  LOBYTE(v42) = v12;
  v48 = v38;
  v49 = (char)v39;
  outlined copy of Result<_DataTable, Error>(a2, v12);
  MLDataTable.subscript.getter((uint64_t)&v48, (uint64_t)&v50);
  outlined consume of Result<_DataTable, Error>(v38, (char)v39);
  outlined consume of Result<_DataTable, Error>(a2, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_21AFE7F30;
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(NSNumber *)(v15 + 32) = NSNumber.init(integerLiteral:)(1);
  *(NSNumber *)(v15 + 40) = NSNumber.init(integerLiteral:)(3);
  *(NSNumber *)(v15 + 48) = NSNumber.init(integerLiteral:)(21);
  v41 = (void *)v15;
  specialized Array._endMutation()();
  static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:)((uint64_t)&v50, 0x746E696F7079656BLL, (void *)0xE900000000000073, (uint64_t)v41);
  if (v6)
  {
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v50, v51);
    *a5 = v6;
    return;
  }
  swift_bridgeObjectRelease();
  v16 = v50;
  v17 = v51;
  v41 = v50;
  LOBYTE(v42) = v51;
  MLDataTable.subscript.getter(0x6C6562616CLL, (void *)0xE500000000000000, (uint64_t)&v38);
  v18 = v38;
  if ((v39 & 1) != 0)
  {
    outlined consume of Result<_DataTable, Error>(v38, 1);
LABEL_15:
    v41 = 0;
    v42 = (id)0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v28 = swift_allocError();
    *(_QWORD *)v27 = 0xD000000000000023;
    *(_QWORD *)(v27 + 8) = 0x800000021AFF18D0;
LABEL_16:
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_BYTE *)(v27 + 48) = 0;
    swift_willThrow(0.0);
    outlined consume of Result<_DataTable, Error>(v50, v51);
    *a5 = v28;
    return;
  }
  v36 = a6;
  swift_retain();
  _UntypedColumn.valueAtIndex(index:)(0, (uint64_t)&v41);
  outlined consume of Result<_DataTable, Error>(v18, 0);
  outlined consume of Result<_DataTable, Error>(v18, 0);
  v19 = v41;
  v20 = v42;
  if (v43 != 2)
  {
    outlined consume of MLDataValue(v41, v42, v43);
    goto LABEL_15;
  }
  specialized Collection<>.firstIndex(of:)((uint64_t)v41, (uint64_t)v42, a4);
  if ((v22 & 1) != 0)
  {
    v41 = 0;
    v42 = (id)0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v41 = (void *)0xD000000000000017;
    v42 = (id)0x800000021AFF1900;
    v29._countAndFlagsBits = (uint64_t)v19;
    v29._object = v20;
    String.append(_:)(v29);
    outlined consume of MLDataValue(v19, v20, 2);
    v30._countAndFlagsBits = 544106784;
    v30._object = (void *)0xE400000000000000;
    String.append(_:)(v30);
    v31._countAndFlagsBits = MEMORY[0x22075AAA4](a4, MEMORY[0x24BEE0D00]);
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32 = v41;
    v33 = v42;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v28 = swift_allocError();
    *(_QWORD *)v27 = v32;
    *(_QWORD *)(v27 + 8) = v33;
    goto LABEL_16;
  }
  v35 = v21;
  outlined consume of MLDataValue(v19, v20, 2);
  v48 = v16;
  v49 = v17;
  v41 = v16;
  LOBYTE(v42) = v17;
  outlined copy of Result<_DataTable, Error>(v16, v17);
  MLDataTable.size.getter();
  v23 = specialized RandomAccessCollection<>.distance(from:to:)();
  if (v23)
  {
    v24 = v23;
    v46 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v24 & 0x8000000000000000) == 0)
    {
      v25 = 0;
      while (v24 != v25)
      {
        MLDataTable.Rows.subscript.getter(v25, &v41);
        v38 = v41;
        v39 = v42;
        v40 = v43;
        closure #1 in closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v38, &v37, &v52);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v41 = v16;
        LOBYTE(v42) = v17;
        if (v25 >= MLDataTable.size.getter())
          goto LABEL_21;
        if (v24 == ++v25)
        {
          v26 = v46;
          outlined consume of Result<_DataTable, Error>(v16, v17);
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    outlined consume of Result<_DataTable, Error>(v16, v17);
    v26 = MEMORY[0x24BEE4AF8];
LABEL_19:
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    v34 = @nonobjc MLMultiArray.__allocating_init(concatenating:axis:dataType:)(v26, 0, 65600);
    outlined consume of Result<_DataTable, Error>(v16, v17);
    *v36 = v35;
    v36[1] = v34;
  }
}

void specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = a3[2];
  if (v3)
  {
    v7 = a3[4] == a1 && a3[5] == a2;
    if (!v7 && (OUTLINED_FUNCTION_48_1() & 1) == 0)
    {
      v8 = 0;
      v9 = a3 + 7;
      v10 = 1;
      do
      {
        if (v3 == v10)
          break;
        ++v8;
        if (*(v9 - 1) == a1 && *v9 == a2)
          break;
        ++v10;
        v9 += 2;
      }
      while ((OUTLINED_FUNCTION_48_1() & 1) == 0);
    }
  }
  OUTLINED_FUNCTION_8_0();
}

void specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v7 = 4 * v4;
    while (String.subscript.getter() != a1 || v8 != a2)
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0 || v7 == (unint64_t)String.index(after:)() >> 14)
        goto LABEL_14;
    }
    OUTLINED_FUNCTION_30();
  }
LABEL_14:
  OUTLINED_FUNCTION_8_0();
}

uint64_t closure #1 in closure #1 in static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  char v16;

  v6 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_8;
  v7 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E696F7079656BLL, 0xE900000000000073);
  if ((v9 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_8:
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v12 = swift_allocError();
    *(_QWORD *)v13 = 0xD00000000000002BLL;
    *(_QWORD *)(v13 + 8) = 0x800000021AFF1920;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_BYTE *)(v13 + 48) = 0;
    result = swift_willThrow(0.0);
    *a2 = v12;
    return result;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v8);
  swift_retain_n();
  CMLSequence.value(at:)(v10);
  if (!v7)
  {
    swift_release();
    MLDataValue.init(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    result = (uint64_t)v14;
    if (v16 == 5)
    {
      *a3 = v14;
      return result;
    }
    outlined consume of MLDataValue(v14, v15, v16);
    goto LABEL_8;
  }
  swift_release();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

id @nonobjc MLMultiArray.__allocating_init(concatenating:axis:dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa;
  id v6;

  OUTLINED_FUNCTION_27_1(a1, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  isa = Array._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_101();
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_multiArrayByConcatenatingMultiArrays_alongAxis_dataType_, isa, a2, a3);

  return v6;
}

void static MLHandActionClassifier.prepareDataset(classLabels:trainingFeatures:validationFeatures:parameters:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, _QWORD, uint64_t);
  void *v34;
  int v36;
  void *v38;
  char v39;
  uint64_t v40;

  v8 = type metadata accessor for LearningPhase();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_49();
  v12 = v11 - v10;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_49();
  v17 = v16 - v15;
  v18 = *(void **)a4;
  LOBYTE(v16) = *(_BYTE *)(a4 + 8);
  v19 = *(void **)a5;
  v36 = *(unsigned __int8 *)(a5 + 8);
  v38 = v18;
  v39 = v16;
  v20 = a3;
  v21 = v40;
  static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v38, a3);
  if (!v21)
  {
    v23 = v22;
    v40 = 0;
    v34 = v19;
    v24 = v20;
    v25 = v20[2];
    v33 = *(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104);
    v33(v12, *MEMORY[0x24BE6B9A0], v8);
    OUTLINED_FUNCTION_62_1(v23, v25, v17);
    v26 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v26(v12, v8);
    OUTLINED_FUNCTION_30();
    if (v36 != 255)
    {
      v32 = v25;
      v38 = v34;
      v39 = v36 & 1;
      outlined copy of Result<_DataTable, Error>(v34, v36 & 1);
      if (MLDataTable.size.getter())
      {
        v38 = v34;
        v39 = v36 & 1;
        v27 = v40;
        static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v38, v24);
        v40 = v27;
        if (v27)
        {
          (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v13);
          OUTLINED_FUNCTION_43_1();
          return;
        }
        v31 = v28;
        v33(v12, *MEMORY[0x24BE6B9A8], v8);
        v30 = a2;
        OUTLINED_FUNCTION_62_1(v31, v32, a2);
        OUTLINED_FUNCTION_43_1();
        v26(v12, v8);
        OUTLINED_FUNCTION_30();
        v29 = 0;
        goto LABEL_9;
      }
      OUTLINED_FUNCTION_43_1();
    }
    v29 = 1;
    v30 = a2;
LABEL_9:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(a1, v17, v13);
    __swift_storeEnumTagSinglePayload(v30, v29, 1, v13);
  }
}

uint64_t specialized static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v27 = a4;
  v32 = a2;
  v33 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>.PrefetchMode);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_49();
  v28 = v9 - v8;
  v10 = OUTLINED_FUNCTION_66_0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = OUTLINED_FUNCTION_64_1();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v26 - v20;
  v31 = *(_QWORD *)(a3 + *(int *)(v19 + 20));
  v36 = 0;
  v37 = a1;
  v34 = 0u;
  v35 = 0u;
  outlined init with copy of MLHandActionClassifier.ModelParameters(a3, (uint64_t)&v26 - v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v27, v10);
  outlined init with take of MLHandActionClassifier.ModelParameters((uint64_t)v21, (uint64_t)v18);
  v22 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v23 = (v12 + *(unsigned __int8 *)(v15 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v24 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v24 + v22, v13, v10);
  outlined init with take of MLHandActionClassifier.ModelParameters((uint64_t)v18, v24 + v23);
  *(_QWORD *)(v24 + ((v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8)) = v32;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v28, *MEMORY[0x24BE6C098], v30);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: Int, keypoints: MLMultiArray)]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type [(label: Int, keypoints: MLMultiArray)] and conformance [A], &demangling cache variable for type metadata for [(label: Int, keypoints: MLMultiArray)], MEMORY[0x24BEE12C8]);
  lazy protocol witness table accessor for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>();
  lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance DataSample<A, B>, &demangling cache variable for type metadata for DataSample<Tensor, Tensor>, MEMORY[0x24BE6B818]);
  return Dataset.init(samples:batchSize:batchSampler:dropsLastPartialBatch:prefetchMode:transform:)();
}

uint64_t closure #1 in static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t result;
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;

  *(_QWORD *)&v61 = a3;
  v59 = a2;
  v56 = a4;
  v5 = type metadata accessor for ScalarType();
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v55 = (char *)v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TensorShape();
  MEMORY[0x24BDAC7A8](v7);
  v52[1] = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Tensor();
  v58 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v57 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v52 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v62 = (char *)v52 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v52 - v20;
  v22 = type metadata accessor for LearningPhase();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *a1;
  v27 = (void *)a1[1];
  v60 = v26;
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x24BE6B9A0], v22);
  lazy protocol witness table accessor for type LearningPhase and conformance LearningPhase();
  v28 = v27;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v30 = v63;
  v29 = v64;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  if (v29 == v30)
  {
    v31 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    v32 = v59;
    v64 = *(_QWORD *)(v59 + *(int *)(v31 + 32));
    v33 = static MLHandActionClassifier.dataAugmentation(_:options:)(v28, &v64);

    v28 = v33;
    v34 = v32;
  }
  else
  {
    v34 = v59;
  }
  v35 = *(_QWORD *)(v34 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 28));
  v36 = objc_msgSend(v28, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v37 & 0xC000000000000001) == 0, v37);
  if ((v37 & 0xC000000000000001) != 0)
    v38 = (id)MEMORY[0x22075AF48](0, v37);
  else
    v38 = *(id *)(v37 + 32);
  v39 = v38;
  swift_bridgeObjectRelease();
  v40 = Int.init(truncating:)();

  v41 = MLMultiArray.cast(to:)((id)0x10020);
  v42 = type metadata accessor for ComputeDevice();
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v42);
  Tensor.init(_:device:)(v41, (uint64_t)v11);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v42);
  v43 = v62;
  Tensor.init(oneHotAtIndex:depth:onValue:offValue:on:)();
  if (v40 < v35)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_21AFE7F40;
    if (!__OFSUB__(v35, v40))
    {
      *(_QWORD *)(v44 + 32) = v35 - v40;
      *(_OWORD *)(v44 + 40) = xmmword_21AFE7F50;
      MEMORY[0x220758C74]();
      (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v55, *MEMORY[0x24BE6B8B8], v54);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v42);
      Tensor.init(zeros:scalarType:on:)();
      v45 = v57;
      Tensor.concatenated(with:alongAxis:)();
      v46 = v58;
      v47 = *(void (**)(char *, uint64_t))(v58 + 8);
      v47(v17, v12);
      v47(v21, v12);
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v21, v45, v12);
LABEL_14:
      v49 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
      v49(v17, v21, v12);
      v49(v45, v43, v12);
      DataSample.init(features:labels:)();

      v50 = *(void (**)(char *, uint64_t))(v46 + 8);
      v50(v43, v12);
      return ((uint64_t (*)(char *, uint64_t))v50)(v21, v12);
    }
    __break(1u);
    goto LABEL_17;
  }
  v45 = v57;
  v46 = v58;
  if (v35 >= v40)
    goto LABEL_14;
  v48 = v40 - v35;
  if (__OFSUB__(v40, v35))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((v48 & 0x8000000000000000) == 0)
  {
    if (v48)
      specialized RandomNumberGenerator.next<A>(upperBound:)(v48);
    goto LABEL_19;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);

  result = swift_unexpectedError();
  __break(1u);
  return result;
}

id static MLHandActionClassifier.dataAugmentation(_:options:)(void *a1, uint64_t *a2)
{
  id result;
  uint64_t v4;

  v4 = *a2;
  switch(static MLHandActionClassifier.chooseAugmentationOption(_:)(&v4))
  {
    case 1:
      specialized RandomNumberGenerator.next<A>(upperBound:)(4);
    case 2:
      result = (id)static MLHandActionClassifier.randomMove(_:)(a1);
      break;
    case 3:
      static MLHandActionClassifier.randomShift(_:)();
    case 4:
      static MLHandActionClassifier.randomScale(_:)();
    case 5:
      static MLHandActionClassifier.timeInterpolate(_:)();
    case 6:
      static MLHandActionClassifier.frameDrop(_:)();
    default:
      result = a1;
      break;
  }
  return result;
}

uint64_t static MLHandActionClassifier.chooseAugmentationOption(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  v3 = inited;
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = 0;
  if ((v1 & 1) != 0)
  {
    v4 = 2;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, 2, 1, inited);
    v3 = inited;
    *(_QWORD *)(inited + 16) = 2;
    *(_QWORD *)(inited + 40) = 1;
    if ((v1 & 2) == 0)
      goto LABEL_8;
  }
  else
  {
    v4 = 1;
    if ((v1 & 2) == 0)
      goto LABEL_8;
  }
  v5 = *(_QWORD *)(v3 + 24);
  if (v4 >= v5 >> 1)
  {
    OUTLINED_FUNCTION_1_3(v5);
    v3 = v20;
  }
  OUTLINED_FUNCTION_71_0();
  *(_QWORD *)(v6 + 32) = 2;
LABEL_8:
  if ((v1 & 4) != 0)
  {
    OUTLINED_FUNCTION_50_1();
    if (v8)
    {
      OUTLINED_FUNCTION_1_3(v7);
      v3 = v21;
    }
    OUTLINED_FUNCTION_71_0();
    *(_QWORD *)(v9 + 32) = 3;
    if ((v1 & 8) == 0)
    {
LABEL_10:
      if ((v1 & 0x10) == 0)
        goto LABEL_11;
      goto LABEL_19;
    }
  }
  else if ((v1 & 8) == 0)
  {
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_50_1();
  if (v8)
  {
    OUTLINED_FUNCTION_1_3(v10);
    v3 = v22;
  }
  OUTLINED_FUNCTION_71_0();
  *(_QWORD *)(v11 + 32) = 4;
  if ((v1 & 0x10) == 0)
  {
LABEL_11:
    if ((v1 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_22;
  }
LABEL_19:
  OUTLINED_FUNCTION_50_1();
  if (v8)
  {
    OUTLINED_FUNCTION_1_3(v12);
    v3 = v23;
  }
  OUTLINED_FUNCTION_71_0();
  *(_QWORD *)(v13 + 32) = 5;
  if ((v1 & 0x20) != 0)
  {
LABEL_22:
    v15 = *(_QWORD *)(v3 + 16);
    v14 = *(_QWORD *)(v3 + 24);
    if (v15 >= v14 >> 1)
    {
      OUTLINED_FUNCTION_1_3(v14);
      v3 = inited;
    }
    *(_QWORD *)(v3 + 16) = v15 + 1;
    *(_QWORD *)(v3 + 8 * v15 + 32) = 6;
  }
LABEL_25:
  v16 = specialized Collection.randomElement<A>(using:)(inited, v3);
  v18 = v17;
  OUTLINED_FUNCTION_123();
  if ((v18 & 1) != 0)
    return 0;
  else
    return v16;
}

uint64_t static MLHandActionClassifier.horizontalFlip(_:caseSelected:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  id v63;
  uint64_t v64;
  id v66;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F60;
  *(_QWORD *)(inited + 32) = &outlined read-only object #0 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(_QWORD *)(inited + 40) = &outlined read-only object #1 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(_QWORD *)(inited + 48) = &outlined read-only object #2 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(_QWORD *)(inited + 56) = &outlined read-only object #3 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(_QWORD *)(inited + 64) = &outlined read-only object #4 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(_QWORD *)(inited + 72) = &outlined read-only object #5 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(_QWORD *)(inited + 80) = &outlined read-only object #6 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  *(_QWORD *)(inited + 88) = &outlined read-only object #7 of static MLHandActionClassifier.horizontalFlip(_:caseSelected:);
  v5 = OUTLINED_FUNCTION_181(inited, sel_shape);
  OUTLINED_FUNCTION_27_1((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_33_1();
  OUTLINED_FUNCTION_11_2();
  if ((v2 & 0xC000000000000001) != 0)
    goto LABEL_80;
  OUTLINED_FUNCTION_38_1();
  v6 = OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_30_1(v6, sel_integerValue);
  OUTLINED_FUNCTION_60_1();
  v8 = OUTLINED_FUNCTION_181(v7, sel_shape);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_33_1();
  OUTLINED_FUNCTION_19_1();
  if (v8)
    OUTLINED_FUNCTION_23_1();
  v9 = (uint64_t)OUTLINED_FUNCTION_59_1();
  v10 = OUTLINED_FUNCTION_30();
  v11 = (unint64_t)OUTLINED_FUNCTION_30_1(v10, sel_integerValue);

  v13 = OUTLINED_FUNCTION_181(v12, sel_shape);
  OUTLINED_FUNCTION_13_2();
  OUTLINED_FUNCTION_26_1();
  v14 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  v15 = OUTLINED_FUNCTION_16_2();
  if (v9)
    goto LABEL_84;
  v16 = v15;
  v17 = UnsafeMutableBufferPointer.init(_:)();
  v19 = (uint64_t)v18;
  v20 = a1;
  v21 = UnsafeMutableBufferPointer.init(_:)();
  if (v22 && v19)
  {
    if (v22 >= v19)
      v22 = v19;
    v21 = (uint64_t)specialized UnsafeMutablePointer.initialize(from:count:)(v21, v22);
  }
  if (a2 == 3)
    goto LABEL_59;
  v23 = v64;
  if (v64 < 0)
    goto LABEL_83;
  if (!v64)
  {
LABEL_59:
    OUTLINED_FUNCTION_12_0();
    return (uint64_t)v16;
  }
  v63 = v16;
  v24 = 0;
  v66 = (id)v11;
  while (1)
  {
    if (v24 == v23)
      goto LABEL_78;
    if (a2 != 1)
      break;
LABEL_31:
    if (*(_QWORD *)(inited + 16) < 8uLL)
      goto LABEL_79;
    swift_bridgeObjectRetain();
    for (i = 32; i != 96; i += 8)
    {
      v9 = *(_QWORD *)(inited + i);
      v39 = swift_bridgeObjectRetain();
      v40 = OUTLINED_FUNCTION_181(v39, sel_strides);
      OUTLINED_FUNCTION_13_2();
      OUTLINED_FUNCTION_29_1();
      if ((v19 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_65_1();
      if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_62;
      v41 = *(id *)(v19 + 32);
      v42 = OUTLINED_FUNCTION_42_1();
      OUTLINED_FUNCTION_34_1(v42, sel_integerValue);
      OUTLINED_FUNCTION_29_1();
      v44 = v24 * v19;
      if ((unsigned __int128)(v24 * (__int128)v19) >> 64 != (v24 * v19) >> 63)
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        OUTLINED_FUNCTION_20_1();
      }
      if (!*(_QWORD *)(v9 + 16))
        goto LABEL_63;
      v45 = *(_QWORD *)(v9 + 32);
      v46 = OUTLINED_FUNCTION_181(v43, sel_strides);
      OUTLINED_FUNCTION_13_2();
      OUTLINED_FUNCTION_29_1();
      if ((v19 & 0xC000000000000001) != 0)
      {
        MEMORY[0x22075AF48](2, v19);
      }
      else
      {
        if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
          goto LABEL_65;
        v47 = *(id *)(v19 + 48);
      }
      v48 = OUTLINED_FUNCTION_42_1();
      OUTLINED_FUNCTION_34_1(v48, sel_integerValue);
      OUTLINED_FUNCTION_29_1();
      v50 = v45 * v19;
      if ((unsigned __int128)(v45 * (__int128)v19) >> 64 != (v45 * v19) >> 63)
        goto LABEL_64;
      v36 = __OFADD__(v44, v50);
      v51 = v44 + v50;
      if (v36)
        goto LABEL_66;
      v52 = OUTLINED_FUNCTION_181(v49, sel_strides);
      OUTLINED_FUNCTION_13_2();
      OUTLINED_FUNCTION_29_1();
      if ((v19 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_65_1();
      if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_68;
      v53 = *(id *)(v19 + 32);
      v54 = OUTLINED_FUNCTION_42_1();
      OUTLINED_FUNCTION_34_1(v54, sel_integerValue);
      OUTLINED_FUNCTION_29_1();
      v55 = v24 * v19;
      if ((unsigned __int128)(v24 * (__int128)v19) >> 64 != (v24 * v19) >> 63)
        goto LABEL_67;
      if (*(_QWORD *)(v9 + 16) < 2uLL)
        goto LABEL_69;
      v19 = *(_QWORD *)(v9 + 40);
      v56 = OUTLINED_FUNCTION_15_0();
      v57 = OUTLINED_FUNCTION_181(v56, sel_strides);
      OUTLINED_FUNCTION_13_2();
      OUTLINED_FUNCTION_26_1();
      if ((v9 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_12_2();
      OUTLINED_FUNCTION_17_2();
      if (!v33)
        goto LABEL_71;
      OUTLINED_FUNCTION_36_1();
      v58 = OUTLINED_FUNCTION_15_0();
      OUTLINED_FUNCTION_34_1(v58, sel_integerValue);
      OUTLINED_FUNCTION_26_1();
      v59 = v19 * v9;
      if ((unsigned __int128)(v19 * (__int128)v9) >> 64 != (v19 * v9) >> 63)
        goto LABEL_70;
      v36 = __OFADD__(v55, v59);
      v60 = v55 + v59;
      if (v36)
        goto LABEL_72;
      v61 = *(_QWORD *)(v17 + 8 * v51);
      *(_QWORD *)(v17 + 8 * v51) = *(_QWORD *)(v17 + 8 * v60);
      *(_QWORD *)(v17 + 8 * v60) = v61;
    }
    v21 = OUTLINED_FUNCTION_12_0();
    v11 = (unint64_t)v66;
LABEL_57:
    ++v24;
    v23 = v64;
    if (v24 == v64)
    {
      OUTLINED_FUNCTION_12_0();
      return (uint64_t)v63;
    }
  }
  if ((v11 & 0x8000000000000000) == 0)
  {
    if (v11)
    {
      v25 = 0;
      do
      {
        v26 = OUTLINED_FUNCTION_181(v21, sel_strides);
        OUTLINED_FUNCTION_13_2();
        OUTLINED_FUNCTION_26_1();
        if ((v9 & 0xC000000000000001) != 0)
          OUTLINED_FUNCTION_12_2();
        OUTLINED_FUNCTION_55_1();
        if (!v27)
          goto LABEL_74;
        v28 = OUTLINED_FUNCTION_44_1();
        OUTLINED_FUNCTION_15_0();
        v29 = (uint64_t)objc_msgSend(v28, sel_integerValue);

        v31 = v24 * v29;
        if ((unsigned __int128)(v24 * (__int128)v29) >> 64 != (v24 * v29) >> 63)
          goto LABEL_73;
        v32 = OUTLINED_FUNCTION_181(v30, sel_strides);
        OUTLINED_FUNCTION_13_2();
        OUTLINED_FUNCTION_26_1();
        if ((v9 & 0xC000000000000001) != 0)
          OUTLINED_FUNCTION_12_2();
        OUTLINED_FUNCTION_17_2();
        if (!v33)
          goto LABEL_76;
        v19 = (uint64_t)OUTLINED_FUNCTION_36_1();
        OUTLINED_FUNCTION_15_0();
        v34 = (uint64_t)objc_msgSend((id)v19, sel_integerValue);

        v35 = v25 * v34;
        if ((unsigned __int128)(v25 * (__int128)v34) >> 64 != (v25 * v34) >> 63)
          goto LABEL_75;
        v36 = __OFADD__(v31, v35);
        v37 = v31 + v35;
        if (v36)
          goto LABEL_77;
        ++v25;
        *(double *)(v17 + 8 * v37) = 1.0 - *(double *)(v17 + 8 * v37);
        v11 = (unint64_t)v66;
      }
      while (v66 != (id)v25);
    }
    if (!a2)
      goto LABEL_57;
    goto LABEL_31;
  }
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  OUTLINED_FUNCTION_0_5();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t static MLHandActionClassifier.randomMove(_:)(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  uint64_t v25;
  unint64_t v26;
  float *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  float v47;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  unint64_t v82;
  id v83;
  uint64_t v84;
  int v85;
  uint64_t result;
  uint64_t v87;
  id v88;
  float *v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t inited;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;

  v2 = a1;
  v3 = objc_msgSend(a1, sel_shape);
  OUTLINED_FUNCTION_27_1((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v4 & 0xC000000000000001) == 0, v4);
  if ((v4 & 0xC000000000000001) != 0)
    MEMORY[0x22075AF48](0, v4);
  else
    v5 = *(id *)(v4 + 32);
  v6 = OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_34_1(v6, sel_integerValue);
  OUTLINED_FUNCTION_29_1();
  v8 = OUTLINED_FUNCTION_7_2(v7, sel_shape);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v9 & 0xC000000000000001) == 0, v9);
  if ((v9 & 0xC000000000000001) != 0)
    v10 = (id)MEMORY[0x22075AF48](2, v9);
  else
    v10 = *(id *)(v9 + 48);
  v11 = v10;
  v12 = OUTLINED_FUNCTION_123();
  v88 = OUTLINED_FUNCTION_34_1(v12, sel_integerValue);

  specialized MutableCollection<>.shuffle<A>(using:)();
  specialized MutableCollection.subscript.getter(0, 1, (uint64_t)&outlined read-only object #0 of static MLHandActionClassifier.randomMove(_:));
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_release();
  v99 = &outlined read-only object #1 of static MLHandActionClassifier.randomMove(_:);
  specialized MutableCollection<>.shuffle<A>(using:)();
  OUTLINED_FUNCTION_18_1();
  v20 = v19;
  v96 = v21;
  v23 = v22;
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_57_1();
  OUTLINED_FUNCTION_18_1();
  v90 = v24;
  v92 = v25;
  v93 = v26;
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_57_1();
  OUTLINED_FUNCTION_18_1();
  v89 = v27;
  v91 = v28;
  v30 = v29;
  OUTLINED_FUNCTION_4_2();
  v95 = v2;
  v87 = v1;
  if (v1 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v31 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v31 + 16) = xmmword_21AFE7DA0;
    if (v16 > 0 || v18 < 2)
    {
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    *(float *)(v31 + 32) = (float)(*v14 * 3.1416) / 180.0;
    v33 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v33 + 16) = xmmword_21AFE7DA0;
    if (v96 > 0 || v23 < 2)
      goto LABEL_74;
    v35 = v33;
    *(float *)(v33 + 32) = *v20;
    v36 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v36 + 16) = xmmword_21AFE7DA0;
    if (v92 > 0 || v93 < 2)
      goto LABEL_75;
    *(float *)(v36 + 32) = *v90;
    v99 = (_QWORD *)v36;
    v38 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v38 + 16) = xmmword_21AFE7DA0;
    if (v91 > 0 || v30 < 2)
      goto LABEL_78;
    *(float *)(v38 + 32) = *v89;
LABEL_59:
    v98 = v38;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[[Float]]>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>);
    v53 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v53 + 16) = xmmword_21AFE7F70;
    v54 = OUTLINED_FUNCTION_45_1(v53, MEMORY[0x24BDADBE8]);
    OUTLINED_FUNCTION_189();
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n(v54, v35);
    v56 = v55;
    OUTLINED_FUNCTION_30();
    v57 = OUTLINED_FUNCTION_80();
    *(_QWORD *)(v53 + 32) = v56;
    v58 = OUTLINED_FUNCTION_45_1(v57, MEMORY[0x24BDAFE20]);
    v59 = *(_QWORD *)(v58 + 16);
    if (v59)
    {
      v97 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_75_0();
      v60 = 0;
      v61 = *(_QWORD *)(v97 + 16);
      do
      {
        v62 = *(float *)(v58 + 4 * v60 + 32);
        if (v61 >= *(_QWORD *)(v97 + 24) >> 1)
          OUTLINED_FUNCTION_80_0();
        ++v60;
        *(_QWORD *)(v97 + 16) = v61 + 1;
        *(float *)(v97 + 4 * v61++ + 32) = -v62;
      }
      while (v59 != v60);
      OUTLINED_FUNCTION_12_0();
      v2 = v95;
      v1 = v87;
    }
    else
    {
      OUTLINED_FUNCTION_12_0();
    }
    OUTLINED_FUNCTION_189();
    v63 = OUTLINED_FUNCTION_52_1();
    OUTLINED_FUNCTION_81_0(v63);
    v65 = v64;
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_63_1();
    *(_QWORD *)(v53 + 40) = v65;
    *(_QWORD *)(inited + 32) = v53;
    v66 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v66 + 16) = xmmword_21AFE7F70;
    v67 = OUTLINED_FUNCTION_45_1(v66, MEMORY[0x24BDAFE20]);
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_81_0(v67);
    v69 = v68;
    OUTLINED_FUNCTION_30();
    v70 = OUTLINED_FUNCTION_80();
    *(_QWORD *)(v66 + 32) = v69;
    OUTLINED_FUNCTION_45_1(v70, MEMORY[0x24BDADBE8]);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_189();
    v71 = OUTLINED_FUNCTION_52_1();
    OUTLINED_FUNCTION_81_0(v71);
    v73 = v72;
    OUTLINED_FUNCTION_63_1();
    v74 = OUTLINED_FUNCTION_63_1();
    *(_QWORD *)(v66 + 40) = v73;
    *(_QWORD *)(inited + 40) = v66;
    v75 = OUTLINED_FUNCTION_7_2(v74, sel_shape);
    v76 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v77 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
    v78 = objc_retainAutorelease(@nonobjc MLMultiArray.init(shape:dataType:)(v76, 65600));
    v79 = objc_msgSend(v78, sel_dataPointer);
    v80 = objc_retainAutorelease(v2);
    v81 = objc_msgSend(v80, sel_dataPointer);
    v82 = (unint64_t)OUTLINED_FUNCTION_31_1((uint64_t)v81, sel_count);
    if ((v82 - 0x1000000000000000) >> 61 == 7)
    {
      memcpy(v79, v81, 8 * v82);
      v83 = v78;
      v84 = UnsafeMutableBufferPointer.init(_:)();
      closure #3 in static MLHandActionClassifier.randomMove(_:)(v84, v85, v1, (uint64_t)v88, v80, (_QWORD *)inited, (uint64_t)&v99, (uint64_t)&v98);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v83;
    }
    __break(1u);
    goto LABEL_71;
  }
  if (v16 > 0 || v18 < 2)
    goto LABEL_72;
  if (v18 < 4)
  {
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  OUTLINED_FUNCTION_47_1(*v14, v14[1]);
  v42 = v41;
  v43 = *(_QWORD *)(v41 + 16);
  if (v43)
  {
    v99 = (_QWORD *)MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_75_0();
    v44 = 0;
    v45 = v99;
    v46 = v99[2];
    do
    {
      v47 = *(float *)(v42 + 4 * v44 + 32);
      v99 = v45;
      if (v46 >= v45[3] >> 1)
      {
        OUTLINED_FUNCTION_80_0();
        v45 = v99;
      }
      ++v44;
      v45[2] = v46 + 1;
      *((float *)v45 + v46++ + 8) = (float)(v47 * 3.1416) / 180.0;
    }
    while (v43 != v44);
    OUTLINED_FUNCTION_15_0();
    v2 = v95;
  }
  else
  {
    OUTLINED_FUNCTION_15_0();
  }
  if (v96 > 0 || v23 < 2)
    goto LABEL_76;
  if (v23 < 4)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  OUTLINED_FUNCTION_47_1(*v20, v20[1]);
  if (v92 > 0 || v93 < 2)
    goto LABEL_79;
  if (v93 < 4)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v35 = v49;
  OUTLINED_FUNCTION_47_1(*v90, v90[1]);
  v99 = v51;
  if (v91 > 0 || v30 < 2)
    goto LABEL_81;
  if (v30 >= 4)
  {
    OUTLINED_FUNCTION_47_1(*v89, v89[1]);
    goto LABEL_59;
  }
LABEL_82:
  __break(1u);
  OUTLINED_FUNCTION_0_5();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void static MLHandActionClassifier.randomShift(_:)()
{
  OUTLINED_FUNCTION_54_1();
  OUTLINED_FUNCTION_74_0();
}

void static MLHandActionClassifier.randomScale(_:)()
{
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.8, 1.2);
}

void static MLHandActionClassifier.timeInterpolate(_:)()
{
  OUTLINED_FUNCTION_54_1();
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.0, 0.2);
}

void sub_21AE09288()
{
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.0, 1.0);
}

void sub_21AE09298(uint64_t a1)
{
  uint64_t v1;
  double v2;
  id v3;
  id *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  double v16;
  uint64_t v17;

  v3 = OUTLINED_FUNCTION_14_2(a1, sel_shape);
  OUTLINED_FUNCTION_27_1((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_11_2();
  if ((v1 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_20_1();
  v4 = (id *)OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_30();
  objc_msgSend(v4, sel_integerValue);
  OUTLINED_FUNCTION_51_1();
  v6 = OUTLINED_FUNCTION_14_2(v5, sel_shape);
  OUTLINED_FUNCTION_61_1();
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_37_1();
  if (v6)
    OUTLINED_FUNCTION_67_0();
  v7 = v4[5];
  v8 = OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_58_1(v8, sel_integerValue);
  OUTLINED_FUNCTION_83_0();
  v10 = OUTLINED_FUNCTION_14_2(v9, sel_shape);
  v11 = OUTLINED_FUNCTION_61_1();

  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v11 & 0xC000000000000001) == 0, v11);
  if ((v11 & 0xC000000000000001) != 0)
    v12 = (id)MEMORY[0x22075AF48](2, v11);
  else
    v12 = *(id *)(v11 + 48);
  v13 = v12;
  v14 = OUTLINED_FUNCTION_101();
  v15 = OUTLINED_FUNCTION_58_1(v14, sel_integerValue);

  if (is_mul_ok(0, (unint64_t)v15))
  {
    v16 = v2 * (double)v1;
    if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) != 0)
    {
      if (v16 > -9.22337204e18)
      {
        if (v16 < 9.22337204e18)
        {
          v17 = (uint64_t)v16;
          MLMultiArray.doubleArray()();
          if (v17 >= 1)
          {
LABEL_19:
            __break(1u);
            OUTLINED_FUNCTION_0_5();
            swift_unexpectedError();
            __break(1u);
            JUMPOUT(0x21AE0972CLL);
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          *(_OWORD *)(OUTLINED_FUNCTION_9_1() + 16) = xmmword_21AFE7F30;
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_16;
}

void static MLHandActionClassifier.frameDrop(_:)()
{
  OUTLINED_FUNCTION_54_1();
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.0, 0.2);
}

void sub_21AE097D0(uint64_t a1, double a2)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSNumber *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;

  v4 = OUTLINED_FUNCTION_31_1(a1, sel_shape);
  OUTLINED_FUNCTION_27_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_11_2();
  if ((v2 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_20_1();
  v5 = (uint64_t)OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_30();
  objc_msgSend((id)v5, sel_integerValue);
  OUTLINED_FUNCTION_51_1();
  v7 = OUTLINED_FUNCTION_31_1(v6, sel_shape);
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_37_1();
  if (v7)
    OUTLINED_FUNCTION_67_0();
  v8 = (uint64_t)*(id *)(v5 + 40);
  OUTLINED_FUNCTION_101();
  objc_msgSend((id)v8, sel_integerValue);
  OUTLINED_FUNCTION_77();
  v10 = OUTLINED_FUNCTION_31_1(v9, sel_shape);
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_83_0();
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v8 & 0xC000000000000001) == 0, v8);
  if ((v8 & 0xC000000000000001) != 0)
    MEMORY[0x22075AF48](2, v8);
  else
    v11 = *(id *)(v8 + 48);
  v12 = OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_58_1(v12, sel_integerValue);
  OUTLINED_FUNCTION_83_0();
  v13 = v5 * v8;
  if ((unsigned __int128)(v5 * (__int128)v8) >> 64 != (v5 * v8) >> 63)
  {
    __break(1u);
    goto LABEL_25;
  }
  v14 = a2 * (double)v2;
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v15 = (uint64_t)v14;
  v16 = MLMultiArray.doubleArray()();
  v17 = v16;
  if (v15 >= 1)
  {
    if (v13)
    {
      v18 = *(_QWORD *)(v16 + 16);
      if (v18 / v13 < 0)
      {
        __break(1u);
      }
      else if (v18 / v13)
      {
        OUTLINED_FUNCTION_35_1();
      }
      __break(1u);
LABEL_31:
      JUMPOUT(0x21AE09B1CLL);
    }
LABEL_29:
    __break(1u);
    JUMPOUT(0x21AE09B68);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v19 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v19 + 16) = xmmword_21AFE7F30;
  if (!v13)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v20 = (NSNumber *)v19;
  *(_QWORD *)(v19 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, *(_QWORD *)(v17 + 16) / v13);
  v20[5].super.super.isa = OUTLINED_FUNCTION_68_0().super.super.isa;
  v20[6].super.super.isa = NSNumber.init(integerLiteral:)(21).super.super.isa;
  v21 = specialized Array._endMutation()();
  v22 = OUTLINED_FUNCTION_31_1(v21, sel_strides);
  OUTLINED_FUNCTION_40_1();

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v17 = v23;
  }
  v24 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  OUTLINED_FUNCTION_15_2();
  if (v17 != -32)
  {
    OUTLINED_FUNCTION_0_5();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_31;
  }
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_24_0();
}

void specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(uint64_t a1, float a2, float a3)
{
  uint64_t v3;
  _QWORD v4[5];
  float v5;
  float v6;

  v6 = a2;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = (float)(a3 - a2) / (float)(a1 - 1);
    if ((a1 & 0x8000000000000000) == 0)
    {
      MEMORY[0x24BDAC7A8](a1);
      v4[2] = &v6;
      v4[3] = &v5;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5((void (*)(int *__return_ptr, uint64_t *))partial apply for specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:), (uint64_t)v4, 0, v3);
      return;
    }
  }
  __break(1u);
}

float specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(uint64_t a1, float a2, float a3)
{
  return (float)((float)a1 * a3) + a2;
}

uint64_t cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)(uint64_t a1, float (*a2)(float))
{
  uint64_t v2;
  uint64_t v3;
  float *v6;
  unint64_t v7;
  float v8;
  float v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v11 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_75_0();
    v3 = v11;
    v6 = (float *)(a1 + 32);
    v7 = *(_QWORD *)(v11 + 16);
    do
    {
      v8 = *v6;
      if (v7 >= *(_QWORD *)(v11 + 24) >> 1)
        OUTLINED_FUNCTION_80_0();
      v9 = a2(v8);
      *(_QWORD *)(v11 + 16) = v7 + 1;
      *(float *)(v11 + 4 * v7 + 32) = v9;
      ++v6;
      ++v7;
      --v2;
    }
    while (v2);
  }
  return v3;
}

unint64_t specialized MutableCollection.subscript.getter(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a3 + 16);
  if (v4 < result || (uint64_t)v4 < v3)
    goto LABEL_11;
  if ((v3 & 0x8000000000000000) == 0)
    return swift_bridgeObjectRetain();
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection.subscript.getter(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

void closure #3 in static MLHandActionClassifier.randomMove(_:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, id a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  void *v35;
  char *v36;
  char *v37;
  id v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v56;
  _QWORD *v59;
  _QWORD *v60;

  if (a3 < 0)
    goto LABEL_64;
  if (a3)
  {
    if (a4 < 0)
    {
LABEL_65:
      __break(1u);
      return;
    }
    v10 = 0;
    v56 = a3;
    while (v10 != a3)
    {
      if (a4)
      {
        if (a6[2] < 2uLL)
          goto LABEL_63;
        v11 = 0;
        v59 = (_QWORD *)a6[5];
        v60 = (_QWORD *)a6[4];
        while (1)
        {
          v12 = objc_msgSend(a5, sel_strides);
          type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v13 & 0xC000000000000001) == 0, v13);
          v14 = (v13 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22075AF48](0, v13) : *(id *)(v13 + 32);
          v15 = v14;
          swift_bridgeObjectRelease();
          v16 = (uint64_t)objc_msgSend(v15, sel_integerValue);

          v17 = v10 * v16;
          if ((unsigned __int128)((uint64_t)v10 * (__int128)v16) >> 64 != (uint64_t)(v10 * v16) >> 63)
            break;
          v18 = objc_msgSend(a5, sel_strides);
          v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v19 & 0xC000000000000001) == 0, v19);
          if ((v19 & 0xC000000000000001) != 0)
            v20 = (id)MEMORY[0x22075AF48](2, v19);
          else
            v20 = *(id *)(v19 + 48);
          v21 = v20;
          swift_bridgeObjectRelease();
          v22 = (uint64_t)objc_msgSend(v21, sel_integerValue);

          v23 = v11 * v22;
          if ((unsigned __int128)(v11 * (__int128)v22) >> 64 != (v11 * v22) >> 63)
            goto LABEL_46;
          v24 = __OFADD__(v17, v23);
          v25 = v17 + v23;
          if (v24)
            goto LABEL_47;
          v26 = objc_msgSend(a5, sel_strides);
          v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v27 & 0xC000000000000001) == 0, v27);
          if ((v27 & 0xC000000000000001) != 0)
            v28 = (id)MEMORY[0x22075AF48](0, v27);
          else
            v28 = *(id *)(v27 + 32);
          v29 = v28;
          swift_bridgeObjectRelease();
          v30 = (uint64_t)objc_msgSend(v29, sel_integerValue);

          v31 = v10 * v30;
          if ((unsigned __int128)((uint64_t)v10 * (__int128)v30) >> 64 != (uint64_t)(v10 * v30) >> 63)
            goto LABEL_48;
          v32 = objc_msgSend(a5, sel_strides);
          v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, (v33 & 0xC000000000000001) == 0, v33);
          if ((v33 & 0xC000000000000001) != 0)
            v34 = (id)MEMORY[0x22075AF48](1, v33);
          else
            v34 = *(id *)(v33 + 40);
          v35 = v34;
          swift_bridgeObjectRelease();
          v36 = (char *)objc_msgSend(v35, sel_integerValue);

          v37 = &v36[v31];
          if (__OFADD__(v31, v36))
            goto LABEL_49;
          v38 = objc_msgSend(a5, sel_strides);
          v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v39 & 0xC000000000000001) == 0, v39);
          if ((v39 & 0xC000000000000001) != 0)
            v40 = (id)MEMORY[0x22075AF48](2, v39);
          else
            v40 = *(id *)(v39 + 48);
          v41 = v40;
          swift_bridgeObjectRelease();
          v42 = (uint64_t)objc_msgSend(v41, sel_integerValue);

          v43 = v11 * v42;
          if ((unsigned __int128)(v11 * (__int128)v42) >> 64 != (v11 * v42) >> 63)
            goto LABEL_50;
          v24 = __OFADD__(v37, v43);
          v44 = &v37[v43];
          if (v24)
            goto LABEL_51;
          v45 = v60[2];
          if (!v45)
            goto LABEL_52;
          v46 = v60[4];
          if (v10 >= *(_QWORD *)(v46 + 16))
            goto LABEL_53;
          if (v45 < 2)
            goto LABEL_54;
          v47 = v60[5];
          if (v10 >= *(_QWORD *)(v47 + 16))
            goto LABEL_55;
          if (v10 >= *(_QWORD *)(*(_QWORD *)a7 + 16))
            goto LABEL_56;
          v48 = v59[2];
          if (!v48)
            goto LABEL_57;
          v49 = v59[4];
          if (v10 >= *(_QWORD *)(v49 + 16))
            goto LABEL_58;
          if (v48 < 2)
            goto LABEL_59;
          v50 = v59[5];
          if (v10 >= *(_QWORD *)(v50 + 16))
            goto LABEL_60;
          if (v10 >= *(_QWORD *)(*(_QWORD *)a8 + 16))
            goto LABEL_61;
          ++v11;
          v51 = *(double *)(a1 + 8 * v25);
          v52 = *(double *)(a1 + 8 * (_QWORD)v44);
          v53 = *(float *)(*(_QWORD *)a7 + 4 * v10 + 32)
              + (float)((float)(*(float *)(v46 + 4 * v10 + 32) * v51) + (float)(*(float *)(v47 + 4 * v10 + 32) * v52));
          v54 = *(float *)(*(_QWORD *)a8 + 4 * v10 + 32)
              + (float)((float)(*(float *)(v49 + 4 * v10 + 32) * v51) + (float)(*(float *)(v50 + 4 * v10 + 32) * v52));
          *(double *)(a1 + 8 * v25) = v53;
          *(double *)(a1 + 8 * (_QWORD)v44) = v54;
          if (a4 == v11)
            goto LABEL_43;
        }
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        break;
      }
LABEL_43:
      ++v10;
      a3 = v56;
      if (v10 == v56)
        return;
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
}

uint64_t MLMultiArray.doubleArray()()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  MLMultiArray.withUnsafeBytes<A>(_:)();
  return v1;
}

uint64_t static MLHandActionClassifier.generatePaddedFrame(lastFrame:currentFrame:frameLen:displaceScaleFactor:)(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;
  unint64_t v12;
  double v13;
  double v14;
  uint64_t v15;

  if (a3 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v4 = a3;
  if (!a3)
    return MEMORY[0x24BEE4AF8];
  v5 = result;
  if ((unint64_t)(a3 - 1) >= *(_QWORD *)(result + 16))
    goto LABEL_13;
  if ((unint64_t)(a3 - 1) < *(_QWORD *)(a2 + 16))
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v9 = v8;
    v10 = (double *)(v5 + 32);
    v11 = (double *)(a2 + 32);
    v12 = *(_QWORD *)(v8 + 16);
    do
    {
      v13 = *v10;
      v14 = *v11;
      if (v12 >= *(_QWORD *)(v9 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v9 = v15;
      }
      *(_QWORD *)(v9 + 16) = v12 + 1;
      *(double *)(v9 + 8 * v12 + 32) = v13 + (v14 - v13) * a4;
      ++v11;
      ++v10;
      ++v12;
      --v4;
    }
    while (v4);
    return v9;
  }
LABEL_14:
  __break(1u);
  return result;
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  float *v7;
  float *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v25 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v23 = a2;
  v24 = a1;
  if (v6)
  {
    v7 = (float *)(a1 + 32);
    v8 = (float *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v6;
    v10 = v4;
    v11 = v5;
    v12 = v5;
    while (v4)
    {
      if (!v11)
        goto LABEL_22;
      v13 = *v7;
      v14 = *v8;
      v15 = *(_QWORD *)(v25 + 16);
      if (v15 >= *(_QWORD *)(v25 + 24) >> 1)
      {
        v20 = v10;
        v21 = v12;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v10 = v20;
        v12 = v21;
      }
      --v11;
      *(_QWORD *)(v25 + 16) = v15 + 1;
      *(float *)(v25 + 4 * v15 + 32) = v13 * v14;
      --v4;
      ++v8;
      ++v7;
      if (!--v9)
        goto LABEL_13;
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = v4;
    v12 = v5;
LABEL_13:
    if (v10 <= v12)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    while (v6 < v10)
    {
      if (v12 == v6)
        goto LABEL_20;
      if (v6 >= v12)
        goto LABEL_24;
      v16 = *(float *)(v24 + 32 + 4 * v6);
      v17 = *(float *)(v23 + 32 + 4 * v6);
      v18 = *(_QWORD *)(v25 + 16);
      if (v18 >= *(_QWORD *)(v25 + 24) >> 1)
      {
        v19 = v10;
        v22 = v12;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v12 = v22;
        v10 = v19;
      }
      ++v6;
      *(_QWORD *)(v25 + 16) = v18 + 1;
      *(float *)(v25 + 4 * v18 + 32) = v16 * v17;
      if (v10 == v6)
        goto LABEL_20;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void closure #1 in MLMultiArray.doubleArray()(id a1@<X2>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  if (a2)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(a2, (uint64_t)objc_msgSend(a1, sel_count));
    *a3 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t outlined init with copy of MLHandActionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLHandActionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21AE0A770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = OUTLINED_FUNCTION_66_0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_64_1() - 8) + 80);
  v6 = (v3 + v4 + v5) & ~v5;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (OUTLINED_FUNCTION_114() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(OUTLINED_FUNCTION_114())
    {
      case 0u:
        v8 = type metadata accessor for URL();
        v9 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
        v9(v0 + v6, v8);
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v9(v0 + v6 + *(int *)(v10 + 48), v8);
        OUTLINED_FUNCTION_10_1();
        OUTLINED_FUNCTION_10_1();
        OUTLINED_FUNCTION_10_1();
        goto LABEL_9;
      case 1u:
      case 2u:
        v7 = type metadata accessor for URL();
        OUTLINED_FUNCTION_11_1(v7);
        return swift_deallocObject();
      case 3u:
        OUTLINED_FUNCTION_219();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        OUTLINED_FUNCTION_219();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 5u:
        v11 = type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_11_1(v11);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        OUTLINED_FUNCTION_10_1();
        OUTLINED_FUNCTION_10_1();
        goto LABEL_9;
      case 6u:
        v12 = type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_11_1(v12);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        OUTLINED_FUNCTION_10_1();
        OUTLINED_FUNCTION_10_1();
        OUTLINED_FUNCTION_10_1();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        return swift_deallocObject();
    }
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(OUTLINED_FUNCTION_66_0() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(OUTLINED_FUNCTION_64_1() - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return closure #1 in static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(a1, v2 + v9, *(_QWORD *)(v2 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

unint64_t lazy protocol witness table accessor for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>;
  if (!lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
    v2[0] = MEMORY[0x24BE6C040];
    v2[1] = MEMORY[0x24BE6C040];
    result = MEMORY[0x22075B938](MEMORY[0x24BE6B820], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LearningPhase and conformance LearningPhase()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LearningPhase and conformance LearningPhase;
  if (!lazy protocol witness table cache variable for type LearningPhase and conformance LearningPhase)
  {
    v1 = type metadata accessor for LearningPhase();
    result = MEMORY[0x22075B938](MEMORY[0x24BE6B9C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LearningPhase and conformance LearningPhase);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

id @nonobjc MLMultiArray.init(dataPointer:shape:dataType:strides:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  void *v6;
  NSArray v11;
  NSArray v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  double v17;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v11.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v12.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a5)
  {
    aBlock[4] = a5;
    aBlock[5] = a6;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer) -> ();
    aBlock[3] = &block_descriptor;
    v13 = _Block_copy(aBlock);
    swift_release();
  }
  else
  {
    v13 = 0;
  }
  aBlock[0] = 0;
  v14 = objc_msgSend(v6, sel_initWithDataPointer_shape_dataType_strides_deallocator_error_, a1, v11.super.isa, a3, v12.super.isa, v13, aBlock);
  _Block_release(v13);

  if (v14)
  {
    v15 = aBlock[0];
  }
  else
  {
    v16 = aBlock[0];
    _convertNSErrorToError(_:)();

    swift_willThrow(v17);
  }
  return v14;
}

uint64_t specialized Collection.randomElement<A>(using:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    specialized RandomNumberGenerator.next<A>(upperBound:)(*(_QWORD *)(a2 + 16));
  return 0;
}

void specialized RandomNumberGenerator.next<A>(upperBound:)(uint64_t a1)
{
  if (a1)
    OUTLINED_FUNCTION_35_1();
  __break(1u);
}

void specialized MutableCollection<>.shuffle<A>(using:)()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = v2 - 2;
  if (v2 >= 2)
  {
    v4 = 0;
    while (1)
    {
      v14 = 0;
      MEMORY[0x22075BA28](&v14, 8);
      v5 = (v14 * (unsigned __int128)v2) >> 64;
      if (v2 > v14 * v2)
      {
        v6 = -(uint64_t)v2 % v2;
        if (v6 > v14 * v2)
        {
          do
          {
            v14 = 0;
            MEMORY[0x22075BA28](&v14, 8);
          }
          while (v6 > v14 * v2);
          v5 = (v14 * (unsigned __int128)v2) >> 64;
        }
      }
      v7 = v4 + v5;
      if (__OFADD__(v4, v5))
        break;
      if (v4 != v7)
      {
        v8 = *(_QWORD *)(v1 + 16);
        if (v4 >= v8)
          goto LABEL_20;
        if (v7 >= v8)
          goto LABEL_21;
        v9 = *(_DWORD *)(v1 + 32 + 4 * v4);
        v10 = *(_DWORD *)(v1 + 32 + 4 * v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
          v1 = v11;
        }
        v12 = *(_QWORD *)(v1 + 16);
        if (v4 >= v12)
          goto LABEL_22;
        *(_DWORD *)(v1 + 32 + 4 * v4) = v10;
        if (v7 >= v12)
          goto LABEL_23;
        *(_DWORD *)(v1 + 32 + 4 * v7) = v9;
        *v0 = v1;
      }
      --v2;
      if (v4++ == v3)
        return;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::UInt64 v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt64 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  OUTLINED_FUNCTION_20_3();
  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = v2 - 2;
  if (v2 >= 2)
  {
    v4 = 0;
    while (1)
    {
      v5 = MersenneTwisterGenerator.next()();
      v6 = (v5 * (unsigned __int128)v2) >> 64;
      if (v2 > v5 * v2)
      {
        v7 = -(uint64_t)v2 % v2;
        if (v7 > v5 * v2)
        {
          do
            v8 = MersenneTwisterGenerator.next()();
          while (v7 > v8 * v2);
          v6 = (v8 * (unsigned __int128)v2) >> 64;
        }
      }
      v9 = v4 + v6;
      if (__OFADD__(v4, v6))
        break;
      if (v4 != v9)
      {
        v10 = *(_QWORD *)(v1 + 16);
        if (v4 >= v10)
          goto LABEL_20;
        if (v9 >= v10)
          goto LABEL_21;
        v11 = *(_QWORD *)(v1 + 32 + 8 * v4);
        v12 = *(_QWORD *)(v1 + 32 + 8 * v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
          v1 = v13;
        }
        v14 = *(_QWORD *)(v1 + 16);
        if (v4 >= v14)
          goto LABEL_22;
        *(_QWORD *)(v1 + 32 + 8 * v4) = v12;
        if (v9 >= v14)
          goto LABEL_23;
        *(_QWORD *)(v1 + 32 + 8 * v9) = v11;
        *v0 = v1;
      }
      --v2;
      if (v4++ == v3)
        return;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

{
  uint64_t v0;

  if (*(_QWORD *)(*(_QWORD *)v0 + 16) >= 2uLL)
    OUTLINED_FUNCTION_67_17();
}

void specialized static BinaryFloatingPoint<>.random<A>(in:using:)(double a1, double a2)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000) != 0)
    specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001);
  __break(1u);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v5 - v7 > *(_QWORD *)(v4 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = v9;
  }
  v10 = (char *)(v4 + 32 + 16 * v6);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_13;
  v11 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v11, a2))
    goto LABEL_19;
  result = (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v4 + 32 + 16 * a2), v11 - a2, v10);
  v12 = *(_QWORD *)(v4 + 16);
  v13 = __OFADD__(v12, v8);
  v14 = v12 - v7;
  if (!v13)
  {
    *(_QWORD *)(v4 + 16) = v14;
LABEL_13:
    *v2 = v4;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

void specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v10 = *(_QWORD *)(a3 + 16);
  v11 = v10 - v8;
  if (__OFSUB__(v10, v8))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (__OFADD__(v6, v11))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v6 + v11 > *(_QWORD *)(v5 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v5 = v12;
  }
  v13 = (char *)(v5 + 32 + 8 * a1);
  if (!v11)
    goto LABEL_13;
  v14 = *(_QWORD *)(v5 + 16);
  if (__OFSUB__(v14, a2))
    goto LABEL_22;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v5 + 32 + 8 * a2), v14 - a2, &v13[8 * v10]);
  v15 = *(_QWORD *)(v5 + 16);
  v16 = __OFADD__(v15, v11);
  v17 = v15 + v11;
  if (v16)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(_QWORD *)(v5 + 16) = v17;
LABEL_13:
  if (!v10)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    *v3 = v5;
    return;
  }
  if (*(_QWORD *)(a3 + 16) == v10)
  {
    memcpy(v13, (const void *)(a3 + 32), 8 * v10);
    goto LABEL_16;
  }
LABEL_24:
  __break(1u);
}

void specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(uint64_t *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X8>)
{
  uint64_t v4;
  float v6;

  v6 = specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(*a1, *a2, *a3);
  if (!v4)
    *a4 = v6;
}

void partial apply for specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;

  specialized closure #1 in linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(a1, *(float **)(v2 + 16), *(float **)(v2 + 24), a2);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void partial apply for closure #1 in MLMultiArray.doubleArray()(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  closure #1 in MLMultiArray.doubleArray()(*(id *)(v2 + 16), a1, a2);
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_1_3(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v2, 1, v1);
}

void OUTLINED_FUNCTION_2_3()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_3_3()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_4_3()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_5_2()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, (SEL)(v0 + 310));
}

id OUTLINED_FUNCTION_7_2(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_9_2()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_10_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
    v2 = 1;
  else
    v2 = 0;
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v2, v1);
}

void OUTLINED_FUNCTION_12_2()
{
  JUMPOUT(0x22075AF48);
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

id OUTLINED_FUNCTION_14_2(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

id OUTLINED_FUNCTION_15_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return @nonobjc MLMultiArray.init(dataPointer:shape:dataType:strides:deallocator:)(v2, v1, 65600, v0, 0, 0);
}

id OUTLINED_FUNCTION_16_2()
{
  uint64_t v0;

  return @nonobjc MLMultiArray.init(shape:dataType:)(v0, 65600);
}

unint64_t OUTLINED_FUNCTION_18_1()
{
  uint64_t v0;

  return specialized MutableCollection.subscript.getter(0, 1, *(_QWORD *)(v0 - 112));
}

uint64_t OUTLINED_FUNCTION_19_1()
{
  uint64_t v0;

  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, (v0 & 0xC000000000000001) == 0, v0);
}

void OUTLINED_FUNCTION_20_1()
{
  JUMPOUT(0x22075AF48);
}

void OUTLINED_FUNCTION_23_1()
{
  JUMPOUT(0x22075AF48);
}

void OUTLINED_FUNCTION_26_1()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_27_1(uint64_t a1, unint64_t *a2)
{
  return type metadata accessor for NSAttributedString(0, a2);
}

void OUTLINED_FUNCTION_29_1()
{
  void *v0;

}

id OUTLINED_FUNCTION_30_1(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

id OUTLINED_FUNCTION_31_1(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void OUTLINED_FUNCTION_33_1()
{
  void *v0;

}

id OUTLINED_FUNCTION_34_1(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void OUTLINED_FUNCTION_35_1()
{
  JUMPOUT(0x22075BA28);
}

id OUTLINED_FUNCTION_36_1()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

uint64_t OUTLINED_FUNCTION_37_1()
{
  uint64_t v0;

  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, (v0 & 0xC000000000000001) == 0, v0);
}

id OUTLINED_FUNCTION_38_1()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_40_1()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_42_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_43_1()
{
  void *v0;
  unsigned __int8 v1;

  outlined consume of MLDataTable?(v0, v1);
}

id OUTLINED_FUNCTION_44_1()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_45_1(uint64_t a1, float (*a2)(float))
{
  uint64_t v2;

  return cos #1 (_:) in static MLHandActionClassifier.randomMove(_:)(v2, a2);
}

uint64_t OUTLINED_FUNCTION_46_1()
{
  return swift_dynamicCastClass();
}

void OUTLINED_FUNCTION_47_1(float a1, float a2)
{
  uint64_t v2;

  specialized linearSpace #1 <A>(from:through:count:) in static MLHandActionClassifier.randomMove(_:)(v2, a1, a2);
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_51_1()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_52_1()
{
  return swift_bridgeObjectRetain();
}

void *OUTLINED_FUNCTION_53_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2 >= v2)
    a2 = v2;
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

void OUTLINED_FUNCTION_57_1()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = v0;
  specialized MutableCollection<>.shuffle<A>(using:)();
}

id OUTLINED_FUNCTION_58_1(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

id OUTLINED_FUNCTION_59_1()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

void OUTLINED_FUNCTION_60_1()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_61_1()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_62_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  return specialized static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(a1, a2, v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_63_1()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_64_1()
{
  return type metadata accessor for MLHandActionClassifier.ModelParameters(0);
}

void OUTLINED_FUNCTION_65_1()
{
  JUMPOUT(0x22075AF48);
}

uint64_t OUTLINED_FUNCTION_66_0()
{
  return type metadata accessor for LearningPhase();
}

void OUTLINED_FUNCTION_67_0()
{
  JUMPOUT(0x22075AF48);
}

NSNumber OUTLINED_FUNCTION_68_0()
{
  return NSNumber.init(integerLiteral:)(3);
}

id OUTLINED_FUNCTION_70_0()
{
  void *v0;

  return v0;
}

void OUTLINED_FUNCTION_71_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = v1;
}

void OUTLINED_FUNCTION_74_0()
{
  double v0;
  double v1;

  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v0, v1);
}

void OUTLINED_FUNCTION_75_0()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_77()
{
  void *v0;

}

id OUTLINED_FUNCTION_78_0()
{
  void *v0;
  char v1;

  return outlined copy of Result<_DataTable, Error>(v0, v1);
}

void OUTLINED_FUNCTION_80_0()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_81_0(uint64_t a1)
{
  uint64_t v1;

  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg592_sSa8CreateMLSFRzlE1moi33_5442BF52D76DA1BBD780DB5A1A47CDFALLySayxGAD_ADtFZxx_xt_tXEfU_Sf_TG5Tf1cn_n(a1, v1);
}

void OUTLINED_FUNCTION_83_0()
{
  void *v0;

}

uint64_t InteractionTableBuilder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InteractionTableBuilder()
{
  return objc_opt_self();
}

uint64_t MLImageClassifier.CustomFeatureExtractor.modelPath.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_55_2();
  return OUTLINED_FUNCTION_24_1(a1, v1, v4, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t MLImageClassifier.CustomFeatureExtractor.modelPath.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_55_2();
  return OUTLINED_FUNCTION_24_1(v1, a1, v4, *(uint64_t (**)(void))(v3 + 40));
}

uint64_t (*MLImageClassifier.CustomFeatureExtractor.modelPath.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLImageClassifier.CustomFeatureExtractor.outputName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_36_2();
  v2 = *(_QWORD *)(v0 + v1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for MLImageClassifier.CustomFeatureExtractor(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLImageClassifier.CustomFeatureExtractor);
}

void MLImageClassifier.CustomFeatureExtractor.outputName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;

  OUTLINED_FUNCTION_36_2();
  v6 = (_QWORD *)(v2 + v5);
  swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLImageClassifier.CustomFeatureExtractor.outputName.modify())(_QWORD)
{
  OUTLINED_FUNCTION_36_2();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLImageClassifier.CustomFeatureExtractor.init(modelPath:outputName:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  OUTLINED_FUNCTION_36_2();
  v9 = (_QWORD *)(a4 + v8);
  OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_55_2();
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(a4, a1);
  *v9 = a2;
  v9[1] = a3;
  OUTLINED_FUNCTION_164();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.CustomFeatureExtractor.validate()()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20));
  v2 = v1[1];
  if (v2
    && ((v3 = *v1 & 0xFFFFFFFFFFFFLL, (v2 & 0x2000000000000000) != 0) ? (v4 = HIBYTE(v2) & 0xF) : (v4 = v3), !v4))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v12 = 0xD000000000000034;
    v11 = 0x800000021AFF1C10;
  }
  else
  {
    v5 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v6 = URL.path.getter();
    v7 = (void *)MEMORY[0x22075A8AC](v6);
    OUTLINED_FUNCTION_30();
    v8 = objc_msgSend(v5, sel_isReadableFileAtPath_, v7);

    if (v8)
      return;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    strcpy((char *)v13, "The model at ");
    HIWORD(v13[1]) = -4864;
    v9._countAndFlagsBits = URL.path.getter();
    String.append(_:)(v9);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_56_1(17, v10);
    v11 = v13[1];
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v12 = v13[0];
  }
  *(_QWORD *)(v12 + 8) = v11;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_BYTE *)(v12 + 48) = 0;
  swift_willThrow(0.0);
}

uint64_t MLImageClassifier.CustomFeatureExtractor.buildTransformer()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for MLModelImageFeatureExtractor();
  v2[6] = v3;
  v2[7] = *(_QWORD *)(v3 - 8);
  v2[8] = OUTLINED_FUNCTION_0();
  v4 = type metadata accessor for ImageScaler();
  v2[9] = v4;
  v2[10] = *(_QWORD *)(v4 - 8);
  v2[11] = OUTLINED_FUNCTION_0();
  v5 = type metadata accessor for FeatureType();
  v2[12] = v5;
  v2[13] = *(_QWORD *)(v5 - 8);
  v2[14] = OUTLINED_FUNCTION_25();
  v2[15] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureDescription?);
  v2[16] = OUTLINED_FUNCTION_25();
  v2[17] = OUTLINED_FUNCTION_25();
  v2[18] = OUTLINED_FUNCTION_25();
  v2[19] = OUTLINED_FUNCTION_25();
  v6 = type metadata accessor for FeatureType.ImageParameters();
  v2[20] = v6;
  v2[21] = *(_QWORD *)(v6 - 8);
  v2[22] = OUTLINED_FUNCTION_0();
  v7 = type metadata accessor for Model();
  v2[23] = v7;
  v2[24] = *(_QWORD *)(v7 - 8);
  v2[25] = OUTLINED_FUNCTION_0();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 216) = a1;
  *(_QWORD *)(v3 + 224) = v1;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLImageClassifier.CustomFeatureExtractor.buildTransformer()()
{
  uint64_t v0;
  _QWORD *v1;

  MLImageClassifier.CustomFeatureExtractor.buildModel()(*(_QWORD *)(v0 + 200));
  type metadata accessor for MLModel();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v1;
  *v1 = v0;
  v1[1] = MLImageClassifier.CustomFeatureExtractor.buildTransformer();
  return static MLModel.compile(_:)(*(_QWORD *)(v0 + 200));
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  Swift::String v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = v0[19];
  v2 = Model.inputs.getter();
  OUTLINED_FUNCTION_40_2(v2);
  OUTLINED_FUNCTION_30();
  v3 = type metadata accessor for FeatureDescription();
  result = OUTLINED_FUNCTION_14_3(v1);
  if (v5)
  {
    __break(1u);
    goto LABEL_13;
  }
  v6 = v0[15];
  v7 = v0[12];
  v8 = v0[13];
  FeatureDescription.type.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v8 + 88))(v6, v7) == *MEMORY[0x24BE62568])
  {
    v10 = v0[21];
    v9 = v0[22];
    v12 = v0[19];
    v11 = v0[20];
    v13 = v0[18];
    v14 = v0[15];
    (*(void (**)(uint64_t, _QWORD))(v0[13] + 96))(v14, v0[12]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v9, v14, v11);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v12, v3);
    FeatureType.ImageParameters.width.getter();
    FeatureType.ImageParameters.height.getter();
    ImageScaler.init(targetSize:)();
    v15 = Model.inputs.getter();
    OUTLINED_FUNCTION_40_2(v15);
    OUTLINED_FUNCTION_30();
    result = OUTLINED_FUNCTION_14_3(v13);
    if (!v5)
    {
      v16 = v0[17];
      FeatureDescription.name.getter();
      OUTLINED_FUNCTION_13_3();
      v17 = Model.outputs.getter();
      specialized Collection.first.getter(v17, v16);
      OUTLINED_FUNCTION_30();
      result = OUTLINED_FUNCTION_14_3(v16);
      if (!v5)
      {
        v19 = (void *)v0[27];
        v18 = v0[28];
        FeatureDescription.name.getter();
        OUTLINED_FUNCTION_13_3();
        objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF648]), sel_init);
        v20 = v19;
        MLModelImageFeatureExtractor.init(model:inputName:outputName:context:)();
        v21 = (void *)v0[27];
        v22 = v0[25];
        v46 = v0[24];
        v48 = v0[23];
        if (!v18)
        {
          v39 = v0[11];
          v44 = v0[10];
          v45 = v0[25];
          v40 = v0[8];
          v41 = v0[9];
          v43 = v0[6];
          v42 = v0[7];
          Transformer.appending<A>(_:)();

          (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v43);
          (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v39, v41);
          OUTLINED_FUNCTION_30_2();
          (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v48);
          OUTLINED_FUNCTION_10();
          OUTLINED_FUNCTION_17();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          OUTLINED_FUNCTION_31();
          OUTLINED_FUNCTION_19();
          v38 = (uint64_t (*)(void))v0[1];
          return v38();
        }
        v23 = v0[10];
        v24 = v0[11];
        v25 = v0[9];

        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
        OUTLINED_FUNCTION_30_2();
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v22, v48);
LABEL_9:
        OUTLINED_FUNCTION_10_2();
        OUTLINED_FUNCTION_10();
        OUTLINED_FUNCTION_19();
        OUTLINED_FUNCTION_17();
        OUTLINED_FUNCTION_9();
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_65();
        OUTLINED_FUNCTION_40();
        OUTLINED_FUNCTION_58();
        OUTLINED_FUNCTION_31();
        v38 = (uint64_t (*)(void))v0[1];
        return v38();
      }
      goto LABEL_14;
    }
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v26 = v0[16];
  v27 = *(void (**)(uint64_t, uint64_t))(v0[13] + 8);
  v27(v0[15], v0[12]);
  OUTLINED_FUNCTION_13_3();
  _StringGuts.grow(_:)(50);
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  OUTLINED_FUNCTION_27_2();
  v28._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v28);
  v29 = Model.inputs.getter();
  specialized Collection.first.getter(v29, v26);
  OUTLINED_FUNCTION_30();
  result = OUTLINED_FUNCTION_14_3(v26);
  if (!v5)
  {
    v30 = (void *)v0[27];
    v31 = v0[24];
    v47 = v0[23];
    v49 = v0[25];
    v32 = v0[14];
    v33 = v0[12];
    FeatureDescription.type.getter();
    OUTLINED_FUNCTION_13_3();
    _print_unlocked<A, B>(_:_:)();
    v27(v32, v33);
    v34._countAndFlagsBits = 0x64616574736E6920;
    v34._object = (void *)0xE90000000000002ELL;
    String.append(_:)(v34);
    v36 = v0[2];
    v35 = v0[3];
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v37 = v36;
    *(_QWORD *)(v37 + 8) = v35;
    *(_OWORD *)(v37 + 16) = 0u;
    *(_OWORD *)(v37 + 32) = 0u;
    *(_BYTE *)(v37 + 48) = 2;
    swift_willThrow(0.0);

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v49, v47);
    goto LABEL_9;
  }
LABEL_15:
  __break(1u);
  return result;
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLImageClassifier.CustomFeatureExtractor.buildModel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  Swift::String v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t (*v115)(uint64_t, uint64_t);
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  Swift::String v174;
  Swift::String v175;

  v150 = a1;
  v146 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
  v145 = *(_QWORD *)(v146 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_64();
  v144 = v3;
  OUTLINED_FUNCTION_118();
  v149 = type metadata accessor for FeatureType.ShapedArrayParameters();
  v148 = *(_QWORD *)(v149 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v147 = v5;
  OUTLINED_FUNCTION_118();
  v142 = type metadata accessor for NeuralNetwork.Layer.FlattenParameters.ChannelLayout();
  v141 = *(_QWORD *)(v142 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v140 = v7;
  OUTLINED_FUNCTION_118();
  v8 = type metadata accessor for NeuralNetwork.Layer();
  v9 = *(_QWORD *)(v8 - 8);
  v154 = v8;
  v155 = v9;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v151 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.Layer?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v15);
  v156 = (char *)&v130 - v16;
  OUTLINED_FUNCTION_118();
  v162 = type metadata accessor for FeatureType();
  v164 = *(_QWORD *)(v162 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v18);
  v160 = (char *)&v130 - v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureDescription?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_64();
  v161 = v21;
  OUTLINED_FUNCTION_118();
  v152 = type metadata accessor for NeuralNetworkRegressor();
  v167 = *(_QWORD *)(v152 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_64();
  v153 = v23;
  OUTLINED_FUNCTION_118();
  v159 = type metadata accessor for NeuralNetworkClassifier();
  v157 = *(_QWORD *)(v159 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_64();
  v158 = v25;
  OUTLINED_FUNCTION_118();
  v163 = type metadata accessor for NeuralNetwork();
  v166 = *(_QWORD *)(v163 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_64();
  v165 = v27;
  OUTLINED_FUNCTION_118();
  v168 = type metadata accessor for ModelKind();
  v28 = *(_QWORD *)(v168 - 8);
  v29 = MEMORY[0x24BDAC7A8](v168);
  v31 = (char *)&v130 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v130 - v32;
  v34 = type metadata accessor for URL();
  v35 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v130 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for Model();
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_32_1((uint64_t)v37, v170, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16));
  v40 = v169;
  result = Model.init(contentsOf:)();
  if (v40)
    return result;
  v43 = v165;
  v42 = v166;
  v135 = 0;
  v44 = v167;
  v134 = v31;
  v136 = v39;
  v45 = v38;
  Model.kind.getter();
  v46 = v168;
  v47 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v33, v168);
  v48 = v1;
  if (v47 == *MEMORY[0x24BE63218])
  {
    OUTLINED_FUNCTION_5_3();
    OUTLINED_FUNCTION_32_1(v43, (uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 32));
    v49 = NeuralNetwork.layers.getter();
    v169 = NeuralNetwork.preprocessors.getter();
    OUTLINED_FUNCTION_23_2(v43, *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8));
    v50 = v45;
LABEL_6:
    v53 = v136;
    goto LABEL_7;
  }
  v50 = v45;
  if (v47 == *MEMORY[0x24BE63298])
  {
    OUTLINED_FUNCTION_5_3();
    v52 = v157;
    v51 = v158;
    OUTLINED_FUNCTION_32_1(v158, (uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v157 + 32));
    v49 = NeuralNetworkClassifier.layers.getter();
    v169 = NeuralNetworkClassifier.preprocessors.getter();
    OUTLINED_FUNCTION_23_2(v51, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
    goto LABEL_6;
  }
  v53 = v136;
  if (v47 != *MEMORY[0x24BE63288])
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_18_2();
    *v87 = v86 + 57;
    v87[1] = 0x800000021AFF1A40;
    OUTLINED_FUNCTION_1_4(v88, (uint64_t)v87);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v1, v50);
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v33, v46);
  }
  OUTLINED_FUNCTION_5_3();
  v79 = v153;
  OUTLINED_FUNCTION_32_1(v153, (uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 32));
  v49 = NeuralNetworkRegressor.layers.getter();
  v169 = NeuralNetworkRegressor.preprocessors.getter();
  OUTLINED_FUNCTION_23_2(v79, *(uint64_t (**)(uint64_t, uint64_t))(v44 + 8));
LABEL_7:
  v54 = *(_QWORD *)(OUTLINED_FUNCTION_49_1() + 16);
  swift_bridgeObjectRelease();
  v55 = v164;
  if (v54 != 1)
  {
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_26_2();
    v171 = 0;
    v172 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    OUTLINED_FUNCTION_27_2();
    String.append(_:)(v73);
    v74 = *(_QWORD *)(OUTLINED_FUNCTION_49_1() + 16);
    swift_bridgeObjectRelease();
    v173 = v74;
    v174._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    OUTLINED_FUNCTION_43_2(v174);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_11_3();
    v75 = v171;
    v76 = v172;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v77 = OUTLINED_FUNCTION_49_0();
    *v78 = v75;
    v78[1] = v76;
    OUTLINED_FUNCTION_1_4(v77, (uint64_t)v78);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v48, v50);
  }
  v131 = v50;
  v56 = OUTLINED_FUNCTION_49_1();
  v57 = v161;
  specialized Collection.first.getter(v56, v161);
  OUTLINED_FUNCTION_123();
  v58 = type metadata accessor for FeatureDescription();
  if (__swift_getEnumTagSinglePayload(v57, 1, v58) == 1)
  {
    __break(1u);
    goto LABEL_45;
  }
  v59 = (uint64_t)v160;
  FeatureDescription.type.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v55 + 88))(v59, v162) != *MEMORY[0x24BE62568])
  {
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_26_2();
    OUTLINED_FUNCTION_19_2(v59, *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8));
    OUTLINED_FUNCTION_23_2(v57, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8));
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_18_2();
    *v81 = v80 - 15;
    v81[1] = 0x800000021AFF1AE0;
    OUTLINED_FUNCTION_1_4(v82, (uint64_t)v81);
    OUTLINED_FUNCTION_28_1();
    v84 = v48;
    v85 = v131;
    return v83(v84, v85);
  }
  v167 = v48;
  OUTLINED_FUNCTION_19_2(v59, *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8));
  OUTLINED_FUNCTION_23_2(v57, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8));
  v60 = (uint64_t *)(v170 + *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20));
  v61 = v60[1];
  if (v61)
  {
    v62 = *v60;
    OUTLINED_FUNCTION_84();
    v63 = swift_bridgeObjectRetain();
    v64 = v61;
    v65 = v135;
    v66 = specialized Collection.firstIndex(where:)(v63, v62, v64);
    v68 = v67;
    v135 = v65;
    OUTLINED_FUNCTION_12_0();
    v69 = (uint64_t)v156;
    v70 = v131;
    if ((v68 & 1) != 0)
    {
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_26_2();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_18_2();
      *v116 = v117;
      v116[1] = 0x800000021AFF1B90;
      OUTLINED_FUNCTION_1_4(v118, (uint64_t)v116);
      OUTLINED_FUNCTION_28_1();
LABEL_37:
      v84 = v167;
      v85 = v70;
      return v83(v84, v85);
    }
    v71 = v66 + 1;
    v72 = v136;
    if (__OFADD__(v66, 1))
    {
      __break(1u);
    }
    else if ((v71 & 0x8000000000000000) == 0)
    {
      if (*(_QWORD *)(v49 + 16) >= v71)
      {
        v49 = specialized Array.init<A>(_:)(v49, v49 + ((*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80)), 0, (2 * v71) | 1);
        goto LABEL_22;
      }
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    __break(1u);
    goto LABEL_42;
  }
  v69 = (uint64_t)v156;
  v70 = v131;
  v72 = v136;
LABEL_22:
  if (!*(_QWORD *)(v49 + 16))
  {
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_26_2();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_18_2();
    *v120 = v121 - 1;
    v120[1] = 0x800000021AFF1B50;
LABEL_36:
    OUTLINED_FUNCTION_1_4(v119, (uint64_t)v120);
    v83 = *(uint64_t (**)(uint64_t, uint64_t))(v72 + 8);
    goto LABEL_37;
  }
  v170 = v49;
  specialized BidirectionalCollection.last.getter(v49, v69);
  v89 = v154;
  if (__swift_getEnumTagSinglePayload(v69, 1, v154) == 1)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v90 = NeuralNetwork.Layer.outputNames.getter();
  v91 = *(void (**)(uint64_t, uint64_t))(v155 + 8);
  v91(v69, v89);
  v92 = *(_QWORD *)(v90 + 16);
  OUTLINED_FUNCTION_123();
  if (v92 != 1)
  {
    OUTLINED_FUNCTION_26_2();
    v171 = 0;
    v172 = 0xE000000000000000;
    _StringGuts.grow(_:)(60);
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_56_1(49, v122);
    v123 = v138;
    specialized BidirectionalCollection.last.getter(v170, v138);
    result = __swift_getEnumTagSinglePayload(v123, 1, v89);
    if ((_DWORD)result == 1)
    {
LABEL_49:
      __break(1u);
      return result;
    }
    OUTLINED_FUNCTION_123();
    v124 = NeuralNetwork.Layer.outputNames.getter();
    v91(v123, v89);
    v125 = *(_QWORD *)(v124 + 16);
    OUTLINED_FUNCTION_123();
    v173 = v125;
    v175._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    OUTLINED_FUNCTION_43_2(v175);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_11_3();
    v126 = v171;
    v127 = v172;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v119 = OUTLINED_FUNCTION_49_0();
    *v120 = v126;
    v120[1] = v127;
    goto LABEL_36;
  }
  v171 = 0;
  v172 = 0xE000000000000000;
  v93 = v137;
  v94 = v170;
  specialized BidirectionalCollection.last.getter(v170, v137);
  if (__swift_getEnumTagSinglePayload(v93, 1, v89) == 1)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v95 = v89;
  v96 = v93;
  v97 = NeuralNetwork.Layer.name.getter();
  v99 = v98;
  v91(v96, v95);
  v100._countAndFlagsBits = v97;
  v100._object = v99;
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
  v101._countAndFlagsBits = 0x6E657474616C46;
  v101._object = (void *)0xE700000000000000;
  String.append(_:)(v101);
  v102 = v139;
  specialized BidirectionalCollection.last.getter(v94, v139);
  if (__swift_getEnumTagSinglePayload(v102, 1, v95) == 1)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v103 = NeuralNetwork.Layer.outputNames.getter();
  v91(v102, v95);
  if (!*(_QWORD *)(v103 + 16))
  {
LABEL_48:
    result = OUTLINED_FUNCTION_30();
    __break(1u);
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_30();
  v104 = v141;
  v105 = v140;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v141 + 104))(v140, *MEMORY[0x24BE62750], v142);
  static NeuralNetwork.Layer.flatten(name:inputName:outputName:targetChannelLayout:)();
  OUTLINED_FUNCTION_123();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_19_2(v105, *(uint64_t (**)(uint64_t, uint64_t))(v104 + 8));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_43:
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v170 = v128;
  }
  v106 = v149;
  v107 = v155;
  v108 = *(_QWORD *)(v170 + 16);
  if (v108 >= *(_QWORD *)(v170 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v170 = v129;
  }
  v109 = v170;
  *(_QWORD *)(v170 + 16) = v108 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v107 + 32))(v109+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(_QWORD *)(v107 + 72) * v108, v151, v154);
  v110 = v147;
  FeatureType.ShapedArrayParameters.init()();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v145 + 104))(v144, *MEMORY[0x24BE624E0], v146);
  FeatureType.ShapedArrayParameters.dataType.setter();
  Model.init()();
  v111 = v167;
  Model.specificationVersion.getter();
  Model.specificationVersion.setter();
  Model.inputs.getter();
  Model.inputs.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_21AFE7DA0;
  v112 = v148;
  v113 = v143;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 16))(v143, v110, v106);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v164 + 104))(v113, *MEMORY[0x24BE62400], v162);
  FeatureDescription.init(name:type:description:)();
  Model.outputs.setter();
  v114 = v134;
  NeuralNetwork.init(layers:preprocessors:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v133 + 104))(v114, v132, v168);
  Model.kind.setter();
  (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v110, v106);
  OUTLINED_FUNCTION_28_1();
  return v115(v111, v131);
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v7 = 0;
    v8 = *(_QWORD *)(type metadata accessor for NeuralNetwork.Layer() - 8);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    while (NeuralNetwork.Layer.name.getter() != a2 || v11 != a3)
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        goto LABEL_13;
      ++v7;
      v9 += v10;
      if (v4 == v7)
      {
        v7 = 0;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.FeatureExtractorType.validate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_5();
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  v4 = OUTLINED_FUNCTION_16_3();
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v4, v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor(v1, v0);
    MLImageClassifier.CustomFeatureExtractor.validate()();
    outlined destroy of MLImageClassifier.CustomFeatureExtractor(v0, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else if ((*(_BYTE *)(v1 + 8) & 1) == 0
         && (specialized Sequence<>.contains(_:)(*(_QWORD *)v1, (uint64_t)&outlined read-only object #0 of MLImageClassifier.FeatureExtractorType.validate()) & 1) == 0)
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_56_1(18, v7);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v8 = 0x6E6F697369766552;
    *(_QWORD *)(v8 + 8) = 0xE900000000000020;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_BYTE *)(v8 + 48) = 0;
    swift_willThrow(0.0);
  }
}

void MLImageClassifier.FeatureExtractorType.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v0 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_3(v5, v8);
  if (OUTLINED_FUNCTION_51_2() == 1)
  {
    OUTLINED_FUNCTION_53_2();
    v6 = (unint64_t *)&v3[*(int *)(v0 + 20)];
    if (v6[1])
      v7 = *v6;
    else
      v7 = OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_6_2(v7);
    OUTLINED_FUNCTION_84();
    swift_bridgeObjectRelease();
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)v3, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else
  {
    OUTLINED_FUNCTION_21_1();
  }
  OUTLINED_FUNCTION_164();
}

uint64_t type metadata accessor for MLImageClassifier.FeatureExtractorType(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLImageClassifier.FeatureExtractorType);
}

uint64_t type metadata accessor for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of MLImageClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void MLImageClassifier.FeatureExtractorType.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v0 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_3(v5, v8);
  if (OUTLINED_FUNCTION_51_2() == 1)
  {
    OUTLINED_FUNCTION_53_2();
    v6 = (unint64_t *)&v3[*(int *)(v0 + 20)];
    if (v6[1])
      v7 = *v6;
    else
      v7 = OUTLINED_FUNCTION_39_1();
    OUTLINED_FUNCTION_6_2(v7);
    OUTLINED_FUNCTION_84();
    swift_bridgeObjectRelease();
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)v3, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else
  {
    OUTLINED_FUNCTION_21_1();
  }
  OUTLINED_FUNCTION_164();
}

void MLImageClassifier.FeatureExtractorType.playgroundDescription.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[2];

  v3 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  v8 = OUTLINED_FUNCTION_16_3();
  outlined init with copy of MLImageClassifier.FeatureExtractorType(v8, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor(v1, (uint64_t)v6);
    v10 = (unint64_t *)&v6[*(int *)(v3 + 20)];
    if (v10[1])
    {
      v11 = *v10;
      v12 = v10[1];
    }
    else
    {
      v12 = 0x800000021AFF19F0;
      v11 = 0xD000000000000015;
    }
    strcpy((char *)v16, "Custom model: ");
    HIBYTE(v16[1]) = -18;
    v15 = v12;
    String.append(_:)(*(Swift::String *)&v11);
    v14 = v16[0];
    v13 = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)v6, type metadata accessor for MLImageClassifier.CustomFeatureExtractor);
  }
  else
  {
    v13 = 0xEA0000000000746ELL;
    v14 = 0x697250656E656353;
  }
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = v14;
  a1[1] = v13;
  OUTLINED_FUNCTION_164();
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.FeatureExtractorType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for MLImageClassifier.FeatureExtractorType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for MLImageClassifier.FeatureExtractorType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = *((_QWORD *)v9 + 1);
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *((_QWORD *)v8 + 1) = v10;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for MLImageClassifier.FeatureExtractorType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = *(int *)(type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0) + 20);
      v8 = &a1[v7];
      v9 = &a2[v7];
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t outlined destroy of MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for MLImageClassifier.FeatureExtractorType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
    *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for MLImageClassifier.FeatureExtractorType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
      *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLImageClassifier.FeatureExtractorType()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.CustomFeatureExtractor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MLImageClassifier.CustomFeatureExtractor(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for MLImageClassifier.CustomFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.CustomFeatureExtractor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE0DACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;
  int v9;

  v6 = OUTLINED_FUNCTION_78();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  v9 = v8 - 1;
  if (v9 < 0)
    v9 = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.CustomFeatureExtractor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AE0DB5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_78();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
    OUTLINED_FUNCTION_125();
  }
}

uint64_t type metadata completion function for MLImageClassifier.CustomFeatureExtractor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t type metadata accessor for MLModel()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MLModel;
  if (!lazy cache variable for type metadata for MLModel)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MLModel);
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  *(_QWORD *)(v5 + 16) = a1 + 1;
  type metadata accessor for NeuralNetwork.Layer();
  OUTLINED_FUNCTION_55_2();
  return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 32))(v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * a1, a2);
}

uint64_t OUTLINED_FUNCTION_1_4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 2;
  return swift_willThrow(0.0);
}

uint64_t OUTLINED_FUNCTION_5_3()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(v4 - 412) = v0;
  *(_QWORD *)(v4 - 408) = v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96))(v2, v1);
}

void OUTLINED_FUNCTION_6_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  strcpy((char *)(v2 - 64), "Custom model: ");
  *(_BYTE *)(v2 - 49) = -18;
  v3 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_9_3@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return outlined init with copy of MLImageClassifier.FeatureExtractorType(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_10_2()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_11_3()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x64616574736E6920;
  v0._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_14_3(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

void OUTLINED_FUNCTION_15_3()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_16_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_19_2@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_23_2@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_24_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_26_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_30_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_32_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
}

unint64_t OUTLINED_FUNCTION_39_1()
{
  return 0xD000000000000015;
}

uint64_t OUTLINED_FUNCTION_40_2(uint64_t a1)
{
  uint64_t v1;

  return specialized Collection.first.getter(a1, v1);
}

void OUTLINED_FUNCTION_43_2(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_49_1()
{
  return Model.inputs.getter();
}

uint64_t OUTLINED_FUNCTION_51_2()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_53_2()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of MLImageClassifier.CustomFeatureExtractor(v1, v0);
}

void OUTLINED_FUNCTION_56_1(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t static _ValidationUtilities.validateTableTypes(table:columns:type:)(uint64_t a1, _QWORD *a2, char *a3)
{
  void *v3;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v24;
  char v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v29;
  unint64_t v30;
  void *v31;

  v5 = *(void **)a1;
  v24 = *(_BYTE *)(a1 + 8);
  v25 = *a3;
  v29 = 0;
  v30 = 0xE000000000000000;
  v31 = v5;
  v27._countAndFlagsBits = (uint64_t)v5;
  LOBYTE(v27._object) = v24;
  if (MLDataTable.size.getter() < 1)
  {
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_56_1(23, v12);
  }
  else if (a2[2])
  {
    OUTLINED_FUNCTION_31_2();
    v6 = (void *)a2[5];
    v26 = a2[4];
    if ((v24 & 1) != 0)
    {
      outlined copy of Result<_DataTable, Error>(v31, 1);
      OUTLINED_FUNCTION_23_3();
      OUTLINED_FUNCTION_17_3();
    }
    OUTLINED_FUNCTION_12_3(v31);
    OUTLINED_FUNCTION_12_3(v31);
    OUTLINED_FUNCTION_23_3();
    swift_retain();
    CMLTable.row(at:)(0);
    if (v3)
    {

      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_17_3();
    }
    OUTLINED_FUNCTION_4_2();
    v7 = v31;
    OUTLINED_FUNCTION_12_3(v31);
    _DataTable.columnNames.getter(&v27);
    OUTLINED_FUNCTION_16_4();
    OUTLINED_FUNCTION_12_3(v7);
    v8 = _DataTable.columnIndexes.getter();
    outlined consume of Result<_DataTable, Error>(v7, 0);
    outlined consume of Result<_DataTable, Error>(v7, 0);
    OUTLINED_FUNCTION_16_4();
    if (*(_QWORD *)(v8 + 16))
    {
      OUTLINED_FUNCTION_23_3();
      v9 = specialized __RawDictionaryStorage.find<A>(_:)(v26, (uint64_t)v6);
      if ((v10 & 1) != 0)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
        OUTLINED_FUNCTION_123();
        swift_retain_n();
        CMLSequence.value(at:)(v11);
        OUTLINED_FUNCTION_79();
        MLDataValue.init(_:)();
        OUTLINED_FUNCTION_10_3();
        OUTLINED_FUNCTION_24_2();
        swift_release_n();
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_79();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_24_2();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_79();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_24_2();
    }
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(21);
    v13._countAndFlagsBits = v26;
    v13._object = v6;
    String.append(_:)(v13);
    OUTLINED_FUNCTION_123();
    v14._countAndFlagsBits = 0x7369206570797420;
    v14._object = (void *)0xEF206120746F6E20;
    String.append(_:)(v14);
    specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v25);
    v15._countAndFlagsBits = 2606;
    v15._object = (void *)0xE200000000000000;
    String.append(_:)(v15);
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
  }
  v17 = v29;
  v16 = v30;
  v18 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0)
    v18 = v29 & 0xFFFFFFFFFFFFLL;
  if (!v18)
    return OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_52_1();
  v19 = static os_log_type_t.error.getter();
  OUTLINED_FUNCTION_27_3(v17, v20, v19);
  OUTLINED_FUNCTION_30();
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v21 = OUTLINED_FUNCTION_49_0();
  *v22 = v17;
  v22[1] = v16;
  return OUTLINED_FUNCTION_1_5(v21, (uint64_t)v22);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v13;
    v4 = *(_QWORD *)(type metadata accessor for AnyColumn() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = AnyColumn.name.getter();
      v9 = v8;
      v10 = *(_QWORD *)(v13 + 16);
      if (v10 >= *(_QWORD *)(v13 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = v13 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v31;
  uint64_t v32;
  Swift::String v33;
  os_log_type_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;

  v41 = a4;
  v44 = a5;
  v38 = a2;
  v39 = a3;
  v8 = type metadata accessor for URL.DirectoryHint();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v36 - v17;
  if ((URL.isFileURL.getter() & 1) != 0)
  {
    v36 = v13;
    v37 = v12;
    v19 = v41;
    v20 = v44;
    if ((URL.hasDirectoryPath.getter() & 1) != 0)
    {
      v42 = v38;
      v43 = v39;
      (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BDCD7A0], v8);
      lazy protocol witness table accessor for type String and conformance String();
      URL.appending<A>(component:directoryHint:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      URL.appendingPathExtension(_:)();
      v21 = v37;
      v22 = (uint64_t)v16;
      v23 = v36;
      OUTLINED_FUNCTION_34_2(v22, *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
      v24 = a6;
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a6, v18, v21);
      OUTLINED_FUNCTION_5_4();
      _StringGuts.grow(_:)(69);
      OUTLINED_FUNCTION_15_4(0xD000000000000041, (uint64_t)"No file name specified for saving the model, using default name '");
      v25._countAndFlagsBits = URL.lastPathComponent.getter();
      String.append(_:)(v25);
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_32_2();
      v26 = static os_log_type_t.info.getter();
      OUTLINED_FUNCTION_18_3(v26);
      OUTLINED_FUNCTION_101();
    }
    else
    {
      v23 = v36;
      v24 = a6;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(a6, a1, v37);
    }
    v28 = v40;
    if (URL.pathExtension.getter() == v19 && v29 == v20)
    {
      OUTLINED_FUNCTION_10_3();
    }
    else
    {
      v31 = OUTLINED_FUNCTION_8_3();
      OUTLINED_FUNCTION_30();
      if ((v31 & 1) == 0)
      {
        OUTLINED_FUNCTION_5_4();
        _StringGuts.grow(_:)(72);
        OUTLINED_FUNCTION_27_2();
        OUTLINED_FUNCTION_56_1(19, v32);
        v33._countAndFlagsBits = v19;
        v33._object = v20;
        String.append(_:)(v33);
        OUTLINED_FUNCTION_15_4(0xD000000000000033, (uint64_t)" for saving the model, appending that to file name.");
        v34 = static os_log_type_t.info.getter();
        OUTLINED_FUNCTION_18_3(v34);
        OUTLINED_FUNCTION_101();
        v35._countAndFlagsBits = v19;
        v35._object = v20;
        URL.appendPathExtension(_:)(v35);
      }
    }
    static _FileUtilities.prepareForWriting(to:isDirectory:)(v24, 0);
    if (v28)
      OUTLINED_FUNCTION_34_2(v24, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  }
  else
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v27 = 0xD000000000000027;
    *(_QWORD *)(v27 + 8) = 0x800000021AFF1D50;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_BYTE *)(v27 + 48) = 0;
    swift_willThrow(0.0);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  os_log_type_t v16;
  Swift::String v17;
  Swift::String v18;
  NSString v19;
  id v20;

  v6 = a2;
  v7 = a1;
  swift_bridgeObjectRetain();
  v8 = specialized BidirectionalCollection.last.getter(v7, (unint64_t)v6);
  if (v9)
  {
    if (v8 == 47 && v9 == 0xE100000000000000)
    {
      OUTLINED_FUNCTION_80();
    }
    else
    {
      v11 = OUTLINED_FUNCTION_8_3();
      OUTLINED_FUNCTION_80();
      if ((v11 & 1) == 0)
        goto LABEL_10;
    }
    OUTLINED_FUNCTION_31_2();
    v12._countAndFlagsBits = 0x6C65646F6D6C6D2ELL;
    v12._object = (void *)0xE800000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = a3;
    v13._object = a4;
    String.append(_:)(v13);
    OUTLINED_FUNCTION_10_3();
    _StringGuts.grow(_:)(69);
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_56_1(65, v14);
    v15._countAndFlagsBits = a3;
    v15._object = a4;
    String.append(_:)(v15);
    OUTLINED_FUNCTION_32_2();
    v16 = static os_log_type_t.info.getter();
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    log(_:type:)(v17, v16);
    OUTLINED_FUNCTION_12_0();
    v7 = a1;
    v6 = a2;
  }
LABEL_10:
  type metadata accessor for NSString();
  v18._countAndFlagsBits = v7;
  v18._object = v6;
  v19 = NSString.__allocating_init(string:)(v18);
  v20 = objc_msgSend(v19, sel_stringByExpandingTildeInPath);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  URL.init(fileURLWithPath:)();
  return OUTLINED_FUNCTION_104();
}

uint64_t static _ValidationUtilities.validateTableFormat(table:context:columns:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v4;
  void *v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v5 = v4;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    outlined copy of Result<_DataTable, Error>(*(id *)a1, 1);
    OUTLINED_FUNCTION_17_3();
  }
  OUTLINED_FUNCTION_12_3(*(void **)a1);
  _DataTable.columnNames.getter(&v44);
  OUTLINED_FUNCTION_16_4();
  v9 = 0xE000000000000000;
  v44 = 0;
  v45 = 0xE000000000000000;
  v43 = *(_QWORD *)(a4 + 16);
  if (v43)
  {
    v41._countAndFlagsBits = a2;
    v41._object = a3;
    v10 = a4 + 32;
    swift_bridgeObjectRetain();
    v11 = 0;
    v42 = a4 + 32;
    while (1)
    {
      v12 = (uint64_t *)(v10 + 16 * v11);
      v14 = *v12;
      v13 = (void *)v12[1];
      swift_retain_n();
      swift_bridgeObjectRetain();
      v15 = OUTLINED_FUNCTION_28_2();
      OUTLINED_FUNCTION_5_1(v15);
      v17 = v16;
      OUTLINED_FUNCTION_81();
      if (!v17)
        break;
      v18 = 0;
      ++v11;
      while (1)
      {
        CMLSequence.value(at:)(v18);
        if (v5)
        {
          swift_unexpectedError();
          __break(1u);
LABEL_30:

          OUTLINED_FUNCTION_4_2();
          _StringGuts.grow(_:)(37);
          swift_bridgeObjectRelease();
          v46 = v18;
          v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v39);
          OUTLINED_FUNCTION_123();
          v40._countAndFlagsBits = 46;
          v40._object = (void *)0xE100000000000000;
          String.append(_:)(v40);
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_31:
          JUMPOUT(0x21AE0EC58);
        }
        v19 = CMLFeatureValue.stringValue()();
        v5 = v20;
        if (v20)
          goto LABEL_30;
        OUTLINED_FUNCTION_4_2();
        swift_retain();
        v21 = OUTLINED_FUNCTION_28_2();
        OUTLINED_FUNCTION_5_1(v21);
        v23 = v22;
        OUTLINED_FUNCTION_81();
        if (v18 >= v23)
        {
          __break(1u);
          goto LABEL_31;
        }
        if (v19._countAndFlagsBits == v14 && v19._object == v13)
        {
          OUTLINED_FUNCTION_81();
          swift_bridgeObjectRelease_n();
          goto LABEL_19;
        }
        v25 = OUTLINED_FUNCTION_8_3();
        OUTLINED_FUNCTION_12_0();
        if ((v25 & 1) != 0)
          break;
        ++v18;
        swift_retain();
        v26 = OUTLINED_FUNCTION_28_2();
        OUTLINED_FUNCTION_5_1(v26);
        v28 = v27;
        OUTLINED_FUNCTION_81();
        if (v18 == v28)
          goto LABEL_21;
      }
      OUTLINED_FUNCTION_80();
      OUTLINED_FUNCTION_81();
LABEL_19:
      v10 = v42;
      if (v11 == v43)
      {
        swift_bridgeObjectRelease();
        v29 = 0;
        v9 = 0xE000000000000000;
        goto LABEL_23;
      }
    }
LABEL_21:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_81();
    _StringGuts.grow(_:)(54);
    String.append(_:)(v41);
    OUTLINED_FUNCTION_0_6();
    v30._countAndFlagsBits = v14;
    v30._object = v13;
    String.append(_:)(v30);
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_27_2();
    String.append(_:)(v31);
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    String.append(_:)(v32);
    OUTLINED_FUNCTION_12_0();
    v29 = v44;
    v9 = v45;
  }
  else
  {
    v29 = 0;
  }
LABEL_23:
  v33 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v33 = v29 & 0xFFFFFFFFFFFFLL;
  if (v33)
  {
    OUTLINED_FUNCTION_52_1();
    v34 = static os_log_type_t.error.getter();
    OUTLINED_FUNCTION_27_3(v29, v35, v34);
    OUTLINED_FUNCTION_30();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v36 = OUTLINED_FUNCTION_49_0();
    *v37 = v29;
    v37[1] = v9;
    OUTLINED_FUNCTION_1_5(v36, (uint64_t)v37);
    return OUTLINED_FUNCTION_81();
  }
  else
  {
    OUTLINED_FUNCTION_81();
    return OUTLINED_FUNCTION_30();
  }
}

uint64_t static _ValidationUtilities.validateTableTypes(table:featureColumns:featureType:labelColumn:labelType:)(uint64_t *a1, _QWORD *a2, char *a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v6;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t result;
  uint64_t inited;
  char v15;
  uint64_t v16;
  char v17;

  v9 = *a1;
  v10 = *((_BYTE *)a1 + 8);
  v11 = *a3;
  v12 = *a6;
  v16 = *a1;
  v17 = v10;
  v15 = v11;
  result = static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v16, a2, &v15);
  if (!v6)
  {
    v16 = v9;
    v17 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(inited + 32) = a4;
    *(_QWORD *)(inited + 40) = a5;
    v15 = v12;
    OUTLINED_FUNCTION_52_1();
    static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v16, (_QWORD *)inited, &v15);
    swift_setDeallocating();
    return specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataFrame.validateContainsColumns(_:context:)(Swift::OpaquePointer _, Swift::String context)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  Swift::String v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  Swift::String v31;
  uint64_t v32;
  char *v33;

  object = context._object;
  countAndFlagsBits = context._countAndFlagsBits;
  v5 = DataFrame.columns.getter();
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v5);
  OUTLINED_FUNCTION_30();
  v7 = specialized Set.init<A>(_:)(MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  v8 = v7;
  v32 = *((_QWORD *)_._rawValue + 2);
  if (v32)
  {
    v31._countAndFlagsBits = countAndFlagsBits;
    v31._object = object;
    v33 = (char *)_._rawValue + 32;
    v9 = v7 + 56;
    OUTLINED_FUNCTION_31_2();
    v10 = 0;
    while (1)
    {
      v11 = (uint64_t *)&v33[16 * v10];
      v13 = *v11;
      v12 = (void *)v11[1];
      if (!*(_QWORD *)(v8 + 16))
      {
        swift_bridgeObjectRetain();
        goto LABEL_22;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
        goto LABEL_22;
      v17 = *(_QWORD *)(v8 + 48);
      v18 = (_QWORD *)(v17 + 16 * v16);
      v19 = *v18 == v13 && v18[1] == (_QWORD)v12;
      if (!v19 && (OUTLINED_FUNCTION_8_3() & 1) == 0)
        break;
LABEL_10:
      ++v10;
      OUTLINED_FUNCTION_104();
      if (v10 == v32)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    v20 = ~v15;
    for (i = v16 + 1; ; i = v22 + 1)
    {
      v22 = i & v20;
      if (((*(_QWORD *)(v9 + (((i & v20) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v20)) & 1) == 0)
        break;
      v23 = (_QWORD *)(v17 + 16 * v22);
      v24 = *v23 == v13 && v23[1] == (_QWORD)v12;
      if (v24 || (OUTLINED_FUNCTION_8_3() & 1) != 0)
        goto LABEL_10;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(53);
    String.append(_:)(v31);
    OUTLINED_FUNCTION_0_6();
    v25._countAndFlagsBits = v13;
    v25._object = v12;
    String.append(_:)(v25);
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_56_1(35, v26);
    v27 = static os_log_type_t.error.getter();
    OUTLINED_FUNCTION_27_3(0, v28, v27);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v29 = OUTLINED_FUNCTION_49_0();
    *v30 = 0;
    v30[1] = 0xE000000000000000;
    OUTLINED_FUNCTION_1_5(v29, (uint64_t)v30);
  }
  else
  {
LABEL_20:
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataFrame.validateColumnTypes(_:_:context:)(Swift::String _, Swift::OpaquePointer a2, Swift::String context)
{
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  void *v23;
  uint64_t v24;
  os_log_type_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD v29[2];
  void *object;
  Swift::Int_optional v31;

  object = context._object;
  countAndFlagsBits = context._countAndFlagsBits;
  v5 = _._object;
  v6 = _._countAndFlagsBits;
  v7 = type metadata accessor for AnyColumn();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11._countAndFlagsBits = v6;
  v11._object = v5;
  v31 = DataFrame.indexOfColumn(_:)(v11);
  if (v31.is_nil)
  {
    OUTLINED_FUNCTION_5_4();
    _StringGuts.grow(_:)(53);
    v22._countAndFlagsBits = countAndFlagsBits;
    v22._object = object;
    String.append(_:)(v22);
    OUTLINED_FUNCTION_0_6();
    OUTLINED_FUNCTION_25_1();
    OUTLINED_FUNCTION_27_2();
    v20 = 0xD000000000000023;
    goto LABEL_11;
  }
  DataFrame.subscript.getter();
  v12 = AnyColumn.wrappedElementType.getter();
  OUTLINED_FUNCTION_34_2((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  v13 = *((_QWORD *)a2._rawValue + 2);
  v14 = object;
  if (!v13)
    goto LABEL_9;
  if (*((_QWORD *)a2._rawValue + 4) == v12)
  {
LABEL_12:
    OUTLINED_FUNCTION_7();
    return;
  }
  if (v13 == 1)
  {
LABEL_9:
    OUTLINED_FUNCTION_5_4();
    _StringGuts.grow(_:)(68);
    v17._countAndFlagsBits = countAndFlagsBits;
    v17._object = v14;
    String.append(_:)(v17);
    OUTLINED_FUNCTION_0_6();
    OUTLINED_FUNCTION_25_1();
    OUTLINED_FUNCTION_15_4(0xD00000000000002FLL, (uint64_t)"' does not contain elements with a type among: ");
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
    v19._countAndFlagsBits = MEMORY[0x22075AAA4](a2._rawValue, v18);
    String.append(_:)(v19);
    OUTLINED_FUNCTION_123();
    v20 = 46;
    v21 = 0xE100000000000000;
LABEL_11:
    String.append(_:)(*(Swift::String *)&v20);
    v24 = v29[0];
    v23 = (void *)v29[1];
    v25 = static os_log_type_t.error.getter();
    v26._countAndFlagsBits = v24;
    v26._object = v23;
    log(_:type:)(v26, v25);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v27 = OUTLINED_FUNCTION_49_0();
    *v28 = v24;
    v28[1] = (uint64_t)v23;
    OUTLINED_FUNCTION_1_5(v27, (uint64_t)v28);
    goto LABEL_12;
  }
  v15 = 5;
  while (1)
  {
    v16 = v15 - 3;
    if (__OFADD__(v15 - 4, 1))
      break;
    if (*((_QWORD *)a2._rawValue + v15) == v12)
      goto LABEL_12;
    ++v15;
    if (v16 == v13)
      goto LABEL_9;
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataFrame.validateColumnIsNumeric(_:context:)(Swift::String _, Swift::String context)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;

  object = context._object;
  countAndFlagsBits = context._countAndFlagsBits;
  v4 = _._object;
  v5 = _._countAndFlagsBits;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
  v6 = swift_allocObject();
  v7 = MEMORY[0x24BEE14E8];
  v8 = MEMORY[0x24BEE13C8];
  *(_OWORD *)(v6 + 16) = xmmword_21AFE7F40;
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v8;
  *(_QWORD *)(v6 + 48) = MEMORY[0x24BEE1768];
  v9._countAndFlagsBits = v5;
  v9._object = v4;
  v10._countAndFlagsBits = countAndFlagsBits;
  v10._object = object;
  DataFrame.validateColumnTypes(_:_:context:)(v9, (Swift::OpaquePointer)v6, v10);
  OUTLINED_FUNCTION_80();
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BEE5E60], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void OUTLINED_FUNCTION_0_6()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x206E6D756C6F6320;
  v0._object = (void *)0xEE002720656D616ELL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_1_5(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 1;
  return swift_willThrow(0.0);
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_5_4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0;
  *(_QWORD *)(v0 - 88) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_10_3()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_12_3(void *a1)
{
  return outlined copy of Result<_DataTable, Error>(a1, 0);
}

void OUTLINED_FUNCTION_15_4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_16_4()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
}

void OUTLINED_FUNCTION_17_3()
{
  JUMPOUT(0x22075BB18);
}

void OUTLINED_FUNCTION_18_3(os_log_type_t type)
{
  uint64_t v1;
  void *v2;
  Swift::String v4;

  v4._countAndFlagsBits = v1;
  v4._object = v2;
  log(_:type:)(v4, type);
}

uint64_t OUTLINED_FUNCTION_22_0()
{
  return type metadata accessor for CMLSequence();
}

uint64_t OUTLINED_FUNCTION_23_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_24_2()
{
  return swift_release();
}

void OUTLINED_FUNCTION_25_1()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void OUTLINED_FUNCTION_27_3(uint64_t a1, uint64_t a2, os_log_type_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  log(_:type:)(*(Swift::String *)&a1, a3);
}

uint64_t OUTLINED_FUNCTION_28_2()
{
  return CMLSequence.size.getter();
}

uint64_t OUTLINED_FUNCTION_31_2()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_32_2()
{
  Swift::String v0;

  v0._countAndFlagsBits = 11815;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_34_2@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t NSFileManager.temporaryModelDirectory.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSString *v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_5();
  v3 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileManager.createTemporaryModelDirectory()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  NSURL *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(void *, uint64_t);
  id v12;
  id v13;
  double v14;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_5();
  NSFileManager.temporaryModelDirectory.getter();
  v3 = URL.path.getter();
  v4 = (void *)MEMORY[0x22075A8AC](v3);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v0, sel_fileExistsAtPath_, v4);

  if ((v5 & 1) != 0)
  {
    (*(void (**)(void *, uint64_t))(v2 + 8))(v0, v1);
  }
  else
  {
    URL._bridgeToObjectiveC()(v6);
    v8 = v7;
    type metadata accessor for NSFileAttributeKey(0);
    lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
    v9 = Dictionary.init(dictionaryLiteral:)();
    v15[0] = 0;
    v10 = outlined bridged method (mnnbnnn) of @objc NSFileManager.createDirectory(at:withIntermediateDirectories:attributes:)((uint64_t)v8, 1, v9, (uint64_t)v15, v0);

    if ((v10 & 1) != 0)
    {
      v11 = *(void (**)(void *, uint64_t))(v2 + 8);
      v12 = v15[0];
      v11(v0, v1);
    }
    else
    {
      v13 = v15[0];
      _convertNSErrorToError(_:)();

      swift_willThrow(v14);
      (*(void (**)(void *, uint64_t))(v2 + 8))(v0, v1);
    }
  }
}

unint64_t lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey;
  if (!lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey)
  {
    type metadata accessor for NSFileAttributeKey(255);
    result = MEMORY[0x22075B938](&protocol conformance descriptor for NSFileAttributeKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey);
  }
  return result;
}

id outlined bridged method (mnnbnnn) of @objc NSFileManager.createDirectory(at:withIntermediateDirectories:attributes:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa;
  id v10;

  type metadata accessor for NSFileAttributeKey(0);
  lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(a5, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, a1, a2 & 1, isa, a4);

  return v10;
}

uint64_t static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t result;
  uint64_t v14;

  v9 = type metadata accessor for MLHandActionClassifier.DataSource();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _TablePrinter(a1, (uint64_t)v11, v12);
  result = MLHandActionClassifier.FeatureExtractor.__allocating_init(source:)((uint64_t)v11);
  if (!v4)
  {
    MLHandActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:startingSessionId:)(a2, a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t MLHandActionClassifier.FeatureExtractor.__allocating_init(source:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  MLHandActionClassifier.DataSource.videosWithAnnotations()();
  result = outlined destroy of MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
  if (!v1)
  {
    result = swift_allocObject();
    v4 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(result + 32) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(result + 40) = v4;
    *(_QWORD *)(result + 48) = v4;
    *(_QWORD *)(result + 56) = v4;
    *(_QWORD *)(result + 16) = v5;
    *(_BYTE *)(result + 24) = v6;
  }
  return result;
}

uint64_t MLHandActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:startingSessionId:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t object;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  int v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint8_t *v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  void (*v29)(char *, NSObject *, uint64_t);
  id v30;
  char v31;
  uint64_t v32;
  CMTimeValue v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  void *v44;
  char v45;
  char v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  void *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  CMTimeEpoch v70;
  CMTimeValue v71;
  __int128 v72;
  id v73;
  __int128 v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  CMTimeValue v78;
  double v79;
  NSObject *v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  NSObject *v84;
  NSObject *v85;
  os_log_type_t v86;
  const char *v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  CMTimeValue v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  void *v96;
  void *v97;
  double v98;
  Float64 v99;
  __int128 v100;
  __int128 v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  CMTimeValue v105;
  uint8_t *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  Swift::String v114;
  void *v115;
  uint64_t v116;
  char *v117;
  char v119;
  uint64_t v120;
  char *v121;
  char *v122;
  CMTimeValue v123;
  CMTimeEpoch v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  CMTimeValue v131;
  NSObject *v132;
  os_log_type_t v133;
  uint64_t v134;
  NSObject *v135;
  NSObject *v136;
  os_log_type_t v137;
  const char *v138;
  unint64_t v139;
  char v140;
  uint64_t v141;
  CMTimeValue v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  void *v146;
  void *v147;
  double v148;
  Float64 v149;
  NSObject *v150;
  os_log_type_t v151;
  uint8_t *v152;
  CMTimeValue v153;
  CMTimeValue v154;
  CMTimeValue v155;
  uint8_t *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  void *v164;
  unint64_t v165;
  unint64_t v166;
  NSObject *v167;
  os_log_type_t v168;
  uint64_t v169;
  CMTimeValue v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  Float64 v174;
  NSObject *v175;
  os_log_type_t v176;
  NSObject *v177;
  CMTimeEpoch v178;
  uint64_t v179;
  NSObject *v180;
  os_log_type_t v181;
  NSObject *v182;
  CMTimeValue v183;
  uint64_t v184;
  NSObject *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t inited;
  CMTimeValue *v190;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v192;
  char v193;
  uint64_t *v194;
  uint64_t v195;
  char v196;
  char v197;
  char **v198;
  uint64_t v199;
  char v200;
  char v201;
  uint64_t *v202;
  uint64_t v203;
  char v204;
  char v205;
  uint64_t v206;
  char v207;
  _QWORD *v208;
  uint64_t v209;
  NSObject *v210;
  Swift::String v211;
  Swift::String v212;
  Swift::String v213;
  CMTimeValue v214;
  uint64_t v215;
  uint64_t v216;
  Swift::String v218;
  NSObject *v219;
  CMTimeValue v220;
  uint64_t v221;
  uint64_t v222;
  Swift::String v223;
  Swift::String v224;
  uint64_t v225;
  CMTimeValue v226;
  __int128 v227;
  CMTimeValue v228;
  _QWORD *v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  uint64_t v233;
  uint64_t *v234;
  CMTimeEpoch v235;
  CMTimeValue v236;
  CMTimeEpoch v237;
  CMTimeValue v238;
  __int128 v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  CMTimeValue *v246;
  uint64_t *v247;
  char **v248;
  uint64_t *v249;
  __int128 v250;
  CMTimeEpoch v251;
  void *v252;
  id v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  id v259;
  int v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  NSObject *v264;
  CMTimeValue value;
  uint64_t v266;
  char v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  CMTime v271;
  id v272;
  char v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t epoch;

  v5 = v4;
  v6 = v3;
  v241 = a1;
  v229 = a2;
  v8 = type metadata accessor for URL();
  v242 = *(_QWORD *)(v8 - 8);
  v243 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v262 = (uint64_t)&v225 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  epoch = type metadata accessor for Date();
  value = *(_QWORD *)(epoch - 8);
  MEMORY[0x24BDAC7A8](epoch);
  v264 = ((char *)&v225 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  object = type metadata accessor for _TablePrinter(0);
  MEMORY[0x24BDAC7A8](object);
  v245 = (uint64_t *)((char *)&v225 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v225 - v14);
  v16 = *(void **)(v3 + 16);
  v17 = *(unsigned __int8 *)(v3 + 24);
  v272 = v16;
  v273 = v17;
  outlined copy of Result<_DataTable, Error>(v16, v17);
  MLDataTable.size.getter();
  v18 = (char *)specialized RandomAccessCollection<>.distance(from:to:)();
  v259 = v16;
  v260 = v17;
  outlined consume of Result<_DataTable, Error>(v16, v17);
  if (one-time initialization token for logger != -1)
LABEL_147:
    swift_once();
  v19 = type metadata accessor for Logger();
  v254 = __swift_project_value_buffer(v19, (uint64_t)static MLHandActionClassifier.logger);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.info.getter();
  v22 = os_log_type_enabled(v20, v21);
  v255 = v15;
  if (v22)
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v23 = 134217984;
    v272 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_21ADEE000, v20, v21, "Processing %ld annotated video clips", v23, 0xCu);
    v24 = v23;
    v15 = v255;
    MEMORY[0x22075BA10](v24, -1, -1);
  }

  v25 = (char *)v15 + *(int *)(object + 20);
  Date.init()();
  *v15 = v18;
  type metadata accessor for OS_os_log();
  v26 = OS_os_log.init(subsystem:category:)();
  v231 = *(int *)(object + 24);
  *(_QWORD *)((char *)v15 + v231) = v26;
  v27 = (_QWORD *)((char *)v15 + *(int *)(object + 28));
  *v27 = 0xD000000000000015;
  v27[1] = 0x800000021AFF1E80;
  v28 = v264;
  Date.init()();
  v29 = *(void (**)(char *, NSObject *, uint64_t))(value + 40);
  v240 = v25;
  v29(v25, v28, epoch);
  _TablePrinter.beginTable()();
  _TablePrinter.printRow(currentFileIndex:)(0);
  v30 = v259;
  v272 = v259;
  v31 = v260;
  v273 = v260;
  v247 = (uint64_t *)(v6 + 48);
  v248 = (char **)(v6 + 32);
  v246 = (CMTimeValue *)(v6 + 40);
  v249 = (uint64_t *)(v6 + 56);
  v274 = 0;
  v275 = 0;
  outlined copy of Result<_DataTable, Error>(v259, v260);
  v271.value = (CMTimeValue)v30;
  LOBYTE(v271.timescale) = v31;
  if (MLDataTable.size.getter())
  {
    v32 = 0;
    v33 = *MEMORY[0x24BDC0D88];
    v234 = &v270;
    v34 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 8);
    v237 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 16);
    v238 = v33;
    v236 = *MEMORY[0x24BDC0D30];
    v35 = *(_QWORD *)(MEMORY[0x24BDC0D30] + 8);
    v235 = *(_QWORD *)(MEMORY[0x24BDC0D30] + 16);
    v233 = MEMORY[0x24BEE4AD8] + 8;
    *((_QWORD *)&v36 + 1) = 2;
    v239 = xmmword_21AFE7DA0;
    *(_QWORD *)&v36 = 134218498;
    v232 = v36;
    *(_QWORD *)&v36 = 136315138;
    v230 = v36;
    *(_QWORD *)&v36 = 134218242;
    v227 = v36;
    v37 = v30;
    while (1)
    {
      MLDataTable.Rows.subscript.getter(v32, &v271);
      v38 = *(_QWORD *)&v271.timescale;
      value = v271.value;
      epoch = v271.epoch;
      outlined copy of Result<_DataTable, Error>(v37, v31 & 1);
      v39 = specialized RandomAccessCollection<>.index(after:)(v32);
      outlined consume of Result<_DataTable, Error>(v37, v31 & 1);
      v274 = v39;
      v40 = v275;
      if (__OFADD__(v275, 1))
        break;
      ++v275;
      v18 = (char *)value;
      if (!*(_QWORD *)(v38 + 16))
        goto LABEL_137;
      v257 = (_QWORD *)v40;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(0x7461506F65646976, 0xE900000000000068);
      if ((v42 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_136;
      }
      v43 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v41);
      swift_retain_n();
      CMLSequence.value(at:)(v43);
      if (v5)
        goto LABEL_152;
      swift_release();
      MLDataValue.init(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      v44 = (void *)v271.value;
      v264 = *(NSObject **)&v271.timescale;
      v45 = v271.epoch;
      v46 = v260;
      if (LOBYTE(v271.epoch) != 2)
      {
        v210 = v264;
        goto LABEL_135;
      }
      if (!*(_QWORD *)(v38 + 16))
        goto LABEL_134;
      v261 = (void *)v271.value;
      v244 = v40 + 1;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v47 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C6562616CLL, 0xE500000000000000);
      if ((v48 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
LABEL_133:
        v44 = v261;
LABEL_134:
        v210 = v264;
        v45 = 2;
LABEL_135:
        outlined consume of MLDataValue(v44, v210, v45);
LABEL_136:
        v40 = (uint64_t)v257;
LABEL_137:
        v271.value = 0;
        *(_QWORD *)&v271.timescale = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v211._countAndFlagsBits = 0xD000000000000029;
        v211._object = (void *)0x800000021AFF1EA0;
        String.append(_:)(v211);
        v269 = v40;
        v212._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v212);
        swift_bridgeObjectRelease();
        v213._object = (void *)0xE900000000000065;
        v213._countAndFlagsBits = 0x6C626174206E6920;
        String.append(_:)(v213);
        v214 = v271.value;
        v215 = *(_QWORD *)&v271.timescale;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v216 = v214;
        *(_QWORD *)(v216 + 8) = v215;
        *(_OWORD *)(v216 + 16) = 0u;
        *(_OWORD *)(v216 + 32) = 0u;
        *(_BYTE *)(v216 + 48) = 0;
        swift_willThrow(0.0);
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_138;
      }
      v49 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v47);
      swift_retain_n();
      CMLSequence.value(at:)(v49);
      swift_release();
      MLDataValue.init(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      if (LOBYTE(v271.epoch) != 2)
      {
        outlined consume of MLDataValue((void *)v271.value, *(id *)&v271.timescale, v271.epoch);
        goto LABEL_133;
      }
      v252 = (void *)v271.value;
      v253 = *(id *)&v271.timescale;
      v50 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v51 = v261;
      v52 = (void *)MEMORY[0x22075A8AC](v261, v264);
      object = (uint64_t)objc_msgSend(v50, sel_fileExistsAtPath_, v52);

      if ((object & 1) == 0)
      {
        outlined consume of MLDataValue(v252, v253, 2);
        v271.value = 0;
        *(_QWORD *)&v271.timescale = 0xE000000000000000;
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease();
        v271.value = 0xD000000000000018;
        *(_QWORD *)&v271.timescale = 0x800000021AFF1ED0;
        v218._countAndFlagsBits = (uint64_t)v51;
        v219 = v264;
        v218._object = v264;
        String.append(_:)(v218);
        outlined consume of MLDataValue(v51, v219, 2);
        v220 = v271.value;
        v221 = *(_QWORD *)&v271.timescale;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v222 = v220;
        *(_QWORD *)(v222 + 8) = v221;
        *(_OWORD *)(v222 + 16) = 0u;
        *(_OWORD *)(v222 + 32) = 0u;
        *(_BYTE *)(v222 + 48) = 0;
        swift_willThrow(0.0);
        swift_release();
        swift_bridgeObjectRelease();
LABEL_138:
        swift_release();
        goto LABEL_139;
      }
      URL.init(fileURLWithPath:)();
      v256 = URL.lastPathComponent.getter();
      v258 = v53;
      v18 = (char *)value;
      if ((v46 & 1) != 0)
      {
        outlined copy of Result<_DataTable, Error>(v30, 1);
        v54 = MEMORY[0x22075BB18](0);
        if (!v54)
        {
          __break(1u);
          goto LABEL_149;
        }
        v55 = v54;
        outlined consume of Result<_DataTable, Error>(v30, 1);
        type metadata accessor for CMLSequence();
        v56 = swift_allocObject();
        *(_QWORD *)(v56 + 16) = v55;
        *(_BYTE *)(v56 + 24) = 1;
        v269 = v56;
      }
      else
      {
        outlined copy of Result<_DataTable, Error>(v30, 0);
        _DataTable.columnNames.getter(&v269);
        outlined consume of Result<_DataTable, Error>(v30, 0);
      }
      v6 = 0x7472617473;
      swift_retain_n();
      v57 = CMLSequence.size.getter();
      specialized RandomAccessCollection<>.distance(from:to:)(0, v57);
      v59 = v58;
      swift_release();
      v263 = v38;
      if (!v59)
      {
        swift_release_n();
        goto LABEL_32;
      }
      v18 = 0;
      while (1)
      {
        CMLSequence.value(at:)((uint64_t)v18);
        v60 = CMLFeatureValue.stringValue()();
        v5 = v61;
        if (v61)
        {
          while (1)
          {
LABEL_151:

            swift_release();
            v271.value = 0;
            *(_QWORD *)&v271.timescale = 0xE000000000000000;
            _StringGuts.grow(_:)(37);
            swift_bridgeObjectRelease();
            v271.value = 0xD000000000000022;
            *(_QWORD *)&v271.timescale = 0x800000021AFF1560;
            v268 = v18;
            v223._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v223);
            swift_bridgeObjectRelease();
            v224._countAndFlagsBits = 46;
            v224._object = (void *)0xE100000000000000;
            String.append(_:)(v224);
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_152:
            swift_release();
LABEL_150:
            swift_unexpectedError();
            __break(1u);
          }
        }
        object = (uint64_t)v60._object;
        swift_release();
        swift_retain();
        v62 = CMLSequence.size.getter();
        specialized RandomAccessCollection<>.distance(from:to:)(0, v62);
        v64 = v63;
        swift_release();
        if ((uint64_t)v18 >= (uint64_t)v64)
        {
          __break(1u);
LABEL_144:
          __break(1u);
          outlined consume of MLDataValue(v252, v253, 2);
          outlined consume of MLDataValue((void *)v6, v64, 2);
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_142;
        }
        if (v60._countAndFlagsBits == 0x7472617473 && v60._object == (void *)0xE500000000000000)
        {
          swift_release_n();
          swift_bridgeObjectRelease();
          goto LABEL_35;
        }
        v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v66 & 1) != 0)
          break;
        ++v18;
        swift_retain();
        v67 = CMLSequence.size.getter();
        specialized RandomAccessCollection<>.distance(from:to:)(0, v67);
        v69 = v68;
        swift_release();
        if (v18 == v69)
        {
          swift_release_n();
          v70 = v237;
          v71 = v238;
          *(_QWORD *)&v72 = v34;
          v250 = v72;
          v73 = v259;
LABEL_30:
          v18 = (char *)value;
          goto LABEL_62;
        }
      }
      swift_release_n();
LABEL_35:
      object = v263;
      v73 = v259;
      v18 = (char *)value;
      if (!*(_QWORD *)(v263 + 16))
        goto LABEL_57;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v75 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
      if ((v76 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_43;
      }
      v77 = *(_QWORD *)(*(_QWORD *)(object + 56) + 8 * v75);
      swift_retain_n();
      CMLSequence.value(at:)(v77);
      swift_release();
      MLDataValue.init(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      v78 = v271.value;
      if (LOBYTE(v271.epoch) != 1)
      {
        outlined consume of MLDataValue((void *)v271.value, *(id *)&v271.timescale, v271.epoch);
        object = v263;
LABEL_43:
        v88 = v258;
        if (*(_QWORD *)(object + 16))
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          v89 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
          if ((v90 & 1) != 0)
          {
            v91 = *(_QWORD *)(*(_QWORD *)(object + 56) + 8 * v89);
            swift_retain_n();
            CMLSequence.value(at:)(v91);
            swift_release();
            MLDataValue.init(_:)();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release_n();
            v92 = v271.value;
            if (LOBYTE(v271.epoch))
            {
              outlined consume of MLDataValue((void *)v271.value, *(id *)&v271.timescale, v271.epoch);
              object = v263;
              goto LABEL_48;
            }
            if ((v271.value & 0x8000000000000000) == 0)
            {
              v79 = (double)v271.value;
              goto LABEL_55;
            }
            object = (uint64_t)v261;
            v175 = v264;
            outlined copy of MLDataValue(v261, v264, 2);
            outlined copy of MLDataValue((id)object, v175, 2);
            v81 = Logger.logObject.getter();
            v176 = static os_log_type_t.info.getter();
            if (!os_log_type_enabled(v81, v176))
              goto LABEL_118;
            v83 = swift_slowAlloc();
            v251 = swift_slowAlloc();
            v271.value = v251;
            *(_DWORD *)v83 = v227;
            v269 = v92;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v83 + 12) = 2080;
            v177 = v264;
            outlined copy of MLDataValue((id)object, v264, 2);
            v269 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(object, (unint64_t)v177, &v271.value);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            outlined consume of MLDataValue((void *)object, v177, 2);
            outlined consume of MLDataValue((void *)object, v177, 2);
            outlined consume of MLDataValue((void *)object, v177, 2);
            v85 = v81;
            v86 = v176;
            v87 = "Start time %ld specified in video file %s is negative, using 0.0 automatically.";
LABEL_117:
            _os_log_impl(&dword_21ADEE000, v85, v86, v87, (uint8_t *)v83, 0x16u);
            v178 = v251;
            swift_arrayDestroy();
            MEMORY[0x22075BA10](v178, -1, -1);
            v179 = v83;
            v18 = (char *)value;
            MEMORY[0x22075BA10](v179, -1, -1);
LABEL_119:

LABEL_32:
            v70 = v237;
            v71 = v238;
            *(_QWORD *)&v74 = v34;
            v250 = v74;
            v73 = v259;
            goto LABEL_62;
          }
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_48:
          v88 = v258;
          if (*(_QWORD *)(object + 16))
          {
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            v93 = specialized __RawDictionaryStorage.find<A>(_:)(0x7472617473, 0xE500000000000000);
            if ((v94 & 1) != 0)
            {
              v95 = *(_QWORD *)(*(_QWORD *)(object + 56) + 8 * v93);
              swift_retain_n();
              CMLSequence.value(at:)(v95);
              swift_release();
              MLDataValue.init(_:)();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release_n();
              v97 = (void *)v271.value;
              v96 = *(void **)&v271.timescale;
              if (LOBYTE(v271.epoch) == 2)
              {
                static _VideoUtilities.getSecondsFromTimeString(_:)(v271.value, *(void **)&v271.timescale);
                v99 = v98;
                outlined consume of MLDataValue(v97, v96, 2);
                CMTimeMakeWithSeconds(&v271, v99, 1000);
                v71 = v271.value;
                *(_QWORD *)&v100 = *(_QWORD *)&v271.timescale;
                v250 = v100;
                v70 = v271.epoch;
                goto LABEL_30;
              }
              outlined consume of MLDataValue((void *)v271.value, *(id *)&v271.timescale, v271.epoch);
              v18 = (char *)value;
            }
            else
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
            }
LABEL_57:
            v88 = v258;
          }
        }
        swift_bridgeObjectRetain_n();
        v102 = Logger.logObject.getter();
        v103 = static os_log_type_t.error.getter();
        object = v103;
        if (os_log_type_enabled(v102, v103))
        {
          v104 = (uint8_t *)swift_slowAlloc();
          v105 = swift_slowAlloc();
          v271.value = v105;
          *(_DWORD *)v104 = v230;
          swift_bridgeObjectRetain();
          v269 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v256, v88, &v271.value);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_21ADEE000, v102, (os_log_type_t)object, "Unsupported start time format in annotation file. Please provide either a Double or Int value in seconds, or a String value in hours:minutes:seconds.fraction, minutes:seconds.fraction, or seconds.fraction format. Skipping start time for file %s", v104, 0xCu);
          swift_arrayDestroy();
          v73 = v259;
          MEMORY[0x22075BA10](v105, -1, -1);
          v106 = v104;
          v18 = (char *)value;
          MEMORY[0x22075BA10](v106, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v70 = v237;
        v71 = v238;
        *(_QWORD *)&v107 = v34;
        v250 = v107;
        goto LABEL_62;
      }
      v79 = *(double *)&v271.value;
      if (*(double *)&v271.value < 0.0)
      {
        object = (uint64_t)v261;
        v80 = v264;
        outlined copy of MLDataValue(v261, v264, 2);
        outlined copy of MLDataValue((id)object, v80, 2);
        v81 = Logger.logObject.getter();
        v82 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v81, v82))
        {
          v83 = swift_slowAlloc();
          v251 = swift_slowAlloc();
          v271.value = v251;
          *(_DWORD *)v83 = v227;
          v269 = v78;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v83 + 12) = 2080;
          v84 = v264;
          outlined copy of MLDataValue((id)object, v264, 2);
          v269 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(object, (unint64_t)v84, &v271.value);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of MLDataValue((void *)object, v84, 2);
          outlined consume of MLDataValue((void *)object, v84, 2);
          outlined consume of MLDataValue((void *)object, v84, 2);
          v85 = v81;
          v86 = v82;
          v87 = "Start time %f specified in video file %s is negative, using 0.0 automatically.";
          goto LABEL_117;
        }
LABEL_118:
        v180 = v264;
        outlined consume of MLDataValue((void *)object, v264, 2);
        outlined consume of MLDataValue((void *)object, v180, 2);
        goto LABEL_119;
      }
LABEL_55:
      CMTimeMakeWithSeconds(&v271, v79, 1000);
      v71 = v271.value;
      *(_QWORD *)&v101 = *(_QWORD *)&v271.timescale;
      v250 = v101;
      v70 = v271.epoch;
LABEL_62:
      v251 = v70;
      if ((v260 & 1) != 0)
      {
        outlined copy of Result<_DataTable, Error>(v73, 1);
        v108 = MEMORY[0x22075BB18](0);
        if (v108)
        {
          v109 = v108;
          outlined consume of Result<_DataTable, Error>(v73, 1);
          type metadata accessor for CMLSequence();
          v110 = swift_allocObject();
          *(_QWORD *)(v110 + 16) = v109;
          *(_BYTE *)(v110 + 24) = 1;
          v269 = v110;
          goto LABEL_66;
        }
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
      outlined copy of Result<_DataTable, Error>(v73, 0);
      _DataTable.columnNames.getter(&v269);
      outlined consume of Result<_DataTable, Error>(v73, 0);
LABEL_66:
      swift_retain_n();
      v111 = CMLSequence.size.getter();
      specialized RandomAccessCollection<>.distance(from:to:)(0, v111);
      v113 = v112;
      swift_release();
      v6 = epoch;
      if (!v113)
      {
        swift_release_n();
        outlined consume of MLDataValue(v261, v264, 2);
        v124 = v235;
        v123 = v236;
        v125 = v35;
        v126 = v245;
        goto LABEL_105;
      }
      v18 = 0;
      while (1)
      {
        CMLSequence.value(at:)((uint64_t)v18);
        v114 = CMLFeatureValue.stringValue()();
        v5 = v115;
        if (v115)
          goto LABEL_151;
        object = (uint64_t)v114._object;
        swift_release();
        swift_retain();
        v116 = CMLSequence.size.getter();
        specialized RandomAccessCollection<>.distance(from:to:)(0, v116);
        v64 = v117;
        swift_release();
        if ((uint64_t)v18 >= (uint64_t)v64)
          goto LABEL_144;
        if (v114._countAndFlagsBits == 6581861 && v114._object == (void *)0xE300000000000000)
        {
          swift_release_n();
          swift_bridgeObjectRelease();
          goto LABEL_80;
        }
        v119 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v119 & 1) != 0)
          break;
        ++v18;
        swift_retain();
        v120 = CMLSequence.size.getter();
        specialized RandomAccessCollection<>.distance(from:to:)(0, v120);
        v122 = v121;
        swift_release();
        if (v18 == v122)
        {
          swift_release_n();
          outlined consume of MLDataValue(v261, v264, 2);
          v124 = v235;
          v123 = v236;
          v125 = v35;
          v126 = v245;
          v18 = (char *)value;
          goto LABEL_105;
        }
      }
      swift_release_n();
LABEL_80:
      v127 = v263;
      v126 = v245;
      v18 = (char *)value;
      if (!*(_QWORD *)(v263 + 16))
        goto LABEL_93;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v128 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
      if ((v129 & 1) != 0)
      {
        v130 = *(_QWORD *)(*(_QWORD *)(v127 + 56) + 8 * v128);
        swift_retain_n();
        CMLSequence.value(at:)(v130);
        swift_release();
        MLDataValue.init(_:)();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release_n();
        v131 = v271.value;
        if (LOBYTE(v271.epoch) == 1)
        {
          if (*(double *)&v271.value < 0.0)
          {
            v228 = v71;
            object = (uint64_t)v261;
            outlined copy of MLDataValue(v261, v264, 2);
            v132 = Logger.logObject.getter();
            v133 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v132, v133))
            {
              v134 = swift_slowAlloc();
              v226 = swift_slowAlloc();
              v271.value = v226;
              *(_DWORD *)v134 = v227;
              v269 = v131;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v134 + 12) = 2080;
              v135 = v264;
              outlined copy of MLDataValue((id)object, v264, 2);
              v269 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(object, (unint64_t)v135, &v271.value);
              v6 = epoch;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              outlined consume of MLDataValue((void *)object, v135, 2);
              outlined consume of MLDataValue((void *)object, v135, 2);
              outlined consume of MLDataValue((void *)object, v135, 2);
              v136 = v132;
              v137 = v133;
              v138 = "End time %f specified in video file %s is negative, using end of file automatically.";
              goto LABEL_122;
            }
LABEL_123:
            v185 = v264;
            outlined consume of MLDataValue((void *)object, v264, 2);
            outlined consume of MLDataValue((void *)object, v185, 2);
            goto LABEL_124;
          }
          outlined consume of MLDataValue(v261, v264, 2);
          v174 = *(double *)&v131;
LABEL_114:
          CMTimeMakeWithSeconds(&v271, v174, 1000);
          v123 = v271.value;
          v125 = *(_QWORD *)&v271.timescale;
          v124 = v271.epoch;
          goto LABEL_105;
        }
        outlined consume of MLDataValue((void *)v271.value, *(id *)&v271.timescale, v271.epoch);
        v127 = v263;
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      object = v258;
      if (!*(_QWORD *)(v127 + 16))
        goto LABEL_94;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v139 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
      if ((v140 & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
LABEL_93:
        object = v258;
LABEL_94:
        outlined consume of MLDataValue(v261, v264, 2);
        if (*(_QWORD *)(v127 + 16))
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          v143 = specialized __RawDictionaryStorage.find<A>(_:)(6581861, 0xE300000000000000);
          if ((v144 & 1) != 0)
          {
            v145 = *(_QWORD *)(*(_QWORD *)(v127 + 56) + 8 * v143);
            swift_retain_n();
            CMLSequence.value(at:)(v145);
            swift_release();
            MLDataValue.init(_:)();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release_n();
            v147 = (void *)v271.value;
            v146 = *(void **)&v271.timescale;
            if (LOBYTE(v271.epoch) == 2)
            {
              static _VideoUtilities.getSecondsFromTimeString(_:)(v271.value, *(void **)&v271.timescale);
              v149 = v148;
              outlined consume of MLDataValue(v147, v146, 2);
              CMTimeMakeWithSeconds(&v271, v149, 1000);
              v123 = v271.value;
              v125 = *(_QWORD *)&v271.timescale;
              v124 = v271.epoch;
              v6 = epoch;
              goto LABEL_105;
            }
            outlined consume of MLDataValue((void *)v271.value, *(id *)&v271.timescale, v271.epoch);
            v6 = epoch;
          }
          else
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
          }
          object = v258;
        }
        swift_bridgeObjectRetain_n();
        v150 = Logger.logObject.getter();
        v151 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v150, v151))
        {
          v152 = (uint8_t *)swift_slowAlloc();
          v153 = swift_slowAlloc();
          v228 = v71;
          v154 = v153;
          v271.value = v153;
          *(_DWORD *)v152 = v230;
          swift_bridgeObjectRetain();
          v269 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v256, object, &v271.value);
          v126 = v245;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_21ADEE000, v150, v151, "Unsupported end time format in annotation file. Please provide either a Double or Int value in seconds, or a String value in hours:minutes:seconds.fraction, minutes:seconds.fraction, or seconds.fraction format. Skipping end time for file %s", v152, 0xCu);
          swift_arrayDestroy();
          v155 = v154;
          v71 = v228;
          MEMORY[0x22075BA10](v155, -1, -1);
          v156 = v152;
          v6 = epoch;
          MEMORY[0x22075BA10](v156, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v124 = v235;
        v123 = v236;
        v125 = v35;
        v18 = (char *)value;
        goto LABEL_105;
      }
      v141 = *(_QWORD *)(*(_QWORD *)(v127 + 56) + 8 * v139);
      swift_retain_n();
      CMLSequence.value(at:)(v141);
      swift_release();
      MLDataValue.init(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      v142 = v271.value;
      if (LOBYTE(v271.epoch))
      {
        outlined consume of MLDataValue((void *)v271.value, *(id *)&v271.timescale, v271.epoch);
        v127 = v263;
        goto LABEL_93;
      }
      if ((v271.value & 0x8000000000000000) == 0)
      {
        outlined consume of MLDataValue(v261, v264, 2);
        v174 = (double)v142;
        goto LABEL_114;
      }
      v228 = v71;
      object = (uint64_t)v261;
      outlined copy of MLDataValue(v261, v264, 2);
      v132 = Logger.logObject.getter();
      v181 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v132, v181))
        goto LABEL_123;
      v134 = swift_slowAlloc();
      v226 = swift_slowAlloc();
      v271.value = v226;
      *(_DWORD *)v134 = v227;
      v269 = v142;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v134 + 12) = 2080;
      v182 = v264;
      outlined copy of MLDataValue((id)object, v264, 2);
      v269 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(object, (unint64_t)v182, &v271.value);
      v6 = epoch;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of MLDataValue((void *)object, v182, 2);
      outlined consume of MLDataValue((void *)object, v182, 2);
      outlined consume of MLDataValue((void *)object, v182, 2);
      v136 = v132;
      v137 = v181;
      v138 = "End time %ld specified in video file %s is negative, using end of file automatically.";
LABEL_122:
      _os_log_impl(&dword_21ADEE000, v136, v137, v138, (uint8_t *)v134, 0x16u);
      v183 = v226;
      swift_arrayDestroy();
      MEMORY[0x22075BA10](v183, -1, -1);
      v184 = v134;
      v18 = (char *)value;
      MEMORY[0x22075BA10](v184, -1, -1);
LABEL_124:

      v124 = v235;
      v123 = v236;
      v125 = v35;
      v126 = v245;
      v71 = v228;
LABEL_105:
      v157 = static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(v262, v71, v250, v251, v123, v125, v124, a3);
      v158 = (uint64_t)v157;
      v15 = v257;
      if (__OFADD__(v257, v241))
      {
        __break(1u);
        goto LABEL_147;
      }
      v159 = v157[2];
      v160 = specialized Array.init(repeating:count:)((uint64_t)v257 + v241, v159);
      specialized Array.init(repeating:count:)((uint64_t)v252, (uint64_t)v253, v159);
      specialized Array.init(repeating:count:)(v256, v258, v159);
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)(v158);
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)(v160);
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)();
      swift_endAccess();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)();
      swift_endAccess();
      v161 = (uint64_t)v255;
      _TablePrinter.printRow(currentFileIndex:)((Swift::Int)v15);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v162 = swift_allocObject();
      *(_OWORD *)(v162 + 16) = v239;
      Date.timeIntervalSinceNow.getter();
      *(_QWORD *)(v162 + 56) = MEMORY[0x24BEE13C8];
      *(_QWORD *)(v162 + 64) = MEMORY[0x24BEE1448];
      *(double *)(v162 + 32) = -v163;
      v164 = (void *)String.init(format:_:)();
      v166 = v165;
      outlined init with copy of _TablePrinter(v161, (uint64_t)v126, type metadata accessor for _TablePrinter);
      swift_bridgeObjectRetain();
      v167 = Logger.logObject.getter();
      v168 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v167, v168))
      {
        v169 = swift_slowAlloc();
        v170 = swift_slowAlloc();
        v271.value = v170;
        *(_DWORD *)v169 = v232;
        v269 = v244;
        v264 = v167;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v169 + 12) = 2048;
        v261 = v164;
        v171 = (uint64_t)v126;
        v172 = *v126;
        outlined destroy of MLImageClassifier.CustomFeatureExtractor(v171, type metadata accessor for _TablePrinter);
        v269 = v172;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v169 + 22) = 2080;
        swift_bridgeObjectRetain();
        v269 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v261, v166, &v271.value);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        v167 = v264;
        _os_log_impl(&dword_21ADEE000, v264, v168, "Extracted features from %ld out of %ld annotated video clips, elapsed time: %s", (uint8_t *)v169, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x22075BA10](v170, -1, -1);
        MEMORY[0x22075BA10](v169, -1, -1);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)v126, type metadata accessor for _TablePrinter);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(uint64_t, uint64_t))(v242 + 8))(v262, v243);
      v32 = v274;
      v37 = v272;
      v31 = v273;
      v271.value = (CMTimeValue)v272;
      LOBYTE(v271.timescale) = v273;
      v173 = MLDataTable.size.getter();
      v30 = v259;
      if (v32 == v173)
        goto LABEL_126;
    }
    __break(1u);
    outlined consume of MLDataValue(v252, v253, 2);
    outlined consume of MLDataValue(v37, (id)(v31 & 1), 2);
    outlined consume of MLDataValue(v261, v264, 2);
    swift_release();
    swift_bridgeObjectRelease();
LABEL_142:
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v242 + 8))(v262, v243);
LABEL_139:
    outlined consume of Result<_DataTable, Error>(v272, v273);
    v209 = (uint64_t)v255;
  }
  else
  {
    v37 = v30;
LABEL_126:
    outlined consume of Result<_DataTable, Error>(v37, v31);
    v186 = (uint64_t)v255;
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v187 = swift_allocObject();
    *(_OWORD *)(v187 + 16) = xmmword_21AFE7DA0;
    v188 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v187 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v187 + 64) = v188;
    *(_QWORD *)(v187 + 32) = 3;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7D90;
    *(_QWORD *)(inited + 32) = 0x6C6562616CLL;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    v190 = v246;
    swift_beginAccess();
    v271.value = *v190;
    MEMORY[0x24BDAC7A8](v271.value);
    swift_bridgeObjectRetain();
    ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    v193 = v192;
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
    *(_BYTE *)(inited + 56) = v193 & 1;
    *(_QWORD *)(inited + 64) = 0x5F6E6F6973736573;
    *(_QWORD *)(inited + 72) = 0xEA00000000006469;
    v194 = v247;
    swift_beginAccess();
    v269 = *v194;
    MEMORY[0x24BDAC7A8](v269);
    swift_bridgeObjectRetain();
    v195 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    v197 = v196;
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 80) = v195;
    *(_BYTE *)(inited + 88) = v197 & 1;
    *(_QWORD *)(inited + 96) = 0x746E696F7079656BLL;
    *(_QWORD *)(inited + 104) = 0xE900000000000073;
    v198 = v248;
    swift_beginAccess();
    v268 = *v198;
    MEMORY[0x24BDAC7A8](v268);
    swift_bridgeObjectRetain();
    v199 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
    v201 = v200;
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 112) = v199;
    *(_BYTE *)(inited + 120) = v201 & 1;
    *(_QWORD *)(inited + 128) = 0x7461506F65646976;
    *(_QWORD *)(inited + 136) = 0xE900000000000068;
    v202 = v249;
    swift_beginAccess();
    v266 = *v202;
    MEMORY[0x24BDAC7A8](v266);
    swift_bridgeObjectRetain();
    v203 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
    v205 = v204;
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 144) = v203;
    *(_BYTE *)(inited + 152) = v205 & 1;
    v206 = Dictionary.init(dictionaryLiteral:)();
    specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v206, (uint64_t)&v266);
    if (!v5)
    {
      v207 = v267;
      v208 = v229;
      *v229 = v266;
      *((_BYTE *)v208 + 8) = v207;
    }
    v209 = v186;
  }
  return outlined destroy of MLImageClassifier.CustomFeatureExtractor(v209, type metadata accessor for _TablePrinter);
}

id static MLHandActionClassifier.FeatureExtractor.extractFeatures(from:targetFrameRate:startingSessionId:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v8;
  char v9;
  uint64_t inited;
  uint64_t v11;

  v8 = *a1;
  v9 = *((_BYTE *)a1 + 8);
  inited = swift_initStackObject();
  v11 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(inited + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(inited + 40) = v11;
  *(_QWORD *)(inited + 48) = v11;
  *(_QWORD *)(inited + 56) = v11;
  *(_QWORD *)(inited + 16) = v8;
  *(_BYTE *)(inited + 24) = v9;
  if (v4)
    return OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_0_7();
  MLHandActionClassifier.FeatureExtractor.extractFeaturesFromFileTable(_:startingSessionId:)(a2, a3, a4);
  return (id)swift_release();
}

uint64_t MLHandActionClassifier.FeatureExtractor.deinit()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MLHandActionClassifier.FeatureExtractor.__deallocating_deinit()
{
  MLHandActionClassifier.FeatureExtractor.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MLHandActionClassifier.FeatureExtractor()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t outlined init with copy of _TablePrinter(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

id OUTLINED_FUNCTION_0_7()
{
  void *v0;
  char v1;

  return outlined copy of Result<_DataTable, Error>(v0, v1);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _MLDevice(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _MLDevice(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21AE11F70 + 4 * byte_21AFE8179[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21AE11FA4 + 4 * asc_21AFE8174[v4]))();
}

uint64_t sub_21AE11FA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AE11FAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AE11FB4);
  return result;
}

uint64_t sub_21AE11FC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AE11FC8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21AE11FCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AE11FD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for _MLDevice(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for _MLDevice(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for _MLDevice()
{
  return &type metadata for _MLDevice;
}

CreateML::_MLDevice_optional __swiftcall _MLDevice.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  CreateML::_MLDevice_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of _MLDevice.init(rawValue:), v2);
  OUTLINED_FUNCTION_123();
  if (v3 == 1)
    v4.value = CreateML__MLDevice_cpu;
  else
    v4.value = CreateML__MLDevice_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t _MLDevice.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 7696483;
  else
    return 1869903201;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance _MLDevice(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _MLDevice()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

void specialized RawRepresentable<>.hashValue.getter()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  specialized RawRepresentable<>.hashValue.getter();
}

{
  specialized RawRepresentable<>.hashValue.getter();
}

{
  specialized RawRepresentable<>.hashValue.getter();
}

{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_5_5(v0);
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_1_6();
}

void specialized RawRepresentable<>.hashValue.getter(unsigned __int8 a1)
{
  OUTLINED_FUNCTION_7_3();
  ColumnDescriptor.FeatureType.rawValue.getter(a1);
  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_1_6();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance _MLDevice()
{
  return specialized RawRepresentable<>.hash(into:)();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  OUTLINED_FUNCTION_2_4();
  return OUTLINED_FUNCTION_0_8();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_21AE121D0()
{
  OUTLINED_FUNCTION_2_4();
  return OUTLINED_FUNCTION_0_8();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  ColumnDescriptor.FeatureType.rawValue.getter(a2);
  String.hash(into:)();
  return OUTLINED_FUNCTION_0_8();
}

uint64_t sub_21AE122C4()
{
  OUTLINED_FUNCTION_2_4();
  return OUTLINED_FUNCTION_0_8();
}

uint64_t sub_21AE1239C()
{
  OUTLINED_FUNCTION_2_4();
  return OUTLINED_FUNCTION_0_8();
}

void sub_21AE12494()
{
  JUMPOUT(0x21AE12484);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _MLDevice()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

void specialized RawRepresentable<>._rawHashValue(seed:)()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_1_6();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  unsigned __int8 v0;

  OUTLINED_FUNCTION_6_3();
  ColumnDescriptor.FeatureType.rawValue.getter(v0);
  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_1_6();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  uint64_t v0;

  v0 = Hasher.init(_seed:)();
  OUTLINED_FUNCTION_5_5(v0);
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_1_6();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

CreateML::_MLDevice_optional protocol witness for RawRepresentable.init(rawValue:) in conformance _MLDevice@<W0>(Swift::String *a1@<X0>, CreateML::_MLDevice_optional *a2@<X8>)
{
  CreateML::_MLDevice_optional result;

  result.value = _MLDevice.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance _MLDevice@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = _MLDevice.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type _MLDevice and conformance _MLDevice()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _MLDevice and conformance _MLDevice;
  if (!lazy protocol witness table cache variable for type _MLDevice and conformance _MLDevice)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for _MLDevice, &type metadata for _MLDevice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _MLDevice and conformance _MLDevice);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_8()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_4()
{
  return String.hash(into:)();
}

Swift::Int OUTLINED_FUNCTION_3_4()
{
  return Hasher._finalize()();
}

uint64_t OUTLINED_FUNCTION_5_5(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, uint64_t);
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return v1(va, v2);
}

uint64_t OUTLINED_FUNCTION_6_3()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return Hasher.init(_seed:)();
}

unint64_t MLCreateErrorDomain.getter()
{
  return OUTLINED_FUNCTION_2_5();
}

uint64_t protocol witness for Error._domain.getter in conformance MLCreateError()
{
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance MLCreateError()
{
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  return Error<>._code.getter();
}

unint64_t static MLCreateError.errorDomain.getter()
{
  return OUTLINED_FUNCTION_2_5();
}

uint64_t MLCreateError.failureReason.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  OUTLINED_FUNCTION_6_4();
  if (v6 < 3)
    OUTLINED_FUNCTION_5_6(v0, v1, v2, v3, v4, v5, v6);
  return OUTLINED_FUNCTION_4_5();
}

uint64_t outlined copy of MLCreateError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result;

  if (a7 >= 3u)
  {
    if (a7 != 3)
      return result;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

void MLCreateError.errorDescription.getter()
{
  __asm { BR              X10 }
}

unint64_t sub_21AE128A8()
{
  Swift::String v0;

  OUTLINED_FUNCTION_1_7();
  _StringGuts.grow(_:)(26);
  OUTLINED_FUNCTION_3_5();
  v0._countAndFlagsBits = OUTLINED_FUNCTION_4_5();
  String.append(_:)(v0);
  return 0xD000000000000018;
}

uint64_t MLCreateError.errorCode.getter()
{
  uint64_t v0;

  return ((uint64_t (*)())((char *)sub_21AE12A48 + 4 * byte_21AFE8245[*(unsigned __int8 *)(v0 + 48)]))();
}

uint64_t sub_21AE12A48()
{
  return 1;
}

uint64_t sub_21AE12A50()
{
  return 2;
}

uint64_t sub_21AE12A58()
{
  return 4;
}

uint64_t sub_21AE12A60()
{
  int8x16_t *v0;
  int8x16_t v1;

  v1 = vorrq_s8(v0[1], v0[2]);
  if (*(_QWORD *)&vorr_s8(*(int8x8_t *)v1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)) | v0->i64[1] | v0->i64[0])
    return 5;
  else
    return 3;
}

uint64_t MLCreateError.errorUserInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(unsigned __int8 *)(v0 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v9;
  MLCreateError.errorDescription.getter();
  if (v11)
  {
    v12 = MEMORY[0x24BEE0D00];
  }
  else
  {
    v10 = 0;
    v12 = 0;
    *(_QWORD *)(inited + 64) = 0;
  }
  v13 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = v11;
  *(_QWORD *)(inited + 72) = v12;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 88) = v14;
  if (v7 >= 3)
  {
    if (v7 == 3)
    {
      v1 = 0xD000000000000024;
      v2 = 0x800000021AFF1F30;
    }
    else
    {
      v15 = v2 | v1 | v3 | v4 | v5 | v6;
      if (v15)
        v1 = 0xD00000000000001BLL;
      else
        v1 = 0xD000000000000018;
      if (v15)
        v2 = 0x800000021AFF1F10;
      else
        v2 = 0x800000021AFF1F60;
    }
  }
  else
  {
    outlined copy of MLCreateError(v1, v2, v3, v4, v5, v6, v7);
  }
  *(_QWORD *)(inited + 120) = v13;
  *(_QWORD *)(inited + 96) = v1;
  *(_QWORD *)(inited + 104) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v16 = Dictionary.init(dictionaryLiteral:)();
  v17 = specialized Dictionary.compactMapValues<A>(_:)(v16);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _OWORD *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50[4];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  _OWORD v55[2];
  __int128 v56;
  _OWORD v57[2];
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;

  v1 = MEMORY[0x24BEE4B00];
  v58 = MEMORY[0x24BEE4B00];
  specialized _NativeDictionary.makeIterator()(v59, a1);
  v2 = v59[0];
  v3 = v61;
  v4 = v62;
  v34 = v60;
  v36 = v59[1];
  v37 = (unint64_t)(v60 + 64) >> 6;
  v38 = v57;
  v63 = v50;
  result = swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_3;
LABEL_2:
  v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v7 = v6 | (v3 << 6);
  while (1)
  {
    v12 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v7);
    v14 = *v12;
    v13 = v12[1];
    outlined init with copy of Any?(*(_QWORD *)(v2 + 56) + 32 * v7, (uint64_t)v38);
    *(_QWORD *)&v56 = v14;
    *((_QWORD *)&v56 + 1) = v13;
    v54 = v56;
    v55[0] = v57[0];
    v55[1] = v57[1];
    outlined init with copy of Any?((uint64_t)v55, (uint64_t)&v39);
    if (!v41)
    {
      swift_bridgeObjectRetain();
      outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)&v54, &demangling cache variable for type metadata for (key: String, value: Any?));
      v17 = (uint64_t *)&v39;
      goto LABEL_34;
    }
    outlined init with take of Any(&v39, &v51);
    v15 = v54;
    v49 = v54;
    outlined init with take of Any?((uint64_t)v55, (uint64_t)v63);
    outlined init with take of Any(&v51, &v46);
    v16 = *(_QWORD *)(v1 + 16);
    if (*(_QWORD *)(v1 + 24) <= v16)
    {
      v18 = v16 + 1;
      swift_bridgeObjectRetain();
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, 1, v19, v20, v21, v22, v23, v24, v34, v35, v36, v37, (uint64_t)v38, v39, *((uint64_t *)&v39 + 1), v40, v41, v42, v43,
        v44,
        v45,
        v46,
        *((uint64_t *)&v46 + 1),
        v47,
        v48,
        v49,
        *((uint64_t *)&v49 + 1),
        v50[0],
        v50[1],
        v50[2],
        v50[3],
        v51,
        *((uint64_t *)&v51 + 1),
        v52,
        v53);
      v1 = v58;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v25 = v1 + 64;
    v26 = -1 << *(_BYTE *)(v1 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v1 + 64 + 8 * (v27 >> 6))) == 0)
      break;
    v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v1 + 64 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v25 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(_OWORD *)(*(_QWORD *)(v1 + 48) + 16 * v29) = v15;
    outlined init with take of Any(&v46, (_OWORD *)(*(_QWORD *)(v1 + 56) + 32 * v29));
    ++*(_QWORD *)(v1 + 16);
    v17 = v63;
LABEL_34:
    result = outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
    if (v4)
      goto LABEL_2;
LABEL_3:
    v8 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_38;
    if (v8 >= v37)
      goto LABEL_36;
    v9 = *(_QWORD *)(v36 + 8 * v8);
    v10 = v3 + 1;
    if (!v9)
    {
      v10 = v3 + 2;
      if (v3 + 2 >= v37)
        goto LABEL_36;
      v9 = *(_QWORD *)(v36 + 8 * v10);
      if (!v9)
      {
        v10 = v3 + 3;
        if (v3 + 3 >= v37)
          goto LABEL_36;
        v9 = *(_QWORD *)(v36 + 8 * v10);
        if (!v9)
        {
          v10 = v3 + 4;
          if (v3 + 4 >= v37)
            goto LABEL_36;
          v9 = *(_QWORD *)(v36 + 8 * v10);
          if (!v9)
          {
            v10 = v3 + 5;
            if (v3 + 5 >= v37)
              goto LABEL_36;
            v9 = *(_QWORD *)(v36 + 8 * v10);
            if (!v9)
            {
              v11 = v3 + 6;
              while (v11 < v37)
              {
                v9 = *(_QWORD *)(v36 + 8 * v11++);
                if (v9)
                {
                  v10 = v11 - 1;
                  goto LABEL_18;
                }
              }
LABEL_36:
              outlined consume of [String : [Int]].Iterator._Variant();
              return v1;
            }
          }
        }
      }
    }
LABEL_18:
    v4 = (v9 - 1) & v9;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
    v3 = v10;
  }
  v30 = 0;
  v31 = (unint64_t)(63 - v26) >> 6;
  while (++v28 != v31 || (v30 & 1) == 0)
  {
    v32 = v28 == v31;
    if (v28 == v31)
      v28 = 0;
    v30 |= v32;
    v33 = *(_QWORD *)(v25 + 8 * v28);
    if (v33 != -1)
    {
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int64_t v16;
  char v17[72];
  uint64_t v18;
  __int128 v19;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[7];

  v1 = MEMORY[0x24BEE4B00];
  v24 = MEMORY[0x24BEE4B00];
  specialized _NativeDictionary.makeIterator()(v25, a1);
  v2 = v25[0];
  v3 = v25[3];
  v4 = v25[4];
  v15 = v25[1];
  v16 = (unint64_t)(v25[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v4)
    {
      v5 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v6 = v5 | (v3 << 6);
      goto LABEL_20;
    }
    v7 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      JUMPOUT(0x21AE32BA8);
    }
    if (v7 >= v16)
      goto LABEL_25;
    v8 = *(_QWORD *)(v15 + 8 * v7);
    v9 = v3 + 1;
    if (!v8)
    {
      v9 = v3 + 2;
      if (v3 + 2 >= v16)
        goto LABEL_25;
      v8 = *(_QWORD *)(v15 + 8 * v9);
      if (!v8)
      {
        v9 = v3 + 3;
        if (v3 + 3 >= v16)
          goto LABEL_25;
        v8 = *(_QWORD *)(v15 + 8 * v9);
        if (!v8)
        {
          v9 = v3 + 4;
          if (v3 + 4 >= v16)
            goto LABEL_25;
          v8 = *(_QWORD *)(v15 + 8 * v9);
          if (!v8)
          {
            v9 = v3 + 5;
            if (v3 + 5 >= v16)
              goto LABEL_25;
            v8 = *(_QWORD *)(v15 + 8 * v9);
            if (!v8)
              break;
          }
        }
      }
    }
LABEL_19:
    v4 = (v8 - 1) & v8;
    v6 = __clz(__rbit64(v8)) + (v9 << 6);
    v3 = v9;
LABEL_20:
    v11 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v6);
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v6, (uint64_t)v22 + 8);
    LOBYTE(v22[0]) = v11;
    v20[0] = v22[0];
    v20[1] = v22[1];
    v21 = v23;
    outlined init with copy of Any((uint64_t)v20 + 8, (uint64_t)v17);
    if (swift_dynamicCast())
    {
      v12 = LOBYTE(v20[0]);
      LOBYTE(v18) = v20[0];
      outlined init with take of Any((_OWORD *)((char *)v20 + 8), &v19);
      v13 = *(_QWORD *)(v1 + 16);
      if (*(_QWORD *)(v1 + 24) <= v13)
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13 + 1, 1);
      Hasher.init(_seed:)();
      __asm { BR              X8 }
    }
    v18 = 0;
    LOBYTE(v19) = 1;
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v20, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
  }
  v10 = v3 + 6;
  while (v10 < v16)
  {
    v8 = *(_QWORD *)(v15 + 8 * v10++);
    if (v8)
    {
      v9 = v10 - 1;
      goto LABEL_19;
    }
  }
LABEL_25:
  outlined consume of [String : [Int]].Iterator._Variant();
  return v1;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  char v18;
  int v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v25[10];
  char *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  _BYTE v32[80];
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v30 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v26 = (char *)v25 - v9;
  v38 = MEMORY[0x24BEE4B00];
  specialized _NativeDictionary.makeIterator()(v39, a1);
  v10 = v39[0];
  v27 = v39[1];
  v43 = v41;
  v11 = v42;
  v25[1] = v40;
  v28 = (unint64_t)(v40 + 64) >> 6;
  v29 = &v33;
  swift_bridgeObjectRetain();
  v31 = MEMORY[0x24BEE4AD8] + 8;
  v25[7] = "accuracy";
  v25[6] = "validationAccuracy";
  v25[5] = "stylizedImageURL";
  v25[4] = "rror";
  v25[3] = "validationRootMeanSquaredError";
  v25[9] = (char *)v36 + 8;
  v25[8] = (char *)v34 + 8;
  while (1)
  {
    if (v11)
    {
      v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v13 = v12 | (v43 << 6);
      goto LABEL_20;
    }
    v14 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      JUMPOUT(0x21AE33270);
    }
    if (v14 >= v28)
      goto LABEL_25;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    v16 = v43 + 1;
    if (!v15)
    {
      v16 = v43 + 2;
      if (v43 + 2 >= v28)
        goto LABEL_25;
      v15 = *(_QWORD *)(v27 + 8 * v16);
      if (!v15)
      {
        v16 = v43 + 3;
        if (v43 + 3 >= v28)
          goto LABEL_25;
        v15 = *(_QWORD *)(v27 + 8 * v16);
        if (!v15)
        {
          v16 = v43 + 4;
          if (v43 + 4 >= v28)
            goto LABEL_25;
          v15 = *(_QWORD *)(v27 + 8 * v16);
          if (!v15)
          {
            v16 = v43 + 5;
            if (v43 + 5 >= v28)
              goto LABEL_25;
            v15 = *(_QWORD *)(v27 + 8 * v16);
            if (!v15)
              break;
          }
        }
      }
    }
LABEL_19:
    v11 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v43 = v16;
LABEL_20:
    v18 = *(_BYTE *)(*(_QWORD *)(v10 + 48) + v13);
    outlined init with copy of Any(*(_QWORD *)(v10 + 56) + 32 * v13, (uint64_t)v36 + 8);
    LOBYTE(v36[0]) = v18;
    v34[0] = v36[0];
    v34[1] = v36[1];
    v35 = v37;
    outlined init with copy of Any((uint64_t)v34 + 8, (uint64_t)v32);
    v19 = swift_dynamicCast();
    __swift_storeEnumTagSinglePayload((uint64_t)v4, v19 ^ 1u, 1, v5);
    if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) != 1)
    {
      v20 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v21 = v26;
      v20(v26, v4, v5);
      v22 = LOBYTE(v34[0]);
      v32[72] = v34[0];
      outlined init with take of Any((_OWORD *)((char *)v34 + 8), v29);
      v20(v30, v21, v5);
      v23 = *(_QWORD *)(v38 + 16);
      if (*(_QWORD *)(v38 + 24) <= v23)
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23 + 1, 1);
      Hasher.init(_seed:)();
      __asm { BR              X8 }
    }
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v34, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
  }
  v17 = v43 + 6;
  while (v17 < v28)
  {
    v15 = *(_QWORD *)(v27 + 8 * v17++);
    if (v15)
    {
      v16 = v17 - 1;
      goto LABEL_19;
    }
  }
LABEL_25:
  outlined consume of [String : [Int]].Iterator._Variant();
  return v38;
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int64_t v16;
  char v17[72];
  uint64_t v18;
  __int128 v19;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[7];

  v1 = MEMORY[0x24BEE4B00];
  v24 = MEMORY[0x24BEE4B00];
  specialized _NativeDictionary.makeIterator()(v25, a1);
  v2 = v25[0];
  v3 = v25[3];
  v4 = v25[4];
  v15 = v25[1];
  v16 = (unint64_t)(v25[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v4)
    {
      v5 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v6 = v5 | (v3 << 6);
      goto LABEL_20;
    }
    v7 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      JUMPOUT(0x21AEB3218);
    }
    if (v7 >= v16)
      goto LABEL_25;
    v8 = *(_QWORD *)(v15 + 8 * v7);
    v9 = v3 + 1;
    if (!v8)
    {
      v9 = v3 + 2;
      if (v3 + 2 >= v16)
        goto LABEL_25;
      v8 = *(_QWORD *)(v15 + 8 * v9);
      if (!v8)
      {
        v9 = v3 + 3;
        if (v3 + 3 >= v16)
          goto LABEL_25;
        v8 = *(_QWORD *)(v15 + 8 * v9);
        if (!v8)
        {
          v9 = v3 + 4;
          if (v3 + 4 >= v16)
            goto LABEL_25;
          v8 = *(_QWORD *)(v15 + 8 * v9);
          if (!v8)
          {
            v9 = v3 + 5;
            if (v3 + 5 >= v16)
              goto LABEL_25;
            v8 = *(_QWORD *)(v15 + 8 * v9);
            if (!v8)
              break;
          }
        }
      }
    }
LABEL_19:
    v4 = (v8 - 1) & v8;
    v6 = __clz(__rbit64(v8)) + (v9 << 6);
    v3 = v9;
LABEL_20:
    v11 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v6);
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v6, (uint64_t)v22 + 8);
    LOBYTE(v22[0]) = v11;
    v20[0] = v22[0];
    v20[1] = v22[1];
    v21 = v23;
    outlined init with copy of Any((uint64_t)v20 + 8, (uint64_t)v17);
    if (swift_dynamicCast())
    {
      v12 = LOBYTE(v20[0]);
      LOBYTE(v18) = v20[0];
      outlined init with take of Any((_OWORD *)((char *)v20 + 8), &v19);
      v13 = *(_QWORD *)(v1 + 16);
      if (*(_QWORD *)(v1 + 24) <= v13)
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13 + 1, 1);
      Hasher.init(_seed:)();
      __asm { BR              X8 }
    }
    v18 = 0;
    LOBYTE(v19) = 1;
    outlined destroy of Any?((uint64_t)v20, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
  }
  v10 = v3 + 6;
  while (v10 < v16)
  {
    v8 = *(_QWORD *)(v15 + 8 * v10++);
    if (v8)
    {
      v9 = v10 - 1;
      goto LABEL_19;
    }
  }
LABEL_25:
  outlined consume of [String : [Int]].Iterator._Variant();
  return v1;
}

unint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance MLCreateError()
{
  static MLCreateError.errorDomain.getter();
  return 0xD000000000000012;
}

void MLCreateError.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  OUTLINED_FUNCTION_6_4();
  if (v6 <= 2)
  {
    OUTLINED_FUNCTION_5_6(v0, v1, v2, v3, v4, v5, v6);
LABEL_4:
    OUTLINED_FUNCTION_4_5();
    return;
  }
  MLCreateError.errorDescription.getter();
  if (v7)
    goto LABEL_4;
  __break(1u);
}

uint64_t destroy for MLCreateError(uint64_t a1)
{
  return outlined consume of MLCreateError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t outlined consume of MLCreateError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result;

  if (a7 >= 3u)
  {
    if (a7 != 3)
      return result;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MLCreateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of MLCreateError(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for MLCreateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  outlined copy of MLCreateError(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  outlined consume of MLCreateError(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MLCreateError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  outlined consume of MLCreateError(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLCreateError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 49))
    {
      v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 48);
      if (v3 <= 4)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLCreateError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for MLCreateError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 3u)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t destructiveInjectEnumTag for MLCreateError(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLCreateError()
{
  return &type metadata for MLCreateError;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_0_9(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

unint64_t OUTLINED_FUNCTION_2_5()
{
  return 0xD000000000000012;
}

uint64_t OUTLINED_FUNCTION_3_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_4_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_5_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t v7;
  uint64_t v8;

  return outlined copy of MLCreateError(v7, v8, a3, a4, a5, a6, a7);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay20MLModelSpecification5ModelVG_Sis5NeverOTg5051_s8CreateML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = *(_QWORD *)(type metadata accessor for Model() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = Model.specificationVersion.getter();
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void specialized == infix<A>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    OUTLINED_FUNCTION_69_0();
  else
    OUTLINED_FUNCTION_12_4();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_125();
}

{
  OUTLINED_FUNCTION_91_0();
  __asm { BR              X10 }
}

void specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 7696483;
  else
    v3 = 1869903201;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 7696483;
  else
    v5 = 1869903201;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    OUTLINED_FUNCTION_69_0();
  else
    OUTLINED_FUNCTION_12_4();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_125();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6574694C6E6E63;
  else
    v3 = 7237219;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6574694C6E6E63;
  else
    v5 = 7237219;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
    OUTLINED_FUNCTION_69_0();
  else
    OUTLINED_FUNCTION_12_4();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_125();
}

uint64_t sub_21AE136A4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21AE13714 + 4 * byte_21AFE8395[a2]))(0x6974636172747865);
}

void sub_21AE13714(uint64_t a1)
{
  uint64_t v1;

  if (a1 != 0x6974636172747865 || v1 != 0xEA0000000000676ELL)
    OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_125();
}

void specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = ColumnDescriptor.FeatureType.rawValue.getter(a1);
  v5 = v4;
  if (v3 == ColumnDescriptor.FeatureType.rawValue.getter(a2) && v5 == v6)
    OUTLINED_FUNCTION_69_0();
  else
    OUTLINED_FUNCTION_12_4();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_125();
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X13 }
}

uint64_t sub_21AE13864(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21AE138C8 + 4 * byte_21AFE839E[a2]))(1702521203);
}

void sub_21AE138C8(uint64_t a1)
{
  uint64_t v1;

  if (a1 != 1702521203 || v1 != 0xE400000000000000)
    OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_125();
}

uint64_t sub_21AE13A24(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21AE13B10 + 4 * byte_21AFE83AD[a2]))(0x4C746E65746E6F63);
}

void sub_21AE13B10(uint64_t a1)
{
  uint64_t v1;

  if (a1 == 0x4C746E65746E6F63 && v1 == 0xEB0000000073736FLL)
    OUTLINED_FUNCTION_69_0();
  else
    OUTLINED_FUNCTION_12_4();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_125();
}

void sub_21AE13C1C()
{
  JUMPOUT(0x21AE13AF0);
}

void sub_21AE13C3C()
{
  JUMPOUT(0x21AE13BECLL);
}

id MLRandomForestRegressor.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_6_5() + 20));
}

uint64_t type metadata accessor for MLRandomForestRegressor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLRandomForestRegressor;
  if (!type metadata singleton initialization cache for MLRandomForestRegressor)
    return swift_getSingletonMetadata();
  return result;
}

void key path setter for MLRandomForestRegressor.model : MLRandomForestRegressor(id *a1)
{
  MLRandomForestRegressor.model.setter((uint64_t)*a1);
}

void MLRandomForestRegressor.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_6_5() + 20);

  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

void (*MLRandomForestRegressor.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_6_5() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(void **)(v1 + v3);
  *(_QWORD *)a1 = v4;
  v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

void MLRandomForestRegressor.model.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(int *)(a1 + 16);
  v4 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(v3 + v2);
  if ((a2 & 1) != 0)
  {
    v6 = v4;

    *(_QWORD *)(v3 + v2) = v6;
  }
  else
  {

    *(_QWORD *)(v3 + v2) = v4;
  }
}

uint64_t MLRandomForestRegressor.targetColumn.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_6_5() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

void MLRandomForestRegressor.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(OUTLINED_FUNCTION_6_5() + 24));
  swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLRandomForestRegressor.targetColumn.modify())(_QWORD)
{
  OUTLINED_FUNCTION_6_5();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.featureColumns.getter()
{
  OUTLINED_FUNCTION_6_5();
  return swift_bridgeObjectRetain();
}

void MLRandomForestRegressor.featureColumns.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_6_5() + 28);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLRandomForestRegressor.featureColumns.modify())(_QWORD)
{
  OUTLINED_FUNCTION_6_5();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_6_5() + 32);
  return outlined init with copy of MLRandomForestRegressor.ModelParameters(v3, a1);
}

uint64_t outlined init with copy of MLRandomForestRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MLRandomForestRegressor.ModelParameters(a2, a1);
  return a2;
}

id MLRandomForestRegressor.trainingMetrics.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;

  v0 = OUTLINED_FUNCTION_6_5();
  v1 = (void *)OUTLINED_FUNCTION_66_1(*(int *)(v0 + 36));
  return OUTLINED_FUNCTION_53_3(v1, v2, v3);
}

id outlined copy of Result<_RegressorMetrics, Error>(id result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return result;
  return result;
}

id MLRandomForestRegressor.validationMetrics.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;

  v0 = OUTLINED_FUNCTION_6_5();
  v1 = (void *)OUTLINED_FUNCTION_66_1(*(int *)(v0 + 40));
  return OUTLINED_FUNCTION_53_3(v1, v2, v3);
}

void static MLRandomForestRegressor._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLRandomForestRegressor._defaultSessionParameters);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

uint64_t MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v14)(void);

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = (int *)OUTLINED_FUNCTION_6_5();
  *(_QWORD *)(v0 + 64) = v5;
  v6 = v5[9];
  *(_DWORD *)(v0 + 96) = v6;
  v7 = v4 + v6;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = 0;
  *(_DWORD *)(v0 + 100) = v5[10];
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v8 = swift_allocError();
  OUTLINED_FUNCTION_25_2(v8, v9, 0xD0000000000000C0);
  v10 = v5[7];
  *(_DWORD *)(v0 + 104) = v10;
  *(_QWORD *)(v4 + v10) = v1;
  v11 = (_QWORD *)(v4 + v5[6]);
  *v11 = v3;
  v11[1] = v2;
  v14 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                          + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v12;
  *v12 = v0;
  v12[1] = MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:);
  return OUTLINED_FUNCTION_39_2(v14);
}

{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(const void **)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v4 + *(int *)(v2 + 20)) = *(_QWORD *)(v0 + 88);
  outlined init with take of TreeRegressorModel(v3, v4, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  memcpy((void *)(v4 + *(int *)(v2 + 32)), v1, 0x70uLL);
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + *(int *)(v0 + 96);
  v3 = v1 + *(int *)(v0 + 100);
  v4 = outlined destroy of MLRandomForestRegressor.ModelParameters(*(_QWORD *)(v0 + 56));
  OUTLINED_FUNCTION_48_0(v4, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  OUTLINED_FUNCTION_30();
  swift_bridgeObjectRelease();
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

void MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (**v59)(char *, uint64_t);
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::Int v67;
  Swift::String v68;
  int *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (**v126)(char *, uint64_t);
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  char v130;
  uint64_t v131;

  OUTLINED_FUNCTION_8_1();
  v120 = v0;
  v3 = v2;
  v119 = (char *)v4;
  v125 = v5;
  v117 = v6;
  v131 = v7;
  v9 = v8;
  v123 = OUTLINED_FUNCTION_93();
  v122 = *(_QWORD *)(v123 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v11);
  v12 = type metadata accessor for TreeRegressorModel();
  v105 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_101_0();
  v107 = v13;
  v106 = v14;
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v16);
  v114 = type metadata accessor for BaseTreeRegressor();
  v113 = *(_QWORD *)(v114 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v18);
  v111 = type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v20);
  type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_54_0();
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v98 - v26;
  v124 = type metadata accessor for BoostedTreeConfiguration();
  v126 = *(void (***)(char *, uint64_t))(v124 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v98 - v31;
  v33 = type metadata accessor for MLRandomForestRegressor();
  v34 = v9 + *(int *)(v33 + 36);
  *(_QWORD *)v34 = 0;
  *(_QWORD *)(v34 + 8) = 0;
  *(_BYTE *)(v34 + 16) = 0;
  v104 = (int *)v33;
  v35 = *(int *)(v33 + 40);
  v108 = v9;
  v36 = v9 + v35;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v37, 0xD0000000000000C0);
  *(_QWORD *)v36 = v38;
  *(_QWORD *)(v36 + 8) = 0;
  v118 = v36;
  *(_BYTE *)(v36 + 16) = 1;
  outlined init with copy of MLRandomForestRegressor.ModelParameters(v3, (uint64_t)&v129);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.parallelTreeCount.setter();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  BoostedTreeConfiguration.rowSubsample.setter();
  BoostedTreeConfiguration.columnSubsample.setter();
  outlined destroy of MLRandomForestRegressor.ModelParameters((uint64_t)&v129);
  v121 = v3;
  _sypSgWOcTm_0(v3, (uint64_t)&v127, &demangling cache variable for type metadata for Any?);
  if (v128)
  {
    v39 = (uint64_t)&v27[*(int *)(v22 + 48)];
    outlined init with take of Any(&v127, &v129);
    swift_dynamicCast();
    v40 = v120;
    MLRandomForestRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    if (v40)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_21_2();
      OUTLINED_FUNCTION_34_3(v131, *(uint64_t (**)(uint64_t, _QWORD))(v122 + 8));
      outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
      v126[1](v32, v124);
    }
    else
    {
      v120 = v39;
      v100 = v22;
      outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
      v41 = v117;
      v42 = v125;
      static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v27, v117, (void *)v125, (uint64_t)v119);
      v44 = v43;
      swift_bridgeObjectRelease();
      v98 = 0;
      v45 = v109;
      v119 = v27;
      v46 = v124;
      OUTLINED_FUNCTION_67_1(v109, (uint64_t)v32);
      v47 = v115;
      *v115 = v41;
      v47[1] = v42;
      v47[2] = v44;
      v47[3] = v44;
      OUTLINED_FUNCTION_60_2((uint64_t)"vectorized_features");
      OUTLINED_FUNCTION_67_1(v110, v45);
      v99 = v44;
      swift_bridgeObjectRetain_n();
      OUTLINED_FUNCTION_189();
      v48 = v112;
      BaseTreeRegressor.init(configuration:)();
      v49 = v126[1];
      v49((char *)v45, v46);
      v50 = v48;
      v51 = (uint64_t)v119;
      (*(void (**)(char *, uint64_t, uint64_t))(v113 + 32))((char *)v47 + *(int *)(v111 + 28), v50, v114);
      v52 = v116;
      v53 = v98;
      TreeRegressor.fitted(to:validateOn:eventHandler:)(v51, v120, 0, 0, v54, v55, v56, v57, v98, v99, v100, v101, v102, v103, (uint64_t)v104, v105, v106, v107, v108,
        v109);
      if (!v53)
      {
        v59 = (void (**)(char *, uint64_t))v49;
        v60 = v117;
        v126 = v59;
        v61 = AnalyticsReporter.init()();
        v62 = v121;
        if ((v61 & 1) == 0)
        {
          v63 = v103;
          v114 = v103 + *(int *)(v100 + 48);
          v64 = v122;
          v65 = OUTLINED_FUNCTION_216(v103, (uint64_t)v119, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 16));
          OUTLINED_FUNCTION_62_2(v65, v66, &demangling cache variable for type metadata for DataFrame?);
          v67 = DataFrame.shape.getter();
          OUTLINED_FUNCTION_47_2(v63, *(uint64_t (**)(uint64_t, uint64_t))(v64 + 8));
          v68._countAndFlagsBits = 0xD000000000000015;
          v68._object = (void *)0x800000021AFF21D0;
          AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_randomForestRegressor, v68, v67);
        }
        v69 = v104;
        v70 = v108;
        v71 = (uint64_t *)(v108 + v104[6]);
        v72 = v125;
        v114 = (uint64_t)v71;
        *v71 = v60;
        v71[1] = v72;
        v117 = v70 + v69[8];
        outlined init with copy of MLRandomForestRegressor.ModelParameters(v62, v117);
        v125 = v69[7];
        *(_QWORD *)(v70 + v125) = v99;
        v73 = v107;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v52, v107, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
        v74 = (*(unsigned __int8 *)(v105 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
        v75 = swift_allocObject();
        outlined init with take of TreeRegressorModel(v73, v75 + v74, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
        specialized blockAwait<A>(_:)();
        v77 = v76;
        swift_release();
        v78 = v69[5];
        *(_QWORD *)(v70 + v78) = v77;
        v79 = v78;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v116, v70, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
        v80 = (uint64_t)v119;
        TreeRegressorModel.computeMetrics(on:)((uint64_t)v119, &v129);
        v113 = v79;
        v81 = v129;
        LOBYTE(v79) = v130;
        OUTLINED_FUNCTION_96_0();
        *(_OWORD *)v34 = v81;
        *(_BYTE *)(v34 + 16) = v79;
        v82 = v102;
        v83 = v102 + *(int *)(v100 + 48);
        v84 = v122;
        v85 = v123;
        v86 = OUTLINED_FUNCTION_216(v102, v80, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 16));
        OUTLINED_FUNCTION_62_2(v86, v87, &demangling cache variable for type metadata for DataFrame?);
        if (__swift_getEnumTagSinglePayload(v83, 1, v85) == 1)
        {
          OUTLINED_FUNCTION_21_2();
          v88 = *(uint64_t (**)(uint64_t, uint64_t))(v84 + 8);
          v89 = v88(v131, v85);
          OUTLINED_FUNCTION_65_2(v89, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
          OUTLINED_FUNCTION_22_1(v90, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
          outlined destroy of URL?(v80, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          OUTLINED_FUNCTION_13_4();
          outlined destroy of URL?(v83, &demangling cache variable for type metadata for DataFrame?);
          v88(v82, v85);
        }
        else
        {
          v91 = v101;
          OUTLINED_FUNCTION_216(v101, v83, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 32));
          OUTLINED_FUNCTION_48_2(v82);
          TreeRegressorModel.computeMetrics(on:)(v91, &v129);
          outlined destroy of MLRandomForestRegressor.ModelParameters(v121);
          OUTLINED_FUNCTION_48_2(v131);
          v92 = OUTLINED_FUNCTION_48_2(v91);
          OUTLINED_FUNCTION_65_2(v92, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
          OUTLINED_FUNCTION_22_1(v93, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
          OUTLINED_FUNCTION_19_3(v94, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          OUTLINED_FUNCTION_13_4();
          v95 = v129;
          v96 = v130;
          v97 = v118;
          outlined consume of Result<_RegressorMetrics, Error>(*(id *)v118, *(_QWORD *)(v118 + 8), *(_BYTE *)(v118 + 16));
          *(_OWORD *)v97 = v95;
          *(_BYTE *)(v97 + 16) = v96;
        }
        goto LABEL_6;
      }
      OUTLINED_FUNCTION_101();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_21_2();
      v58 = OUTLINED_FUNCTION_3_6();
      OUTLINED_FUNCTION_203(v58, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
      outlined destroy of URL?(v51, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      v49(v32, v46);
    }
    OUTLINED_FUNCTION_96_0();
    OUTLINED_FUNCTION_94_0();
LABEL_6:
    OUTLINED_FUNCTION_7();
    return;
  }
  __break(1u);
}

uint64_t outlined destroy of MLRandomForestRegressor.ModelParameters(uint64_t a1)
{
  destroy for MLBoostedTreeRegressor.ModelParameters(a1);
  return a1;
}

void outlined consume of Result<_RegressorMetrics, Error>(id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

}

uint64_t closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:);
  return v4();
}

uint64_t closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_30_3();
  if (v1)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v3 + 8));
  *(_QWORD *)(v2 + 32) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

uint64_t partial apply for closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(v2);
}

void MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_161();
  v8 = *((_BYTE *)a1 + 8);
  v9 = *a1;
  v10 = v8;
  DataFrame.init(_:)((uint64_t)&v9);
  outlined init with copy of MLRandomForestRegressor.ModelParameters(a5, (uint64_t)&v9);
  MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)();
  outlined destroy of MLRandomForestRegressor.ModelParameters(a5);
  OUTLINED_FUNCTION_127();
}

void MLRandomForestRegressor.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_8_1();
  v1 = v0;
  type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_208();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_211();
  v4 = type metadata accessor for TreeRegressorModel();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_101_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_211();
  type metadata accessor for BaseTreeRegressor();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_3();
  v8 = MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_5();
  v10 = v1 + *(int *)(type metadata accessor for MLRandomForestRegressor() + 36);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 16) = 0;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v11 = OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_25_2(v11, v12, 0xD0000000000000C0);
  type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_91_0();
  __asm { BR              X10 }
}

void sub_21AE150D8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v31;
  uint64_t v32;

  OUTLINED_FUNCTION_81_1();
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  OUTLINED_FUNCTION_80();
  if ((v6 & 1) == 0)
  {
    OUTLINED_FUNCTION_49_0();
    v15 = OUTLINED_FUNCTION_44_2(v14, 0xD000000000000042);
    swift_willThrow(v15);
    v22 = type metadata accessor for MLCheckpoint;
    v23 = *(_QWORD *)(v5 - 72);
    goto LABEL_6;
  }
  BoostedTreeConfiguration.init()();
  *(_QWORD *)v0 = 0;
  *((_QWORD *)v0 + 1) = 0xE000000000000000;
  v7 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)v0 + 2) = MEMORY[0x24BEE4AF8];
  *((_QWORD *)v0 + 3) = v7;
  OUTLINED_FUNCTION_60_2((uint64_t)"vectorized_features");
  v9 = *(_QWORD *)(v5 - 168);
  v8 = *(_QWORD *)(v5 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v2, v4, v8);
  v10 = *(_QWORD *)(v5 - 152);
  BaseTreeRegressor.init(configuration:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v5 - 144) + 32))(&v0[*(int *)(v1 + 28)], v10, *(_QWORD *)(v5 - 136));
  lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor();
  v11 = *(_QWORD *)(v5 - 128);
  v12 = *(_QWORD *)(v5 - 120);
  v13 = *(_QWORD *)(v5 - 72);
  UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
  if (v11)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters(v13, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v22 = type metadata accessor for TreeRegressor;
    v23 = (uint64_t)v0;
LABEL_6:
    outlined destroy of MLHandPoseClassifier.ModelParameters(v23, (uint64_t (*)(_QWORD))v22);
    OUTLINED_FUNCTION_94_0();
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(v5 - 176);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v12, v16, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  v17 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 192) + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject();
  outlined init with take of TreeRegressorModel(v16, v19 + v18, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  specialized blockAwait<A>(_:)();
  v21 = v20;
  swift_release();
  v24 = *(int **)(v5 - 232);
  v25 = *(_QWORD *)(v5 - 200);
  *(_QWORD *)(v25 + v24[5]) = v21;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(*(_QWORD *)(v5 - 120), v25, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  v26 = *(_QWORD *)(v5 - 216);
  v27 = *(_QWORD *)(v5 - 208);
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_WORD *)(v27 + 16) = 256;
  swift_storeEnumTagMultiPayload();
  v28 = v25 + v24[8];
  *(_OWORD *)v28 = 0u;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_QWORD *)(v28 + 96) = 0;
  *(_QWORD *)(v28 + 104) = 0;
  *(_QWORD *)(v28 + 88) = 0;
  *(_OWORD *)(v28 + 32) = xmmword_21AFE84D0;
  *(_OWORD *)(v28 + 48) = xmmword_21AFE84E0;
  *(_QWORD *)(v28 + 64) = 42;
  *(int64x2_t *)(v28 + 72) = vdupq_n_s64(0x3FE999999999999AuLL);
  v29 = *(_QWORD *)(v5 - 224);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v27, v29, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
  *(_QWORD *)(v5 - 88) = v26;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v5 - 112));
  outlined init with take of TreeRegressorModel(v29, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
  outlined assign with take of Any?(v5 - 112, v28);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v27, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
  v31 = (_QWORD *)(v25 + v24[6]);
  *v31 = 0;
  v31[1] = 0xE000000000000000;
  outlined destroy of MLHandPoseClassifier.ModelParameters(v13, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v5 - 120), (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  OUTLINED_FUNCTION_203(v32, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
  *(_QWORD *)(v25 + v24[7]) = MEMORY[0x24BEE4AF8];
LABEL_7:
  OUTLINED_FUNCTION_7();
}

uint64_t closure #1 in MLRandomForestRegressor.init(checkpoint:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(checkpoint:);
  return v4();
}

uint64_t closure #1 in MLRandomForestRegressor.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_30_3();
  if (v1)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v3 + 8));
  *(_QWORD *)(v2 + 32) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void static MLRandomForestRegressor.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_8_1();
  v1 = OUTLINED_FUNCTION_93();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v5);
  static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2((uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;

  static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
}

void static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_1();
  v1 = OUTLINED_FUNCTION_93();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_5();
  v3 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v3);
  static MLRandomForestRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _UNKNOWN **v44;
  __int128 v45;
  uint64_t v46;

  OUTLINED_FUNCTION_8_1();
  v40 = v1;
  v41 = v2;
  v4 = v3;
  v39 = v5;
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v8);
  type metadata accessor for BoostedTreeConfiguration();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_46_2();
  type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_5();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v32 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v32 - v17;
  v36 = v4;
  _sypSgWOcTm_0(v4, (uint64_t)&v45, &demangling cache variable for type metadata for Any?);
  if (v46)
  {
    v19 = (uint64_t)&v18[*(int *)(v11 + 48)];
    outlined init with take of Any(&v45, &v42);
    swift_dynamicCast();
    MLRandomForestRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    OUTLINED_FUNCTION_203(v20, (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData);
    if (!v0)
    {
      v21 = (uint64_t)v16;
      v22 = (uint64_t)&v16[*(int *)(v11 + 48)];
      v32[2] = v21;
      v23 = OUTLINED_FUNCTION_93();
      v33 = *(_QWORD *)(v23 - 8);
      OUTLINED_FUNCTION_67_1(v21, (uint64_t)v18);
      v34 = v22;
      _sypSgWOcTm_0(v19, v22, &demangling cache variable for type metadata for DataFrame?);
      v24 = v37;
      v25 = v37 + *(int *)(v11 + 48);
      v32[1] = v25;
      v32[3] = v23;
      OUTLINED_FUNCTION_67_1(v37, (uint64_t)v18);
      _sypSgWOcTm_0(v19, v25, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLRandomForestRegressor.ModelParameters(v36, (uint64_t)&v42);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      BoostedTreeConfiguration.init()();
      BoostedTreeConfiguration.learningRate.setter();
      BoostedTreeConfiguration.parallelTreeCount.setter();
      BoostedTreeConfiguration.maximumDepth.setter();
      BoostedTreeConfiguration.maximumIterations.setter();
      BoostedTreeConfiguration.minimumLossReduction.setter();
      BoostedTreeConfiguration.minimumChildWeight.setter();
      BoostedTreeConfiguration.randomSeed.setter();
      BoostedTreeConfiguration.rowSubsample.setter();
      BoostedTreeConfiguration.columnSubsample.setter();
      outlined destroy of MLRandomForestRegressor.ModelParameters((uint64_t)&v42);
      v26 = v41;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v41, v38, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      v27 = type metadata accessor for TreeRegressorTrainingSessionDelegate();
      OUTLINED_FUNCTION_15_1();
      v28 = TreeRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)();
      v29 = OUTLINED_FUNCTION_34_3(v24, *(uint64_t (**)(uint64_t, _QWORD))(v33 + 8));
      OUTLINED_FUNCTION_19_3(v29, &demangling cache variable for type metadata for DataFrame?);
      v43 = v27;
      v44 = &protocol witness table for TreeRegressorTrainingSessionDelegate;
      *(_QWORD *)&v42 = v28;
      v30 = v35;
      OUTLINED_FUNCTION_97(v26, v31, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>);
      OUTLINED_FUNCTION_15_1();
      swift_retain();
      specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v42, v30, 0);
      outlined destroy of URL?((uint64_t)v18, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
    OUTLINED_FUNCTION_7();
  }
  else
  {
    __break(1u);
  }
}

void static MLRandomForestRegressor.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLRandomForestRegressor>);
  OUTLINED_FUNCTION_15_1();
  swift_retain();
  specialized MLJob.init(_:)();
}

void static MLRandomForestRegressor.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14[-1] - v7;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(a1, (uint64_t)&v14[-1] - v7, v9);
  v10 = type metadata accessor for TreeRegressorTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v11 = TreeRegressorTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v8);
  if (!v1)
  {
    v14[3] = v10;
    v14[4] = &protocol witness table for TreeRegressorTrainingSessionDelegate;
    v14[0] = v11;
    OUTLINED_FUNCTION_97(a1, v12, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLRandomForestRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v14, (uint64_t)v6, 0);
  }
}

void closure #1 in closure #1 in static MLRandomForestRegressor.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  _BYTE v20[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a2 & 1) != 0)
  {
    *v5 = a1;
    swift_storeEnumTagMultiPayload();
    v18 = a1;
    a4(v5);
    outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for TreeRegressorTrainingSessionDelegate();
    swift_dynamicCast();
    v15 = v19;
    v16 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 1, 1, v16);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v15;
    v17[5] = a4;
    v17[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:), (uint64_t)v17);
    swift_release();
  }
}

uint64_t closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  v6[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Result<>.init(catching:)
                                                + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = v1;
  *v1 = v0;
  v1[1] = closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:);
  return v3(v0[5], v0[2]);
}

{
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  OUTLINED_FUNCTION_10();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLRandomForestRegressor.init(delegate:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[36] = a1;
  v2[37] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  v2[38] = OUTLINED_FUNCTION_4_6();
  v2[39] = OUTLINED_FUNCTION_6_5();
  v2[40] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v2[41] = OUTLINED_FUNCTION_4_6();
  v3 = type metadata accessor for BoostedTreeConfiguration();
  v2[42] = v3;
  v2[43] = *(_QWORD *)(v3 - 8);
  v2[44] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[45] = OUTLINED_FUNCTION_4_6();
  v2[46] = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v2[47] = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLRandomForestRegressor.init(delegate:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = v0[45];
  v2 = v0[46];
  v3 = v0[37] + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v3, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = (int *)v0[46];
    v5 = v0[47];
    v7 = v0[44];
    v8 = v0[42];
    v9 = v0[43];
    v10 = v0[41];
    v12 = v0[37];
    v11 = v0[38];
    outlined init with take of TreeRegressorModel(v0[45], v5, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v5 + v6[8], v8);
    _sypSgWOcTm_0(v5 + v6[5], v10, &demangling cache variable for type metadata for DataFrame?);
    MLRandomForestRegressor.ModelParameters.init(configuration:validation:)(v7, v10, (uint64_t)(v0 + 2));
    v13 = (uint64_t *)(v5 + v6[6]);
    v15 = *v13;
    v14 = v13[1];
    v16 = *(_QWORD *)(v5 + v6[7]);
    v17 = v12 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v17, v11, &demangling cache variable for type metadata for TreeRegressorModel?);
    v18 = OUTLINED_FUNCTION_42_2();
    result = __swift_getEnumTagSinglePayload(v11, 1, v18);
    if ((_DWORD)result != 1)
    {
      outlined init with copy of MLRandomForestRegressor.ModelParameters((uint64_t)(v0 + 2), (uint64_t)(v0 + 16));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = (_QWORD *)swift_task_alloc();
      v0[48] = v19;
      *v19 = v0;
      v19[1] = MLRandomForestRegressor.init(delegate:);
      return MLRandomForestRegressor.init(_:targetColumn:featureColumns:parameters:)(v0[40], v0[38], v15, v14, v16, (uint64_t)(v0 + 16));
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = outlined destroy of MLRandomForestRegressor.ModelParameters(v0 + 16);
  OUTLINED_FUNCTION_48_0(v1, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  OUTLINED_FUNCTION_10();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_39_2(*(uint64_t (**)(void))(v0 + 8));
}

void MLRandomForestRegressor.init(delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 296);
  outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 288), (uint64_t (*)(_QWORD))type metadata accessor for MLRandomForestRegressor);
  v2 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics;
  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 16);
  if (v3 == 255)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 312);
    v6 = *(_QWORD *)(v0 + 288);
    v5 = *(_QWORD *)(v0 + 296);
    v7 = v3 & 1;
    v9 = *(id *)v2;
    v8 = *(_QWORD *)(v2 + 8);
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v2, v8, v3 & 1);
    v10 = outlined destroy of MLRandomForestRegressor.ModelParameters(v0 + 16);
    OUTLINED_FUNCTION_48_0(v10, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    v11 = v6 + *(int *)(v4 + 36);
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    *(_QWORD *)v11 = v9;
    *(_QWORD *)(v11 + 8) = v8;
    *(_BYTE *)(v11 + 16) = v7;
    v13 = *(void **)(v5 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
    v12 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8);
    v14 = *(unsigned __int8 *)(v5
                             + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics
                             + 16);
    outlined copy of MLRegressorMetrics?(v13, v12, *(_BYTE *)(v5 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 16));
    swift_release();
    if (v14 != 255)
    {
      v15 = *(_QWORD *)(v0 + 288) + *(int *)(*(_QWORD *)(v0 + 312) + 40);
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
      *(_QWORD *)v15 = v13;
      *(_QWORD *)(v15 + 8) = v12;
      *(_BYTE *)(v15 + 16) = v14 & 1;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_10();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
  }
}

void MLRandomForestRegressor.predictions(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::OpaquePointer v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;

  v2 = OUTLINED_FUNCTION_93();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for MLRandomForestRegressor();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v4, v5);
  if (!v6)
  {
    OUTLINED_FUNCTION_18();
    TreeRegressorModel.applied(to:eventHandler:)(v7);
    MEMORY[0x220758A1C](*v0, v0[1]);
    OUTLINED_FUNCTION_23_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
}

void MLRandomForestRegressor.predictions(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  char v12;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_95_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_54_0();
  v10 = *(_BYTE *)(a1 + 8);
  v11 = *(id *)a1;
  v12 = v10;
  outlined copy of Result<_DataTable, Error>(v11, v10);
  DataFrame.init(_:)((uint64_t)&v11);
  MLRandomForestRegressor.predictions(from:)();
  OUTLINED_FUNCTION_47_2(v3, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  if (!v2)
    MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v4, 1, a2);
  OUTLINED_FUNCTION_127();
}

void MLRandomForestRegressor.evaluation(on:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  Swift::OpaquePointer v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t inited;
  _QWORD *v10;
  uint64_t v11;
  Swift::String v12;

  v5 = OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v6, v7);
  if (v8)
    goto LABEL_4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  v10 = (_QWORD *)(v2 + *(int *)(v5 + 24));
  v11 = v10[1];
  *(_QWORD *)(inited + 32) = *v10;
  *(_QWORD *)(inited + 40) = v11;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 0x6C6562614CLL;
  v12._object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v12);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (v8)
  {
LABEL_4:
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    TreeRegressorModel.computeMetrics(on:)(a1, (_QWORD *)a2);
  }
}

uint64_t MLRandomForestRegressor.evaluation(on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v9;
  char v10;

  v5 = type metadata accessor for DataFrame();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  v7 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLRandomForestRegressor.evaluation(on:)(v2, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
}

void MLRandomForestRegressor.write(to:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSString *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[10];

  OUTLINED_FUNCTION_8_1();
  v41 = v0;
  v5 = v4;
  v47 = v6;
  type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v40 = v8;
  v9 = type metadata accessor for Model();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_46_2();
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_53_0();
  v39 = v5[1];
  v45 = v5[2];
  v46 = *v5;
  v43 = v5[4];
  v44 = v5[3];
  v13 = v5[6];
  v42 = v5[5];
  v14 = v5[7];
  v15 = v5[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v47, 0xD000000000000015, 0x800000021AFF2240, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v3);
  if (!v1)
  {
    v37 = v15;
    v38 = v14;
    v48 = v2;
    v36 = v9;
    OUTLINED_FUNCTION_97(v41, v16, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
    if (v39)
    {
      v17 = v46;
      v18 = v46;
      v19 = v39;
      v20 = v45;
      v21 = v44;
      v22 = v43;
      v23 = v42;
      v24 = v13;
      v25 = v38;
    }
    else
    {
      v26 = NSFullUserName();
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v19 = v27;

      v22 = 0;
      v23 = 0;
      v15 = 0;
      v20 = 0xD000000000000033;
      v21 = 0x800000021AFF2260;
      v25 = 0xE100000000000000;
      v24 = 49;
      v17 = v46;
    }
    v49[0] = v18;
    v49[1] = v19;
    v49[2] = v20;
    v49[3] = v21;
    v49[4] = v22;
    v49[5] = v23;
    v49[6] = v24;
    v49[7] = v25;
    v49[8] = v15;
    outlined copy of MLModelMetadata?(v17, v39);
    specialized CoreMLExportable.export(metadata:)((uint64_t)v49, (uint64_t)TreeRegressorModel.export(internalMetadata:), v28, v29, v30, v31, v32, v33, v10, v36, v11, 0, v37, v38, v13, v39, v40, v41, v42,
      v43);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_101();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_203(v34, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
    Model.write(to:)();
    OUTLINED_FUNCTION_34_3(v48, *(uint64_t (**)(uint64_t, _QWORD))(v35 + 8));
    OUTLINED_FUNCTION_23_2(v3, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  }
  OUTLINED_FUNCTION_7();
}

#error "21AE16A10: call analysis failed (funcsize=6)"

#error "21AE16A2C: call analysis failed (funcsize=6)"

#error "21AE16A48: call analysis failed (funcsize=6)"

void specialized CoreMLExportable.export(metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;

  OUTLINED_FUNCTION_8_1();
  a19 = v24;
  a20 = v25;
  v26 = OUTLINED_FUNCTION_75_1();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_53_0();
  a10 = MEMORY[0x24BEE4B00];
  MLSoundClassifier.Model.export(internalMetadata:)(&a10, v20);
  if (v21)
  {
    OUTLINED_FUNCTION_99_0();
  }
  else
  {
    v31 = (_QWORD *)v26;
    OUTLINED_FUNCTION_36_3();
    OUTLINED_FUNCTION_73();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_86_0();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_89_0();
    OUTLINED_FUNCTION_85_0();
    OUTLINED_FUNCTION_72_0();
    if (!v23)
      Dictionary.init(dictionaryLiteral:)();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_98_0();
    v28 = a10;
    swift_bridgeObjectRetain();
    Model.metadata.modify();
    OUTLINED_FUNCTION_79_0(v28, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), v30, v29);
    OUTLINED_FUNCTION_68_1();
    getOSVersion()();
    OUTLINED_FUNCTION_56_2();
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_82_0();
    OUTLINED_FUNCTION_216(v22, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16));
    Model.nestedModels.getter();
    OUTLINED_FUNCTION_47_2(v22, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
    OUTLINED_FUNCTION_70_1();
    OUTLINED_FUNCTION_71_1();
    OUTLINED_FUNCTION_99_0();
    specialized Sequence<>.max()(v31);
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_64_2();
  }
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t *);
  void (*v29)(uint64_t *);
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  OUTLINED_FUNCTION_8_1();
  a19 = v26;
  a20 = v27;
  v29 = v28;
  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_95_0();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_53_0();
  a10 = MEMORY[0x24BEE4B00];
  v29(&a10);
  if (!v21)
  {
    OUTLINED_FUNCTION_36_3();
    OUTLINED_FUNCTION_73();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_86_0();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_89_0();
    OUTLINED_FUNCTION_85_0();
    OUTLINED_FUNCTION_72_0();
    if (!v24)
      Dictionary.init(dictionaryLiteral:)();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_98_0();
    Model.metadata.modify();
    OUTLINED_FUNCTION_79_0(MEMORY[0x24BEE4B00], (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), v32, v31);
    OUTLINED_FUNCTION_68_1();
    getOSVersion()();
    OUTLINED_FUNCTION_56_2();
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_82_0();
    OUTLINED_FUNCTION_216(v23, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16));
    Model.nestedModels.getter();
    OUTLINED_FUNCTION_47_2(v23, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    OUTLINED_FUNCTION_70_1();
    OUTLINED_FUNCTION_71_1();
    OUTLINED_FUNCTION_99_0();
    specialized Sequence<>.max()(v22);
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_64_2();
  }
  OUTLINED_FUNCTION_7();
}

#error "21AE16BF8: call analysis failed (funcsize=6)"

void MLRandomForestRegressor.write(toFile:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  OUTLINED_FUNCTION_8_1();
  v19 = v2;
  v4 = v3;
  v5 = type metadata accessor for URL.DirectoryHint();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_161();
  v12 = *v4;
  v17 = v4[1];
  v18 = v12;
  v13 = v4[2];
  v15 = v4[3];
  v16 = v13;
  v14 = *((_QWORD *)v4 + 8);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 1, 1, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v0, *MEMORY[0x24BDCD7A0], v5);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  v20 = v18;
  v21 = v17;
  v22 = v16;
  v23 = v15;
  v24 = v14;
  MLRandomForestRegressor.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v10);
  OUTLINED_FUNCTION_7();
}

unint64_t MLRandomForestRegressor.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  char v8;
  unint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  v1 = OUTLINED_FUNCTION_6_5();
  v2 = MLRandomForestRegressor.ModelParameters.description.getter();
  v4 = v3;
  v5 = MLRegressorMetrics.description.getter();
  v7 = v6;
  v8 = *(_BYTE *)(v0 + *(int *)(v1 + 40) + 16);
  v9 = MLRegressorMetrics.description.getter();
  v11 = v10;
  v12._countAndFlagsBits = v2;
  v12._object = v4;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v5;
  v13._object = v7;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xD00000000000001ELL;
  v14._object = (void *)0x800000021AFF1480;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    v15._countAndFlagsBits = v9;
    v15._object = v11;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD000000000000020;
    v16._object = (void *)0x800000021AFF14A0;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_123();
  return 0xD000000000000022;
}

void MLRandomForestRegressor.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  unint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString();
  v3._countAndFlagsBits = MLRandomForestRegressor.description.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

uint64_t specialized Sequence<>.max()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1[2];
  if (!v1)
    return 0;
  result = a1[4];
  v4 = v1 - 1;
  if (v1 != 1)
  {
    v5 = a1 + 5;
    do
    {
      v7 = *v5++;
      v6 = v7;
      if (result <= v7)
        result = v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

unint64_t lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor;
  if (!lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor)
  {
    v1 = type metadata accessor for TreeRegressor();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for TreeRegressor, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor;
  if (!lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor)
  {
    v1 = type metadata accessor for TreeRegressor();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for TreeRegressor, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_42_2() - 8) + 80);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + ((v1 + 16) & ~v1) + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v2 = type metadata accessor for BaseTreeRegressorModel();
  OUTLINED_FUNCTION_11_1(v2);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLRandomForestRegressor.init(checkpoint:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestRegressor.init(checkpoint:)(v2);
}

void _s8CreateML27MLTrainingSessionParametersVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_166(a1, a2, a3);
  OUTLINED_FUNCTION_40_3(v3);
  OUTLINED_FUNCTION_22();
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  swift_arrayDestroy();
  OUTLINED_FUNCTION_32_3();
  return swift_deallocClassInstance();
}

{
  type metadata accessor for NSURLResourceKey(0);
  OUTLINED_FUNCTION_74_1();
  OUTLINED_FUNCTION_32_3();
  return OUTLINED_FUNCTION_38_2();
}

{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[Float]]);
  OUTLINED_FUNCTION_74_1();
  OUTLINED_FUNCTION_32_3();
  return OUTLINED_FUNCTION_38_2();
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for (name: String, parameter: Parameter));
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit(&demangling cache variable for type metadata for (name: String, state: LayerState));
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit((void (*)(_QWORD))type metadata accessor for MLCheckpoint);
}

{
  return specialized _ContiguousArrayStorage.__deallocating_deinit((void (*)(_QWORD))MEMORY[0x24BDCDAC0]);
}

uint64_t outlined copy of MLModelMetadata?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t type metadata accessor for NSAttributedString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSAttributedString;
  if (!lazy cache variable for type metadata for NSAttributedString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  }
  return result;
}

id sub_21AE17360@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = MLRandomForestRegressor.model.getter();
  *a1 = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MLRandomForestRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  uint64_t v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  id v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char *v41;
  char *v42;
  id v43;
  uint64_t v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for BaseTreeRegressorModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[5];
    v18 = a3[6];
    v19 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)a1 + v17) = v19;
    v20 = (_QWORD *)((char *)a1 + v18);
    v21 = (_QWORD *)((char *)a2 + v18);
    v22 = *v21;
    v23 = v21[1];
    v24 = a3[7];
    v25 = a3[8];
    v26 = *(_QWORD *)((char *)a2 + v24);
    *v20 = v22;
    v20[1] = v23;
    *(_QWORD *)((char *)a1 + v24) = v26;
    v27 = (char *)a1 + v25;
    v28 = (_OWORD *)((char *)a2 + v25);
    v29 = *(_QWORD *)((char *)a2 + v25 + 24);
    v30 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29)
    {
      *((_QWORD *)v27 + 3) = v29;
      (**(void (***)(char *, _OWORD *, uint64_t))(v29 - 8))(v27, v28, v29);
    }
    else
    {
      v31 = v28[1];
      *(_OWORD *)v27 = *v28;
      *((_OWORD *)v27 + 1) = v31;
    }
    v32 = v28[3];
    *((_OWORD *)v27 + 2) = v28[2];
    *((_OWORD *)v27 + 3) = v32;
    v33 = v28[5];
    *((_OWORD *)v27 + 4) = v28[4];
    *((_OWORD *)v27 + 5) = v33;
    *((_OWORD *)v27 + 6) = v28[6];
    v34 = a3[9];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    v37 = *(id *)v36;
    v38 = *((_QWORD *)v36 + 1);
    v39 = v36[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v36, v38, v39);
    *(_QWORD *)v35 = v37;
    *((_QWORD *)v35 + 1) = v38;
    v35[16] = v39;
    v40 = a3[10];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = *(id *)v42;
    v44 = *((_QWORD *)v42 + 1);
    LOBYTE(v37) = v42[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v42, v44, (char)v37);
    *(_QWORD *)v41 = v43;
    *((_QWORD *)v41 + 1) = v44;
    v41[16] = (char)v37;
  }
  return a1;
}

void destroy for MLRandomForestRegressor(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v5 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + a2[8];
  if (*(_QWORD *)(v6 + 24))
    __swift_destroy_boxed_opaque_existential_0(v6);
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8), *(_BYTE *)(a1 + a2[9] + 16));
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)(a1 + a2[10]), *(_QWORD *)(a1 + a2[10] + 8), *(_BYTE *)(a1 + a2[10] + 16));
}

_QWORD *initializeWithCopy for MLRandomForestRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  uint64_t v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  id v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  id v41;
  uint64_t v42;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[5];
  v16 = a3[6];
  v17 = *(void **)((char *)a2 + v15);
  *(_QWORD *)((char *)a1 + v15) = v17;
  v18 = (_QWORD *)((char *)a1 + v16);
  v19 = (_QWORD *)((char *)a2 + v16);
  v20 = *v19;
  v21 = v19[1];
  v22 = a3[7];
  v23 = a3[8];
  v24 = *(_QWORD *)((char *)a2 + v22);
  *v18 = v20;
  v18[1] = v21;
  *(_QWORD *)((char *)a1 + v22) = v24;
  v25 = (char *)a1 + v23;
  v26 = (_OWORD *)((char *)a2 + v23);
  v27 = *(_QWORD *)((char *)a2 + v23 + 24);
  v28 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27)
  {
    *((_QWORD *)v25 + 3) = v27;
    (**(void (***)(char *, _OWORD *, uint64_t))(v27 - 8))(v25, v26, v27);
  }
  else
  {
    v29 = v26[1];
    *(_OWORD *)v25 = *v26;
    *((_OWORD *)v25 + 1) = v29;
  }
  v30 = v26[3];
  *((_OWORD *)v25 + 2) = v26[2];
  *((_OWORD *)v25 + 3) = v30;
  v31 = v26[5];
  *((_OWORD *)v25 + 4) = v26[4];
  *((_OWORD *)v25 + 5) = v31;
  *((_OWORD *)v25 + 6) = v26[6];
  v32 = a3[9];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(id *)v34;
  v36 = *((_QWORD *)v34 + 1);
  v37 = v34[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v34, v36, v37);
  *(_QWORD *)v33 = v35;
  *((_QWORD *)v33 + 1) = v36;
  v33[16] = v37;
  v38 = a3[10];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = *(id *)v40;
  v42 = *((_QWORD *)v40 + 1);
  LOBYTE(v35) = v40[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v40, v42, (char)v35);
  *(_QWORD *)v39 = v41;
  *((_QWORD *)v39 + 1) = v42;
  v39[16] = (char)v35;
  return a1;
}

_QWORD *assignWithCopy for MLRandomForestRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  id v30;
  uint64_t v31;
  char v32;
  void *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  char v43;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[5];
  v16 = *(void **)((char *)a2 + v15);
  v17 = *(void **)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = v16;
  v18 = v16;

  v19 = a3[6];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = (uint64_t)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)((char *)a2 + v22 + 24);
  if (!*(_QWORD *)((char *)a1 + v22 + 24))
  {
    if (v25)
    {
      *(_QWORD *)(v23 + 24) = v25;
      (**(void (***)(uint64_t, char *))(v25 - 8))(v23, v24);
      goto LABEL_15;
    }
LABEL_14:
    v26 = *((_OWORD *)v24 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v26;
    goto LABEL_15;
  }
  if (!v25)
  {
    __swift_destroy_boxed_opaque_existential_0(v23);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v23, (uint64_t *)v24);
LABEL_15:
  *(_QWORD *)(v23 + 32) = *((_QWORD *)v24 + 4);
  *(_QWORD *)(v23 + 40) = *((_QWORD *)v24 + 5);
  *(_QWORD *)(v23 + 48) = *((_QWORD *)v24 + 6);
  *(_QWORD *)(v23 + 56) = *((_QWORD *)v24 + 7);
  *(_QWORD *)(v23 + 64) = *((_QWORD *)v24 + 8);
  *(_QWORD *)(v23 + 72) = *((_QWORD *)v24 + 9);
  *(_QWORD *)(v23 + 80) = *((_QWORD *)v24 + 10);
  *(_QWORD *)(v23 + 88) = *((_QWORD *)v24 + 11);
  *(_QWORD *)(v23 + 96) = *((_QWORD *)v24 + 12);
  *(_QWORD *)(v23 + 104) = *((_QWORD *)v24 + 13);
  v27 = a3[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(id *)v29;
  v31 = *((_QWORD *)v29 + 1);
  v32 = v29[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v29, v31, v32);
  v33 = *(void **)v28;
  v34 = *((_QWORD *)v28 + 1);
  v35 = v28[16];
  *(_QWORD *)v28 = v30;
  *((_QWORD *)v28 + 1) = v31;
  v28[16] = v32;
  outlined consume of Result<_RegressorMetrics, Error>(v33, v34, v35);
  v36 = a3[10];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(id *)v38;
  v40 = *((_QWORD *)v38 + 1);
  LOBYTE(v30) = v38[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v38, v40, (char)v30);
  v41 = *(void **)v37;
  v42 = *((_QWORD *)v37 + 1);
  v43 = v37[16];
  *(_QWORD *)v37 = v39;
  *((_QWORD *)v37 + 1) = v40;
  v37[16] = (char)v30;
  outlined consume of Result<_RegressorMetrics, Error>(v41, v42, v43);
  return a1;
}

uint64_t initializeWithTake for MLRandomForestRegressor(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  memcpy((void *)(a1 + v12), (const void *)(a2 + v12), 0x70uLL);
  v13 = a3[9];
  v14 = a3[10];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  return a1;
}

_QWORD *assignWithTake for MLRandomForestRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  void *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  void *v35;
  uint64_t v36;
  char v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  v9 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[5];
  v14 = *(void **)((char *)a1 + v13);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);

  v15 = a3[6];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (char *)a1 + v20;
  if (*(_QWORD *)((char *)a1 + v20 + 24))
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1 + v20);
  v22 = *(_OWORD *)((char *)a2 + v20 + 16);
  *(_OWORD *)v21 = *(_OWORD *)((char *)a2 + v20);
  *((_OWORD *)v21 + 1) = v22;
  v23 = *(_OWORD *)((char *)a2 + v20 + 48);
  *((_OWORD *)v21 + 2) = *(_OWORD *)((char *)a2 + v20 + 32);
  *((_OWORD *)v21 + 3) = v23;
  *((_QWORD *)v21 + 8) = *(_QWORD *)((char *)a2 + v20 + 64);
  *(_OWORD *)(v21 + 72) = *(_OWORD *)((char *)a2 + v20 + 72);
  *(_OWORD *)(v21 + 88) = *(_OWORD *)((char *)a2 + v20 + 88);
  *((_QWORD *)v21 + 13) = *(_QWORD *)((char *)a2 + v20 + 104);
  v24 = a3[9];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = v26[16];
  v28 = *(void **)v25;
  v29 = *((_QWORD *)v25 + 1);
  v30 = v25[16];
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v25[16] = v27;
  outlined consume of Result<_RegressorMetrics, Error>(v28, v29, v30);
  v31 = a3[10];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = v33[16];
  v35 = *(void **)v32;
  v36 = *((_QWORD *)v32 + 1);
  v37 = v32[16];
  *(_OWORD *)v32 = *(_OWORD *)v33;
  v32[16] = v34;
  outlined consume of Result<_RegressorMetrics, Error>(v35, v36, v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRandomForestRegressor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_21AE17D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_42_2();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    __swift_getEnumTagSinglePayload(a1, a2, v4);
  else
    OUTLINED_FUNCTION_125();
}

uint64_t storeEnumTagSinglePayload for MLRandomForestRegressor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AE17D98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_42_2();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    OUTLINED_FUNCTION_125();
  }
}

uint64_t type metadata completion function for MLRandomForestRegressor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TreeRegressorModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_32_3();
  return swift_deallocClassInstance();
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit(void (*a1)(_QWORD))
{
  a1(0);
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_32_3();
  return swift_deallocClassInstance();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;

  specialized LazyMapSequence.makeIterator()(&v47);
  v45 = v47;
  v46 = v48;
  v43 = a1;
  swift_bridgeObjectRetain();
  v44 = a3;
  swift_retain();
  v9 = specialized LazyMapSequence.Iterator.next()();
  if (v10)
  {
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    while (1)
    {
      v17 = (_QWORD *)*a5;
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
      v26 = v17[2];
      v27 = (v18 & 1) == 0;
      v28 = v26 + v27;
      if (__OFADD__(v26, v27))
        break;
      v29 = v18;
      if (v17[3] >= v28)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, a4 & 1, v19, v20, v21, v22, v23, v24, v43, v44, v45, *((uint64_t *)&v45 + 1), v46, SBYTE4(v46));
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
        if ((v29 & 1) != (v31 & 1))
          goto LABEL_17;
        v25 = v30;
      }
      v32 = (_QWORD *)*a5;
      if ((v29 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v33 = (_QWORD *)(v32[7] + 16 * v25);
        swift_bridgeObjectRelease();
        *v33 = v15;
        v33[1] = v16;
      }
      else
      {
        v32[(v25 >> 6) + 8] |= 1 << v25;
        v34 = (uint64_t *)(v32[6] + 16 * v25);
        *v34 = v13;
        v34[1] = v14;
        v35 = (_QWORD *)(v32[7] + 16 * v25);
        *v35 = v15;
        v35[1] = v16;
        v36 = v32[2];
        v37 = __OFADD__(v36, 1);
        v38 = v36 + 1;
        if (v37)
          goto LABEL_16;
        v32[2] = v38;
      }
      v13 = specialized LazyMapSequence.Iterator.next()();
      v14 = v39;
      v15 = v40;
      v16 = v41;
      a4 = 1;
      if (!v39)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : [Int]].Iterator._Variant();
    return swift_release();
  }
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;

  specialized LazyMapSequence.makeIterator()(&v50);
  v48 = v50;
  v49 = v51;
  v46 = a1;
  swift_bridgeObjectRetain();
  v47 = a3;
  swift_retain();
  v9 = specialized LazyMapSequence.Iterator.next()();
  if (v10)
  {
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    while (1)
    {
      v17 = (_QWORD *)*a5;
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
      v26 = v17[2];
      v27 = (v18 & 1) == 0;
      v28 = v26 + v27;
      if (__OFADD__(v26, v27))
        break;
      v29 = v18;
      if (v17[3] >= v28)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, a4 & 1, v19, v20, v21, v22, v23, v24, v46, v47, v48, *((uint64_t *)&v48 + 1), v49, SBYTE4(v49));
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
        if ((v29 & 1) != (v31 & 1))
          goto LABEL_17;
        v25 = v30;
      }
      v32 = (_QWORD *)*a5;
      if ((v29 & 1) != 0)
      {
        v33 = (uint64_t *)(v32[7] + 16 * v25);
        v35 = *v33;
        v34 = v33[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v36 = (_QWORD *)(v32[7] + 16 * v25);
        swift_bridgeObjectRelease();
        *v36 = v35;
        v36[1] = v34;
      }
      else
      {
        v32[(v25 >> 6) + 8] |= 1 << v25;
        v37 = (uint64_t *)(v32[6] + 16 * v25);
        *v37 = v13;
        v37[1] = v14;
        v38 = (_QWORD *)(v32[7] + 16 * v25);
        *v38 = v15;
        v38[1] = v16;
        v39 = v32[2];
        v40 = __OFADD__(v39, 1);
        v41 = v39 + 1;
        if (v40)
          goto LABEL_16;
        v32[2] = v41;
      }
      v13 = specialized LazyMapSequence.Iterator.next()();
      v14 = v42;
      v15 = v43;
      v16 = v44;
      a4 = 1;
      if (!v42)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : [Int]].Iterator._Variant();
    return swift_release();
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  __int128 v30;
  _OWORD v31[2];

  specialized LazyMapSequence.makeIterator()(a1, a2, a3, v31);
  v30 = v31[1];
  OUTLINED_FUNCTION_52_1();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (v8)
  {
    v10 = v7;
    v11 = v8;
    v12 = v9;
    while (1)
    {
      v14 = OUTLINED_FUNCTION_41_13();
      v15 = (v13 & 1) == 0;
      v16 = v30 + v15;
      if (__OFADD__((_QWORD)v30, v15))
        break;
      v17 = v13;
      if (*((uint64_t *)&v30 + 1) >= v16)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
        v18 = OUTLINED_FUNCTION_41_13();
        if ((v17 & 1) != (v19 & 1))
          goto LABEL_17;
        v14 = v18;
      }
      v20 = (_QWORD *)*a5;
      if ((v17 & 1) != 0)
      {
        v21 = *(_QWORD *)(v20[7] + 8 * v14);
        OUTLINED_FUNCTION_52_1();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v22 = v20[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v22 + 8 * v14) = v21;
      }
      else
      {
        v20[(v14 >> 6) + 8] |= 1 << v14;
        v23 = (uint64_t *)(v20[6] + 16 * v14);
        *v23 = v10;
        v23[1] = v11;
        *(_QWORD *)(v20[7] + 8 * v14) = v12;
        v24 = v20[2];
        v25 = __OFADD__(v24, 1);
        v26 = v24 + 1;
        if (v25)
          goto LABEL_16;
        v20[2] = v26;
      }
      v10 = specialized LazyMapSequence.Iterator.next()();
      v11 = v27;
      v12 = v28;
      a4 = 1;
      if (!v27)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : [Int]].Iterator._Variant();
    return swift_release();
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];

  specialized LazyMapSequence.makeIterator()(v40);
  v38 = v40[0];
  v39 = v40[1];
  v36 = a1;
  swift_bridgeObjectRetain();
  v37 = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()();
  if (v13)
  {
    OUTLINED_FUNCTION_13_55();
    while (1)
    {
      v21 = OUTLINED_FUNCTION_8_62();
      v22 = (v14 & 1) == 0;
      v23 = v39 + v22;
      if (__OFADD__((_QWORD)v39, v22))
        break;
      v24 = v14;
      if (*((uint64_t *)&v39 + 1) >= v23)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, a4 & 1, v15, v16, v17, v18, v19, v20, v36, v37, v38, *((uint64_t *)&v38 + 1), v39, SBYTE4(v39));
        v25 = OUTLINED_FUNCTION_8_62();
        if ((v24 & 1) != (v26 & 1))
          goto LABEL_17;
        v21 = v25;
      }
      v27 = (_QWORD *)*a5;
      if ((v24 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v28 = (_QWORD *)(v27[7] + 16 * v21);
        swift_bridgeObjectRelease();
        *v28 = v6;
        v28[1] = v7;
      }
      else
      {
        v27[(v21 >> 6) + 8] |= 1 << v21;
        v29 = (_QWORD *)(v27[6] + 16 * v21);
        *v29 = v5;
        v29[1] = v8;
        v30 = (_QWORD *)(v27[7] + 16 * v21);
        *v30 = v6;
        v30[1] = v7;
        v31 = v27[2];
        v32 = __OFADD__(v31, 1);
        v33 = v31 + 1;
        if (v32)
          goto LABEL_16;
        v27[2] = v33;
      }
      specialized LazyMapSequence.Iterator.next()();
      OUTLINED_FUNCTION_13_55();
      a4 = 1;
      if (!v34)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : [Int]].Iterator._Variant();
    return swift_release();
  }
  return result;
}

uint64_t specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v10);
  *a4 = v10;
  return swift_bridgeObjectRelease();
}

{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v10);
  *a4 = v10;
  return swift_bridgeObjectRelease();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(v7, *a1, a1[1], a1[2], a1[3]);
  v4 = v7[0];
  v5 = v7[1];
  *a2 = result;
  a2[1] = v6;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(&v6, *a1, a1[1], a1[2]);
  v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t sub_21AE1824C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in static MLRandomForestRegressor.handleResult(_:session:fulfill:)(a1, v4, v5, v6, v7, v8);
}

void _sypSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_40_3(v3);
  OUTLINED_FUNCTION_22();
}

void outlined init with take of TreeRegressorModel(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = OUTLINED_FUNCTION_166(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  OUTLINED_FUNCTION_22();
}

id outlined copy of MLRegressorMetrics?(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return outlined copy of Result<_RegressorMetrics, Error>(result, a2, a3 & 1);
  return result;
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 272) + 8))(*(_QWORD *)(v0 - 72), *(_QWORD *)(v0 - 264));
}

uint64_t OUTLINED_FUNCTION_4_6()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_6_5()
{
  return type metadata accessor for MLRandomForestRegressor();
}

uint64_t OUTLINED_FUNCTION_10_4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_12_4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_13_4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 240))(v0, *(_QWORD *)(v1 - 256));
}

void OUTLINED_FUNCTION_19_3(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(*(_QWORD *)(v2 - 296), a2);
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  uint64_t v0;

  return outlined destroy of MLRandomForestRegressor.ModelParameters(*(_QWORD *)(v0 - 280));
}

void OUTLINED_FUNCTION_22_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 328), a2);
}

double OUTLINED_FUNCTION_25_2@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  *(_QWORD *)a2 = a3;
  *(_QWORD *)(a2 + 8) = (v3 - 32) | 0x8000000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)v4 = a1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_28_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_30_3()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 - 8);
  *v2 = *v0;
  *v2 = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_31_3()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_32_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_34_3@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 256));
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  return specialized Dictionary._Variant.setValue(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_36_3()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0[4];
  *(_QWORD *)(v1 - 152) = *v0;
  *(_QWORD *)(v1 - 144) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_38_2()
{
  return swift_deallocClassInstance();
}

uint64_t OUTLINED_FUNCTION_39_2(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_40_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_42_2()
{
  return type metadata accessor for TreeRegressorModel();
}

double OUTLINED_FUNCTION_44_2@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_45_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_46_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_47_2@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_48_2(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

id OUTLINED_FUNCTION_53_3(id result, uint64_t a2, char a3)
{
  return outlined copy of Result<_RegressorMetrics, Error>(result, a2, a3);
}

uint64_t OUTLINED_FUNCTION_56_2()
{
  return Model.metadata.modify();
}

void OUTLINED_FUNCTION_60_2(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = 0xD000000000000013;
  *(_QWORD *)(v1 + 40) = (a1 - 32) | 0x8000000000000000;
}

void OUTLINED_FUNCTION_62_2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  _sypSgWOcTm_0(*(_QWORD *)(v4 - 288), v3, a3);
}

uint64_t OUTLINED_FUNCTION_63_2()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_64_2()
{
  return Model.specificationVersion.setter();
}

void OUTLINED_FUNCTION_65_2(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, a2);
}

uint64_t OUTLINED_FUNCTION_66_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  v3 = (uint64_t *)(v2 + a1);
  result = *v3;
  v5 = v3[1];
  v6 = *((_BYTE *)v3 + 16);
  *(_QWORD *)v1 = *v3;
  *(_QWORD *)(v1 + 8) = v5;
  *(_BYTE *)(v1 + 16) = v6;
  return result;
}

uint64_t OUTLINED_FUNCTION_67_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_68_1()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 112, 0);
}

uint64_t OUTLINED_FUNCTION_70_1()
{
  uint64_t v0;

  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay20MLModelSpecification5ModelVG_Sis5NeverOTg5051_s8CreateML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n(v0);
}

uint64_t OUTLINED_FUNCTION_71_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_72_0()
{
  return Model.license.setter();
}

uint64_t OUTLINED_FUNCTION_73()
{
  return Model.modelDescription.setter();
}

uint64_t OUTLINED_FUNCTION_74_1()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_75_1()
{
  return type metadata accessor for Model();
}

uint64_t OUTLINED_FUNCTION_78_1()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;

  v2 = *(void **)v0;
  v3 = *(_BYTE *)(v0 + 8);
  *(_QWORD *)(v1 - 96) = *(_QWORD *)v0;
  *(_BYTE *)(v1 - 88) = v3;
  outlined copy of Result<_DataTable, Error>(v2, v3);
  return v1 - 96;
}

uint64_t OUTLINED_FUNCTION_79_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(a1, a2, 0, a4);
}

uint64_t OUTLINED_FUNCTION_82_0()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 112, 0);
}

uint64_t OUTLINED_FUNCTION_85_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_86_0()
{
  return Model.versionString.setter();
}

uint64_t OUTLINED_FUNCTION_87_0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_89_0()
{
  return Model.author.setter();
}

uint64_t OUTLINED_FUNCTION_90_0()
{
  return 0x636E657265666E69;
}

uint64_t OUTLINED_FUNCTION_91_0()
{
  return 0x696C616974696E69;
}

void OUTLINED_FUNCTION_94_0()
{
  uint64_t v0;

  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void OUTLINED_FUNCTION_96_0()
{
  uint64_t v0;

  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void OUTLINED_FUNCTION_97(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_98_0()
{
  return Model.metadata.setter();
}

uint64_t OUTLINED_FUNCTION_99_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.ModelParameters.ValidationData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for MLImageClassifier.DataSource();
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      else
      {
        v8 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_11;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for MLImageClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result != 1)
    return result;
  type metadata accessor for MLImageClassifier.DataSource();
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if (result <= 1)
  {
    v3 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for MLImageClassifier.ModelParameters.ValidationData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
LABEL_9:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLImageClassifier.DataSource();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_9;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithCopy for MLImageClassifier.ModelParameters.ValidationData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for MLImageClassifier.DataSource();
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      else
      {
        v7 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_10;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata accessor for MLImageClassifier.ModelParameters.ValidationData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLImageClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLImageClassifier.ModelParameters.ValidationData)
    return swift_getSingletonMetadata();
  return result;
}

void *initializeWithTake for MLImageClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for MLImageClassifier.DataSource();
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for MLImageClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for MLImageClassifier.DataSource();
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        v7 = type metadata accessor for URL();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLImageClassifier.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLImageClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

Swift::tuple_training_OpaquePointer_validation_OpaquePointer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.ModelParameters.ValidationData.extractFilesByLabel(trainingFiles:)(Swift::OpaquePointer trainingFiles)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::tuple_training_OpaquePointer_validation_OpaquePointer result;
  uint64_t v7;

  v2 = type metadata accessor for MLImageClassifier.DataSource();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  MEMORY[0x24BDAC7A8](v3);
  outlined init with copy of MLImageClassifier.ModelParameters.ValidationData(v1, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (char *)sub_21AE18FD8 + 4 * byte_21AFE84F0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
  return result;
}

uint64_t sub_21AE18FD8()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URL]);
  Dictionary.init(dictionaryLiteral:)();
  return v0;
}

uint64_t outlined init with copy of MLImageClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLImageClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLImageClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *initializeBufferWithCopyOfBuffer for PersistentParametersForTreeBasedMethods(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DataFrame();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v9, 1, v7))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v7);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = &a1[v14];
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    v19 = *(uint64_t *)((char *)a2 + v15);
    *(_QWORD *)v16 = *v17;
    *((_QWORD *)v16 + 1) = v18;
    *(_QWORD *)&a1[v15] = v19;
    v20 = a3[8];
    v21 = &a1[v20];
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for BoostedTreeConfiguration();
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for PersistentParametersForTreeBasedMethods(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for DataFrame();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v4))
    v5(v6, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 32);
  v8 = type metadata accessor for BoostedTreeConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

char *initializeWithCopy for PersistentParametersForTreeBasedMethods(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);

  v6 = type metadata accessor for DataFrame();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = &a1[v12];
  v15 = &a2[v12];
  v16 = *((_QWORD *)v15 + 1);
  v17 = *(_QWORD *)&a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  *(_QWORD *)&a1[v13] = v17;
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for BoostedTreeConfiguration();
  v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v19, v20, v21);
  return a1;
}

char *assignWithCopy for PersistentParametersForTreeBasedMethods(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = type metadata accessor for DataFrame();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v9], 1, v6);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v13)
    {
      v8(v10, v11, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v6);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for BoostedTreeConfiguration();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

char *initializeWithTake for PersistentParametersForTreeBasedMethods(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for DataFrame();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[8];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for BoostedTreeConfiguration();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

char *assignWithTake for PersistentParametersForTreeBasedMethods(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = type metadata accessor for DataFrame();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v9], 1, v6);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v13)
    {
      v8(v10, v11, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v6);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = type metadata accessor for BoostedTreeConfiguration();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for PersistentParametersForTreeBasedMethods()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE1984C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6 = OUTLINED_FUNCTION_21_3();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v9;
    v10 = a3[5];
LABEL_10:
    v8 = v4 + v10;
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    v7 = type metadata accessor for BoostedTreeConfiguration();
    v10 = a3[8];
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v4 + a3[6] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for PersistentParametersForTreeBasedMethods()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE19914(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v8 = OUTLINED_FUNCTION_21_3();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    {
      v9 = result;
      v12 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(v5 + a4[6] + 8) = (v4 - 1);
        return result;
      }
      v9 = type metadata accessor for BoostedTreeConfiguration();
      v12 = a4[8];
    }
    v10 = v5 + v12;
  }
  return __swift_storeEnumTagSinglePayload(v10, v4, v4, v9);
}

uint64_t type metadata accessor for PersistentParametersForTreeBasedMethods()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PersistentParametersForTreeBasedMethods;
  if (!type metadata singleton initialization cache for PersistentParametersForTreeBasedMethods)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for PersistentParametersForTreeBasedMethods()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for DataFrame();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DataFrame?();
    if (v1 <= 0x3F)
    {
      type metadata accessor for BoostedTreeConfiguration();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for DataFrame?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DataFrame?)
  {
    type metadata accessor for DataFrame();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DataFrame?);
  }
}

uint64_t PersistentParametersForTreeBasedMethods.init(sessionDirectory:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  void *v46;
  uint64_t v47;
  Class isa;
  id v49;
  id v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  double v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, _QWORD, _QWORD);
  _QWORD v70[5];
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  char v93[8];
  char v94[8];
  uint64_t v95;
  char v96[8];
  uint64_t v97;

  v95 = *MEMORY[0x24BDAC8D0];
  v81 = type metadata accessor for CSVType();
  v80 = *(_QWORD *)(v81 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v5);
  type metadata accessor for CSVReadingOptions();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_211();
  v78 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v11);
  v12 = type metadata accessor for DataFrame();
  v79 = *(_QWORD *)(v12 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v15);
  v16 = type metadata accessor for URL();
  v85 = *(_QWORD *)(v16 - 8);
  v86 = v16;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_15_3();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v70 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)v70 - v24;
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)v70 - v27;
  v29 = MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)v70 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)v70 - v32;
  v83 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v84 = a2;
  v88 = a2 + *(int *)(v83 + 20);
  __swift_storeEnumTagSinglePayload(v88, 1, 1, v12);
  v34 = a1;
  URL.appendingPathComponent(_:)();
  v35 = v87;
  v36 = Data.init(contentsOf:options:)();
  v87 = v35;
  if (v35)
  {
    v38 = v86;
    v39 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
    v39((uint64_t)a1, v86);
    v39((uint64_t)v33, v38);
    v40 = v88;
    return outlined destroy of DataFrame?(v40, &demangling cache variable for type metadata for DataFrame?);
  }
  v41 = v36;
  v42 = v37;
  v71 = v25;
  v70[4] = v22;
  v73 = v28;
  v74 = v31;
  v72 = v12;
  v77 = v34;
  v43 = v85;
  v44 = v86;
  v45 = *(void (**)(char *, uint64_t))(v85 + 8);
  v45(v33, v86);
  v46 = (void *)objc_opt_self();
  v47 = v41;
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v91 = 0;
  v49 = objc_msgSend(v46, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v91);

  v50 = (id)v91;
  if (!v49)
  {
    v59 = v50;
    _convertNSErrorToError(_:)();

    swift_willThrow(v60);
    outlined consume of Data._Representation(v47, v42);
    OUTLINED_FUNCTION_2_6((uint64_t)&v97);
LABEL_41:
    v40 = v88;
    return outlined destroy of DataFrame?(v40, &demangling cache variable for type metadata for DataFrame?);
  }
  v75 = v47;
  v76 = v42;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v93, (uint64_t)&v91);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_18_0(v61, 0xD000000000000037);
    OUTLINED_FUNCTION_1_8((uint64_t)v96);
    v62 = v77;
LABEL_40:
    v45(v62, v44);
    OUTLINED_FUNCTION_19_4();
    goto LABEL_41;
  }
  OUTLINED_FUNCTION_4_7(0x746567726174, 0xE600000000000000, &v91);
  v51 = v77;
  if (!v92)
  {
    v63 = OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_23_4(v63, &demangling cache variable for type metadata for Any?);
LABEL_39:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_18_0(v65, 0xD000000000000034);
    OUTLINED_FUNCTION_1_8((uint64_t)v96);
    v62 = v51;
    goto LABEL_40;
  }
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
  {
    OUTLINED_FUNCTION_80();
    goto LABEL_39;
  }
  v53 = v89;
  v52 = v90;
  OUTLINED_FUNCTION_4_7(0xD000000000000010, 0x800000021AFF2390, &v91);
  if (!v92)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    v64 = OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_23_4(v64, &demangling cache variable for type metadata for Any?);
LABEL_38:
    v51 = v77;
    goto LABEL_39;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_80();
    goto LABEL_38;
  }
  v54 = v89;
  OUTLINED_FUNCTION_4_7(0x617265744978616DLL, 0xED0000736E6F6974, &v91);
  if (!v92)
    goto LABEL_34;
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  v70[3] = v89;
  OUTLINED_FUNCTION_4_7(0x687470654478616DLL, 0xE800000000000000, &v91);
  if (!v92)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
    goto LABEL_36;
  v70[2] = v89;
  OUTLINED_FUNCTION_4_7(0xD000000000000010, 0x800000021AFF23B0, &v91);
  if (!v92)
    goto LABEL_34;
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
    goto LABEL_36;
  OUTLINED_FUNCTION_4_7(0x646C6968436E696DLL, 0xEE00746867696557, &v91);
  if (!v92)
    goto LABEL_34;
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
    goto LABEL_36;
  OUTLINED_FUNCTION_4_7(0x65536D6F646E6172, 0xEA00000000006465, &v91);
  if (!v92)
    goto LABEL_34;
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
    goto LABEL_36;
  v70[1] = v89;
  OUTLINED_FUNCTION_4_7(0x6173627553776F72, 0xEC000000656C706DLL, &v91);
  if (!v92)
    goto LABEL_34;
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
    goto LABEL_36;
  OUTLINED_FUNCTION_4_7(0x75536E6D756C6F63, 0xEF656C706D617362, &v91);
  if (!v92)
    goto LABEL_34;
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
    goto LABEL_36;
  OUTLINED_FUNCTION_4_7(0x657A695370657473, 0xE800000000000000, &v91);
  if (!v92)
    goto LABEL_34;
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
    goto LABEL_36;
  OUTLINED_FUNCTION_4_7(0xD000000000000013, 0x800000021AFF23D0, &v91);
  if (!v92)
    goto LABEL_34;
  if ((OUTLINED_FUNCTION_0_10() & 1) == 0)
    goto LABEL_36;
  v70[0] = v89;
  v56 = v83;
  v55 = v84;
  v57 = (_QWORD *)(v84 + *(int *)(v83 + 24));
  *v57 = v53;
  v57[1] = v52;
  *(_QWORD *)(v55 + *(int *)(v56 + 28)) = v54;
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  BoostedTreeConfiguration.rowSubsample.setter();
  BoostedTreeConfiguration.columnSubsample.setter();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.earlyStoppingIterationCount.setter();
  OUTLINED_FUNCTION_4_7(0xD000000000000011, 0x800000021AFF23F0, &v91);
  v58 = OUTLINED_FUNCTION_80();
  if (v92)
  {
    if ((OUTLINED_FUNCTION_0_10() & 1) != 0)
      BoostedTreeConfiguration.parallelTreeCount.setter();
  }
  else
  {
    OUTLINED_FUNCTION_23_4(v58, &demangling cache variable for type metadata for Any?);
  }
  v67 = v74;
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_11_4();
  URL.appendingPathComponent(_:)();
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v71, v67, v44);
  OUTLINED_FUNCTION_13_5();
  v87 = 0;
  v68 = OUTLINED_FUNCTION_28_4();
  OUTLINED_FUNCTION_20_2(v68, v69);
  OUTLINED_FUNCTION_15_5((uint64_t)v93);
  OUTLINED_FUNCTION_13_5();
  OUTLINED_FUNCTION_1_8((uint64_t)v96);
  OUTLINED_FUNCTION_2_6((uint64_t)&v97);
  OUTLINED_FUNCTION_2_6((uint64_t)v94);
  OUTLINED_FUNCTION_2_6((uint64_t)&v95);
  OUTLINED_FUNCTION_19_4();
  OUTLINED_FUNCTION_16_5(v82);
  return outlined assign with take of DataFrame?(v82, v88);
}

uint64_t PersistentParametersForTreeBasedMethods.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t inited;
  int *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Class isa;
  id v37;
  id v38;
  void (*v39)(_QWORD, _QWORD);
  void *v41;
  double v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD, _QWORD);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66[76];

  v63 = a1;
  v66[74] = *(id *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_64();
  v55 = v3;
  v60 = type metadata accessor for CSVWritingOptions();
  v58 = *(void (**)(uint64_t, uint64_t))(v60 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_208();
  v53 = v5;
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_211();
  v57 = v7;
  v64 = type metadata accessor for URL();
  v61 = *(_QWORD *)(v64 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_208();
  v54 = v9;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v56 = (char *)&v52 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v52 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE8530;
  *(_QWORD *)(inited + 32) = 0x746567726174;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v16 = (int *)type metadata accessor for PersistentParametersForTreeBasedMethods();
  v17 = (uint64_t *)(v1 + v16[6]);
  v18 = *v17;
  v19 = v17[1];
  v20 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v18;
  *(_QWORD *)(inited + 56) = v19;
  *(_QWORD *)(inited + 72) = v20;
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x800000021AFF2390;
  v21 = *(_QWORD *)(v1 + v16[7]);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(_QWORD *)(inited + 96) = v21;
  *(_QWORD *)(inited + 120) = v22;
  strcpy((char *)(inited + 128), "maxIterations");
  *(_WORD *)(inited + 142) = -4864;
  v59 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = BoostedTreeConfiguration.maximumIterations.getter();
  v24 = (void *)MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 144) = v23;
  *(_QWORD *)(inited + 168) = v24;
  *(_QWORD *)(inited + 176) = 0x687470654478616DLL;
  *(_QWORD *)(inited + 184) = 0xE800000000000000;
  *(_QWORD *)(inited + 192) = BoostedTreeConfiguration.maximumDepth.getter();
  *(_QWORD *)(inited + 216) = v24;
  *(_QWORD *)(inited + 224) = 0xD000000000000010;
  *(_QWORD *)(inited + 232) = 0x800000021AFF23B0;
  BoostedTreeConfiguration.minimumLossReduction.getter();
  v25 = MEMORY[0x24BEE13C8];
  *(_QWORD *)(inited + 240) = v26;
  *(_QWORD *)(inited + 264) = v25;
  strcpy((char *)(inited + 272), "minChildWeight");
  *(_BYTE *)(inited + 287) = -18;
  BoostedTreeConfiguration.minimumChildWeight.getter();
  *(_QWORD *)(inited + 288) = v27;
  *(_QWORD *)(inited + 312) = v25;
  *(_QWORD *)(inited + 320) = 0x65536D6F646E6172;
  *(_QWORD *)(inited + 328) = 0xEA00000000006465;
  *(_QWORD *)(inited + 336) = BoostedTreeConfiguration.randomSeed.getter();
  *(_QWORD *)(inited + 360) = v24;
  strcpy((char *)(inited + 368), "rowSubsample");
  *(_BYTE *)(inited + 381) = 0;
  *(_WORD *)(inited + 382) = -5120;
  BoostedTreeConfiguration.rowSubsample.getter();
  *(_QWORD *)(inited + 384) = v28;
  *(_QWORD *)(inited + 408) = v25;
  *(_QWORD *)(inited + 416) = 0x75536E6D756C6F63;
  *(_QWORD *)(inited + 424) = 0xEF656C706D617362;
  BoostedTreeConfiguration.columnSubsample.getter();
  *(_QWORD *)(inited + 432) = v29;
  *(_QWORD *)(inited + 456) = v25;
  *(_QWORD *)(inited + 464) = 0x657A695370657473;
  *(_QWORD *)(inited + 472) = 0xE800000000000000;
  BoostedTreeConfiguration.learningRate.getter();
  *(_QWORD *)(inited + 480) = v30;
  *(_QWORD *)(inited + 504) = v25;
  *(_QWORD *)(inited + 512) = 0xD000000000000013;
  *(_QWORD *)(inited + 520) = 0x800000021AFF23D0;
  v31 = BoostedTreeConfiguration.earlyStoppingIterationCount.getter();
  *(_QWORD *)(inited + 552) = v24;
  if ((v32 & 1) != 0)
    v33 = 0;
  else
    v33 = v31;
  *(_QWORD *)(inited + 528) = v33;
  v65 = Dictionary.init(dictionaryLiteral:)();
  if (BoostedTreeConfiguration.parallelTreeCount.getter() != 1)
  {
    v34 = (void *)BoostedTreeConfiguration.parallelTreeCount.getter();
    v66[3] = v24;
    v66[0] = v34;
    specialized Dictionary.subscript.setter((uint64_t)v66, 0xD000000000000011, 0x800000021AFF23F0);
  }
  v35 = (void *)objc_opt_self();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v66[0] = 0;
  v37 = objc_msgSend(v35, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, v66);

  v38 = v66[0];
  if (v37)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    URL.appendingPathComponent(_:)();
    v39 = v62;
    Data.write(to:options:)();
    if (v39)
    {
      (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v64);
      return OUTLINED_FUNCTION_9_4();
    }
    else
    {
      v43 = v64;
      v62 = *(void (**)(_QWORD, _QWORD))(v61 + 8);
      v62(v14, v64);
      v44 = v56;
      URL.appendingPathComponent(_:)();
      OUTLINED_FUNCTION_8_5();
      OUTLINED_FUNCTION_5_7();
      v61 = type metadata accessor for DataFrame();
      v45 = v59;
      DataFrameProtocol.writeCSV(to:options:)();
      v46 = OUTLINED_FUNCTION_29_2();
      v58 = v47;
      ((void (*)(uint64_t))v47)(v46);
      v62(v44, v43);
      v48 = v45 + v16[5];
      v49 = v55;
      outlined init with copy of Any?(v48, v55, &demangling cache variable for type metadata for DataFrame?);
      v50 = v61;
      if (__swift_getEnumTagSinglePayload(v49, 1, v61) == 1)
      {
        OUTLINED_FUNCTION_9_4();
        return outlined destroy of DataFrame?(v49, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        OUTLINED_FUNCTION_11_4();
        URL.appendingPathComponent(_:)();
        OUTLINED_FUNCTION_8_5();
        v51 = v53;
        OUTLINED_FUNCTION_5_7();
        DataFrameProtocol.writeCSV(to:options:)();
        OUTLINED_FUNCTION_9_4();
        v58(v51, v60);
        v62(v54, v64);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v49, v50);
      }
    }
  }
  else
  {
    v41 = v38;
    _convertNSErrorToError(_:)();

    return swift_willThrow(v42);
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of DataFrame?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = OUTLINED_FUNCTION_27_4();
  v4(v3);
  return a1;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CSVType));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CSVType>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (char *)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Any?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (String, CSVType));
    v14 = *v5;
    v15 = v5[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v15);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = type metadata accessor for CSVType();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, v9, v21);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t outlined assign with take of DataFrame?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;

  OUTLINED_FUNCTION_50_13();
  String.hash(into:)();
  v4 = OUTLINED_FUNCTION_3_4();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t OUTLINED_FUNCTION_0_10()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_1_8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined consume of Data._Representation(*(_QWORD *)(a1 - 256), *(_QWORD *)(v1 - 368));
}

uint64_t OUTLINED_FUNCTION_2_6@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), v2);
}

void OUTLINED_FUNCTION_4_7(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  specialized Dictionary.subscript.getter(a1, a2, v3, a3);
}

uint64_t OUTLINED_FUNCTION_5_7()
{
  return CSVWritingOptions.init(includesHeader:dateFormat:nilEncoding:trueEncoding:falseEncoding:newline:delimiter:)();
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_11_4()
{
  return 0x69746164696C6176;
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_13_5()
{
  return DataFrame.init(contentsOfSFrameDirectory:columns:rows:)();
}

uint64_t OUTLINED_FUNCTION_14_4()
{
  return CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
}

uint64_t OUTLINED_FUNCTION_15_5@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, _QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(*(_QWORD *)(a1 - 256), *(_QWORD *)(v3 - 392), v2);
}

uint64_t OUTLINED_FUNCTION_16_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, v1, 1, *(_QWORD *)(v2 - 400));
}

uint64_t OUTLINED_FUNCTION_19_4()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0 - 160);
}

uint64_t OUTLINED_FUNCTION_20_2@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, _QWORD)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, *(_QWORD *)(v2 - 256), *(_QWORD *)(v3 - 400));
}

uint64_t OUTLINED_FUNCTION_21_3()
{
  return type metadata accessor for DataFrame();
}

uint64_t OUTLINED_FUNCTION_22_2()
{
  return 1;
}

uint64_t OUTLINED_FUNCTION_23_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of DataFrame?(v2 - 192, a2);
}

uint64_t OUTLINED_FUNCTION_27_4()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_28_4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 248);
}

uint64_t OUTLINED_FUNCTION_29_2()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_30_4()
{
  uint64_t v0;

}

uint64_t specialized Result<>.init(catching:)(uint64_t a1, int *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v2[2] = a1;
  v2[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  v4 = swift_task_alloc();
  v2[4] = v4;
  v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v5 = (_QWORD *)swift_task_alloc();
  v2[5] = v5;
  *v5 = v2;
  v5[1] = specialized Result<>.init(catching:);
  return v7(v4);
}

uint64_t specialized Result<>.init(catching:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  swift_storeEnumTagMultiPayload();
  outlined init with take of (key: URL, value: CIImage)?(v1, v2, &demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  swift_task_dealloc();
  return OUTLINED_FUNCTION_55_3(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 48);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v0 + 8));
}

{
  OUTLINED_FUNCTION_0_74();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_6_67();
  OUTLINED_FUNCTION_9_59();
  OUTLINED_FUNCTION_7_61();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_6_23(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_4_62();
  OUTLINED_FUNCTION_18_39();
  OUTLINED_FUNCTION_13_56(v1, v2, &demangling cache variable for type metadata for Result<MLRandomForestRegressor, Error>);
  OUTLINED_FUNCTION_4_43();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  OUTLINED_FUNCTION_0_74();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_6_67();
  OUTLINED_FUNCTION_9_59();
  OUTLINED_FUNCTION_7_61();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_6_23(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_4_62();
  OUTLINED_FUNCTION_18_39();
  OUTLINED_FUNCTION_13_56(v1, v2, &demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
  OUTLINED_FUNCTION_4_43();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  OUTLINED_FUNCTION_0_74();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_6_67();
  OUTLINED_FUNCTION_9_59();
  OUTLINED_FUNCTION_7_61();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_6_23(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_4_62();
  OUTLINED_FUNCTION_18_39();
  OUTLINED_FUNCTION_13_56(v1, v2, &demangling cache variable for type metadata for Result<MLRandomForestClassifier, Error>);
  OUTLINED_FUNCTION_4_43();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  OUTLINED_FUNCTION_0_74();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_6_67();
  OUTLINED_FUNCTION_9_59();
  OUTLINED_FUNCTION_7_61();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_6_23(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_4_62();
  OUTLINED_FUNCTION_18_39();
  OUTLINED_FUNCTION_13_56(v1, v2, &demangling cache variable for type metadata for Result<MLBoostedTreeRegressor, Error>);
  OUTLINED_FUNCTION_4_43();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  OUTLINED_FUNCTION_0_74();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_6_67();
  OUTLINED_FUNCTION_9_59();
  OUTLINED_FUNCTION_7_61();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_6_23(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_4_62();
  OUTLINED_FUNCTION_18_39();
  OUTLINED_FUNCTION_13_56(v1, v2, &demangling cache variable for type metadata for Result<MLDecisionTreeClassifier, Error>);
  OUTLINED_FUNCTION_4_43();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  OUTLINED_FUNCTION_0_74();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_6_67();
  OUTLINED_FUNCTION_9_59();
  OUTLINED_FUNCTION_7_61();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_6_23(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_4_62();
  OUTLINED_FUNCTION_18_39();
  OUTLINED_FUNCTION_13_56(v1, v2, &demangling cache variable for type metadata for Result<MLSoundClassifier, Error>);
  OUTLINED_FUNCTION_4_43();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  OUTLINED_FUNCTION_0_74();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_6_67();
  OUTLINED_FUNCTION_9_59();
  OUTLINED_FUNCTION_7_61();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_6_23(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_4_62();
  OUTLINED_FUNCTION_18_39();
  OUTLINED_FUNCTION_13_56(v1, v2, &demangling cache variable for type metadata for Result<MLBoostedTreeClassifier, Error>);
  OUTLINED_FUNCTION_4_43();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  OUTLINED_FUNCTION_0_74();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_6_67();
  OUTLINED_FUNCTION_9_59();
  OUTLINED_FUNCTION_7_61();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_6_23(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_4_62();
  OUTLINED_FUNCTION_18_39();
  OUTLINED_FUNCTION_13_56(v1, v2, &demangling cache variable for type metadata for Result<MLLinearRegressor, Error>);
  OUTLINED_FUNCTION_4_43();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  OUTLINED_FUNCTION_0_74();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_6_67();
  OUTLINED_FUNCTION_9_59();
  OUTLINED_FUNCTION_7_61();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_6_23(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_4_62();
  OUTLINED_FUNCTION_18_39();
  OUTLINED_FUNCTION_13_56(v1, v2, &demangling cache variable for type metadata for Result<MLImageClassifier, Error>);
  OUTLINED_FUNCTION_4_43();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t MLStyleTransfer.init(model:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for _Model();
  OUTLINED_FUNCTION_74_2();
  OUTLINED_FUNCTION_3_1();
  v4 = (_QWORD *)swift_task_alloc();
  v3[5] = v4;
  v5 = OUTLINED_FUNCTION_147(v4, (uint64_t)MLStyleTransfer.init(model:parameters:));
  return _Model.init(impl:)(v5);
}

uint64_t MLStyleTransfer.init(model:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v3);
  *(_QWORD *)(v2 + 48) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v2 + 56) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = v0[7];
  v2 = v0[4];
  v3 = (_QWORD *)v0[2];
  swift_release();
  *v3 = v1;
  v4 = type metadata accessor for MLStyleTransfer(0);
  outlined init with take of MLHandPoseClassifier.ModelParameters(v2, (uint64_t)v3 + *(int *)(v4 + 20), type metadata accessor for MLStyleTransfer.ModelParameters);
  v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_10_4(v5);
}

{
  uint64_t v0;

  swift_release();
  OUTLINED_FUNCTION_118_0();
  return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v0 + 8));
}

void MLStyleTransfer.ModelParameters.init(algorithm:validation:maxIterations:textelDensity:styleStrength:)(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  char v11;
  int *v12;

  v11 = *a1;
  v12 = (int *)OUTLINED_FUNCTION_37_2();
  *(_QWORD *)&a6[v12[6]] = 1;
  a6[v12[10]] = 0;
  *a6 = v11;
  outlined init with take of MLHandPoseClassifier.ModelParameters(a2, (uint64_t)&a6[v12[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  *(_QWORD *)&a6[v12[7]] = a3;
  *(_QWORD *)&a6[v12[8]] = a4;
  *(_QWORD *)&a6[v12[9]] = a5;
  OUTLINED_FUNCTION_8_0();
}

uint64_t type metadata accessor for MLStyleTransfer.ModelParameters(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer.ModelParameters);
}

uint64_t type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer.ModelParameters.ValidationData);
}

void MLStyleTransfer.init(trainingData:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  _BYTE v28[4];
  int v29;
  void *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  void *v39;
  unsigned __int8 v40;

  OUTLINED_FUNCTION_8_1();
  v3 = v2;
  v36 = v4;
  v5 = OUTLINED_FUNCTION_37_2();
  v33 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v34 = v6;
  v35 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_19_5();
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v28[-v9];
  v11 = OUTLINED_FUNCTION_78();
  v38 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v38 + 64);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v32 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = &v28[-v15];
  MEMORY[0x24BDAC7A8](v14);
  v37 = &v28[-v17];
  OUTLINED_FUNCTION_86_1((uint64_t)v10);
  OUTLINED_FUNCTION_86_1(v1);
  MLStyleTransfer.DataSource.preprocessDataSource(textelDensity:styleImageDestination:contentImagesDestination:)();
  if (v0)
  {
    outlined destroy of MLStyleTransfer.ModelParameters();
    outlined destroy of MLStyleTransfer.ModelParameters();
    OUTLINED_FUNCTION_84_0(v1);
    OUTLINED_FUNCTION_84_0((uint64_t)v10);
  }
  else
  {
    OUTLINED_FUNCTION_84_0(v1);
    OUTLINED_FUNCTION_84_0((uint64_t)v10);
    v18 = v38;
    v30 = v39;
    v29 = v40;
    v19 = v37;
    OUTLINED_FUNCTION_81_2((uint64_t)v37, (uint64_t)v16);
    v20 = (uint64_t)v32;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16))(v32, v19, v11);
    v31 = v3;
    v21 = v35;
    outlined init with copy of MLTrainingSessionParameters(v3, (uint64_t)v35, type metadata accessor for MLStyleTransfer.ModelParameters);
    v22 = (*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = (*(unsigned __int8 *)(v33 + 80) + v23 + 9) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    v25 = swift_allocObject();
    OUTLINED_FUNCTION_81_2(v25 + v22, v20);
    v26 = v30;
    v27 = v25 + v23;
    LOBYTE(v23) = v29;
    *(_QWORD *)v27 = v30;
    *(_BYTE *)(v27 + 8) = v23;
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v21, v25 + v24, type metadata accessor for MLStyleTransfer.ModelParameters);
    outlined copy of Result<_DataTable, Error>(v26, v23);
    specialized blockAwait<A>(_:)();
    swift_release();
    outlined consume of Result<_DataTable, Error>(v26, v23);
    outlined destroy of MLStyleTransfer.ModelParameters();
    outlined destroy of MLStyleTransfer.ModelParameters();
    OUTLINED_FUNCTION_47_2((uint64_t)v37, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
  }
  OUTLINED_FUNCTION_7();
}

void MLStyleTransfer.DataSource.preprocessDataSource(textelDensity:styleImageDestination:contentImagesDestination:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_8_1();
  v28 = v0;
  v26[0] = v3;
  v26[1] = v4;
  type metadata accessor for MLStyleTransfer.DataSource(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OUTLINED_FUNCTION_78();
  v27 = *(_QWORD *)(v8 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_50();
  v12 = v10 - v11;
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_53_4();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v26 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v26 - v18;
  MLStyleTransfer.DataSource.processImages(textelDensity:styleImageDestination:contentImagesDestination:)();
  if (!v1)
  {
    v20 = v27;
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 32);
    v21(v19, v2, v8);
    v21(v17, v12, v8);
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    v23 = &v7[*(int *)(v22 + 48)];
    v24 = &v7[*(int *)(v22 + 64)];
    v25 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    v25(v7, v19, v8);
    v25(v23, v17, v8);
    *(_QWORD *)v24 = 0;
    v24[8] = 0;
    MLStyleTransfer.DataSource.getStyleImageAndContentTable()();
    OUTLINED_FUNCTION_139_0();
    OUTLINED_FUNCTION_24_3((uint64_t)v17);
    OUTLINED_FUNCTION_24_3((uint64_t)v19);
  }
  OUTLINED_FUNCTION_7();
}

void outlined destroy of MLStyleTransfer.ModelParameters()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v0 = OUTLINED_FUNCTION_43_4();
  v2 = v1(v0);
  OUTLINED_FUNCTION_11_1(v2);
  OUTLINED_FUNCTION_22();
}

uint64_t type metadata accessor for MLStyleTransfer.DataSource(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer.DataSource);
}

uint64_t closure #1 in MLStyleTransfer.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v5 + 25) = a4;
  *(_QWORD *)(v5 + 48) = a3;
  *(_QWORD *)(v5 + 56) = a5;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a2;
  type metadata accessor for MLStyleTransfer.ModelParameters(0);
  *(_QWORD *)(v5 + 64) = swift_task_alloc();
  v6 = type metadata accessor for URL();
  *(_QWORD *)(v5 + 72) = v6;
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 88) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in MLStyleTransfer.init(trainingData:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(void **)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_BYTE *)(v0 + 25) & 1;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 16))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 72));
  *(_QWORD *)(v0 + 16) = v3;
  *(_BYTE *)(v0 + 24) = v4;
  outlined init with copy of MLTrainingSessionParameters(v2, v1, type metadata accessor for MLStyleTransfer.ModelParameters);
  outlined copy of Result<_DataTable, Error>(v3, v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v5;
  *v5 = v0;
  v5[1] = closure #1 in MLStyleTransfer.init(trainingData:parameters:);
  return MLStyleTransfer.init(styleImage:contentTable:parameters:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 88), (uint64_t *)(v0 + 16), *(_QWORD *)(v0 + 64));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  v5 = *v1;
  v2 = v5;
  OUTLINED_FUNCTION_121_0(&v5);
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_54_2();
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_31();
    v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
    return OUTLINED_FUNCTION_55_3(v4);
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_21AE1BDD8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_20_3();
  v1 = *(_QWORD *)(OUTLINED_FUNCTION_78() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = OUTLINED_FUNCTION_37_2();
  v5 = (v3 + *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  OUTLINED_FUNCTION_76(v0 + v2);
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + v3), *(_BYTE *)(v0 + v3 + 8));
  v6 = v0 + *(int *)(v4 + 20) + v5;
  if (!OUTLINED_FUNCTION_109_0())
    OUTLINED_FUNCTION_76(v6);
  OUTLINED_FUNCTION_9_5();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLStyleTransfer.init(trainingData:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = OUTLINED_FUNCTION_78();
  v2 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_37_2() - 8) + 80);
  v4 = *(_BYTE *)(v0 + v2 + 8);
  v5 = v0 + ((v2 + v3 + 9) & ~v3);
  v6 = swift_task_alloc();
  v7 = (_QWORD *)OUTLINED_FUNCTION_30_0(v6);
  v8 = OUTLINED_FUNCTION_100_0(v7);
  return closure #1 in MLStyleTransfer.init(trainingData:parameters:)(v8, v9, v10, v4, v5);
}

uint64_t MLStyleTransfer.init(styleImage:contentTable:parameters:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = *a3;
  *(_QWORD *)(v4 + 32) = a4;
  *(_QWORD *)(v4 + 40) = v5;
  *(_BYTE *)(v4 + 84) = *((_BYTE *)a3 + 8);
  return swift_task_switch();
}

uint64_t MLStyleTransfer.init(styleImage:contentTable:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(int *)(type metadata accessor for MLStyleTransfer(0) + 20);
  *(_DWORD *)(v0 + 80) = v3;
  outlined init with copy of MLTrainingSessionParameters(v1, v2 + v3, type metadata accessor for MLStyleTransfer.ModelParameters);
  static MLStyleTransfer.validateAndConvertParameters(_:styleImage:contentTable:)();
  *(_QWORD *)(v0 + 48) = v4;
  OUTLINED_FUNCTION_97_0();
  type metadata accessor for _Model();
  OUTLINED_FUNCTION_74_2();
  OUTLINED_FUNCTION_3_1();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v5;
  *v5 = v0;
  v5[1] = MLStyleTransfer.init(styleImage:contentTable:parameters:);
  return _Model.init(type:parameters:modelOptions:)(14, v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v3);
  *(_QWORD *)(v2 + 64) = v1;
  swift_task_dealloc();
  if (v1)
    outlined consume of Result<_DataTable, Error>(*(id *)(v2 + 40), *(_BYTE *)(v2 + 84));
  else
    *(_QWORD *)(v2 + 72) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v0;
  CreateML::ModelType v1;
  Swift::String v2;
  Swift::Float v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 72);
  if ((AnalyticsReporter.init()() & 1) == 0)
  {
    MLDataTable.size.getter();
    OUTLINED_FUNCTION_149_0();
    v1 = OUTLINED_FUNCTION_125_0();
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(v1, v2, v3);
  }
  OUTLINED_FUNCTION_149_0();
  OUTLINED_FUNCTION_155();
  OUTLINED_FUNCTION_118_0();
  v4 = OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_11_1(v4);
  v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_35_3(v5);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_155();
  outlined destroy of MLStyleTransfer.ModelParameters();
  v1 = OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_11_1(v1);
  outlined destroy of MLStyleTransfer.ModelParameters();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

void static MLStyleTransfer.validateAndConvertParameters(_:styleImage:contentTable:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  _BYTE *v24;

  OUTLINED_FUNCTION_8_1();
  v3 = v2;
  v24 = v4;
  type metadata accessor for _Model.Parameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_4();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_96_1();
  v7 = *(void **)v3;
  v8 = *(_BYTE *)(v3 + 8);
  if (MEMORY[0x22075BB9C](0))
  {
    OUTLINED_FUNCTION_97_0();
    type metadata accessor for CMLParameters();
    *(_QWORD *)(swift_allocObject() + 16) = v3;
    outlined copy of Result<_DataTable, Error>(v7, v8);
    MLDataTable.subscript.getter(0x55746E65746E6F63, (void *)0xEB00000000734C52, (uint64_t)&v22);
    outlined consume of Result<_DataTable, Error>(v7, v8);
    v9 = v22;
    if ((v23 & 1) != 0)
    {
      outlined consume of Result<_DataTable, Error>(v22, 1);
    }
    else
    {
      swift_retain();
      outlined consume of Result<_DataTable, Error>(v9, 0);
      OUTLINED_FUNCTION_82_1(0x48u);
      if (v9)
      {
LABEL_18:
        swift_release();
LABEL_19:
        swift_release();
        OUTLINED_FUNCTION_7();
        return;
      }
      swift_release();
    }
    v10 = URL.path.getter();
    v12 = v11;
    type metadata accessor for _UntypedColumn();
    swift_initStackObject();
    specialized _UntypedColumn.init<A>(repeating:count:)(v10, v12, 1);
    swift_retain();
    OUTLINED_FUNCTION_82_1(0x47u);
    if (v9)
    {
      swift_release();
      goto LABEL_18;
    }
    swift_release();
    v13 = (int *)OUTLINED_FUNCTION_37_2();
    v14 = v13[9];
    static MLStyleTransfer.ModelParameters.verifyStyleStrengthParameter(value:)(*(_QWORD *)&v24[v14]);
    v15 = v13[8];
    static MLStyleTransfer.ModelParameters.verifyTextelDensityParameter(value:)(*(_QWORD *)&v24[v15]);
    if (MEMORY[0x22075BAE8](0))
    {
      OUTLINED_FUNCTION_97_0();
      type metadata accessor for CMLDictionary();
      *(_QWORD *)(swift_initStackObject() + 16) = v15;
      v16 = 7237219;
      if (*v24)
        v16 = 0x6574694C6E6E63;
      v17 = 0xE700000000000000;
      if (!*v24)
        v17 = 0xE300000000000000;
      *v1 = v16;
      v1[1] = v17;
      swift_storeEnumTagMultiPayload();
      CMLDictionary.add(_:)((uint64_t)v1);
      outlined destroy of MLStyleTransfer.ModelParameters();
      OUTLINED_FUNCTION_50_2(*(_QWORD *)&v24[v13[7]]);
      swift_storeEnumTagMultiPayload();
      OUTLINED_FUNCTION_73_0();
      outlined destroy of MLStyleTransfer.ModelParameters();
      OUTLINED_FUNCTION_50_2(*(_QWORD *)&v24[v13[6]]);
      swift_storeEnumTagMultiPayload();
      OUTLINED_FUNCTION_73_0();
      outlined destroy of MLStyleTransfer.ModelParameters();
      OUTLINED_FUNCTION_50_2(4 * (*(_QWORD *)&v24[v15] / 4));
      swift_storeEnumTagMultiPayload();
      OUTLINED_FUNCTION_73_0();
      outlined destroy of MLStyleTransfer.ModelParameters();
      OUTLINED_FUNCTION_50_2(*(_QWORD *)&v24[v14]);
      swift_storeEnumTagMultiPayload();
      OUTLINED_FUNCTION_73_0();
      outlined destroy of MLStyleTransfer.ModelParameters();
      v18 = 1869903201;
      if (v24[v13[10]])
        v18 = 7696483;
      v19 = 0xE400000000000000;
      if (v24[v13[10]])
        v19 = 0xE300000000000000;
      *v0 = v18;
      v0[1] = v19;
      swift_storeEnumTagMultiPayload();
      OUTLINED_FUNCTION_73_0();
      outlined destroy of MLStyleTransfer.ModelParameters();
      type metadata accessor for CMLFeatureValue();
      v20 = swift_retain();
      CMLFeatureValue.__allocating_init(_:)(v20);
      CMLParameters.add(key:featureValue:)(0x2Fu, v21);
      swift_release();
      swift_setDeallocating();
      tc_v1_release();
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t MLStyleTransfer.init(checkpoint:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _BYTE *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v5 = type metadata accessor for MLCheckpoint();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
  specialized blockAwait<A>(_:)();
  if (v2)
  {
    OUTLINED_FUNCTION_139_0();
    return swift_release();
  }
  else
  {
    v12 = v10;
    swift_release();
    OUTLINED_FUNCTION_139_0();
    *a2 = v12;
    v13 = (char *)a2 + *(int *)(type metadata accessor for MLStyleTransfer(0) + 20);
    v14 = (int *)OUTLINED_FUNCTION_37_2();
    v15 = (uint64_t)&v13[v14[5]];
    v16 = OUTLINED_FUNCTION_78();
    result = OUTLINED_FUNCTION_37_0(v15, v17, v18, v16);
    *(_QWORD *)&v13[v14[6]] = 1;
    v13[v14[10]] = 0;
    *v13 = 0;
    *(_QWORD *)&v13[v14[7]] = 500;
    *(_QWORD *)&v13[v14[8]] = 256;
    *(_QWORD *)&v13[v14[9]] = 5;
  }
  return result;
}

uint64_t closure #1 in MLStyleTransfer.init(checkpoint:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[5] = a1;
  v2[6] = a2;
  v3 = type metadata accessor for URL();
  v2[7] = v3;
  v2[8] = *(_QWORD *)(v3 - 8);
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

void closure #1 in MLStyleTransfer.init(checkpoint:)()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = v0 + 4;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[8] + 16))(v0[9], v0[6], v0[7]);
  v2 = URL.absoluteString.getter();
  v4 = v2;
  v5 = v3;
  if ((v3 & 0x1000000000000000) != 0 || !(v3 & 0x2000000000000000 | v2 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
LABEL_7:
    OUTLINED_FUNCTION_30();
LABEL_10:
    v10 = v0[4];
    (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
    type metadata accessor for CMLModel();
    *(_QWORD *)(swift_allocObject() + 16) = v10;
    type metadata accessor for _Model();
    OUTLINED_FUNCTION_74_2();
    v11 = (_QWORD *)swift_task_alloc();
    v0[10] = v11;
    v12 = OUTLINED_FUNCTION_147(v11, (uint64_t)closure #1 in MLStyleTransfer.init(checkpoint:));
    _Model.init(impl:)(v12);
    return;
  }
  v6 = swift_task_alloc();
  *(_QWORD *)(v6 + 16) = closure #1 in CMLModel.init(url:);
  *(_QWORD *)(v6 + 24) = 0;
  if ((v5 & 0x2000000000000000) == 0)
  {
    if ((v4 & 0x1000000000000000) != 0)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v8 = v4 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = _StringObject.sharedUTF8.getter();
    }
    *v1 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v7, v8, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    OUTLINED_FUNCTION_17();
    goto LABEL_7;
  }
  v0[2] = v4;
  v0[3] = v5 & 0xFFFFFFFFFFFFFFLL;
  specialized handling<A, B>(_:_:)((uint64_t)(v0 + 2));
  if (v9)
  {
    *v1 = v9;
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_17();
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t closure #1 in MLStyleTransfer.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v4);
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v3 + 8));
  }
  else
  {
    *(_QWORD *)(v2 + 88) = v0;
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_70();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  **(_QWORD **)(v0 + 40) = *(_QWORD *)(v0 + 88);
  swift_task_dealloc();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_90(v1);
}

uint64_t sub_21AE1CAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MLCheckpoint();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_71_2(v4);
  v5 = v3 + *(int *)(v1 + 28);
  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLStyleTransfer.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  OUTLINED_FUNCTION_43_4();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MLCheckpoint() - 8) + 80);
  v4 = v1 + ((v3 + 16) & ~v3);
  v5 = swift_task_alloc();
  v6 = (_QWORD *)OUTLINED_FUNCTION_30_0(v5);
  *v6 = v2;
  v6[1] = partial apply for closure #1 in MLHandPoseClassifier.init(checkpoint:);
  return closure #1 in MLStyleTransfer.init(checkpoint:)(v0, v4);
}

uint64_t type metadata accessor for MLStyleTransfer(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLStyleTransfer);
}

void static MLStyleTransfer.train(trainingData:parameters:sessionParameters:)()
{
  static MLStyleTransfer.makeTrainingSession(trainingData:parameters:sessionParameters:)();
}

void sub_21AE1CBC8()
{
  uint64_t v0;

  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLStyleTransfer>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
}

void static MLStyleTransfer.makeTrainingSession(trainingData:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;

  OUTLINED_FUNCTION_8_1();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v15 - v10;
  OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_31_4();
  type metadata accessor for MLStyleTransfer.DataSource(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_54_0();
  outlined init with copy of MLTrainingSessionParameters(v7, v0, v14);
  outlined init with copy of MLTrainingSessionParameters(v5, v1, type metadata accessor for MLStyleTransfer.ModelParameters);
  outlined init with copy of MLTrainingSessionParameters(v3, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  MLStyleTransfer.TrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)();
}

void sub_21AE1CCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!v2)
  {
    *(_QWORD *)(v4 - 96) = v3;
    *(_QWORD *)(v4 - 88) = &protocol witness table for MLStyleTransfer.TrainingSessionDelegate;
    *(_QWORD *)(v4 - 120) = a1;
    OUTLINED_FUNCTION_138_0(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>);
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_115_0(v4 - 120);
  }
  OUTLINED_FUNCTION_7();
}

void static MLStyleTransfer.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLStyleTransfer>);
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_3_1();
  specialized MLJob.init(_:)();
}

void static MLStyleTransfer.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v3);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)&v6 - v4, v5);
  type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  MLStyleTransfer.TrainingSessionDelegate.init(sessionParameters:)();
}

void sub_21AE1CE24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!v2)
  {
    *(_QWORD *)(v4 - 64) = v3;
    *(_QWORD *)(v4 - 56) = &protocol witness table for MLStyleTransfer.TrainingSessionDelegate;
    *(_QWORD *)(v4 - 88) = a1;
    OUTLINED_FUNCTION_138_0(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLStyleTransfer>);
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_115_0(v4 - 88);
  }
}

void closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t *);
  void (*v4)(uint64_t *);
  void (*v5)(uint64_t *);
  void (*v6)(uint64_t *);
  uint64_t v7;
  char v8;
  char v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void (**v31)(uint64_t *);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t *);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_20_3();
  v4 = v3;
  v6 = v5;
  v35 = v7;
  v9 = v8;
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_95_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_67_2();
  v15 = type metadata accessor for MLStyleTransfer.PersistentParameters();
  v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
  v17 = MEMORY[0x24BDAC7A8](v15);
  MEMORY[0x24BDAC7A8](v17);
  if ((v9 & 1) != 0)
  {
    *v0 = (uint64_t)v11;
    OUTLINED_FUNCTION_108_0();
    v24 = v11;
    v6(v0);
  }
  else
  {
    v32 = v20;
    v33 = v19;
    v21 = (char *)&v32 - v18;
    v34 = v6;
    outlined init with copy of TrainingSessionDelegate(v35 + direct field offset for MLTrainingSession.delegate, (uint64_t)&v37);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    OUTLINED_FUNCTION_43_4();
    type metadata accessor for MLStyleTransfer.TrainingSessionDelegate();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v22 = v36;
      v23 = v36 + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_trainingParameters;
      swift_beginAccess();
      outlined init with copy of URL?(v23, v2, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
      if (__swift_getEnumTagSinglePayload(v2, 1, v15) != 1)
      {
        outlined init with take of MLHandPoseClassifier.ModelParameters(v2, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
        v27 = type metadata accessor for TaskPriority();
        __swift_storeEnumTagSinglePayload(v1, 1, 1, v27);
        v28 = v33;
        outlined init with copy of MLTrainingSessionParameters((uint64_t)v21, v33, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
        v29 = (*(unsigned __int8 *)(v32 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
        v30 = (_QWORD *)swift_allocObject();
        v30[2] = 0;
        v30[3] = 0;
        v30[4] = v22;
        outlined init with take of MLHandPoseClassifier.ModelParameters(v28, (uint64_t)v30 + v29, (uint64_t (*)(_QWORD))type metadata accessor for MLStyleTransfer.PersistentParameters);
        v31 = (void (**)(uint64_t *))((char *)v30 + ((v16 + v29 + 7) & 0xFFFFFFFFFFFFFFF8));
        *v31 = v34;
        v31[1] = v4;
        swift_retain();
        OUTLINED_FUNCTION_3_1();
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:), (uint64_t)v30);
        swift_release();
        OUTLINED_FUNCTION_4_2();
        outlined destroy of MLStyleTransfer.ModelParameters();
        goto LABEL_8;
      }
      swift_release();
      outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLStyleTransfer.PersistentParameters?);
    }
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v25 = swift_allocError();
    *(_QWORD *)v26 = 0xD000000000000021;
    *(_QWORD *)(v26 + 8) = 0x800000021AFF27E0;
    *(_OWORD *)(v26 + 16) = 0u;
    *(_OWORD *)(v26 + 32) = 0u;
    *(_BYTE *)(v26 + 48) = 0;
    *v0 = v25;
    OUTLINED_FUNCTION_108_0();
    v34(v0);
  }
  outlined destroy of URL?((uint64_t)v0, &demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
LABEL_8:
  OUTLINED_FUNCTION_9_5();
}

uint64_t closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  v7[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, int *);

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v4 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to specialized Result<>.init(catching:)
                                              + async function pointer to specialized Result<>.init(catching:));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:);
  return v4(*(_QWORD *)(v0 + 48), (int *)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:));
}

{
  swift_task_dealloc();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t))(v0 + 32))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLStyleTransfer, Error>);
  swift_task_dealloc();
  return OUTLINED_FUNCTION_55_3(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v3[5] = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  v3[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  uint64_t *v0;
  _BYTE *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = (int *)v0[5];
  v1 = (_BYTE *)v0[6];
  v3 = v0[4];
  v4 = *(_QWORD *)(v0[3] + OBJC_IVAR____TtCV8CreateML15MLStyleTransfer23TrainingSessionDelegate_model);
  v5 = (int *)type metadata accessor for MLStyleTransfer.PersistentParameters();
  v6 = *(_BYTE *)(v3 + v5[5]);
  outlined init with copy of MLTrainingSessionParameters(v3 + v5[6], (uint64_t)&v1[v2[5]], type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  v7 = *(_QWORD *)(v3 + v5[7]);
  v8 = *(_QWORD *)(v3 + v5[8]);
  *(_QWORD *)&v1[v2[6]] = 1;
  v9 = v2[10];
  *v1 = v6;
  *(_QWORD *)&v1[v2[7]] = 500;
  *(_QWORD *)&v1[v2[8]] = v7;
  *(_QWORD *)&v1[v2[9]] = v8;
  v1[v9] = *(_BYTE *)(v3 + v5[9]);
  OUTLINED_FUNCTION_3_1();
  v10 = (_QWORD *)swift_task_alloc();
  v0[7] = (uint64_t)v10;
  *v10 = v0;
  v10[1] = closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:);
  return MLStyleTransfer.init(model:parameters:)(v0[2], v4, v0[6]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v1;
  v2 = v4;
  OUTLINED_FUNCTION_121_0(&v4);
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_54_2();
  }
  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_55_3((uint64_t (*)(void))v1[1]);
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v0 + 8));
}

CGImageRef_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.stylize(image:)(CGImageRef image)
{
  uint64_t v1;
  CGImage *v3;
  id v4;
  id v5;
  __CVBuffer *v6;
  CGImageRef_optional result;
  __CVBuffer *v8;
  CGImageRef v9[2];

  v9[1] = *(CGImageRef *)MEMORY[0x24BDAC8D0];
  type metadata accessor for VNImageOption(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  v3 = image;
  Dictionary.init(dictionaryLiteral:)();
  v4 = objc_allocWithZone(MEMORY[0x24BDF9C28]);
  v5 = @nonobjc VNImageRequestHandler.init(cgImage:options:)(v3);
  MLStyleTransfer.stylize(using:)(v5);
  if (v1)
  {

  }
  else
  {
    v8 = v6;
    v9[0] = 0;
    VTCreateCGImageFromCVPixelBuffer(v6, 0, v9);

    return (CGImageRef_optional)v9[0];
  }
  return result;
}

void MLStyleTransfer.stylize(using:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  Class isa;
  unsigned int v10;
  id v11;
  id v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  double v19;
  uint64_t v20;
  id v21[2];

  v21[1] = *(id *)MEMORY[0x24BDAC8D0];
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNCoreMLModel);
  v4 = @nonobjc VNCoreMLModel.__allocating_init(for:)(*(id *)(*(_QWORD *)v1 + 24));
  if (v2)
    return;
  v5 = v4;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDF9B30]), sel_initWithModel_, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_21AFE8580;
  *(_QWORD *)(v7 + 32) = v6;
  specialized Array._endMutation()();
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNRequest);
  v8 = v6;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21[0] = 0;
  v10 = objc_msgSend(a1, sel_performRequests_error_, isa, v21);

  v11 = v21[0];
  if (!v10)
  {
    v18 = v21[0];
    _convertNSErrorToError(_:)();

    v12 = v5;
LABEL_10:
    swift_willThrow(v19);

    return;
  }
  v12 = v8;
  v13 = v11;
  v14 = outlined bridged method (ob) of @objc VNRequest.results.getter(v12);
  if (!v14 || (v15 = specialized _arrayConditionalCast<A, B>(_:)(v14), swift_bridgeObjectRelease(), !v15))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v20 = 0xD000000000000039;
    *(_QWORD *)(v20 + 8) = 0x800000021AFF27A0;
    v19 = 0.0;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_BYTE *)(v20 + 48) = 0;
    v8 = v5;
    goto LABEL_10;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v15 & 0xC000000000000001) == 0, v15);
  if ((v15 & 0xC000000000000001) != 0)
    v16 = (id)MEMORY[0x22075AF48](0, v15);
  else
    v16 = *(id *)(v15 + 32);
  v17 = v16;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_pixelBuffer);

}

uint64_t MLStyleTransfer.getFullMetadata(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  NSString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  uint64_t v19;

  v4 = a1[1];
  if (v4)
  {
    v5 = *a1;
    v6 = a1[3];
    v7 = a1[4];
    v18 = *(_OWORD *)(a1 + 5);
    v9 = a1[7];
    v8 = a1[8];
    v10 = a1[2];
    OUTLINED_FUNCTION_114_0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8)
    {
      swift_bridgeObjectRetain();
      v11 = MLStyleTransfer.ModelParameters.modelParametersDescription()();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v19 = v8;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v11, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v19);
      v2 = v19;
    }
    else
    {
      MLStyleTransfer.ModelParameters.modelParametersDescription()();
      OUTLINED_FUNCTION_97_0();
    }
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
    *(_OWORD *)(a2 + 40) = v18;
    *(_QWORD *)(a2 + 56) = v9;
  }
  else
  {
    v13 = NSFullUserName();
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v15;

    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = 0xD000000000000033;
    *(_QWORD *)(a2 + 24) = 0x800000021AFF2260;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 49;
    *(_QWORD *)(a2 + 56) = 0xE100000000000000;
    OUTLINED_FUNCTION_114_0();
    result = MLStyleTransfer.ModelParameters.modelParametersDescription()();
    v2 = result;
  }
  *(_QWORD *)(a2 + 64) = v2;
  return result;
}

uint64_t MLStyleTransfer.ModelParameters.modelParametersDescription()()
{
  _BYTE *v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  OUTLINED_FUNCTION_127_0();
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = 0xE90000000000006DLL;
  v4 = 7237219;
  if (*v0)
    v4 = 0x6574694C6E6E63;
  v5 = 0xE300000000000000;
  if (*v0)
    v5 = 0xE700000000000000;
  *(_QWORD *)(v2 + 48) = v4;
  *(_QWORD *)(v2 + 56) = v5;
  strcpy((char *)(v2 + 64), "Textel Density");
  *(_BYTE *)(v2 + 79) = -18;
  OUTLINED_FUNCTION_37_2();
  *(_QWORD *)(inited + 80) = OUTLINED_FUNCTION_123_0();
  *(_QWORD *)(inited + 88) = v6;
  strcpy((char *)(inited + 96), "Style Strength");
  *(_BYTE *)(inited + 111) = -18;
  *(_QWORD *)(inited + 112) = OUTLINED_FUNCTION_123_0();
  *(_QWORD *)(inited + 120) = v7;
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t MLStyleTransfer.write(to:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v4;
  v5 = OUTLINED_FUNCTION_75_2(v3, *(_OWORD *)(a2 + 32), *(_OWORD *)(a2 + 48), v14, v16);
  OUTLINED_FUNCTION_150_0(v5, v6, v7, v8, v9, v10, v11, v12, v15, v17, v24, v25, v26, v27, v19, v20, v21, v22, v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29);
  v22 = v30;
  v23 = v31;
  _Model.write(to:metadata:)(a1, (uint64_t *)v18);
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_10_3();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_136_0();
  return OUTLINED_FUNCTION_106_0();
}

uint64_t MLStyleTransfer.write(toFile:metadata:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_QWORD *)(a3 + 64);
  v6 = *(_OWORD *)(a3 + 16);
  v20[0] = *(_OWORD *)a3;
  v20[1] = v6;
  v7 = OUTLINED_FUNCTION_75_2(v5, *(_OWORD *)(a3 + 32), *(_OWORD *)(a3 + 48), v16, v18);
  OUTLINED_FUNCTION_150_0(v7, v8, v9, v10, v11, v12, v13, v14, v17, v19, v26, v27, v28, v29, v21, v22, v23, v24, v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31);
  v24 = v32;
  v25 = v33;
  _Model.write(toFile:metadata:)(a1, a2, (uint64_t *)v20);
  OUTLINED_FUNCTION_106_0();
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_136_0();
  return swift_bridgeObjectRelease();
}

void static MLStyleTransfer.downloadAssets()()
{
  uint64_t v0;

  type metadata accessor for _Model();
  swift_allocObject();
  _Model.init(type:)(0xEu);
  if (!v0)
  {
    OUTLINED_FUNCTION_3_1();
    CMLModel.requestStyleTransferAssets()();
    swift_release();
    swift_release();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLModel.requestStyleTransferAssets()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;

  if (MEMORY[0x22075BB9C](0))
  {
    OUTLINED_FUNCTION_43_4();
    type metadata accessor for CMLParameters();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v0;
    CMLModel.callFunction(name:arguments:)(0x14u, inited);
    if (!v1)
      swift_release();
    swift_setDeallocating();
    tc_v1_release();
    OUTLINED_FUNCTION_40_4();
  }
  else
  {
    __break(1u);
  }
}

void MLStyleTransfer.DataSource.processImages(textelDensity:styleImageDestination:contentImagesDestination:)()
{
  void (*v0)(void);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  char isUniquelyReferenced_nonNull_native;
  void *v56;
  void (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(void);
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  _QWORD *rawValue;
  char v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  _BOOL8 v86;
  Swift::Int v87;
  unint64_t v88;
  char v89;
  Swift::Bool v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  _QWORD v101[2];
  id v102;
  void (*v103)(uint64_t);
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(void);
  Swift::OpaquePointer v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  _QWORD *v130;

  OUTLINED_FUNCTION_8_1();
  v128 = v1;
  v122 = v0;
  v123._rawValue = v6;
  v118 = v7;
  v9 = v8;
  v120 = v10;
  v121 = v11;
  v12 = OUTLINED_FUNCTION_112_0();
  v115 = *(_QWORD *)(v12 - 8);
  v116 = v12;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v117 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_64();
  v119 = v16;
  v17 = OUTLINED_FUNCTION_111_0();
  v113 = *(_QWORD *)(v17 - 8);
  v114 = v17;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_14_5();
  v19 = OUTLINED_FUNCTION_78();
  v20 = *(_QWORD *)(v19 - 8);
  v126 = v19;
  v127 = v20;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_50();
  v24 = v22 - v23;
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_99_1();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_53_4();
  v28 = MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)v101 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28);
  v124 = (uint64_t)v101 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v125 = (char *)v101 - v34;
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)v101 - v35;
  type metadata accessor for MLStyleTransfer.DataSource(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_31_4();
  v38 = v128;
  static MLStyleTransfer.ModelParameters.verifyTextelDensityParameter(value:)(v9);
  if (!v38)
  {
    v112 = v9;
    v107 = v3;
    v110 = v30;
    v111 = v24;
    v108 = v2;
    v109 = v4;
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v122, v5, type metadata accessor for MLStyleTransfer.DataSource);
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    v40 = v5 + *(int *)(v39 + 48);
    v41 = v5 + *(int *)(v39 + 64);
    v42 = *(_QWORD *)v41;
    LODWORD(v128) = *(unsigned __int8 *)(v41 + 8);
    v43 = v126;
    v44 = *(void (**)(char *, uint64_t, uint64_t))(v127 + 32);
    v44(v36, v5, v126);
    v44(v125, v40, v43);
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for CIImage);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    v45 = Dictionary.init(dictionaryLiteral:)();
    v46 = v124;
    MLStyleTransfer.DataSource.getProcessedStyleImageURL(for:destination:)();
    v47 = v36;
    v48 = v127;
    v49 = 4 * (v112 / 4);
    MLStyleTransfer.DataSource.processImage(sourceURL:textelDensity:processingOption:)();
    v51 = v50;
    v112 = (uint64_t)v47;
    v104 = v49;
    v105 = v42;
    v106 = v44;
    v52 = (uint64_t)v110;
    v53 = v126;
    v122 = *(void (**)(void))(v48 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v122)(v110, v46, v126);
    v54 = v51;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v129 = (void *)v45;
    v56 = v54;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v54, v52, isUniquelyReferenced_nonNull_native);
    v123._rawValue = v129;
    swift_bridgeObjectRelease();
    v57 = *(void (**)(uint64_t))(v48 + 8);
    OUTLINED_FUNCTION_116_0(v52);
    v58 = v121;
    MLStyleTransfer.DataSource.getProcessedContentImagesDirectory(for:)();
    v103 = v57;
    static UTType.image.getter();
    v59 = (uint64_t)v125;
    static _FileUtilities.readableFiles(at:type:)();
    v118 = 0;
    v61 = v60;
    v102 = v56;
    OUTLINED_FUNCTION_83_1();
    v62 = *(char **)(v61 + 16);
    v101[1] = v61;
    if (v62)
    {
      v63 = v61 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
      v114 = *(_QWORD *)(v48 + 72);
      v64 = v119;
      v65 = v120;
      v66 = v117;
      v67 = v122;
      v68 = v112;
      while (1)
      {
        v69 = v64;
        v127 = v63;
        v67();
        OUTLINED_FUNCTION_154(v69, 0);
        OUTLINED_FUNCTION_128(v69, 1, v53);
        if (v70)
          break;
        v125 = v62;
        v71 = v108;
        OUTLINED_FUNCTION_107_0(v108, v69);
        UUID.init()();
        UUID.uuidString.getter();
        OUTLINED_FUNCTION_47_2(v66, *(uint64_t (**)(uint64_t, uint64_t))(v115 + 8));
        URL.appendingPathComponent(_:)();
        swift_bridgeObjectRelease();
        v72 = v109;
        OUTLINED_FUNCTION_80_1();
        URL.appendingPathExtension(_:)();
        v73 = OUTLINED_FUNCTION_70_2();
        v103(v73);
        v74 = v118;
        MLStyleTransfer.DataSource.processImage(sourceURL:textelDensity:processingOption:)();
        v118 = v74;
        if (v74)
        {

          OUTLINED_FUNCTION_30_5(v72);
          OUTLINED_FUNCTION_30_5(v71);
          OUTLINED_FUNCTION_129();
          OUTLINED_FUNCTION_30_5(v58);
          OUTLINED_FUNCTION_30_5(v124);
          OUTLINED_FUNCTION_131_0();
          OUTLINED_FUNCTION_30_5(v59);
          OUTLINED_FUNCTION_30_5(v68);
          goto LABEL_3;
        }
        v76 = v75;
        v77 = v59;
        v78 = v53;
        v79 = v68;
        ((void (*)(uint64_t, uint64_t, uint64_t))v122)(v111, v72, v78);
        v80 = v76;
        rawValue = v123._rawValue;
        v82 = swift_isUniquelyReferenced_nonNull_native();
        v130 = rawValue;
        specialized __RawDictionaryStorage.find<A>(_:)();
        v85 = rawValue[2];
        v86 = (v84 & 1) == 0;
        v87 = v85 + v86;
        if (__OFADD__(v85, v86))
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        v88 = v83;
        v89 = v84;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<URL, CIImage>);
        v90 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v82, v87);
        v68 = v79;
        v53 = v126;
        v66 = v117;
        if (v90)
        {
          specialized __RawDictionaryStorage.find<A>(_:)();
          if ((v89 & 1) != (v92 & 1))
            goto LABEL_26;
          v88 = v91;
        }
        v123._rawValue = rawValue;
        if ((v89 & 1) != 0)
        {
          v93 = rawValue[7];

          *(_QWORD *)(v93 + 8 * v88) = v80;
          v59 = v77;
          v94 = v111;
        }
        else
        {
          rawValue[(v88 >> 6) + 8] |= 1 << v88;
          v94 = v111;
          ((void (*)(unint64_t, uint64_t, uint64_t))v122)(v130[6] + v88 * v114, v111, v53);
          v95 = v123._rawValue;
          *(_QWORD *)(*((_QWORD *)v123._rawValue + 7) + 8 * v88) = v80;
          v96 = v95[2];
          v97 = __OFADD__(v96, 1);
          v98 = v96 + 1;
          if (v97)
            goto LABEL_25;
          v95[2] = v98;
          v59 = v77;
        }
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_30_5(v94);

        OUTLINED_FUNCTION_30_5(v109);
        OUTLINED_FUNCTION_30_5(v108);
        v63 = v127 + v114;
        v62 = v125 - 1;
        v65 = v120;
        v58 = v121;
        v64 = v119;
        v67 = v122;
        if (v125 == (char *)1)
          goto LABEL_19;
      }
    }
    else
    {
      v64 = v119;
      v65 = v120;
      v68 = v112;
LABEL_19:
      OUTLINED_FUNCTION_154(v64, 1);
    }
    OUTLINED_FUNCTION_129();
    MLStyleTransfer.DataSource.saveImagesToDisk(imagesDictionary:)(v123);

    OUTLINED_FUNCTION_12_0();
    if (v99)
    {
      OUTLINED_FUNCTION_63_3();
      OUTLINED_FUNCTION_24_3(v124);
      OUTLINED_FUNCTION_24_3(v59);
      OUTLINED_FUNCTION_24_3(v68);
    }
    else
    {
      v100 = (void (*)(uint64_t, uint64_t))v103;
      ((void (*)(uint64_t, uint64_t))v103)(v59, v53);
      v100(v68, v53);
      OUTLINED_FUNCTION_107_0(v65, v124);
    }
  }
LABEL_3:
  OUTLINED_FUNCTION_7();
}

void static MLStyleTransfer.ModelParameters.verifyTextelDensityParameter(value:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::String v3;
  Swift::String v4;

  if ((unint64_t)(a1 - 64) > 0x3C0)
  {
    OUTLINED_FUNCTION_72_1();
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = OUTLINED_FUNCTION_25_3();
    OUTLINED_FUNCTION_13_0(v3);
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_103_0(8236);
    v4._countAndFlagsBits = OUTLINED_FUNCTION_25_3();
    OUTLINED_FUNCTION_13_0(v4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_103_0(11869);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v1 = OUTLINED_FUNCTION_49_0();
    *v2 = 0xD00000000000001ELL;
    v2[1] = 0x800000021AFF2780;
    OUTLINED_FUNCTION_5_8(v1, (uint64_t)v2);
  }
  OUTLINED_FUNCTION_40_4();
}

void MLStyleTransfer.DataSource.getProcessedStyleImageURL(for:destination:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 v17;
  char v18;
  NSString *v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_8_1();
  v29 = v4;
  v30 = v0;
  v28 = v5;
  v6 = OUTLINED_FUNCTION_112_0();
  v26 = *(_QWORD *)(v6 - 8);
  v27 = v6;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_5();
  v31 = OUTLINED_FUNCTION_78();
  v8 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_19_5();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v24 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)OUTLINED_FUNCTION_111_0();
  OUTLINED_FUNCTION_146();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_161();
  static UTType.image.getter();
  v17 = static _FileUtilities.isReadableFile(at:of:)();
  (*(void (**)(uint64_t, void *))(v1 + 8))(v3, v15);
  if ((v17 & 1) != 0)
  {
    v24[0] = v11;
    v24[1] = v2;
    v25 = v8;
    outlined init with copy of URL?(v28, (uint64_t)v14, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_128((uint64_t)v14, 1, v31);
    if (v18)
    {
      outlined destroy of URL?((uint64_t)v14, &demangling cache variable for type metadata for URL?);
      v19 = NSTemporaryDirectory();
      OUTLINED_FUNCTION_151_0();

      v20 = v24[0];
      OUTLINED_FUNCTION_146_0();
      OUTLINED_FUNCTION_106_0();
      OUTLINED_FUNCTION_141_0();
      UUID.uuidString.getter();
      OUTLINED_FUNCTION_79_1(v26);
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_80_1();
      URL.appendingPathExtension(_:)();
      v21 = *(void (**)(uint64_t))(v25 + 8);
      v22 = OUTLINED_FUNCTION_130_0();
      v21(v22);
      ((void (*)(uint64_t, uint64_t))v21)(v20, v31);
    }
    else
    {
      OUTLINED_FUNCTION_133_0(v29, (uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32));
    }
  }
  else
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_18_0(v23, 0xD000000000000019);
  }
  OUTLINED_FUNCTION_7();
}

void MLStyleTransfer.DataSource.processImage(sourceURL:textelDensity:processingOption:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  OUTLINED_FUNCTION_8_1();
  v25 = v2;
  v24 = v3;
  v5 = v4;
  v7 = v6;
  v8 = OUTLINED_FUNCTION_78();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_91_1();
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for MLFeatureValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v1, v7, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MLFeatureValueImageOption, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  v11 = (void *)*MEMORY[0x24BDBFF28];
  *(_QWORD *)(inited + 64) = MEMORY[0x24BEE1E88];
  *(_QWORD *)(inited + 32) = v11;
  *(_QWORD *)(inited + 40) = 0;
  type metadata accessor for MLFeatureValueImageOption(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, (uint64_t (*)(uint64_t))type metadata accessor for MLFeatureValueImageOption, (uint64_t)&protocol conformance descriptor for MLFeatureValueImageOption);
  v12 = v11;
  v13 = Dictionary.init(dictionaryLiteral:)();
  v14 = @nonobjc MLFeatureValue.__allocating_init(imageAt:pixelsWide:pixelsHigh:pixelFormatType:options:)(v1, v5, v5, 1380401729, v13);
  if (!v0)
  {
    v15 = v14;
    if ((AnalyticsReporter.init()() & 1) == 0)
    {
      if ((v25 & 1) != 0)
      {
        v16 = 0xD000000000000020;
        v18 = 0x800000021AFF2690;
      }
      else
      {
        v16 = VNImageCropAndScaleOption.description.getter(v24);
        v18 = v17;
      }
      v19._countAndFlagsBits = 0xD000000000000014;
      v19._object = (void *)0x800000021AFF26C0;
      v20 = v18;
      AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML_ModelType_styleTransfer, v19, *(Swift::String *)&v16);
    }
    v21 = objc_msgSend(v15, sel_imageBufferValue);
    if (v21)
    {
      v22 = v21;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF660]), sel_initWithCVPixelBuffer_, v21);

    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_18_0(v23, 0xD000000000000018);

    }
  }
  OUTLINED_FUNCTION_7();
}

void MLStyleTransfer.DataSource.getProcessedContentImagesDirectory(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  NSString *v17;
  id v18;
  NSURL *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  id v23;
  char v24;
  id v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30[2];

  OUTLINED_FUNCTION_8_1();
  v29 = v4;
  v6 = v5;
  v30[1] = *(id *)MEMORY[0x24BDAC8D0];
  v28 = *(_QWORD *)(OUTLINED_FUNCTION_112_0() - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_53_0();
  v9 = OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_88_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_50();
  v13 = v11 - v12;
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_99_1();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_96_1();
  outlined init with copy of URL?(v6, v0, &demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_128(v0, 1, v9);
  if (v16)
  {
    outlined destroy of URL?(v0, &demangling cache variable for type metadata for URL?);
    v17 = NSTemporaryDirectory();
    OUTLINED_FUNCTION_151_0();

    OUTLINED_FUNCTION_146_0();
    OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_141_0();
    UUID.uuidString.getter();
    OUTLINED_FUNCTION_79_1(v28);
    URL.appendingPathComponent(_:)();
    OUTLINED_FUNCTION_12_0();
    v18 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    URL._bridgeToObjectiveC()(v19);
    v21 = v20;
    v30[0] = 0;
    v22 = objc_msgSend(v18, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v20, 0, 0, v30);

    if (v22)
    {
      v23 = v30[0];
      OUTLINED_FUNCTION_48_2(v1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v29, v13, v9);
    }
    else
    {
      v25 = v30[0];
      _convertNSErrorToError(_:)();

      swift_willThrow(v26);
      OUTLINED_FUNCTION_48_2(v13);
      OUTLINED_FUNCTION_48_2(v1);
    }
  }
  else
  {
    OUTLINED_FUNCTION_81_2(v2, v0);
    v24 = URL.hasDirectoryPath.getter();
    if ((v24 & 1) != 0)
    {
      OUTLINED_FUNCTION_81_2(v29, v2);
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_18_0(v27, 0xD000000000000037);
      OUTLINED_FUNCTION_47_2(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    }
  }
  OUTLINED_FUNCTION_7();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLStyleTransfer.DataSource.saveImagesToDisk(imagesDictionary:)(Swift::OpaquePointer imagesDictionary)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  id v30;
  NSURL *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  Class isa;
  unsigned int v37;
  id v38;
  uint64_t v39;
  id v40;
  double v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  id v49;
  int64_t v50;
  unint64_t v51;
  id v52[2];

  OUTLINED_FUNCTION_8_1();
  v6 = v5;
  v52[1] = *(id *)MEMORY[0x24BDAC8D0];
  v7 = OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_146();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_31_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: URL, value: CIImage)?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_19_5();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_96_1();
  v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF648]), sel_init);
  v42 = v6 + 64;
  v47 = *MEMORY[0x24BDBF8A8];
  v11 = 1 << *(_BYTE *)(v6 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v6 + 64);
  v43 = (unint64_t)(v11 + 63) >> 6;
  v44 = v6;
  swift_bridgeObjectRetain();
  v50 = 0;
  v46 = v1;
  v48 = v7;
  v45 = v3;
  if (!v13)
    goto LABEL_6;
LABEL_4:
  v14 = __clz(__rbit64(v13));
  v15 = (v13 - 1) & v13;
  v16 = v14 | (v50 << 6);
LABEL_5:
  OUTLINED_FUNCTION_133_0(v2, *(_QWORD *)(v44 + 48) + *(_QWORD *)(v1 + 72) * v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  v17 = *(_QWORD *)(v44 + 56);
  v18 = OUTLINED_FUNCTION_158_0();
  v19 = *(void **)(v17 + 8 * v16);
  *(_QWORD *)(v2 + *(int *)(v18 + 48)) = v19;
  __swift_storeEnumTagSinglePayload(v2, 0, 1, v18);
  v20 = v19;
  while (1)
  {
    outlined init with take of (key: URL, value: CIImage)?(v2, v3, &demangling cache variable for type metadata for (key: URL, value: CIImage)?);
    v27 = OUTLINED_FUNCTION_158_0();
    OUTLINED_FUNCTION_128(v3, 1, v27);
    if (v28)
    {

      swift_release();
      goto LABEL_33;
    }
    v51 = v15;
    v29 = *(void **)(v3 + *(int *)(v27 + 48));
    OUTLINED_FUNCTION_133_0(v4, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    v30 = objc_msgSend(v29, sel_colorSpace);
    if (!v30)
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v39 = 0xD00000000000001ELL;
      *(_QWORD *)(v39 + 8) = 0x800000021AFF25C0;
      *(_OWORD *)(v39 + 16) = 0u;
      *(_OWORD *)(v39 + 32) = 0u;
      *(_BYTE *)(v39 + 48) = 2;
      swift_willThrow(0.0);
      v33 = v49;
      goto LABEL_32;
    }
    v32 = v30;
    v33 = v29;
    URL._bridgeToObjectiveC()(v31);
    v35 = v34;
    type metadata accessor for CIImageRepresentationOption(0);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
    Dictionary.init(dictionaryLiteral:)();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_10_3();
    v52[0] = 0;
    v37 = objc_msgSend(v49, sel_writePNGRepresentationOfImage_toURL_format_colorSpace_options_error_, v33, v35, v47, v32, isa, v52);

    if (!v37)
      break;
    v38 = v52[0];
    v1 = v46;
    v7 = v48;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v4, v48);

    v3 = v45;
    v13 = v51;
    if (v51)
      goto LABEL_4;
LABEL_6:
    v21 = v50 + 1;
    if (__OFADD__(v50, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
    }
    if (v21 < v43)
    {
      v22 = *(_QWORD *)(v42 + 8 * v21);
      if (v22)
        goto LABEL_9;
      v23 = v50 + 2;
      ++v50;
      if (v21 + 1 < v43)
      {
        v22 = *(_QWORD *)(v42 + 8 * v23);
        if (v22)
          goto LABEL_12;
        v50 = v21 + 1;
        if (v21 + 2 < v43)
        {
          v22 = *(_QWORD *)(v42 + 8 * (v21 + 2));
          if (v22)
          {
            v21 += 2;
            goto LABEL_9;
          }
          v23 = v21 + 3;
          v50 = v21 + 2;
          if (v21 + 3 < v43)
          {
            v22 = *(_QWORD *)(v42 + 8 * v23);
            if (v22)
            {
LABEL_12:
              v21 = v23;
LABEL_9:
              v15 = (v22 - 1) & v22;
              v16 = __clz(__rbit64(v22)) + (v21 << 6);
              v50 = v21;
              goto LABEL_5;
            }
            while (1)
            {
              v21 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_35;
              if (v21 >= v43)
                break;
              v22 = *(_QWORD *)(v42 + 8 * v21);
              ++v23;
              if (v22)
                goto LABEL_9;
            }
            v50 = v43 - 1;
          }
        }
      }
    }
    v24 = OUTLINED_FUNCTION_158_0();
    OUTLINED_FUNCTION_37_0(v2, v25, v26, v24);
    v15 = 0;
  }
  v40 = v52[0];
  _convertNSErrorToError(_:)();

  swift_willThrow(v41);
  v29 = v32;
  v7 = v48;
  v1 = v46;
LABEL_32:

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v7);
  swift_release();
LABEL_33:
  OUTLINED_FUNCTION_7();
}

id @nonobjc MLFeatureValue.__allocating_init(imageAt:pixelsWide:pixelsHigh:pixelFormatType:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  void *v11;
  NSDictionary v12;
  id v13;
  id v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  id v17;
  id v18;
  double v19;
  uint64_t v20;
  id v22;
  NSURL *v23;

  v23 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v23);
  v11 = v10;
  if (a5)
  {
    type metadata accessor for MLFeatureValueImageOption(0);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, (uint64_t (*)(uint64_t))type metadata accessor for MLFeatureValueImageOption, (uint64_t)&protocol conformance descriptor for MLFeatureValueImageOption);
    v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12.super.isa = 0;
  }
  v22 = 0;
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_featureValueWithImageAtURL_pixelsWide_pixelsHigh_pixelFormatType_options_error_, v11, a2, a3, a4, v12.super.isa, &v22);

  v14 = v22;
  if (v13)
  {
    v15 = type metadata accessor for URL();
    v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
    v17 = v14;
    v16(a1, v15);
  }
  else
  {
    v18 = v22;
    _convertNSErrorToError(_:)();

    swift_willThrow(v19);
    v20 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
  }
  return v13;
}

uint64_t VNImageCropAndScaleOption.description.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0x43207265746E6543;
  v1 = 0x694620656C616353;
  v2 = 0xD000000000000016;
  v3 = 0x6669636570736E55;
  if (a1 == 1)
    v3 = 0x694620656C616353;
  if (a1 != 257)
    v2 = v3;
  if (a1 != 2)
    v1 = v2;
  if (a1 == 258)
    return 0xD000000000000017;
  else
    return v1;
}

void MLStyleTransfer.DataSource.getStyleImageAndContentTable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  OUTLINED_FUNCTION_8_1();
  v5 = v0;
  v7 = v6;
  v22 = v8;
  v9 = OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_88_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_99_1();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - v12;
  type metadata accessor for MLStyleTransfer.DataSource(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_161();
  outlined init with copy of MLTrainingSessionParameters(v5, v3, v15);
  v16 = v3
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?))
               + 48);
  OUTLINED_FUNCTION_132((uint64_t)v13, v3);
  OUTLINED_FUNCTION_132(v2, v16);
  static MLStyleTransfer.generateTrainingTable(directoryURL:)();
  if (v1)
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v17(v2, v9);
    v17((uint64_t)v13, v9);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v9);
    v18 = v20;
    v19 = v21;
    OUTLINED_FUNCTION_132(v22, (uint64_t)v13);
    *(_QWORD *)v7 = v18;
    *(_BYTE *)(v7 + 8) = v19;
  }
  OUTLINED_FUNCTION_7();
}

uint64_t static MLStyleTransfer.generateTrainingTable(directoryURL:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_111_0();
  OUTLINED_FUNCTION_146();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_14_5();
  static UTType.image.getter();
  static _FileUtilities.readableFiles(at:type:)();
  if (v0)
    return OUTLINED_FUNCTION_47_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v6 = v4;
  OUTLINED_FUNCTION_47_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (*(_QWORD *)(v6 + 16))
  {
    static MLStyleTransfer.generateTrainingTable(urls:)();
    return OUTLINED_FUNCTION_12_0();
  }
  else
  {
    OUTLINED_FUNCTION_12_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    return OUTLINED_FUNCTION_18_0(v7, 0xD00000000000003CLL);
  }
}

void MLStyleTransfer.ModelParameters.algorithm.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *MLStyleTransfer.ModelParameters.algorithm.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*MLStyleTransfer.ModelParameters.algorithm.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLStyleTransfer.ModelParameters.validation.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MLStyleTransfer.ModelParameters(0);
  outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 20), a1, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  OUTLINED_FUNCTION_22();
}

uint64_t MLStyleTransfer.ModelParameters.validation.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *(int *)(OUTLINED_FUNCTION_44_3() + 20);
  return outlined assign with take of MLStyleTransfer.ModelParameters.ValidationData(v0, v2);
}

uint64_t (*MLStyleTransfer.ModelParameters.validation.modify())(_QWORD)
{
  type metadata accessor for MLStyleTransfer.ModelParameters(0);
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 28));
}

void MLStyleTransfer.ModelParameters.maxIterations.setter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_44_3() + 28)) = v0;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLStyleTransfer.ModelParameters.maxIterations.modify())(_QWORD)
{
  type metadata accessor for MLStyleTransfer.ModelParameters(0);
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.textelDensity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 32));
}

void MLStyleTransfer.ModelParameters.textelDensity.setter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_44_3() + 32)) = v0;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLStyleTransfer.ModelParameters.textelDensity.modify())(_QWORD)
{
  type metadata accessor for MLStyleTransfer.ModelParameters(0);
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLStyleTransfer.ModelParameters.styleStrength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 36));
}

void MLStyleTransfer.ModelParameters.styleStrength.setter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_44_3() + 36)) = v0;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLStyleTransfer.ModelParameters.styleStrength.modify())(_QWORD)
{
  type metadata accessor for MLStyleTransfer.ModelParameters(0);
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLStyleTransfer.ModelParameters.ValidationData.preprocessValidationData(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  NSString *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  id v41;
  void *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  OUTLINED_FUNCTION_8_1();
  v4 = v0;
  v51 = v5;
  v6 = OUTLINED_FUNCTION_112_0();
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v48 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v52 = v10;
  v11 = OUTLINED_FUNCTION_111_0();
  v53 = *(_QWORD *)(v11 - 8);
  v54 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  v13 = OUTLINED_FUNCTION_67_2();
  type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(v13);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = OUTLINED_FUNCTION_78();
  v55 = *(_QWORD *)(v17 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_53_4();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v44 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v44 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v44 - v26;
  outlined init with copy of MLTrainingSessionParameters(v4, (uint64_t)v16, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  OUTLINED_FUNCTION_128((uint64_t)v16, 1, v17);
  if (v28)
  {
    outlined destroy of MLStyleTransfer.ModelParameters();
  }
  else
  {
    v44 = v2;
    v45 = v21;
    v46 = v24;
    v47 = v4;
    v29 = v55;
    v30 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
    v30(v27, v16, v17);
    static UTType.image.getter();
    v31 = static _FileUtilities.isReadableFile(at:of:)();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v3, v54);
    v32 = v17;
    if ((v31 & 1) != 0)
    {
      v33 = v52;
      outlined init with copy of URL?(v51, v52, &demangling cache variable for type metadata for URL?);
      OUTLINED_FUNCTION_128(v33, 1, v17);
      if (v28)
      {
        v34 = NSTemporaryDirectory();
        OUTLINED_FUNCTION_151_0();
        v35 = v17;

        v36 = v44;
        URL.init(fileURLWithPath:isDirectory:)();
        OUTLINED_FUNCTION_80();
        OUTLINED_FUNCTION_141_0();
        UUID.uuidString.getter();
        OUTLINED_FUNCTION_79_1(v49);
        v37 = (uint64_t)v45;
        URL.appendingPathComponent(_:)();
        v32 = v35;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_48_2(v36);
        v39 = v46;
        OUTLINED_FUNCTION_80_1();
        URL.appendingPathExtension(_:)();
        OUTLINED_FUNCTION_48_2(v37);
        outlined destroy of URL?(v33, &demangling cache variable for type metadata for URL?);
      }
      else
      {
        v39 = v46;
        v40 = OUTLINED_FUNCTION_130_0();
        ((void (*)(uint64_t))v30)(v40);
      }
      v41 = MLStyleTransfer.ModelParameters.ValidationData.processImage(sourceURL:pixels:processingOption:)((uint64_t)v27, 512, 2);
      if (!v1)
      {
        v42 = v41;
        MLStyleTransfer.ModelParameters.ValidationData.saveImage(for:at:)(v41);

      }
      v43 = *(void (**)(char *, uint64_t))(v29 + 8);
      v43(v39, v32);
      v43(v27, v32);
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_18_0(v38, 0xD000000000000020);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v17);
    }
  }
  OUTLINED_FUNCTION_7();
}

id MLStyleTransfer.ModelParameters.ValidationData.processImage(sourceURL:pixels:processingOption:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t inited;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;

  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (id)type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for MLFeatureValue);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MLFeatureValueImageOption, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  v13 = (void *)*MEMORY[0x24BDBFF28];
  *(_QWORD *)(inited + 64) = MEMORY[0x24BEE1E88];
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = a3;
  type metadata accessor for MLFeatureValueImageOption(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFeatureValueImageOption and conformance MLFeatureValueImageOption, (uint64_t (*)(uint64_t))type metadata accessor for MLFeatureValueImageOption, (uint64_t)&protocol conformance descriptor for MLFeatureValueImageOption);
  v14 = v13;
  v15 = Dictionary.init(dictionaryLiteral:)();
  v16 = @nonobjc MLFeatureValue.__allocating_init(imageAt:pixelsWide:pixelsHigh:pixelFormatType:options:)((uint64_t)v10, a2, a2, 1380401729, v15);
  if (!v3)
  {
    v17 = v16;
    v18 = objc_msgSend(v16, sel_imageBufferValue);
    if (v18)
    {
      v19 = v18;
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF660]), sel_initWithCVPixelBuffer_, v18);

    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v21 = 0xD000000000000023;
      *(_QWORD *)(v21 + 8) = 0x800000021AFF25E0;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 32) = 0u;
      *(_BYTE *)(v21 + 48) = 0;
      swift_willThrow(0.0);

    }
  }
  return v11;
}

void MLStyleTransfer.ModelParameters.ValidationData.saveImage(for:at:)(void *a1)
{
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  Class isa;
  unsigned __int8 v8;
  id v9;
  uint64_t v10;
  id v11;
  double v12;
  unsigned int v13;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF648]), sel_init);
  v3 = objc_msgSend(a1, sel_colorSpace);
  if (v3)
  {
    v4 = v3;
    v13 = *MEMORY[0x24BDBF8A8];
    URL._bridgeToObjectiveC()((NSURL *)*MEMORY[0x24BDBF8A8]);
    v6 = v5;
    type metadata accessor for CIImageRepresentationOption(0);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type CIImageRepresentationOption and conformance CIImageRepresentationOption, (uint64_t (*)(uint64_t))type metadata accessor for CIImageRepresentationOption, (uint64_t)&protocol conformance descriptor for CIImageRepresentationOption);
    Dictionary.init(dictionaryLiteral:)();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v14[0] = 0;
    v8 = objc_msgSend(v2, sel_writePNGRepresentationOfImage_toURL_format_colorSpace_options_error_, a1, v6, v13, v4, isa, v14);

    if ((v8 & 1) != 0)
    {
      v9 = v14[0];
    }
    else
    {
      v11 = v14[0];
      _convertNSErrorToError(_:)();

      swift_willThrow(v12);
    }

  }
  else
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v10 = 0xD00000000000001ELL;
    *(_QWORD *)(v10 + 8) = 0x800000021AFF25C0;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_BYTE *)(v10 + 48) = 2;
    swift_willThrow(0.0);

  }
}

CreateML::MLStyleTransfer::ModelParameters::ModelAlgorithmType_optional __swiftcall MLStyleTransfer.ModelParameters.ModelAlgorithmType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  char v6;
  CreateML::MLStyleTransfer::ModelParameters::ModelAlgorithmType_optional result;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MLStyleTransfer.ModelParameters.ModelAlgorithmType.init(rawValue:), v3);
  OUTLINED_FUNCTION_123();
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *v4 = v6;
  OUTLINED_FUNCTION_125();
  return result;
}

uint64_t MLStyleTransfer.ModelParameters.ModelAlgorithmType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6574694C6E6E63;
  else
    return 7237219;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

CreateML::MLStyleTransfer::ModelParameters::ModelAlgorithmType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType(Swift::String *a1)
{
  return MLStyleTransfer.ModelParameters.ModelAlgorithmType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = MLStyleTransfer.ModelParameters.ModelAlgorithmType.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_22();
}

void static MLStyleTransfer.ModelParameters.verifyStyleStrengthParameter(value:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::String v3;
  Swift::String v4;

  if ((unint64_t)(a1 - 1) > 9)
  {
    OUTLINED_FUNCTION_72_1();
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = OUTLINED_FUNCTION_25_3();
    OUTLINED_FUNCTION_13_0(v3);
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_103_0(8236);
    v4._countAndFlagsBits = OUTLINED_FUNCTION_25_3();
    OUTLINED_FUNCTION_13_0(v4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_103_0(11869);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v1 = OUTLINED_FUNCTION_49_0();
    *v2 = 0xD00000000000001ELL;
    v2[1] = 0x800000021AFF2610;
    OUTLINED_FUNCTION_5_8(v1, (uint64_t)v2);
  }
  OUTLINED_FUNCTION_40_4();
}

void static MLStyleTransfer.generateTrainingTable(urls:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  unint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;

  OUTLINED_FUNCTION_8_1();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v7 = OUTLINED_FUNCTION_78();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_14_5();
  v9 = *(_QWORD *)(v4 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v25 = v6;
    v28 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v11 = v4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v27 = *(_QWORD *)(v8 + 72);
    do
    {
      v26(v1, v11, v7);
      v12 = URL.path.getter();
      v14 = v13;
      v15 = OUTLINED_FUNCTION_130_0();
      v16(v15);
      v10 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v10 = v28;
      }
      v17 = *(_QWORD *)(v10 + 16);
      if (v17 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v10 = v28;
      }
      *(_QWORD *)(v10 + 16) = v17 + 1;
      v18 = v10 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v12;
      *(_QWORD *)(v18 + 40) = v14;
      v11 += v27;
      --v9;
    }
    while (v9);
    v2 = v0;
    v6 = v25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = 0x55746E65746E6F63;
  *(_QWORD *)(inited + 40) = 0xEB00000000734C52;
  v28 = v10;
  MEMORY[0x24BDAC7A8](inited);
  ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  v22 = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(_BYTE *)(inited + 56) = v22 & 1;
  v23 = Dictionary.init(dictionaryLiteral:)();
  specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v23, (uint64_t)&v28);
  if (!v2)
  {
    v24 = v29;
    *(_QWORD *)v6 = v28;
    *(_BYTE *)(v6 + 8) = v24;
  }
  OUTLINED_FUNCTION_7();
}

uint64_t CMLModel.contentLoss.getter()
{
  return OUTLINED_FUNCTION_61_3();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = MEMORY[0x22075BB9C](0);
  if (result)
  {
    OUTLINED_FUNCTION_43_4();
    type metadata accessor for CMLParameters();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v0;
    type metadata accessor for CMLFeatureValue();
    CMLFeatureValue.__allocating_init(_:)();
    CMLParameters.add(key:featureValue:)(0x23u, v3);
    swift_release();
    CMLModel.callFunction(name:arguments:)(0x10u, inited);
    CMLVariant.featureValue()();
    specialized handling<A, B>(_:_:)();
    v5 = v4;
    OUTLINED_FUNCTION_4_2();
    swift_release();
    swift_setDeallocating();
    tc_v1_release();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CMLModel.styleLoss.getter()
{
  return OUTLINED_FUNCTION_61_3();
}

unint64_t MLStyleTransfer.ModelParameters.ModelAlgorithmType.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000004FLL;
  else
    return 0xD000000000000046;
}

unint64_t MLStyleTransfer.ModelParameters.ModelAlgorithmType.debugDescription.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000004FLL;
  else
    return 0xD000000000000046;
}

void MLStyleTransfer.ModelParameters.ModelAlgorithmType.playgroundDescription.getter(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  BOOL v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *v1 == 0;
  if (*v1)
    v3 = 0xD00000000000004FLL;
  else
    v3 = 0xD000000000000046;
  v4 = 0x800000021AFF2460;
  a1[3] = MEMORY[0x24BEE0D00];
  if (!v2)
    v4 = 0x800000021AFF2410;
  *a1 = v3;
  a1[1] = v4;
}

uint64_t MLStyleTransfer.ModelParameters.description.getter()
{
  _BYTE *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;

  OUTLINED_FUNCTION_127_0();
  v29 = v1;
  if (*v0)
    v2 = 0xD00000000000004FLL;
  else
    v2 = 0xD000000000000046;
  if (*v0)
    v3 = 0x800000021AFF2410;
  else
    v3 = 0x800000021AFF2460;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_0_1();
  v5._countAndFlagsBits = v29;
  v5._object = (void *)0xEB00000000203A6DLL;
  String.append(_:)(v5);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_145_0();
  OUTLINED_FUNCTION_124();
  v6 = OUTLINED_FUNCTION_37_2();
  v27 = *(_QWORD *)&v0[*(int *)(v6 + 28)];
  v33._countAndFlagsBits = OUTLINED_FUNCTION_47_3();
  OUTLINED_FUNCTION_126(v33);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_110_0(v7, v8, v9, v10, v11, v12, v13, v14, v25, v27, v29, (void *)0xEB00000000203A6DLL);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_145_0();
  OUTLINED_FUNCTION_124();
  v28 = *(_QWORD *)&v0[*(int *)(v6 + 32)];
  v34._countAndFlagsBits = OUTLINED_FUNCTION_47_3();
  OUTLINED_FUNCTION_126(v34);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_110_0(v15, v16, v17, v18, v19, v20, v21, v22, v26, v28, v30, v32);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_45_3();
  OUTLINED_FUNCTION_145_0();
  OUTLINED_FUNCTION_124();
  v23._countAndFlagsBits = OUTLINED_FUNCTION_47_3();
  String.append(_:)(v23);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_0_1();
  String.append(_:)(v31);
  OUTLINED_FUNCTION_123();
  return 0;
}

void MLStyleTransfer.ModelParameters.playgroundDescription.getter(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MLStyleTransfer.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

uint64_t MLStyleTransfer.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  v1 = ModelType.description.getter(*(_BYTE *)(*(_QWORD *)v0 + 32));
  OUTLINED_FUNCTION_114_0();
  v2 = MLStyleTransfer.ModelParameters.description.getter();
  v4 = v3;
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 0x656D617261500A0ALL;
  v5._object = (void *)0xED00000A73726574;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v2;
  v6._object = v4;
  String.append(_:)(v6);
  OUTLINED_FUNCTION_15_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_123();
  return v1;
}

void MLStyleTransfer.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  uint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v3._countAndFlagsBits = MLStyleTransfer.debugDescription.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

void static MLStyleTransfer.ModelParameters.ValidationData.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  OUTLINED_FUNCTION_20_3();
  v4 = v3;
  v6 = v5;
  v7 = OUTLINED_FUNCTION_78();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_95_1();
  OUTLINED_FUNCTION_153_0();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_91_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLStyleTransfer.ModelParameters.ValidationData, MLStyleTransfer.ModelParameters.ValidationData));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_5();
  v12 = v0 + *(int *)(v11 + 48);
  outlined init with copy of MLTrainingSessionParameters(v6, v0, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  outlined init with copy of MLTrainingSessionParameters(v4, v12, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
  OUTLINED_FUNCTION_14_3(v0);
  if (!v13)
  {
    outlined init with copy of MLTrainingSessionParameters(v0, v2, type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData);
    OUTLINED_FUNCTION_14_3(v12);
    if (!v13)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v1, v12, v7);
      MEMORY[0x220758770](v2, v1);
      v16 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v16(v1, v7);
      v17 = OUTLINED_FUNCTION_70_2();
      ((void (*)(uint64_t))v16)(v17);
      OUTLINED_FUNCTION_118_0();
      goto LABEL_10;
    }
    v14 = OUTLINED_FUNCTION_70_2();
    v15(v14);
LABEL_9:
    outlined destroy of URL?(v0, &demangling cache variable for type metadata for (MLStyleTransfer.ModelParameters.ValidationData, MLStyleTransfer.ModelParameters.ValidationData));
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_14_3(v12);
  if (!v13)
    goto LABEL_9;
  OUTLINED_FUNCTION_118_0();
LABEL_10:
  OUTLINED_FUNCTION_9_5();
}

id @nonobjc VNImageRequestHandler.init(cgImage:options:)(void *a1)
{
  void *v1;
  Class isa;
  id v4;

  type metadata accessor for VNImageOption(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_123();
  v4 = objc_msgSend(v1, sel_initWithCGImage_options_, a1, isa);

  return v4;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;

  OUTLINED_FUNCTION_21_4(a1, a2, a3);
  OUTLINED_FUNCTION_4_8();
  if (v9)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v10 = v7;
  v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
  if (OUTLINED_FUNCTION_27_5())
  {
    v12 = OUTLINED_FUNCTION_70_2();
    specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
    OUTLINED_FUNCTION_119_0();
    if (!v15)
      goto LABEL_10;
    v10 = v14;
  }
  v16 = *v3;
  if ((v11 & 1) != 0)
  {
    *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v10) = a1;
    OUTLINED_FUNCTION_8_0();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a3, a1, v16);
    OUTLINED_FUNCTION_33_2();
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)()
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
}

{
  _QWORD **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t *v17;

  OUTLINED_FUNCTION_20_3();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  specialized __RawDictionaryStorage.find<A>(_:)(v3, v1);
  OUTLINED_FUNCTION_4_8();
  if (v11)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v12 = v9;
  v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
  if (OUTLINED_FUNCTION_65_3())
  {
    OUTLINED_FUNCTION_98_1();
    OUTLINED_FUNCTION_120_0();
    if (!v15)
      goto LABEL_10;
    v12 = v14;
  }
  v16 = *v0;
  if ((v13 & 1) != 0)
  {
    v17 = (uint64_t *)(v16[7] + 16 * v12);
    swift_bridgeObjectRelease();
    *v17 = v8;
    v17[1] = v6;
    OUTLINED_FUNCTION_9_5();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v12, v4, v2, v8, v6, v16);
    OUTLINED_FUNCTION_8_6();
  }
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_20_3();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  OUTLINED_FUNCTION_21_4(v7, v5, v3);
  OUTLINED_FUNCTION_4_8();
  if (v11)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v12 = v9;
  v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(v2);
  if (OUTLINED_FUNCTION_27_5())
  {
    OUTLINED_FUNCTION_101_1();
    OUTLINED_FUNCTION_120_0();
    if (!v15)
      goto LABEL_10;
    v12 = v14;
  }
  v16 = *v0;
  if ((v13 & 1) != 0)
  {
    v17 = *(_QWORD *)(v16 + 56);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v17 + 8 * v12) = v8;
    OUTLINED_FUNCTION_9_5();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v12, v6, v4, v8, v16);
    OUTLINED_FUNCTION_8_6();
  }
}

{
  _OWORD *v0;
  Swift::Int *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  _OWORD *v20;
  _OWORD *v21;

  OUTLINED_FUNCTION_20_3();
  v4 = v1;
  v6 = v5;
  v8 = v7;
  OUTLINED_FUNCTION_43_4();
  v9 = type metadata accessor for CodingUserInfoKey();
  OUTLINED_FUNCTION_88_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_14_5();
  v11 = *v1;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_4_8();
  if (v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  v15 = v12;
  v16 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CodingUserInfoKey, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v6 & 1, v11))
    goto LABEL_5;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v17;
LABEL_5:
  v19 = (_QWORD *)*v4;
  if ((v16 & 1) != 0)
  {
    OUTLINED_FUNCTION_46_3();
    OUTLINED_FUNCTION_9_5();
    outlined init with take of Any(v20, v21);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v8, v9);
    specialized _NativeDictionary._insert(at:key:value:)(v15, v2, v0, v19);
    OUTLINED_FUNCTION_9_5();
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, double a3)
{
  _QWORD **v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;

  v8 = type metadata accessor for MetricsKey();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_53_0();
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_4_8();
  if (v12)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v13 = v10;
  v14 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MetricsKey, Double>);
  if (OUTLINED_FUNCTION_62_3(a2 & 1))
  {
    specialized __RawDictionaryStorage.find<A>(_:)();
    OUTLINED_FUNCTION_120_0();
    if (!v16)
      goto LABEL_10;
    v13 = v15;
  }
  v17 = *v3;
  if ((v14 & 1) != 0)
  {
    *(double *)(v17[7] + 8 * v13) = a3;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v4, a1, v8);
    v18 = OUTLINED_FUNCTION_130_0();
    specialized _NativeDictionary._insert(at:key:value:)(v18, v19, v17, a3);
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t)&demangling cache variable for type metadata for _NativeDictionary<String, MetricsKey>, (uint64_t)MEMORY[0x24BDC5810], a7, a8, a9, a10, a11, a12);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t)&demangling cache variable for type metadata for _NativeDictionary<String, CSVType>, (uint64_t)MEMORY[0x24BDF5FC8], a7, a8, a9, a10, a11, a12);
}

{
  _QWORD **v12;
  void (*v13)(_QWORD);
  void (*v14)(_QWORD);
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;

  OUTLINED_FUNCTION_20_3();
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  OUTLINED_FUNCTION_21_4(v21, v19, v17);
  OUTLINED_FUNCTION_4_8();
  if (v25)
  {
    __break(1u);
    goto LABEL_9;
  }
  v26 = v23;
  v27 = v24;
  __swift_instantiateConcreteTypeFromMangledName(v16);
  if (!OUTLINED_FUNCTION_65_3())
    goto LABEL_5;
  v28 = OUTLINED_FUNCTION_98_1();
  if ((v27 & 1) != (v29 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v26 = v28;
LABEL_5:
  if ((v27 & 1) != 0)
  {
    v14(0);
    OUTLINED_FUNCTION_9_5();
    return v33(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v26, v20, v18, v22, *v12, (uint64_t (*)(_QWORD))v14);
    return OUTLINED_FUNCTION_8_6();
  }
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t)&demangling cache variable for type metadata for _NativeDictionary<String, JSONType>, (uint64_t)MEMORY[0x24BDF6008], a7, a8, a9, a10, a11, a12);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t)&demangling cache variable for type metadata for _NativeDictionary<String, MLProgram.Block>, (uint64_t)MEMORY[0x24BE62F58], a7, a8, a9, a10, a11, a12);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v3;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *result;

  OUTLINED_FUNCTION_21_4((uint64_t)a1, a2, a3);
  OUTLINED_FUNCTION_4_8();
  if (v9)
  {
    __break(1u);
LABEL_10:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v7;
  v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (OUTLINED_FUNCTION_27_5())
  {
    OUTLINED_FUNCTION_101_1();
    OUTLINED_FUNCTION_119_0();
    if (!v13)
      goto LABEL_10;
    v10 = v12;
  }
  if ((v11 & 1) != 0)
  {
    v14 = (_OWORD *)OUTLINED_FUNCTION_46_3();
    return OUTLINED_FUNCTION_34_4(v14, v15);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a3, a1, *v3);
    return (_OWORD *)OUTLINED_FUNCTION_33_2();
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  specialized __RawDictionaryStorage.find<A>(_:)();
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  v18 = v13;
  v19 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<URL, CIImage>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17))
    goto LABEL_5;
  specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v18 = v20;
LABEL_5:
  v22 = *v4;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7];

    *(_QWORD *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    specialized _NativeDictionary._insert(at:key:value:)(v18, (uint64_t)v11, a1, v22);
  }
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, double a3)
{
  Swift::Int *v3;
  Swift::Int *v4;
  Swift::Int v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t result;
  char v15;
  _QWORD *v16;

  v4 = v3;
  v8 = *v3;
  specialized __RawDictionaryStorage.find<A>(_:)(a1);
  OUTLINED_FUNCTION_4_8();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = v9;
  v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLProgress.Metric, Double>);
  result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a2 & 1, v8);
  if ((result & 1) == 0)
    goto LABEL_5;
  result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v12 = result;
LABEL_5:
  v16 = (_QWORD *)*v4;
  if ((v13 & 1) == 0)
    return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, v16, a3);
  *(double *)(v16[7] + 8 * v12) = a3;
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD **v3;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _OWORD *v14;
  _OWORD *v15;

  specialized __RawDictionaryStorage.find<A>(_:)(a2);
  OUTLINED_FUNCTION_4_8();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = v7;
  v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLProgress.Metric, Any>);
  if (!OUTLINED_FUNCTION_62_3(a3 & 1))
    goto LABEL_5;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v10 = v12;
LABEL_5:
  if ((v11 & 1) != 0)
  {
    v14 = (_OWORD *)OUTLINED_FUNCTION_46_3();
    OUTLINED_FUNCTION_34_4(v14, v15);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, *v3);
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD **v3;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  _BYTE v18[40];

  specialized __RawDictionaryStorage.find<A>(_:)(a2);
  OUTLINED_FUNCTION_4_8();
  if (v9)
  {
    __break(1u);
LABEL_10:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v7;
  v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
  if (OUTLINED_FUNCTION_62_3(a3 & 1))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a2);
    OUTLINED_FUNCTION_119_0();
    if (!v13)
      goto LABEL_10;
    v10 = v12;
  }
  v14 = *v3;
  if ((v11 & 1) != 0)
  {
    v15 = (_OWORD *)OUTLINED_FUNCTION_46_3();
    return outlined init with take of Any(v15, v16);
  }
  else
  {
    outlined init with copy of AnyHashable(a2, (uint64_t)v18);
    return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1, v14);
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;

  result = OUTLINED_FUNCTION_26_3(a1, a2, a3, a4, a5);
  if (v8)
    __break(1u);
  else
    *(_QWORD *)(v6 + 16) = v7;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a3[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a3[6];
  v9 = type metadata accessor for MetricsKey();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(double *)(a3[7] + 8 * a1) = a4;
  v11 = a3[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a3[2] = v13;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

void specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v9 = (_QWORD *)(a5[6] + 16 * a1);
  *v9 = a2;
  v9[1] = a3;
  v10 = a5[7];
  v11 = a6(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a4, v11);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    a5[2] = v14;
    OUTLINED_FUNCTION_125();
  }
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for URL();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t outlined assign with take of MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType;
  if (!lazy protocol witness table cache variable for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLStyleTransfer.ModelParameters.ModelAlgorithmType, &type metadata for MLStyleTransfer.ModelParameters.ModelAlgorithmType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLStyleTransfer.ModelParameters.ModelAlgorithmType and conformance MLStyleTransfer.ModelParameters.ModelAlgorithmType);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MLStyleTransfer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    *((_BYTE *)a1 + v6) = *((_BYTE *)a2 + v6);
    v9 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
    v10 = v9[5];
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = type metadata accessor for URL();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      v14 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    }
    *(_QWORD *)&v7[v9[6]] = *(_QWORD *)&v8[v9[6]];
    *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
    *(_QWORD *)&v7[v9[8]] = *(_QWORD *)&v8[v9[8]];
    *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
    v7[v9[10]] = v8[v9[10]];
  }
  return v5;
}

uint64_t destroy for MLStyleTransfer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = v4 + *(int *)(type metadata accessor for MLStyleTransfer.ModelParameters(0) + 20);
  v6 = type metadata accessor for URL();
  result = __swift_getEnumTagSinglePayload(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return result;
}

_QWORD *initializeWithCopy for MLStyleTransfer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *((_BYTE *)a1 + v4) = *((_BYTE *)a2 + v4);
  v7 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  v8 = v7[5];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = type metadata accessor for URL();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  *(_QWORD *)&v5[v7[6]] = *(_QWORD *)&v6[v7[6]];
  *(_QWORD *)&v5[v7[7]] = *(_QWORD *)&v6[v7[7]];
  *(_QWORD *)&v5[v7[8]] = *(_QWORD *)&v6[v7[8]];
  *(_QWORD *)&v5[v7[9]] = *(_QWORD *)&v6[v7[9]];
  v5[v7[10]] = v6[v7[10]];
  return a1;
}

_QWORD *assignWithCopy for MLStyleTransfer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int EnumTagSinglePayload;
  int v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *((_BYTE *)a1 + v6) = *((_BYTE *)a2 + v6);
  v9 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (!EnumTagSinglePayload)
  {
    v16 = *(_QWORD *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v17 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
LABEL_7:
  *(_QWORD *)&v7[v9[6]] = *(_QWORD *)&v8[v9[6]];
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  *(_QWORD *)&v7[v9[8]] = *(_QWORD *)&v8[v9[8]];
  *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
  v7[v9[10]] = v8[v9[10]];
  return a1;
}

_QWORD *initializeWithTake for MLStyleTransfer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *((_BYTE *)a1 + v4) = *((_BYTE *)a2 + v4);
  v7 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  v8 = v7[5];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  *(_QWORD *)&v5[v7[6]] = *(_QWORD *)&v6[v7[6]];
  *(_QWORD *)&v5[v7[7]] = *(_QWORD *)&v6[v7[7]];
  *(_QWORD *)&v5[v7[8]] = *(_QWORD *)&v6[v7[8]];
  *(_QWORD *)&v5[v7[9]] = *(_QWORD *)&v6[v7[9]];
  v5[v7[10]] = v6[v7[10]];
  return a1;
}

_QWORD *assignWithTake for MLStyleTransfer(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int EnumTagSinglePayload;
  int v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *((_BYTE *)a1 + v6) = *((_BYTE *)a2 + v6);
  v9 = (int *)type metadata accessor for MLStyleTransfer.ModelParameters(0);
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (!EnumTagSinglePayload)
  {
    v16 = *(_QWORD *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v17 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
LABEL_7:
  *(_QWORD *)&v7[v9[6]] = *(_QWORD *)&v8[v9[6]];
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  *(_QWORD *)&v7[v9[8]] = *(_QWORD *)&v8[v9[8]];
  *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
  v7[v9[10]] = v8[v9[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_21AE2244C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_125();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    v2 = OUTLINED_FUNCTION_137_0();
    OUTLINED_FUNCTION_51_3(v2, v3, v4);
  }
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AE224AC(_QWORD *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    OUTLINED_FUNCTION_125();
  }
  else
  {
    OUTLINED_FUNCTION_37_2();
    v3 = OUTLINED_FUNCTION_104_0();
    OUTLINED_FUNCTION_16_6(v3, v4, v5, v6);
  }
}

uint64_t type metadata completion function for MLStyleTransfer()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLStyleTransfer.ModelParameters(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLStyleTransfer.DataSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for URL();
    v7 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
    v7((uint64_t *)((char *)a1 + *(int *)(v8 + 48)), (uint64_t *)((char *)a2 + *(int *)(v8 + 48)), v6);
    v9 = *(int *)(v8 + 64);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
  }
  return a1;
}

uint64_t destroy for MLStyleTransfer.DataSource(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);

  v2 = type metadata accessor for URL();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v5(a1, v2);
  v3 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?))
              + 48);
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(v3, v2);
}

uint64_t initializeWithCopy for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for URL();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v5(a1 + *(int *)(v6 + 48), a2 + *(int *)(v6 + 48), v4);
  v7 = *(int *)(v6 + 64);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t assignWithCopy for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = type metadata accessor for URL();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24);
  v5(a1, a2, v4);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v5(a1 + *(int *)(v6 + 48), a2 + *(int *)(v6 + 48), v4);
  v7 = *(int *)(v6 + 64);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  return a1;
}

uint64_t initializeWithTake for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for URL();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v5(a1 + *(int *)(v6 + 48), a2 + *(int *)(v6 + 48), v4);
  v7 = *(int *)(v6 + 64);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for URL();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40);
  v5(a1, a2, v4);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  v5(a1 + *(int *)(v6 + 48), a2 + *(int *)(v6 + 48), v4);
  v7 = *(int *)(v6 + 64);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.DataSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v6);
}

uint64_t getEnumTag for MLStyleTransfer.DataSource()
{
  return 0;
}

uint64_t type metadata completion function for MLStyleTransfer.DataSource(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  int v4;

  result = type metadata accessor for URL();
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    swift_initEnumMetadataSingleCase();
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = v4;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MLStyleTransfer.ModelParameters(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
    {
      v11 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
    }
    v13 = a3[7];
    *(_QWORD *)((char *)v4 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *(_QWORD *)((char *)v4 + v13) = *(_QWORD *)((char *)a2 + v13);
    v14 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *(_QWORD *)((char *)v4 + v14) = *(_QWORD *)((char *)a2 + v14);
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  }
  return v4;
}

uint64_t destroy for MLStyleTransfer.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for URL();
  result = __swift_getEnumTagSinglePayload(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return result;
}

_BYTE *initializeWithCopy for MLStyleTransfer.ModelParameters(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  v12 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

_BYTE *assignWithCopy for MLStyleTransfer.ModelParameters(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

_BYTE *initializeWithTake for MLStyleTransfer.ModelParameters(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  v12 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

_BYTE *assignWithTake for MLStyleTransfer.ModelParameters(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
LABEL_7:
  v14 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.ModelParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_21AE22FD4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == 254)
  {
    OUTLINED_FUNCTION_125();
  }
  else
  {
    OUTLINED_FUNCTION_153_0();
    v2 = OUTLINED_FUNCTION_137_0();
    OUTLINED_FUNCTION_51_3(v2, v3, v4);
  }
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.ModelParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AE2302C(_BYTE *a1, char a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3 == 254)
  {
    *a1 = a2 + 1;
    OUTLINED_FUNCTION_125();
  }
  else
  {
    OUTLINED_FUNCTION_153_0();
    v3 = OUTLINED_FUNCTION_104_0();
    OUTLINED_FUNCTION_16_6(v3, v4, v5, v6);
  }
}

uint64_t type metadata completion function for MLStyleTransfer.ModelParameters()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLStyleTransfer.ModelParameters.ValidationData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for URL();
  result = __swift_getEnumTagSinglePayload(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for MLStyleTransfer.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for MLStyleTransfer.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;

  v6 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for MLStyleTransfer.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for MLStyleTransfer.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;

  v6 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLStyleTransfer.ModelParameters.ValidationData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE23504(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int EnumTagSinglePayload;

  v4 = OUTLINED_FUNCTION_78();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(a1, a2, v4);
  if (EnumTagSinglePayload >= 2)
    return EnumTagSinglePayload - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.ModelParameters.ValidationData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE23550(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = OUTLINED_FUNCTION_78();
  return OUTLINED_FUNCTION_16_6(a1, v5, a3, v6);
}

uint64_t getEnumTag for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  return __swift_getEnumTagSinglePayload(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for MLStyleTransfer.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v4);
}

uint64_t type metadata completion function for MLStyleTransfer.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLStyleTransfer.ModelParameters.ModelAlgorithmType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21AE23694 + 4 * byte_21AFE8595[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21AE236C8 + 4 * byte_21AFE8590[v4]))();
}

uint64_t sub_21AE236C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AE236D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AE236D8);
  return result;
}

uint64_t sub_21AE236E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AE236ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21AE236F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AE236F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MLStyleTransfer.ModelParameters.ModelAlgorithmType()
{
  return &type metadata for MLStyleTransfer.ModelParameters.ModelAlgorithmType;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a3[6] + result) = a2;
  *(double *)(a3[7] + 8 * result) = a4;
  v4 = a3[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a3[2] = v6;
  return result;
}

void specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    a4[2] = v7;
    OUTLINED_FUNCTION_22();
  }
}

void lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x22075B938](a3, v5), a1);
  }
  OUTLINED_FUNCTION_22();
}

uint64_t sub_21AE2386C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MLStyleTransfer.PersistentParameters();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_unknownObjectRelease();
  swift_release();
  v3 = *(void (**)(uint64_t))(*(_QWORD *)(OUTLINED_FUNCTION_78() - 8) + 8);
  v4 = OUTLINED_FUNCTION_70_2();
  v3(v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (styleImage: URL, contentDirectory: URL, processingOption: VNImageCropAndScaleOption?));
  OUTLINED_FUNCTION_76(v0 + v2 + *(int *)(v5 + 48));
  v6 = v0 + v2 + *(int *)(v1 + 24);
  if (!OUTLINED_FUNCTION_109_0())
    OUTLINED_FUNCTION_76(v6);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_43_4();
  v1 = *(_QWORD *)(type metadata accessor for MLStyleTransfer.PersistentParameters() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + v2;
  v5 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  v6 = *v5;
  v7 = v5[1];
  v8 = swift_task_alloc();
  v9 = (_QWORD *)OUTLINED_FUNCTION_30_0(v8);
  v10 = OUTLINED_FUNCTION_100_0(v9);
  return closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(v10, v11, v12, v3, v4, v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = swift_task_alloc();
  v7 = (_QWORD *)OUTLINED_FUNCTION_30_0(v6);
  *v7 = v2;
  v7[1] = partial apply for closure #1 in MLHandPoseClassifier.init(trainingData:parameters:);
  return closure #1 in closure #1 in closure #1 in closure #1 in static MLStyleTransfer.resume(_:)(a1, v5, v4);
}

void outlined init with take of (key: URL, value: CIImage)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_165(a1, a2, a3);
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_22();
}

void partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  specialized closure #1 in _StringGuts.withCString<A>(_:)(*(void (**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  if (!v2)
    *a1 = v4;
  OUTLINED_FUNCTION_23_7();
}

{
  partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  if (!v2)
    *a1 = v4;
  OUTLINED_FUNCTION_56_9();
}

uint64_t OUTLINED_FUNCTION_5_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_8_6()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_16_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

unint64_t OUTLINED_FUNCTION_21_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
}

uint64_t OUTLINED_FUNCTION_24_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_25_3()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

unint64_t OUTLINED_FUNCTION_26_3(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  v5 = (_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * result) = a4;
  return result;
}

BOOL OUTLINED_FUNCTION_27_5()
{
  Swift::Int v0;
  char v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t OUTLINED_FUNCTION_30_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_33_2()
{
  return swift_bridgeObjectRetain();
}

_OWORD *OUTLINED_FUNCTION_34_4(_OWORD *a1, _OWORD *a2)
{
  return outlined init with take of Any(a1, a2);
}

uint64_t OUTLINED_FUNCTION_35_3(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  return type metadata accessor for MLStyleTransfer.ModelParameters(0);
}

uint64_t OUTLINED_FUNCTION_43_4()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_44_3()
{
  return type metadata accessor for MLStyleTransfer.ModelParameters(0);
}

void OUTLINED_FUNCTION_45_3()
{
  _StringGuts.grow(_:)(19);
}

uint64_t OUTLINED_FUNCTION_46_3()
{
  uint64_t v0;
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_0(v1);
  return v0;
}

uint64_t OUTLINED_FUNCTION_47_3()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

_QWORD *OUTLINED_FUNCTION_50_2@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_51_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

void OUTLINED_FUNCTION_52_2()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_54_2()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_55_3(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_61_3()
{
  return CMLModel.contentLoss.getter();
}

BOOL OUTLINED_FUNCTION_62_3(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_63_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 296))(v1, v0);
}

BOOL OUTLINED_FUNCTION_65_3()
{
  Swift::Int v0;
  char v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t OUTLINED_FUNCTION_66_2()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_67_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_70_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_71_2(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void OUTLINED_FUNCTION_72_1()
{
  _StringGuts.grow(_:)(38);
}

void OUTLINED_FUNCTION_73_0()
{
  uint64_t v0;

  CMLDictionary.add(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_74_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_75_2@<X0>(uint64_t a1@<X8>, __int128 a2@<Q0>, __int128 a3@<Q1>, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  v11 = a2;
  v12 = a3;
  v13 = a1;
  return MLStyleTransfer.getFullMetadata(_:)((uint64_t *)va, (uint64_t)va1);
}

uint64_t OUTLINED_FUNCTION_76(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_79_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_80_1()
{
  return 6778480;
}

uint64_t OUTLINED_FUNCTION_81_2(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void OUTLINED_FUNCTION_82_1(unsigned __int8 a1)
{
  uint64_t v1;

  CMLParameters.add(key:column:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_83_1()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 216) + 8))(v0, *(_QWORD *)(v1 - 208));
}

void OUTLINED_FUNCTION_84_0(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of URL?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_86_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_97_0()
{
  return 0;
}

unint64_t OUTLINED_FUNCTION_98_1()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_100_0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

unint64_t OUTLINED_FUNCTION_101_1()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

void OUTLINED_FUNCTION_103_0(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE200000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_104_0()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + *(int *)(v1 + 20);
}

uint64_t OUTLINED_FUNCTION_106_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_107_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 272))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_108_0()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_109_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

void OUTLINED_FUNCTION_110_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  Swift::String v12;

  v12._countAndFlagsBits = a11;
  v12._object = a12;
  String.append(_:)(v12);
}

uint64_t OUTLINED_FUNCTION_111_0()
{
  return type metadata accessor for UTType();
}

uint64_t OUTLINED_FUNCTION_112_0()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_114_0()
{
  return type metadata accessor for MLStyleTransfer(0);
}

void OUTLINED_FUNCTION_115_0(uint64_t a1)
{
  uint64_t v1;

  specialized MLTrainingSession.init(delegate:parameters:modelType:)(a1, v1, 14);
}

uint64_t OUTLINED_FUNCTION_116_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_118_0()
{
  outlined destroy of MLStyleTransfer.ModelParameters();
}

void OUTLINED_FUNCTION_121_0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t OUTLINED_FUNCTION_122_0()
{
  return 14;
}

uint64_t OUTLINED_FUNCTION_123_0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_125_0()
{
  return 14;
}

void OUTLINED_FUNCTION_126(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_129()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_130_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_131_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_132(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_133_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_136_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_137_0()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + *(int *)(v1 + 20);
}

void OUTLINED_FUNCTION_138_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of MLTrainingSessionParameters(v4, v3, a3);
}

void OUTLINED_FUNCTION_139_0()
{
  outlined destroy of MLStyleTransfer.ModelParameters();
}

uint64_t OUTLINED_FUNCTION_141_0()
{
  return UUID.init()();
}

void OUTLINED_FUNCTION_144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  specialized Dictionary.subscript.getter(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_145_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_146_0()
{
  return URL.init(fileURLWithPath:isDirectory:)();
}

uint64_t OUTLINED_FUNCTION_147@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void OUTLINED_FUNCTION_149_0()
{
  char v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v1, v0);
}

__n128 OUTLINED_FUNCTION_150_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25)
{
  return (__n128)a25;
}

uint64_t OUTLINED_FUNCTION_151_0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_153_0()
{
  return type metadata accessor for MLStyleTransfer.ModelParameters.ValidationData(0);
}

uint64_t OUTLINED_FUNCTION_154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_155()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_158_0()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

void OUTLINED_FUNCTION_161_0(CreateML::ModelType a1, uint64_t a2, uint64_t a3, Swift::Float a4)
{
  unint64_t v4;

  v4 = a3 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
  AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(a1, *(Swift::String *)&a2, a4);
}

uint64_t destroy for AnnotatedFeatureStore(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnnotatedFeatureStore(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnnotatedFeatureStore(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy96_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for AnnotatedFeatureStore(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnotatedFeatureStore(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 80);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnotatedFeatureStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnotatedFeatureStore()
{
  return &type metadata for AnnotatedFeatureStore;
}

void AnnotatedFeatureStore.init(contentsOf:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  os_log_type_t v46;
  NSObject *v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[96];
  uint64_t v85;
  _BYTE __dst[96];
  uint64_t v87;

  v79 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  v73 = *(_QWORD *)(v3 - 8);
  v74 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v78 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v76 = *(_QWORD *)(v5 - 8);
  v77 = v5;
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_208();
  v72 = v6;
  MEMORY[0x24BDAC7A8](v7);
  v75 = (char *)&v64 - v8;
  v9 = type metadata accessor for UTType();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL();
  v80 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_208();
  v71 = v14;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v64 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v64 - v19;
  BlobsFile.init()((uint64_t)v84);
  *(_QWORD *)&v84[88] = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_1_9();
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_2_7();
  v21 = a1;
  URL.appendingPathComponent(_:)();
  static UTType.json.getter();
  v81 = v20;
  LOBYTE(a1) = static _FileUtilities.isReadableFile(at:of:)();
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23 = v9;
  v22(v12, v9);
  if ((a1 & 1) == 0)
  {
    v31 = v21;
LABEL_7:
    OUTLINED_FUNCTION_8_7(v31);
    v32 = v79;
    goto LABEL_8;
  }
  v24 = v80;
  v70 = v13;
  static UTType.data.getter();
  v25 = static _FileUtilities.isReadableFile(at:of:)();
  v22(v12, v23);
  if ((v25 & 1) == 0)
  {
    v31 = v21;
    goto LABEL_7;
  }
  v26 = (uint64_t)v81;
  v27 = v87;
  v28 = Data.init(contentsOf:options:)();
  v30 = v70;
  if (v27)
  {
    OUTLINED_FUNCTION_0_11(v21);
    OUTLINED_FUNCTION_0_11((uint64_t)v17);
    OUTLINED_FUNCTION_0_11(v26);
LABEL_10:
    outlined consume of Data._Representation(*(uint64_t *)v84, *(unint64_t *)&v84[8]);
    OUTLINED_FUNCTION_101();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v39 = v28;
  v68 = v17;
  v40 = v29;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  v41 = JSONDecoder.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Metadata]);
  lazy protocol witness table accessor for type [Metadata] and conformance <A> [A](&lazy protocol witness table cache variable for type [Metadata] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type Metadata and conformance Metadata, MEMORY[0x24BEE12D0]);
  v69 = v39;
  v67 = v40;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  v65 = v21;
  v66 = v41;
  v42 = v82;
  v43 = v71;
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v71, v68, v30);
  v44 = Data.init(contentsOf:options:)();
  BlobsFile.init(data:)(v44, v45);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v43, v30);
  outlined assign with take of BlobsFile((uint64_t)&v85, (uint64_t)v84);
  v46 = static os_log_type_t.debug.getter();
  type metadata accessor for OS_os_log();
  OUTLINED_FUNCTION_10_5();
  v47 = static OS_os_log.default.getter();
  v48 = os_log_type_enabled(v47, v46);
  v49 = v69;
  v87 = 0;
  if (v48)
  {
    v50 = v42;
    v51 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v51 = 134217984;
    v82 = *(_QWORD *)(v50 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21ADEE000, v47, v46, "Reading AnnotatedFeatureStore with %ld elements", v51, 0xCu);
    OUTLINED_FUNCTION_9_6();
  }
  OUTLINED_FUNCTION_60_0();

  v71 = *(_QWORD *)(v42 + 16);
  v64 = v42;
  if (v71)
  {
    v52 = 0;
    v53 = (uint64_t *)(v42 + 48);
    while (1)
    {
      v54 = *(v53 - 1);
      v55 = *v53;
      memcpy(__dst, v84, 0x58uLL);
      OUTLINED_FUNCTION_10_5();
      swift_bridgeObjectRetain();
      outlined retain of BlobsFile((uint64_t)__dst);
      v56 = v87;
      v57 = BlobsFile.floatBlob(at:)(v52);
      v87 = v56;
      if (v56)
        break;
      v58 = v57;
      v80 = v52;
      outlined release of BlobsFile((uint64_t)__dst);
      v82 = v58;
      OUTLINED_FUNCTION_10_5();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      lazy protocol witness table accessor for type [Float] and conformance [A]();
      v59 = v75;
      MLShapedArray.init<A>(scalars:shape:)();
      (*(void (**)(uint64_t, char *, uint64_t))(v76 + 16))(v72, v59, v77);
      v82 = v54;
      v83 = v55;
      swift_bridgeObjectRetain();
      AnnotatedFeature.init(feature:annotation:)();
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_60_0();
      v60 = *(_QWORD *)&v84[88];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_12_6();
        v60 = v62;
      }
      v49 = v69;
      v61 = *(_QWORD *)(v60 + 16);
      if (v61 >= *(_QWORD *)(v60 + 24) >> 1)
      {
        OUTLINED_FUNCTION_12_6();
        v60 = v63;
      }
      v52 = v80 + 1;
      v53 += 3;
      *(_QWORD *)(v60 + 16) = v61 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v73 + 32))(v60+ ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))+ *(_QWORD *)(v73 + 72) * v61, v78, v74);
      *(_QWORD *)&v84[88] = v60;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v77);
      if (v71 == v52)
        goto LABEL_22;
    }
    swift_release();
    OUTLINED_FUNCTION_4_9();
    outlined release of BlobsFile((uint64_t)__dst);
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_13_6(v65);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_6((uint64_t)v68);
    OUTLINED_FUNCTION_13_6((uint64_t)v81);
    goto LABEL_10;
  }
LABEL_22:
  swift_release();
  outlined consume of Data._Representation(v49, v67);
  OUTLINED_FUNCTION_8_7(v65);
  swift_bridgeObjectRelease();
  v32 = v79;
  v17 = v68;
LABEL_8:
  OUTLINED_FUNCTION_8_7((uint64_t)v17);
  OUTLINED_FUNCTION_8_7((uint64_t)v81);
  v33 = *(_QWORD *)&v84[72];
  v34 = *(_OWORD *)&v84[80];
  v35 = *(_QWORD *)&v84[16];
  v36 = *(_OWORD *)&v84[24];
  v37 = *(_OWORD *)&v84[40];
  v38 = *(_OWORD *)&v84[56];
  *(_OWORD *)v32 = *(_OWORD *)v84;
  *(_QWORD *)(v32 + 16) = v35;
  *(_OWORD *)(v32 + 24) = v36;
  *(_OWORD *)(v32 + 40) = v37;
  *(_OWORD *)(v32 + 56) = v38;
  *(_QWORD *)(v32 + 72) = v33;
  *(_OWORD *)(v32 + 80) = v34;
LABEL_11:
  OUTLINED_FUNCTION_7();
}

void AnnotatedFeatureStore.write(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  _DWORD *v15;
  _DWORD *v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v1;
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - v10;
  v12 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + 16);
  if (v12)
  {
    v19 = a1;
    v13 = static os_log_type_t.debug.getter();
    type metadata accessor for OS_os_log();
    outlined retain of AnnotatedFeatureStore(v3);
    outlined retain of AnnotatedFeatureStore(v3);
    v14 = static OS_os_log.default.getter();
    if (os_log_type_enabled(v14, v13))
    {
      v15 = (_DWORD *)swift_slowAlloc();
      v18 = v5;
      v16 = v15;
      *v15 = 134218240;
      v20 = v12;
      OUTLINED_FUNCTION_11_5();
      *((_WORD *)v16 + 6) = 2048;
      OUTLINED_FUNCTION_6_6();
      v20 = *(unsigned int *)(v3 + 16);
      OUTLINED_FUNCTION_11_5();
      OUTLINED_FUNCTION_6_6();
      _os_log_impl(&dword_21ADEE000, v14, v13, "Writing AnnotatedFeatureStore with %ld elements and %ld blobs", (uint8_t *)v16, 0x16u);
      OUTLINED_FUNCTION_9_6();
    }

    OUTLINED_FUNCTION_6_6();
    OUTLINED_FUNCTION_6_6();
    static _FileUtilities.prepareForWriting(to:isDirectory:)(v19, 1);
    if (!v2)
    {
      OUTLINED_FUNCTION_1_9();
      URL.appendingPathComponent(_:)();
      AnnotatedFeatureStore.writeMetadata(to:)((uint64_t)v11);
      v17 = *(void (**)(char *, uint64_t))(v6 + 8);
      v17(v11, v5);
      OUTLINED_FUNCTION_2_7();
      URL.appendingPathComponent(_:)();
      Data.write(to:options:)();
      v17(v8, v5);
    }
  }
  OUTLINED_FUNCTION_7();
}

uint64_t outlined retain of AnnotatedFeatureStore(uint64_t a1)
{
  outlined copy of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AnnotatedFeatureStore(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t AnnotatedFeatureStore.writeMetadata(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v33 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  v7 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + 88);
  v40 = v10;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v27 = v2;
    v28 = a1;
    v39 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v13 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v30 = *(_QWORD *)(v7 + 72);
    v31 = v7;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v12 = v39;
    do
    {
      v14 = v32;
      v29(v9, v13, v32);
      v15 = v33;
      AnnotatedFeature.feature.getter();
      v16 = v35;
      v36 = MLShapedArray.shape.getter();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v16);
      AnnotatedFeature.annotation.getter();
      v18 = v37;
      v17 = v38;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v12 = v39;
      }
      v19 = *(_QWORD *)(v12 + 16);
      if (v19 >= *(_QWORD *)(v12 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v12 = v39;
      }
      *(_QWORD *)(v12 + 16) = v19 + 1;
      v20 = (_QWORD *)(v12 + 24 * v19);
      v20[4] = v36;
      v20[5] = v18;
      v20[6] = v17;
      v13 += v30;
      --v11;
    }
    while (v11);
    outlined release of [AnnotatedFeature<MLShapedArray<Float>, String>]((uint64_t)&v40);
    v3 = v27;
  }
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v37 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Metadata]);
  lazy protocol witness table accessor for type [Metadata] and conformance <A> [A](&lazy protocol witness table cache variable for type [Metadata] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type Metadata and conformance Metadata, MEMORY[0x24BEE12A0]);
  v21 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = v21;
    v24 = v22;
    swift_bridgeObjectRelease();
    Data.write(to:options:)();
    outlined consume of Data._Representation(v23, v24);
  }
  return swift_release();
}

BOOL static Metadata.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Metadata.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t Metadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x5365727574616566 && a2 == 0xEC00000065706168;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697461746F6E6E61 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t Metadata.CodingKeys.init(intValue:)()
{
  return 2;
}

Swift::Int Metadata.CodingKeys.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t Metadata.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t Metadata.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x697461746F6E6E61;
  else
    return 0x5365727574616566;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Metadata.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Metadata.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Metadata.CodingKeys()
{
  char *v0;

  return Metadata.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Metadata.CodingKeys(uint64_t a1)
{
  char *v1;

  Metadata.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Metadata.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Metadata.CodingKeys()
{
  char *v0;

  return Metadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Metadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Metadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Metadata.CodingKeys()
{
  return Metadata.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Metadata.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = Metadata.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Metadata.CodingKeys()
{
  lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Metadata.CodingKeys()
{
  lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Metadata.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v12 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Metadata.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = a2;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], MEMORY[0x24BEE1770], MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t Metadata.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Metadata.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    v9[7] = 0;
    lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], MEMORY[0x24BEE1798], MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Metadata@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = Metadata.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Metadata(_QWORD *a1)
{
  uint64_t *v1;

  return Metadata.encode(to:)(a1, *v1, v1[1], v1[2]);
}

unint64_t lazy protocol witness table accessor for type Metadata and conformance Metadata()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Metadata and conformance Metadata;
  if (!lazy protocol witness table cache variable for type Metadata and conformance Metadata)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for Metadata, &type metadata for Metadata);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata and conformance Metadata);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Metadata and conformance Metadata;
  if (!lazy protocol witness table cache variable for type Metadata and conformance Metadata)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for Metadata, &type metadata for Metadata);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata and conformance Metadata);
  }
  return result;
}

void lazy protocol witness table accessor for type [Metadata] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!*a1)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Metadata]);
    v7 = a2();
    atomic_store(MEMORY[0x22075B938](a3, v6, &v7), a1);
  }
  OUTLINED_FUNCTION_27_0();
}

uint64_t outlined assign with take of BlobsFile(uint64_t a1, uint64_t a2)
{
  assignWithTake for BlobsFile(a2, a1);
  return a2;
}

uint64_t outlined retain of BlobsFile(uint64_t a1)
{
  outlined copy of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of BlobsFile(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type [Float] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Float] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Float] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    result = MEMORY[0x22075B938](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A]);
  }
  return result;
}

uint64_t destroy for Metadata()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for Metadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Metadata(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for Metadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Metadata(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Metadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Metadata()
{
  return &type metadata for Metadata;
}

unint64_t lazy protocol witness table accessor for type Metadata.CodingKeys and conformance Metadata.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for Metadata.CodingKeys, &unk_24DE1F9D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for Metadata.CodingKeys, &unk_24DE1F9D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for Metadata.CodingKeys, &unk_24DE1F9D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for Metadata.CodingKeys, &unk_24DE1F9D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Metadata.CodingKeys and conformance Metadata.CodingKeys);
  }
  return result;
}

void lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!*a1)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    v7 = a2;
    atomic_store(MEMORY[0x22075B938](a3, v6, &v7), a1);
  }
  OUTLINED_FUNCTION_27_0();
}

uint64_t storeEnumTagSinglePayload for Metadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21AE25B28 + 4 * byte_21AFE88B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21AE25B5C + 4 * byte_21AFE88B0[v4]))();
}

uint64_t sub_21AE25B5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AE25B64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AE25B6CLL);
  return result;
}

uint64_t sub_21AE25B78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AE25B80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21AE25B84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AE25B8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Metadata.CodingKeys()
{
  return &unk_24DE1F9D0;
}

uint64_t OUTLINED_FUNCTION_0_11(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_1_9()
{
  return 0x617461646174656DLL;
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  return 0x7365727574616566;
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  uint64_t v0;

  return outlined consume of Data._Representation(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
}

uint64_t OUTLINED_FUNCTION_6_6()
{
  uint64_t v0;

  return outlined release of AnnotatedFeatureStore(v0);
}

uint64_t OUTLINED_FUNCTION_8_7(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_9_6()
{
  JUMPOUT(0x22075BA10);
}

uint64_t OUTLINED_FUNCTION_10_5()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_11_5()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_12_6()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_13_6(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v13;

  v3 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v4 = v2;
  if (v3)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if ((v3 & 0x8000000000000000) == 0)
    {
      v6 = v13;
      v7 = a1;
      while (1)
      {
        if (a2 == v7)
        {
          __break(1u);
LABEL_17:
          __break(1u);
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
        CMLSequence.value(at:)(v7);
        if (v4)
          goto LABEL_23;
        v8 = CMLFeatureValue.stringValue()();
        v4 = v9;
        if (v9)
          break;
        swift_release();
        v10 = *(_QWORD *)(v13 + 16);
        if (v10 >= *(_QWORD *)(v13 + 24) >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        *(_QWORD *)(v13 + 16) = v10 + 1;
        *(Swift::String *)(v13 + 16 * v10 + 32) = v8;
        if (a2 < a1)
          goto LABEL_17;
        if (v7 >= a2)
          goto LABEL_18;
        if (a2 == ++v7)
        {
          swift_release();
          return v6;
        }
      }
      swift_release();
      goto LABEL_23;
    }
LABEL_20:
    __break(1u);
LABEL_23:
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  swift_release();
  return MEMORY[0x24BEE4AF8];
}

void specialized Collection.count.getter()
{
  uint64_t v0;

  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_3_7(v0, v0, CMLSequence.size.getter);
}

{
  uint64_t v0;

  v0 = CMLDictionary.size.getter();
  OUTLINED_FUNCTION_3_7(v0, v0, CMLDictionary.size.getter);
}

{
  CMLSequence.size.getter();
  OUTLINED_FUNCTION_7_4();
  specialized RandomAccessCollection<>.distance(from:to:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_retain();
  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_2_8(v0, v0);
  v2 = v1;
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_3_1();
  v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_2_8(v3, v3);
  v5 = v4;
  OUTLINED_FUNCTION_4_2();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    v6 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_3_7(v6, v6, CMLSequence.size.getter);
    v8 = v7;
    OUTLINED_FUNCTION_4_2();
    if ((v2 & 0x8000000000000000) == 0 && v8 >= v2)
    {
      OUTLINED_FUNCTION_125();
      return;
    }
  }
  __break(1u);
}

uint64_t specialized Collection.count.getter()
{
  MLDataTable.size.getter();
  OUTLINED_FUNCTION_7_4();
  return specialized RandomAccessCollection<>.distance(from:to:)();
}

void MLDataTable.columnNames.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
  {
    v3 = MEMORY[0x22075BB18](0);
    if (v3)
    {
      v4 = v3;
      type metadata accessor for CMLSequence();
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = v4;
      *(_BYTE *)(v5 + 24) = 1;
      *a1 = v5;
      OUTLINED_FUNCTION_22();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v6 = *(void **)v1;
    OUTLINED_FUNCTION_3_1();
    _DataTable.columnNames.getter(a1);
    outlined consume of Result<_DataTable, Error>(v6, 0);
  }
}

uint64_t MLDataTable.ColumnNames.startIndex.getter()
{
  return 0;
}

uint64_t MLDataTable.ColumnNames.endIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_3_1();
  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_3_7(v0, v0, CMLSequence.size.getter);
  v2 = v1;
  OUTLINED_FUNCTION_4_2();
  return v2;
}

uint64_t MLDataTable.ColumnNames.subscript.getter(uint64_t a1)
{
  uint64_t v1;

  CMLSequence.value(at:)(a1);
  v1 = OUTLINED_FUNCTION_26_4();
  OUTLINED_FUNCTION_4_2();
  return v1;
}

void specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  specialized RandomAccessCollection<>.distance(from:to:)(a1, a2, CMLSequence.size.getter);
}

{
  specialized RandomAccessCollection<>.distance(from:to:)(a1, a2, CMLDictionary.size.getter);
}

void specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_23_5();
  v7 = v6();
  if (v4 < 0 || v7 < v4)
  {
    __break(1u);
  }
  else
  {
    v8 = a3();
    if ((v3 & 0x8000000000000000) == 0 && v8 >= v3)
    {
      OUTLINED_FUNCTION_125();
      return;
    }
  }
  __break(1u);
}

void specialized RandomAccessCollection<>.distance(from:to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_23_5();
  v2 = CMLSequence.size.getter();
  if (v1 < 0 || v2 < v1)
  {
    __break(1u);
  }
  else
  {
    v3 = CMLSequence.size.getter();
    if ((v0 & 0x8000000000000000) == 0 && v3 >= v0)
    {
      OUTLINED_FUNCTION_125();
      return;
    }
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_23_5();
  swift_retain();
  v2 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_3_7(v2, v2, CMLSequence.size.getter);
  v4 = v3;
  OUTLINED_FUNCTION_4_2();
  if (v1 < 0 || v4 < v1)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    v5 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_3_7(v5, v5, CMLSequence.size.getter);
    v7 = v6;
    OUTLINED_FUNCTION_4_2();
    if ((v0 & 0x8000000000000000) == 0 && v7 >= v0)
    {
      OUTLINED_FUNCTION_125();
      return;
    }
  }
  __break(1u);
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  OUTLINED_FUNCTION_23_5();
  result = OUTLINED_FUNCTION_21_5();
  if (v1 < 0 || result < v1)
  {
    __break(1u);
  }
  else
  {
    result = OUTLINED_FUNCTION_21_5();
    if ((v0 & 0x8000000000000000) == 0 && result >= v0)
      return v0 - v1;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance MLDataTable.ColumnNames@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance MLDataTable.ColumnNames(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    swift_retain();
    v3 = CMLSequence.size.getter();
    specialized RandomAccessCollection<>.distance(from:to:)(0, v3, CMLSequence.size.getter);
    v5 = v4;
    result = (uint64_t *)swift_release();
    if ((v1 & 0x8000000000000000) == 0 && v1 < v5)
    {
      *v2 = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance MLDataTable.ColumnNames@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *v3);
  *a3 = result;
  return result;
}

void protocol witness for BidirectionalCollection.distance(from:to:) in conformance MLDataTable.ColumnNames()
{
  specialized RandomAccessCollection<>.distance(from:to:)();
}

void protocol witness for Collection.endIndex.getter in conformance MLDataTable.ColumnNames(uint64_t *a1@<X8>)
{
  *a1 = MLDataTable.ColumnNames.endIndex.getter();
  OUTLINED_FUNCTION_22();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MLDataTable.ColumnNames(uint64_t *a1, uint64_t *a2))()
{
  uint64_t v3;
  uint64_t v4;

  v3 = MLDataTable.ColumnNames.subscript.getter(*a2);
  a1[1] = v4;
  a1[2] = v4;
  *a1 = v3;
  return protocol witness for Collection.subscript.read in conformance MLDataTable.ColumnNames;
}

uint64_t protocol witness for Collection.subscript.read in conformance MLDataTable.ColumnNames()
{
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataTable.ColumnNames(_QWORD *a1)
{
  _QWORD *v1;

  return specialized Collection<>.subscript.getter(*a1, a1[1], *v1);
}

uint64_t protocol witness for Collection.indices.getter in conformance MLDataTable.ColumnNames@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = specialized RandomAccessCollection<>.indices.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance MLDataTable.ColumnNames()
{
  _QWORD *v0;

  return specialized Collection.isEmpty.getter(*v0);
}

void protocol witness for Collection.count.getter in conformance MLDataTable.ColumnNames()
{
  specialized Collection.count.getter();
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance MLDataTable.ColumnNames(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance MLDataTable.ColumnNames(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  char v6;

  *(_QWORD *)a4 = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(_BYTE *)(a4 + 8) = v6 & 1;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.ColumnNames(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < a2 || a3 < result)
    __break(1u);
  return result;
}

{
  BOOL v3;
  BOOL v4;

  if (result >= a2)
  {
    v4 = __OFSUB__(result, a3);
    v3 = result - a3 < 0;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  if (v3 == v4)
    __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t result, int a2, char a3, __int128 *a4)
{
  uint64_t v6;
  __int128 v7;
  char v8;
  _BYTE v9[24];
  __int128 v10;
  char v11;
  _BYTE v12[24];
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;

  if ((a3 & 1) != 0)
    goto LABEL_13;
  v6 = result;
  v10 = *a4;
  v11 = *((_BYTE *)a4 + 16);
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v10, (uint64_t)v12);
  result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v12, (uint64_t)&v13);
  if ((v15 & 1) != 0)
    goto LABEL_13;
  if (v14 != a2)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v13 > v6)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v7 = *(__int128 *)((char *)a4 + 24);
  v8 = *((_BYTE *)a4 + 40);
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v7, (uint64_t)v9);
  result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v9, (uint64_t)&v16);
  if ((v18 & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v17 != a2)
    goto LABEL_11;
  if (v16 < v6)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

void protocol witness for Collection.index(after:) in conformance MLDataTable.ColumnNames(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = specialized RandomAccessCollection<>.index(after:)(*a1, *v2);
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance MLDataTable.ColumnNames(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  swift_retain();
  v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_3_7(v3, v3, CMLSequence.size.getter);
  v5 = v4;
  result = swift_release();
  if (v2 < 0 || v2 >= v5)
    __break(1u);
  else
    *a1 = v2 + 1;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance MLDataTable.ColumnNames(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MLDataTable.ColumnNames()
{
  _QWORD *v0;

  return specialized Collection.underestimatedCount.getter(*v0);
}

void protocol witness for Sequence._copyToContiguousArray() in conformance MLDataTable.ColumnNames()
{
  uint64_t *v0;

  specialized Collection._copyToContiguousArray()(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataTable.ColumnNames(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance MLDataTable.ColumnNames()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t static MLDataTable.ColumnNames.== infix(_:_:)()
{
  return specialized Sequence<>.elementsEqual<A>(_:)();
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t result;
  Swift::String v27;

  swift_retain();
  OUTLINED_FUNCTION_122();
  v0 = 0;
  v1 = 0;
  while (1)
  {
    swift_retain();
    CMLSequence.size.getter();
    v2 = OUTLINED_FUNCTION_7_4();
    specialized RandomAccessCollection<>.distance(from:to:)(v2, v3, CMLSequence.size.getter);
    v5 = v4;
    OUTLINED_FUNCTION_13_7();
    if (v1 == v5)
    {
      v6 = 0;
      v7 = 0;
    }
    else
    {
      CMLSequence.value(at:)(v1);
      v6 = OUTLINED_FUNCTION_26_4();
      v7 = v8;
      OUTLINED_FUNCTION_4_2();
      swift_retain();
      CMLSequence.size.getter();
      v9 = OUTLINED_FUNCTION_7_4();
      specialized RandomAccessCollection<>.distance(from:to:)(v9, v10, CMLSequence.size.getter);
      v12 = v11;
      OUTLINED_FUNCTION_13_7();
      if (v1 < 0 || v1 >= v12)
        goto LABEL_28;
      ++v1;
    }
    OUTLINED_FUNCTION_122();
    CMLSequence.size.getter();
    v13 = OUTLINED_FUNCTION_7_4();
    specialized RandomAccessCollection<>.distance(from:to:)(v13, v14, CMLSequence.size.getter);
    v16 = v15;
    OUTLINED_FUNCTION_217();
    if (v0 == v16)
    {
      if (v7)
      {
LABEL_20:
        OUTLINED_FUNCTION_13_7();
        OUTLINED_FUNCTION_217();
      }
      else
      {
        v19 = 0;
LABEL_22:
        OUTLINED_FUNCTION_13_7();
        OUTLINED_FUNCTION_217();
        if (!v19)
          return 1;
      }
      swift_bridgeObjectRelease();
      return 0;
    }
    CMLSequence.value(at:)(v0);
    v17 = OUTLINED_FUNCTION_26_4();
    v19 = v18;
    OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_122();
    CMLSequence.size.getter();
    v20 = OUTLINED_FUNCTION_7_4();
    specialized RandomAccessCollection<>.distance(from:to:)(v20, v21, CMLSequence.size.getter);
    v23 = v22;
    OUTLINED_FUNCTION_217();
    if (v0 >= v23)
      break;
    if (!v7)
      goto LABEL_22;
    if (!v19)
      goto LABEL_20;
    if (v6 == v17 && v7 == v19)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        OUTLINED_FUNCTION_13_7();
        OUTLINED_FUNCTION_217();
        return 0;
      }
    }
    ++v0;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  OUTLINED_FUNCTION_120();
  __break(1u);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_5_9();
  OUTLINED_FUNCTION_27_6();
  OUTLINED_FUNCTION_6_7();
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_22_3(v27);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_14_6();
  OUTLINED_FUNCTION_20_4();
  result = OUTLINED_FUNCTION_121();
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;

  v2 = 0;
  v3 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(result + 16);
  v6 = result + 32;
  while (1)
  {
    if (v3 == v4)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a2 + 16);
      goto LABEL_6;
    }
    if (v3 >= v4)
      break;
    v7 = *(_QWORD *)(a2 + 32 + 8 * v3);
    v8 = v3 + 1;
LABEL_6:
    result = v2 == v5;
    if (v2 == v5)
    {
      v9 = 0;
      v10 = v5;
    }
    else
    {
      if (v2 >= v5)
        goto LABEL_18;
      v9 = *(_QWORD *)(v6 + 8 * v2);
      v10 = v2 + 1;
    }
    if (v3 == v4)
      return result;
    v11 = v2 != v5 && v7 == v9;
    v2 = v10;
    v3 = v8;
    if (!v11)
      return 0;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void MLDataTable.ColumnNames.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_3_1();
  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_2_8(v0, v0);
  v2 = v1;
  OUTLINED_FUNCTION_3_1();
  v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_2_8(v3, v3);
  v5 = v4;
  OUTLINED_FUNCTION_4_2();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    v6 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_3_7(v6, v6, CMLSequence.size.getter);
    v8 = v7;
    OUTLINED_FUNCTION_110();
    if ((v2 & 0x8000000000000000) == 0 && v8 >= v2)
    {
      OUTLINED_FUNCTION_3_1();
      OUTLINED_FUNCTION_8_8();
      MEMORY[0x22075AAA4]();
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_27_0();
      return;
    }
  }
  __break(1u);
}

void MLDataTable.ColumnNames.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_18_4();
  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_2_8(v0, v0);
  v2 = v1;
  OUTLINED_FUNCTION_3_1();
  v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_2_8(v3, v3);
  v5 = v4;
  OUTLINED_FUNCTION_4_2();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    v6 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_3_7(v6, v6, CMLSequence.size.getter);
    v8 = v7;
    OUTLINED_FUNCTION_110();
    if ((v2 & 0x8000000000000000) == 0 && v8 >= v2)
    {
      OUTLINED_FUNCTION_3_1();
      OUTLINED_FUNCTION_8_8();
      MEMORY[0x22075AAA4]();
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_27_0();
      return;
    }
  }
  __break(1u);
}

unint64_t MLDataTable.ColumnNames.playgroundDescription.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_18_4();
  v2 = CMLSequence.size.getter();
  specialized RandomAccessCollection<>.distance(from:to:)(0, v2, CMLSequence.size.getter);
  v4 = v3;
  OUTLINED_FUNCTION_3_1();
  CMLSequence.size.getter();
  v5 = OUTLINED_FUNCTION_7_4();
  specialized RandomAccessCollection<>.distance(from:to:)(v5, v6, CMLSequence.size.getter);
  v8 = v7;
  result = OUTLINED_FUNCTION_4_2();
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    v10 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_3_7(v10, v10, CMLSequence.size.getter);
    v12 = v11;
    result = OUTLINED_FUNCTION_110();
    if ((v4 & 0x8000000000000000) == 0 && v12 >= v4)
    {
      OUTLINED_FUNCTION_3_1();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(0, v4);
      v13 = MEMORY[0x22075AAA4]();
      v15 = v14;
      OUTLINED_FUNCTION_4_2();
      swift_bridgeObjectRelease();
      v16 = objc_allocWithZone(MEMORY[0x24BDD1458]);
      @nonobjc NSAttributedString.init(string:attributes:)(v13, v15, 0);
      v18 = v17;
      result = type metadata accessor for NSAttributedString();
      a1[3] = result;
      *a1 = v18;
      return result;
    }
  }
  __break(1u);
  return result;
}

void @nonobjc NSAttributedString.init(string:attributes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  NSDictionary v6;

  v5 = (void *)MEMORY[0x22075A8AC]();
  swift_bridgeObjectRelease();
  if (a3)
  {
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    v6.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.isa = 0;
  }
  objc_msgSend(v3, sel_initWithString_attributes_, v5, v6.super.isa);

  OUTLINED_FUNCTION_125();
}

unint64_t lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.ColumnNames, &type metadata for MLDataTable.ColumnNames);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.ColumnNames, &type metadata for MLDataTable.ColumnNames);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.ColumnNames, &type metadata for MLDataTable.ColumnNames);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames;
  if (!lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.ColumnNames, &type metadata for MLDataTable.ColumnNames);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames);
  }
  return result;
}

void associated type witness table accessor for Collection.Indices : RandomAccessCollection in MLDataTable.ColumnNames()
{
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD0]);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

void associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in MLDataTable.ColumnNames()
{
  lazy protocol witness table accessor for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames, MEMORY[0x24BEE4230]);
}

void associated type witness table accessor for Collection.Indices : BidirectionalCollection in MLDataTable.ColumnNames()
{
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BA8]);
}

void associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in MLDataTable.ColumnNames()
{
  lazy protocol witness table accessor for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type MLDataTable.ColumnNames and conformance MLDataTable.ColumnNames, MEMORY[0x24BEE4218]);
}

void lazy protocol witness table accessor for type Slice<MLDataTable.ColumnNames> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!*a1)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<MLDataTable.ColumnNames>);
    v7 = a2();
    atomic_store(MEMORY[0x22075B938](a3, v6, &v7), a1);
  }
  OUTLINED_FUNCTION_27_0();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in MLDataTable.ColumnNames()
{
  return MEMORY[0x24BEE1780];
}

void associated type witness table accessor for Collection.Indices : Collection in MLDataTable.ColumnNames()
{
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD8]);
}

void lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  if (!*a1)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v5 = lazy protocol witness table accessor for type Int and conformance Int();
    v6[0] = MEMORY[0x24BEE17A8];
    v6[1] = v5;
    atomic_store(MEMORY[0x22075B938](a2, v4, v6), a1);
  }
  OUTLINED_FUNCTION_27_0();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type Slice<MLDataTable.ColumnNames> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MLDataTable.ColumnNames>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataTable.ColumnNames()
{
  return lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<MLDataTable.ColumnNames> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<MLDataTable.ColumnNames>, MEMORY[0x24BEE2C18]);
}

ValueMetadata *type metadata accessor for MLDataTable.ColumnNames()
{
  return &type metadata for MLDataTable.ColumnNames;
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey;
  if (!lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey)
  {
    type metadata accessor for NSAttributedStringKey(255);
    result = MEMORY[0x22075B938](&protocol conformance descriptor for NSAttributedStringKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey);
  }
  return result;
}

void OUTLINED_FUNCTION_2_8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(void);

  specialized RandomAccessCollection<>.distance(from:to:)(0, a2, v2);
}

void OUTLINED_FUNCTION_3_7(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  specialized RandomAccessCollection<>.distance(from:to:)(0, a2, a3);
}

void OUTLINED_FUNCTION_5_9()
{
  _StringGuts.grow(_:)(37);
}

uint64_t OUTLINED_FUNCTION_7_4()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_8_8()
{
  uint64_t v0;

  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg565_s8CreateML11MLDataTableV11ColumnNamesV11descriptionSSvgSSSiXEfU_0F2ML0hI0V0kL0VTf1cn_n(0, v0);
}

uint64_t OUTLINED_FUNCTION_13_7()
{
  return swift_release();
}

void OUTLINED_FUNCTION_14_6()
{
  Swift::String v0;

  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_18_4()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_21_5()
{
  return MLDataTable.size.getter();
}

void OUTLINED_FUNCTION_22_3(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_26_4()
{
  return CMLFeatureValue.stringValue()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_27_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for MLHandActionClassifier.PersistentParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    v5 = (char *)&loc_21AE272CC + 4 * byte_21AFE8CF0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for MLHandActionClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v5 = type metadata accessor for URL();
      v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v6(a1, v5);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v6(a1 + *(int *)(v7 + 48), v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 1u:
    case 2u:
      v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 4u:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 5u:
      v8 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 6u:
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v10 = a1 + *(int *)(a2 + 20);
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
        v13 = type metadata accessor for URL();
        v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
        v14(v10, v13);
        v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v14(v10 + *(int *)(v15 + 48), v13);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      case 1:
      case 2:
        v12 = type metadata accessor for URL();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)v10, *(_BYTE *)(v10 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      case 4:
        outlined consume of Result<_DataTable, Error>(*(id *)v10, *(_BYTE *)(v10 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      case 5:
        v16 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v10, v16);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      case 6:
        v17 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v10, v17);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_18:
        result = swift_bridgeObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

void initializeWithCopy for MLHandActionClassifier.PersistentParameters()
{
  char *v0;

  type metadata accessor for MLHandActionClassifier.DataSource();
  v0 = (char *)sub_21AE27E84 + 4 * byte_21AFE8D0C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AE27E84()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for URL();
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16);
  v4(v0, v1, v3);
  v5 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
  v4(v0 + v5[12], v1 + v5[12], v3);
  v6 = v5[16];
  v7 = (_QWORD *)(v0 + v6);
  v8 = (_QWORD *)(v1 + v6);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = v5[20];
  v11 = (_QWORD *)(v0 + v10);
  v12 = (_QWORD *)(v1 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = v5[24];
  v15 = (_QWORD *)(v0 + v14);
  v16 = (_QWORD *)(v1 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v5[28];
  v19 = (_QWORD *)(v0 + v18);
  v20 = (_QWORD *)(v1 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  v22 = v2[5];
  v23 = (void *)(v0 + v22);
  v24 = (const void *)(v1 + v22);
  v25 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v26 = (char *)&loc_21AE281F8 + 4 * byte_21AFE8D13[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  v27 = v2[7];
  *(_QWORD *)(v0 + v2[6]) = *(_QWORD *)(v1 + v2[6]);
  *(_QWORD *)(v0 + v27) = *(_QWORD *)(v1 + v27);
  v28 = v2[9];
  *(_QWORD *)(v0 + v2[8]) = *(_QWORD *)(v1 + v2[8]);
  *(_QWORD *)(v0 + v28) = *(_QWORD *)(v1 + v28);
  *(_QWORD *)(v0 + v2[10]) = *(_QWORD *)(v1 + v2[10]);
  return v0;
}

double assignWithCopy for MLHandActionClassifier.PersistentParameters(uint64_t a1, uint64_t a2, int *a3)
{
  char *v3;
  uint64_t v4;
  double result;

  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource(a1, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
    type metadata accessor for MLHandActionClassifier.DataSource();
    v3 = (char *)&loc_21AE2860C + 4 * byte_21AFE8D1A[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v4 = a3[9];
  result = *(double *)(a2 + v4);
  *(double *)(a1 + v4) = result;
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return result;
}

void outlined destroy of MLHandActionClassifier.DataSource(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  OUTLINED_FUNCTION_15(*(_QWORD *)(v2 - 8));
  OUTLINED_FUNCTION_22();
}

char *initializeWithTake for MLHandActionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for MLHandActionClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7 = type metadata accessor for URL();
      v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      v8(&a1[v9[12]], &a2[v9[12]], v7);
      *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
      *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
      *(_OWORD *)&a1[v9[24]] = *(_OWORD *)&a2[v9[24]];
      *(_OWORD *)&a1[v9[28]] = *(_OWORD *)&a2[v9[28]];
      goto LABEL_7;
    case 1u:
    case 2u:
      v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      goto LABEL_7;
    case 5u:
      v11 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
      *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
      *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
      goto LABEL_7;
    case 6u:
      v13 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
      *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
      *(_OWORD *)&a1[v14[16]] = *(_OWORD *)&a2[v14[16]];
      *(_OWORD *)&a1[v14[20]] = *(_OWORD *)&a2[v14[20]];
      *(_OWORD *)&a1[v14[24]] = *(_OWORD *)&a2[v14[24]];
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v15 = a3[5];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v19 = type metadata accessor for URL();
        v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
        v20(v16, v17, v19);
        v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v20(&v16[v21[12]], &v17[v21[12]], v19);
        *(_OWORD *)&v16[v21[16]] = *(_OWORD *)&v17[v21[16]];
        *(_OWORD *)&v16[v21[20]] = *(_OWORD *)&v17[v21[20]];
        *(_OWORD *)&v16[v21[24]] = *(_OWORD *)&v17[v21[24]];
        *(_OWORD *)&v16[v21[28]] = *(_OWORD *)&v17[v21[28]];
        goto LABEL_16;
      case 1u:
      case 2u:
        v22 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v16, v17, v22);
        goto LABEL_16;
      case 5u:
        v23 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v16, v17, v23);
        v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v16[v24[12]] = *(_OWORD *)&v17[v24[12]];
        *(_OWORD *)&v16[v24[16]] = *(_OWORD *)&v17[v24[16]];
        *(_OWORD *)&v16[v24[20]] = *(_OWORD *)&v17[v24[20]];
        goto LABEL_16;
      case 6u:
        v25 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v16, v17, v25);
        v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&v16[v26[12]] = *(_OWORD *)&v17[v26[12]];
        *(_OWORD *)&v16[v26[16]] = *(_OWORD *)&v17[v26[16]];
        *(_OWORD *)&v16[v26[20]] = *(_OWORD *)&v17[v26[20]];
        *(_OWORD *)&v16[v26[24]] = *(_OWORD *)&v17[v26[24]];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v27 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  v28 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v28] = *(_QWORD *)&a2[v28];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  return a1;
}

char *assignWithTake for MLHandActionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
    v6 = type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for URL();
        v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
        v8(a1, a2, v7);
        v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(&a1[v9[12]], &a2[v9[12]], v7);
        *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
        *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
        *(_OWORD *)&a1[v9[24]] = *(_OWORD *)&a2[v9[24]];
        *(_OWORD *)&a1[v9[28]] = *(_OWORD *)&a2[v9[28]];
        goto LABEL_8;
      case 1u:
      case 2u:
        v10 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        goto LABEL_8;
      case 5u:
        v11 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
        *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
        *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
        goto LABEL_8;
      case 6u:
        v13 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
        *(_OWORD *)&a1[v14[16]] = *(_OWORD *)&a2[v14[16]];
        *(_OWORD *)&a1[v14[20]] = *(_OWORD *)&a2[v14[20]];
        *(_OWORD *)&a1[v14[24]] = *(_OWORD *)&a2[v14[24]];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    v15 = a3[5];
    v16 = &a1[v15];
    v17 = &a2[v15];
    outlined destroy of MLHandActionClassifier.DataSource((uint64_t)&a1[v15], type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    v18 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v19 = type metadata accessor for URL();
          v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
          v20(v16, v17, v19);
          v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v20(&v16[v21[12]], &v17[v21[12]], v19);
          *(_OWORD *)&v16[v21[16]] = *(_OWORD *)&v17[v21[16]];
          *(_OWORD *)&v16[v21[20]] = *(_OWORD *)&v17[v21[20]];
          *(_OWORD *)&v16[v21[24]] = *(_OWORD *)&v17[v21[24]];
          *(_OWORD *)&v16[v21[28]] = *(_OWORD *)&v17[v21[28]];
          goto LABEL_17;
        case 1u:
        case 2u:
          v22 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v16, v17, v22);
          goto LABEL_17;
        case 5u:
          v23 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v16, v17, v23);
          v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v16[v24[12]] = *(_OWORD *)&v17[v24[12]];
          *(_OWORD *)&v16[v24[16]] = *(_OWORD *)&v17[v24[16]];
          *(_OWORD *)&v16[v24[20]] = *(_OWORD *)&v17[v24[20]];
          goto LABEL_17;
        case 6u:
          v25 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v16, v17, v25);
          v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&v16[v26[12]] = *(_OWORD *)&v17[v26[12]];
          *(_OWORD *)&v16[v26[16]] = *(_OWORD *)&v17[v26[16]];
          *(_OWORD *)&v16[v26[20]] = *(_OWORD *)&v17[v26[20]];
          *(_OWORD *)&v16[v26[24]] = *(_OWORD *)&v17[v26[24]];
LABEL_17:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  v27 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  v28 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v28] = *(_QWORD *)&a2[v28];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.PersistentParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE297B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = OUTLINED_FUNCTION_31_5();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = OUTLINED_FUNCTION_59_2();
    v8 = a1 + *(int *)(a3 + 20);
  }
  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.PersistentParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE29820(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_31_5();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = OUTLINED_FUNCTION_59_2();
    v10 = a1 + *(int *)(a4 + 20);
  }
  return __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
}

uint64_t type metadata accessor for MLHandActionClassifier.PersistentParameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLHandActionClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLHandActionClassifier.PersistentParameters)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MLHandActionClassifier.PersistentParameters()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MLHandActionClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void MLHandActionClassifier.PersistentParameters.init(sessionDirectory:)(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  Class isa;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n;
  char v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  void (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  int *v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  _BYTE v153[7];
  _BYTE v154[7];
  _BYTE v155[7];
  _BYTE v156[7];
  __int128 v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  _BYTE v164[7];
  uint64_t v165;
  unint64_t v166;
  char v167;
  _BYTE v168[7];
  void *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  _BYTE v175[7];
  uint64_t v176;
  uint64_t v177;
  char v178;
  __int128 v179;
  uint64_t v180;
  _BYTE v181[32];
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.ModelParameters.ValidationData?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v139 = v5;
  v141 = OUTLINED_FUNCTION_83_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v134 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DataSource?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v140 = v9;
  OUTLINED_FUNCTION_118();
  v143 = type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  v138 = v11;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v12);
  v135 = (uint64_t)&v121 - v13;
  OUTLINED_FUNCTION_118();
  v14 = type metadata accessor for DataFrame();
  v136 = *(_QWORD *)(v14 - 8);
  v137 = v14;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_64();
  v145 = v16;
  v151 = OUTLINED_FUNCTION_84_1();
  v149 = *(_QWORD *)(v151 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_208();
  v142 = v18;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v19);
  v144 = (uint64_t)&v121 - v20;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v21);
  v147 = (char *)&v121 - v22;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v121 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v121 - v27;
  v29 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters();
  v146 = v29[6];
  *(_QWORD *)(a2 + v146) = 32;
  v30 = v29[7];
  *(_QWORD *)(a2 + v30) = 80;
  v31 = (_QWORD *)v29[8];
  *(_QWORD *)((char *)v31 + a2) = 30;
  v32 = v29[9];
  v148 = a2;
  *(_QWORD *)(a2 + v32) = 0x403E000000000000;
  OUTLINED_FUNCTION_11_4();
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_38_3();
  OUTLINED_FUNCTION_27_2();
  v33 = a1;
  URL.appendingPathComponent(_:)();
  v34 = v150;
  v35 = Data.init(contentsOf:options:)();
  v150 = v34;
  if (v34)
  {
    v37 = *(void (**)(char *, uint64_t))(v149 + 8);
    v38 = v151;
    v37(v33, v151);
    v37(v25, v38);
    v39 = (uint64_t)v28;
    v40 = v38;
LABEL_25:
    v37((char *)v39, v40);
    return;
  }
  v129 = v31;
  v130 = v30;
  v127 = v32;
  v128 = v29;
  v132 = v28;
  v133 = a1;
  v42 = v148;
  v41 = v149;
  v43 = *(void (**)(char *, uint64_t))(v149 + 8);
  v44 = v35;
  v45 = v36;
  v46 = v151;
  v43(v25, v151);
  v47 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v157 = 0;
  v49 = objc_msgSend(v47, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v157);

  v50 = (id)v157;
  if (!v49)
  {
    v62 = v50;
    _convertNSErrorToError(_:)();

    swift_willThrow(v63);
    outlined consume of Data._Representation(v44, v45);
    v43(v133, v46);
    v64 = (uint64_t)v132;
    v65 = v46;
LABEL_21:
    v43((char *)v64, v65);
    return;
  }
  v131 = v44;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v181, (uint64_t)&v157);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_197();
    *v66 = 0xD000000000000037;
    v66[1] = v67;
    OUTLINED_FUNCTION_5_8(v68, (uint64_t)v66);
    OUTLINED_FUNCTION_15_6();
    v43(v133, v46);
    v64 = OUTLINED_FUNCTION_45_4();
    goto LABEL_21;
  }
  v37 = v43;
  v52 = v179;
  OUTLINED_FUNCTION_34_5(0x69735F6863746162, 0xEA0000000000657ALL, &v157);
  if (!v159)
    goto LABEL_22;
  if ((OUTLINED_FUNCTION_11_6() & 1) == 0)
  {
LABEL_23:
    OUTLINED_FUNCTION_10_3();
    goto LABEL_24;
  }
  v126 = (_QWORD *)v179;
  OUTLINED_FUNCTION_34_5(0x726574695F78616DLL, 0xEE00736E6F697461, &v157);
  if (!v159)
  {
LABEL_22:
    v69 = OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_71_3(v69, &demangling cache variable for type metadata for Any?);
LABEL_24:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_38_3();
    *v71 = v70 + 8;
    v71[1] = 0x800000021AFF28F0;
    OUTLINED_FUNCTION_5_8(v72, (uint64_t)v71);
    OUTLINED_FUNCTION_15_6();
    v37(v133, v46);
    v39 = OUTLINED_FUNCTION_45_4();
    goto LABEL_25;
  }
  if ((OUTLINED_FUNCTION_11_6() & 1) == 0)
    goto LABEL_23;
  v125 = (_QWORD *)v179;
  OUTLINED_FUNCTION_34_5(0x6D6172665F6D756ELL, 0xEA00000000007365, &v157);
  if (!v159)
    goto LABEL_22;
  if ((OUTLINED_FUNCTION_11_6() & 1) == 0)
    goto LABEL_23;
  v124 = (_QWORD *)v179;
  OUTLINED_FUNCTION_38_3();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_34_5(v53, v54, &v157);
  if (!v159)
    goto LABEL_22;
  if ((OUTLINED_FUNCTION_11_6() & 1) == 0)
    goto LABEL_23;
  v123 = v179;
  OUTLINED_FUNCTION_34_5(0x7246746567726174, 0xEF65746152656D61, &v157);
  if (!v159)
    goto LABEL_22;
  if ((OUTLINED_FUNCTION_11_6() & 1) == 0)
    goto LABEL_23;
  v122 = v37;
  *(_QWORD *)(v42 + v146) = v126;
  v55 = v179;
  *(_QWORD *)(v42 + v130) = v125;
  *(_QWORD *)((char *)v129 + v42) = v124;
  v37 = (void (*)(char *, uint64_t))v133;
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_34_5(0x676E696E69617274, 0xE800000000000000, &v179);
  v146 = v52;
  v121 = v51;
  if (v180)
  {
    v56 = OUTLINED_FUNCTION_6_8();
    v57 = v46;
    if ((v56 & 1) != 0)
    {
      OUTLINED_FUNCTION_44_4(v142, (uint64_t)v147, v46);
      v58 = v140;
      MLHandActionClassifier.DataSource.init(dictionary:tableFile:)();
      if (__swift_getEnumTagSinglePayload(v58, 1, v143) == 1)
      {
        OUTLINED_FUNCTION_66_3();
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v58, &demangling cache variable for type metadata for MLHandActionClassifier.DataSource?);
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_49_0();
        OUTLINED_FUNCTION_38_3();
        *v60 = v59 - 2;
        v60[1] = 0x800000021AFF29A0;
        OUTLINED_FUNCTION_5_8(v61, (uint64_t)v60);
        OUTLINED_FUNCTION_15_6();
        OUTLINED_FUNCTION_46_4();
        OUTLINED_FUNCTION_64_3((uint64_t)v147);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v181);
        v39 = (uint64_t)v132;
        v40 = v41;
        goto LABEL_25;
      }
      v100 = v58;
      v101 = v135;
      outlined init with take of MLHandPoseClassifier.ModelParameters(v100, v135, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
      v97 = v101;
      v98 = v42;
      v99 = v42;
      goto LABEL_42;
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v179, &demangling cache variable for type metadata for Any?);
    v57 = v46;
  }
  v73 = v144;
  v74 = (uint64_t)v147;
  OUTLINED_FUNCTION_44_4(v144, (uint64_t)v147, v57);
  v152 = 1;
  LOBYTE(v157) = 1;
  *(_DWORD *)((char *)&v157 + 1) = *(_DWORD *)v156;
  DWORD1(v157) = *(_DWORD *)&v156[3];
  *((_QWORD *)&v157 + 1) = 44;
  v158 = 0xE100000000000000;
  v159 = 0;
  v160 = 0xE000000000000000;
  v161 = 92;
  v162 = 0xE100000000000000;
  v163 = 1;
  *(_DWORD *)v164 = *(_DWORD *)v155;
  *(_DWORD *)&v164[3] = *(_DWORD *)&v155[3];
  v165 = 34;
  v166 = 0xE100000000000000;
  v167 = 1;
  *(_DWORD *)v168 = *(_DWORD *)v154;
  *(_DWORD *)&v168[3] = *(_DWORD *)&v154[3];
  v169 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  v170 = 10;
  v171 = 0xE100000000000000;
  v172 = 0;
  v173 = 0;
  v174 = 1;
  *(_DWORD *)v175 = *(_DWORD *)v153;
  *(_DWORD *)&v175[3] = *(_DWORD *)&v153[3];
  v176 = 0;
  v75 = v150;
  MLDataTable.init(contentsOf:options:)(v73, &v157, (uint64_t)&v177);
  if (v75)
  {
    OUTLINED_FUNCTION_15_6();
    OUTLINED_FUNCTION_66_3();
    OUTLINED_FUNCTION_46_4();
    OUTLINED_FUNCTION_64_3(v74);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v181);
    OUTLINED_FUNCTION_64_3((uint64_t)v132);
    return;
  }
  *(_QWORD *)&v157 = v177;
  BYTE8(v157) = v178;
  DataFrame.init(_:)((uint64_t)&v157);
  v76 = DataFrame.columns.getter();
  MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v76);
  swift_bridgeObjectRelease();
  v78 = specialized Sequence<>.contains(_:)(0x7472617473, 0xE500000000000000, MLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n);
  OUTLINED_FUNCTION_10_3();
  if ((v78 & 1) != 0)
    v79 = 0x7472617473;
  else
    v79 = 0;
  v144 = v79;
  v80 = 0xE500000000000000;
  if ((v78 & 1) == 0)
    v80 = 0;
  v140 = v80;
  v81 = DataFrame.columns.getter();
  v82 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11TabularData9AnyColumnVG_SSs5NeverOTg504_s11d75Data0B5FrameV8CreateMLE23validateContainsColumns_7contextySaySSG_SStKFSSAA9fG54Vcfu_33_06ca46402338970f1b3e0a01942d815dAISSTf3nnnpk_nTf1cn_n(v81);
  v150 = 0;
  OUTLINED_FUNCTION_10_3();
  v83 = specialized Sequence<>.contains(_:)(6581861, 0xE300000000000000, v82);
  swift_bridgeObjectRelease();
  if ((v83 & 1) != 0)
    v84 = 6581861;
  else
    v84 = 0;
  v135 = v84;
  if ((v83 & 1) != 0)
    v85 = 0xE300000000000000;
  else
    v85 = 0;
  v130 = v85;
  v86 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
  v87 = v137;
  v88 = v138;
  v124 = (_QWORD *)(v138 + v86[12]);
  v125 = (_QWORD *)(v138 + v86[16]);
  v129 = (_QWORD *)(v138 + v86[20]);
  v126 = (_QWORD *)(v138 + v86[24]);
  v89 = v136;
  v90 = v145;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v136 + 16))(v138, v145, v137);
  v91 = v124;
  *v124 = 0x7461506F65646976;
  v91[1] = 0xE900000000000068;
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v90, v87);
  v92 = v125;
  *v125 = 0x6C6562616CLL;
  v92[1] = 0xE500000000000000;
  v93 = v129;
  v94 = v140;
  *v129 = v144;
  v93[1] = v94;
  v95 = v126;
  v96 = v130;
  *v126 = v135;
  v95[1] = v96;
  swift_storeEnumTagMultiPayload();
  v97 = v88;
  v98 = v42;
  v99 = v42;
LABEL_42:
  outlined init with take of MLHandPoseClassifier.ModelParameters(v97, v99, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
  specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, v146, &v157);
  if (!v159)
  {
    OUTLINED_FUNCTION_71_3(v102, &demangling cache variable for type metadata for Any?);
    goto LABEL_47;
  }
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
  {
LABEL_47:
    v109 = v128;
    swift_storeEnumTagMultiPayload();
LABEL_48:
    *(_QWORD *)(v98 + v109[10]) = v123;
    *(_QWORD *)(v98 + v127) = v55;
    v110 = OUTLINED_FUNCTION_76_0();
    specialized Dictionary.subscript.getter(v110, v111, v146, v112);
    v113 = swift_bridgeObjectRelease();
    if (v159)
    {
      if ((OUTLINED_FUNCTION_6_8() & 1) != 0)
      {
        MLHandActionClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(v179, (char *)&v157);
        if (v157 != 1)
        {
          OUTLINED_FUNCTION_15_6();
          v37 = v122;
          v122(v133, v46);
          v37(v147, v46);
          v39 = OUTLINED_FUNCTION_45_4();
          goto LABEL_25;
        }
      }
    }
    else
    {
      OUTLINED_FUNCTION_71_3(v113, &demangling cache variable for type metadata for Any?);
    }
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_38_3();
    *v115 = v114 - 10;
    OUTLINED_FUNCTION_197();
    v104 = 1;
    goto LABEL_54;
  }
  ((void (*)(uint64_t, char *, uint64_t))v149)(v142, v132, v46);
  v103 = v139;
  MLHandActionClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)();
  if (__swift_getEnumTagSinglePayload(v103, 1, v141) != 1)
  {
    v120 = v134;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v139, v134, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    v109 = v128;
    v98 = v42;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v120, v42 + v128[5], type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    goto LABEL_48;
  }
  OUTLINED_FUNCTION_66_3();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v139, &demangling cache variable for type metadata for MLHandActionClassifier.ModelParameters.ValidationData?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  v104 = 0;
  OUTLINED_FUNCTION_38_3();
  *v105 = v106;
  OUTLINED_FUNCTION_197();
LABEL_54:
  v117 = (uint64_t)v132;
  v116 = v133;
  *(_QWORD *)(v107 + 8) = v108;
  *(_OWORD *)(v107 + 16) = 0u;
  *(_OWORD *)(v107 + 32) = 0u;
  *(_BYTE *)(v107 + 48) = 0;
  swift_willThrow(0.0);
  OUTLINED_FUNCTION_15_6();
  v118 = v116;
  v119 = (void (*)(uint64_t, uint64_t))v122;
  v122(v118, v46);
  v119((uint64_t)v147, v46);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v181);
  v119(v117, v46);
  outlined destroy of MLHandActionClassifier.DataSource(v42, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
  if (v104)
    outlined destroy of MLHandActionClassifier.DataSource(v42 + v128[5], type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
}

void MLHandActionClassifier.DataSource.init(dictionary:tableFile:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  void *v25;
  BOOL v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  const void *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  const void *v75;
  uint64_t v76;
  void *v77;
  char v78;
  void *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  void *v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  void *v102;
  _QWORD *v103;
  void *v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  _QWORD *v108;
  id v109;
  char v110;
  _BYTE v111[7];
  char v112;
  __int128 v113;
  uint64_t v114;
  int v115;
  _BYTE v116[7];
  char v117;
  int v118;
  _BYTE v119[7];
  _BYTE v120[7];
  int v121;
  void *v122;
  _QWORD *v123;

  OUTLINED_FUNCTION_20_3();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = OUTLINED_FUNCTION_78();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_50();
  v10 = v8 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v94 - v12;
  v14 = OUTLINED_FUNCTION_31_5();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_50();
  v18 = v16 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v94 - v20;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_33;
  v22 = OUTLINED_FUNCTION_48_3();
  if ((v23 & 1) == 0)
    goto LABEL_33;
  outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v22, (uint64_t)&v113);
  if ((OUTLINED_FUNCTION_0_12() & 1) == 0)
    goto LABEL_33;
  v107 = v1;
  v108 = v5;
  OUTLINED_FUNCTION_63_4();
  v1 = (uint64_t)v122;
  v5 = v123;
  v26 = v122 == v25 && v123 == v24;
  if (v26 || (OUTLINED_FUNCTION_13_8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_6(1752457584, 0xE400000000000000, &v113);
    v5 = v108;
    v1 = v107;
    if (!v114)
    {
LABEL_30:
      v37 = OUTLINED_FUNCTION_30();
LABEL_31:
      OUTLINED_FUNCTION_16_7(v37, &demangling cache variable for type metadata for Any?);
LABEL_34:
      v38 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
      v39 = v1;
LABEL_35:
      OUTLINED_FUNCTION_12_7(v39, v38);
LABEL_36:
      v36 = 1;
      goto LABEL_37;
    }
    if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
    {
      OUTLINED_FUNCTION_10_6(0x697461746F6E6E61, 0xEF656C69665F6E6FLL, &v113);
      if (v114)
      {
        if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
        {
          v5 = v123;
          v106 = v122;
          OUTLINED_FUNCTION_2_9(0x5F6F65646976, &v113);
          if (v114)
          {
            if ((OUTLINED_FUNCTION_0_12() & 1) == 0)
            {
LABEL_58:
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_80();
              OUTLINED_FUNCTION_30();
              goto LABEL_59;
            }
            v105 = v5;
            v5 = v123;
            v104 = v122;
            OUTLINED_FUNCTION_1_10();
            if (v114)
            {
              v103 = v5;
              if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
              {
                v27 = v122;
                v101 = v123;
                OUTLINED_FUNCTION_1_10();
                if (v114)
                {
                  OUTLINED_FUNCTION_0_12();
                  OUTLINED_FUNCTION_33_3();
                  v98 = v30;
                  if (v26)
                    v31 = 0;
                  else
                    v31 = v29;
                  v97 = v31;
                }
                else
                {
                  OUTLINED_FUNCTION_16_7(v28, &demangling cache variable for type metadata for Any?);
                  v98 = 0;
                  v97 = 0;
                }
                OUTLINED_FUNCTION_1_10();
                v60 = OUTLINED_FUNCTION_30();
                v102 = v27;
                if (v114)
                {
                  OUTLINED_FUNCTION_0_12();
                  OUTLINED_FUNCTION_33_3();
                  v96 = v62;
                  if (v26)
                    v63 = 0;
                  else
                    v63 = v61;
                  v95 = v63;
                }
                else
                {
                  OUTLINED_FUNCTION_16_7(v60, &demangling cache variable for type metadata for Any?);
                  v96 = 0;
                  v95 = 0;
                }
                v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
                v99 = v18 + v64[12];
                v65 = (_QWORD *)(v18 + v64[16]);
                v66 = (_QWORD *)(v18 + v64[20]);
                v5 = (_QWORD *)(v18 + v64[24]);
                v100 = (_QWORD *)(v18 + v64[28]);
                URL.init(fileURLWithPath:)();
                OUTLINED_FUNCTION_80();
                URL.init(fileURLWithPath:)();
                OUTLINED_FUNCTION_80();
                OUTLINED_FUNCTION_12_7(v107, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
                v67 = v103;
                *v65 = v104;
                v65[1] = v67;
                v68 = v101;
                *v66 = v102;
                v66[1] = v68;
                v69 = v97;
                *v5 = v98;
                v5[1] = v69;
                v70 = v100;
                v71 = v95;
                *v100 = v96;
                v70[1] = v71;
                OUTLINED_FUNCTION_53_5();
                v72 = swift_storeEnumTagMultiPayload();
                OUTLINED_FUNCTION_73_1(v72, v73, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
                goto LABEL_80;
              }
              swift_bridgeObjectRelease();
              goto LABEL_58;
            }
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_80();
          v42 = OUTLINED_FUNCTION_30();
          OUTLINED_FUNCTION_16_7(v42, &demangling cache variable for type metadata for Any?);
LABEL_59:
          v46 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
          v47 = v1;
LABEL_60:
          OUTLINED_FUNCTION_12_7(v47, v46);
LABEL_61:
          OUTLINED_FUNCTION_47_4();
          goto LABEL_37;
        }
        OUTLINED_FUNCTION_80();
        goto LABEL_33;
      }
      OUTLINED_FUNCTION_80();
      goto LABEL_30;
    }
LABEL_33:
    OUTLINED_FUNCTION_30();
    goto LABEL_34;
  }
  if (v1 != 0xD000000000000013 || v5 != (_QWORD *)0x800000021AFF28D0)
  {
    OUTLINED_FUNCTION_27_2();
    if ((OUTLINED_FUNCTION_13_8() & 1) == 0)
    {
      v40 = v1 == 0x5F64656C6562616CLL && v5 == (_QWORD *)0xED000073656C6966;
      if (v40 || (OUTLINED_FUNCTION_13_8() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_10_6(1752457584, 0xE400000000000000, &v113);
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_55_4();
        if (v41)
        {
          if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
            goto LABEL_27;
LABEL_47:
          v38 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
          v39 = v3;
          goto LABEL_35;
        }
LABEL_46:
        OUTLINED_FUNCTION_16_7(v32, &demangling cache variable for type metadata for Any?);
        goto LABEL_47;
      }
      if ((v1 != 0xD000000000000016 || v5 != (_QWORD *)0x800000021AFF2890) && (OUTLINED_FUNCTION_13_8() & 1) == 0)
      {
        if (v1 == 0xD000000000000012 && v5 == (_QWORD *)0x800000021AFF2850)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          OUTLINED_FUNCTION_27_2();
          v1 = OUTLINED_FUNCTION_13_8();
          swift_bridgeObjectRelease();
          if ((v1 & 1) == 0)
          {
            OUTLINED_FUNCTION_12_7(v107, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
            OUTLINED_FUNCTION_30();
            goto LABEL_61;
          }
        }
        OUTLINED_FUNCTION_41_1(v10, *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 16));
        v111[0] = 1;
        LOBYTE(v113) = 1;
        *(_DWORD *)((char *)&v113 + 1) = (_DWORD)v109;
        OUTLINED_FUNCTION_19_6(1);
        v115 = v121;
        OUTLINED_FUNCTION_81_3(v74);
        *(_DWORD *)v116 = *(_DWORD *)v120;
        *(_DWORD *)&v116[3] = *(_DWORD *)&v120[3];
        OUTLINED_FUNCTION_75_3((uint64_t)&outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:));
        v117 = v111[0];
        v118 = *(_DWORD *)v119;
        OUTLINED_FUNCTION_79_2(*(int *)&v119[3]);
        MLDataTable.init(contentsOf:options:)(v10, v75, v76);
        OUTLINED_FUNCTION_47_4();
        v77 = v122;
        v78 = (char)v123;
        OUTLINED_FUNCTION_2_9(0x5F6F65646976, &v113);
        if (!v114)
        {
          OUTLINED_FUNCTION_30();
          OUTLINED_FUNCTION_67_3();
          goto LABEL_31;
        }
        if ((OUTLINED_FUNCTION_0_12() & 1) == 0)
        {
          OUTLINED_FUNCTION_30();
          OUTLINED_FUNCTION_67_3();
          v1 = v107;
          goto LABEL_34;
        }
        v79 = v122;
        v80 = v123;
        OUTLINED_FUNCTION_1_10();
        if (v114)
        {
          if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
          {
            v106 = v122;
            v105 = v123;
            OUTLINED_FUNCTION_1_10();
            if (v114)
            {
              OUTLINED_FUNCTION_0_12();
              OUTLINED_FUNCTION_33_3();
              v104 = v83;
              if (v26)
                v5 = 0;
              else
                v5 = v82;
            }
            else
            {
              OUTLINED_FUNCTION_16_7(v81, &demangling cache variable for type metadata for Any?);
              v104 = 0;
              v5 = 0;
            }
            OUTLINED_FUNCTION_1_10();
            OUTLINED_FUNCTION_30();
            v90 = OUTLINED_FUNCTION_12_7(v107, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
            if (v114)
            {
              OUTLINED_FUNCTION_0_12();
              OUTLINED_FUNCTION_33_3();
              if (v26)
                v92 = 0;
            }
            else
            {
              OUTLINED_FUNCTION_16_7(v90, &demangling cache variable for type metadata for Any?);
              v91 = 0;
              v92 = 0;
            }
            *(_QWORD *)v21 = v77;
            v21[8] = v78;
            *((_QWORD *)v21 + 2) = v79;
            *((_QWORD *)v21 + 3) = v80;
            v93 = v105;
            *((_QWORD *)v21 + 4) = v106;
            *((_QWORD *)v21 + 5) = v93;
            *((_QWORD *)v21 + 6) = v104;
            *((_QWORD *)v21 + 7) = v5;
            *((_QWORD *)v21 + 8) = v91;
            *((_QWORD *)v21 + 9) = v92;
            goto LABEL_114;
          }
          OUTLINED_FUNCTION_30();
          OUTLINED_FUNCTION_68_2();
        }
        else
        {
          OUTLINED_FUNCTION_30();
          v89 = OUTLINED_FUNCTION_68_2();
          OUTLINED_FUNCTION_16_7(v89, &demangling cache variable for type metadata for Any?);
        }
        v46 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
        v47 = v107;
        goto LABEL_60;
      }
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_41_1((uint64_t)v13, *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 16));
      v112 = 1;
      LOBYTE(v113) = 1;
      *(_DWORD *)((char *)&v113 + 1) = v121;
      OUTLINED_FUNCTION_19_6(1);
      v115 = *(_DWORD *)v120;
      OUTLINED_FUNCTION_81_3(v43);
      *(_DWORD *)v116 = *(_DWORD *)v119;
      *(_DWORD *)&v116[3] = *(_DWORD *)&v119[3];
      OUTLINED_FUNCTION_75_3((uint64_t)&outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:));
      v117 = v112;
      v118 = *(_DWORD *)v111;
      OUTLINED_FUNCTION_79_2(*(int *)&v111[3]);
      MLDataTable.init(contentsOf:options:)((uint64_t)v13, v44, v45);
      OUTLINED_FUNCTION_47_4();
      v109 = v122;
      v110 = (char)v123;
      OUTLINED_FUNCTION_77_1();
      static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(v48, v49, v50);
      OUTLINED_FUNCTION_27_2();
      OUTLINED_FUNCTION_10_6(v51, v52, &v113);
      if (v114)
      {
        if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
        {
          v54 = v122;
          v53 = v123;
          OUTLINED_FUNCTION_1_10();
          if (v114)
          {
            if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
            {
              v56 = v122;
              v55 = v123;
              OUTLINED_FUNCTION_10_6(0x5F65727574616566, 0xEE006E6D756C6F63, &v113);
              OUTLINED_FUNCTION_30();
              OUTLINED_FUNCTION_12_7(v107, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
              if (v114)
              {
                if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
                {
                  v57 = v122;
                  v58 = v123;
                  v59 = v110;
                  *(_QWORD *)v21 = v109;
                  v21[8] = v59;
                  *((_QWORD *)v21 + 2) = v54;
                  *((_QWORD *)v21 + 3) = v53;
                  *((_QWORD *)v21 + 4) = v56;
                  *((_QWORD *)v21 + 5) = v55;
                  *((_QWORD *)v21 + 6) = v57;
                  *((_QWORD *)v21 + 7) = v58;
LABEL_114:
                  swift_storeEnumTagMultiPayload();
LABEL_80:
                  OUTLINED_FUNCTION_47_4();
                  goto LABEL_28;
                }
                OUTLINED_FUNCTION_15_0();
                OUTLINED_FUNCTION_123();
              }
              else
              {
                OUTLINED_FUNCTION_15_0();
                v88 = OUTLINED_FUNCTION_123();
                OUTLINED_FUNCTION_16_7(v88, &demangling cache variable for type metadata for Any?);
              }
              OUTLINED_FUNCTION_47_4();
LABEL_98:
              outlined consume of Result<_DataTable, Error>(v109, v110);
              goto LABEL_36;
            }
            OUTLINED_FUNCTION_123();
            OUTLINED_FUNCTION_30();
          }
          else
          {
            OUTLINED_FUNCTION_123();
            v87 = OUTLINED_FUNCTION_30();
            OUTLINED_FUNCTION_16_7(v87, &demangling cache variable for type metadata for Any?);
          }
          v85 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
          v86 = v107;
LABEL_97:
          OUTLINED_FUNCTION_12_7(v86, v85);
          goto LABEL_98;
        }
        OUTLINED_FUNCTION_30();
      }
      else
      {
        v84 = OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_16_7(v84, &demangling cache variable for type metadata for Any?);
      }
      v85 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
      v86 = v1;
      goto LABEL_97;
    }
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_6(1752457584, 0xE400000000000000, &v113);
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_55_4();
  if (!v33)
    goto LABEL_46;
  if ((OUTLINED_FUNCTION_0_12() & 1) == 0)
    goto LABEL_47;
LABEL_27:
  OUTLINED_FUNCTION_54_3();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_12_7(v3, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  OUTLINED_FUNCTION_53_5();
  v34 = swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_73_1(v34, v35, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
LABEL_28:
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v21, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
  v36 = 0;
LABEL_37:
  __swift_storeEnumTagSinglePayload((uint64_t)v5, v36, 1, v14);
  OUTLINED_FUNCTION_9_5();
}

void MLHandActionClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  char v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int16 v34;
  char v35;
  uint64_t v36;

  OUTLINED_FUNCTION_20_3();
  v30 = v1;
  v3 = v2;
  v5 = v4;
  v6 = OUTLINED_FUNCTION_78();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  v10 = v9 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.DataSource?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_49();
  v14 = v13 - v12;
  v15 = OUTLINED_FUNCTION_31_5();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_49();
  v19 = v18 - v17;
  v20 = OUTLINED_FUNCTION_59_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_14_5();
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_25;
  v22 = OUTLINED_FUNCTION_48_3();
  if ((v23 & 1) == 0)
    goto LABEL_25;
  outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v22, (uint64_t)&v33);
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
    goto LABEL_25;
  v24 = v31 == 1701736302 && v32 == 0xE400000000000000;
  if (v24 || (OUTLINED_FUNCTION_8_3() & 1) != 0)
  {
    OUTLINED_FUNCTION_12_7(v30, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_123();
    goto LABEL_10;
  }
  v26 = v31 == 0x756F735F61746164 && v32 == 0xEB00000000656372;
  if (!v26 && (OUTLINED_FUNCTION_8_3() & 1) == 0)
  {
    if (v31 == 0x74696C7073 && v32 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = OUTLINED_FUNCTION_8_3();
      OUTLINED_FUNCTION_123();
      if ((v28 & 1) == 0)
      {
LABEL_25:
        OUTLINED_FUNCTION_12_7(v30, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
        OUTLINED_FUNCTION_30();
        goto LABEL_26;
      }
    }
    OUTLINED_FUNCTION_10_6(1635017060, 0xE400000000000000, &v33);
    OUTLINED_FUNCTION_30();
    if (!v36)
      goto LABEL_33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
      goto LABEL_34;
    MLSplitStrategy.init(dictionary:)(v31, (uint64_t)&v33);
    OUTLINED_FUNCTION_12_7(v30, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    if ((v35 & 1) == 0)
    {
      v29 = v34;
      *(_OWORD *)v0 = v33;
      *(_BYTE *)(v0 + 16) = v29;
      *(_BYTE *)(v0 + 17) = HIBYTE(v29) & 1;
      goto LABEL_10;
    }
LABEL_26:
    v25 = 1;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_6(1635017060, 0xE400000000000000, &v33);
  OUTLINED_FUNCTION_30();
  if (!v36)
  {
LABEL_33:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v33, &demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
  {
LABEL_34:
    OUTLINED_FUNCTION_12_7(v30, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    goto LABEL_26;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v30, v6);
  MLHandActionClassifier.DataSource.init(dictionary:tableFile:)();
  OUTLINED_FUNCTION_12_7(v30, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  if (__swift_getEnumTagSinglePayload(v14, 1, v15) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v14, &demangling cache variable for type metadata for MLHandActionClassifier.DataSource?);
    v25 = 1;
    goto LABEL_27;
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters(v14, v19, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
  outlined init with take of MLHandPoseClassifier.ModelParameters(v19, v0, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v0, v5, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  v25 = 0;
LABEL_27:
  __swift_storeEnumTagSinglePayload(v5, v25, 1, v20);
  OUTLINED_FUNCTION_9_5();
}

void MLHandActionClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  if (!*(_QWORD *)(a1 + 16)
    || (v4 = OUTLINED_FUNCTION_76_0(),
        v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, 0xE90000000000006DLL),
        (v6 & 1) == 0))
  {
    v12 = 0u;
    v13 = 0u;
    OUTLINED_FUNCTION_30();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v12);
  OUTLINED_FUNCTION_30();
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_12:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v12, &demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  if ((OUTLINED_FUNCTION_6_8() & 1) != 0)
  {
    if (v10 == 7234407 && v11 == 0xE300000000000000)
    {
      swift_bridgeObjectRelease();
      v9 = 0;
      goto LABEL_14;
    }
    v8 = OUTLINED_FUNCTION_8_3();
    OUTLINED_FUNCTION_30();
    v9 = 0;
    if ((v8 & 1) != 0)
      goto LABEL_14;
  }
LABEL_13:
  v9 = 1;
LABEL_14:
  *a2 = v9;
}

void MLHandActionClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  Class isa;
  id v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  void *v56;
  double v57;
  uint64_t v58;
  void (*v59)(_QWORD);
  unsigned __int8 v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(_QWORD);
  id v94;
  unsigned __int8 v95;
  uint64_t v96;

  v2 = v1;
  v90 = a1;
  v96 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v75 = v4;
  v82 = OUTLINED_FUNCTION_83_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v81 = v6;
  v89 = OUTLINED_FUNCTION_84_1();
  v87 = *(_QWORD *)(v89 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_208();
  v83 = v8;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v9);
  v84 = (char *)&v74 - v10;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v11);
  v86 = (char *)&v74 - v12;
  v13 = OUTLINED_FUNCTION_118();
  v14 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(v13);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_208();
  v85 = v16;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v74 - v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F60;
  *(_QWORD *)(inited + 32) = 0x676E696E69617274;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  MLHandActionClassifier.DataSource.dictionary.getter();
  v22 = v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v93 = (void (*)(_QWORD))v23;
  *(_QWORD *)(inited + 48) = v22;
  *(_QWORD *)(inited + 72) = v23;
  *(_QWORD *)(inited + 80) = 0x69746164696C6176;
  *(_QWORD *)(inited + 88) = 0xEA00000000006E6FLL;
  v24 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters();
  v80 = v2 + v24[5];
  outlined init with copy of MLTrainingSessionParameters(v80, (uint64_t)v19, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  v26 = v24[6];
  v25 = v24[7];
  v27 = *(_QWORD *)(v2 + v26);
  v28 = *(_QWORD *)(v2 + v25);
  v29 = v24[8];
  v30 = *(_QWORD *)(v2 + v29);
  v31 = v24[10];
  v91 = v24[9];
  v92 = v31;
  v32 = *(_QWORD *)(v2 + v31);
  v33 = *(_QWORD *)(v2 + v91);
  *(_QWORD *)&v19[v14[5]] = v27;
  *(_QWORD *)&v19[v14[6]] = v28;
  *(_QWORD *)&v19[v14[7]] = v30;
  *(_QWORD *)&v19[v14[8]] = v32;
  v78 = v14;
  *(_QWORD *)&v19[v14[10]] = v33;
  v34 = MLHandActionClassifier.ModelParameters.ValidationData.dictionary.getter();
  outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v19, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  *(_QWORD *)(inited + 96) = v34;
  v35 = v93;
  *(_QWORD *)(inited + 120) = v93;
  *(_QWORD *)(inited + 128) = 0x69735F6863746162;
  *(_QWORD *)(inited + 136) = 0xEA0000000000657ALL;
  v79 = v26;
  v36 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 144) = *(_QWORD *)(v2 + v26);
  *(_QWORD *)(inited + 168) = v36;
  *(_QWORD *)(inited + 176) = 0x6D6172665F6D756ELL;
  *(_QWORD *)(inited + 184) = 0xEA00000000007365;
  v76 = v25;
  v77 = v29;
  v37 = *(_QWORD *)(v2 + v29);
  v38 = v91;
  *(_QWORD *)(inited + 192) = v37;
  *(_QWORD *)(inited + 216) = v36;
  strcpy((char *)(inited + 224), "max_iterations");
  *(_BYTE *)(inited + 239) = -18;
  v39 = *(_QWORD *)(v2 + v25);
  v40 = v2;
  *(_QWORD *)(inited + 240) = v39;
  *(_QWORD *)(inited + 264) = v36;
  *(_QWORD *)(inited + 272) = 0xD000000000000014;
  *(_QWORD *)(inited + 280) = 0x800000021AFF2830;
  v41 = v92;
  *(_QWORD *)(inited + 288) = *(_QWORD *)(v2 + v92);
  OUTLINED_FUNCTION_65_4();
  *(_QWORD *)(inited + 312) = v43;
  *(_QWORD *)(inited + 320) = v42;
  *(_QWORD *)(inited + 328) = 0xE90000000000006DLL;
  *(_QWORD *)(inited + 336) = MLHandActionClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter();
  *(_QWORD *)(inited + 360) = v35;
  *(_QWORD *)(inited + 368) = 0x7246746567726174;
  *(_QWORD *)(inited + 376) = 0xEF65746152656D61;
  v44 = *(_QWORD *)(v2 + v38);
  *(_QWORD *)(inited + 408) = MEMORY[0x24BEE13C8];
  *(_QWORD *)(inited + 384) = v44;
  OUTLINED_FUNCTION_69_1();
  Dictionary.init(dictionaryLiteral:)();
  v45 = (void *)objc_opt_self();
  OUTLINED_FUNCTION_69_1();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_10_3();
  v94 = 0;
  v47 = objc_msgSend(v45, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, &v94);

  v48 = v94;
  if (v47)
  {
    v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v51 = v50;

    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_80_2();
    v52 = v88;
    Data.write(to:options:)();
    if (v52)
    {
      v53 = OUTLINED_FUNCTION_78_2();
      v54(v53);
      v55 = v49;
LABEL_4:
      outlined consume of Data._Representation(v55, v51);
      return;
    }
    v88 = v49;
    v58 = OUTLINED_FUNCTION_78_2();
    v93 = v59;
    v59(v58);
    MLHandActionClassifier.DataSource.table.getter();
    v60 = v95;
    if (v95 != 255)
    {
      v87 = v51;
      v61 = v94;
      v95 &= 1u;
      v62 = (uint64_t)v84;
      OUTLINED_FUNCTION_80_2();
      MLDataTable.write(to:)();
      OUTLINED_FUNCTION_40_5(v62);
      outlined consume of MLDataTable?(v61, v60);
      v51 = v87;
    }
    v63 = v85;
    outlined init with copy of MLTrainingSessionParameters(v80, v85, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    v64 = v78;
    v65 = *(_QWORD *)(v40 + v76);
    v66 = *(_QWORD *)(v40 + v77);
    v67 = *(_QWORD *)(v40 + v41);
    v68 = *(_QWORD *)(v40 + v38);
    *(_QWORD *)(v63 + v78[5]) = *(_QWORD *)(v40 + v79);
    *(_QWORD *)(v63 + v64[6]) = v65;
    *(_QWORD *)(v63 + v64[7]) = v66;
    *(_QWORD *)(v63 + v64[8]) = v67;
    *(_QWORD *)(v63 + v64[10]) = v68;
    v69 = v81;
    outlined init with copy of MLTrainingSessionParameters(v63, v81, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v70 = v75;
      outlined init with take of MLHandPoseClassifier.ModelParameters(v69, v75, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
      MLHandActionClassifier.DataSource.table.getter();
      outlined destroy of MLHandActionClassifier.DataSource(v70, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
      v71 = v94;
      v72 = v95;
    }
    else
    {
      v71 = 0;
      v72 = 255;
    }
    v73 = v83;
    outlined destroy of MLHandActionClassifier.DataSource(v85, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    if (v72 == 255)
    {
      v55 = v88;
      goto LABEL_4;
    }
    v94 = v71;
    v95 = v72 & 1;
    OUTLINED_FUNCTION_11_4();
    OUTLINED_FUNCTION_80_2();
    MLDataTable.write(to:)();
    OUTLINED_FUNCTION_40_5(v73);
    outlined consume of Data._Representation(v88, v51);
    outlined consume of MLDataTable?(v71, v72);
  }
  else
  {
    v56 = v48;
    _convertNSErrorToError(_:)();

    swift_willThrow(v57);
  }
}

void MLHandActionClassifier.DataSource.dictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char *v7;

  OUTLINED_FUNCTION_20_3();
  v2 = OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_31_5();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_14_5();
  outlined init with copy of MLTrainingSessionParameters(v0, v1, v6);
  v7 = (char *)sub_21AE2BEB4 + 4 * word_21AFE8D44[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AE2BEB4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, unint64_t);
  __n128 *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *boxed_opaque_existential_0;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, unint64_t);

  v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
  v8 = v4 + v7[12];
  v9 = (uint64_t *)(v4 + v7[16]);
  v10 = *v9;
  v0[2] = v9[1];
  v0[3] = v10;
  v11 = (uint64_t *)(v4 + v7[20]);
  v12 = *v11;
  v0[4] = v11[1];
  v0[5] = v12;
  v13 = (uint64_t *)(v4 + v7[24]);
  v14 = *v13;
  v15 = v13[1];
  v16 = (uint64_t *)(v4 + v7[28]);
  v17 = *v16;
  v18 = v16[1];
  *v0 = v14;
  v0[1] = v17;
  v19 = *(void (**)(uint64_t, uint64_t, unint64_t))(v5 + 32);
  v19(v2, v4, v1);
  v19(v3, v8, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v20 = (__n128 *)swift_allocObject();
  OUTLINED_FUNCTION_5_10(v20, (__n128)xmmword_21AFE8D80);
  v21 = MEMORY[0x24BEE0D00];
  OUTLINED_FUNCTION_63_4();
  v22[6] = v23;
  v22[7] = 0xE900000000000079;
  v22[9] = v21;
  v22[10] = 1752457584;
  v22[11] = v24;
  v20[6].n128_u64[0] = URL.path.getter();
  v20[6].n128_u64[1] = v25;
  v20[7].n128_u64[1] = v21;
  v20[8].n128_u64[0] = 0x697461746F6E6E61;
  v20[8].n128_u64[1] = 0xEF656C69665F6E6FLL;
  v20[10].n128_u64[1] = v1;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v20[9]);
  (*(void (**)(uint64_t *, uint64_t, unint64_t))(v5 + 16))(boxed_opaque_existential_0, v3, v1);
  OUTLINED_FUNCTION_62_4();
  v20[11].n128_u64[0] = v27;
  v20[11].n128_u64[1] = 0xEC0000006E6D756CLL;
  v28 = v0[2];
  v20[12].n128_u64[0] = v0[3];
  v20[12].n128_u64[1] = v28;
  OUTLINED_FUNCTION_86_2();
  v20[13].n128_u64[1] = v21;
  v20[14].n128_u64[0] = v29;
  v20[16].n128_u64[1] = v21;
  v30 = v0[5];
  v20[14].n128_u64[1] = v31;
  v20[15].n128_u64[0] = v30;
  v20[15].n128_u64[1] = v0[4];
  *(_QWORD *)(v6 - 96) = Dictionary.init(dictionaryLiteral:)();
  if (v15)
  {
    v0[69] = v21;
    v0[66] = *v0;
    v0[67] = v15;
    OUTLINED_FUNCTION_27_7((uint64_t)"start_time_column");
  }
  if (v18)
  {
    v0[69] = v21;
    v0[66] = v0[1];
    v0[67] = v18;
    OUTLINED_FUNCTION_17_4();
  }
  v32 = *(void (**)(uint64_t, unint64_t))(v5 + 8);
  v32(v3, v1);
  v32(v2, v1);
  return *(_QWORD *)(v6 - 96);
}

uint64_t MLHandActionClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __n128 *inited;
  __n128 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t v24;

  OUTLINED_FUNCTION_31_5();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_59_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v5 = v4 - v3;
  v6 = OUTLINED_FUNCTION_53_5();
  outlined init with copy of MLTrainingSessionParameters(v6, v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = (__n128 *)swift_initStackObject();
    v18 = OUTLINED_FUNCTION_5_10(inited, (__n128)xmmword_21AFE7F70);
    v19 = MEMORY[0x24BEE0D00];
    v18[3].n128_u64[0] = 0x74696C7073;
    v18[3].n128_u64[1] = 0xE500000000000000;
    v18[4].n128_u64[1] = v19;
    v18[5].n128_u64[0] = 1635017060;
    v18[5].n128_u64[1] = v20;
    v21 = MLSplitStrategy.dictionary.getter();
    inited[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    inited[6].n128_u64[0] = v21;
    OUTLINED_FUNCTION_53_5();
    return Dictionary.init(dictionaryLiteral:)();
  }
  if (EnumCaseMultiPayload != 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v22 = (__n128 *)swift_initStackObject();
    v23 = OUTLINED_FUNCTION_5_10(v22, (__n128)xmmword_21AFE7DA0);
    v23[4].n128_u64[1] = MEMORY[0x24BEE0D00];
    v23[3].n128_u64[0] = 1701736302;
    v23[3].n128_u64[1] = v24;
    return Dictionary.init(dictionaryLiteral:)();
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters(v5, v0, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v10 = (__n128 *)swift_initStackObject();
  v11 = OUTLINED_FUNCTION_5_10(v10, (__n128)xmmword_21AFE7F70);
  v12 = MEMORY[0x24BEE0D00];
  v11[3].n128_u64[0] = 0x756F735F61746164;
  v11[3].n128_u64[1] = 0xEB00000000656372;
  v11[4].n128_u64[1] = v12;
  v11[5].n128_u64[0] = 1635017060;
  v11[5].n128_u64[1] = v13;
  MLHandActionClassifier.DataSource.dictionary.getter();
  v15 = v14;
  v10[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v10[6].n128_u64[0] = v15;
  v16 = OUTLINED_FUNCTION_70_3();
  outlined destroy of MLHandActionClassifier.DataSource(v0, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
  return v16;
}

uint64_t MLHandActionClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  *(_OWORD *)(swift_initStackObject() + 16) = xmmword_21AFE7DA0;
  OUTLINED_FUNCTION_65_4();
  v0 = MEMORY[0x24BEE0D00];
  v1[4] = v2;
  v1[5] = 0xE90000000000006DLL;
  v1[9] = v0;
  v1[6] = 7234407;
  v1[7] = 0xE300000000000000;
  return Dictionary.init(dictionaryLiteral:)();
}

void MLHandActionClassifier.DataSource.table.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  char *v10;
  uint64_t v11;

  OUTLINED_FUNCTION_20_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_49();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_118();
  v11 = type metadata accessor for AnyColumn();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_31_5();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_5();
  outlined init with copy of MLTrainingSessionParameters(v0, v0, v9);
  v10 = (char *)sub_21AE2C868 + 4 * byte_21AFE8D52[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21AE2C868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_78();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0, v2);
  v3 = *(_QWORD *)(v1 - 128);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = -1;
  OUTLINED_FUNCTION_9_5();
}

uint64_t OUTLINED_FUNCTION_0_12()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_1_10()
{
  uint64_t v0;
  uint64_t v1;

  specialized Dictionary.subscript.getter(0x6F635F6C6562616CLL, 0xEC0000006E6D756CLL, v0, (_OWORD *)(v1 - 272));
}

void OUTLINED_FUNCTION_2_9(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  specialized Dictionary.subscript.getter(a1 & 0xFFFFFFFFFFFFLL | 0x6F63000000000000, 0xEC0000006E6D756CLL, v2, a2);
}

__n128 *OUTLINED_FUNCTION_5_10(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1684957547;
  result[2].n128_u64[1] = 0xE400000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_8_9()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_10_6(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  specialized Dictionary.subscript.getter(a1, a2, v3, a3);
}

uint64_t OUTLINED_FUNCTION_11_6()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_12_7@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_13_8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_15_6()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data._Representation(*(_QWORD *)(v0 + 80), v1);
}

void OUTLINED_FUNCTION_16_7(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2 - 272, a2);
}

void OUTLINED_FUNCTION_17_4()
{
  uint64_t v0;

  specialized Dictionary.subscript.setter(v0 + 528, 0x656D69745F646E65, 0xEF6E6D756C6F635FLL);
}

void OUTLINED_FUNCTION_19_6(char a1@<W8>)
{
  int v1;
  uint64_t v2;

  *(_DWORD *)(v2 - 268) = v1;
  *(_QWORD *)(v2 - 264) = 44;
  *(_QWORD *)(v2 - 256) = 0xE100000000000000;
  *(_QWORD *)(v2 - 248) = 0;
  *(_QWORD *)(v2 - 240) = 0xE000000000000000;
  *(_QWORD *)(v2 - 232) = 92;
  *(_QWORD *)(v2 - 224) = 0xE100000000000000;
  *(_BYTE *)(v2 - 216) = a1;
}

void OUTLINED_FUNCTION_27_7(uint64_t a1@<X8>)
{
  uint64_t v1;

  specialized Dictionary.subscript.setter(v1 + 528, 0xD000000000000011, (a1 - 32) | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_31_5()
{
  return type metadata accessor for MLHandActionClassifier.DataSource();
}

void OUTLINED_FUNCTION_34_5(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  specialized Dictionary.subscript.getter(a1, a2, v3, a3);
}

uint64_t OUTLINED_FUNCTION_39_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_40_5(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 152))(a1, *(_QWORD *)(v1 + 120));
}

uint64_t OUTLINED_FUNCTION_41_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, *(_QWORD *)(v3 - 328), v2);
}

uint64_t OUTLINED_FUNCTION_42_3(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_44_4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  *(_QWORD *)(v4 + 224) = v3;
  return v3(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_45_4()
{
  uint64_t v0;
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_0(v1 - 128);
  return *(_QWORD *)(v0 + 88);
}

uint64_t OUTLINED_FUNCTION_46_4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 96), v1);
}

unint64_t OUTLINED_FUNCTION_48_3()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
}

uint64_t OUTLINED_FUNCTION_51_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_53_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_54_3()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t OUTLINED_FUNCTION_59_2()
{
  return type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
}

uint64_t OUTLINED_FUNCTION_64_3(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_66_3()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_67_3()
{
  char v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v1, v0);
}

uint64_t OUTLINED_FUNCTION_68_2()
{
  char v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v1, v0);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_69_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_70_3()
{
  return Dictionary.init(dictionaryLiteral:)();
}

void OUTLINED_FUNCTION_71_3(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2 + 304, a2);
}

void OUTLINED_FUNCTION_73_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with take of MLHandPoseClassifier.ModelParameters(v3, v4, a3);
}

void OUTLINED_FUNCTION_75_3(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = a1;
  *(_QWORD *)(v2 - 176) = 10;
  *(_QWORD *)(v2 - 168) = v1;
  *(_QWORD *)(v2 - 160) = 0;
  *(_QWORD *)(v2 - 152) = 0;
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return 0x687469726F676C61;
}

uint64_t OUTLINED_FUNCTION_78_2()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_79_2(int a1@<W8>)
{
  uint64_t v1;

  *(_DWORD *)(v1 - 140) = a1;
  *(_QWORD *)(v1 - 136) = 0;
}

uint64_t OUTLINED_FUNCTION_80_2()
{
  return URL.appendingPathComponent(_:)();
}

void OUTLINED_FUNCTION_81_3(char a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v3 - 212) = v1;
  *(_QWORD *)(v3 - 208) = 34;
  *(_QWORD *)(v3 - 200) = v2;
  *(_BYTE *)(v3 - 192) = a1;
}

uint64_t OUTLINED_FUNCTION_83_2()
{
  return type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
}

uint64_t OUTLINED_FUNCTION_84_1()
{
  return type metadata accessor for URL();
}

void **assignWithCopy for MLDecisionTreeClassifier.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  char v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = *a2;
      v8 = *((_BYTE *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((_BYTE *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLDecisionTreeClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLDecisionTreeClassifier.ModelParameters.ValidationData)
    return swift_getSingletonMetadata();
  return result;
}

void *assignWithTake for MLDecisionTreeClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of MLDecisionTreeClassifier.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLDecisionTreeClassifier.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MLDecisionTreeClassifier.ModelParameters.ValidationData.asTable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v1 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v0, v5 - v4);
  v6 = (char *)&loc_21AE2D354 + *((int *)qword_21AE2D458 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

void sub_21AE2D364()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_BYTE *)(v0 + 8) = v2;
}

uint64_t outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void MLDecisionTreeClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v10 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v1 = type metadata accessor for DataFrame.Slice();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for MLDecisionTreeClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLDecisionTreeClassifier.ModelParameters.ValidationData(v0, v8 - v7);
  v9 = (char *)sub_21AE2D618 + 4 * byte_21AFE8DB0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AE2D618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v6 = *(_BYTE *)(v4 + 16);
  v7 = *(_BYTE *)(v4 + 17);
  *(_OWORD *)(v5 - 112) = *(_OWORD *)v4;
  *(_BYTE *)(v5 - 96) = v6;
  *(_BYTE *)(v5 - 95) = v7;
  DataFrame.randomSplit(strategy:)(v0, v3, v5 - 112);
  v9 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 152);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v10(v1, v3, v8);
  DataFrame.init(_:)();
  outlined init with copy of DataFrame.Slice?(v0, v2);
  if (__swift_getEnumTagSinglePayload(v2, 1, v8) == 1)
  {
    __swift_storeEnumTagSinglePayload(*(_QWORD *)(v5 - 144), 1, 1, *(_QWORD *)(v5 - 136));
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v2, v8);
    v10(*(_QWORD *)(v5 - 168), v1, v8);
    v12 = *(_QWORD *)(v5 - 144);
    DataFrame.init(_:)();
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v11(v1, v8);
    __swift_storeEnumTagSinglePayload(v12, 0, 1, *(_QWORD *)(v5 - 136));
  }
  v11(v3, v8);
  return outlined destroy of DataFrame.Slice?(v0);
}

uint64_t initializeBufferWithCopyOfBuffer for MLHandPoseClassifier.PersistentParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    v5 = (char *)&loc_21AE2D890 + 4 * byte_21AFE8E10[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for MLHandPoseClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for MLHandPoseClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v5 = type metadata accessor for URL();
      v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v6(a1, v5);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v6(a1 + *(int *)(v7 + 48), v5);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 1u:
    case 2u:
      v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 3u:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 4u:
      outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 5u:
      v8 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 6u:
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v10 = a1 + *(int *)(a2 + 20);
  type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
        v13 = type metadata accessor for URL();
        v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
        v14(v10, v13);
        v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v14(v10 + *(int *)(v15 + 48), v13);
        swift_bridgeObjectRelease();
        goto LABEL_18;
      case 1:
      case 2:
        v12 = type metadata accessor for URL();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)v10, *(_BYTE *)(v10 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      case 4:
        outlined consume of Result<_DataTable, Error>(*(id *)v10, *(_BYTE *)(v10 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_18;
      case 5:
        v16 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v10, v16);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      case 6:
        v17 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v10, v17);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        swift_bridgeObjectRelease();
LABEL_18:
        result = swift_bridgeObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

void initializeWithCopy for MLHandPoseClassifier.PersistentParameters()
{
  char *v0;

  type metadata accessor for MLHandPoseClassifier.DataSource();
  v0 = (char *)sub_21AE2E274 + 4 * byte_21AFE8E2C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AE2E274()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v3 = type metadata accessor for URL();
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16);
  v4(v0, v1, v3);
  v5 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
  v4(v0 + v5[12], v1 + v5[12], v3);
  v6 = v5[16];
  v7 = (_QWORD *)(v0 + v6);
  v8 = (_QWORD *)(v1 + v6);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = v5[20];
  v11 = (_QWORD *)(v0 + v10);
  v12 = (_QWORD *)(v1 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  v14 = v2[5];
  v15 = (void *)(v0 + v14);
  v16 = (const void *)(v1 + v14);
  v17 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = (char *)&loc_21AE2E558 + 4 * byte_21AFE8E33[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  v19 = v2[7];
  *(_QWORD *)(v0 + v2[6]) = *(_QWORD *)(v1 + v2[6]);
  *(_QWORD *)(v0 + v19) = *(_QWORD *)(v1 + v19);
  *(_QWORD *)(v0 + v2[8]) = *(_QWORD *)(v1 + v2[8]);
  return v0;
}

uint64_t assignWithCopy for MLHandPoseClassifier.PersistentParameters(uint64_t result, uint64_t a2, int *a3)
{
  char *v3;

  if (result != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource(result, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    type metadata accessor for MLHandPoseClassifier.DataSource();
    v3 = (char *)&loc_21AE2E8C4 + 4 * byte_21AFE8E3A[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  *(_QWORD *)(result + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(result + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(result + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return result;
}

char *initializeWithTake for MLHandPoseClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for MLHandPoseClassifier.DataSource();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7 = type metadata accessor for URL();
      v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
      v8(&a1[v9[12]], &a2[v9[12]], v7);
      *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
      *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
      goto LABEL_7;
    case 1u:
    case 2u:
      v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      goto LABEL_7;
    case 5u:
      v11 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
      *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
      *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
      goto LABEL_7;
    case 6u:
      v13 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
      *(_OWORD *)&a1[*(int *)(v14 + 48)] = *(_OWORD *)&a2[*(int *)(v14 + 48)];
      *(_OWORD *)&a1[*(int *)(v14 + 64)] = *(_OWORD *)&a2[*(int *)(v14 + 64)];
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v15 = a3[5];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v19 = type metadata accessor for URL();
        v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
        v20(v16, v17, v19);
        v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v20(&v16[v21[12]], &v17[v21[12]], v19);
        *(_OWORD *)&v16[v21[16]] = *(_OWORD *)&v17[v21[16]];
        *(_OWORD *)&v16[v21[20]] = *(_OWORD *)&v17[v21[20]];
        goto LABEL_16;
      case 1u:
      case 2u:
        v22 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v16, v17, v22);
        goto LABEL_16;
      case 5u:
        v23 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v16, v17, v23);
        v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&v16[v24[12]] = *(_OWORD *)&v17[v24[12]];
        *(_OWORD *)&v16[v24[16]] = *(_OWORD *)&v17[v24[16]];
        *(_OWORD *)&v16[v24[20]] = *(_OWORD *)&v17[v24[20]];
        goto LABEL_16;
      case 6u:
        v25 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v16, v17, v25);
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&v16[*(int *)(v26 + 48)] = *(_OWORD *)&v17[*(int *)(v26 + 48)];
        *(_OWORD *)&v16[*(int *)(v26 + 64)] = *(_OWORD *)&v17[*(int *)(v26 + 64)];
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v27 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  return a1;
}

char *assignWithTake for MLHandPoseClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  int *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    outlined destroy of MLHandActionClassifier.DataSource((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    v6 = type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for URL();
        v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
        v8(a1, a2, v7);
        v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v8(&a1[v9[12]], &a2[v9[12]], v7);
        *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
        *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
        goto LABEL_8;
      case 1u:
      case 2u:
        v10 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        goto LABEL_8;
      case 5u:
        v11 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
        *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
        *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
        goto LABEL_8;
      case 6u:
        v13 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&a1[*(int *)(v14 + 48)] = *(_OWORD *)&a2[*(int *)(v14 + 48)];
        *(_OWORD *)&a1[*(int *)(v14 + 64)] = *(_OWORD *)&a2[*(int *)(v14 + 64)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    v15 = a3[5];
    v16 = &a1[v15];
    v17 = &a2[v15];
    outlined destroy of MLHandActionClassifier.DataSource((uint64_t)&a1[v15], type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    v18 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v19 = type metadata accessor for URL();
          v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
          v20(v16, v17, v19);
          v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v20(&v16[v21[12]], &v17[v21[12]], v19);
          *(_OWORD *)&v16[v21[16]] = *(_OWORD *)&v17[v21[16]];
          *(_OWORD *)&v16[v21[20]] = *(_OWORD *)&v17[v21[20]];
          goto LABEL_17;
        case 1u:
        case 2u:
          v22 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v16, v17, v22);
          goto LABEL_17;
        case 5u:
          v23 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v16, v17, v23);
          v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&v16[v24[12]] = *(_OWORD *)&v17[v24[12]];
          *(_OWORD *)&v16[v24[16]] = *(_OWORD *)&v17[v24[16]];
          *(_OWORD *)&v16[v24[20]] = *(_OWORD *)&v17[v24[20]];
          goto LABEL_17;
        case 6u:
          v25 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v16, v17, v25);
          v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          *(_OWORD *)&v16[*(int *)(v26 + 48)] = *(_OWORD *)&v17[*(int *)(v26 + 48)];
          *(_OWORD *)&v16[*(int *)(v26 + 64)] = *(_OWORD *)&v17[*(int *)(v26 + 64)];
LABEL_17:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  v27 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandPoseClassifier.PersistentParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE2F868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = OUTLINED_FUNCTION_27_8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = OUTLINED_FUNCTION_51_5();
    v8 = a1 + *(int *)(a3 + 20);
  }
  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for MLHandPoseClassifier.PersistentParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE2F8D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_27_8();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = OUTLINED_FUNCTION_51_5();
    v10 = a1 + *(int *)(a4 + 20);
  }
  return __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
}

uint64_t type metadata accessor for MLHandPoseClassifier.PersistentParameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLHandPoseClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLHandPoseClassifier.PersistentParameters)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MLHandPoseClassifier.PersistentParameters()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MLHandPoseClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void MLHandPoseClassifier.PersistentParameters.init(sessionDirectory:)(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  Class isa;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  double v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  _QWORD *v90;
  _QWORD v91[2];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  char v112;
  _BYTE v113[7];
  _BYTE v114[7];
  _BYTE v115[7];
  _BYTE v116[7];
  __int128 v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  _BYTE v124[7];
  uint64_t v125;
  unint64_t v126;
  char v127;
  _BYTE v128[7];
  void *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  _BYTE v135[7];
  uint64_t v136;
  uint64_t v137;
  char v138;
  __int128 v139;
  uint64_t v140;
  _BYTE v141[32];
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.ModelParameters.ValidationData?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v100 = v5;
  v103 = OUTLINED_FUNCTION_64_4();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v104 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v102 = v9;
  v105 = type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v101 = v11;
  v12 = OUTLINED_FUNCTION_84_1();
  v110 = *(_QWORD *)(v12 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_208();
  v106 = v14;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_65_5();
  v107 = v16;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_65_5();
  v108 = v18;
  OUTLINED_FUNCTION_29_3();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v91 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v91 - v23;
  v25 = type metadata accessor for MLHandPoseClassifier.PersistentParameters();
  v26 = *(int *)(v25 + 24);
  *(_QWORD *)((char *)a2 + v26) = 32;
  v27 = *(int *)(v25 + 28);
  v109 = a2;
  *(_QWORD *)((char *)a2 + v27) = 80;
  OUTLINED_FUNCTION_11_4();
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_38_3();
  OUTLINED_FUNCTION_27_2();
  URL.appendingPathComponent(_:)();
  v28 = v111;
  v29 = Data.init(contentsOf:options:)();
  if (v28)
  {
    v25 = *(_QWORD *)(v110 + 8);
    ((void (*)(char *, uint64_t))v25)(a1, v12);
    OUTLINED_FUNCTION_77_2((uint64_t)v22);
    v31 = (uint64_t)v24;
LABEL_21:
    v56 = v12;
    goto LABEL_22;
  }
  v93 = v27;
  v94 = v26;
  v111 = a1;
  v33 = v109;
  v32 = v110;
  v95 = 0;
  v99 = v24;
  v34 = v29;
  v35 = v30;
  v98 = *(void (**)(char *, uint64_t))(v110 + 8);
  v98(v22, v12);
  v36 = (void *)objc_opt_self();
  v37 = v12;
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v117 = 0;
  v39 = objc_msgSend(v36, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v117);

  v40 = (id)v117;
  if (!v39)
  {
    v57 = v40;
    _convertNSErrorToError(_:)();

    swift_willThrow(v58);
    outlined consume of Data._Representation(v34, v35);
    v59 = v98;
    v98(v111, v37);
    v59(v99, v37);
    goto LABEL_23;
  }
  v96 = v34;
  v97 = v35;
  v12 = v37;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v141, (uint64_t)&v117);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  OUTLINED_FUNCTION_47_5();
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_197();
    *v61 = 0xD000000000000037;
    v61[1] = v62;
LABEL_20:
    OUTLINED_FUNCTION_5_8(v60, (uint64_t)v61);
    OUTLINED_FUNCTION_34_6();
    OUTLINED_FUNCTION_75_4();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v141);
    v31 = (uint64_t)v99;
    goto LABEL_21;
  }
  v42 = v32;
  v43 = v139;
  OUTLINED_FUNCTION_10_6(0x69735F6863746162, 0xEA0000000000657ALL, &v117);
  if (!v119)
    goto LABEL_17;
  if ((OUTLINED_FUNCTION_19_7() & 1) == 0)
    goto LABEL_18;
  v44 = v139;
  OUTLINED_FUNCTION_10_6(0x726574695F78616DLL, 0xEE00736E6F697461, &v117);
  if (!v119)
  {
LABEL_17:
    v63 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_57_2(v63, &demangling cache variable for type metadata for Any?);
LABEL_19:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_38_3();
    *v61 = v64 + 8;
    v61[1] = 0x800000021AFF28F0;
    goto LABEL_20;
  }
  if ((OUTLINED_FUNCTION_19_7() & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v92 = v139;
  OUTLINED_FUNCTION_38_3();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_10_6(v45, v46, &v117);
  if (!v119)
    goto LABEL_17;
  if ((OUTLINED_FUNCTION_19_7() & 1) == 0)
    goto LABEL_18;
  v91[0] = v139;
  *(_QWORD *)((char *)v33 + v94) = v44;
  *(_QWORD *)((char *)v33 + v93) = v92;
  v94 = v43;
  URL.appendingPathComponent(_:)();
  specialized Dictionary.subscript.getter(0x676E696E69617274, 0xE800000000000000, v94, &v139);
  v91[1] = v41;
  if (v140)
  {
    v47 = OUTLINED_FUNCTION_6_8();
    v48 = v107;
    if ((v47 & 1) != 0)
    {
      v49 = *(_QWORD *)(v42 + 16);
      v50 = v106;
      OUTLINED_FUNCTION_55_5(v106, v108);
      v51 = v50;
      v52 = v102;
      MLHandPoseClassifier.DataSource.init(dictionary:tableFile:)();
      if (__swift_getEnumTagSinglePayload(v52, 1, v105) == 1)
      {
        OUTLINED_FUNCTION_81_4();
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v52, &demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?);
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_49_0();
        OUTLINED_FUNCTION_38_3();
        *v54 = v53 - 2;
        v54[1] = 0x800000021AFF29A0;
        OUTLINED_FUNCTION_5_8(v55, (uint64_t)v54);
        OUTLINED_FUNCTION_34_6();
        OUTLINED_FUNCTION_75_4();
        ((void (*)(uint64_t, uint64_t))v25)(v108, v44);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v141);
        v31 = (uint64_t)v99;
        v56 = v44;
LABEL_22:
        ((void (*)(uint64_t, uint64_t))v25)(v31, v56);
        goto LABEL_23;
      }
      v110 = v49;
      v73 = v52;
      v74 = v101;
      outlined init with take of MLHandPoseClassifier.ModelParameters(v73, v101, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
      v72 = v109;
      outlined init with take of MLHandPoseClassifier.ModelParameters(v74, (uint64_t)v109, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
      goto LABEL_30;
    }
  }
  else
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v139, &demangling cache variable for type metadata for Any?);
    v48 = v107;
  }
  v65 = *(_QWORD *)(v42 + 16);
  v66 = v108;
  OUTLINED_FUNCTION_55_5(v48, v108);
  v112 = 1;
  LOBYTE(v117) = 1;
  *(_DWORD *)((char *)&v117 + 1) = *(_DWORD *)v116;
  DWORD1(v117) = *(_DWORD *)&v116[3];
  *((_QWORD *)&v117 + 1) = 44;
  v118 = 0xE100000000000000;
  v119 = 0;
  v120 = 0xE000000000000000;
  v121 = 92;
  v122 = 0xE100000000000000;
  v123 = 1;
  *(_DWORD *)v124 = *(_DWORD *)v115;
  *(_DWORD *)&v124[3] = *(_DWORD *)&v115[3];
  v125 = 34;
  v126 = 0xE100000000000000;
  v127 = 1;
  *(_DWORD *)v128 = *(_DWORD *)v114;
  *(_DWORD *)&v128[3] = *(_DWORD *)&v114[3];
  v129 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  v130 = 10;
  v131 = 0xE100000000000000;
  v132 = 0;
  v133 = 0;
  v134 = 1;
  *(_DWORD *)v135 = *(_DWORD *)v113;
  *(_DWORD *)&v135[3] = *(_DWORD *)&v113[3];
  v136 = 0;
  v67 = v95;
  MLDataTable.init(contentsOf:options:)(v48, &v117, (uint64_t)&v137);
  v95 = v67;
  if (v67)
  {
    OUTLINED_FUNCTION_34_6();
    OUTLINED_FUNCTION_81_4();
    v68 = (void (*)(uint64_t, uint64_t))v98;
    v98(v111, v44);
    v68(v66, v44);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v141);
    v69 = (uint64_t)v99;
    v70 = v44;
LABEL_27:
    v68(v69, v70);
    goto LABEL_23;
  }
  v110 = v65;
  v71 = v138;
  v72 = v109;
  *v109 = v137;
  *((_BYTE *)v72 + 8) = v71;
  v72[2] = 0x7461506567616D69;
  v72[3] = 0xE900000000000068;
  v72[4] = 0x6C6562616CLL;
  v72[5] = 0xE500000000000000;
  swift_storeEnumTagMultiPayload();
  v51 = v106;
LABEL_30:
  specialized Dictionary.subscript.getter(0x69746164696C6176, 0xEA00000000006E6FLL, v94, &v117);
  v76 = v104;
  if (!v119)
  {
    OUTLINED_FUNCTION_57_2(v75, &demangling cache variable for type metadata for Any?);
    goto LABEL_35;
  }
  OUTLINED_FUNCTION_47_5();
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
  {
LABEL_35:
    v83 = v25;
    swift_storeEnumTagMultiPayload();
    goto LABEL_36;
  }
  ((void (*)(uint64_t, char *, uint64_t))v110)(v51, v99, v37);
  v77 = v100;
  MLHandPoseClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)();
  if (__swift_getEnumTagSinglePayload(v77, 1, v103) == 1)
  {
    OUTLINED_FUNCTION_81_4();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v77, &demangling cache variable for type metadata for MLHandPoseClassifier.ModelParameters.ValidationData?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v78 = 0;
    OUTLINED_FUNCTION_38_3();
    *v79 = v80;
    OUTLINED_FUNCTION_197();
    v72 = v33;
    v83 = v25;
    goto LABEL_42;
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters(v77, v76, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  v83 = v25;
  v72 = v33;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v76, (uint64_t)v33 + *(int *)(v25 + 20), type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
LABEL_36:
  *(_QWORD *)((char *)v72 + *(int *)(v83 + 32)) = v91[0];
  v84 = OUTLINED_FUNCTION_76_0();
  specialized Dictionary.subscript.getter(v84, v85, v94, v86);
  v87 = swift_bridgeObjectRelease();
  if (v119)
  {
    OUTLINED_FUNCTION_47_5();
    if ((OUTLINED_FUNCTION_6_8() & 1) != 0)
    {
      MLHandActionClassifier.ModelParameters.ModelAlgorithmType.init(dictionary:)(v139, (char *)&v117);
      v88 = v111;
      if (v117 != 1)
      {
        OUTLINED_FUNCTION_34_6();
        v89 = v88;
        v68 = (void (*)(uint64_t, uint64_t))v98;
        v98(v89, v37);
        v68(v108, v37);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v141);
        v69 = (uint64_t)v99;
        v70 = v37;
        goto LABEL_27;
      }
    }
  }
  else
  {
    OUTLINED_FUNCTION_57_2(v87, &demangling cache variable for type metadata for Any?);
  }
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  *v90 = 0xD00000000000002BLL;
  OUTLINED_FUNCTION_197();
  v78 = 1;
LABEL_42:
  *(_QWORD *)(v81 + 8) = v82;
  *(_OWORD *)(v81 + 16) = 0u;
  *(_OWORD *)(v81 + 32) = 0u;
  *(_BYTE *)(v81 + 48) = 0;
  swift_willThrow(0.0);
  OUTLINED_FUNCTION_34_6();
  OUTLINED_FUNCTION_75_4();
  OUTLINED_FUNCTION_77_2(v108);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v141);
  OUTLINED_FUNCTION_77_2((uint64_t)v99);
  outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v72, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
  if (v78)
    outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v72 + *(int *)(v83 + 20), type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
LABEL_23:
  OUTLINED_FUNCTION_7();
}

void MLHandPoseClassifier.DataSource.init(dictionary:tableFile:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  BOOL v27;
  int *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  char v59;
  char v60;
  char v61;
  const void *v62;
  uint64_t v63;
  void *v64;
  char v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[2];
  void *v78;
  _QWORD *v79;
  _QWORD *v80;
  void *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  id v85;
  char v86;
  _BYTE v87[7];
  char v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  _BYTE v92[7];
  char v93;
  int v94;
  _BYTE v95[7];
  _BYTE v96[7];
  int v97;
  void *v98;
  _QWORD *v99;

  OUTLINED_FUNCTION_20_3();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = OUTLINED_FUNCTION_78();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_50();
  v10 = v8 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v77 - v12;
  v14 = OUTLINED_FUNCTION_27_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_50();
  v18 = v16 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v77 - v20;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v22 = OUTLINED_FUNCTION_48_3();
  if ((v23 & 1) == 0)
    goto LABEL_28;
  outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v22, (uint64_t)&v89);
  if ((OUTLINED_FUNCTION_0_12() & 1) == 0)
    goto LABEL_28;
  v84 = v1;
  v83 = v5;
  OUTLINED_FUNCTION_63_4();
  v25 = v98;
  v5 = v99;
  v27 = v98 == v26 && v99 == v24;
  if (!v27 && (OUTLINED_FUNCTION_13_8() & 1) == 0)
  {
    if (v25 == (void *)0xD000000000000013 && v5 == (_QWORD *)0x800000021AFF28D0
      || (OUTLINED_FUNCTION_27_2(), (OUTLINED_FUNCTION_13_8() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_10_6(1752457584, 0xE400000000000000, &v89);
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_52_3();
      if (v35)
      {
        if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
          goto LABEL_40;
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    v40 = v25 == (void *)0x5F64656C6562616CLL && v5 == (_QWORD *)0xED000073656C6966;
    if (v40 || (OUTLINED_FUNCTION_13_8() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_10_6(1752457584, 0xE400000000000000, &v89);
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_52_3();
      if (v41)
      {
        if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
        {
LABEL_40:
          OUTLINED_FUNCTION_54_3();
          OUTLINED_FUNCTION_123();
          OUTLINED_FUNCTION_12_7(v3, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
          OUTLINED_FUNCTION_53_5();
          v42 = swift_storeEnumTagMultiPayload();
          OUTLINED_FUNCTION_73_1(v42, v43, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
          goto LABEL_41;
        }
LABEL_43:
        v37 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
        v38 = v3;
        goto LABEL_30;
      }
LABEL_42:
      OUTLINED_FUNCTION_16_7(v34, &demangling cache variable for type metadata for Any?);
      goto LABEL_43;
    }
    if (v25 == (void *)0xD000000000000016 && v5 == (_QWORD *)0x800000021AFF2890
      || (OUTLINED_FUNCTION_13_8() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_36_4((uint64_t)v13, *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 16));
      v88 = 1;
      LOBYTE(v89) = 1;
      *(_DWORD *)((char *)&v89 + 1) = v97;
      OUTLINED_FUNCTION_19_6(1);
      v91 = *(_DWORD *)v96;
      OUTLINED_FUNCTION_81_3(v45);
      *(_DWORD *)v92 = *(_DWORD *)v95;
      *(_DWORD *)&v92[3] = *(_DWORD *)&v95[3];
      OUTLINED_FUNCTION_75_3((uint64_t)&outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:));
      v93 = v88;
      v94 = *(_DWORD *)v87;
      OUTLINED_FUNCTION_79_2(*(int *)&v87[3]);
      MLDataTable.init(contentsOf:options:)((uint64_t)v13, v46, v47);
      OUTLINED_FUNCTION_40_6();
      v85 = v98;
      v86 = (char)v99;
      OUTLINED_FUNCTION_77_1();
      static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(v48, v49, v50);
      OUTLINED_FUNCTION_27_2();
      OUTLINED_FUNCTION_10_6(v51, v52, &v89);
      if (v90)
      {
        if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
        {
          v54 = v98;
          v53 = v99;
          OUTLINED_FUNCTION_2_9(0x5F6C6562616CLL, &v89);
          if (v90)
          {
            if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
            {
              v56 = v98;
              v55 = v99;
              OUTLINED_FUNCTION_10_6(0x5F65727574616566, 0xEE006E6D756C6F63, &v89);
              OUTLINED_FUNCTION_30();
              OUTLINED_FUNCTION_7_5();
              if (v90)
              {
                if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
                {
                  v57 = v98;
                  v58 = v99;
                  v59 = v86;
                  *(_QWORD *)v21 = v85;
                  v21[8] = v59;
                  *((_QWORD *)v21 + 2) = v54;
                  *((_QWORD *)v21 + 3) = v53;
                  *((_QWORD *)v21 + 4) = v56;
                  *((_QWORD *)v21 + 5) = v55;
                  *((_QWORD *)v21 + 6) = v57;
                  *((_QWORD *)v21 + 7) = v58;
LABEL_73:
                  swift_storeEnumTagMultiPayload();
                  goto LABEL_18;
                }
                swift_bridgeObjectRelease();
                OUTLINED_FUNCTION_123();
              }
              else
              {
                swift_bridgeObjectRelease();
                v75 = OUTLINED_FUNCTION_123();
                OUTLINED_FUNCTION_16_7(v75, &demangling cache variable for type metadata for Any?);
              }
              OUTLINED_FUNCTION_40_6();
LABEL_83:
              outlined consume of Result<_DataTable, Error>(v85, v86);
              goto LABEL_31;
            }
            OUTLINED_FUNCTION_123();
            OUTLINED_FUNCTION_30();
          }
          else
          {
            OUTLINED_FUNCTION_123();
            v73 = OUTLINED_FUNCTION_30();
            OUTLINED_FUNCTION_16_7(v73, &demangling cache variable for type metadata for Any?);
          }
          v71 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
          v72 = v84;
LABEL_82:
          OUTLINED_FUNCTION_12_7(v72, v71);
          goto LABEL_83;
        }
        OUTLINED_FUNCTION_30();
      }
      else
      {
        v70 = OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_16_7(v70, &demangling cache variable for type metadata for Any?);
      }
      v71 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
      v72 = (uint64_t)v25;
      goto LABEL_82;
    }
    if (v25 == (void *)0xD000000000000012 && v5 == (_QWORD *)0x800000021AFF29E0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_27_2();
      v60 = OUTLINED_FUNCTION_13_8();
      swift_bridgeObjectRelease();
      if ((v60 & 1) == 0)
      {
        OUTLINED_FUNCTION_7_5();
        goto LABEL_78;
      }
    }
    OUTLINED_FUNCTION_36_4(v10, *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 16));
    v87[0] = 1;
    LOBYTE(v89) = 1;
    *(_DWORD *)((char *)&v89 + 1) = (_DWORD)v85;
    OUTLINED_FUNCTION_19_6(1);
    v91 = v97;
    OUTLINED_FUNCTION_81_3(v61);
    *(_DWORD *)v92 = *(_DWORD *)v96;
    *(_DWORD *)&v92[3] = *(_DWORD *)&v96[3];
    OUTLINED_FUNCTION_75_3((uint64_t)&outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:));
    v93 = v87[0];
    v94 = *(_DWORD *)v95;
    OUTLINED_FUNCTION_79_2(*(int *)&v95[3]);
    MLDataTable.init(contentsOf:options:)(v10, v62, v63);
    OUTLINED_FUNCTION_40_6();
    v64 = v98;
    v65 = (char)v99;
    OUTLINED_FUNCTION_2_9(0x5F6567616D69, &v89);
    if (v90)
    {
      if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
      {
        v67 = v98;
        v66 = v99;
        OUTLINED_FUNCTION_2_9(0x5F6C6562616CLL, &v89);
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_7_5();
        if (!v90)
        {
          outlined consume of Result<_DataTable, Error>(v64, v65);
          v76 = OUTLINED_FUNCTION_80();
          OUTLINED_FUNCTION_16_7(v76, &demangling cache variable for type metadata for Any?);
          goto LABEL_56;
        }
        if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
        {
          v68 = v98;
          v69 = v99;
          *(_QWORD *)v21 = v64;
          v21[8] = v65;
          *((_QWORD *)v21 + 2) = v67;
          *((_QWORD *)v21 + 3) = v66;
          *((_QWORD *)v21 + 4) = v68;
          *((_QWORD *)v21 + 5) = v69;
          goto LABEL_73;
        }
        outlined consume of Result<_DataTable, Error>(v64, v65);
LABEL_78:
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_149_0();
    }
    else
    {
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_149_0();
      OUTLINED_FUNCTION_16_7(v74, &demangling cache variable for type metadata for Any?);
    }
    v37 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    v38 = v84;
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_6(1752457584, 0xE400000000000000, &v89);
  v5 = v83;
  v1 = v84;
  if (!v90)
    goto LABEL_26;
  if ((OUTLINED_FUNCTION_0_12() & 1) == 0)
  {
LABEL_28:
    OUTLINED_FUNCTION_30();
    goto LABEL_29;
  }
  OUTLINED_FUNCTION_10_6(0x697461746F6E6E61, 0xEF656C69665F6E6FLL, &v89);
  if (v90)
  {
    if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
    {
      v5 = v98;
      OUTLINED_FUNCTION_2_9(0x5F6567616D69, &v89);
      if (v90)
      {
        if ((OUTLINED_FUNCTION_0_12() & 1) == 0)
        {
          OUTLINED_FUNCTION_123();
          OUTLINED_FUNCTION_80();
LABEL_54:
          swift_bridgeObjectRelease();
          goto LABEL_55;
        }
        v82 = v5;
        v5 = v99;
        v81 = v98;
        OUTLINED_FUNCTION_2_9(0x5F6C6562616CLL, &v89);
        OUTLINED_FUNCTION_30();
        if (v90)
        {
          v80 = v5;
          if ((OUTLINED_FUNCTION_0_12() & 1) != 0)
          {
            v78 = v98;
            v79 = v99;
            v28 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
            v77[1] = v18 + v28[12];
            v29 = (_QWORD *)(v18 + v28[16]);
            v5 = (_QWORD *)(v18 + v28[20]);
            URL.init(fileURLWithPath:)();
            OUTLINED_FUNCTION_80();
            URL.init(fileURLWithPath:)();
            OUTLINED_FUNCTION_123();
            OUTLINED_FUNCTION_7_5();
            v30 = v80;
            *v29 = v81;
            v29[1] = v30;
            v31 = v79;
            *v5 = v78;
            v5[1] = v31;
            OUTLINED_FUNCTION_53_5();
            v32 = swift_storeEnumTagMultiPayload();
            OUTLINED_FUNCTION_73_1(v32, v33, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
LABEL_18:
            OUTLINED_FUNCTION_40_6();
LABEL_41:
            outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v21, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
            v39 = 0;
            goto LABEL_32;
          }
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_123();
          goto LABEL_54;
        }
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_123();
      }
      else
      {
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_80();
      }
      v44 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_16_7(v44, &demangling cache variable for type metadata for Any?);
LABEL_55:
      OUTLINED_FUNCTION_7_5();
LABEL_56:
      OUTLINED_FUNCTION_40_6();
      goto LABEL_32;
    }
    OUTLINED_FUNCTION_80();
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_80();
LABEL_26:
  v36 = OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_16_7(v36, &demangling cache variable for type metadata for Any?);
LABEL_29:
  v37 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  v38 = v1;
LABEL_30:
  OUTLINED_FUNCTION_12_7(v38, v37);
LABEL_31:
  v39 = 1;
LABEL_32:
  __swift_storeEnumTagSinglePayload((uint64_t)v5, v39, 1, v14);
  OUTLINED_FUNCTION_9_5();
}

void MLHandPoseClassifier.ModelParameters.ValidationData.init(dictionary:tableFile:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  char v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int16 v36;
  char v37;
  uint64_t v38;

  OUTLINED_FUNCTION_20_3();
  v32 = v0;
  v2 = v1;
  v4 = v3;
  v5 = OUTLINED_FUNCTION_78();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v9 = v8 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v13 = v12 - v11;
  v14 = OUTLINED_FUNCTION_27_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_49();
  v18 = v17 - v16;
  v19 = OUTLINED_FUNCTION_51_5();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_49();
  v23 = v22 - v21;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v24 = OUTLINED_FUNCTION_48_3();
  if ((v25 & 1) == 0)
    goto LABEL_25;
  outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v24, (uint64_t)&v35);
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
    goto LABEL_25;
  v26 = v33 == 1701736302 && v34 == 0xE400000000000000;
  if (v26 || (OUTLINED_FUNCTION_8_3() & 1) != 0)
  {
    OUTLINED_FUNCTION_12_7(v32, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_123();
    goto LABEL_10;
  }
  v28 = v33 == 0x756F735F61746164 && v34 == 0xEB00000000656372;
  if (!v28 && (OUTLINED_FUNCTION_8_3() & 1) == 0)
  {
    if (v33 == 0x74696C7073 && v34 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = OUTLINED_FUNCTION_8_3();
      OUTLINED_FUNCTION_123();
      if ((v30 & 1) == 0)
      {
LABEL_25:
        OUTLINED_FUNCTION_12_7(v32, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
        OUTLINED_FUNCTION_30();
        goto LABEL_26;
      }
    }
    OUTLINED_FUNCTION_10_6(1635017060, 0xE400000000000000, &v35);
    OUTLINED_FUNCTION_30();
    if (!v38)
      goto LABEL_33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
      goto LABEL_34;
    MLSplitStrategy.init(dictionary:)(v33, (uint64_t)&v35);
    OUTLINED_FUNCTION_12_7(v32, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    if ((v37 & 1) == 0)
    {
      v31 = v36;
      *(_OWORD *)v23 = v35;
      *(_BYTE *)(v23 + 16) = v31;
      *(_BYTE *)(v23 + 17) = HIBYTE(v31) & 1;
      goto LABEL_10;
    }
LABEL_26:
    v27 = 1;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_6(1635017060, 0xE400000000000000, &v35);
  OUTLINED_FUNCTION_30();
  if (!v38)
  {
LABEL_33:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v35, &demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if ((OUTLINED_FUNCTION_6_8() & 1) == 0)
  {
LABEL_34:
    OUTLINED_FUNCTION_12_7(v32, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    goto LABEL_26;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9, v32, v5);
  MLHandPoseClassifier.DataSource.init(dictionary:tableFile:)();
  OUTLINED_FUNCTION_12_7(v32, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  if (__swift_getEnumTagSinglePayload(v13, 1, v14) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v13, &demangling cache variable for type metadata for MLHandPoseClassifier.DataSource?);
    v27 = 1;
    goto LABEL_27;
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters(v13, v18, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
  outlined init with take of MLHandPoseClassifier.ModelParameters(v18, v23, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
LABEL_10:
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v23, v4, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  v27 = 0;
LABEL_27:
  __swift_storeEnumTagSinglePayload(v4, v27, 1, v19);
  OUTLINED_FUNCTION_9_5();
}

void MLHandPoseClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  Class isa;
  id v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  void *v50;
  double v51;
  uint64_t v52;
  void (*v53)(_QWORD);
  unsigned __int8 v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(_QWORD);
  id v82;
  unsigned __int8 v83;
  uint64_t v84;

  v2 = v1;
  v80 = a1;
  v84 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v67 = v4;
  v72 = OUTLINED_FUNCTION_64_4();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v71 = v6;
  v79 = OUTLINED_FUNCTION_84_1();
  v77 = *(_QWORD *)(v79 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_208();
  v73 = v8;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_65_5();
  v74 = v10;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v11);
  v76 = (char *)&v66 - v12;
  v13 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  v75 = v15;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v66 - v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE8EA0;
  *(_QWORD *)(inited + 32) = 0x676E696E69617274;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  MLHandPoseClassifier.DataSource.dictionary.getter();
  v21 = v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v81 = (void (*)(_QWORD))v22;
  *(_QWORD *)(inited + 48) = v21;
  *(_QWORD *)(inited + 72) = v22;
  *(_QWORD *)(inited + 80) = 0x69746164696C6176;
  *(_QWORD *)(inited + 88) = 0xEA00000000006E6FLL;
  v23 = (int *)type metadata accessor for MLHandPoseClassifier.PersistentParameters();
  v70 = v2 + v23[5];
  outlined init with copy of MLTrainingSessionParameters(v70, (uint64_t)v18, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  v25 = v23[6];
  v24 = v23[7];
  v26 = *(_QWORD *)(v2 + v24);
  v27 = v23[8];
  v28 = *(_QWORD *)(v2 + v27);
  *(_QWORD *)&v18[v13[5]] = *(_QWORD *)(v2 + v25);
  *(_QWORD *)&v18[v13[6]] = v26;
  v68 = v13;
  *(_QWORD *)&v18[v13[7]] = v28;
  v29 = MLHandPoseClassifier.ModelParameters.ValidationData.dictionary.getter();
  outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v18, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  *(_QWORD *)(inited + 96) = v29;
  v30 = v81;
  *(_QWORD *)(inited + 120) = v81;
  *(_QWORD *)(inited + 128) = 0x69735F6863746162;
  *(_QWORD *)(inited + 136) = 0xEA0000000000657ALL;
  v69 = v25;
  v31 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 144) = *(_QWORD *)(v2 + v25);
  *(_QWORD *)(inited + 168) = v31;
  strcpy((char *)(inited + 176), "max_iterations");
  *(_BYTE *)(inited + 191) = -18;
  v32 = v24;
  v33 = *(_QWORD *)(v2 + v24);
  v34 = v27;
  v35 = v2;
  *(_QWORD *)(inited + 192) = v33;
  *(_QWORD *)(inited + 216) = v31;
  *(_QWORD *)(inited + 224) = 0xD000000000000014;
  *(_QWORD *)(inited + 232) = 0x800000021AFF2830;
  *(_QWORD *)(inited + 240) = *(_QWORD *)(v2 + v34);
  OUTLINED_FUNCTION_65_4();
  *(_QWORD *)(inited + 264) = v37;
  *(_QWORD *)(inited + 272) = v36;
  *(_QWORD *)(inited + 280) = 0xE90000000000006DLL;
  v38 = MLHandActionClassifier.ModelParameters.ModelAlgorithmType.dictionary.getter();
  *(_QWORD *)(inited + 312) = v30;
  *(_QWORD *)(inited + 288) = v38;
  OUTLINED_FUNCTION_71_4();
  Dictionary.init(dictionaryLiteral:)();
  v39 = (void *)objc_opt_self();
  OUTLINED_FUNCTION_71_4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v82 = 0;
  v41 = objc_msgSend(v39, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, &v82);

  v42 = v82;
  if (v41)
  {
    v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v44;

    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_78_3();
    v46 = v78;
    Data.write(to:options:)();
    if (v46)
    {
      v47 = OUTLINED_FUNCTION_62_5();
      v48(v47);
      v49 = v43;
    }
    else
    {
      v78 = v43;
      v52 = OUTLINED_FUNCTION_62_5();
      v81 = v53;
      v53(v52);
      MLHandPoseClassifier.DataSource.table.getter();
      v54 = v83;
      if (v83 != 255)
      {
        v77 = v45;
        v55 = v82;
        v83 &= 1u;
        v56 = v74;
        OUTLINED_FUNCTION_78_3();
        MLDataTable.write(to:)();
        OUTLINED_FUNCTION_33_4(v56);
        outlined consume of MLDataTable?(v55, v54);
        v45 = v77;
      }
      v57 = v75;
      outlined init with copy of MLTrainingSessionParameters(v70, v75, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
      v58 = v68;
      v59 = *(_QWORD *)(v35 + v32);
      v60 = *(_QWORD *)(v35 + v34);
      *(_QWORD *)(v57 + v68[5]) = *(_QWORD *)(v35 + v69);
      *(_QWORD *)(v57 + v58[6]) = v59;
      *(_QWORD *)(v57 + v58[7]) = v60;
      v61 = v71;
      outlined init with copy of MLTrainingSessionParameters(v57, v71, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v62 = v67;
        outlined init with take of MLHandPoseClassifier.ModelParameters(v61, v67, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
        MLHandPoseClassifier.DataSource.table.getter();
        outlined destroy of MLHandActionClassifier.DataSource(v62, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
        v63 = v82;
        v64 = v83;
      }
      else
      {
        v63 = 0;
        v64 = 255;
      }
      v65 = v73;
      outlined destroy of MLHandActionClassifier.DataSource(v75, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
      if (v64 != 255)
      {
        v82 = v63;
        v83 = v64 & 1;
        OUTLINED_FUNCTION_11_4();
        OUTLINED_FUNCTION_78_3();
        MLDataTable.write(to:)();
        OUTLINED_FUNCTION_33_4(v65);
        outlined consume of Data._Representation(v78, v45);
        outlined consume of MLDataTable?(v63, v64);
        goto LABEL_13;
      }
      v49 = v78;
    }
    outlined consume of Data._Representation(v49, v45);
  }
  else
  {
    v50 = v42;
    _convertNSErrorToError(_:)();

    swift_willThrow(v51);
  }
LABEL_13:
  OUTLINED_FUNCTION_7();
}

void MLHandPoseClassifier.DataSource.dictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char *v7;

  OUTLINED_FUNCTION_20_3();
  v1 = OUTLINED_FUNCTION_78();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_27_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLTrainingSessionParameters(v0, v5 - v4, v6);
  v7 = (char *)sub_21AE31954 + 4 * byte_21AFE8E64[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AE31954()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, unint64_t);
  __n128 *inited;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *boxed_opaque_existential_0;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, unint64_t);

  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
  v7 = v4 + v6[12];
  v8 = (unint64_t *)(v4 + v6[16]);
  v10 = *v8;
  v9 = v8[1];
  v11 = (uint64_t *)(v4 + v6[20]);
  v12 = *v11;
  *(_QWORD *)(v0 + 8) = v11[1];
  *(_QWORD *)(v0 + 16) = v12;
  v13 = *(void (**)(uint64_t, uint64_t, unint64_t))(v5 + 32);
  v13(v1, v4, v2);
  v13(v3, v7, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_5_10(inited, (__n128)xmmword_21AFE8D80);
  v15 = MEMORY[0x24BEE0D00];
  OUTLINED_FUNCTION_63_4();
  v16[6] = v17;
  v16[7] = 0xE900000000000079;
  v16[9] = v15;
  v16[10] = 1752457584;
  v16[11] = v18;
  inited[6].n128_u64[0] = URL.path.getter();
  inited[6].n128_u64[1] = v19;
  inited[7].n128_u64[1] = v15;
  inited[8].n128_u64[0] = 0x697461746F6E6E61;
  inited[8].n128_u64[1] = 0xEF656C69665F6E6FLL;
  inited[10].n128_u64[1] = v2;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&inited[9]);
  (*(void (**)(uint64_t *, uint64_t, unint64_t))(v5 + 16))(boxed_opaque_existential_0, v3, v2);
  OUTLINED_FUNCTION_56_3();
  inited[11].n128_u64[0] = v21;
  inited[11].n128_u64[1] = 0xEC0000006E6D756CLL;
  inited[12].n128_u64[0] = v10;
  inited[12].n128_u64[1] = v9;
  OUTLINED_FUNCTION_86_2();
  inited[13].n128_u64[1] = v15;
  inited[14].n128_u64[0] = v22;
  inited[16].n128_u64[1] = v15;
  v23 = *(_QWORD *)(v0 + 16);
  inited[14].n128_u64[1] = v24;
  inited[15].n128_u64[0] = v23;
  inited[15].n128_u64[1] = *(_QWORD *)(v0 + 8);
  v25 = Dictionary.init(dictionaryLiteral:)();
  v26 = *(void (**)(uint64_t, unint64_t))(v5 + 8);
  v26(v3, v2);
  v26(v1, v2);
  return v25;
}

uint64_t MLHandPoseClassifier.ModelParameters.ValidationData.dictionary.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __n128 *inited;
  __n128 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t v24;

  OUTLINED_FUNCTION_27_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_51_5();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v5 = v4 - v3;
  v6 = OUTLINED_FUNCTION_53_5();
  outlined init with copy of MLTrainingSessionParameters(v6, v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = (__n128 *)swift_initStackObject();
    v18 = OUTLINED_FUNCTION_5_10(inited, (__n128)xmmword_21AFE7F70);
    v19 = MEMORY[0x24BEE0D00];
    v18[3].n128_u64[0] = 0x74696C7073;
    v18[3].n128_u64[1] = 0xE500000000000000;
    v18[4].n128_u64[1] = v19;
    v18[5].n128_u64[0] = 1635017060;
    v18[5].n128_u64[1] = v20;
    v21 = MLSplitStrategy.dictionary.getter();
    inited[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    inited[6].n128_u64[0] = v21;
    OUTLINED_FUNCTION_53_5();
    return Dictionary.init(dictionaryLiteral:)();
  }
  if (EnumCaseMultiPayload != 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v22 = (__n128 *)swift_initStackObject();
    v23 = OUTLINED_FUNCTION_5_10(v22, (__n128)xmmword_21AFE7DA0);
    v23[4].n128_u64[1] = MEMORY[0x24BEE0D00];
    v23[3].n128_u64[0] = 1701736302;
    v23[3].n128_u64[1] = v24;
    return Dictionary.init(dictionaryLiteral:)();
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters(v5, v0, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v10 = (__n128 *)swift_initStackObject();
  v11 = OUTLINED_FUNCTION_5_10(v10, (__n128)xmmword_21AFE7F70);
  v12 = MEMORY[0x24BEE0D00];
  v11[3].n128_u64[0] = 0x756F735F61746164;
  v11[3].n128_u64[1] = 0xEB00000000656372;
  v11[4].n128_u64[1] = v12;
  v11[5].n128_u64[0] = 1635017060;
  v11[5].n128_u64[1] = v13;
  MLHandPoseClassifier.DataSource.dictionary.getter();
  v15 = v14;
  v10[7].n128_u64[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v10[6].n128_u64[0] = v15;
  v16 = OUTLINED_FUNCTION_70_3();
  outlined destroy of MLHandActionClassifier.DataSource(v0, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
  return v16;
}

void MLHandPoseClassifier.DataSource.table.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  char *v10;
  uint64_t v11;

  OUTLINED_FUNCTION_20_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_49();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_64();
  v11 = type metadata accessor for AnyColumn();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  v6 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_27_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_5();
  outlined init with copy of MLTrainingSessionParameters(v0, v0, v9);
  v10 = (char *)sub_21AE32168 + 4 * byte_21AFE8E6B[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21AE32168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_78();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0, v2);
  v3 = *(_QWORD *)(v1 - 128);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = -1;
  OUTLINED_FUNCTION_9_5();
}

uint64_t OUTLINED_FUNCTION_7_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 320), v0);
}

uint64_t OUTLINED_FUNCTION_19_7()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_27_8()
{
  return type metadata accessor for MLHandPoseClassifier.DataSource();
}

uint64_t OUTLINED_FUNCTION_31_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_33_4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 120))(a1, *(_QWORD *)(v1 + 104));
}

uint64_t OUTLINED_FUNCTION_34_6()
{
  uint64_t v0;

  return outlined consume of Data._Representation(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t OUTLINED_FUNCTION_36_4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, *(_QWORD *)(v3 - 320), v2);
}

uint64_t OUTLINED_FUNCTION_47_5()
{
  uint64_t v0;

  return v0 - 160;
}

uint64_t OUTLINED_FUNCTION_51_5()
{
  return type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
}

uint64_t OUTLINED_FUNCTION_55_5(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void OUTLINED_FUNCTION_57_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2 + 208, a2);
}

uint64_t OUTLINED_FUNCTION_59_3()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t OUTLINED_FUNCTION_61_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_62_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_64_4()
{
  return type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
}

uint64_t OUTLINED_FUNCTION_71_4()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_75_4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 64))();
}

uint64_t OUTLINED_FUNCTION_77_2(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_78_3()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t OUTLINED_FUNCTION_81_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t MLCheckpoint.url.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for URL();
  v0 = OUTLINED_FUNCTION_19_8();
  return OUTLINED_FUNCTION_24_1(v0, v1, v2, v3);
}

uint64_t MLCheckpoint.url.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for URL();
  v0 = OUTLINED_FUNCTION_20_5();
  return OUTLINED_FUNCTION_24_1(v0, v1, v2, v3);
}

uint64_t (*MLCheckpoint.url.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLCheckpoint.phase.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + *(int *)(OUTLINED_FUNCTION_2_10() + 20));
  OUTLINED_FUNCTION_22();
}

uint64_t type metadata accessor for MLCheckpoint()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLCheckpoint;
  if (!type metadata singleton initialization cache for MLCheckpoint)
    return swift_getSingletonMetadata();
  return result;
}

void MLCheckpoint.phase.setter(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  *(_BYTE *)(v1 + *(int *)(OUTLINED_FUNCTION_2_10() + 20)) = v2;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLCheckpoint.phase.modify())(_QWORD)
{
  OUTLINED_FUNCTION_2_10();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLCheckpoint.iteration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_2_10() + 24));
}

void MLCheckpoint.iteration.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_2_10() + 24)) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLCheckpoint.iteration.modify())(_QWORD)
{
  OUTLINED_FUNCTION_2_10();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLCheckpoint.date.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_2_10();
  OUTLINED_FUNCTION_16_8();
  v0 = OUTLINED_FUNCTION_19_8();
  return OUTLINED_FUNCTION_24_1(v0, v1, v2, v3);
}

uint64_t MLCheckpoint.date.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_2_10();
  OUTLINED_FUNCTION_16_8();
  v0 = OUTLINED_FUNCTION_20_5();
  return OUTLINED_FUNCTION_24_1(v0, v1, v2, v3);
}

uint64_t (*MLCheckpoint.date.modify())(_QWORD)
{
  OUTLINED_FUNCTION_2_10();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLCheckpoint.metrics.getter()
{
  OUTLINED_FUNCTION_2_10();
  return swift_bridgeObjectRetain();
}

void MLCheckpoint.metrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_2_10() + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLCheckpoint.metrics.modify())(_QWORD)
{
  OUTLINED_FUNCTION_2_10();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

BOOL static MLCheckpoint.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void MLCheckpoint.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
  OUTLINED_FUNCTION_22();
}

CreateML::MLCheckpoint::CodingKeys_optional __swiftcall MLCheckpoint.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  BOOL v1;
  void *object;
  uint64_t countAndFlagsBits;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v10;

  v1 = stringValue._countAndFlagsBits == 7107189 && stringValue._object == (void *)0xE300000000000000;
  if (v1
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (OUTLINED_FUNCTION_48_1() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v5 = countAndFlagsBits == 0x6573616870 && object == (void *)0xE500000000000000;
    if (v5 || (OUTLINED_FUNCTION_48_1() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return (CreateML::MLCheckpoint::CodingKeys_optional)1;
    }
    else
    {
      v6 = countAndFlagsBits == 0x6F69746172657469 && object == (void *)0xE90000000000006ELL;
      if (v6 || (OUTLINED_FUNCTION_48_1() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return (CreateML::MLCheckpoint::CodingKeys_optional)2;
      }
      else
      {
        v7 = countAndFlagsBits == 1702125924 && object == (void *)0xE400000000000000;
        if (v7 || (OUTLINED_FUNCTION_48_1() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return (CreateML::MLCheckpoint::CodingKeys_optional)3;
        }
        else
        {
          v8 = countAndFlagsBits == 0x697274654D6C7275 && object == (void *)0xEA00000000007363;
          if (v8 || (OUTLINED_FUNCTION_48_1() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return (CreateML::MLCheckpoint::CodingKeys_optional)4;
          }
          else if (countAndFlagsBits == 0x7363697274656DLL && object == (void *)0xE700000000000000)
          {
            swift_bridgeObjectRelease();
            return (CreateML::MLCheckpoint::CodingKeys_optional)5;
          }
          else
          {
            v10 = OUTLINED_FUNCTION_48_1();
            swift_bridgeObjectRelease();
            if ((v10 & 1) != 0)
              return (CreateML::MLCheckpoint::CodingKeys_optional)5;
            else
              return (CreateML::MLCheckpoint::CodingKeys_optional)6;
          }
        }
      }
    }
  }
}

Swift::Int MLCheckpoint.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t MLCheckpoint.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21AE33790 + 4 * byte_21AFE8EB0[a1]))(7107189, 0xE300000000000000);
}

uint64_t sub_21AE33790()
{
  return 0x6573616870;
}

uint64_t sub_21AE337A4()
{
  return 0x6F69746172657469;
}

uint64_t sub_21AE337C0()
{
  return 1702125924;
}

uint64_t sub_21AE337D0()
{
  return 0x697274654D6C7275;
}

uint64_t sub_21AE337EC()
{
  return 0x7363697274656DLL;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLCheckpoint.CodingKeys(char *a1, char *a2)
{
  return static MLCheckpoint.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLCheckpoint.CodingKeys()
{
  unsigned __int8 *v0;

  return MLCheckpoint.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MLCheckpoint.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  MLCheckpoint.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MLCheckpoint.CodingKeys()
{
  unsigned __int8 *v0;

  return MLCheckpoint.CodingKeys.stringValue.getter(*v0);
}

CreateML::MLCheckpoint::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance MLCheckpoint.CodingKeys@<W0>(uint64_t a1@<X0>, CreateML::MLCheckpoint::CodingKeys_optional *a2@<X8>)
{
  CreateML::MLCheckpoint::CodingKeys_optional result;

  result.value = MLCheckpoint.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance MLCheckpoint.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLCheckpoint.CodingKeys()
{
  lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLCheckpoint.CodingKeys()
{
  lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void MLCheckpoint.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  id v24;
  uint64_t v25;
  char *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[4];
  char v55;

  v44 = a2;
  v5 = type metadata accessor for Date();
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v47 = v7;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MLCheckpoint.CodingKeys>);
  v50 = *(_QWORD *)(v52 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v53 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  v11 = OUTLINED_FUNCTION_67();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v51 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v44 - v15;
  v48 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_64();
  v49 = v18;
  v20 = a1[3];
  v19 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  MEMORY[0x22075B320](v20, v19);
  if (one-time initialization token for sessionDirectory != -1)
    swift_once();
  v21 = type metadata accessor for CodingUserInfoKey();
  __swift_project_value_buffer(v21, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  OUTLINED_FUNCTION_25_4();
  OUTLINED_FUNCTION_30();
  if (!v54[3])
  {
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v54, &demangling cache variable for type metadata for Any?);
    OUTLINED_FUNCTION_22_4(v3, 1);
    goto LABEL_20;
  }
  v22 = swift_dynamicCast();
  OUTLINED_FUNCTION_22_4(v3, v22 ^ 1u);
  if (__swift_getEnumTagSinglePayload(v3, 1, v11) == 1)
  {
LABEL_20:
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v3, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_7_6();
    __break(1u);
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v16, v3, v11);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    OUTLINED_FUNCTION_30_6();
  }
  else
  {
    LOBYTE(v54[0]) = 0;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    OUTLINED_FUNCTION_29_4();
    v23 = v51;
    OUTLINED_FUNCTION_31_7();
    v24 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v25 = URL.path.getter();
    v26 = v23;
    v27 = (void *)MEMORY[0x22075A8AC](v25);
    OUTLINED_FUNCTION_30();
    v28 = objc_msgSend(v24, sel_fileExistsAtPath_, v27);

    if (v28)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v49, v26, v11);
    }
    else
    {
      URL.path.getter();
      URL.appendingPathComponent(_:)();
      OUTLINED_FUNCTION_12_0();
    }
    v55 = 1;
    lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
    OUTLINED_FUNCTION_31_7();
    v29 = v47;
    v30 = v48;
    v31 = v49;
    *(_BYTE *)(v49 + *(int *)(v48 + 20)) = v54[0];
    LOBYTE(v54[0]) = 2;
    *(_QWORD *)(v31 + *(int *)(v30 + 24)) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v54[0]) = 3;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    OUTLINED_FUNCTION_29_4();
    v32 = v46;
    OUTLINED_FUNCTION_31_7();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v49 + *(int *)(v30 + 28), v29, v32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : Double]);
    v55 = 5;
    lazy protocol witness table accessor for type [MLProgress.Metric : Double] and conformance <> [A : B](&lazy protocol witness table cache variable for type [MLProgress.Metric : Double] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric, MEMORY[0x24BEE1400], MEMORY[0x24BEE04E0]);
    OUTLINED_FUNCTION_3_8();
    if (v54[0])
    {
      v33 = specialized _NativeDictionary.mapValues<A>(_:)(v54[0]);
      OUTLINED_FUNCTION_30();
    }
    else
    {
      lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
      v33 = Dictionary.init(dictionaryLiteral:)();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : URL]);
    v55 = 4;
    lazy protocol witness table accessor for type [MLProgress.Metric : URL] and conformance <> [A : B]();
    v34 = OUTLINED_FUNCTION_3_8();
    v35 = v54[0];
    if (v54[0])
    {
      MEMORY[0x24BDAC7A8](v34);
      v43 = v16;
      v36 = specialized _NativeDictionary.mapValues<A>(_:)((void (*)(char *))partial apply for closure #2 in MLCheckpoint.init(from:), (uint64_t)(&v44 - 4), v35);
      OUTLINED_FUNCTION_30();
      v37 = specialized _NativeDictionary.mapValues<A>(_:)(v36);
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
      v37 = Dictionary.init(dictionaryLiteral:)();
    }
    v38 = v53;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v54[0] = v33;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v37, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, v54);
    v40 = v54[0];
    swift_bridgeObjectRelease();
    v41 = *(void (**)(char *, uint64_t))(v12 + 8);
    v41(v51, v11);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v38, v52);
    v41(v16, v11);
    v42 = v49;
    *(_QWORD *)(v49 + *(int *)(v48 + 32)) = v40;
    outlined init with copy of MLCheckpoint(v42, v44);
    OUTLINED_FUNCTION_30_6();
    outlined destroy of MLCheckpoint(v42);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t closure #2 in MLCheckpoint.init(from:)()
{
  URL.path.getter();
  URL.appendingPathComponent(_:)();
  return swift_bridgeObjectRelease();
}

void MLCheckpoint.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int EnumTagSinglePayload;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  unint64_t v34;
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  char *v46;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MLCheckpoint.CodingKeys>);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v36[1] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  v8 = OUTLINED_FUNCTION_67();
  v9 = *(_QWORD *)(v8 - 8);
  OUTLINED_FUNCTION_3();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v46 = (char *)v36 - v14;
  v16 = a1[3];
  v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  MEMORY[0x22075B344](v16, v15);
  if (one-time initialization token for sessionDirectory != -1)
    swift_once();
  v17 = type metadata accessor for CodingUserInfoKey();
  __swift_project_value_buffer(v17, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  OUTLINED_FUNCTION_25_4();
  OUTLINED_FUNCTION_30();
  if (!v45[3])
  {
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v45, &demangling cache variable for type metadata for Any?);
    OUTLINED_FUNCTION_154(v2, 1);
    goto LABEL_10;
  }
  v37 = v1;
  v18 = swift_dynamicCast();
  OUTLINED_FUNCTION_154(v2, v18 ^ 1u);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v8);
  v20 = v46;
  if (EnumTagSinglePayload == 1)
  {
LABEL_10:
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v2, &demangling cache variable for type metadata for URL?);
    OUTLINED_FUNCTION_7_6();
    __break(1u);
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v46, v2, v8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v36[0] = v9;
  lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v21 = v38;
  v45[0] = URL.path.getter();
  v45[1] = v22;
  v43 = URL.path.getter();
  v44 = v23;
  v41 = 0;
  v42 = 0xE000000000000000;
  v34 = lazy protocol witness table accessor for type String and conformance String();
  v35 = v34;
  v33[0] = MEMORY[0x24BEE0D00];
  v33[1] = v34;
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_3();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  LOBYTE(v45[0]) = 0;
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
  OUTLINED_FUNCTION_29_4();
  v24 = v37;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v24)
  {
    v25 = *(void (**)(char *, uint64_t))(v36[0] + 8);
    v25(v13, v8);
    v26 = OUTLINED_FUNCTION_28_5();
    v27(v26);
    v25(v20, v8);
  }
  else
  {
    OUTLINED_FUNCTION_17_5((uint64_t)v13);
    v28 = type metadata accessor for MLCheckpoint();
    LOBYTE(v45[0]) = *(_BYTE *)(v21 + *(int *)(v28 + 20));
    LOBYTE(v43) = 1;
    lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
    OUTLINED_FUNCTION_26_5();
    LOBYTE(v45[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v45[0]) = 3;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    OUTLINED_FUNCTION_29_4();
    OUTLINED_FUNCTION_26_5();
    v29 = *(_QWORD *)(v21 + *(int *)(v28 + 32));
    v45[0] = specialized Dictionary.compactMapValues<A>(_:)(v29);
    LOBYTE(v43) = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : Double]);
    lazy protocol witness table accessor for type [MLProgress.Metric : Double] and conformance <> [A : B](&lazy protocol witness table cache variable for type [MLProgress.Metric : Double] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric, MEMORY[0x24BEE13D8], MEMORY[0x24BEE04C0]);
    OUTLINED_FUNCTION_8_10();
    OUTLINED_FUNCTION_10_3();
    v30 = specialized Dictionary.compactMapValues<A>(_:)(v29);
    MEMORY[0x24BDAC7A8](v30);
    v31 = (uint64_t)v46;
    v34 = (unint64_t)v46;
    v32 = specialized _NativeDictionary.mapValues<A>(_:)((void (*)(char *))partial apply for closure #3 in MLCheckpoint.encode(to:), (uint64_t)v33, v30);
    OUTLINED_FUNCTION_12_0();
    v45[0] = v32;
    LOBYTE(v43) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : URL]);
    lazy protocol witness table accessor for type [MLProgress.Metric : URL] and conformance <> [A : B]();
    OUTLINED_FUNCTION_8_10();
    OUTLINED_FUNCTION_13_9();
    OUTLINED_FUNCTION_17_5(v31);
    swift_release();
  }
  OUTLINED_FUNCTION_7();
}

uint64_t closure #3 in MLCheckpoint.encode(to:)()
{
  URL.path.getter();
  URL.path.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  URL.init(fileURLWithPath:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Decodable.init(from:) in conformance MLCheckpoint(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MLCheckpoint.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance MLCheckpoint(_QWORD *a1)
{
  MLCheckpoint.encode(to:)(a1);
}

void one-time initialization function for sessionDirectory()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v3, static CodingUserInfoKey.sessionDirectory);
  v4 = __swift_project_value_buffer(v3, (uint64_t)static CodingUserInfoKey.sessionDirectory);
  CodingUserInfoKey.init(rawValue:)();
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v4, v2, v3);
    OUTLINED_FUNCTION_125();
  }
}

unint64_t lazy protocol witness table accessor for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLCheckpoint.CodingKeys, &type metadata for MLCheckpoint.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLCheckpoint.CodingKeys, &type metadata for MLCheckpoint.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLCheckpoint.CodingKeys, &type metadata for MLCheckpoint.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLCheckpoint.CodingKeys, &type metadata for MLCheckpoint.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLCheckpoint.CodingKeys and conformance MLCheckpoint.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLPhase and conformance MLPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLPhase, &type metadata for MLPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLPhase and conformance MLPhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLPhase, &type metadata for MLPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLPhase and conformance MLPhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLPhase, &type metadata for MLPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLPhase and conformance MLPhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLPhase and conformance MLPhase;
  if (!lazy protocol witness table cache variable for type MLPhase and conformance MLPhase)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLPhase, &type metadata for MLPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLPhase and conformance MLPhase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLProgress.Metric, &type metadata for MLProgress.Metric);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLProgress.Metric, &type metadata for MLProgress.Metric);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLProgress.Metric, &type metadata for MLProgress.Metric);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLProgress.Metric, &type metadata for MLProgress.Metric);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric;
  if (!lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLProgress.Metric, &type metadata for MLProgress.Metric);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.Metric and conformance MLProgress.Metric);
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  _OWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  _OWORD v23[2];
  _OWORD v24[2];
  _BYTE v25[8];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  specialized LazyMapSequence.makeIterator()(&v28);
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v25);
  if (!v27)
  {
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : [Int]].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    v7 = v25[0];
    outlined init with take of Any(&v26, v24);
    v8 = *a5;
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    v11 = *(_QWORD *)(v8 + 16);
    v12 = (v9 & 1) == 0;
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      break;
    v14 = v9;
    if (*(_QWORD *)(v8 + 24) >= v13)
    {
      if ((a4 & 1) != 0)
      {
        if ((v9 & 1) != 0)
          goto LABEL_9;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLProgress.Metric, Any>);
        _NativeDictionary.copy()();
        if ((v14 & 1) != 0)
          goto LABEL_9;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a4 & 1);
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v14 & 1) != (v16 & 1))
        goto LABEL_17;
      v10 = v15;
      if ((v14 & 1) != 0)
      {
LABEL_9:
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v23);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
        v17 = (_OWORD *)(*(_QWORD *)(*a5 + 56) + 32 * v10);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
        outlined init with take of Any(v23, v17);
        goto LABEL_13;
      }
    }
    v18 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    *(_BYTE *)(v18[6] + v10) = v7;
    outlined init with take of Any(v24, (_OWORD *)(v18[7] + 32 * v10));
    v19 = v18[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_16;
    v18[2] = v21;
LABEL_13:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v25);
    a4 = 1;
    if (!v27)
      goto LABEL_14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  return specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(a2, (uint64_t)(a2 + 8), *a1, (uint64_t)(a1 + 8));
}

uint64_t outlined init with copy of MLCheckpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLCheckpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLCheckpoint(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLCheckpoint();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #2 in MLCheckpoint.init(from:)()
{
  return closure #2 in MLCheckpoint.init(from:)();
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_0;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Any>);
  result = static _DictionaryStorage.copy(original:)();
  v7 = (_QWORD *)result;
  v8 = 0;
  v32 = a1;
  v11 = *(_QWORD *)(a1 + 64);
  v10 = a1 + 64;
  v9 = v11;
  v12 = 1 << *(_BYTE *)(v10 - 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v9;
  v27 = v10;
  v28 = (unint64_t)(v12 + 63) >> 6;
  v29 = result + 64;
  if ((v13 & v9) == 0)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v15 | (v8 << 6); ; i = __clz(__rbit64(v18)) + (v8 << 6))
  {
    v20 = *(_BYTE *)(*(_QWORD *)(v32 + 48) + i);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v21(v5, *(_QWORD *)(v32 + 56) + *(_QWORD *)(v3 + 72) * i, v2);
    v31 = v2;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v30);
    v21((char *)boxed_opaque_existential_0, (unint64_t)v5, v2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(_QWORD *)(v29 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(v7[6] + i) = v20;
    result = (uint64_t)outlined init with take of Any(v30, (_OWORD *)(v7[7] + 32 * i));
    v23 = v7[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v7[2] = v25;
    if (v14)
      goto LABEL_4;
LABEL_5:
    v17 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_24;
    if (v17 >= v28)
      return (uint64_t)v7;
    v18 = *(_QWORD *)(v27 + 8 * v17);
    ++v8;
    if (!v18)
    {
      v8 = v17 + 1;
      if (v17 + 1 >= v28)
        return (uint64_t)v7;
      v18 = *(_QWORD *)(v27 + 8 * v8);
      if (!v18)
      {
        v8 = v17 + 2;
        if (v17 + 2 >= v28)
          return (uint64_t)v7;
        v18 = *(_QWORD *)(v27 + 8 * v8);
        if (!v18)
          break;
      }
    }
LABEL_18:
    v14 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v28)
    return (uint64_t)v7;
  v18 = *(_QWORD *)(v27 + 8 * v19);
  if (v18)
  {
    v8 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v8 >= v28)
      return (uint64_t)v7;
    v18 = *(_QWORD *)(v27 + 8 * v8);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Any>);
  result = static _DictionaryStorage.copy(original:)();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = result + 64;
  v11 = MEMORY[0x24BEE13C8];
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + i);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v23 = v11;
    *(_QWORD *)&v22 = v18;
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(v3[6] + i) = v17;
    result = (uint64_t)outlined init with take of Any(&v22, (_OWORD *)(v3[7] + 32 * i));
    v19 = v3[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v21;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v14 >= v9)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v9)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v5 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v9)
          return (uint64_t)v3;
        v15 = *(_QWORD *)(v5 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v9)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v9)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v5 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t i;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v4 = type metadata accessor for URL();
  v48 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [CIImage]>);
  result = static _DictionaryStorage.copy(original:)();
  v8 = result;
  v9 = 0;
  v10 = a1 + 64;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a1 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  v40 = result + 64;
  v43 = result;
  v37 = a1 + 64;
  v38 = a1;
  v36 = v14;
  if (!v13)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v13));
  v16 = (v13 - 1) & v13;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v19)) + (v9 << 6))
  {
    v44 = v16;
    v45 = v9;
    v21 = *(_QWORD *)(a1 + 56);
    v22 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v23 = v22[1];
    v46 = *v22;
    v24 = *(_QWORD *)(v21 + 8 * i);
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v39 = i;
      v49 = MEMORY[0x24BEE4AF8];
      v42 = v23;
      v26 = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      v27 = *(unsigned __int8 *)(v48 + 80);
      v41 = v26;
      v28 = v26 + ((v27 + 32) & ~v27);
      v47 = *(_QWORD *)(v48 + 72);
      v29 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
      while (1)
      {
        v29(v6, v28, v4);
        static ImageReader.read(url:)();
        if (v2)
          break;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v4);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v28 += v47;
        if (!--v25)
        {
          v30 = v49;
          swift_bridgeObjectRelease();
          v10 = v37;
          a1 = v38;
          v14 = v36;
          i = v39;
          result = v42;
          goto LABEL_22;
        }
      }
      (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v43;
      swift_release();
      swift_release();
      return v8;
    }
    result = swift_bridgeObjectRetain();
    v30 = MEMORY[0x24BEE4AF8];
LABEL_22:
    *(_QWORD *)(v40 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v31 = i;
    v8 = v43;
    v32 = (_QWORD *)(*(_QWORD *)(v43 + 48) + 16 * v31);
    *v32 = v46;
    v32[1] = result;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v31) = v30;
    v33 = *(_QWORD *)(v8 + 16);
    v18 = __OFADD__(v33, 1);
    v34 = v33 + 1;
    if (v18)
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    *(_QWORD *)(v8 + 16) = v34;
    v13 = v44;
    v9 = v45;
    if (v44)
      goto LABEL_4;
LABEL_5:
    v18 = __OFADD__(v9++, 1);
    if (v18)
      goto LABEL_32;
    if (v9 >= v14)
      return v8;
    v19 = *(_QWORD *)(v10 + 8 * v9);
    if (!v19)
      break;
LABEL_15:
    v16 = (v19 - 1) & v19;
  }
  v20 = v9 + 1;
  if (v9 + 1 >= v14)
    return v8;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
    goto LABEL_14;
  v20 = v9 + 2;
  if (v9 + 2 >= v14)
    return v8;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
    goto LABEL_14;
  v20 = v9 + 3;
  if (v9 + 3 >= v14)
    return v8;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
  {
LABEL_14:
    v9 = v20;
    goto LABEL_15;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v14)
      return v8;
    v19 = *(_QWORD *)(v10 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_15;
  }
LABEL_33:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [URL]>);
  result = static _DictionaryStorage.copy(original:)();
  v7 = (_QWORD *)result;
  v8 = 0;
  v36 = a1;
  v9 = *(_QWORD *)(a1 + 64);
  v32 = (_QWORD *)result;
  v33 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v34 = (unint64_t)(v10 + 63) >> 6;
  v35 = result + 64;
  if ((v11 & v9) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v13 | (v8 << 6); ; i = __clz(__rbit64(v16)) + (v8 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * i);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * i);
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v38 = *v18;
      v40 = v12;
      v41 = v8;
      v42 = MEMORY[0x24BEE4AF8];
      v39 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = v21;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v24 = v42;
      v37 = v23;
      v25 = v23 + 40;
      do
      {
        swift_bridgeObjectRetain();
        URL.init(fileURLWithPath:)();
        swift_bridgeObjectRelease();
        v42 = v24;
        v26 = *(_QWORD *)(v24 + 16);
        if (v26 >= *(_QWORD *)(v24 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v24 = v42;
        }
        v25 += 16;
        *(_QWORD *)(v24 + 16) = v26 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v24+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v26, v5, v2);
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease();
      v7 = v32;
      v12 = v40;
      v8 = v41;
      v20 = v38;
      result = v39;
    }
    else
    {
      result = swift_bridgeObjectRetain();
      v24 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)(v35 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v27 = (_QWORD *)(v7[6] + 16 * i);
    *v27 = v20;
    v27[1] = result;
    *(_QWORD *)(v7[7] + 8 * i) = v24;
    v28 = v7[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v7[2] = v30;
    if (v12)
      goto LABEL_4;
LABEL_5:
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_31;
    if (v15 >= v34)
      return (uint64_t)v7;
    v16 = *(_QWORD *)(v33 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v34)
        return (uint64_t)v7;
      v16 = *(_QWORD *)(v33 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v34)
          return (uint64_t)v7;
        v16 = *(_QWORD *)(v33 + 8 * v8);
        if (!v16)
          break;
      }
    }
LABEL_18:
    v12 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v34)
    return (uint64_t)v7;
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v34)
      return (uint64_t)v7;
    v16 = *(_QWORD *)(v33 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  result = static _DictionaryStorage.copy(original:)();
  v3 = (_QWORD *)result;
  v4 = 0;
  v35 = a1;
  v5 = *(_QWORD *)(a1 + 64);
  v31 = (_QWORD *)result;
  v32 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v33 = (unint64_t)(v6 + 63) >> 6;
  v34 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v9 | (v4 << 6); ; i = __clz(__rbit64(v12)) + (v4 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v35 + 48) + 16 * i);
    v15 = *v14;
    v16 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * i);
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v36 = *v14;
      v38 = v8;
      v39 = MEMORY[0x24BEE4AF8];
      v37 = v14[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v18 = v39;
      v19 = *(_QWORD *)(type metadata accessor for URL() - 8);
      v20 = v16 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
      v21 = *(_QWORD *)(v19 + 72);
      do
      {
        v22 = URL.path.getter();
        v24 = v23;
        v25 = *(_QWORD *)(v39 + 16);
        if (v25 >= *(_QWORD *)(v39 + 24) >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        *(_QWORD *)(v39 + 16) = v25 + 1;
        v26 = v39 + 16 * v25;
        *(_QWORD *)(v26 + 32) = v22;
        *(_QWORD *)(v26 + 40) = v24;
        v20 += v21;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
      v3 = v31;
      v8 = v38;
      result = v37;
      v15 = v36;
    }
    else
    {
      result = swift_bridgeObjectRetain();
      v18 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)(v34 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v27 = (_QWORD *)(v3[6] + 16 * i);
    *v27 = v15;
    v27[1] = result;
    *(_QWORD *)(v3[7] + 8 * i) = v18;
    v28 = v3[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v3[2] = v30;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_31;
    if (v11 >= v33)
      return (uint64_t)v3;
    v12 = *(_QWORD *)(v32 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v33)
        return (uint64_t)v3;
      v12 = *(_QWORD *)(v32 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v33)
          return (uint64_t)v3;
        v12 = *(_QWORD *)(v32 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v8 = (v12 - 1) & v12;
  }
  v13 = v11 + 3;
  if (v13 >= v33)
    return (uint64_t)v3;
  v12 = *(_QWORD *)(v32 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v33)
      return (uint64_t)v3;
    v12 = *(_QWORD *)(v32 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_18;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t i;
  BOOL v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;

  v4 = v3;
  v37 = a1;
  v38 = a2;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v36 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, URL>);
  result = static _DictionaryStorage.copy(original:)();
  v13 = result;
  v14 = 0;
  v39 = a3;
  v40 = result;
  v17 = *(_QWORD *)(a3 + 64);
  v16 = a3 + 64;
  v15 = v17;
  v18 = 1 << *(_BYTE *)(v16 - 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v15;
  v33 = v16;
  v34 = (unint64_t)(v18 + 63) >> 6;
  v35 = result + 64;
  v21 = v36;
  if (!v20)
    goto LABEL_5;
LABEL_4:
  v41 = (v20 - 1) & v20;
  v42 = v14;
  for (i = __clz(__rbit64(v20)) | (v14 << 6); ; i = __clz(__rbit64(v25)) + (v24 << 6))
  {
    v27 = *(_BYTE *)(*(_QWORD *)(v39 + 48) + i);
    v28 = *(_QWORD *)(v7 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v11, *(_QWORD *)(v39 + 56) + v28, v6);
    v37(v11);
    if (v4)
    {
      v13 = v40;
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      return v13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    *(_QWORD *)(v35 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v29 = v40;
    *(_BYTE *)(*(_QWORD *)(v40 + 48) + i) = v27;
    v13 = v29;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v29 + 56) + v28, v21, v6);
    v30 = *(_QWORD *)(v13 + 16);
    v23 = __OFADD__(v30, 1);
    v31 = v30 + 1;
    if (v23)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    *(_QWORD *)(v13 + 16) = v31;
    v4 = 0;
    v14 = v42;
    v20 = v41;
    if (v41)
      goto LABEL_4;
LABEL_5:
    v23 = __OFADD__(v14, 1);
    v24 = v14 + 1;
    if (v23)
      goto LABEL_28;
    if (v24 >= v34)
      return v13;
    v25 = *(_QWORD *)(v33 + 8 * v24);
    if (!v25)
      break;
LABEL_15:
    v41 = (v25 - 1) & v25;
    v42 = v24;
  }
  v26 = v24 + 1;
  if (v24 + 1 >= v34)
    return v13;
  v25 = *(_QWORD *)(v33 + 8 * v26);
  if (v25)
    goto LABEL_14;
  v26 = v24 + 2;
  if (v24 + 2 >= v34)
    return v13;
  v25 = *(_QWORD *)(v33 + 8 * v26);
  if (v25)
    goto LABEL_14;
  v26 = v24 + 3;
  if (v24 + 3 >= v34)
    return v13;
  v25 = *(_QWORD *)(v33 + 8 * v26);
  if (v25)
  {
LABEL_14:
    v24 = v26;
    goto LABEL_15;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v34)
      return v40;
    v25 = *(_QWORD *)(v33 + 8 * v24);
    ++v26;
    if (v25)
      goto LABEL_15;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x22075B938](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #3 in MLCheckpoint.encode(to:)()
{
  return closure #3 in MLCheckpoint.encode(to:)();
}

_QWORD *initializeBufferWithCopyOfBuffer for MLCheckpoint(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MLCheckpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for MLCheckpoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLCheckpoint()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE3587C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v6 = OUTLINED_FUNCTION_15_7();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  v9 = type metadata accessor for Date();
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v9;
    v8 = v4 + *(int *)(a3 + 28);
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  v11 = *(_QWORD *)(v4 + *(int *)(a3 + 32));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for MLCheckpoint()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AE3591C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = OUTLINED_FUNCTION_15_7();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
LABEL_5:
    __swift_storeEnumTagSinglePayload(v10, v4, v4, v9);
    return;
  }
  v11 = type metadata accessor for Date();
  if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
  {
    v9 = v11;
    v10 = v5 + *(int *)(a4 + 28);
    goto LABEL_5;
  }
  *(_QWORD *)(v5 + *(int *)(a4 + 32)) = (v4 - 1);
  OUTLINED_FUNCTION_125();
}

uint64_t type metadata completion function for MLCheckpoint()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MLCheckpoint.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MLCheckpoint.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21AE35B20 + 4 * byte_21AFE8EBB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_21AE35B54 + 4 * byte_21AFE8EB6[v4]))();
}

uint64_t sub_21AE35B54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AE35B5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AE35B64);
  return result;
}

uint64_t sub_21AE35B70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AE35B78);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_21AE35B7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AE35B84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for MLCheckpoint.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLCheckpoint.CodingKeys()
{
  return &type metadata for MLCheckpoint.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_2_10()
{
  return type metadata accessor for MLCheckpoint();
}

uint64_t OUTLINED_FUNCTION_3_8()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_4_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 136), v0);
}

uint64_t OUTLINED_FUNCTION_6_9(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_7_6()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_8_10()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_13_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 160) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_15_7()
{
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_16_8()
{
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_17_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_19_8()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_20_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_22_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

double OUTLINED_FUNCTION_25_4()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Dictionary.subscript.getter(v0, (_OWORD *)(v1 - 112));
}

uint64_t OUTLINED_FUNCTION_26_5()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_27_9()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_28_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_30_6()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0);
}

uint64_t OUTLINED_FUNCTION_31_7()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v1 = v0;
  OUTLINED_FUNCTION_1_11();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v5 = v4 - v3;
  result = outlined init with copy of Any?(v1, (uint64_t)&v7);
  if (v8)
  {
    outlined init with take of Any(&v7, &v9);
    OUTLINED_FUNCTION_16_0();
    MLDecisionTreeRegressor.ModelParameters.ValidationData.table.getter();
    return outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLDecisionTreeRegressor.ModelParameters.validationData : MLDecisionTreeRegressor.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = MLDecisionTreeRegressor.ModelParameters.validationData.getter();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for MLDecisionTreeRegressor.ModelParameters.validationData : MLDecisionTreeRegressor.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1;
  id v3;
  unsigned __int8 v4;

  v1 = *(_BYTE *)(a1 + 8);
  v3 = *(id *)a1;
  v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v13[4];

  v2 = v1;
  OUTLINED_FUNCTION_1_11();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  v8 = *(void **)a1;
  v9 = *(unsigned __int8 *)(a1 + 8);
  v13[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v13);
  if (v9 == 255)
  {
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(_QWORD *)v7 = v8;
    *(_BYTE *)(v7 + 8) = v9 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData(v7, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v13, v2);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validation.getter()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  result = outlined init with copy of Any?(v0, (uint64_t)&v2);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    OUTLINED_FUNCTION_1_11();
    return OUTLINED_FUNCTION_16_0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void (*MLDecisionTreeRegressor.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  MLDecisionTreeRegressor.ModelParameters.validationData.getter();
  return MLDecisionTreeRegressor.ModelParameters.validationData.modify;
}

void MLDecisionTreeRegressor.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned __int8 v5;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(void **)a1;
  v5 = v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of MLDataTable?(v2, v3);
    MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLDecisionTreeRegressor.ModelParameters.validation : MLDecisionTreeRegressor.ModelParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)v4);
  return MLDecisionTreeRegressor.ModelParameters.validation.setter((uint64_t)v4);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v5[4];

  v5[3] = OUTLINED_FUNCTION_1_11();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1);
}

void (*MLDecisionTreeRegressor.ModelParameters.validation.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  void (*result)(uint64_t **, char);

  v2 = v1;
  v4 = malloc(0xA0uLL);
  *a1 = v4;
  v4[16] = v2;
  v5 = OUTLINED_FUNCTION_1_11();
  v4[17] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[18] = malloc(v6);
  v4[19] = malloc(v6);
  result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v2, (uint64_t)(v4 + 4));
  if (v4[7])
  {
    outlined init with take of Any((_OWORD *)v4 + 2, v4);
    OUTLINED_FUNCTION_16_0();
    return MLDecisionTreeRegressor.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLDecisionTreeRegressor.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v7;

  v2 = *a1;
  v3 = (void *)(*a1)[18];
  v4 = (void *)(*a1)[19];
  v5 = (*a1)[17];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 8));
    outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v5;
    v7 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v7);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 12));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.maxDepth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.maxDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*MLDecisionTreeRegressor.ModelParameters.maxDepth.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLDecisionTreeRegressor.ModelParameters.minLossReduction.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void MLDecisionTreeRegressor.ModelParameters.minLossReduction.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*MLDecisionTreeRegressor.ModelParameters.minLossReduction.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLDecisionTreeRegressor.ModelParameters.minChildWeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void MLDecisionTreeRegressor.ModelParameters.minChildWeight.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLDecisionTreeRegressor.ModelParameters.minChildWeight.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.randomSeed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.randomSeed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*MLDecisionTreeRegressor.ModelParameters.randomSeed.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.init(validation:maxDepth:minLossReduction:minChildWeight:randomSeed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v19[4];

  v12 = OUTLINED_FUNCTION_1_11();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_49();
  v16 = v15 - v14;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 32) = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(_QWORD *)(a4 + 56) = a3;
  outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1, v15 - v14);
  v19[3] = v12;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v19);
  outlined init with take of MLDecisionTreeRegressor.ModelParameters.ValidationData(v16, (uint64_t)boxed_opaque_existential_0);
  OUTLINED_FUNCTION_17_0((uint64_t)v19);
  return outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData(a1);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.init(validationData:maxDepth:minLossReduction:minChildWeight:randomSeed:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v6;
  char v7;
  uint64_t v9;
  char v10;

  v6 = *a1;
  v7 = *((_BYTE *)a1 + 8);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 32) = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(_QWORD *)(a4 + 56) = a3;
  v9 = v6;
  v10 = v7;
  return MLDecisionTreeRegressor.ModelParameters.validationData.setter((uint64_t)&v9);
}

uint64_t MLDecisionTreeRegressor.ModelParameters.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v8;

  v0._countAndFlagsBits = OUTLINED_FUNCTION_5_11();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 10;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _StringGuts.grow(_:)(23);
  v2._countAndFlagsBits = 0xD000000000000014;
  v2._object = (void *)0x800000021AFF13C0;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_2_11();
  OUTLINED_FUNCTION_0_1();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(21);
  v4._object = (void *)0x800000021AFF13E0;
  v4._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  OUTLINED_FUNCTION_2_11();
  OUTLINED_FUNCTION_0_1();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v8, "Random Seed: ");
  HIWORD(v8._object) = -4864;
  v6._countAndFlagsBits = OUTLINED_FUNCTION_5_11();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_1();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0x747065442078614DLL;
}

uint64_t MLDecisionTreeRegressor.ModelParameters.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MLDecisionTreeRegressor.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21AE367B8()
{
  return MLDecisionTreeRegressor.ModelParameters.validation.getter();
}

uint64_t initializeWithCopy for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  return a1;
}

uint64_t assignWithCopy for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDecisionTreeRegressor.ModelParameters(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDecisionTreeRegressor.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDecisionTreeRegressor.ModelParameters()
{
  return &type metadata for MLDecisionTreeRegressor.ModelParameters;
}

uint64_t OUTLINED_FUNCTION_1_11()
{
  return type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
}

uint64_t OUTLINED_FUNCTION_2_11()
{
  return Double.write<A>(to:)();
}

uint64_t OUTLINED_FUNCTION_5_11()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t MLModelMetadata.init(author:shortDescription:license:version:additional:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

void MLModelMetadata.author.getter()
{
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_22();
}

void MLModelMetadata.author.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_23_5();
  swift_bridgeObjectRelease();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLModelMetadata.author.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLModelMetadata.shortDescription.getter()
{
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_22();
}

void MLModelMetadata.shortDescription.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_23_5();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLModelMetadata.shortDescription.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLModelMetadata.license.getter()
{
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_22();
}

void MLModelMetadata.license.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_23_5();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v0;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLModelMetadata.license.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLModelMetadata.version.getter()
{
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_22();
}

void MLModelMetadata.version.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_23_5();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v0;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLModelMetadata.version.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLModelMetadata.additional.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLModelMetadata.additional.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*MLModelMetadata.additional.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t destroy for MLModelMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MLModelMetadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MLModelMetadata(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy72_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for MLModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLModelMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLModelMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLModelMetadata()
{
  return &type metadata for MLModelMetadata;
}

uint64_t OUTLINED_FUNCTION_3_9()
{
  uint64_t v0;

  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for TreeRegressor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    v8 = *(int *)(a3 + 28);
    v9 = (char *)a2 + v8;
    v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    v11 = type metadata accessor for BaseTreeRegressor();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for TreeRegressor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for BaseTreeRegressor();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for TreeRegressor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a2 + v7;
  v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  v10 = type metadata accessor for BaseTreeRegressor();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

_QWORD *assignWithCopy for TreeRegressor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for BaseTreeRegressor();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for TreeRegressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for BaseTreeRegressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for TreeRegressor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for BaseTreeRegressor();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TreeRegressor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE37244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_122_1();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TreeRegressor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE372C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = OUTLINED_FUNCTION_122_1();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TreeRegressor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TreeRegressor;
  if (!type metadata singleton initialization cache for TreeRegressor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for TreeRegressor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BaseTreeRegressor();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void associated type witness table accessor for SupervisedTabularEstimator.Transformer : TabularTransformer in TreeRegressor()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type TreeRegressorModel and conformance TreeRegressorModel, (void (*)(uint64_t))type metadata accessor for TreeRegressorModel);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      OUTLINED_FUNCTION_31_2();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 += 4;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  char v18;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    OUTLINED_FUNCTION_63_5();
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      if ((*v11 != a1 || v11[1] != a2) && (OUTLINED_FUNCTION_102_0() & 1) == 0)
      {
        v13 = ~v7;
        v14 = (v8 + 1) & v13;
        OUTLINED_FUNCTION_63_5();
        if ((v15 & 1) != 0)
        {
          do
          {
            v16 = (_QWORD *)(v10 + 16 * v14);
            if (*v16 == a1 && v16[1] == a2)
              break;
            if ((OUTLINED_FUNCTION_102_0() & 1) != 0)
              break;
            v14 = (v14 + 1) & v13;
            OUTLINED_FUNCTION_63_5();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, unint64_t, uint64_t);
  char v12;
  uint64_t v14;

  v4 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v4 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]), v6 = dispatch thunk of Hashable._rawHashValue(seed:)(), v7 = -1 << *(_BYTE *)(a2 + 32), v8 = v6 & ~v7, ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v14 + 72);
    v11 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
    do
    {
      v11(v2, *(_QWORD *)(a2 + 48) + v10 * v8, v4);
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v4);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t TreeRegressor.init(annotationColumnName:featureColumnNames:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v11 = type metadata accessor for BoostedTreeConfiguration();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_54_0();
  v13 = OUTLINED_FUNCTION_122_1();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_161();
  *(_QWORD *)a5 = a1;
  *((_QWORD *)a5 + 1) = a2;
  *((_QWORD *)a5 + 2) = a3;
  *((_QWORD *)a5 + 3) = a3;
  *((_QWORD *)a5 + 4) = 0xD000000000000013;
  *((_QWORD *)a5 + 5) = 0x800000021AFF21B0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v5, a4, v11);
  swift_bridgeObjectRetain();
  BaseTreeRegressor.init(configuration:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a4, v11);
  v15 = type metadata accessor for TreeRegressor();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 32))(&a5[*(int *)(v15 + 28)], v6, v13);
}

void TreeRegressor.fitted(to:validateOn:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ML16ColumnDescriptorVsAE_pTg5;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, _QWORD);
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[4];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[4];

  OUTLINED_FUNCTION_8_1();
  a19 = v24;
  a20 = v25;
  v82 = v26;
  v83 = v27;
  v84 = v28;
  v30 = v29;
  v80 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_38_4(v33, v75[0]);
  v34 = type metadata accessor for DataFrame();
  v88 = *(_QWORD *)(v34 - 8);
  v89 = v34;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_64();
  v87 = v36;
  v37 = OUTLINED_FUNCTION_121_1();
  v38 = *(_QWORD *)(v37 - 8);
  v77 = v37;
  v78 = v38;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_208();
  v81 = v40;
  v42 = MEMORY[0x24BDAC7A8](v41);
  v76 = (uint64_t)v75 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v79 = (uint64_t)v75 - v44;
  v90 = OUTLINED_FUNCTION_123_1();
  v86 = *(_QWORD *)(v90 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v45);
  OUTLINED_FUNCTION_91_1();
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  OUTLINED_FUNCTION_67_4();
  v48 = MEMORY[0x24BDAC7A8](v47);
  v50 = (char *)v75 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v48);
  v52 = (char *)v75 - v51;
  v54 = v21[3];
  v53 = v21[4];
  v92 = v30;
  v93 = v53;
  v91 = v21;
  v55 = v21[5];
  v94[2] = v30;
  OUTLINED_FUNCTION_199();
  ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)closure #1 in FeatureVectorizer.fitted(to:)partial apply, (uint64_t)v94, v54);
  swift_bridgeObjectRelease();
  if (v22)
    goto LABEL_3;
  v75[1] = (uint64_t)v50;
  v75[2] = v20;
  v75[3] = v46;
  swift_bridgeObjectRetain();
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
  v57 = v55;
  v75[0] = (uint64_t)v52;
  v58 = v91;
  MEMORY[0x220758A1C](*v91, v91[1]);
  AnyColumn.convertedToFloats()();
  v60 = v59;
  v61 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
  v61(v23, v90);
  v92 = v60;
  if (v60)
  {
    v62 = v85;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v84, v85, &demangling cache variable for type metadata for DataFrame?);
    v63 = v89;
    if (__swift_getEnumTagSinglePayload(v62, 1, v89) == 1)
    {
      outlined destroy of FeatureMatrixBuilder<Float>(v62, &demangling cache variable for type metadata for DataFrame?);
      OUTLINED_FUNCTION_124_0();
      v64 = v81;
      BaseTreeRegressor.fitted(features:annotations:eventHandler:)();
      v65 = OUTLINED_FUNCTION_89_1();
      OUTLINED_FUNCTION_69_2(v65, v66);
      v86 = ML16ColumnDescriptorVsAE_pTg5;
      swift_release();
      v67 = v79;
      OUTLINED_FUNCTION_103_1(v79, v64);
      v68 = v80;
LABEL_9:
      v72 = *v91;
      v71 = v91[1];
      v73 = OUTLINED_FUNCTION_42_2();
      OUTLINED_FUNCTION_103_1((uint64_t)v68 + *(int *)(v73 + 24), v67);
      *v68 = v72;
      v68[1] = v71;
      v74 = v93;
      v68[2] = v86;
      v68[3] = v74;
      v68[4] = v57;
      swift_bridgeObjectRetain();
LABEL_3:
      OUTLINED_FUNCTION_7();
      return;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32))(v87, v62, v63);
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    v85 = v57;
    v86 = ML16ColumnDescriptorVsAE_pTg5;
    MEMORY[0x220758A1C](*v58, v58[1]);
    AnyColumn.convertedToFloats()();
    v70 = v69;
    v61(v23, v90);
    if (v70)
    {
      OUTLINED_FUNCTION_124_0();
      BaseTreeRegressor.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:eventHandler:)();
      v67 = v79;
      v68 = v80;
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_58_2();
      OUTLINED_FUNCTION_97_1();
      OUTLINED_FUNCTION_60_3((uint64_t)&a15);
      OUTLINED_FUNCTION_103_1(v67, v76);
      v57 = v85;
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t TreeRegressor.annotationColumnID.getter()
{
  swift_bridgeObjectRetain();
  return ColumnID.init(_:_:)();
}

void TreeRegressor.annotationColumnID.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Float>);
  v5 = ColumnID.name.getter();
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  *v2 = v5;
  v2[1] = v7;
  OUTLINED_FUNCTION_164();
}

void specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)()
{
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
}

{
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD);
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  void (*v9)(uint64_t, _QWORD);

  OUTLINED_FUNCTION_8_1();
  v9 = v1;
  v3 = v2;
  v8 = v4;
  v5 = type metadata accessor for DataFrame();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_54_0();
  v7 = OUTLINED_FUNCTION_199();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(v7);
  OUTLINED_FUNCTION_104();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  DataFrame.selecting<A>(columnNames:)();
  OUTLINED_FUNCTION_106_0();
  v9(v3, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v5);
  OUTLINED_FUNCTION_7();
}

uint64_t TreeRegressor.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  __swift_mutable_project_boxed_opaque_existential_1(a2, *(_QWORD *)(a2 + 24));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer?);
  lazy protocol witness table accessor for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?();
  result = dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  if (!v2)
  {
    OUTLINED_FUNCTION_42_2();
    __swift_mutable_project_boxed_opaque_existential_1(a2, *(_QWORD *)(a2 + 24));
    OUTLINED_FUNCTION_121_1();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type BaseTreeRegressorModel and conformance BaseTreeRegressorModel, (void (*)(uint64_t))MEMORY[0x24BDC5CB0]);
    return dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  }
  return result;
}

void TreeRegressor.decode(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_8_1();
  v11 = v0;
  v12 = v2;
  v4 = v3;
  v5 = OUTLINED_FUNCTION_121_1();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v16 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  __swift_mutable_project_boxed_opaque_existential_1(v4, *(_QWORD *)(v4 + 24));
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer and conformance FeatureVectorizer<A>.Transformer, &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  dispatch thunk of EstimatorDecoder.decode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1(v4, *(_QWORD *)(v4 + 24));
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type BaseTreeRegressorModel and conformance BaseTreeRegressorModel, (void (*)(uint64_t))MEMORY[0x24BDC5CB0]);
    dispatch thunk of EstimatorDecoder.decode<A>(_:)();
    v9 = *v0;
    v8 = v11[1];
    v10 = OUTLINED_FUNCTION_42_2();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(&v12[*(int *)(v10 + 24)], v16, v5);
    *(_QWORD *)v12 = v9;
    *((_QWORD *)v12 + 1) = v8;
    *((_QWORD *)v12 + 2) = v13;
    *((_QWORD *)v12 + 3) = v14;
    *((_QWORD *)v12 + 4) = v15;
    swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_7();
}

void (*protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance TreeRegressor(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Float>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  TreeRegressor.annotationColumnID.getter();
  return protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance TreeRegressor;
}

void protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance TreeRegressor(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    TreeRegressor.annotationColumnID.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    TreeRegressor.annotationColumnID.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

#error "21AE38308: call analysis failed (funcsize=24)"

uint64_t protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance TreeRegressor(uint64_t a1, uint64_t a2)
{
  return TreeRegressor.encode(_:to:)(a1, a2);
}

void protocol witness for SupervisedTabularEstimator.decode(from:) in conformance TreeRegressor()
{
  TreeRegressor.decode(from:)();
}

void base witness table accessor for SupervisedTabularEstimator in TreeRegressor()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type TreeRegressor and conformance TreeRegressor, (void (*)(uint64_t))type metadata accessor for TreeRegressor);
}

void TreeRegressor.makeTransformer()(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  type metadata accessor for TreeRegressor();
  type metadata accessor for TreeRegressorModel();
  swift_bridgeObjectRetain();
  BaseTreeRegressor.makeTransformer()();
  *a1 = v4;
  a1[1] = v3;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  OUTLINED_FUNCTION_164();
}

void TreeRegressor.update(_:with:eventHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ML16ColumnDescriptorVsAE_pTg5;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_8_1();
  v22 = v4;
  v23 = v5;
  v7 = v6;
  v9 = v8;
  v24 = OUTLINED_FUNCTION_123_1();
  v10 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_91_1();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  v20 = *(_QWORD *)(v11 - 8);
  v21 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_161();
  if (!v9[2])
  {
    v19 = (uint64_t)&v19;
    v16 = v0[2];
    MEMORY[0x24BDAC7A8](v13);
    v18[2] = v7;
    swift_bridgeObjectRetain();
    ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)partial apply for closure #1 in FeatureVectorizer.fitted(to:), (uint64_t)v18, v16);
    swift_bridgeObjectRelease();
    if (v1)
      goto LABEL_6;
    outlined consume of FeatureVectorizer<Float>.Transformer?(v9[2]);
    v9[2] = ML16ColumnDescriptorVsAE_pTg5;
    v9[3] = 0xD000000000000013;
    v9[4] = 0x800000021AFF21B0;
  }
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
  if (v1)
  {
LABEL_6:
    OUTLINED_FUNCTION_88();
    OUTLINED_FUNCTION_7();
    return;
  }
  MEMORY[0x220758A1C](*v0, v0[1]);
  AnyColumn.convertedToFloats()();
  v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v24);
  if (v15)
  {
    OUTLINED_FUNCTION_124_0();
    OUTLINED_FUNCTION_42_2();
    BaseTreeRegressor.update(_:features:annotations:eventHandler:)();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v3, v21);
    swift_release();
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.update(_:with:eventHandler:) in conformance TreeRegressor()
{
  uint64_t v0;

  TreeRegressor.update(_:with:eventHandler:)();
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.encodeWithOptimizer(_:to:) in conformance TreeRegressor(uint64_t a1, uint64_t a2)
{
  return protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance TreeRegressor(a1, a2);
}

void protocol witness for UpdatableSupervisedTabularEstimator.decodeWithOptimizer(from:) in conformance TreeRegressor()
{
  protocol witness for SupervisedTabularEstimator.decode(from:) in conformance TreeRegressor();
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer?);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer and conformance FeatureVectorizer<A>.Transformer, &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
    v3 = v2;
    result = MEMORY[0x22075B938](MEMORY[0x24BEE4AA8], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?);
  }
  return result;
}

void specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:)()
{
  _QWORD *v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  OUTLINED_FUNCTION_8_1();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  OUTLINED_FUNCTION_123_1();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_54_0();
  v10 = DataFrame.shape.getter();
  OUTLINED_FUNCTION_113_0();
  specialized FeatureMatrixBuilder.init(rowCount:featureDescriptors:includesBias:)(v10, v4, v2, (uint64_t)v0);
  if (*(_QWORD *)(v4 + 16))
  {
    OUTLINED_FUNCTION_113_0();
    v11 = *(_QWORD *)(v4 + 40);
    v12 = *(_QWORD *)(v4 + 48);
    v13 = *(_BYTE *)(v4 + 56);
    v14 = *(_QWORD *)(v4 + 32);
    OUTLINED_FUNCTION_199();
    outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v12, v13);
    MEMORY[0x220758A1C](v14, v11);
    if (*(_QWORD *)(*v0 + 16))
    {
      if (*(_QWORD *)(v0[1] + 16))
        __asm { BR              X8 }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x21AE389FCLL);
  }
  v15 = (char *)v0 + *(int *)(v8 + 44);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v6, v15, v16);
  outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v0, &demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_7();
}

void specialized DataFrame.asMatrix<A>(of:descriptors:includingBias:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[6];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  int v26;

  v7 = type metadata accessor for AnyColumn();
  v21 = *(_QWORD *)(v7 - 8);
  v22 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v24 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (_QWORD *)((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = v3;
  v12 = DataFrame.shape.getter();
  swift_bridgeObjectRetain();
  specialized FeatureMatrixBuilder.init(rowCount:featureDescriptors:includesBias:)(v12, a1, a2, (uint64_t)v11);
  if (*(_QWORD *)(a1 + 16))
  {
    v19[0] = v9;
    v19[1] = a3;
    swift_bridgeObjectRetain();
    v19[2] = 0x800000021AFF2AD0;
    v19[3] = 0x800000021AFF2B00;
    v25 = v11;
    v19[5] = a1;
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(unsigned __int8 *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain();
    v26 = v15;
    outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v14, v15);
    MEMORY[0x220758A1C](v16, v13);
    if (*(_QWORD *)(*v11 + 16))
    {
      if (*(_QWORD *)(v11[1] + 16))
        __asm { BR              X8 }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x21AE38E10);
  }
  v17 = (char *)v11 + *(int *)(v9 + 44);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a3, v17, v18);
  outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v11, &demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
}

uint64_t specialized FeatureMatrixBuilder.init(rowCount:featureDescriptors:includesBias:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD *, _QWORD);
  _DWORD *v24;
  _QWORD v27[4];

  v4 = result;
  *(_QWORD *)a4 = a2;
  *(_BYTE *)(a4 + 16) = a3;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = 0;
    v8 = (char *)(a2 + 56);
    v9 = MEMORY[0x24BEE4AF8];
    do
    {
      v10 = *((_QWORD *)v8 - 1);
      v11 = *v8;
      swift_bridgeObjectRetain();
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v10, v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
        v9 = v17;
      }
      v13 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v9);
        v9 = v18;
      }
      *(_QWORD *)(v9 + 16) = v13 + 1;
      *(_QWORD *)(v9 + 8 * v13 + 32) = v7;
      ColumnDescriptor.ColumnTypeDescriptor.featureSize.getter(v10, v11);
      v15 = v14;
      swift_bridgeObjectRelease();
      result = outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v10, v11);
      v16 = __OFADD__(v7, v15);
      v7 += v15;
      if (v16)
      {
        __break(1u);
        goto LABEL_21;
      }
      v8 += 32;
      --v5;
    }
    while (v5);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a4 + 8) = v9;
    if ((a3 & 1) == 0)
      goto LABEL_13;
  }
  else
  {
    v7 = 0;
    *(_QWORD *)(a4 + 8) = MEMORY[0x24BEE4AF8];
    if ((a3 & 1) == 0)
    {
LABEL_13:
      v20 = 0;
      v19 = v7;
      goto LABEL_14;
    }
  }
  v19 = v7;
  if (__OFADD__(v7, 1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v20 = 1;
LABEL_14:
  LODWORD(v27[0]) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
  lazy protocol witness table accessor for type Float and conformance Float();
  result = DenseMatrix.init(rowCount:columnCount:layout:repeating:)();
  if (!v20)
    return result;
  if (v4 < 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  if (v4)
  {
    v21 = 0;
    do
    {
      v22 = v21 + 1;
      v23 = (uint64_t (*)(_QWORD *, _QWORD))specialized DenseMatrix.subscript.modify(v27, v21, v19);
      *v24 = 1065353216;
      result = v23(v27, 0);
      v21 = v22;
    }
    while (v4 != v22);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD *, _QWORD);
  _QWORD *v24;
  _QWORD v27[4];

  v4 = result;
  *(_QWORD *)a4 = a2;
  *(_BYTE *)(a4 + 16) = a3;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = 0;
    v8 = (char *)(a2 + 56);
    v9 = MEMORY[0x24BEE4AF8];
    do
    {
      v10 = *((_QWORD *)v8 - 1);
      v11 = *v8;
      swift_bridgeObjectRetain();
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v10, v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
        v9 = v17;
      }
      v13 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v9);
        v9 = v18;
      }
      *(_QWORD *)(v9 + 16) = v13 + 1;
      *(_QWORD *)(v9 + 8 * v13 + 32) = v7;
      ColumnDescriptor.ColumnTypeDescriptor.featureSize.getter(v10, v11);
      v15 = v14;
      swift_bridgeObjectRelease();
      result = outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v10, v11);
      v16 = __OFADD__(v7, v15);
      v7 += v15;
      if (v16)
      {
        __break(1u);
        goto LABEL_21;
      }
      v8 += 32;
      --v5;
    }
    while (v5);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a4 + 8) = v9;
    if ((a3 & 1) == 0)
      goto LABEL_13;
  }
  else
  {
    v7 = 0;
    *(_QWORD *)(a4 + 8) = MEMORY[0x24BEE4AF8];
    if ((a3 & 1) == 0)
    {
LABEL_13:
      v20 = 0;
      v19 = v7;
      goto LABEL_14;
    }
  }
  v19 = v7;
  if (__OFADD__(v7, 1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v20 = 1;
LABEL_14:
  v27[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
  lazy protocol witness table accessor for type Double and conformance Double();
  result = DenseMatrix.init(rowCount:columnCount:layout:repeating:)();
  if (!v20)
    return result;
  if (v4 < 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  if (v4)
  {
    v21 = 0;
    do
    {
      v22 = v21 + 1;
      v23 = (uint64_t (*)(_QWORD *, _QWORD))specialized DenseMatrix.subscript.modify(v27, v21, v19);
      *v24 = 0x3FF0000000000000;
      result = v23(v27, 0);
      v21 = v22;
    }
    while (v4 != v22);
  }
  return result;
}

uint64_t specialized FeatureMatrixBuilder.fillCategorical(from:categories:column:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  float v25;
  void (*v26)(Swift::Int *, _QWORD);
  float *v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int *v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  uint64_t v47;
  _QWORD *v48;
  BOOL v49;
  void (*v50)(Swift::Int *, _QWORD);
  float *v51;
  unint64_t v52;
  _QWORD *v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  BOOL v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  double v73;
  char v74;
  float v75;
  void (*v76)(Swift::Int *, _QWORD);
  float *v77;
  uint64_t (*v78)(char *, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  char v93;
  uint64_t (*v94)(Swift::Int *, _QWORD);
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t (*v109)(Swift::Int *, _QWORD);
  float *v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  Swift::Int v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[2];
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t (**v124)(uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  Swift::Int v132;
  unint64_t v133;
  uint64_t v134;

  v125 = a2;
  v131 = a3;
  v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  v120[0] = *(_QWORD *)(v121 - 8);
  MEMORY[0x24BDAC7A8](v121);
  v122 = (char *)v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  v127 = *(uint64_t **)(v129 - 8);
  MEMORY[0x24BDAC7A8](v129);
  v128 = (char *)v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  v5 = *(_QWORD *)(v130 - 8);
  MEMORY[0x24BDAC7A8](v130);
  v7 = (uint64_t (**)(uint64_t, uint64_t))((char *)v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v124 = *(uint64_t (***)(uint64_t, uint64_t))(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyColumn.wrappedElementType.getter();
  if (!swift_dynamicCastMetatype())
  {
    v123 = v5;
    v124 = v7;
    AnyColumn.wrappedElementType.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (!swift_dynamicCastMetatype())
    {
      AnyColumn.wrappedElementType.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
      if (!swift_dynamicCastMetatype())
        goto LABEL_89;
      v60 = (char *)v124;
      AnyColumn.assumingType<A>(_:)();
      v61 = v130;
      result = Column.count.getter();
      if (result < 0)
        goto LABEL_143;
      v62 = (char *)result;
      v63 = v123;
      if (result)
      {
        v64 = 0;
        v65 = *(_QWORD *)(v125 + 16);
        v128 = (char *)result;
        v129 = v125 + 40;
        do
        {
          if ((char *)v64 == v62)
            goto LABEL_138;
          Column.subscript.getter();
          v66 = v132;
          if (v132)
          {
            if (v65)
              goto LABEL_75;
          }
          else
          {
            v66 = Dictionary.init(dictionaryLiteral:)();
            if (v65)
            {
LABEL_75:
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
              v67 = 0;
              v68 = (uint64_t *)v129;
              while (1)
              {
                v69 = v131 + v67;
                if (__OFADD__(v131, v67))
                  break;
                if (*(_QWORD *)(v66 + 16))
                {
                  v70 = *(v68 - 1);
                  v71 = *v68;
                  swift_bridgeObjectRetain();
                  v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v71);
                  v73 = 0.0;
                  if ((v74 & 1) != 0)
                    v73 = *(double *)(*(_QWORD *)(v66 + 56) + 8 * v72);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v73 = 0.0;
                }
                ++v67;
                v75 = v73;
                v76 = (void (*)(Swift::Int *, _QWORD))specialized DenseMatrix.subscript.modify(&v132, v64, v69);
                *v77 = v75;
                v76(&v132, 0);
                v68 += 2;
                if (v65 == v67)
                {
                  result = swift_bridgeObjectRelease();
                  v61 = v130;
                  v63 = v123;
                  v60 = (char *)v124;
                  v62 = v128;
                  goto LABEL_86;
                }
              }
              __break(1u);
LABEL_133:
              v132 = 0;
              v133 = 0xE000000000000000;
              _StringGuts.grow(_:)(52);
              v111._object = (void *)0x800000021AFF2C20;
              v111._countAndFlagsBits = 0xD000000000000024;
              String.append(_:)(v111);
              v112._countAndFlagsBits = AnyColumn.name.getter();
              String.append(_:)(v112);
              swift_bridgeObjectRelease();
              v113._countAndFlagsBits = 0x6720747562202C27;
              v113._object = (void *)0xEB0000000020746FLL;
              String.append(_:)(v113);
              AnyColumn.wrappedElementType.getter();
              v114._countAndFlagsBits = _typeName(_:qualified:)();
              String.append(_:)(v114);
              swift_bridgeObjectRelease();
              v115._countAndFlagsBits = 46;
              v115._object = (void *)0xE100000000000000;
              String.append(_:)(v115);
              v116 = v132;
              v117 = v133;
              lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              v118 = swift_allocError();
              *(_QWORD *)v119 = v116;
              *(_QWORD *)(v119 + 8) = v117;
              *(_OWORD *)(v119 + 16) = 0u;
              *(_OWORD *)(v119 + 32) = 0u;
              *(_BYTE *)(v119 + 48) = 0;
              v120[1] = v118;
              return swift_willThrow(0.0);
            }
          }
          result = swift_bridgeObjectRelease();
LABEL_86:
          ++v64;
        }
        while ((char *)v64 != v62);
      }
      v78 = *(uint64_t (**)(char *, uint64_t))(v63 + 8);
      v79 = v60;
      return v78(v79, v61);
    }
    AnyColumn.assumingType<A>(_:)();
    result = Column.count.getter();
    if (result < 0)
      goto LABEL_141;
    if (!result)
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v28 = 0;
    v127 = (uint64_t *)(v125 + 32);
    v130 = *(_QWORD *)(v125 + 16);
    v123 = v9;
    v124 = (uint64_t (**)(uint64_t, uint64_t))v8;
    v121 = result;
    v122 = v11;
    while (1)
    {
      if (v28 == result)
        goto LABEL_137;
      Column.subscript.getter();
      v29 = v132 ? v132 : MEMORY[0x24BEE4AF8];
      v30 = Set.init(minimumCapacity:)();
      v134 = v30;
      v31 = *(_QWORD *)(v29 + 16);
      if (v31)
      {
        v32 = (Swift::Int *)(v29 + 40);
        do
        {
          v33 = *(v32 - 1);
          v34 = *v32;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v132, v33, v34);
          swift_bridgeObjectRelease();
          v32 += 2;
          --v31;
        }
        while (v31);
        swift_bridgeObjectRelease();
        v35 = v134;
      }
      else
      {
        v35 = v30;
        swift_bridgeObjectRelease();
      }
      if (v130)
        break;
LABEL_66:
      ++v28;
      swift_bridgeObjectRelease();
      result = v121;
      v11 = v122;
      v9 = v123;
      v8 = (uint64_t)v124;
      if (v28 == v121)
        return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
    v37 = 0;
    v129 = v126 + *(int *)(v36 + 44);
    v128 = (char *)(v35 + 56);
    while (1)
    {
      v38 = v131 + v37;
      if (__OFADD__(v131, v37))
      {
        __break(1u);
        goto LABEL_110;
      }
      if (!*(_QWORD *)(v35 + 16))
      {
        v46 = 0.0;
        goto LABEL_49;
      }
      v39 = v28;
      v40 = &v127[2 * v37];
      v42 = *v40;
      v41 = v40[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v43 = Hasher._finalize()();
      v44 = -1 << *(_BYTE *)(v35 + 32);
      v45 = v43 & ~v44;
      v46 = 0.0;
      if (((*(_QWORD *)&v128[(v45 >> 3) & 0xFFFFFFFFFFFFF8] >> v45) & 1) != 0)
      {
        v47 = *(_QWORD *)(v35 + 48);
        v48 = (_QWORD *)(v47 + 16 * v45);
        v49 = *v48 == v42 && v48[1] == v41;
        if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v46 = 1.0;
        }
        else
        {
          v125 = ~v44;
          v52 = (v45 + 1) & ~v44;
          if (((*(_QWORD *)&v128[(v52 >> 3) & 0xFFFFFFFFFFFFF8] >> v52) & 1) != 0)
          {
            v53 = (_QWORD *)(v47 + 16 * v52);
            v54 = *v53 == v42 && v53[1] == v41;
            v28 = v39;
            if (v54 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_57:
              v46 = 1.0;
            }
            else
            {
              v55 = v52 + 1;
              v56 = v125;
              while (1)
              {
                v57 = v55 & v56;
                if (((*(_QWORD *)&v128[((v55 & v56) >> 3) & 0xFFFFFFFFFFFFF8] >> (v55 & v56)) & 1) == 0)
                  break;
                v58 = (_QWORD *)(v47 + 16 * v57);
                v59 = *v58 == v42 && v58[1] == v41;
                if (v59 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_57;
                v55 = v57 + 1;
              }
            }
            goto LABEL_47;
          }
        }
      }
      v28 = v39;
LABEL_47:
      swift_bridgeObjectRelease();
LABEL_49:
      ++v37;
      v50 = (void (*)(Swift::Int *, _QWORD))specialized DenseMatrix.subscript.modify(&v132, v28, v38);
      *v51 = v46;
      v50(&v132, 0);
      if (v37 == v130)
        goto LABEL_66;
    }
  }
  AnyColumn.assumingType<A>(_:)();
  result = Column.count.getter();
  if (result < 0)
    goto LABEL_139;
  v129 = (uint64_t)v14;
  v130 = v12;
  if (!result)
    return v124[1](v129, v130);
  v16 = 0;
  v17 = *(_QWORD *)(v125 + 16);
  v127 = (uint64_t *)(v125 + 40);
  v128 = (char *)result;
  while (1)
  {
    if (v16 == result)
    {
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    if (v17)
      break;
LABEL_20:
    ++v16;
    result = (uint64_t)v128;
    if ((char *)v16 == v128)
      return v124[1](v129, v130);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
  v18 = 0;
  v19 = v127;
  while (1)
  {
    v20 = v131 + v18;
    if (__OFADD__(v131, v18))
      break;
    v21 = *(v19 - 1);
    v22 = *v19;
    swift_bridgeObjectRetain();
    Column.subscript.getter();
    if (v133)
    {
      if (v21 == v132 && v133 == v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v25 = 1.0;
        goto LABEL_19;
      }
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = 1.0;
      if ((v24 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v25 = 0.0;
LABEL_19:
    ++v18;
    v26 = (void (*)(Swift::Int *, _QWORD))specialized DenseMatrix.subscript.modify(&v132, v16, v20);
    *v27 = v25;
    v26(&v132, 0);
    v19 += 2;
    if (v17 == v18)
      goto LABEL_20;
  }
  __break(1u);
LABEL_89:
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
  if (!swift_dynamicCastMetatype())
  {
LABEL_110:
    AnyColumn.wrappedElementType.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
    if (!swift_dynamicCastMetatype())
      goto LABEL_133;
    AnyColumn.assumingType<A>(_:)();
    v61 = v121;
    result = Column.count.getter();
    if (result < 0)
      goto LABEL_145;
    v96 = result;
    v97 = v120[0];
    if (result)
    {
      v98 = 0;
      v99 = *(_QWORD *)(v125 + 16);
      v129 = result;
      v130 = v125 + 40;
      while (v98 != v96)
      {
        Column.subscript.getter();
        v100 = v132;
        if (v132)
        {
          if (v99)
            goto LABEL_117;
        }
        else
        {
          v100 = Dictionary.init(dictionaryLiteral:)();
          if (v99)
          {
LABEL_117:
            result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
            v101 = 0;
            v102 = (uint64_t *)v130;
            while (1)
            {
              v103 = v131 + v101;
              if (__OFADD__(v131, v101))
                goto LABEL_136;
              if (*(_QWORD *)(v100 + 16))
              {
                v104 = *(v102 - 1);
                v105 = *v102;
                swift_bridgeObjectRetain();
                v106 = specialized __RawDictionaryStorage.find<A>(_:)(v104, v105);
                if ((v107 & 1) != 0)
                  v108 = *(_QWORD *)(*(_QWORD *)(v100 + 56) + 8 * v106);
                else
                  v108 = 0;
                swift_bridgeObjectRelease();
              }
              else
              {
                v108 = 0;
              }
              ++v101;
              v109 = (uint64_t (*)(Swift::Int *, _QWORD))specialized DenseMatrix.subscript.modify(&v132, v98, v103);
              *v110 = (float)v108;
              result = v109(&v132, 0);
              v102 += 2;
              if (v99 == v101)
              {
                result = swift_bridgeObjectRelease();
                v61 = v121;
                v97 = v120[0];
                v96 = v129;
                goto LABEL_129;
              }
            }
          }
        }
        result = swift_bridgeObjectRelease();
LABEL_129:
        if (++v98 == v96)
          goto LABEL_130;
      }
      goto LABEL_142;
    }
LABEL_130:
    v78 = *(uint64_t (**)(char *, uint64_t))(v97 + 8);
    v79 = v122;
    return v78(v79, v61);
  }
  v80 = v128;
  AnyColumn.assumingType<A>(_:)();
  v61 = v129;
  result = Column.count.getter();
  if (result < 0)
    goto LABEL_144;
  v81 = result;
  v82 = v127;
  if (!result)
  {
LABEL_108:
    v78 = (uint64_t (*)(char *, uint64_t))v82[1];
    v79 = v80;
    return v78(v79, v61);
  }
  v83 = 0;
  v84 = *(_QWORD *)(v125 + 16);
  v130 = v125 + 40;
  v124 = (uint64_t (**)(uint64_t, uint64_t))result;
  while (v83 != v81)
  {
    Column.subscript.getter();
    v85 = v132;
    if (v132)
    {
      if (v84)
        goto LABEL_96;
    }
    else
    {
      v85 = Dictionary.init(dictionaryLiteral:)();
      if (v84)
      {
LABEL_96:
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        v86 = 0;
        v87 = (uint64_t *)v130;
        while (1)
        {
          v88 = v131 + v86;
          if (__OFADD__(v131, v86))
            break;
          if (*(_QWORD *)(v85 + 16))
          {
            v89 = *(v87 - 1);
            v90 = *v87;
            swift_bridgeObjectRetain();
            v91 = specialized __RawDictionaryStorage.find<A>(_:)(v89, v90);
            v92 = 0;
            if ((v93 & 1) != 0)
              v92 = *(_DWORD *)(*(_QWORD *)(v85 + 56) + 4 * v91);
            swift_bridgeObjectRelease();
          }
          else
          {
            v92 = 0;
          }
          ++v86;
          v94 = (uint64_t (*)(Swift::Int *, _QWORD))specialized DenseMatrix.subscript.modify(&v132, v83, v88);
          *v95 = v92;
          result = v94(&v132, 0);
          v87 += 2;
          if (v84 == v86)
          {
            result = swift_bridgeObjectRelease();
            v80 = v128;
            v61 = v129;
            v82 = v127;
            v81 = (uint64_t)v124;
            goto LABEL_107;
          }
        }
        __break(1u);
        goto LABEL_135;
      }
    }
    result = swift_bridgeObjectRelease();
LABEL_107:
    if (++v83 == v81)
      goto LABEL_108;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  double v25;
  void (*v26)(Swift::Int *, _QWORD);
  double *v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int *v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  unint64_t v45;
  double v46;
  uint64_t v47;
  _QWORD *v48;
  BOOL v49;
  void (*v50)(Swift::Int *, _QWORD);
  double *v51;
  unint64_t v52;
  _QWORD *v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  BOOL v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  void (*v75)(Swift::Int *, _QWORD);
  _QWORD *v76;
  uint64_t (*v77)(char *, uint64_t);
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  float v91;
  char v92;
  uint64_t (*v93)(Swift::Int *, _QWORD);
  double *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t (*v108)(Swift::Int *, _QWORD);
  double *v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  Swift::Int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[2];
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t (**v123)(uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  Swift::Int v131;
  unint64_t v132;
  uint64_t v133;

  v124 = a2;
  v130 = a3;
  v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  v119[0] = *(_QWORD *)(v120 - 8);
  MEMORY[0x24BDAC7A8](v120);
  v121 = (char *)v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  v126 = *(uint64_t **)(v128 - 8);
  MEMORY[0x24BDAC7A8](v128);
  v127 = (char *)v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  v5 = *(_QWORD *)(v129 - 8);
  MEMORY[0x24BDAC7A8](v129);
  v7 = (uint64_t (**)(uint64_t, uint64_t))((char *)v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v123 = *(uint64_t (***)(uint64_t, uint64_t))(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyColumn.wrappedElementType.getter();
  if (!swift_dynamicCastMetatype())
  {
    v122 = v5;
    v123 = v7;
    AnyColumn.wrappedElementType.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (!swift_dynamicCastMetatype())
    {
      AnyColumn.wrappedElementType.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
      if (!swift_dynamicCastMetatype())
        goto LABEL_89;
      v60 = (char *)v123;
      AnyColumn.assumingType<A>(_:)();
      v61 = v129;
      result = Column.count.getter();
      if (result < 0)
        goto LABEL_143;
      v62 = (char *)result;
      v63 = v122;
      if (result)
      {
        v64 = 0;
        v65 = *(_QWORD *)(v124 + 16);
        v127 = (char *)result;
        v128 = v124 + 40;
        do
        {
          if ((char *)v64 == v62)
            goto LABEL_138;
          Column.subscript.getter();
          v66 = v131;
          if (v131)
          {
            if (v65)
              goto LABEL_75;
          }
          else
          {
            v66 = Dictionary.init(dictionaryLiteral:)();
            if (v65)
            {
LABEL_75:
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
              v67 = 0;
              v68 = (uint64_t *)v128;
              while (1)
              {
                v69 = v130 + v67;
                if (__OFADD__(v130, v67))
                  break;
                if (*(_QWORD *)(v66 + 16))
                {
                  v70 = *(v68 - 1);
                  v71 = *v68;
                  swift_bridgeObjectRetain();
                  v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v71);
                  v73 = 0;
                  if ((v74 & 1) != 0)
                    v73 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v72);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v73 = 0;
                }
                ++v67;
                v75 = (void (*)(Swift::Int *, _QWORD))specialized DenseMatrix.subscript.modify(&v131, v64, v69);
                *v76 = v73;
                v75(&v131, 0);
                v68 += 2;
                if (v65 == v67)
                {
                  result = swift_bridgeObjectRelease();
                  v61 = v129;
                  v63 = v122;
                  v60 = (char *)v123;
                  v62 = v127;
                  goto LABEL_86;
                }
              }
              __break(1u);
LABEL_133:
              v131 = 0;
              v132 = 0xE000000000000000;
              _StringGuts.grow(_:)(52);
              v110._object = (void *)0x800000021AFF2C20;
              v110._countAndFlagsBits = 0xD000000000000024;
              String.append(_:)(v110);
              v111._countAndFlagsBits = AnyColumn.name.getter();
              String.append(_:)(v111);
              swift_bridgeObjectRelease();
              v112._countAndFlagsBits = 0x6720747562202C27;
              v112._object = (void *)0xEB0000000020746FLL;
              String.append(_:)(v112);
              AnyColumn.wrappedElementType.getter();
              v113._countAndFlagsBits = _typeName(_:qualified:)();
              String.append(_:)(v113);
              swift_bridgeObjectRelease();
              v114._countAndFlagsBits = 46;
              v114._object = (void *)0xE100000000000000;
              String.append(_:)(v114);
              v115 = v131;
              v116 = v132;
              lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              v117 = swift_allocError();
              *(_QWORD *)v118 = v115;
              *(_QWORD *)(v118 + 8) = v116;
              *(_OWORD *)(v118 + 16) = 0u;
              *(_OWORD *)(v118 + 32) = 0u;
              *(_BYTE *)(v118 + 48) = 0;
              v119[1] = v117;
              return swift_willThrow(0.0);
            }
          }
          result = swift_bridgeObjectRelease();
LABEL_86:
          ++v64;
        }
        while ((char *)v64 != v62);
      }
      v77 = *(uint64_t (**)(char *, uint64_t))(v63 + 8);
      v78 = v60;
      return v77(v78, v61);
    }
    AnyColumn.assumingType<A>(_:)();
    result = Column.count.getter();
    if (result < 0)
      goto LABEL_141;
    if (!result)
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v28 = 0;
    v126 = (uint64_t *)(v124 + 32);
    v129 = *(_QWORD *)(v124 + 16);
    v122 = v9;
    v123 = (uint64_t (**)(uint64_t, uint64_t))v8;
    v120 = result;
    v121 = v11;
    while (1)
    {
      if (v28 == result)
        goto LABEL_137;
      Column.subscript.getter();
      v29 = v131 ? v131 : MEMORY[0x24BEE4AF8];
      v30 = Set.init(minimumCapacity:)();
      v133 = v30;
      v31 = *(_QWORD *)(v29 + 16);
      if (v31)
      {
        v32 = (Swift::Int *)(v29 + 40);
        do
        {
          v33 = *(v32 - 1);
          v34 = *v32;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v131, v33, v34);
          swift_bridgeObjectRelease();
          v32 += 2;
          --v31;
        }
        while (v31);
        swift_bridgeObjectRelease();
        v35 = v133;
      }
      else
      {
        v35 = v30;
        swift_bridgeObjectRelease();
      }
      if (v129)
        break;
LABEL_66:
      ++v28;
      swift_bridgeObjectRelease();
      result = v120;
      v11 = v121;
      v9 = v122;
      v8 = (uint64_t)v123;
      if (v28 == v120)
        return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
    v37 = 0;
    v128 = v125 + *(int *)(v36 + 44);
    v127 = (char *)(v35 + 56);
    while (1)
    {
      v38 = v130 + v37;
      if (__OFADD__(v130, v37))
      {
        __break(1u);
        goto LABEL_110;
      }
      if (!*(_QWORD *)(v35 + 16))
      {
        v46 = 0.0;
        goto LABEL_49;
      }
      v39 = v28;
      v40 = &v126[2 * v37];
      v42 = *v40;
      v41 = v40[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v43 = Hasher._finalize()();
      v44 = -1 << *(_BYTE *)(v35 + 32);
      v45 = v43 & ~v44;
      v46 = 0.0;
      if (((*(_QWORD *)&v127[(v45 >> 3) & 0xFFFFFFFFFFFFF8] >> v45) & 1) != 0)
      {
        v47 = *(_QWORD *)(v35 + 48);
        v48 = (_QWORD *)(v47 + 16 * v45);
        v49 = *v48 == v42 && v48[1] == v41;
        if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v46 = 1.0;
        }
        else
        {
          v124 = ~v44;
          v52 = (v45 + 1) & ~v44;
          if (((*(_QWORD *)&v127[(v52 >> 3) & 0xFFFFFFFFFFFFF8] >> v52) & 1) != 0)
          {
            v53 = (_QWORD *)(v47 + 16 * v52);
            v54 = *v53 == v42 && v53[1] == v41;
            v28 = v39;
            if (v54 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_57:
              v46 = 1.0;
            }
            else
            {
              v55 = v52 + 1;
              v56 = v124;
              while (1)
              {
                v57 = v55 & v56;
                if (((*(_QWORD *)&v127[((v55 & v56) >> 3) & 0xFFFFFFFFFFFFF8] >> (v55 & v56)) & 1) == 0)
                  break;
                v58 = (_QWORD *)(v47 + 16 * v57);
                v59 = *v58 == v42 && v58[1] == v41;
                if (v59 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_57;
                v55 = v57 + 1;
              }
            }
            goto LABEL_47;
          }
        }
      }
      v28 = v39;
LABEL_47:
      swift_bridgeObjectRelease();
LABEL_49:
      ++v37;
      v50 = (void (*)(Swift::Int *, _QWORD))specialized DenseMatrix.subscript.modify(&v131, v28, v38);
      *v51 = v46;
      v50(&v131, 0);
      if (v37 == v129)
        goto LABEL_66;
    }
  }
  AnyColumn.assumingType<A>(_:)();
  result = Column.count.getter();
  if (result < 0)
    goto LABEL_139;
  v128 = (uint64_t)v14;
  v129 = v12;
  if (!result)
    return v123[1](v128, v129);
  v16 = 0;
  v17 = *(_QWORD *)(v124 + 16);
  v126 = (uint64_t *)(v124 + 40);
  v127 = (char *)result;
  while (1)
  {
    if (v16 == result)
    {
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    if (v17)
      break;
LABEL_20:
    ++v16;
    result = (uint64_t)v127;
    if ((char *)v16 == v127)
      return v123[1](v128, v129);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
  v18 = 0;
  v19 = v126;
  while (1)
  {
    v20 = v130 + v18;
    if (__OFADD__(v130, v18))
      break;
    v21 = *(v19 - 1);
    v22 = *v19;
    swift_bridgeObjectRetain();
    Column.subscript.getter();
    if (v132)
    {
      if (v21 == v131 && v132 == v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v25 = 1.0;
        goto LABEL_19;
      }
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = 1.0;
      if ((v24 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v25 = 0.0;
LABEL_19:
    ++v18;
    v26 = (void (*)(Swift::Int *, _QWORD))specialized DenseMatrix.subscript.modify(&v131, v16, v20);
    *v27 = v25;
    v26(&v131, 0);
    v19 += 2;
    if (v17 == v18)
      goto LABEL_20;
  }
  __break(1u);
LABEL_89:
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
  if (!swift_dynamicCastMetatype())
  {
LABEL_110:
    AnyColumn.wrappedElementType.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
    if (!swift_dynamicCastMetatype())
      goto LABEL_133;
    AnyColumn.assumingType<A>(_:)();
    v61 = v120;
    result = Column.count.getter();
    if (result < 0)
      goto LABEL_145;
    v95 = result;
    v96 = v119[0];
    if (result)
    {
      v97 = 0;
      v98 = *(_QWORD *)(v124 + 16);
      v128 = result;
      v129 = v124 + 40;
      while (v97 != v95)
      {
        Column.subscript.getter();
        v99 = v131;
        if (v131)
        {
          if (v98)
            goto LABEL_117;
        }
        else
        {
          v99 = Dictionary.init(dictionaryLiteral:)();
          if (v98)
          {
LABEL_117:
            result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
            v100 = 0;
            v101 = (uint64_t *)v129;
            while (1)
            {
              v102 = v130 + v100;
              if (__OFADD__(v130, v100))
                goto LABEL_136;
              if (*(_QWORD *)(v99 + 16))
              {
                v103 = *(v101 - 1);
                v104 = *v101;
                swift_bridgeObjectRetain();
                v105 = specialized __RawDictionaryStorage.find<A>(_:)(v103, v104);
                if ((v106 & 1) != 0)
                  v107 = *(_QWORD *)(*(_QWORD *)(v99 + 56) + 8 * v105);
                else
                  v107 = 0;
                swift_bridgeObjectRelease();
              }
              else
              {
                v107 = 0;
              }
              ++v100;
              v108 = (uint64_t (*)(Swift::Int *, _QWORD))specialized DenseMatrix.subscript.modify(&v131, v97, v102);
              *v109 = (double)v107;
              result = v108(&v131, 0);
              v101 += 2;
              if (v98 == v100)
              {
                result = swift_bridgeObjectRelease();
                v61 = v120;
                v96 = v119[0];
                v95 = v128;
                goto LABEL_129;
              }
            }
          }
        }
        result = swift_bridgeObjectRelease();
LABEL_129:
        if (++v97 == v95)
          goto LABEL_130;
      }
      goto LABEL_142;
    }
LABEL_130:
    v77 = *(uint64_t (**)(char *, uint64_t))(v96 + 8);
    v78 = v121;
    return v77(v78, v61);
  }
  v79 = v127;
  AnyColumn.assumingType<A>(_:)();
  v61 = v128;
  result = Column.count.getter();
  if (result < 0)
    goto LABEL_144;
  v80 = result;
  v81 = v126;
  if (!result)
  {
LABEL_108:
    v77 = (uint64_t (*)(char *, uint64_t))v81[1];
    v78 = v79;
    return v77(v78, v61);
  }
  v82 = 0;
  v83 = *(_QWORD *)(v124 + 16);
  v129 = v124 + 40;
  v123 = (uint64_t (**)(uint64_t, uint64_t))result;
  while (v82 != v80)
  {
    Column.subscript.getter();
    v84 = v131;
    if (v131)
    {
      if (v83)
        goto LABEL_96;
    }
    else
    {
      v84 = Dictionary.init(dictionaryLiteral:)();
      if (v83)
      {
LABEL_96:
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        v85 = 0;
        v86 = (uint64_t *)v129;
        while (1)
        {
          v87 = v130 + v85;
          if (__OFADD__(v130, v85))
            break;
          if (*(_QWORD *)(v84 + 16))
          {
            v88 = *(v86 - 1);
            v89 = *v86;
            swift_bridgeObjectRetain();
            v90 = specialized __RawDictionaryStorage.find<A>(_:)(v88, v89);
            v91 = 0.0;
            if ((v92 & 1) != 0)
              v91 = *(float *)(*(_QWORD *)(v84 + 56) + 4 * v90);
            swift_bridgeObjectRelease();
          }
          else
          {
            v91 = 0.0;
          }
          ++v85;
          v93 = (uint64_t (*)(Swift::Int *, _QWORD))specialized DenseMatrix.subscript.modify(&v131, v82, v87);
          *v94 = v91;
          result = v93(&v131, 0);
          v86 += 2;
          if (v83 == v85)
          {
            result = swift_bridgeObjectRelease();
            v79 = v127;
            v61 = v128;
            v81 = v126;
            v80 = (uint64_t)v123;
            goto LABEL_107;
          }
        }
        __break(1u);
        goto LABEL_135;
      }
    }
    result = swift_bridgeObjectRelease();
LABEL_107:
    if (++v82 == v80)
      goto LABEL_108;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
  return result;
}

void specialized FeatureMatrixBuilder.fillDictionary(from:descriptors:column:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  Swift::String v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  Swift::String v36;
  Swift::String v37;

  OUTLINED_FUNCTION_8_1();
  v35 = v2;
  v33 = v3;
  v34 = v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any?]>);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v26 = v7;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int32]>);
  v31 = *(_QWORD *)(v10 - 8);
  v32 = v10;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v30 = v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : UInt8]>);
  OUTLINED_FUNCTION_67_4();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_49();
  v17 = v16 - v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_53_0();
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    OUTLINED_FUNCTION_46_5();
    specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v1, v18);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UInt8]);
    if (OUTLINED_FUNCTION_18_5())
    {
      OUTLINED_FUNCTION_36_5();
      OUTLINED_FUNCTION_46_5();
      specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)();
      (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v17, v13);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int32]);
      if (OUTLINED_FUNCTION_18_5())
      {
        OUTLINED_FUNCTION_36_5();
        OUTLINED_FUNCTION_46_5();
        specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
        if (OUTLINED_FUNCTION_18_5())
        {
          OUTLINED_FUNCTION_36_5();
          OUTLINED_FUNCTION_46_5();
          specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)();
          v20 = OUTLINED_FUNCTION_89_1();
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
          if (OUTLINED_FUNCTION_18_5())
          {
            OUTLINED_FUNCTION_36_5();
            OUTLINED_FUNCTION_46_5();
            specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)();
            v20 = OUTLINED_FUNCTION_89_1();
            v21 = v29;
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any?]);
            if (!OUTLINED_FUNCTION_18_5())
            {
              _StringGuts.grow(_:)(56);
              v23._object = (void *)0x800000021AFF2C50;
              v23._countAndFlagsBits = 0xD000000000000028;
              String.append(_:)(v23);
              v36._countAndFlagsBits = OUTLINED_FUNCTION_105_0();
              OUTLINED_FUNCTION_104_1(v36);
              OUTLINED_FUNCTION_123();
              OUTLINED_FUNCTION_15_8();
              OUTLINED_FUNCTION_106_1();
              v37._countAndFlagsBits = OUTLINED_FUNCTION_92_0();
              OUTLINED_FUNCTION_104_1(v37);
              OUTLINED_FUNCTION_123();
              OUTLINED_FUNCTION_51_6();
              lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
              v24 = OUTLINED_FUNCTION_49_0();
              *v25 = 0;
              v25[1] = 0xE000000000000000;
              OUTLINED_FUNCTION_5_8(v24, (uint64_t)v25);
              goto LABEL_14;
            }
            OUTLINED_FUNCTION_17_6();
            specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)(v26, v33, v34, v35);
            v21 = v28;
            v22 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
            v20 = v26;
          }
        }
        v22(v20, v21);
      }
    }
  }
LABEL_14:
  OUTLINED_FUNCTION_7();
}

void specialized FeatureMatrixBuilder.fillInteger(from:column:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;

  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_47_6(v4, v5, v6, v7, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<NSNumber>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_34_7(v10, v42);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v49 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_78_4(v13, v43);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  v52 = *(_QWORD *)(v14 - 8);
  v53 = v14;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_77_3(v16, v44);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float16>);
  v55 = *(_QWORD *)(v17 - 8);
  v56 = v17;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_79_3(v19, v45);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int64>);
  v58 = *(_QWORD *)(v20 - 8);
  v59 = v20;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_38_4(v22, v46);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  v60 = *(_QWORD *)(v23 - 8);
  v61 = v23;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_80_3(v25, v47);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int16>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_91_1();
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  OUTLINED_FUNCTION_96_2();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_53_0();
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_67_4();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_59_4();
  if (!swift_dynamicCastMetatype())
  {
    if (OUTLINED_FUNCTION_27_10())
    {
      OUTLINED_FUNCTION_10_7();
      OUTLINED_FUNCTION_74_3();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v27);
      goto LABEL_19;
    }
    if (OUTLINED_FUNCTION_27_10())
    {
      OUTLINED_FUNCTION_10_7();
      OUTLINED_FUNCTION_74_3();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
      v31 = OUTLINED_FUNCTION_89_1();
    }
    else
    {
      if (OUTLINED_FUNCTION_27_10())
      {
        OUTLINED_FUNCTION_10_7();
        OUTLINED_FUNCTION_74_3();
        specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v61);
        goto LABEL_19;
      }
      if (OUTLINED_FUNCTION_27_10())
      {
        v34 = v57;
        OUTLINED_FUNCTION_10_7();
        v35 = OUTLINED_FUNCTION_26_6();
        specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v35);
        v36 = v58;
        v32 = v59;
      }
      else if (OUTLINED_FUNCTION_27_10())
      {
        v34 = v54;
        OUTLINED_FUNCTION_10_7();
        v37 = OUTLINED_FUNCTION_26_6();
        specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v37);
        v36 = v55;
        v32 = v56;
      }
      else if (OUTLINED_FUNCTION_27_10())
      {
        v34 = v51;
        OUTLINED_FUNCTION_10_7();
        v38 = OUTLINED_FUNCTION_26_6();
        specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v38);
        v36 = v52;
        v32 = v53;
      }
      else
      {
        if (!OUTLINED_FUNCTION_27_10())
        {
          type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if (!OUTLINED_FUNCTION_18_5())
          {
            OUTLINED_FUNCTION_64_5();
            OUTLINED_FUNCTION_55_6();
            v65._countAndFlagsBits = OUTLINED_FUNCTION_105_0();
            OUTLINED_FUNCTION_43_2(v65);
            OUTLINED_FUNCTION_123();
            OUTLINED_FUNCTION_15_8();
            OUTLINED_FUNCTION_106_1();
            v66._countAndFlagsBits = OUTLINED_FUNCTION_92_0();
            OUTLINED_FUNCTION_43_2(v66);
            OUTLINED_FUNCTION_123();
            OUTLINED_FUNCTION_51_6();
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            v40 = OUTLINED_FUNCTION_49_0();
            *v41 = v63;
            v41[1] = v64;
            OUTLINED_FUNCTION_5_8(v40, (uint64_t)v41);
            goto LABEL_19;
          }
          OUTLINED_FUNCTION_17_6();
          specialized FeatureMatrixBuilder.fillInteger(from:column:)();
          v31 = OUTLINED_FUNCTION_76_1();
          goto LABEL_18;
        }
        v34 = v48;
        OUTLINED_FUNCTION_10_7();
        v39 = OUTLINED_FUNCTION_26_6();
        specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v39);
        v36 = v49;
        v32 = v50;
      }
      v33 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v31 = v34;
    }
LABEL_18:
    v33(v31, v32);
    goto LABEL_19;
  }
  OUTLINED_FUNCTION_10_7();
  specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v2);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v29);
LABEL_19:
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;

  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_47_6(v4, v5, v6, v7, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<NSNumber>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_34_7(v10, v42);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v49 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_78_4(v13, v43);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  v52 = *(_QWORD *)(v14 - 8);
  v53 = v14;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_77_3(v16, v44);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float16>);
  v55 = *(_QWORD *)(v17 - 8);
  v56 = v17;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_79_3(v19, v45);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int64>);
  v58 = *(_QWORD *)(v20 - 8);
  v59 = v20;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_38_4(v22, v46);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int32>);
  v60 = *(_QWORD *)(v23 - 8);
  v61 = v23;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_80_3(v25, v47);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int16>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_91_1();
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int8>);
  OUTLINED_FUNCTION_96_2();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_53_0();
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_67_4();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_59_4();
  if (!swift_dynamicCastMetatype())
  {
    if (OUTLINED_FUNCTION_27_10())
    {
      OUTLINED_FUNCTION_10_7();
      OUTLINED_FUNCTION_74_3();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v27);
      goto LABEL_19;
    }
    if (OUTLINED_FUNCTION_27_10())
    {
      OUTLINED_FUNCTION_10_7();
      OUTLINED_FUNCTION_74_3();
      specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
      v31 = OUTLINED_FUNCTION_89_1();
    }
    else
    {
      if (OUTLINED_FUNCTION_27_10())
      {
        OUTLINED_FUNCTION_10_7();
        OUTLINED_FUNCTION_74_3();
        specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)();
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v61);
        goto LABEL_19;
      }
      if (OUTLINED_FUNCTION_27_10())
      {
        v34 = v57;
        OUTLINED_FUNCTION_10_7();
        v35 = OUTLINED_FUNCTION_26_6();
        specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v35);
        v36 = v58;
        v32 = v59;
      }
      else if (OUTLINED_FUNCTION_27_10())
      {
        v34 = v54;
        OUTLINED_FUNCTION_10_7();
        v37 = OUTLINED_FUNCTION_26_6();
        specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v37);
        v36 = v55;
        v32 = v56;
      }
      else if (OUTLINED_FUNCTION_27_10())
      {
        v34 = v51;
        OUTLINED_FUNCTION_10_7();
        v38 = OUTLINED_FUNCTION_26_6();
        specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v38);
        v36 = v52;
        v32 = v53;
      }
      else
      {
        if (!OUTLINED_FUNCTION_27_10())
        {
          type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if (!OUTLINED_FUNCTION_18_5())
          {
            OUTLINED_FUNCTION_64_5();
            OUTLINED_FUNCTION_55_6();
            v65._countAndFlagsBits = OUTLINED_FUNCTION_105_0();
            OUTLINED_FUNCTION_43_2(v65);
            OUTLINED_FUNCTION_123();
            OUTLINED_FUNCTION_15_8();
            OUTLINED_FUNCTION_106_1();
            v66._countAndFlagsBits = OUTLINED_FUNCTION_92_0();
            OUTLINED_FUNCTION_43_2(v66);
            OUTLINED_FUNCTION_123();
            OUTLINED_FUNCTION_51_6();
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            v40 = OUTLINED_FUNCTION_49_0();
            *v41 = v63;
            v41[1] = v64;
            OUTLINED_FUNCTION_5_8(v40, (uint64_t)v41);
            goto LABEL_19;
          }
          OUTLINED_FUNCTION_17_6();
          specialized FeatureMatrixBuilder.fillInteger(from:column:)();
          v31 = OUTLINED_FUNCTION_76_1();
          goto LABEL_18;
        }
        v34 = v48;
        OUTLINED_FUNCTION_10_7();
        v39 = OUTLINED_FUNCTION_26_6();
        specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v39);
        v36 = v49;
        v32 = v50;
      }
      v33 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v31 = v34;
    }
LABEL_18:
    v33(v31, v32);
    goto LABEL_19;
  }
  OUTLINED_FUNCTION_10_7();
  specialized FeatureMatrixBuilder.fillInteger<A>(from:column:)(v2);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v29);
LABEL_19:
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  int v6;
  uint64_t (*v7)(uint64_t *, _QWORD);
  _DWORD *v8;
  void *v9;

  OUTLINED_FUNCTION_13_10();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<NSNumber>);
  v2 = OUTLINED_FUNCTION_8_11();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = v2;
    if (v2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      OUTLINED_FUNCTION_107_1();
      do
      {
        OUTLINED_FUNCTION_2_12();
        v4 = v9;
        if (v9)
        {
          OUTLINED_FUNCTION_120_1();
          v6 = v5;

        }
        else
        {
          v6 = 0;
        }
        v7 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v9, v1, v0);
        *v8 = v6;
        OUTLINED_FUNCTION_6_10(v7, (uint64_t)v9);
        ++v1;
      }
      while (v3 != v1);
    }
    OUTLINED_FUNCTION_50_3();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  float v5;
  float v6;
  uint64_t (*v7)(uint64_t *, _QWORD);
  double *v8;
  void *v9;

  OUTLINED_FUNCTION_13_10();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<NSNumber>);
  v2 = OUTLINED_FUNCTION_8_11();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = v2;
    if (v2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      OUTLINED_FUNCTION_107_1();
      do
      {
        OUTLINED_FUNCTION_2_12();
        v4 = v9;
        if (v9)
        {
          OUTLINED_FUNCTION_120_1();
          v6 = v5;

        }
        else
        {
          v6 = 0.0;
        }
        v7 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v9, v1, v0);
        *v8 = v6;
        OUTLINED_FUNCTION_6_10(v7, (uint64_t)v9);
        ++v1;
      }
      while (v3 != v1);
    }
    OUTLINED_FUNCTION_50_3();
  }
}

uint64_t specialized FeatureMatrixBuilder.fillArray(from:size:column:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v68 = a3;
  v67 = a2;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v48 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  v50 = *(_QWORD *)(v51 - 8);
  v4 = MEMORY[0x24BDAC7A8](v51);
  v45 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v49 = (char *)&v45 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>);
  v56 = *(_QWORD *)(v9 - 8);
  v57 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v55 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  v59 = *(_QWORD *)(v11 - 8);
  v60 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v58 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  v62 = *(_QWORD *)(v13 - 8);
  v63 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v61 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  v64 = *(_QWORD *)(v15 - 8);
  v65 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float16]>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  v22 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v24, v67, v68);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v66);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float16]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v21, v67, v68);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v17, v67, v68);
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v17, v65);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (swift_dynamicCastMetatype())
  {
    v26 = (uint64_t)v61;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v26, v67, v68);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v26, v63);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  if (swift_dynamicCastMetatype())
  {
    v27 = (uint64_t)v58;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray(from:size:column:)(v27, v67, v68);
    v29 = v59;
    v28 = v60;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  v30 = swift_dynamicCastMetatype();
  v32 = v67;
  v31 = v68;
  if (v30)
  {
    v27 = (uint64_t)v55;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v27, v32, v31);
    v29 = v56;
    v28 = v57;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  if (swift_dynamicCastMetatype())
  {
    v27 = (uint64_t)v52;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v27, v32, v31);
    v29 = v53;
    v28 = v54;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  if (swift_dynamicCastMetatype())
  {
    v33 = (uint64_t)v49;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v33, v32, v31);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v33, v51);
  }
  else
  {
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    if (swift_dynamicCastMetatype())
    {
      AnyColumn.assumingType<A>(_:)();
      v34 = (uint64_t)v45;
      v35 = v47;
      v36 = v48;
      Column.mapNonNil<A>(_:)();
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v34, v32, v31);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v34, v51);
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v36, v35);
    }
    else
    {
      v69 = 0;
      v70 = 0xE000000000000000;
      _StringGuts.grow(_:)(65);
      v37._object = (void *)0x800000021AFF2B30;
      v37._countAndFlagsBits = 0xD000000000000031;
      String.append(_:)(v37);
      v38._countAndFlagsBits = AnyColumn.name.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0x6720747562202C27;
      v39._object = (void *)0xEB0000000020746FLL;
      String.append(_:)(v39);
      AnyColumn.wrappedElementType.getter();
      v40._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._countAndFlagsBits = 46;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      v42 = v69;
      v43 = v70;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v44 = v42;
      *(_QWORD *)(v44 + 8) = v43;
      *(_OWORD *)(v44 + 16) = 0u;
      *(_OWORD *)(v44 + 32) = 0u;
      *(_BYTE *)(v44 + 48) = 0;
      return swift_willThrow(0.0);
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v68 = a3;
  v67 = a2;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v48 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  v50 = *(_QWORD *)(v51 - 8);
  v4 = MEMORY[0x24BDAC7A8](v51);
  v45 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v49 = (char *)&v45 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>);
  v56 = *(_QWORD *)(v9 - 8);
  v57 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v55 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  v59 = *(_QWORD *)(v11 - 8);
  v60 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v58 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  v62 = *(_QWORD *)(v13 - 8);
  v63 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v61 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  v64 = *(_QWORD *)(v15 - 8);
  v65 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float16]>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  v22 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyColumn.wrappedElementType.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v24, v67, v68);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v66);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float16]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v21, v67, v68);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  if (swift_dynamicCastMetatype())
  {
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)((uint64_t)v17, v67, v68);
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v17, v65);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  if (swift_dynamicCastMetatype())
  {
    v26 = (uint64_t)v61;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v26, v67, v68);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v26, v63);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  if (swift_dynamicCastMetatype())
  {
    v27 = (uint64_t)v58;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray(from:size:column:)(v27, v67, v68);
    v29 = v59;
    v28 = v60;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  v30 = swift_dynamicCastMetatype();
  v32 = v67;
  v31 = v68;
  if (v30)
  {
    v27 = (uint64_t)v55;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v27, v32, v31);
    v29 = v56;
    v28 = v57;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  if (swift_dynamicCastMetatype())
  {
    v27 = (uint64_t)v52;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v27, v32, v31);
    v29 = v53;
    v28 = v54;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  if (swift_dynamicCastMetatype())
  {
    v33 = (uint64_t)v49;
    AnyColumn.assumingType<A>(_:)();
    specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v33, v32, v31);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v33, v51);
  }
  else
  {
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    if (swift_dynamicCastMetatype())
    {
      AnyColumn.assumingType<A>(_:)();
      v34 = (uint64_t)v45;
      v35 = v47;
      v36 = v48;
      Column.mapNonNil<A>(_:)();
      specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(v34, v32, v31);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v34, v51);
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v36, v35);
    }
    else
    {
      v69 = 0;
      v70 = 0xE000000000000000;
      _StringGuts.grow(_:)(65);
      v37._object = (void *)0x800000021AFF2B30;
      v37._countAndFlagsBits = 0xD000000000000031;
      String.append(_:)(v37);
      v38._countAndFlagsBits = AnyColumn.name.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0x6720747562202C27;
      v39._object = (void *)0xEB0000000020746FLL;
      String.append(_:)(v39);
      AnyColumn.wrappedElementType.getter();
      v40._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._countAndFlagsBits = 46;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      v42 = v69;
      v43 = v70;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v44 = v42;
      *(_QWORD *)(v44 + 8) = v43;
      *(_OWORD *)(v44 + 16) = 0u;
      *(_OWORD *)(v44 + 32) = 0u;
      *(_BYTE *)(v44 + 48) = 0;
      return swift_willThrow(0.0);
    }
  }
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t (*v19)(uint64_t *, _QWORD);
  float *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v40 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  v38 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  v37 = a1;
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v12 = result;
  if (result)
  {
    v13 = 0;
    v39 = xmmword_21AFE7DA0;
    v34 = result;
    v35 = v7;
    while (v13 != v12)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v7, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v10, v7, v8);
      }
      v14 = MLShapedArray.shape.getter();
      if (*(_QWORD *)(v14 + 16) != 1 || *(_QWORD *)(v14 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        v41 = 0;
        v42 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v21._countAndFlagsBits = 0xD000000000000023;
        v21._object = (void *)0x800000021AFF2BD0;
        String.append(_:)(v21);
        v43 = a2;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 0x656620726F66205DLL;
        v23._object = (void *)0xEF27206572757461;
        String.append(_:)(v23);
        v24._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._object = (void *)0x800000021AFF2C00;
        v25._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v25);
        MLShapedArray.shape.getter();
        v26._countAndFlagsBits = MEMORY[0x22075AAA4]();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = 0x20776F7220746120;
        v27._object = (void *)0xE800000000000000;
        String.append(_:)(v27);
        v43 = v13;
        v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 46;
        v29._object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        v30 = v41;
        v31 = v42;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v32 = v30;
        *(_QWORD *)(v32 + 8) = v31;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_BYTE *)(v32 + 48) = 0;
        swift_willThrow(0.0);
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      }
      result = swift_bridgeObjectRelease();
      if (a2 < 0)
        goto LABEL_20;
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        v15 = 0;
        while (1)
        {
          v16 = v40 + v15;
          if (__OFADD__(v40, v15))
            break;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = v39;
          *(_QWORD *)(v17 + 32) = v15;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          v18 = (float)(int)v41;
          v19 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v41, v13, v16);
          *v20 = v18;
          result = v19(&v41, 0);
          if (a2 == ++v15)
            goto LABEL_15;
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v13;
      result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      v12 = v34;
      v7 = v35;
      if (v13 == v34)
        return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t (*v19)(uint64_t *, _QWORD);
  double *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v40 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  v38 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  v37 = a1;
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v12 = result;
  if (result)
  {
    v13 = 0;
    v39 = xmmword_21AFE7DA0;
    v34 = result;
    v35 = v7;
    while (v13 != v12)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v7, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v10, v7, v8);
      }
      v14 = MLShapedArray.shape.getter();
      if (*(_QWORD *)(v14 + 16) != 1 || *(_QWORD *)(v14 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        v41 = 0;
        v42 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v21._countAndFlagsBits = 0xD000000000000023;
        v21._object = (void *)0x800000021AFF2BD0;
        String.append(_:)(v21);
        v43 = a2;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 0x656620726F66205DLL;
        v23._object = (void *)0xEF27206572757461;
        String.append(_:)(v23);
        v24._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._object = (void *)0x800000021AFF2C00;
        v25._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v25);
        MLShapedArray.shape.getter();
        v26._countAndFlagsBits = MEMORY[0x22075AAA4]();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = 0x20776F7220746120;
        v27._object = (void *)0xE800000000000000;
        String.append(_:)(v27);
        v43 = v13;
        v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 46;
        v29._object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        v30 = v41;
        v31 = v42;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v32 = v30;
        *(_QWORD *)(v32 + 8) = v31;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_BYTE *)(v32 + 48) = 0;
        swift_willThrow(0.0);
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      }
      result = swift_bridgeObjectRelease();
      if (a2 < 0)
        goto LABEL_20;
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        v15 = 0;
        while (1)
        {
          v16 = v40 + v15;
          if (__OFADD__(v40, v15))
            break;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = v39;
          *(_QWORD *)(v17 + 32) = v15;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          v18 = (double)(int)v41;
          v19 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v41, v13, v16);
          *v20 = v18;
          result = v19(&v41, 0);
          if (a2 == ++v15)
            goto LABEL_15;
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v13;
      result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      v12 = v34;
      v7 = v35;
      if (v13 == v34)
        return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

#error "21AE3C6C4: call analysis failed (funcsize=29)"

#error "21AE3C740: call analysis failed (funcsize=29)"

#error "21AE3C7BC: call analysis failed (funcsize=29)"

#error "21AE3C82C: call analysis failed (funcsize=27)"

#error "21AE3C8A8: call analysis failed (funcsize=29)"

#error "21AE3C924: call analysis failed (funcsize=29)"

#error "21AE3C9A0: call analysis failed (funcsize=29)"

#error "21AE3CA10: call analysis failed (funcsize=27)"

#error "21AE3CA8C: call analysis failed (funcsize=29)"

#error "21AE3CB04: call analysis failed (funcsize=28)"

#error "21AE3CB80: call analysis failed (funcsize=29)"

#error "21AE3CBFC: call analysis failed (funcsize=29)"

#error "21AE3CC78: call analysis failed (funcsize=29)"

#error "21AE3CCF0: call analysis failed (funcsize=28)"

uint64_t specialized FeatureMatrixBuilder.fillArray<A>(from:size:column:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t (*v13)(uint64_t *, _QWORD);
  float *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v6 = result;
  if (result)
  {
    v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27)
        v8 = v27;
      else
        v8 = MEMORY[0x24BEE4AF8];
      v9 = *(_QWORD *)(v8 + 16);
      if (v9 != a2)
      {
        v27 = 0;
        v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._countAndFlagsBits = 0xD000000000000015;
        v15._object = (void *)0x800000021AFF2B70;
        String.append(_:)(v15);
        v29 = a2;
        v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = 0xD000000000000017;
        v17._object = (void *)0x800000021AFF2B90;
        String.append(_:)(v17);
        v18._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 0x6720747562202C27;
        v19._object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v29 = v9;
        v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._object = (void *)0x800000021AFF2BB0;
        v21._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        v29 = v7;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 46;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        v24 = v27;
        v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v26 = v24;
        *(_QWORD *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(_BYTE *)(v26 + 48) = 0;
        return swift_willThrow(0.0);
      }
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(_QWORD *)(v8 + 16))
            goto LABEL_19;
          v11 = v10 + 1;
          v12 = (float)*(uint64_t *)(v8 + 32 + 8 * v10);
          v13 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *v14 = v12;
          result = v13(&v27, 0);
          v10 = v11;
          if (a2 == v11)
            goto LABEL_14;
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      result = swift_bridgeObjectRelease();
      if (v7 == v6)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t (*v13)(uint64_t *, _QWORD);
  double *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v6 = result;
  if (result)
  {
    v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27)
        v8 = v27;
      else
        v8 = MEMORY[0x24BEE4AF8];
      v9 = *(_QWORD *)(v8 + 16);
      if (v9 != a2)
      {
        v27 = 0;
        v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._countAndFlagsBits = 0xD000000000000015;
        v15._object = (void *)0x800000021AFF2B70;
        String.append(_:)(v15);
        v29 = a2;
        v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = 0xD000000000000017;
        v17._object = (void *)0x800000021AFF2B90;
        String.append(_:)(v17);
        v18._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 0x6720747562202C27;
        v19._object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v29 = v9;
        v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._object = (void *)0x800000021AFF2BB0;
        v21._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        v29 = v7;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 46;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        v24 = v27;
        v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v26 = v24;
        *(_QWORD *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(_BYTE *)(v26 + 48) = 0;
        return swift_willThrow(0.0);
      }
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(_QWORD *)(v8 + 16))
            goto LABEL_19;
          v11 = v10 + 1;
          v12 = (double)*(uint64_t *)(v8 + 32 + 8 * v10);
          v13 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *v14 = v12;
          result = v13(&v27, 0);
          v10 = v11;
          if (a2 == v11)
            goto LABEL_14;
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      result = swift_bridgeObjectRelease();
      if (v7 == v6)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v18)(uint64_t *, _QWORD);
  _DWORD *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float16]>);
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v6 = result;
  if (result)
  {
    v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v32)
        v8 = v32;
      else
        v8 = MEMORY[0x24BEE4AF8];
      v9 = *(_QWORD *)(v8 + 16);
      if (v9 != a2)
      {
        v32 = 0;
        v33 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v20._countAndFlagsBits = 0xD000000000000015;
        v20._object = (void *)0x800000021AFF2B70;
        String.append(_:)(v20);
        v34 = a2;
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = 0xD000000000000017;
        v22._object = (void *)0x800000021AFF2B90;
        String.append(_:)(v22);
        v23._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v24._countAndFlagsBits = 0x6720747562202C27;
        v24._object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v34 = v9;
        v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._object = (void *)0x800000021AFF2BB0;
        v26._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v26);
        v34 = v7;
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._countAndFlagsBits = 46;
        v28._object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        v29 = v32;
        v30 = v33;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v31 = v29;
        *(_QWORD *)(v31 + 8) = v30;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_BYTE *)(v31 + 48) = 0;
        return swift_willThrow(0.0);
      }
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(_QWORD *)(v8 + 16))
            goto LABEL_19;
          v11 = v10 + 1;
          _H0 = *(_WORD *)(v8 + 32 + 2 * v10);
          __asm { FCVT            S8, H0 }
          v18 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v32, v7, a3 + v10);
          *v19 = _S8;
          result = v18(&v32, 0);
          v10 = v11;
          if (a2 == v11)
            goto LABEL_14;
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      result = swift_bridgeObjectRelease();
      if (v7 == v6)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t (*v13)(uint64_t *, _QWORD);
  _DWORD *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v6 = result;
  if (result)
  {
    v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27)
        v8 = v27;
      else
        v8 = MEMORY[0x24BEE4AF8];
      v9 = *(_QWORD *)(v8 + 16);
      if (v9 != a2)
      {
        v27 = 0;
        v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._countAndFlagsBits = 0xD000000000000015;
        v15._object = (void *)0x800000021AFF2B70;
        String.append(_:)(v15);
        v29 = a2;
        v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = 0xD000000000000017;
        v17._object = (void *)0x800000021AFF2B90;
        String.append(_:)(v17);
        v18._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 0x6720747562202C27;
        v19._object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v29 = v9;
        v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._object = (void *)0x800000021AFF2BB0;
        v21._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        v29 = v7;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 46;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        v24 = v27;
        v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v26 = v24;
        *(_QWORD *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(_BYTE *)(v26 + 48) = 0;
        return swift_willThrow(0.0);
      }
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(_QWORD *)(v8 + 16))
            goto LABEL_19;
          v11 = v10 + 1;
          v12 = *(_DWORD *)(v8 + 32 + 4 * v10);
          v13 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *v14 = v12;
          result = v13(&v27, 0);
          v10 = v11;
          if (a2 == v11)
            goto LABEL_14;
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      result = swift_bridgeObjectRelease();
      if (v7 == v6)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t (*v13)(uint64_t *, _QWORD);
  float *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v6 = result;
  if (result)
  {
    v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27)
        v8 = v27;
      else
        v8 = MEMORY[0x24BEE4AF8];
      v9 = *(_QWORD *)(v8 + 16);
      if (v9 != a2)
      {
        v27 = 0;
        v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._countAndFlagsBits = 0xD000000000000015;
        v15._object = (void *)0x800000021AFF2B70;
        String.append(_:)(v15);
        v29 = a2;
        v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = 0xD000000000000017;
        v17._object = (void *)0x800000021AFF2B90;
        String.append(_:)(v17);
        v18._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 0x6720747562202C27;
        v19._object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v29 = v9;
        v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._object = (void *)0x800000021AFF2BB0;
        v21._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        v29 = v7;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 46;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        v24 = v27;
        v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v26 = v24;
        *(_QWORD *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(_BYTE *)(v26 + 48) = 0;
        return swift_willThrow(0.0);
      }
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(_QWORD *)(v8 + 16))
            goto LABEL_19;
          v11 = v10 + 1;
          v12 = *(double *)(v8 + 32 + 8 * v10);
          v13 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *v14 = v12;
          result = v13(&v27, 0);
          v10 = v11;
          if (a2 == v11)
            goto LABEL_14;
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      result = swift_bridgeObjectRelease();
      if (v7 == v6)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v18)(uint64_t *, _QWORD);
  _QWORD *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float16]>);
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v6 = result;
  if (result)
  {
    v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v32)
        v8 = v32;
      else
        v8 = MEMORY[0x24BEE4AF8];
      v9 = *(_QWORD *)(v8 + 16);
      if (v9 != a2)
      {
        v32 = 0;
        v33 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v20._countAndFlagsBits = 0xD000000000000015;
        v20._object = (void *)0x800000021AFF2B70;
        String.append(_:)(v20);
        v34 = a2;
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = 0xD000000000000017;
        v22._object = (void *)0x800000021AFF2B90;
        String.append(_:)(v22);
        v23._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        v24._countAndFlagsBits = 0x6720747562202C27;
        v24._object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v34 = v9;
        v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._object = (void *)0x800000021AFF2BB0;
        v26._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v26);
        v34 = v7;
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._countAndFlagsBits = 46;
        v28._object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        v29 = v32;
        v30 = v33;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v31 = v29;
        *(_QWORD *)(v31 + 8) = v30;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_BYTE *)(v31 + 48) = 0;
        return swift_willThrow(0.0);
      }
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(_QWORD *)(v8 + 16))
            goto LABEL_19;
          v11 = v10 + 1;
          _H0 = *(_WORD *)(v8 + 32 + 2 * v10);
          __asm { FCVT            D8, H0 }
          v18 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v32, v7, a3 + v10);
          *v19 = _D8;
          result = v18(&v32, 0);
          v10 = v11;
          if (a2 == v11)
            goto LABEL_14;
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      result = swift_bridgeObjectRelease();
      if (v7 == v6)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t (*v13)(uint64_t *, _QWORD);
  double *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v6 = result;
  if (result)
  {
    v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27)
        v8 = v27;
      else
        v8 = MEMORY[0x24BEE4AF8];
      v9 = *(_QWORD *)(v8 + 16);
      if (v9 != a2)
      {
        v27 = 0;
        v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._countAndFlagsBits = 0xD000000000000015;
        v15._object = (void *)0x800000021AFF2B70;
        String.append(_:)(v15);
        v29 = a2;
        v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = 0xD000000000000017;
        v17._object = (void *)0x800000021AFF2B90;
        String.append(_:)(v17);
        v18._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 0x6720747562202C27;
        v19._object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v29 = v9;
        v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._object = (void *)0x800000021AFF2BB0;
        v21._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        v29 = v7;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 46;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        v24 = v27;
        v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v26 = v24;
        *(_QWORD *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(_BYTE *)(v26 + 48) = 0;
        return swift_willThrow(0.0);
      }
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(_QWORD *)(v8 + 16))
            goto LABEL_19;
          v11 = v10 + 1;
          v12 = *(float *)(v8 + 32 + 4 * v10);
          v13 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *v14 = v12;
          result = v13(&v27, 0);
          v10 = v11;
          if (a2 == v11)
            goto LABEL_14;
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      result = swift_bridgeObjectRelease();
      if (v7 == v6)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t *, _QWORD);
  _QWORD *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v6 = result;
  if (result)
  {
    v7 = 0;
    while (v7 != v6)
    {
      Column.subscript.getter();
      if (v27)
        v8 = v27;
      else
        v8 = MEMORY[0x24BEE4AF8];
      v9 = *(_QWORD *)(v8 + 16);
      if (v9 != a2)
      {
        v27 = 0;
        v28 = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v15._countAndFlagsBits = 0xD000000000000015;
        v15._object = (void *)0x800000021AFF2B70;
        String.append(_:)(v15);
        v29 = a2;
        v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = 0xD000000000000017;
        v17._object = (void *)0x800000021AFF2B90;
        String.append(_:)(v17);
        v18._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 0x6720747562202C27;
        v19._object = (void *)0xEB0000000020746FLL;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v29 = v9;
        v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._object = (void *)0x800000021AFF2BB0;
        v21._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v21);
        v29 = v7;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 46;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        v24 = v27;
        v25 = v28;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v26 = v24;
        *(_QWORD *)(v26 + 8) = v25;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(_BYTE *)(v26 + 48) = 0;
        return swift_willThrow(0.0);
      }
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        v10 = 0;
        while (!__OFADD__(a3, v10))
        {
          if (v10 >= *(_QWORD *)(v8 + 16))
            goto LABEL_19;
          v11 = v10 + 1;
          v12 = *(_QWORD *)(v8 + 32 + 8 * v10);
          v13 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v27, v7, a3 + v10);
          *v14 = v12;
          result = v13(&v27, 0);
          v10 = v11;
          if (a2 == v11)
            goto LABEL_14;
        }
        __break(1u);
LABEL_19:
        __break(1u);
        break;
      }
LABEL_14:
      ++v7;
      result = swift_bridgeObjectRelease();
      if (v7 == v6)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v24)(uint64_t *, _QWORD);
  _DWORD *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v45 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  v43 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>);
  v42 = a1;
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v12 = result;
  if (result)
  {
    v13 = 0;
    v44 = xmmword_21AFE7DA0;
    v39 = result;
    v40 = v7;
    while (v13 != v12)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v7, &demangling cache variable for type metadata for MLShapedArray<Float16>?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v10, v7, v8);
      }
      v14 = MLShapedArray.shape.getter();
      if (*(_QWORD *)(v14 + 16) != 1 || *(_QWORD *)(v14 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        v46 = 0;
        v47 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v26._countAndFlagsBits = 0xD000000000000023;
        v26._object = (void *)0x800000021AFF2BD0;
        String.append(_:)(v26);
        v48 = a2;
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._countAndFlagsBits = 0x656620726F66205DLL;
        v28._object = (void *)0xEF27206572757461;
        String.append(_:)(v28);
        v29._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._object = (void *)0x800000021AFF2C00;
        v30._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v30);
        MLShapedArray.shape.getter();
        v31._countAndFlagsBits = MEMORY[0x22075AAA4]();
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v32._countAndFlagsBits = 0x20776F7220746120;
        v32._object = (void *)0xE800000000000000;
        String.append(_:)(v32);
        v48 = v13;
        v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._countAndFlagsBits = 46;
        v34._object = (void *)0xE100000000000000;
        String.append(_:)(v34);
        v35 = v46;
        v36 = v47;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v37 = v35;
        *(_QWORD *)(v37 + 8) = v36;
        *(_OWORD *)(v37 + 16) = 0u;
        *(_OWORD *)(v37 + 32) = 0u;
        *(_BYTE *)(v37 + 48) = 0;
        swift_willThrow(0.0);
        return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v10, v8);
      }
      result = swift_bridgeObjectRelease();
      if (a2 < 0)
        goto LABEL_20;
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        v15 = 0;
        while (1)
        {
          v16 = v45 + v15;
          if (__OFADD__(v45, v15))
            break;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = v44;
          *(_QWORD *)(v17 + 32) = v15;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          _H0 = v46;
          __asm { FCVT            S8, H0 }
          v24 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v46, v13, v16);
          *v25 = _S8;
          result = v24(&v46, 0);
          if (a2 == ++v15)
            goto LABEL_15;
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v13;
      result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v10, v8);
      v12 = v39;
      v7 = v40;
      if (v13 == v39)
        return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t (*v19)(uint64_t *, _QWORD);
  _DWORD *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v40 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v38 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  v37 = a1;
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v12 = result;
  if (result)
  {
    v13 = 0;
    v39 = xmmword_21AFE7DA0;
    v34 = result;
    v35 = v7;
    while (v13 != v12)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v7, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v10, v7, v8);
      }
      v14 = MLShapedArray.shape.getter();
      if (*(_QWORD *)(v14 + 16) != 1 || *(_QWORD *)(v14 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        v41 = 0;
        v42 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v21._countAndFlagsBits = 0xD000000000000023;
        v21._object = (void *)0x800000021AFF2BD0;
        String.append(_:)(v21);
        v43 = a2;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 0x656620726F66205DLL;
        v23._object = (void *)0xEF27206572757461;
        String.append(_:)(v23);
        v24._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._object = (void *)0x800000021AFF2C00;
        v25._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v25);
        MLShapedArray.shape.getter();
        v26._countAndFlagsBits = MEMORY[0x22075AAA4]();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = 0x20776F7220746120;
        v27._object = (void *)0xE800000000000000;
        String.append(_:)(v27);
        v43 = v13;
        v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 46;
        v29._object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        v30 = v41;
        v31 = v42;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v32 = v30;
        *(_QWORD *)(v32 + 8) = v31;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_BYTE *)(v32 + 48) = 0;
        swift_willThrow(0.0);
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      }
      result = swift_bridgeObjectRelease();
      if (a2 < 0)
        goto LABEL_20;
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        v15 = 0;
        while (1)
        {
          v16 = v40 + v15;
          if (__OFADD__(v40, v15))
            break;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = v39;
          *(_QWORD *)(v17 + 32) = v15;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          v18 = v41;
          v19 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v41, v13, v16);
          *v20 = v18;
          result = v19(&v41, 0);
          if (a2 == ++v15)
            goto LABEL_15;
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v13;
      result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      v12 = v34;
      v7 = v35;
      if (v13 == v34)
        return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t (*v19)(double *, _QWORD);
  float *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  double v41;
  unint64_t v42;
  uint64_t v43;

  v40 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  v38 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  v37 = a1;
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v12 = result;
  if (result)
  {
    v13 = 0;
    v39 = xmmword_21AFE7DA0;
    v34 = result;
    v35 = v7;
    while (v13 != v12)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v7, &demangling cache variable for type metadata for MLShapedArray<Double>?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v10, v7, v8);
      }
      v14 = MLShapedArray.shape.getter();
      if (*(_QWORD *)(v14 + 16) != 1 || *(_QWORD *)(v14 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        v41 = 0.0;
        v42 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v21._countAndFlagsBits = 0xD000000000000023;
        v21._object = (void *)0x800000021AFF2BD0;
        String.append(_:)(v21);
        v43 = a2;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 0x656620726F66205DLL;
        v23._object = (void *)0xEF27206572757461;
        String.append(_:)(v23);
        v24._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._object = (void *)0x800000021AFF2C00;
        v25._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v25);
        MLShapedArray.shape.getter();
        v26._countAndFlagsBits = MEMORY[0x22075AAA4]();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = 0x20776F7220746120;
        v27._object = (void *)0xE800000000000000;
        String.append(_:)(v27);
        v43 = v13;
        v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 46;
        v29._object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        v30 = v41;
        v31 = v42;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(double *)v32 = v30;
        *(_QWORD *)(v32 + 8) = v31;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_BYTE *)(v32 + 48) = 0;
        swift_willThrow(0.0);
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      }
      result = swift_bridgeObjectRelease();
      if (a2 < 0)
        goto LABEL_20;
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
        v15 = 0;
        while (1)
        {
          v16 = v40 + v15;
          if (__OFADD__(v40, v15))
            break;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = v39;
          *(_QWORD *)(v17 + 32) = v15;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          v18 = v41;
          v19 = (uint64_t (*)(double *, _QWORD))specialized DenseMatrix.subscript.modify(&v41, v13, v16);
          *v20 = v18;
          result = v19(&v41, 0);
          if (a2 == ++v15)
            goto LABEL_15;
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v13;
      result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      v12 = v34;
      v7 = v35;
      if (v13 == v34)
        return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v24)(uint64_t *, _QWORD);
  _QWORD *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v45 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  v43 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float16>>);
  v42 = a1;
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v12 = result;
  if (result)
  {
    v13 = 0;
    v44 = xmmword_21AFE7DA0;
    v39 = result;
    v40 = v7;
    while (v13 != v12)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v7, &demangling cache variable for type metadata for MLShapedArray<Float16>?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v10, v7, v8);
      }
      v14 = MLShapedArray.shape.getter();
      if (*(_QWORD *)(v14 + 16) != 1 || *(_QWORD *)(v14 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        v46 = 0;
        v47 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v26._countAndFlagsBits = 0xD000000000000023;
        v26._object = (void *)0x800000021AFF2BD0;
        String.append(_:)(v26);
        v48 = a2;
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._countAndFlagsBits = 0x656620726F66205DLL;
        v28._object = (void *)0xEF27206572757461;
        String.append(_:)(v28);
        v29._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._object = (void *)0x800000021AFF2C00;
        v30._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v30);
        MLShapedArray.shape.getter();
        v31._countAndFlagsBits = MEMORY[0x22075AAA4]();
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v32._countAndFlagsBits = 0x20776F7220746120;
        v32._object = (void *)0xE800000000000000;
        String.append(_:)(v32);
        v48 = v13;
        v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._countAndFlagsBits = 46;
        v34._object = (void *)0xE100000000000000;
        String.append(_:)(v34);
        v35 = v46;
        v36 = v47;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v37 = v35;
        *(_QWORD *)(v37 + 8) = v36;
        *(_OWORD *)(v37 + 16) = 0u;
        *(_OWORD *)(v37 + 32) = 0u;
        *(_BYTE *)(v37 + 48) = 0;
        swift_willThrow(0.0);
        return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v10, v8);
      }
      result = swift_bridgeObjectRelease();
      if (a2 < 0)
        goto LABEL_20;
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        v15 = 0;
        while (1)
        {
          v16 = v45 + v15;
          if (__OFADD__(v45, v15))
            break;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = v44;
          *(_QWORD *)(v17 + 32) = v15;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          _H0 = v46;
          __asm { FCVT            D8, H0 }
          v24 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v46, v13, v16);
          *v25 = _D8;
          result = v24(&v46, 0);
          if (a2 == ++v15)
            goto LABEL_15;
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v13;
      result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v10, v8);
      v12 = v39;
      v7 = v40;
      if (v13 == v39)
        return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t (*v19)(uint64_t *, _QWORD);
  double *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v40 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v38 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  v37 = a1;
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v12 = result;
  if (result)
  {
    v13 = 0;
    v39 = xmmword_21AFE7DA0;
    v34 = result;
    v35 = v7;
    while (v13 != v12)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v7, &demangling cache variable for type metadata for MLShapedArray<Float>?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v10, v7, v8);
      }
      v14 = MLShapedArray.shape.getter();
      if (*(_QWORD *)(v14 + 16) != 1 || *(_QWORD *)(v14 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        v41 = 0;
        v42 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v21._countAndFlagsBits = 0xD000000000000023;
        v21._object = (void *)0x800000021AFF2BD0;
        String.append(_:)(v21);
        v43 = a2;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 0x656620726F66205DLL;
        v23._object = (void *)0xEF27206572757461;
        String.append(_:)(v23);
        v24._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._object = (void *)0x800000021AFF2C00;
        v25._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v25);
        MLShapedArray.shape.getter();
        v26._countAndFlagsBits = MEMORY[0x22075AAA4]();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = 0x20776F7220746120;
        v27._object = (void *)0xE800000000000000;
        String.append(_:)(v27);
        v43 = v13;
        v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 46;
        v29._object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        v30 = v41;
        v31 = v42;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v32 = v30;
        *(_QWORD *)(v32 + 8) = v31;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_BYTE *)(v32 + 48) = 0;
        swift_willThrow(0.0);
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      }
      result = swift_bridgeObjectRelease();
      if (a2 < 0)
        goto LABEL_20;
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        v15 = 0;
        while (1)
        {
          v16 = v40 + v15;
          if (__OFADD__(v40, v15))
            break;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = v39;
          *(_QWORD *)(v17 + 32) = v15;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          v18 = *(float *)&v41;
          v19 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v41, v13, v16);
          *v20 = v18;
          result = v19(&v41, 0);
          if (a2 == ++v15)
            goto LABEL_15;
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v13;
      result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      v12 = v34;
      v7 = v35;
      if (v13 == v34)
        return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *, _QWORD);
  _QWORD *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v40 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  v38 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  v37 = a1;
  result = Column.count.getter();
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v12 = result;
  if (result)
  {
    v13 = 0;
    v39 = xmmword_21AFE7DA0;
    v34 = result;
    v35 = v7;
    while (v13 != v12)
    {
      Column.subscript.getter();
      if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
      {
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
        MLShapedArrayProtocol.init(arrayLiteral:)();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v7, &demangling cache variable for type metadata for MLShapedArray<Double>?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v10, v7, v8);
      }
      v14 = MLShapedArray.shape.getter();
      if (*(_QWORD *)(v14 + 16) != 1 || *(_QWORD *)(v14 + 32) != a2)
      {
        swift_bridgeObjectRelease();
        v41 = 0;
        v42 = 0xE000000000000000;
        _StringGuts.grow(_:)(84);
        v21._countAndFlagsBits = 0xD000000000000023;
        v21._object = (void *)0x800000021AFF2BD0;
        String.append(_:)(v21);
        v43 = a2;
        v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 0x656620726F66205DLL;
        v23._object = (void *)0xEF27206572757461;
        String.append(_:)(v23);
        v24._countAndFlagsBits = Column.name.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._object = (void *)0x800000021AFF2C00;
        v25._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v25);
        MLShapedArray.shape.getter();
        v26._countAndFlagsBits = MEMORY[0x22075AAA4]();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = 0x20776F7220746120;
        v27._object = (void *)0xE800000000000000;
        String.append(_:)(v27);
        v43 = v13;
        v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 46;
        v29._object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        v30 = v41;
        v31 = v42;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v32 = v30;
        *(_QWORD *)(v32 + 8) = v31;
        *(_OWORD *)(v32 + 16) = 0u;
        *(_OWORD *)(v32 + 32) = 0u;
        *(_BYTE *)(v32 + 48) = 0;
        swift_willThrow(0.0);
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      }
      result = swift_bridgeObjectRelease();
      if (a2 < 0)
        goto LABEL_20;
      if (a2)
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
        v15 = 0;
        while (1)
        {
          v16 = v40 + v15;
          if (__OFADD__(v40, v15))
            break;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = v39;
          *(_QWORD *)(v17 + 32) = v15;
          lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
          MLShapedArrayProtocol.subscript.getter();
          swift_bridgeObjectRelease();
          v18 = v41;
          v19 = (uint64_t (*)(uint64_t *, _QWORD))specialized DenseMatrix.subscript.modify(&v41, v13, v16);
          *v20 = v18;
          result = v19(&v41, 0);
          if (a2 == ++v15)
            goto LABEL_15;
        }
        __break(1u);
        break;
      }
LABEL_15:
      ++v13;
      result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      v12 = v34;
      v7 = v35;
      if (v13 == v34)
        return result;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

#error "21AE40B80: call analysis failed (funcsize=86)"

#error "21AE40CE4: call analysis failed (funcsize=86)"

#error "21AE40E48: call analysis failed (funcsize=86)"

void specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;

  OUTLINED_FUNCTION_81_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  v4 = OUTLINED_FUNCTION_73_2();
  if (v4 < 0)
    goto LABEL_28;
  v5 = v4;
  if (!v4)
  {
LABEL_25:
    OUTLINED_FUNCTION_44_5();
    return;
  }
  OUTLINED_FUNCTION_66_4();
  while (1)
  {
    if (v1 == v5)
      goto LABEL_27;
    OUTLINED_FUNCTION_31_8();
    v6 = v47;
    if (!(_QWORD)v47)
      v6 = Dictionary.init(dictionaryLiteral:)();
    if (v44)
      break;
    OUTLINED_FUNCTION_101();
LABEL_21:
    OUTLINED_FUNCTION_83_3();
    if (v27)
      goto LABEL_25;
  }
  v43 = v1;
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_85_1();
  while (1)
  {
    OUTLINED_FUNCTION_16_9();
    if (v0)
    {
      OUTLINED_FUNCTION_31_2();
      v7 = OUTLINED_FUNCTION_14_7();
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
        v10 = OUTLINED_FUNCTION_12_0();
        *(_QWORD *)&v45 = v9;
        v18 = OUTLINED_FUNCTION_42_4(v10, v11, v12, v13, v14, v15, v16, v17, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45,
                v46,
                MEMORY[0x24BEE13C8],
                v47);
        goto LABEL_15;
      }
      OUTLINED_FUNCTION_12_0();
    }
    else
    {
      OUTLINED_FUNCTION_43_5();
    }
    v25 = OUTLINED_FUNCTION_101_2();
LABEL_15:
    if (__OFADD__(v42, v5))
      break;
    OUTLINED_FUNCTION_41_2((uint64_t)v18, v19, v20, v21, v22, v23, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + v5), v24, v35, v36, v37, v38, v39, v40, v25);
    if (v0)
    {
      OUTLINED_FUNCTION_12_0();
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v3, v2);
      v28 = OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_72_2(v28, &demangling cache variable for type metadata for Any?, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42);
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    OUTLINED_FUNCTION_86_3();
    outlined destroy of FeatureMatrixBuilder<Float>(v26, &demangling cache variable for type metadata for Any?);
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_114_1();
    if (v27)
    {
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_12_0();
      v2 = v35;
      v5 = v36;
      v1 = v43;
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;

  OUTLINED_FUNCTION_81_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  v4 = OUTLINED_FUNCTION_73_2();
  if (v4 < 0)
    goto LABEL_28;
  v5 = v4;
  if (!v4)
  {
LABEL_25:
    OUTLINED_FUNCTION_44_5();
    return;
  }
  OUTLINED_FUNCTION_66_4();
  while (1)
  {
    if (v1 == v5)
      goto LABEL_27;
    OUTLINED_FUNCTION_31_8();
    v6 = v47;
    if (!(_QWORD)v47)
      v6 = Dictionary.init(dictionaryLiteral:)();
    if (v44)
      break;
    OUTLINED_FUNCTION_101();
LABEL_21:
    OUTLINED_FUNCTION_83_3();
    if (v27)
      goto LABEL_25;
  }
  v43 = v1;
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_85_1();
  while (1)
  {
    OUTLINED_FUNCTION_16_9();
    if (v0)
    {
      OUTLINED_FUNCTION_31_2();
      v7 = OUTLINED_FUNCTION_14_7();
      if ((v8 & 1) != 0)
      {
        v9 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 4 * v7);
        v10 = OUTLINED_FUNCTION_12_0();
        LODWORD(v45) = v9;
        v18 = OUTLINED_FUNCTION_42_4(v10, v11, v12, v13, v14, v15, v16, v17, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45,
                v46,
                MEMORY[0x24BEE14E8],
                v47);
        goto LABEL_15;
      }
      OUTLINED_FUNCTION_12_0();
    }
    else
    {
      OUTLINED_FUNCTION_43_5();
    }
    v25 = OUTLINED_FUNCTION_101_2();
LABEL_15:
    if (__OFADD__(v42, v5))
      break;
    OUTLINED_FUNCTION_41_2((uint64_t)v18, v19, v20, v21, v22, v23, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + v5), v24, v35, v36, v37, v38, v39, v40, v25);
    if (v0)
    {
      OUTLINED_FUNCTION_12_0();
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v3, v2);
      v28 = OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_72_2(v28, &demangling cache variable for type metadata for Any?, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42);
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    OUTLINED_FUNCTION_86_3();
    outlined destroy of FeatureMatrixBuilder<Float>(v26, &demangling cache variable for type metadata for Any?);
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_114_1();
    if (v27)
    {
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_12_0();
      v2 = v35;
      v5 = v36;
      v1 = v43;
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

void specialized FeatureMatrixBuilder.fillDictionary<A>(from:descriptors:column:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  char v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[3];
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any?]>);
  v6 = Column.count.getter();
  if (v6 < 0)
    goto LABEL_29;
  v7 = v6;
  if (v6)
  {
    v8 = 0;
    v29 = *(_QWORD *)(a2 + 16);
    v9 = (unsigned __int8 *)(a2 + 56);
    v20 = v6;
    v19 = (unsigned __int8 *)(a2 + 56);
    while (1)
    {
      if (v8 == v7)
        goto LABEL_28;
      Column.subscript.getter();
      v10 = *(_QWORD *)&v28[0];
      if (!*(_QWORD *)&v28[0])
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        v10 = Dictionary.init(dictionaryLiteral:)();
      }
      if (v29)
        break;
      OUTLINED_FUNCTION_60_0();
LABEL_23:
      if (++v8 == v7)
        return;
    }
    swift_bridgeObjectRetain();
    while (1)
    {
      v12 = *((_QWORD *)v9 - 3);
      v11 = *((_QWORD *)v9 - 2);
      v13 = *((_QWORD *)v9 - 1);
      v14 = *v9;
      if (!*(_QWORD *)(v10 + 16))
        break;
      swift_bridgeObjectRetain_n();
      OUTLINED_FUNCTION_112_1();
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
      if ((v16 & 1) != 0)
      {
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(_QWORD *)(v10 + 56) + 32 * v15, (uint64_t)&v22, &demangling cache variable for type metadata for Any?);
      }
      else
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 1;
      }
      OUTLINED_FUNCTION_12_0();
      if (v25 == 1)
        goto LABEL_15;
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      *(_QWORD *)&v26 = swift_allocObject();
      outlined init with take of Any?((uint64_t)&v22, v26 + 16);
      outlined init with take of Any(&v26, v28);
LABEL_17:
      OUTLINED_FUNCTION_109_1();
      if (v17)
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        return;
      }
      a4(v28, v12, v11, v13, v14, v8);
      if (v4)
      {
        OUTLINED_FUNCTION_12_0();
        outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v13, v14);
        OUTLINED_FUNCTION_60_0();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v28, &demangling cache variable for type metadata for Any?);
        OUTLINED_FUNCTION_82_2();
        return;
      }
      v9 += 32;
      outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v28, &demangling cache variable for type metadata for Any?);
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_37_3(v13);
      if (v18)
      {
        OUTLINED_FUNCTION_60_0();
        OUTLINED_FUNCTION_101();
        v9 = v19;
        v7 = v20;
        goto LABEL_23;
      }
    }
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 1;
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_112_1();
LABEL_15:
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v22, &demangling cache variable for type metadata for Any??);
    memset(v28, 0, 32);
    goto LABEL_17;
  }
}

void specialized FeatureMatrixBuilder.fill(_:descriptor:row:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)&v6, &demangling cache variable for type metadata for Any?);
  if (v7)
  {
    outlined init with take of Any(&v6, &v8);
    __asm { BR              X10 }
  }
  outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v6, &demangling cache variable for type metadata for Any?);
}

{
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, (uint64_t)&v6, &demangling cache variable for type metadata for Any?);
  if (v7)
  {
    outlined init with take of Any(&v6, &v8);
    __asm { BR              X10 }
  }
  outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v6, &demangling cache variable for type metadata for Any?);
}

void specialized FeatureMatrixBuilder.fillArray(_:descriptor:size:row:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21,void (*a22)(void),void (*a23)(uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t),void (*a24)(void),void (*a25)(uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  int EnumTagSinglePayload;
  void *v79;
  uint64_t *v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Swift::String v102;
  Swift::String v103;
  Swift::String v104;
  Swift::String v105;
  Swift::String v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131[4];
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  OUTLINED_FUNCTION_8_1();
  v127 = v25;
  v136 = v28;
  v129 = v29;
  v130 = v30;
  v128 = v31;
  v125 = v33;
  v126 = (void *)v32;
  v35 = v34;
  v37 = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v39);
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  v114 = *(_QWORD *)(v116 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v41);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_34_7(v43, (uint64_t)v111);
  v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  v121 = *(_QWORD *)(v124 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_208();
  v120 = v45;
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_68_3((uint64_t)&v111 - v47);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_53_0();
  v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v119 = *(_QWORD *)(v123 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v49);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v50);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v51);
  OUTLINED_FUNCTION_49();
  v54 = v53 - v52;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  OUTLINED_FUNCTION_96_2();
  MEMORY[0x24BDAC7A8](v56);
  OUTLINED_FUNCTION_49();
  v59 = v58 - v57;
  OUTLINED_FUNCTION_53_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any Collection<Self.Collection.Element == Int>);
  v60 = MEMORY[0x24BEE4AD8] + 8;
  if (!OUTLINED_FUNCTION_30_7())
  {
    v111 = a21;
    v65 = v128;
    v112 = v35;
    OUTLINED_FUNCTION_53_6();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any Collection<Self.Collection.Element == Float>);
    if ((OUTLINED_FUNCTION_30_7() & 1) != 0)
    {
      v66 = OUTLINED_FUNCTION_40_7();
      lazy protocol witness table accessor for type Float and conformance Float();
      OUTLINED_FUNCTION_116_1();
      v67 = MEMORY[0x24BEE14E8];
LABEL_7:
      v113 = v67;
      v114 = v26;
      v111 = (uint64_t *)v66;
      v112 = v60;
      OUTLINED_FUNCTION_100_1();
      v75 = v136;
LABEL_8:
      FeatureMatrixBuilder.fillArray<A, B>(_:descriptor:size:row:column:)(v68, v69, v70, v71, v72, v73, v74, v75, (uint64_t)v111, v112, v113, v114, v115);
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_53_6();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any Collection<Self.Collection.Element == Double>);
    v60 = MEMORY[0x24BEE4AD8] + 8;
    if (OUTLINED_FUNCTION_30_7())
    {
      v66 = OUTLINED_FUNCTION_40_7();
      lazy protocol witness table accessor for type Double and conformance Double();
      OUTLINED_FUNCTION_116_1();
      v67 = MEMORY[0x24BEE13C8];
      goto LABEL_7;
    }
    outlined init with copy of Any(v37, (uint64_t)&v132);
    if (OUTLINED_FUNCTION_6_8())
    {
      OUTLINED_FUNCTION_110_1(v54, 0);
      if (__swift_getEnumTagSinglePayload(v54, 1, v55) != 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v59, v54, v55);
        OUTLINED_FUNCTION_100_1();
        a22();
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v59, v55);
        goto LABEL_10;
      }
    }
    else
    {
      OUTLINED_FUNCTION_110_1(v54, 1);
    }
    outlined destroy of FeatureMatrixBuilder<Float>(v54, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
    v76 = (_QWORD *)v37;
    outlined init with copy of Any(v37, (uint64_t)&v132);
    v77 = v123;
    if (OUTLINED_FUNCTION_6_8())
    {
      OUTLINED_FUNCTION_61_4(v26, 0);
      EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v26, 1, v77);
      v79 = v126;
      v80 = v111;
      if (EnumTagSinglePayload != 1)
      {
        v82 = v119;
        v83 = v118;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 32))(v118, v26, v77);
        v84 = v83;
        v85 = v112;
        v86 = v79;
        v87 = v125;
        v88 = v65;
        v89 = v129;
LABEL_18:
        a23(v84, v85, v86, v87, v88, v89, v130, v136);
        (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v83, v77);
        goto LABEL_10;
      }
    }
    else
    {
      OUTLINED_FUNCTION_61_4(v26, 1);
      v79 = v126;
      v80 = v111;
    }
    outlined destroy of FeatureMatrixBuilder<Float>(v26, &demangling cache variable for type metadata for MLShapedArray<Float>?);
    OUTLINED_FUNCTION_115_1();
    v90 = v122;
    v91 = v124;
    if (OUTLINED_FUNCTION_6_8())
    {
      OUTLINED_FUNCTION_22_4(v90, 0);
      if (__swift_getEnumTagSinglePayload(v90, 1, v91) != 1)
      {
        v92 = v90;
        v93 = v121;
        v94 = v117;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 32))(v117, v92, v91);
        OUTLINED_FUNCTION_61_5();
        a24();
        (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v94, v91);
        goto LABEL_10;
      }
    }
    else
    {
      OUTLINED_FUNCTION_22_4(v90, 1);
    }
    outlined destroy of FeatureMatrixBuilder<Float>(v90, &demangling cache variable for type metadata for MLShapedArray<Double>?);
    OUTLINED_FUNCTION_115_1();
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    if (OUTLINED_FUNCTION_6_8())
    {
      v95 = *(id *)&v131[0];
      v96 = v120;
      MLShapedArray.init(_:)();
      v97 = OUTLINED_FUNCTION_65_6();
      ((void (*)(uint64_t))a24)(v97);
      OUTLINED_FUNCTION_69_2(v96, *(uint64_t (**)(uint64_t, _QWORD))(v121 + 8));

      goto LABEL_10;
    }
    OUTLINED_FUNCTION_53_6();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any Collection<Self.Collection.Element == Float16>);
    if ((OUTLINED_FUNCTION_30_7() & 1) != 0)
    {
      outlined init with take of BinaryFloatingPoint(v131, (uint64_t)&v132);
      v98 = v134;
      v99 = v135;
      __swift_project_boxed_opaque_existential_1(&v132, v134);
      v100 = __swift_instantiateConcreteTypeFromMangledName(v80);
      lazy protocol witness table accessor for type Float16 and conformance Float16();
      OUTLINED_FUNCTION_116_1();
      v113 = MEMORY[0x24BEE4678];
      v114 = v99;
      v111 = (uint64_t *)v100;
      v112 = v98;
      OUTLINED_FUNCTION_61_5();
      goto LABEL_8;
    }
    outlined init with copy of Any((uint64_t)v76, (uint64_t)&v132);
    v101 = v115;
    v77 = v116;
    if ((OUTLINED_FUNCTION_6_8() & 1) != 0)
    {
      OUTLINED_FUNCTION_61_4(v101, 0);
      if (__swift_getEnumTagSinglePayload(v101, 1, v77) != 1)
      {
        a23 = a25;
        v82 = v114;
        v83 = v113;
        (*(void (**)(void))(v114 + 32))();
        v84 = OUTLINED_FUNCTION_65_6();
        goto LABEL_18;
      }
    }
    else
    {
      OUTLINED_FUNCTION_61_4(v101, 1);
    }
    outlined destroy of FeatureMatrixBuilder<Float>(v101, &demangling cache variable for type metadata for MLShapedArray<Float16>?);
    v132 = 0;
    v133 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v102._object = (void *)0x800000021AFF2B30;
    v102._countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v102);
    OUTLINED_FUNCTION_113_0();
    v103._countAndFlagsBits = v112;
    v103._object = v79;
    String.append(_:)(v103);
    OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_15_8();
    __swift_project_boxed_opaque_existential_1(v76, v76[3]);
    swift_getDynamicType();
    v104._countAndFlagsBits = OUTLINED_FUNCTION_92_0();
    String.append(_:)(v104);
    OUTLINED_FUNCTION_123();
    v105._countAndFlagsBits = 0x20776F7220746120;
    v105._object = (void *)0xE800000000000000;
    String.append(_:)(v105);
    *(_QWORD *)&v131[0] = v130;
    v106._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v106);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_51_6();
    v107 = v132;
    v108 = v133;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v109 = OUTLINED_FUNCTION_49_0();
    *v110 = v107;
    v110[1] = v108;
    OUTLINED_FUNCTION_5_8(v109, (uint64_t)v110);
    goto LABEL_10;
  }
  outlined init with take of BinaryFloatingPoint(v131, (uint64_t)&v132);
  v61 = v134;
  v62 = v135;
  v63 = __swift_project_boxed_opaque_existential_1(&v132, v134);
  v64 = __swift_instantiateConcreteTypeFromMangledName(a21);
  lazy protocol witness table accessor for type Int and conformance Int();
  OUTLINED_FUNCTION_116_1();
  FeatureMatrixBuilder.fillArray<A, B>(_:descriptor:size:row:column:)((uint64_t)v63, v35, (uint64_t)v126, v125, v128, v129, v130, v136, v64, v61, MEMORY[0x24BEE1768], v62, v115);
LABEL_9:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v132);
LABEL_10:
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_7();
}

uint64_t specialized FeatureMatrixBuilder.fillArray<A>(_:descriptor:size:row:column:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t inited;
  _QWORD *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t (*v18)(_QWORD *, _QWORD);
  float *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  _QWORD v32[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  v12 = (_QWORD *)MLShapedArray.shape.getter();
  v13 = specialized static Array<A>.== infix(_:_:)((_QWORD *)inited, v12);
  swift_bridgeObjectRelease();
  result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
        *(_QWORD *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        v17 = (float)SLODWORD(v32[0]);
        v18 = (uint64_t (*)(_QWORD *, _QWORD))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *v19 = v17;
        result = v18(v32, 0);
        if (a6 == ++v15)
          return result;
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._countAndFlagsBits = 0xD000000000000023;
    v20._object = (void *)0x800000021AFF2BD0;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x656620726F66205DLL;
    v22._object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = a2;
    v23._object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._object = (void *)0x800000021AFF2C00;
    v24._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._countAndFlagsBits = MEMORY[0x22075AAA4]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0x20776F7220746120;
    v26._object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    v32[4] = a7;
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 46;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_BYTE *)(v29 + 48) = 0;
    return swift_willThrow(0.0);
  }
  return result;
}

{
  uint64_t inited;
  _QWORD *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t (*v18)(_QWORD *, _QWORD);
  double *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  _QWORD v32[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  v12 = (_QWORD *)MLShapedArray.shape.getter();
  v13 = specialized static Array<A>.== infix(_:_:)((_QWORD *)inited, v12);
  swift_bridgeObjectRelease();
  result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
        *(_QWORD *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        v17 = (double)SLODWORD(v32[0]);
        v18 = (uint64_t (*)(_QWORD *, _QWORD))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *v19 = v17;
        result = v18(v32, 0);
        if (a6 == ++v15)
          return result;
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._countAndFlagsBits = 0xD000000000000023;
    v20._object = (void *)0x800000021AFF2BD0;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x656620726F66205DLL;
    v22._object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = a2;
    v23._object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._object = (void *)0x800000021AFF2C00;
    v24._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._countAndFlagsBits = MEMORY[0x22075AAA4]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0x20776F7220746120;
    v26._object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    v32[4] = a7;
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 46;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_BYTE *)(v29 + 48) = 0;
    return swift_willThrow(0.0);
  }
  return result;
}

{
  uint64_t inited;
  _QWORD *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(_QWORD *, _QWORD);
  _DWORD *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  _QWORD v32[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v12 = (_QWORD *)MLShapedArray.shape.getter();
  v13 = specialized static Array<A>.== infix(_:_:)((_QWORD *)inited, v12);
  swift_bridgeObjectRelease();
  result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
        *(_QWORD *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        v17 = v32[0];
        v18 = (uint64_t (*)(_QWORD *, _QWORD))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *v19 = v17;
        result = v18(v32, 0);
        if (a6 == ++v15)
          return result;
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._countAndFlagsBits = 0xD000000000000023;
    v20._object = (void *)0x800000021AFF2BD0;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x656620726F66205DLL;
    v22._object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = a2;
    v23._object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._object = (void *)0x800000021AFF2C00;
    v24._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._countAndFlagsBits = MEMORY[0x22075AAA4]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0x20776F7220746120;
    v26._object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    v32[4] = a7;
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 46;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_BYTE *)(v29 + 48) = 0;
    return swift_willThrow(0.0);
  }
  return result;
}

{
  uint64_t inited;
  _QWORD *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t (*v18)(double *, _QWORD);
  float *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  double v32[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  v12 = (_QWORD *)MLShapedArray.shape.getter();
  v13 = specialized static Array<A>.== infix(_:_:)((_QWORD *)inited, v12);
  swift_bridgeObjectRelease();
  result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
        *(_QWORD *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        v17 = v32[0];
        v18 = (uint64_t (*)(double *, _QWORD))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *v19 = v17;
        result = v18(v32, 0);
        if (a6 == ++v15)
          return result;
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._countAndFlagsBits = 0xD000000000000023;
    v20._object = (void *)0x800000021AFF2BD0;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x656620726F66205DLL;
    v22._object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = a2;
    v23._object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._object = (void *)0x800000021AFF2C00;
    v24._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._countAndFlagsBits = MEMORY[0x22075AAA4]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0x20776F7220746120;
    v26._object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    *(_QWORD *)&v32[4] = a7;
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 46;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_BYTE *)(v29 + 48) = 0;
    return swift_willThrow(0.0);
  }
  return result;
}

{
  uint64_t inited;
  _QWORD *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v23)(_QWORD *, _QWORD);
  _DWORD *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  _QWORD v37[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  v12 = (_QWORD *)MLShapedArray.shape.getter();
  v13 = specialized static Array<A>.== infix(_:_:)((_QWORD *)inited, v12);
  swift_bridgeObjectRelease();
  result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Float>);
      v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
        *(_QWORD *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        _H0 = v37[0];
        __asm { FCVT            S8, H0 }
        v23 = (uint64_t (*)(_QWORD *, _QWORD))specialized DenseMatrix.subscript.modify(v37, a7, a8 + v15);
        *v24 = _S8;
        result = v23(v37, 0);
        if (a6 == ++v15)
          return result;
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v25._countAndFlagsBits = 0xD000000000000023;
    v25._object = (void *)0x800000021AFF2BD0;
    String.append(_:)(v25);
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0x656620726F66205DLL;
    v27._object = (void *)0xEF27206572757461;
    String.append(_:)(v27);
    swift_bridgeObjectRetain();
    v28._countAndFlagsBits = a2;
    v28._object = a3;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._object = (void *)0x800000021AFF2C00;
    v29._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v29);
    MLShapedArray.shape.getter();
    v30._countAndFlagsBits = MEMORY[0x22075AAA4]();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 0x20776F7220746120;
    v31._object = (void *)0xE800000000000000;
    String.append(_:)(v31);
    v37[4] = a7;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 46;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0xE000000000000000;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_BYTE *)(v34 + 48) = 0;
    return swift_willThrow(0.0);
  }
  return result;
}

{
  uint64_t inited;
  _QWORD *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t (*v18)(_QWORD *, _QWORD);
  double *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  _QWORD v32[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v12 = (_QWORD *)MLShapedArray.shape.getter();
  v13 = specialized static Array<A>.== infix(_:_:)((_QWORD *)inited, v12);
  swift_bridgeObjectRelease();
  result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
        *(_QWORD *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        v17 = *(float *)v32;
        v18 = (uint64_t (*)(_QWORD *, _QWORD))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *v19 = v17;
        result = v18(v32, 0);
        if (a6 == ++v15)
          return result;
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._countAndFlagsBits = 0xD000000000000023;
    v20._object = (void *)0x800000021AFF2BD0;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x656620726F66205DLL;
    v22._object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = a2;
    v23._object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._object = (void *)0x800000021AFF2C00;
    v24._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._countAndFlagsBits = MEMORY[0x22075AAA4]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0x20776F7220746120;
    v26._object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    v32[4] = a7;
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 46;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_BYTE *)(v29 + 48) = 0;
    return swift_willThrow(0.0);
  }
  return result;
}

{
  uint64_t inited;
  _QWORD *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *, _QWORD);
  _QWORD *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  _QWORD v32[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  v12 = (_QWORD *)MLShapedArray.shape.getter();
  v13 = specialized static Array<A>.== infix(_:_:)((_QWORD *)inited, v12);
  swift_bridgeObjectRelease();
  result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
        *(_QWORD *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        v17 = v32[0];
        v18 = (uint64_t (*)(_QWORD *, _QWORD))specialized DenseMatrix.subscript.modify(v32, a7, a8 + v15);
        *v19 = v17;
        result = v18(v32, 0);
        if (a6 == ++v15)
          return result;
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v20._countAndFlagsBits = 0xD000000000000023;
    v20._object = (void *)0x800000021AFF2BD0;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x656620726F66205DLL;
    v22._object = (void *)0xEF27206572757461;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = a2;
    v23._object = a3;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._object = (void *)0x800000021AFF2C00;
    v24._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    MLShapedArray.shape.getter();
    v25._countAndFlagsBits = MEMORY[0x22075AAA4]();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0x20776F7220746120;
    v26._object = (void *)0xE800000000000000;
    String.append(_:)(v26);
    v32[4] = a7;
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 46;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0xE000000000000000;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_BYTE *)(v29 + 48) = 0;
    return swift_willThrow(0.0);
  }
  return result;
}

{
  uint64_t inited;
  _QWORD *v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v23)(_QWORD *, _QWORD);
  _QWORD *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  _QWORD v37[5];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float16>);
  v12 = (_QWORD *)MLShapedArray.shape.getter();
  v13 = specialized static Array<A>.== infix(_:_:)((_QWORD *)inited, v12);
  swift_bridgeObjectRelease();
  result = swift_setDeallocating();
  if (v13)
  {
    if (a6 < 0)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    if (a6)
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureMatrixBuilder<Double>);
      v15 = 0;
      while (!__OFADD__(a8, v15))
      {
        v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
        *(_QWORD *)(v16 + 32) = v15;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float16> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float16>);
        MLShapedArrayProtocol.subscript.getter();
        swift_bridgeObjectRelease();
        _H0 = v37[0];
        __asm { FCVT            D8, H0 }
        v23 = (uint64_t (*)(_QWORD *, _QWORD))specialized DenseMatrix.subscript.modify(v37, a7, a8 + v15);
        *v24 = _D8;
        result = v23(v37, 0);
        if (a6 == ++v15)
          return result;
      }
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    _StringGuts.grow(_:)(84);
    v25._countAndFlagsBits = 0xD000000000000023;
    v25._object = (void *)0x800000021AFF2BD0;
    String.append(_:)(v25);
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0x656620726F66205DLL;
    v27._object = (void *)0xEF27206572757461;
    String.append(_:)(v27);
    swift_bridgeObjectRetain();
    v28._countAndFlagsBits = a2;
    v28._object = a3;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._object = (void *)0x800000021AFF2C00;
    v29._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v29);
    MLShapedArray.shape.getter();
    v30._countAndFlagsBits = MEMORY[0x22075AAA4]();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 0x20776F7220746120;
    v31._object = (void *)0xE800000000000000;
    String.append(_:)(v31);
    v37[4] = a7;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 46;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0xE000000000000000;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_BYTE *)(v34 + 48) = 0;
    return swift_willThrow(0.0);
  }
  return result;
}

uint64_t partial apply for closure #1 in FeatureVectorizer.fitted(to:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in FeatureVectorizer.fitted(to:)(a1, a2, a3);
}

uint64_t outlined consume of FeatureVectorizer<Float>.Transformer?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 0xFE) == 4)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of ColumnDescriptor.ColumnTypeDescriptor(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 0xFE) == 4)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized DenseMatrix.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v6 = malloc(0x60uLL);
  *a1 = v6;
  v7 = (uint64_t)(v6 + 4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  if ((DenseMatrix.layout.getter() & 1) == 0)
  {
    result = DenseMatrix.columnCount.getter();
    v9 = a2 * result;
    if ((unsigned __int128)(a2 * (__int128)result) >> 64 == (a2 * result) >> 63)
    {
      v10 = __OFADD__(v9, a3);
      v11 = v9 + a3;
      if (!v10)
      {
        v6[8] = DenseMatrix.storage.modify();
        specialized ContiguousArray.subscript.modify(v7, v11);
        v6[9] = v12;
        return (uint64_t)DenseMatrix.subscript.modifyspecialized ;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
  result = DenseMatrix.rowCount.getter();
  v13 = a3 * result;
  if ((unsigned __int128)(a3 * (__int128)result) >> 64 != (a3 * result) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v14 = v13 + a2;
  if (!__OFADD__(v13, a2))
  {
    v6[10] = DenseMatrix.storage.modify();
    specialized ContiguousArray.subscript.modify(v7, v14);
    v6[11] = v15;
    return (uint64_t)DenseMatrix.subscript.modifyspecialized ;
  }
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v6 = malloc(0x60uLL);
  *a1 = v6;
  v7 = (uint64_t)(v6 + 4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  if ((DenseMatrix.layout.getter() & 1) == 0)
  {
    result = DenseMatrix.columnCount.getter();
    v9 = a2 * result;
    if ((unsigned __int128)(a2 * (__int128)result) >> 64 == (a2 * result) >> 63)
    {
      v10 = __OFADD__(v9, a3);
      v11 = v9 + a3;
      if (!v10)
      {
        v6[8] = DenseMatrix.storage.modify();
        specialized ContiguousArray.subscript.modify(v7, v11);
        v6[9] = v12;
        return (uint64_t)DenseMatrix.subscript.modifyspecialized ;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
  result = DenseMatrix.rowCount.getter();
  v13 = a3 * result;
  if ((unsigned __int128)(a3 * (__int128)result) >> 64 != (a3 * result) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v14 = v13 + a2;
  if (!__OFADD__(v13, a2))
  {
    v6[10] = DenseMatrix.storage.modify();
    specialized ContiguousArray.subscript.modify(v7, v14);
    v6[11] = v15;
    return (uint64_t)DenseMatrix.subscript.modifyspecialized ;
  }
LABEL_11:
  __break(1u);
  return result;
}

void DenseMatrix.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  OUTLINED_FUNCTION_108_1();
  OUTLINED_FUNCTION_75_5(v1);
}

{
  void *v1;

  v1 = *(void **)a1;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(*(_QWORD *)a1 + 32, 0);
  OUTLINED_FUNCTION_108_1();
  OUTLINED_FUNCTION_75_5(v1);
}

void specialized ContiguousArray.subscript.modify(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  v4 = *v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v4 = v6;
    *v2 = v6;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v4 + 16) <= a2)
LABEL_7:
    __break(1u);
}

{
  uint64_t *v2;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  v4 = *v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v4 = v6;
    *v2 = v6;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v4 + 16) <= a2)
LABEL_7:
    __break(1u);
}

uint64_t outlined init with take of BinaryFloatingPoint(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

double specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  int v36;
  float v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  __int16 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;

  v68 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v66 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v67 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v65 = (char *)&v60 - v4;
  v5 = swift_getAssociatedTypeWitness();
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v62 = (char *)&v60 - v7;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v61 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v60 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v60 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v60 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v60 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v60 - v23;
  v25 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
  v26 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
  if (v25 == 11)
  {
    if (v26 == 52)
    {
      v32 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v24, v68, a2);
      v33 = swift_dynamicCast();
      _D8 = v69;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v22, v32, a2);
      if (v33)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v22, a2);
      }
      else
      {
        v48 = dispatch thunk of FloatingPoint.sign.getter();
        v49 = v62;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        v50 = v64;
        swift_getAssociatedConformanceWitness();
        v51 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v49, v50);
        v52 = v65;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v22, a2);
        v53 = v67;
        swift_getAssociatedConformanceWitness();
        v54 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v52, v53);
        *(_QWORD *)&_D8 = (v48 << 63) | ((unint64_t)(v51 & 0x7FF) << 52) | v54 & 0xFFFFFFFFFFFFFLL;
      }
      return _D8;
    }
    goto LABEL_16;
  }
  if (v25 == 8)
  {
    if (v26 == 23)
    {
      v35 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v19, v68, a2);
      v36 = swift_dynamicCast();
      v37 = *(float *)&v69;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v16, v35, a2);
      if (v36)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v16, a2);
      }
      else
      {
        dispatch thunk of FloatingPoint.sign.getter();
        v55 = v62;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        v56 = v64;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v55, v56);
        v57 = v65;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v16, a2);
        v58 = v67;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v57, v58);
        Float.init(sign:exponentBitPattern:significandBitPattern:)();
        return v59;
      }
      return v37;
    }
LABEL_16:
    lazy protocol witness table accessor for type Double and conformance Double();
    v38 = v68;
    static BinaryFloatingPoint._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v38, a2);
    return v69;
  }
  if (v25 != 5 || v26 != 10)
    goto LABEL_16;
  v28 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v68, a2);
  v29 = swift_dynamicCast();
  _H8 = LOWORD(v69);
  v31 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v61, v28, a2);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v31, a2);
  }
  else
  {
    dispatch thunk of FloatingPoint.sign.getter();
    v40 = v62;
    dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
    v41 = v64;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v40, v41);
    v42 = v65;
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v31, a2);
    v43 = v67;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v42, v43);
    Float16.init(sign:exponentBitPattern:significandBitPattern:)();
    _H8 = v44;
  }
  __asm { FCVT            D8, H8 }
  return _D8;
}

float specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  char *v31;
  uint64_t v32;
  int v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  __int16 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;

  v68 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v66 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v67 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v65 = (char *)&v60 - v4;
  v5 = swift_getAssociatedTypeWitness();
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v62 = (char *)&v60 - v7;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v61 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v60 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v60 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v60 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v60 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v60 - v23;
  v25 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
  v26 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
  if (v25 == 11)
  {
    if (v26 == 52)
    {
      v32 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v24, v68, a2);
      v33 = swift_dynamicCast();
      v34 = v69;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v22, v32, a2);
      if (v33)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v22, a2);
      }
      else
      {
        v48 = dispatch thunk of FloatingPoint.sign.getter();
        v49 = v62;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        v50 = v64;
        swift_getAssociatedConformanceWitness();
        v51 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v49, v50);
        v52 = v65;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v22, a2);
        v53 = v67;
        swift_getAssociatedConformanceWitness();
        v54 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v52, v53);
        *(_QWORD *)&v34 = (v48 << 63) | ((unint64_t)(v51 & 0x7FF) << 52) | v54 & 0xFFFFFFFFFFFFFLL;
      }
      return v34;
    }
LABEL_16:
    lazy protocol witness table accessor for type Float and conformance Float();
    v38 = v68;
    static BinaryFloatingPoint._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v38, a2);
    return *(float *)&v69;
  }
  if (v25 == 8)
  {
    if (v26 == 23)
    {
      v35 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v19, v68, a2);
      v36 = swift_dynamicCast();
      _S8 = *(float *)&v69;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v16, v35, a2);
      if (v36)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v16, a2);
      }
      else
      {
        dispatch thunk of FloatingPoint.sign.getter();
        v55 = v62;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        v56 = v64;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v55, v56);
        v57 = v65;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v16, a2);
        v58 = v67;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v57, v58);
        Float.init(sign:exponentBitPattern:significandBitPattern:)();
        return v59;
      }
      return _S8;
    }
    goto LABEL_16;
  }
  if (v25 != 5 || v26 != 10)
    goto LABEL_16;
  v28 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v68, a2);
  v29 = swift_dynamicCast();
  _H8 = LOWORD(v69);
  v31 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v61, v28, a2);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v31, a2);
  }
  else
  {
    dispatch thunk of FloatingPoint.sign.getter();
    v40 = v62;
    dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
    v41 = v64;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v40, v41);
    v42 = v65;
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v31, a2);
    v43 = v67;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v42, v43);
    Float16.init(sign:exponentBitPattern:significandBitPattern:)();
    _H8 = v44;
  }
  __asm { FCVT            S8, H8 }
  return _S8;
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BEE14F0], MEMORY[0x24BEE14E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Float16 and conformance Float16()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Float16 and conformance Float16;
  if (!lazy protocol witness table cache variable for type Float16 and conformance Float16)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BEE4680], MEMORY[0x24BEE4678]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float16 and conformance Float16);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BEE13E0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

uint64_t sub_21AE45F70()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x22075B938](MEMORY[0x24BEE45A8], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(uint64_t (*a1)(void))
{
  return a1();
}

void outlined destroy of FeatureMatrixBuilder<Float>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_22();
}

uint64_t closure #1 in FeatureVectorizer.fitted(to:)partial apply@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return partial apply for closure #1 in FeatureVectorizer.fitted(to:)(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_1_12()
{
  return Column.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_2_12()
{
  return Column.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_6_10@<X0>(uint64_t (*a1)(uint64_t *, _QWORD)@<X8>, uint64_t a2)
{
  return a1(&a2, 0);
}

uint64_t OUTLINED_FUNCTION_7_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return specialized DenseMatrix.subscript.modify(&a9, v10, v9);
}

uint64_t OUTLINED_FUNCTION_8_11()
{
  return Column.count.getter();
}

uint64_t OUTLINED_FUNCTION_9_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return specialized DenseMatrix.subscript.modify(&a9, v10, v9);
}

uint64_t OUTLINED_FUNCTION_10_7()
{
  return AnyColumn.assumingType<A>(_:)();
}

unint64_t OUTLINED_FUNCTION_14_7()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v3, v2);
  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

void OUTLINED_FUNCTION_15_8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6720747562202C27;
  v0._object = (void *)0xEB0000000020746FLL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_16_9()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_17_6()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_18_5()
{
  return swift_dynamicCastMetatype();
}

uint64_t OUTLINED_FUNCTION_21_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, a14);
  return a8(va, v15, v14, v17, v16, a10);
}

uint64_t OUTLINED_FUNCTION_26_6()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_27_10()
{
  return swift_dynamicCastMetatype();
}

uint64_t OUTLINED_FUNCTION_30_7()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_31_8()
{
  return Column.subscript.getter();
}

void OUTLINED_FUNCTION_33_5()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = *(_QWORD *)(v0 + 16);
}

void OUTLINED_FUNCTION_34_7(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 280) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_36_5()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_37_3(uint64_t a1)
{
  char v1;

  return outlined consume of ColumnDescriptor.ColumnTypeDescriptor(a1, v1);
}

void OUTLINED_FUNCTION_38_4(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_40_7()
{
  uint64_t v0;

  outlined init with take of BinaryFloatingPoint((__int128 *)(v0 - 200), v0 - 128);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 - 128), *(_QWORD *)(v0 - 104));
  return __swift_instantiateConcreteTypeFromMangledName(*(uint64_t **)(v0 - 368));
}

uint64_t OUTLINED_FUNCTION_41_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, a14);
  return a7(va, v15, v14, v17, v16, a9);
}

_OWORD *OUTLINED_FUNCTION_42_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20,uint64_t a21,__int128 a22)
{
  return outlined init with take of Any(&a19, &a22);
}

uint64_t OUTLINED_FUNCTION_43_5()
{
  char v0;
  uint64_t v1;

  return outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v1, v0);
}

void OUTLINED_FUNCTION_47_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 288) = a5;
  *(_QWORD *)(v7 - 296) = a4;
  *(_QWORD *)(v7 - 304) = a3;
  *(_QWORD *)(v7 - 120) = v6;
  *(_QWORD *)(v7 - 112) = a2;
  *(_QWORD *)(v7 - 72) = v5;
}

void OUTLINED_FUNCTION_51_6()
{
  Swift::String v0;

  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_53_6()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of Any(v0, v1 - 160);
}

void OUTLINED_FUNCTION_55_6()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 96);
  *(_QWORD *)(v0 - 104) = *(_QWORD *)(v0 - 104);
  *(_QWORD *)(v0 - 96) = v1;
  String.append(_:)(*(Swift::String *)(v0 - 296));
}

uint64_t OUTLINED_FUNCTION_58_2()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 272) + 8))(*(_QWORD *)(v1 - 280), v0);
}

uint64_t OUTLINED_FUNCTION_59_4()
{
  return AnyColumn.wrappedElementType.getter();
}

uint64_t OUTLINED_FUNCTION_60_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;

  return v1(*(_QWORD *)(a1 - 256), v2);
}

void OUTLINED_FUNCTION_64_5()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 0;
  *(_QWORD *)(v0 - 96) = 0xE000000000000000;
  _StringGuts.grow(_:)(*(_QWORD *)(v0 - 304));
}

uint64_t OUTLINED_FUNCTION_65_6()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_68_3(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_69_2@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 264));
}

uint64_t OUTLINED_FUNCTION_70_4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 96);
}

uint64_t OUTLINED_FUNCTION_71_5(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

void OUTLINED_FUNCTION_72_2(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)va, a2);
}

uint64_t OUTLINED_FUNCTION_73_2()
{
  return Column.count.getter();
}

void OUTLINED_FUNCTION_75_5(void *a1)
{
  free(a1);
}

uint64_t OUTLINED_FUNCTION_76_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_77_3(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_78_4(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 256) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_79_3(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_80_3(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_82_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_88_2()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 120) + 8))(v0, *(_QWORD *)(v1 - 112));
}

uint64_t OUTLINED_FUNCTION_89_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_92_0()
{
  return _typeName(_:qualified:)();
}

uint64_t OUTLINED_FUNCTION_97_1()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 160) + 8))(*(_QWORD *)(v0 - 168), *(_QWORD *)(v0 - 152));
}

uint64_t OUTLINED_FUNCTION_99_2()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 96);
}

double OUTLINED_FUNCTION_101_2()
{
  return 0.0;
}

uint64_t OUTLINED_FUNCTION_102_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_103_1(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void OUTLINED_FUNCTION_104_1(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_105_0()
{
  return AnyColumn.name.getter();
}

uint64_t OUTLINED_FUNCTION_106_1()
{
  return AnyColumn.wrappedElementType.getter();
}

uint64_t OUTLINED_FUNCTION_108_1()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, _QWORD);

  return v1(v0, 0);
}

uint64_t OUTLINED_FUNCTION_110_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_112_1()
{
  uint64_t v0;
  char v1;

  return outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v0, v1);
}

uint64_t OUTLINED_FUNCTION_113_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_114_1()
{
  char v0;
  uint64_t v1;

  return outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v1, v0);
}

uint64_t OUTLINED_FUNCTION_115_1()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of Any(v0, v1 - 128);
}

id OUTLINED_FUNCTION_120_1()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 2770));
}

uint64_t OUTLINED_FUNCTION_121_1()
{
  return type metadata accessor for BaseTreeRegressorModel();
}

uint64_t OUTLINED_FUNCTION_122_1()
{
  return type metadata accessor for BaseTreeRegressor();
}

uint64_t OUTLINED_FUNCTION_123_1()
{
  return type metadata accessor for AnyColumn();
}

uint64_t OUTLINED_FUNCTION_124_0()
{
  return type metadata accessor for TreeRegressor();
}

uint64_t OUTLINED_FUNCTION_125_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_126_0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return swift_bridgeObjectRetain();
}

NSString __swiftcall NSString.__allocating_init(string:)(Swift::String string)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v3;
  void *v4;
  id v5;

  object = string._object;
  countAndFlagsBits = string._countAndFlagsBits;
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = (void *)MEMORY[0x22075A8AC](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithString_, v4);

  return v5;
}

void MLDataTable.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  void *object;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t countAndFlagsBits;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  Swift::String v22;
  _QWORD *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[12];
  int v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;

  v3 = v1;
  v4 = OUTLINED_FUNCTION_2_13();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v29[-v9];
  v11 = *(_QWORD **)v0;
  LODWORD(object) = *(unsigned __int8 *)(v0 + 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v29[-v9], v2, v4);
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    v30 = (int)object;
    v33 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_21AFE7DA0;
    v31 = 0;
    v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v14._countAndFlagsBits = 0x27204C5255;
    v14._object = (void *)0xE500000000000000;
    String.append(_:)(v14);
    lazy protocol witness table accessor for type URL and conformance URL();
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._object = (void *)0x800000021AFF2C80;
    v16._countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v16);
    if (one-time initialization token for tmpPath != -1)
      swift_once();
    countAndFlagsBits = tmpPath._countAndFlagsBits;
    object = tmpPath._object;
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = countAndFlagsBits;
    v18._object = object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 10030;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    v20 = v31;
    v21 = v32;
    *(_QWORD *)(v13 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v13 + 32) = v20;
    *(_QWORD *)(v13 + 40) = v21;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    URL.init(fileURLWithPath:)();
    OUTLINED_FUNCTION_0_14();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v10, v8, v4);
    v11 = v33;
    LOBYTE(object) = v30;
  }
  v22._countAndFlagsBits = 0x6C62615461746144;
  v22._object = (void *)0xE900000000000065;
  URL.appendPathComponent(_:)(v22);
  static _FileUtilities.prepareForWriting(to:isDirectory:)((uint64_t)v10, 1);
  if (v3)
  {
    OUTLINED_FUNCTION_0_14();
  }
  else if ((object & 1) != 0)
  {
    v23 = v11;
    swift_willThrow(v24);
    OUTLINED_FUNCTION_0_14();
  }
  else
  {
    v25 = v11[2];
    swift_retain();
    v26 = URL.path.getter();
    v28 = v27;
    swift_retain();
    specialized String.withCString<A>(_:)(v26, v28, 1, v25);
    OUTLINED_FUNCTION_0_14();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_10();
  }
  OUTLINED_FUNCTION_7();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLDataTable.write(toDirectory:)(Swift::String toDirectory)
{
  MLDataTable.write(toDirectory:)(toDirectory._countAndFlagsBits, toDirectory._object, (void (*)(char *))MLDataTable.write(to:));
}

void MLDataTable.writeCSV(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  char v5;
  _QWORD *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD **)v1;
  v5 = *(_BYTE *)(v1 + 8);
  if ((URL.isFileURL.getter() & 1) != 0)
  {
    static _FileUtilities.prepareForWriting(to:isDirectory:)(a1, 0);
    if (!v2)
    {
      if ((v5 & 1) != 0)
      {
        v6 = v4;
        swift_willThrow(v7);
      }
      else
      {
        v9 = v4[2];
        outlined copy of Result<_DataTable, Error>(v4, 0);
        swift_retain();
        v10 = URL.path.getter();
        v12 = v11;
        swift_retain();
        specialized String.withCString<A>(_:)(v10, v12, 0, v9);
        swift_release();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_3_10();
      }
    }
  }
  else
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v8 = 0xD00000000000002CLL;
    *(_QWORD *)(v8 + 8) = 0x800000021AFF2CC0;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_BYTE *)(v8 + 48) = 0;
    swift_willThrow(0.0);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLDataTable.writeCSV(toFile:)(Swift::String toFile)
{
  MLDataTable.write(toDirectory:)(toFile._countAndFlagsBits, toFile._object, (void (*)(char *))MLDataTable.writeCSV(to:));
}

void MLDataTable.write(toDirectory:)(uint64_t a1, void *a2, void (*a3)(char *))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  Swift::String v12;
  NSString v13;
  id v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *);

  v17 = a3;
  v6 = OUTLINED_FUNCTION_2_13();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *((_BYTE *)v3 + 8);
  type metadata accessor for NSString();
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v4;
  v12._object = a2;
  v13 = NSString.__allocating_init(string:)(v12);
  v14 = objc_msgSend(v13, sel_stringByExpandingTildeInPath);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  v15 = v10;
  v16 = v11;
  v17(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  OUTLINED_FUNCTION_7();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = _StringObject.sharedUTF8.getter();
    closure #1 in CMLTable.save(to:type:)(v6, a3, a4);
    return swift_release();
  }
  v8[0] = a1;
  v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  closure #1 in CMLTable.save(to:type:)((uint64_t)v8, a3, a4);
  return swift_release();
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
LABEL_11:
    swift_release();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v8 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v7, v8, (uint64_t (*)(void))partial apply for closure #1 in CMLParameters.add(key:featureValue:));
    goto LABEL_11;
  }
  v10[0] = a1;
  v10[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  specialized handling<A, B, C, D>(_:_:_:_:)(*(_QWORD *)(a3 + 16), v10, *(_QWORD *)(a4 + 16));
  if (v4)
  {
    swift_release();
    return swift_release();
  }
  swift_release();
  return swift_release();
}

{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v6, v7, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in CMLTable.renameColumn(named:to:));
    return swift_release();
  }
  v9[0] = a1;
  v9[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  specialized handling<A, B, C, D>(_:_:_:_:)(*(_QWORD *)(a3 + 16), a4, v9);
  return swift_release();
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD, _QWORD *, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  if ((a2 & 0x1000000000000000) != 0 || (OUTLINED_FUNCTION_33_7(), !v12))
  {
    OUTLINED_FUNCTION_22_6();
    if (v4)
    {
LABEL_7:
      OUTLINED_FUNCTION_217();
      return swift_release();
    }
LABEL_12:
    OUTLINED_FUNCTION_4_2();
    return swift_release();
  }
  if ((v10 & 0x2000000000000000) == 0)
  {
    if ((v9 & 0x1000000000000000) != 0)
      v13 = OUTLINED_FUNCTION_23_8(v7, v8, v9, v10);
    else
      v13 = OUTLINED_FUNCTION_15_9();
    OUTLINED_FUNCTION_26_10(v13, v14);
    if (v4)
      goto LABEL_7;
    goto LABEL_12;
  }
  v16[0] = v9;
  v16[1] = v10 & 0xFFFFFFFFFFFFFFLL;
  v11(*(_QWORD *)(a3 + 16), v16, *(_QWORD *)(a4 + 16));
  if (v4)
  {
    OUTLINED_FUNCTION_217();
    return OUTLINED_FUNCTION_4_2();
  }
  OUTLINED_FUNCTION_4_2();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x22075B938](MEMORY[0x24BDCDB28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x22075B938](MEMORY[0x24BDCDAF0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x22075B938](MEMORY[0x24BDCDB00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t partial apply for closure #1 in CMLTable.save(to:type:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CMLTable.save(to:type:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t OUTLINED_FUNCTION_0_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_2_13()
{
  return type metadata accessor for URL();
}

void OUTLINED_FUNCTION_3_10()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySo8NSNumberCGSaySo12MLMultiArrayCGG_Si5label_AL9embeddingts5NeverOTg505_sSo8f5CSo12gh42CSiADIgggdo_AB_ADtSi5label_AD9embeddingts5k128OIegnrzr_TR098_s8CreateML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v4 = v2;
  v6 = a1;
  v31 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_67;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v37 = a2 >> 62;
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v8 >= v7)
      v9 = v7;
    else
      v9 = v8;
    v39 = MEMORY[0x24BEE4AF8];
    v34 = v9 & ~(v9 >> 63);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v9 < 0)
    {
      __break(1u);
LABEL_70:

      __break(1u);
      return;
    }
    v29 = v4;
    if (!v9)
      break;
    v30 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v31)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v33 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v33 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v11 = 0;
    v38 = v6 & 0xC000000000000001;
    v4 = a2 & 0xFFFFFFFFFFFFFF8;
    v36 = a2 & 0xC000000000000001;
    v32 = v9;
    v12 = v6;
    while (v34 != v11)
    {
      if (v33 == v11)
        goto LABEL_59;
      if (v38)
      {
        v13 = (id)MEMORY[0x22075AF48](v11, v6);
      }
      else
      {
        if (v11 >= *(_QWORD *)(v30 + 16))
          goto LABEL_66;
        v13 = *(id *)(v6 + 8 * v11 + 32);
      }
      v3 = (unint64_t)v13;
      if (v37)
      {
        swift_bridgeObjectRetain();
        v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v11 == v14)
        goto LABEL_70;
      if (v36)
      {
        v15 = (id)MEMORY[0x22075AF48](v11, a2);
      }
      else
      {
        if (v11 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_60;
        v15 = *(id *)(a2 + 8 * v11 + 32);
      }
      v16 = v15;
      v17 = objc_msgSend((id)v3, sel_integerValue, v29);

      v18 = *(_QWORD *)(v39 + 16);
      v3 = v18 + 1;
      if (v18 >= *(_QWORD *)(v39 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v11;
      *(_QWORD *)(v39 + 16) = v3;
      v19 = v39 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v17;
      *(_QWORD *)(v19 + 40) = v16;
      v9 = v32;
      v6 = v12;
      if (v32 == v11)
      {
        v10 = v30;
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v10 = v6 & 0xFFFFFFFFFFFFFF8;
  v38 = v6 & 0xC000000000000001;
  v4 = a2 & 0xFFFFFFFFFFFFFF8;
  v36 = a2 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_33:
  v35 = v6;
  for (i = v9 + 4; ; ++i)
  {
    if (v31)
    {
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = *(_QWORD *)(v10 + 16);
    }
    v6 = i - 4;
    if (i - 4 == v21)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v38)
    {
      v22 = (id)MEMORY[0x22075AF48](i - 4, v35);
    }
    else
    {
      if ((v6 & 0x8000000000000000) != 0)
        goto LABEL_61;
      if (v6 >= *(_QWORD *)(v10 + 16))
        goto LABEL_62;
      v22 = *(id *)(v35 + 8 * i);
    }
    v23 = v22;
    if (__OFADD__(v6, 1))
      goto LABEL_63;
    if (v37)
    {
      swift_bridgeObjectRetain();
      v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v24 = *(_QWORD *)(v4 + 16);
    }
    if (v6 == v24)
      break;
    if (v36)
    {
      v25 = (id)MEMORY[0x22075AF48](i - 4, a2);
    }
    else
    {
      if ((v6 & 0x8000000000000000) != 0)
        goto LABEL_64;
      if (v6 >= *(_QWORD *)(v4 + 16))
        goto LABEL_65;
      v25 = *(id *)(a2 + 8 * i);
    }
    v26 = v25;
    v27 = objc_msgSend(v23, sel_integerValue, v29);

    v3 = *(_QWORD *)(v39 + 16);
    if (v3 >= *(_QWORD *)(v39 + 24) >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    *(_QWORD *)(v39 + 16) = v3 + 1;
    v28 = v39 + 16 * v3;
    *(_QWORD *)(v28 + 32) = v27;
    *(_QWORD *)(v28 + 40) = v26;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void MLFewShotSoundClassifier.modelParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
}

void MLFewShotSoundClassifier.trainingMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_0_15();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v1 + *(int *)(v3 + 20), a1, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

uint64_t type metadata accessor for MLFewShotSoundClassifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLFewShotSoundClassifier;
  if (!type metadata singleton initialization cache for MLFewShotSoundClassifier)
    return swift_getSingletonMetadata();
  return result;
}

void MLFewShotSoundClassifier.trainingMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_0_15();
  outlined assign with take of MLClassifierMetrics(a1, v1 + *(int *)(v3 + 20), type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLFewShotSoundClassifier.trainingMetrics.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_15();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLFewShotSoundClassifier.validationMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_0_15();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v1 + *(int *)(v3 + 24), a1, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void MLFewShotSoundClassifier.validationMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_0_15();
  outlined assign with take of MLClassifierMetrics(a1, v1 + *(int *)(v3 + 24), type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLFewShotSoundClassifier.validationMetrics.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_15();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLFewShotSoundClassifier.validationLoss.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(OUTLINED_FUNCTION_0_15() + 28));
}

uint64_t MLFewShotSoundClassifier.validationLoss.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = OUTLINED_FUNCTION_0_15();
  *(double *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*MLFewShotSoundClassifier.validationLoss.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_15();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLFewShotSoundClassifier.init(trainingData:modelParameters:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int EnumTagSinglePayload;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123[56];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v113 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v115 = v9;
  v112 = type metadata accessor for ComputeDevice();
  v110 = *(_QWORD *)(v112 - 8);
  MEMORY[0x24BDAC7A8](v112);
  OUTLINED_FUNCTION_64();
  v109 = v10;
  v111 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v15);
  v106 = (uint64_t)&v97 - v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_64();
  v116 = v18;
  v19 = type metadata accessor for URL();
  v117 = *(_QWORD *)(v19 - 8);
  v118 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v97 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v97 - v26;
  v28 = (int *)type metadata accessor for MLFewShotSoundClassifier();
  v120 = a3 + v28[5];
  MLClassifierMetrics.init()((uint64_t)v28, v29, v30, v31, v32, v33, v34, v35, v97, (uint64_t)v98, (uint64_t)v99, (uint64_t)v100, (uint64_t)v101, v102, v103, v104, v105, v106, v107,
    v108);
  v119 = a3 + v28[6];
  MLClassifierMetrics.init()(v36, v37, v38, v39, v40, v41, v42, v43, v97, (uint64_t)v98, (uint64_t)v99, (uint64_t)v100, (uint64_t)v101, v102, v103, v104, v105, v106, v107,
    v108);
  *(_QWORD *)(a3 + v28[7]) = 0;
  v121 = a3;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
  v44 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  v45 = a2;
  v46 = a1;
  v47 = v122;
  v48 = MLFewShotSoundClassifier.DataSource.extractFeatures(with:)((void *)(a2 + *(int *)(v44 + 32)));
  v54 = v47;
  if (v47)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters(a2, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v46, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.DataSource);
    v55 = 0;
    v56 = v121;
    goto LABEL_27;
  }
  v57 = v48;
  v114 = v46;
  v99 = v22;
  v101 = v25;
  v100 = v27;
  v58 = v118;
  v102 = 0;
  v122 = v45;
  v103 = 0;
  v56 = v121;
  *(_QWORD *)(v121 + v28[12]) = v48;
  *(_QWORD *)(v56 + v28[8]) = &outlined read-only object #0 of MLFewShotSoundClassifier.init(trainingData:modelParameters:);
  specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)&outlined read-only object #0 of MLFewShotSoundClassifier.init(trainingData:modelParameters:), 0, 2, v49, v50, v51, v52, v53, v97, (uint64_t)v98, (uint64_t)v99, (uint64_t)v100, (uint64_t)v101, v102, v103, v104, v105, v106);
  *(_QWORD *)(v56 + v28[9]) = v59;
  v60 = objc_msgSend((id)v57, sel_trainingDataEmbeddings);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_51_1();
  if (v57 >> 62)
  {
    OUTLINED_FUNCTION_9_8();
    v61 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_30();
  }
  else
  {
    v61 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v62 = v114;
  if (!v61)
  {
    v77 = v122;
LABEL_20:
    OUTLINED_FUNCTION_30();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v78 = 0xD000000000000038;
    *(_QWORD *)(v78 + 8) = 0x800000021AFF2CF0;
    *(_OWORD *)(v78 + 16) = 0u;
    *(_OWORD *)(v78 + 32) = 0u;
    *(_BYTE *)(v78 + 48) = 2;
    swift_willThrow(0.0);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v77, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v62, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.DataSource);
    v55 = 0;
    v54 = v103;
    goto LABEL_27;
  }
  if ((v57 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_23_1();
  if (*(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v63 = *(id *)(v57 + 32);
    v64 = OUTLINED_FUNCTION_30();
    v65 = OUTLINED_FUNCTION_18_6(v64, sel_shape);

    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v57 >> 62))
    {
      v66 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  OUTLINED_FUNCTION_9_8();
  v66 = _CocoaArrayWrapper.endIndex.getter();
  OUTLINED_FUNCTION_30();
LABEL_10:
  v68 = v116;
  v67 = v117;
  if (v66 != 3)
  {
    v77 = v122;
    v62 = v114;
    goto LABEL_20;
  }
  _sypSgWOcTm_0(v122 + *(int *)(v44 + 36), v116, &demangling cache variable for type metadata for URL?);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v68, 1, v58);
  v98 = v28;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?(v68, &demangling cache variable for type metadata for URL?);
    if ((v57 & 0xC000000000000001) != 0)
      OUTLINED_FUNCTION_23_1();
    if (*(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10) > 1uLL)
    {
      v70 = *(id *)(v57 + 40);
      v71 = OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_18_6(v71, sel_integerValue);
      OUTLINED_FUNCTION_51_1();
      MLFewShotSoundClassifier.TemporalClassifier.init(outputs:inputChannels:)();
    }
    __break(1u);
LABEL_42:
    __break(1u);
    return;
  }
  v79 = (uint64_t)v100;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v100, v68, v58);
  v80 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
  v80(v101, v79, v58);
  v81 = v115;
  v82 = v58;
  if ((v57 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_23_1();
  v83 = v108;
  if (*(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10) <= 1uLL)
    goto LABEL_42;
  v84 = *(id *)(v57 + 40);
  v85 = OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_18_6(v85, sel_integerValue);
  OUTLINED_FUNCTION_51_1();
  v86 = (uint64_t)v99;
  v80(v99, (uint64_t)v101, v82);
  v87 = v102;
  v88 = Data.init(contentsOf:options:)();
  if (v87)
  {
    v102 = v87;
    OUTLINED_FUNCTION_2_14(v86);
    v90 = (uint64_t)v100;
    v91 = OUTLINED_FUNCTION_2_14((uint64_t)v101);
    OUTLINED_FUNCTION_16_10(v91, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
    OUTLINED_FUNCTION_203(v92, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.DataSource);
    OUTLINED_FUNCTION_2_14(v90);
    v55 = 0;
    v54 = v103;
  }
  else
  {
    BlobsFile.init(data:)(v88, v89);
    OUTLINED_FUNCTION_2_14(v86);
    MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:)(v57, (uint64_t)v123, v83);
    v102 = 0;
    OUTLINED_FUNCTION_2_14((uint64_t)v101);
    outlined init with take of MLFewShotSoundClassifier.TemporalClassifier(v83, v104);
    v93 = v109;
    static ComputeDevice.cpu.getter();
    lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
    v94 = v105;
    Layer.placed(on:)();
    v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 8))(v93, v112);
    OUTLINED_FUNCTION_203(v95, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
    OUTLINED_FUNCTION_2_14((uint64_t)v100);
    v96 = v113;
    outlined init with take of MLFewShotSoundClassifier.TemporalClassifier(v94, v56 + v98[10]);
    *v81 = 1065353216;
    v72 = *MEMORY[0x24BE6BAA0];
    v73 = type metadata accessor for GradientClippingMode();
    (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 104))(v81, v72, v73);
    __swift_storeEnumTagSinglePayload((uint64_t)v81, 0, 1, v73);
    v74 = type metadata accessor for RegularizationKind();
    __swift_storeEnumTagSinglePayload(v96, 1, 1, v74);
    lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
    Adam.init(for:learningRate:beta1:beta2:usesAMSGrad:epsilon:gradientClippingMode:regularizationKind:gradientScale:)();
    v75 = v102;
    MLFewShotSoundClassifier.train()();
    if (!v75)
    {
      OUTLINED_FUNCTION_16_10(v76, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v114, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.DataSource);
      return;
    }
    OUTLINED_FUNCTION_16_10(v76, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v114, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.DataSource);
    v55 = 1;
    v54 = v103;
  }
  v28 = v98;
LABEL_27:
  outlined destroy of MLHandPoseClassifier.ModelParameters(v56, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier.ModelParameters);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v120, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v119, type metadata accessor for MLClassifierMetrics);
  if (v54)
  {
    if (!v55)
      goto LABEL_29;
LABEL_32:
    outlined destroy of MLHandPoseClassifier.ModelParameters(v56 + v28[10], type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
    outlined destroy of URL?(v56 + v28[11], &demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
    if (v54)
      return;
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v55)
    goto LABEL_32;
LABEL_29:
  if (v54)
    return;
LABEL_33:

}

void MLFewShotSoundClassifier.train()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  unint64_t v46;
  id v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t *);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  double *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  void *v104;
  id v105;
  id v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  double *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double *v126;
  uint64_t v127;
  unsigned int v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unsigned int v134;
  double *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t);
  void (*v147)(char *, _QWORD, uint64_t);
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  void (**v152)(uint64_t *);
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  char *v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;

  v1 = type metadata accessor for MLClassifierMetrics(0);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v126 = (double *)((char *)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v2);
  v135 = (double *)((char *)&v123 - v4);
  v167 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  v5 = MEMORY[0x24BDAC7A8](v167);
  v123 = (uint64_t)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v155 = (uint64_t)&v123 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v173 = (char *)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v174 = (uint64_t)&v123 - v11;
  v159 = type metadata accessor for Tensor();
  v158 = *(_QWORD *)(v159 - 8);
  v12 = MEMORY[0x24BDAC7A8](v159);
  v157 = (char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v154 = (char *)&v123 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v123 - v16;
  v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
  v18 = MEMORY[0x24BDAC7A8](v161);
  v143 = (uint64_t)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v153 = (char *)&v123 - v20;
  v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>);
  v160 = *(_QWORD *)(v168 - 8);
  v21 = MEMORY[0x24BDAC7A8](v168);
  v133 = (char *)&v123 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v172 = (char *)&v123 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataSample<Tensor, Tensor>?);
  MEMORY[0x24BDAC7A8](v24);
  v156 = (char *)&v123 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
  MEMORY[0x24BDAC7A8](v137);
  v170 = (uint64_t)&v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for LearningPhase();
  v136 = *(_QWORD *)(v149 - 8);
  MEMORY[0x24BDAC7A8](v149);
  v148 = (char *)&v123 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v28);
  v169 = (uint64_t)&v123 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v124 = (uint64_t)&v123 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v127 = (uint64_t)&v123 - v33;
  v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, embedding: MLMultiArray)], DataSample<Tensor, Tensor>>.PrefetchMode);
  v164 = *(_QWORD *)(v166 - 8);
  MEMORY[0x24BDAC7A8](v166);
  v163 = (char *)&v123 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for ComputeDevice();
  v35 = *(_QWORD *)(v139 - 8);
  v36 = *(_QWORD *)(v35 + 64);
  v37 = MEMORY[0x24BDAC7A8](v139);
  v150 = (char *)&v123 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37);
  v141 = (char *)&v123 - v38;
  v39 = type metadata accessor for MLFewShotSoundClassifier();
  MEMORY[0x24BDAC7A8](v39);
  v41 = (char *)&v123 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, embedding: MLMultiArray)], DataSample<Tensor, Tensor>>);
  v125 = *(_QWORD *)(v140 - 8);
  MEMORY[0x24BDAC7A8](v140);
  v142 = (char *)&v123 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = (void (**)(uint64_t *))v0[2];
  v138 = *v0;
  v43 = *(int *)(v39 + 48);
  v165 = (int *)v39;
  v132 = v43;
  v44 = *(void **)((char *)v0 + v43);
  v162 = v0;
  v45 = objc_msgSend(v44, sel_trainingDataLabels);
  v131 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v47 = objc_msgSend(v44, sel_trainingDataEmbeddings);
  v130 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v49 = v171;
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySo8NSNumberCGSaySo12MLMultiArrayCGG_Si5label_AL9embeddingts5NeverOTg505_sSo8f5CSo12gh42CSiADIgggdo_AB_ADtSi5label_AD9embeddingts5k128OIegnrzr_TR098_s8CreateML24MLFewShotSoundClassifierV5train33_E9D7D47DE11AB89722960D8AD055ABB6LLyyKFSi5label_So12bc15C9embeddingtM23A10C_AHtXEfU_Tf3nnnpf_nTf1cn_n(v46, v48);
  v51 = v50;
  v151 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v52 = (uint64_t)v0;
  v53 = v41;
  v147 = (void (*)(char *, _QWORD, uint64_t))v41;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v52, (uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier);
  v54 = v141;
  static ComputeDevice.cpu.getter();
  v55 = *(_QWORD *)(*(_QWORD *)&v53[*(int *)(v39 + 32)] + 16);
  v177 = 0;
  v178 = v51;
  v175 = 0u;
  v176 = 0u;
  v56 = v150;
  v57 = v139;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v150, v54, v139);
  v58 = v35;
  v59 = (*(unsigned __int8 *)(v35 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = v55;
  (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v60 + v59, v56, v57);
  (*(void (**)(char *, _QWORD, uint64_t))(v164 + 104))(v163, *MEMORY[0x24BE6C098], v166);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: Int, embedding: MLMultiArray)]);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type [(label: Int, embedding: MLMultiArray)] and conformance [A], &demangling cache variable for type metadata for [(label: Int, embedding: MLMultiArray)], MEMORY[0x24BEE12C8]);
  lazy protocol witness table accessor for type DataSample<Tensor, Tensor> and conformance <> DataSample<A, B>();
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type DataSample<Tensor, Tensor> and conformance DataSample<A, B>, &demangling cache variable for type metadata for DataSample<Tensor, Tensor>, MEMORY[0x24BE6B818]);
  v61 = 1;
  v62 = v165;
  v63 = v127;
  v64 = v162;
  Dataset.init(samples:batchSize:batchSampler:dropsLastPartialBatch:prefetchMode:transform:)();
  v129 = *(void (**)(char *, uint64_t))(v58 + 8);
  v129(v141, v57);
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v147, (uint64_t (*)(_QWORD))type metadata accessor for MLFewShotSoundClassifier);
  swift_bridgeObjectRelease();
  v65 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  v66 = v169;
  _sypSgWOcTm_0((uint64_t)v64 + *(int *)(v65 + 36), v169, &demangling cache variable for type metadata for URL?);
  v67 = type metadata accessor for URL();
  LODWORD(v57) = __swift_getEnumTagSinglePayload(v66, 1, v67);
  outlined destroy of URL?(v66, &demangling cache variable for type metadata for URL?);
  if ((_DWORD)v57 != 1)
  {
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0((uint64_t)v64 + v62[10], v63, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
    v61 = 0;
  }
  __swift_storeEnumTagSinglePayload(v63, v61, 1, v167);
  if (v138 < 1)
  {
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    v150 = (char *)v62[8];
    v144 = type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
    v68 = 1;
    v69 = 1.79769313e308;
    v134 = *MEMORY[0x24BE6B9A0];
    v128 = *MEMORY[0x24BE6B9A8];
    v70 = v160;
    v71 = (uint64_t)v156;
    while (1)
    {
      v72 = *(_QWORD *)(*(_QWORD *)&v150[(_QWORD)v64] + 16);
      swift_allocObject();
      v73 = v151;
      v169 = _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v72);
      if (v73)
        goto LABEL_28;
      v145 = v68;
      v151 = 0;
      v74 = v136;
      v75 = v62;
      v76 = v148;
      v77 = v149;
      v147 = *(void (**)(char *, _QWORD, uint64_t))(v136 + 104);
      v147(v148, v134, v149);
      v78 = (uint64_t)v64 + v75[10];
      v163 = (char *)lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
      v166 = v78;
      Layer.prepare(for:)();
      v146 = *(void (**)(char *, uint64_t))(v74 + 8);
      v146(v76, v77);
      v79 = v170;
      Dataset.makeIterator()();
      v152 = (void (**)(uint64_t *))(v79 + *(int *)(v137 + 44));
      lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator and conformance Batches<A>.Iterator, &demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator, MEMORY[0x24BE6C088]);
      v164 = v80;
      v81 = v168;
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>.Iterator);
        dispatch thunk of IteratorProtocol.next()();
        if ((_QWORD)v175)
        {
          v82 = *v152;
          v178 = v175;
          v82(&v178);
          swift_bridgeObjectRelease();
          v83 = v71;
          v84 = 0;
        }
        else
        {
          v83 = v71;
          v84 = 1;
        }
        __swift_storeEnumTagSinglePayload(v83, v84, 1, v81);
        v64 = v162;
        if (__swift_getEnumTagSinglePayload(v71, 1, v81) == 1)
          break;
        (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v172, v71, v81);
        v85 = v159;
        __swift_storeEnumTagSinglePayload(v174, 1, 1, v159);
        v86 = v155;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v166, v155, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
        MEMORY[0x24BDAC7A8](v87);
        valueWithGradient<A>(at:of:)();
        v88 = v86;
        v89 = (uint64_t)v173;
        v90 = v174;
        outlined destroy of MLHandPoseClassifier.ModelParameters(v88, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
        _sypSgWOcTm_0(v90, v89, &demangling cache variable for type metadata for Tensor?);
        if (__swift_getEnumTagSinglePayload(v89, 1, v85) == 1)
          goto LABEL_32;
        v91 = (uint64_t)v153;
        v171 = &v153[*(int *)(v161 + 48)];
        v92 = v158;
        v93 = v17;
        v94 = v154;
        (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v154, v173, v85);
        outlined destroy of URL?(v90, &demangling cache variable for type metadata for Tensor?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
        Adam.update(_:with:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, char *, uint64_t))(v92 + 16))(v91, v93, v85);
        softmax(_:alongAxis:)();
        v95 = *(void (**)(char *, uint64_t))(v92 + 8);
        v96 = v94;
        v17 = v93;
        v81 = v168;
        v95(v96, v85);
        v95(v17, v85);
        v97 = v157;
        v98 = v172;
        DataSample.labels.getter();
        _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)();
        v99 = v97;
        v70 = v160;
        v95(v99, v85);
        outlined destroy of URL?(v91, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
        (*(void (**)(char *, uint64_t))(v70 + 8))(v98, v81);
        v71 = (uint64_t)v156;
      }
      outlined destroy of URL?(v170, &demangling cache variable for type metadata for LazyMapSequence<Batches<LazyPrefetchingMapSequence<LazySequence<Sampling<[(label: Int, embedding: MLMultiArray)]>>, DataSample<Tensor, Tensor>>>, DataSample<Tensor, Tensor>>.Iterator);
      v100 = v135;
      v101 = v151;
      static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(*(_QWORD *)&v150[(_QWORD)v64], v135);
      v151 = v101;
      if (v101)
        goto LABEL_23;
      outlined assign with take of MLClassifierMetrics((uint64_t)v100, (uint64_t)v64 + v165[5], type metadata accessor for MLClassifierMetrics);
      v102 = v148;
      v103 = v149;
      v147(v148, v128, v149);
      Layer.prepare(for:)();
      v146(v102, v103);
      v104 = *(void **)((char *)v64 + v132);
      v105 = objc_msgSend(v104, sel_validationDataEmbeddings);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v106 = objc_msgSend(v104, sel_validationDataLabels);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v107 = v141;
      static ComputeDevice.cpu.getter();
      v108 = (uint64_t)v133;
      MLFewShotSoundClassifier.validationData(features:labels:device:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v129(v107, v139);
      v109 = v143;
      MLFewShotSoundClassifier.performValidationStep(on:)(v143, v143 + *(int *)(v161 + 48), v108);
      Tensor.scalar<A>(as:)();
      v110 = *(float *)&v175;
      if (v69 >= *(float *)&v175)
      {
        v111 = v127;
        outlined destroy of URL?(v127, &demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
        _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v166, v111, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
        __swift_storeEnumTagSinglePayload(v111, 0, 1, v167);
        v112 = v150;
        v113 = *(_QWORD *)(*(_QWORD *)&v150[(_QWORD)v64] + 16);
        swift_allocObject();
        v114 = v151;
        _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(v113);
        if (v114)
        {
          swift_release();
          outlined destroy of URL?(v143, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v108, v168);
          goto LABEL_28;
        }
        v115 = v157;
        v151 = 0;
        DataSample.labels.getter();
        _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)();
        v116 = v115;
        v70 = v160;
        (*(void (**)(char *, uint64_t))(v158 + 8))(v116, v159);
        v117 = v126;
        v118 = v151;
        static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(*(_QWORD *)&v112[(_QWORD)v64], v126);
        swift_release();
        swift_release();
        outlined destroy of URL?(v143, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v108, v168);
        v151 = v118;
        if (v118)
          goto LABEL_28;
        v62 = v165;
        outlined assign with take of MLClassifierMetrics((uint64_t)v117, (uint64_t)v64 + v165[6], type metadata accessor for MLClassifierMetrics);
        v69 = v110;
      }
      else
      {
        swift_release();
        outlined destroy of URL?(v109, &demangling cache variable for type metadata for (loss: Tensor, predictions: Tensor));
        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v108, v168);
        v62 = v165;
      }
      v119 = v167;
      *(double *)((char *)v64 + v62[7]) = v110;
      if (v145 == v138)
        break;
      v68 = v145 + 1;
      if (__OFADD__(v145, 1))
      {
        __break(1u);
LABEL_23:
        swift_release();
LABEL_28:
        outlined destroy of URL?(v127, &demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
        (*(void (**)(char *, uint64_t))(v125 + 8))(v142, v140);
        return;
      }
    }
    (*(void (**)(char *, uint64_t))(v125 + 8))(v142, v140);
    v120 = v124;
    outlined init with take of MLFewShotSoundClassifier.TemporalClassifier?(v127, v124);
    if (__swift_getEnumTagSinglePayload(v120, 1, v119) == 1)
    {
      v121 = v166;
      v122 = v123;
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v166, v123, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
      outlined destroy of URL?(v120, &demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
    }
    else
    {
      v122 = v123;
      outlined init with take of MLFewShotSoundClassifier.TemporalClassifier(v120, v123);
      v121 = v166;
    }
    outlined assign with take of MLClassifierMetrics(v122, v121, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
  }
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier;
  if (!lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier)
  {
    v1 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(255);
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLFewShotSoundClassifier.TemporalClassifier, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier);
  }
  return result;
}

uint64_t outlined init with take of MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  id *v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  id v30;
  id v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id *v35;
  id *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  id v44;
  id v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  void *v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  void *v100;
  const void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  id v105;
  uint64_t *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  int *v111;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    v19 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    v8 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
    v9 = *(int *)(v8 + 32);
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for URL();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = *(int *)(v8 + 36);
    v15 = (void *)(a1 + v14);
    v16 = (char *)a2 + v14;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v14, 1, v12))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v13((uint64_t)v15, (uint64_t)v16, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v12);
    }
    v20 = v6[5];
    v21 = (id *)(a1 + v20);
    v22 = (id *)((char *)a2 + v20);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v111 = v6;
    if (EnumCaseMultiPayload == 2)
    {
      v30 = *v22;
      v31 = *v22;
      *v21 = v30;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v21 = *v22;
      v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v25 = *(int *)(v24 + 20);
      v108 = (char *)v21 + v25;
      v26 = (char *)v22 + v25;
      v27 = type metadata accessor for DataFrame();
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      v29 = v26;
      v6 = v111;
      v28(v108, v29, v27);
      v28((char *)v21 + *(int *)(v24 + 24), (char *)v22 + *(int *)(v24 + 24), v27);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v32 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v32 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v33 = __swift_instantiateConcreteTypeFromMangledName(v32);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v21, v22, v33);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v34 = v6[6];
    v35 = (id *)(a1 + v34);
    v36 = (id *)((char *)a2 + v34);
    v37 = swift_getEnumCaseMultiPayload();
    if (v37 == 2)
    {
      v44 = *v36;
      v45 = *v36;
      *v35 = v44;
    }
    else if (v37 == 1)
    {
      *v35 = *v36;
      v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v39 = *(int *)(v38 + 20);
      v109 = (char *)v35 + v39;
      v40 = (char *)v36 + v39;
      v41 = type metadata accessor for DataFrame();
      v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
      v42(v109, v40, v41);
      v43 = v41;
      v6 = v111;
      v42((char *)v35 + *(int *)(v38 + 24), (char *)v36 + *(int *)(v38 + 24), v43);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v46 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v46 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v47 = __swift_instantiateConcreteTypeFromMangledName(v46);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v35, v36, v47);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v48 = v6[8];
    *(_QWORD *)(a1 + v6[7]) = *(uint64_t *)((char *)a2 + v6[7]);
    *(_QWORD *)(a1 + v48) = *(uint64_t *)((char *)a2 + v48);
    v49 = v6[10];
    *(_QWORD *)(a1 + v6[9]) = *(uint64_t *)((char *)a2 + v6[9]);
    v50 = a1 + v49;
    v51 = (uint64_t)a2 + v49;
    v52 = type metadata accessor for Conv2D();
    v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v53(v50, v51, v52);
    v54 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
    *(_DWORD *)(v50 + *(int *)(v54 + 20)) = *(_DWORD *)(v51 + *(int *)(v54 + 20));
    v55 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
    v56 = v55[5];
    v57 = v50 + v56;
    v107 = a2;
    v58 = v51 + v56;
    *(_OWORD *)(v50 + v56) = *(_OWORD *)(v51 + v56);
    v59 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
    v60 = *(int *)(v59 + 20);
    v61 = v57 + v60;
    v62 = v58 + v60;
    v63 = type metadata accessor for Conv1D();
    v110 = a1;
    v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
    v64(v61, v62, v63);
    *(_DWORD *)(v57 + *(int *)(v59 + 24)) = *(_DWORD *)(v58 + *(int *)(v59 + 24));
    v65 = v55[6];
    v66 = v50 + v65;
    v67 = v51 + v65;
    *(_OWORD *)(v50 + v65) = *(_OWORD *)(v51 + v65);
    v64(v50 + v65 + *(int *)(v59 + 20), v51 + v65 + *(int *)(v59 + 20), v63);
    *(_DWORD *)(v66 + *(int *)(v59 + 24)) = *(_DWORD *)(v67 + *(int *)(v59 + 24));
    v68 = v55[7];
    v69 = v50 + v68;
    v70 = v51 + v68;
    *(_OWORD *)(v50 + v68) = *(_OWORD *)(v51 + v68);
    v64(v50 + v68 + *(int *)(v59 + 20), v51 + v68 + *(int *)(v59 + 20), v63);
    *(_DWORD *)(v69 + *(int *)(v59 + 24)) = *(_DWORD *)(v70 + *(int *)(v59 + 24));
    v71 = v55[8];
    v72 = v50 + v71;
    v73 = v51 + v71;
    *(_OWORD *)(v50 + v71) = *(_OWORD *)(v51 + v71);
    v64(v50 + v71 + *(int *)(v59 + 20), v51 + v71 + *(int *)(v59 + 20), v63);
    *(_DWORD *)(v72 + *(int *)(v59 + 24)) = *(_DWORD *)(v73 + *(int *)(v59 + 24));
    v74 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
    v75 = v50 + v74;
    v76 = v51 + v74;
    v77 = type metadata accessor for Dense();
    v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 16);
    v78(v75, v76, v77);
    v79 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
    v78(v75 + *(int *)(v79 + 20), v76 + *(int *)(v79 + 20), v77);
    v19 = v110;
    v80 = v111[11];
    v81 = v110 + v80;
    v82 = (uint64_t)v107 + v80;
    *(_OWORD *)(v110 + v80) = *(_OWORD *)((char *)v107 + v80);
    v83 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
    v84 = v83[12];
    v85 = (void *)(v81 + v84);
    v86 = (const void *)(v82 + v84);
    v87 = type metadata accessor for GradientClippingMode();
    if (__swift_getEnumTagSinglePayload((uint64_t)v86, 1, v87))
    {
      v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
      memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v85, v86, v87);
      __swift_storeEnumTagSinglePayload((uint64_t)v85, 0, 1, v87);
    }
    v89 = v83[13];
    v90 = (void *)(v81 + v89);
    v91 = (const void *)(v82 + v89);
    v92 = type metadata accessor for RegularizationKind();
    if (__swift_getEnumTagSinglePayload((uint64_t)v91, 1, v92))
    {
      v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
      memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      __swift_storeEnumTagSinglePayload((uint64_t)v90, 0, 1, v92);
    }
    *(_DWORD *)(v81 + v83[14]) = *(_DWORD *)(v82 + v83[14]);
    *(_QWORD *)(v81 + v83[15]) = *(_QWORD *)(v82 + v83[15]);
    v94 = v83[16];
    v95 = v81 + v94;
    v96 = v82 + v94;
    v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
    v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
    v98(v95, v96, v97);
    v98(v81 + v83[17], v82 + v83[17], v97);
    v99 = v83[18];
    v100 = (void *)(v81 + v99);
    v101 = (const void *)(v82 + v99);
    if (__swift_getEnumTagSinglePayload(v82 + v99, 1, v97))
    {
      v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
      memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    }
    else
    {
      v98((uint64_t)v100, (uint64_t)v101, v97);
      __swift_storeEnumTagSinglePayload((uint64_t)v100, 0, 1, v97);
    }
    v103 = v111[12];
    v104 = *(void **)((char *)v107 + v103);
    *(_QWORD *)(v110 + v103) = v104;
    v105 = v104;
  }
  return v19;
}

void destroy for MLFewShotSoundClassifier(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  id *v9;
  int EnumCaseMultiPayload;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  id *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;

  v4 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  v5 = a1 + *(int *)(v4 + 32);
  v6 = type metadata accessor for URL();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = a1 + *(int *)(v4 + 36);
  if (!__swift_getEnumTagSinglePayload(v8, 1, v6))
    v7(v8, v6);
  v9 = (id *)(a1 + a2[5]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      v12 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v13 = (char *)v9 + *(int *)(v12 + 20);
      v14 = type metadata accessor for DataFrame();
      v15 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
      v15(v13, v14);
      v15((char *)v9 + *(int *)(v12 + 24), v14);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v11 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v11 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v16 = __swift_instantiateConcreteTypeFromMangledName(v11);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v9, v16);
      break;
  }
  v17 = (id *)(a1 + a2[6]);
  v18 = swift_getEnumCaseMultiPayload();
  switch(v18)
  {
    case 2:

      break;
    case 1:
      v20 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v21 = (char *)v17 + *(int *)(v20 + 20);
      v22 = type metadata accessor for DataFrame();
      v23 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
      v23(v21, v22);
      v23((char *)v17 + *(int *)(v20 + 24), v22);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v19 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v19 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v24 = __swift_instantiateConcreteTypeFromMangledName(v19);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v17, v24);
      break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = a1 + a2[10];
  v26 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  v28 = v25 + v27[5];
  v29 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v30 = v28 + *(int *)(v29 + 20);
  v31 = type metadata accessor for Conv1D();
  v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8);
  v32(v30, v31);
  v32(v25 + v27[6] + *(int *)(v29 + 20), v31);
  v32(v25 + v27[7] + *(int *)(v29 + 20), v31);
  v32(v25 + v27[8] + *(int *)(v29 + 20), v31);
  v33 = v25 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  v34 = type metadata accessor for Dense();
  v35 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8);
  v35(v33, v34);
  v36 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v35(v33 + *(int *)(v36 + 20), v34);
  v37 = a1 + a2[11];
  v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  v39 = v37 + v38[12];
  v40 = type metadata accessor for GradientClippingMode();
  if (!__swift_getEnumTagSinglePayload(v39, 1, v40))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
  v41 = v37 + v38[13];
  v42 = type metadata accessor for RegularizationKind();
  if (!__swift_getEnumTagSinglePayload(v41, 1, v42))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v41, v42);
  v43 = v37 + v38[16];
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  v45 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8);
  v45(v43, v44);
  v45(v37 + v38[17], v44);
  v46 = v37 + v38[18];
  if (!__swift_getEnumTagSinglePayload(v46, 1, v44))
    v45(v46, v44);

}

uint64_t initializeWithCopy for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  id *v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  id v27;
  id v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  id *v32;
  id *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  id v41;
  id v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  void *v82;
  const void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  void *v97;
  const void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  int *v108;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v7 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  v8 = *(int *)(v7 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for URL();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(v7 + 36);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (__swift_getEnumTagSinglePayload(a2 + v13, 1, v11))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v14, (uint64_t)v15, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v11);
  }
  v17 = a3[5];
  v18 = (id *)(a1 + v17);
  v19 = (id *)(a2 + v17);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v108 = a3;
  if (EnumCaseMultiPayload == 2)
  {
    v27 = *v19;
    v28 = *v19;
    *v18 = v27;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *v18 = *v19;
    v21 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v22 = *(int *)(v21 + 20);
    v105 = (char *)v18 + v22;
    v23 = (char *)v19 + v22;
    v24 = type metadata accessor for DataFrame();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v26 = v23;
    a3 = v108;
    v25(v105, v26, v24);
    v25((char *)v18 + *(int *)(v21 + 24), (char *)v19 + *(int *)(v21 + 24), v24);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v29 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v29 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v30 = __swift_instantiateConcreteTypeFromMangledName(v29);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v18, v19, v30);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v31 = a3[6];
  v32 = (id *)(a1 + v31);
  v33 = (id *)(a2 + v31);
  v34 = swift_getEnumCaseMultiPayload();
  if (v34 == 2)
  {
    v41 = *v33;
    v42 = *v33;
    *v32 = v41;
  }
  else if (v34 == 1)
  {
    *v32 = *v33;
    v35 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v36 = *(int *)(v35 + 20);
    v106 = (char *)v32 + v36;
    v37 = (char *)v33 + v36;
    v38 = type metadata accessor for DataFrame();
    v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
    v39(v106, v37, v38);
    v40 = v38;
    a3 = v108;
    v39((char *)v32 + *(int *)(v35 + 24), (char *)v33 + *(int *)(v35 + 24), v40);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v43 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v43 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v44 = __swift_instantiateConcreteTypeFromMangledName(v43);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v32, v33, v44);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v45 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v45) = *(_QWORD *)(a2 + v45);
  v46 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for Conv2D();
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50(v47, v48, v49);
  v51 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(v47 + *(int *)(v51 + 20)) = *(_DWORD *)(v48 + *(int *)(v51 + 20));
  v52 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  v53 = v52[5];
  v54 = v47 + v53;
  v104 = a2;
  v55 = v48 + v53;
  *(_OWORD *)(v47 + v53) = *(_OWORD *)(v48 + v53);
  v56 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v57 = *(int *)(v56 + 20);
  v58 = v54 + v57;
  v59 = v55 + v57;
  v60 = type metadata accessor for Conv1D();
  v107 = a1;
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
  v61(v58, v59, v60);
  *(_DWORD *)(v54 + *(int *)(v56 + 24)) = *(_DWORD *)(v55 + *(int *)(v56 + 24));
  v62 = v52[6];
  v63 = v47 + v62;
  v64 = v48 + v62;
  *(_OWORD *)(v47 + v62) = *(_OWORD *)(v48 + v62);
  v61(v47 + v62 + *(int *)(v56 + 20), v48 + v62 + *(int *)(v56 + 20), v60);
  *(_DWORD *)(v63 + *(int *)(v56 + 24)) = *(_DWORD *)(v64 + *(int *)(v56 + 24));
  v65 = v52[7];
  v66 = v47 + v65;
  v67 = v48 + v65;
  *(_OWORD *)(v47 + v65) = *(_OWORD *)(v48 + v65);
  v61(v47 + v65 + *(int *)(v56 + 20), v48 + v65 + *(int *)(v56 + 20), v60);
  *(_DWORD *)(v66 + *(int *)(v56 + 24)) = *(_DWORD *)(v67 + *(int *)(v56 + 24));
  v68 = v52[8];
  v69 = v47 + v68;
  v70 = v48 + v68;
  *(_OWORD *)(v47 + v68) = *(_OWORD *)(v48 + v68);
  v61(v47 + v68 + *(int *)(v56 + 20), v48 + v68 + *(int *)(v56 + 20), v60);
  *(_DWORD *)(v69 + *(int *)(v56 + 24)) = *(_DWORD *)(v70 + *(int *)(v56 + 24));
  v71 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  v72 = v47 + v71;
  v73 = v48 + v71;
  v74 = type metadata accessor for Dense();
  v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 16);
  v75(v72, v73, v74);
  v76 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v75(v72 + *(int *)(v76 + 20), v73 + *(int *)(v76 + 20), v74);
  v77 = v108[11];
  v78 = v107 + v77;
  v79 = v104 + v77;
  *(_OWORD *)(v107 + v77) = *(_OWORD *)(v104 + v77);
  v80 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  v81 = v80[12];
  v82 = (void *)(v78 + v81);
  v83 = (const void *)(v79 + v81);
  v84 = type metadata accessor for GradientClippingMode();
  if (__swift_getEnumTagSinglePayload((uint64_t)v83, 1, v84))
  {
    v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v82, v83, v84);
    __swift_storeEnumTagSinglePayload((uint64_t)v82, 0, 1, v84);
  }
  v86 = v80[13];
  v87 = (void *)(v78 + v86);
  v88 = (const void *)(v79 + v86);
  v89 = type metadata accessor for RegularizationKind();
  if (__swift_getEnumTagSinglePayload((uint64_t)v88, 1, v89))
  {
    v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
    __swift_storeEnumTagSinglePayload((uint64_t)v87, 0, 1, v89);
  }
  *(_DWORD *)(v78 + v80[14]) = *(_DWORD *)(v79 + v80[14]);
  *(_QWORD *)(v78 + v80[15]) = *(_QWORD *)(v79 + v80[15]);
  v91 = v80[16];
  v92 = v78 + v91;
  v93 = v79 + v91;
  v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 16);
  v95(v92, v93, v94);
  v95(v78 + v80[17], v79 + v80[17], v94);
  v96 = v80[18];
  v97 = (void *)(v78 + v96);
  v98 = (const void *)(v79 + v96);
  if (__swift_getEnumTagSinglePayload(v79 + v96, 1, v94))
  {
    v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
    memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
  }
  else
  {
    v95((uint64_t)v97, (uint64_t)v98, v94);
    __swift_storeEnumTagSinglePayload((uint64_t)v97, 0, 1, v94);
  }
  v100 = v108[12];
  v101 = *(void **)(v104 + v100);
  *(_QWORD *)(v107 + v100) = v101;
  v102 = v101;
  return v107;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  int EnumTagSinglePayload;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  id *v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  id v27;
  id v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  id *v32;
  id *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  id v41;
  id v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  char *v80;
  const void *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  const void *v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  char *v101;
  const void *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  id v108;
  uint64_t v110;
  int *v111;
  char *v112;
  char *v113;
  uint64_t v114;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v6 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  v7 = *(int *)(v6 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(v6 + 36);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  LODWORD(v9) = __swift_getEnumTagSinglePayload(a1 + v13, 1, v10);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v10);
  if ((_DWORD)v9)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v14, v15, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v12((uint64_t)v14, (uint64_t)v15, v10);
LABEL_7:
  v111 = a3;
  if (a1 != a2)
  {
    v18 = a3[5];
    v19 = (id *)(a1 + v18);
    v20 = (id *)(a2 + v18);
    outlined destroy of MLHandPoseClassifier.ModelParameters(a1 + v18, type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v27 = *v20;
      v28 = *v20;
      *v19 = v27;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v19 = *v20;
      v22 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v23 = *(int *)(v22 + 20);
      v112 = (char *)v19 + v23;
      v24 = (char *)v20 + v23;
      v25 = type metadata accessor for DataFrame();
      v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
      v26(v112, v24, v25);
      v26((char *)v19 + *(int *)(v22 + 24), (char *)v20 + *(int *)(v22 + 24), v25);
      a3 = v111;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v29 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v29 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v30 = __swift_instantiateConcreteTypeFromMangledName(v29);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v19, v20, v30);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v31 = a3[6];
    v32 = (id *)(a1 + v31);
    v33 = (id *)(a2 + v31);
    outlined destroy of MLHandPoseClassifier.ModelParameters(a1 + v31, type metadata accessor for MLClassifierMetrics.Contents);
    v34 = swift_getEnumCaseMultiPayload();
    if (v34 == 2)
    {
      v41 = *v33;
      v42 = *v33;
      *v32 = v41;
    }
    else if (v34 == 1)
    {
      *v32 = *v33;
      v35 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v36 = *(int *)(v35 + 20);
      v113 = (char *)v32 + v36;
      v37 = (char *)v33 + v36;
      v38 = type metadata accessor for DataFrame();
      v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
      v40 = v37;
      a3 = v111;
      v39(v113, v40, v38);
      v39((char *)v32 + *(int *)(v35 + 24), (char *)v33 + *(int *)(v35 + 24), v38);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v43 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v43 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v44 = __swift_instantiateConcreteTypeFromMangledName(v43);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v32, v33, v44);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = a3[10];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 24))(v46, v47, v48);
  v49 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(v46 + *(int *)(v49 + 20)) = *(_DWORD *)(v47 + *(int *)(v49 + 20));
  v50 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  v51 = v50[5];
  v110 = a1;
  v114 = a2;
  v52 = (_QWORD *)(v46 + v51);
  v53 = v47 + v51;
  *v52 = *(_QWORD *)(v47 + v51);
  v52[1] = *(_QWORD *)(v47 + v51 + 8);
  v54 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v55 = *(int *)(v54 + 20);
  v56 = (char *)v52 + v55;
  v57 = v53 + v55;
  v58 = type metadata accessor for Conv1D();
  v59 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 24);
  v59(v56, v57, v58);
  *(_DWORD *)((char *)v52 + *(int *)(v54 + 24)) = *(_DWORD *)(v53 + *(int *)(v54 + 24));
  v60 = v50[6];
  v61 = (_QWORD *)(v46 + v60);
  v62 = v47 + v60;
  *v61 = *(_QWORD *)(v47 + v60);
  v61[1] = *(_QWORD *)(v47 + v60 + 8);
  v59((char *)(v46 + v60 + *(int *)(v54 + 20)), v47 + v60 + *(int *)(v54 + 20), v58);
  *(_DWORD *)((char *)v61 + *(int *)(v54 + 24)) = *(_DWORD *)(v62 + *(int *)(v54 + 24));
  v63 = v50[7];
  v64 = (_QWORD *)(v46 + v63);
  v65 = v47 + v63;
  *v64 = *(_QWORD *)(v47 + v63);
  v64[1] = *(_QWORD *)(v47 + v63 + 8);
  v59((char *)(v46 + v63 + *(int *)(v54 + 20)), v47 + v63 + *(int *)(v54 + 20), v58);
  *(_DWORD *)((char *)v64 + *(int *)(v54 + 24)) = *(_DWORD *)(v65 + *(int *)(v54 + 24));
  v66 = v50[8];
  v67 = (_QWORD *)(v46 + v66);
  v68 = v47 + v66;
  *v67 = *(_QWORD *)(v47 + v66);
  v67[1] = *(_QWORD *)(v47 + v66 + 8);
  v59((char *)(v46 + v66 + *(int *)(v54 + 20)), v47 + v66 + *(int *)(v54 + 20), v58);
  *(_DWORD *)((char *)v67 + *(int *)(v54 + 24)) = *(_DWORD *)(v68 + *(int *)(v54 + 24));
  v69 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  v70 = v46 + v69;
  v71 = v47 + v69;
  v72 = type metadata accessor for Dense();
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 24);
  v73(v70, v71, v72);
  v74 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v73(v70 + *(int *)(v74 + 20), v71 + *(int *)(v74 + 20), v72);
  v75 = v111[11];
  v76 = (char *)(v110 + v75);
  v77 = v114 + v75;
  *(_DWORD *)v76 = *(_DWORD *)(v114 + v75);
  *((_DWORD *)v76 + 1) = *(_DWORD *)(v114 + v75 + 4);
  *((_DWORD *)v76 + 2) = *(_DWORD *)(v114 + v75 + 8);
  *((_DWORD *)v76 + 3) = *(_DWORD *)(v114 + v75 + 12);
  v78 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  v79 = v78[12];
  v80 = &v76[v79];
  v81 = (const void *)(v77 + v79);
  v82 = type metadata accessor for GradientClippingMode();
  LODWORD(v70) = __swift_getEnumTagSinglePayload((uint64_t)v80, 1, v82);
  v83 = __swift_getEnumTagSinglePayload((uint64_t)v81, 1, v82);
  if ((_DWORD)v70)
  {
    if (!v83)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v80, v81, v82);
      __swift_storeEnumTagSinglePayload((uint64_t)v80, 0, 1, v82);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v84 = *(_QWORD *)(v82 - 8);
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v80, v82);
LABEL_30:
    v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, const void *, uint64_t))(v84 + 24))(v80, v81, v82);
LABEL_31:
  v86 = v78[13];
  v87 = &v76[v86];
  v88 = (const void *)(v77 + v86);
  v89 = type metadata accessor for RegularizationKind();
  v90 = __swift_getEnumTagSinglePayload((uint64_t)v87, 1, v89);
  v91 = __swift_getEnumTagSinglePayload((uint64_t)v88, 1, v89);
  if (v90)
  {
    if (!v91)
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
      __swift_storeEnumTagSinglePayload((uint64_t)v87, 0, 1, v89);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  v92 = *(_QWORD *)(v89 - 8);
  if (v91)
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v87, v89);
LABEL_36:
    v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, const void *, uint64_t))(v92 + 24))(v87, v88, v89);
LABEL_37:
  *(_DWORD *)&v76[v78[14]] = *(_DWORD *)(v77 + v78[14]);
  *(_QWORD *)&v76[v78[15]] = *(_QWORD *)(v77 + v78[15]);
  v94 = v78[16];
  v95 = &v76[v94];
  v96 = v77 + v94;
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  v98 = *(_QWORD *)(v97 - 8);
  v99 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 24);
  v99(v95, v96, v97);
  v99(&v76[v78[17]], v77 + v78[17], v97);
  v100 = v78[18];
  v101 = &v76[v100];
  v102 = (const void *)(v77 + v100);
  LODWORD(v95) = __swift_getEnumTagSinglePayload((uint64_t)&v76[v100], 1, v97);
  v103 = __swift_getEnumTagSinglePayload((uint64_t)v102, 1, v97);
  if (!(_DWORD)v95)
  {
    if (!v103)
    {
      v99(v101, (uint64_t)v102, v97);
      goto LABEL_43;
    }
    (*(void (**)(char *, uint64_t))(v98 + 8))(v101, v97);
    goto LABEL_42;
  }
  if (v103)
  {
LABEL_42:
    v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
    memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, const void *, uint64_t))(v98 + 16))(v101, v102, v97);
  __swift_storeEnumTagSinglePayload((uint64_t)v101, 0, 1, v97);
LABEL_43:
  v105 = v111[12];
  v106 = *(void **)(v114 + v105);
  v107 = *(void **)(v110 + v105);
  *(_QWORD *)(v110 + v105) = v106;
  v108 = v106;

  return v110;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  void *v78;
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  void *v93;
  const void *v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  int *v99;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v7 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  v8 = *(int *)(v7 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for URL();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = *(int *)(v7 + 36);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (__swift_getEnumTagSinglePayload(a2 + v13, 1, v11))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v14, (uint64_t)v15, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v11);
  }
  v17 = a3[5];
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  v20 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v99 = a3;
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v25 = *(int *)(v24 + 20);
    v26 = &v18[v25];
    v27 = &v19[v25];
    v28 = type metadata accessor for DataFrame();
    v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32);
    v29(v26, v27, v28);
    v29(&v18[*(int *)(v24 + 24)], &v19[*(int *)(v24 + 24)], v28);
    a3 = v99;
LABEL_11:
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v22 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v22 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v23 = __swift_instantiateConcreteTypeFromMangledName(v22);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v18, v19, v23);
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
LABEL_13:
  v30 = a3[6];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = swift_getEnumCaseMultiPayload();
  if (v33 == 1)
  {
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v36 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v37 = *(int *)(v36 + 20);
    v38 = &v31[v37];
    v39 = &v32[v37];
    v40 = type metadata accessor for DataFrame();
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32);
    v41(v38, v39, v40);
    v41(&v31[*(int *)(v36 + 24)], &v32[*(int *)(v36 + 24)], v40);
    a3 = v99;
LABEL_20:
    swift_storeEnumTagMultiPayload();
    goto LABEL_22;
  }
  if (!v33)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v34 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v34 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v35 = __swift_instantiateConcreteTypeFromMangledName(v34);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v31, v32, v35);
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
  memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
LABEL_22:
  v42 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  v43 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  v47 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(v44 + *(int *)(v47 + 20)) = *(_DWORD *)(v45 + *(int *)(v47 + 20));
  v48 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  v49 = v48[5];
  v50 = v44 + v49;
  v97 = a2;
  v51 = v45 + v49;
  *(_OWORD *)(v44 + v49) = *(_OWORD *)(v45 + v49);
  v52 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v53 = *(int *)(v52 + 20);
  v54 = v50 + v53;
  v55 = v51 + v53;
  v56 = type metadata accessor for Conv1D();
  v98 = a1;
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 32);
  v57(v54, v55, v56);
  *(_DWORD *)(v50 + *(int *)(v52 + 24)) = *(_DWORD *)(v51 + *(int *)(v52 + 24));
  v58 = v48[6];
  v59 = v44 + v58;
  v60 = v45 + v58;
  *(_OWORD *)(v44 + v58) = *(_OWORD *)(v45 + v58);
  v57(v44 + v58 + *(int *)(v52 + 20), v45 + v58 + *(int *)(v52 + 20), v56);
  *(_DWORD *)(v59 + *(int *)(v52 + 24)) = *(_DWORD *)(v60 + *(int *)(v52 + 24));
  v61 = v48[7];
  v62 = v44 + v61;
  v63 = v45 + v61;
  *(_OWORD *)(v44 + v61) = *(_OWORD *)(v45 + v61);
  v57(v44 + v61 + *(int *)(v52 + 20), v45 + v61 + *(int *)(v52 + 20), v56);
  *(_DWORD *)(v62 + *(int *)(v52 + 24)) = *(_DWORD *)(v63 + *(int *)(v52 + 24));
  v64 = v48[8];
  v65 = v44 + v64;
  v66 = v45 + v64;
  *(_OWORD *)(v44 + v64) = *(_OWORD *)(v45 + v64);
  v57(v44 + v64 + *(int *)(v52 + 20), v45 + v64 + *(int *)(v52 + 20), v56);
  *(_DWORD *)(v65 + *(int *)(v52 + 24)) = *(_DWORD *)(v66 + *(int *)(v52 + 24));
  v67 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  v68 = v44 + v67;
  v69 = v45 + v67;
  v70 = type metadata accessor for Dense();
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 32);
  v71(v68, v69, v70);
  v72 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v71(v68 + *(int *)(v72 + 20), v69 + *(int *)(v72 + 20), v70);
  v73 = v99[11];
  v74 = v98 + v73;
  v75 = v97 + v73;
  *(_OWORD *)(v98 + v73) = *(_OWORD *)(v97 + v73);
  v76 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  v77 = v76[12];
  v78 = (void *)(v74 + v77);
  v79 = (const void *)(v75 + v77);
  v80 = type metadata accessor for GradientClippingMode();
  if (__swift_getEnumTagSinglePayload((uint64_t)v79, 1, v80))
  {
    v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v78, v79, v80);
    __swift_storeEnumTagSinglePayload((uint64_t)v78, 0, 1, v80);
  }
  v82 = v76[13];
  v83 = (void *)(v74 + v82);
  v84 = (const void *)(v75 + v82);
  v85 = type metadata accessor for RegularizationKind();
  if (__swift_getEnumTagSinglePayload((uint64_t)v84, 1, v85))
  {
    v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
    __swift_storeEnumTagSinglePayload((uint64_t)v83, 0, 1, v85);
  }
  *(_DWORD *)(v74 + v76[14]) = *(_DWORD *)(v75 + v76[14]);
  *(_QWORD *)(v74 + v76[15]) = *(_QWORD *)(v75 + v76[15]);
  v87 = v76[16];
  v88 = v74 + v87;
  v89 = v75 + v87;
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 32);
  v91(v88, v89, v90);
  v91(v74 + v76[17], v75 + v76[17], v90);
  v92 = v76[18];
  v93 = (void *)(v74 + v92);
  v94 = (const void *)(v75 + v92);
  if (__swift_getEnumTagSinglePayload(v75 + v92, 1, v90))
  {
    v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
  }
  else
  {
    v91((uint64_t)v93, (uint64_t)v94, v90);
    __swift_storeEnumTagSinglePayload((uint64_t)v93, 0, 1, v90);
  }
  *(_QWORD *)(v98 + v99[12]) = *(_QWORD *)(v97 + v99[12]);
  return v98;
}

uint64_t assignWithTake for MLFewShotSoundClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  int EnumTagSinglePayload;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  void *v81;
  const void *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const void *v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  void *v102;
  const void *v103;
  int v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v110;
  uint64_t v111;
  int *v112;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v6 = type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  v7 = *(int *)(v6 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(v6 + 36);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  LODWORD(v9) = __swift_getEnumTagSinglePayload(a1 + v13, 1, v10);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v10);
  if ((_DWORD)v9)
  {
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v12((uint64_t)v14, (uint64_t)v15, v10);
LABEL_7:
  v112 = a3;
  if (a1 == a2)
    goto LABEL_26;
  v18 = a3[5];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  outlined destroy of MLHandPoseClassifier.ModelParameters(a1 + v18, type metadata accessor for MLClassifierMetrics.Contents);
  v21 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v25 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v26 = *(int *)(v25 + 20);
    v27 = &v19[v26];
    v28 = &v20[v26];
    v29 = type metadata accessor for DataFrame();
    v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32);
    v31 = v28;
    a3 = v112;
    v30(v27, v31, v29);
    v30(&v19[*(int *)(v25 + 24)], &v20[*(int *)(v25 + 24)], v29);
LABEL_15:
    swift_storeEnumTagMultiPayload();
    goto LABEL_17;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v24 = __swift_instantiateConcreteTypeFromMangledName(v23);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v19, v20, v24);
    swift_storeEnumTagMultiPayload();
    goto LABEL_15;
  }
  memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
LABEL_17:
  v32 = a3[6];
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  outlined destroy of MLHandPoseClassifier.ModelParameters(a1 + v32, type metadata accessor for MLClassifierMetrics.Contents);
  v35 = swift_getEnumCaseMultiPayload();
  if (v35 == 1)
  {
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v39 = *(int *)(v38 + 20);
    v40 = &v33[v39];
    v41 = &v34[v39];
    v42 = type metadata accessor for DataFrame();
    v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
    v44 = v41;
    a3 = v112;
    v43(v40, v44, v42);
    v43(&v33[*(int *)(v38 + 24)], &v34[*(int *)(v38 + 24)], v42);
LABEL_24:
    swift_storeEnumTagMultiPayload();
    goto LABEL_26;
  }
  if (!v35)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v36 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v36 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v37 = __swift_instantiateConcreteTypeFromMangledName(v36);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v33, v34, v37);
    swift_storeEnumTagMultiPayload();
    goto LABEL_24;
  }
  memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
LABEL_26:
  v45 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v45) = *(_QWORD *)(a2 + v45);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  v46 = a3[10];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 40))(v47, v48, v49);
  v50 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(v47 + *(int *)(v50 + 20)) = *(_DWORD *)(v48 + *(int *)(v50 + 20));
  v51 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  v52 = v51[5];
  v53 = v47 + v52;
  v110 = a2;
  v54 = v48 + v52;
  *(_OWORD *)(v47 + v52) = *(_OWORD *)(v48 + v52);
  v55 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v56 = *(int *)(v55 + 20);
  v57 = v53 + v56;
  v58 = v54 + v56;
  v59 = type metadata accessor for Conv1D();
  v111 = a1;
  v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 40);
  v60(v57, v58, v59);
  *(_DWORD *)(v53 + *(int *)(v55 + 24)) = *(_DWORD *)(v54 + *(int *)(v55 + 24));
  v61 = v51[6];
  v62 = v47 + v61;
  v63 = v48 + v61;
  *(_OWORD *)(v47 + v61) = *(_OWORD *)(v48 + v61);
  v60(v47 + v61 + *(int *)(v55 + 20), v48 + v61 + *(int *)(v55 + 20), v59);
  *(_DWORD *)(v62 + *(int *)(v55 + 24)) = *(_DWORD *)(v63 + *(int *)(v55 + 24));
  v64 = v51[7];
  v65 = v47 + v64;
  v66 = v48 + v64;
  *(_OWORD *)(v47 + v64) = *(_OWORD *)(v48 + v64);
  v60(v47 + v64 + *(int *)(v55 + 20), v48 + v64 + *(int *)(v55 + 20), v59);
  *(_DWORD *)(v65 + *(int *)(v55 + 24)) = *(_DWORD *)(v66 + *(int *)(v55 + 24));
  v67 = v51[8];
  v68 = v47 + v67;
  v69 = v48 + v67;
  *(_OWORD *)(v47 + v67) = *(_OWORD *)(v48 + v67);
  v60(v47 + v67 + *(int *)(v55 + 20), v48 + v67 + *(int *)(v55 + 20), v59);
  *(_DWORD *)(v68 + *(int *)(v55 + 24)) = *(_DWORD *)(v69 + *(int *)(v55 + 24));
  v70 = *(int *)(type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0) + 20);
  v71 = v47 + v70;
  v72 = v48 + v70;
  v73 = type metadata accessor for Dense();
  v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 40);
  v74(v71, v72, v73);
  v75 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v74(v71 + *(int *)(v75 + 20), v72 + *(int *)(v75 + 20), v73);
  v76 = v112[11];
  v77 = v111 + v76;
  v78 = v110 + v76;
  *(_OWORD *)(v111 + v76) = *(_OWORD *)(v110 + v76);
  v79 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  v80 = v79[12];
  v81 = (void *)(v77 + v80);
  v82 = (const void *)(v78 + v80);
  v83 = type metadata accessor for GradientClippingMode();
  LODWORD(v57) = __swift_getEnumTagSinglePayload((uint64_t)v81, 1, v83);
  v84 = __swift_getEnumTagSinglePayload((uint64_t)v82, 1, v83);
  if ((_DWORD)v57)
  {
    if (!v84)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v83 - 8) + 32))(v81, v82, v83);
      __swift_storeEnumTagSinglePayload((uint64_t)v81, 0, 1, v83);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  v85 = *(_QWORD *)(v83 - 8);
  if (v84)
  {
    (*(void (**)(void *, uint64_t))(v85 + 8))(v81, v83);
LABEL_31:
    v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GradientClippingMode?);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(void *, const void *, uint64_t))(v85 + 40))(v81, v82, v83);
LABEL_32:
  v87 = v79[13];
  v88 = (void *)(v77 + v87);
  v89 = (const void *)(v78 + v87);
  v90 = type metadata accessor for RegularizationKind();
  v91 = __swift_getEnumTagSinglePayload((uint64_t)v88, 1, v90);
  v92 = __swift_getEnumTagSinglePayload((uint64_t)v89, 1, v90);
  if (v91)
  {
    if (!v92)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v88, v89, v90);
      __swift_storeEnumTagSinglePayload((uint64_t)v88, 0, 1, v90);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  v93 = *(_QWORD *)(v90 - 8);
  if (v92)
  {
    (*(void (**)(void *, uint64_t))(v93 + 8))(v88, v90);
LABEL_37:
    v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RegularizationKind?);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(void *, const void *, uint64_t))(v93 + 40))(v88, v89, v90);
LABEL_38:
  *(_DWORD *)(v77 + v79[14]) = *(_DWORD *)(v78 + v79[14]);
  *(_QWORD *)(v77 + v79[15]) = *(_QWORD *)(v78 + v79[15]);
  v95 = v79[16];
  v96 = v77 + v95;
  v97 = v78 + v95;
  v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>);
  v99 = *(_QWORD *)(v98 - 8);
  v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 40);
  v100(v96, v97, v98);
  v100(v77 + v79[17], v78 + v79[17], v98);
  v101 = v79[18];
  v102 = (void *)(v77 + v101);
  v103 = (const void *)(v78 + v101);
  LODWORD(v97) = __swift_getEnumTagSinglePayload(v77 + v101, 1, v98);
  v104 = __swift_getEnumTagSinglePayload((uint64_t)v103, 1, v98);
  if (!(_DWORD)v97)
  {
    v105 = v112;
    if (!v104)
    {
      v100((uint64_t)v102, (uint64_t)v103, v98);
      goto LABEL_44;
    }
    (*(void (**)(void *, uint64_t))(v99 + 8))(v102, v98);
    goto LABEL_43;
  }
  v105 = v112;
  if (v104)
  {
LABEL_43:
    v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLFewShotSoundClassifier.TemporalClassifier>?);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(void *, const void *, uint64_t))(v99 + 32))(v102, v103, v98);
  __swift_storeEnumTagSinglePayload((uint64_t)v102, 0, 1, v98);
LABEL_44:
  v107 = v105[12];
  v108 = *(void **)(v111 + v107);
  *(_QWORD *)(v111 + v107) = *(_QWORD *)(v110 + v107);

  return v111;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE4BD54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_14_8();
  if (v9)
  {
    v7 = v6;
    v8 = v4;
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_14_8();
  if (v9)
  {
    v7 = v10;
    v11 = a3[5];
LABEL_14:
    v8 = v4 + v11;
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
    OUTLINED_FUNCTION_14_8();
    if (v9)
    {
      v7 = v14;
      v11 = a3[10];
    }
    else
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
      v11 = a3[11];
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(v4 + a3[8]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AE4BE24(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_13_11();
  if (v11)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    type metadata accessor for MLClassifierMetrics(0);
    OUTLINED_FUNCTION_13_11();
    if (v11)
    {
      v9 = v12;
      v13 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(v5 + a4[8]) = (v4 - 1);
        return;
      }
      type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
      OUTLINED_FUNCTION_13_11();
      if (v11)
      {
        v9 = v14;
        v13 = a4[10];
      }
      else
      {
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
        v13 = a4[11];
      }
    }
    v10 = v5 + v13;
  }
  __swift_storeEnumTagSinglePayload(v10, v4, v4, v9);
}

void type metadata completion function for MLFewShotSoundClassifier()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(319);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Adam<MLFewShotSoundClassifier.TemporalClassifier>();
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for Adam<MLFewShotSoundClassifier.TemporalClassifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>)
  {
    type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(255);
    lazy protocol witness table accessor for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier();
    v0 = type metadata accessor for Adam();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Adam<MLFewShotSoundClassifier.TemporalClassifier>);
  }
}

uint64_t sub_21AE4C02C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ComputeDevice();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in MLFewShotSoundClassifier.makeSoundDataset<A>(from:batchSize:device:)(uint64_t a1@<X8>)
{
  uint64_t v1;

  type metadata accessor for ComputeDevice();
  closure #1 in MLFewShotSoundClassifier.makeSoundDataset<A>(from:batchSize:device:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t outlined init with take of MLFewShotSoundClassifier.TemporalClassifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFewShotSoundClassifier.TemporalClassifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined assign with take of MLClassifierMetrics(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = OUTLINED_FUNCTION_166(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v3, v4, v5);
  OUTLINED_FUNCTION_22();
}

void partial apply for closure #1 in MLFewShotSoundClassifier.performStep(on:)(uint64_t a1@<X8>)
{
  uint64_t v1;

  closure #1 in MLFewShotSoundClassifier.performStep(on:)(*(void (**)(unint64_t, char *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 40), a1);
}

uint64_t OUTLINED_FUNCTION_0_15()
{
  return type metadata accessor for MLFewShotSoundClassifier();
}

uint64_t OUTLINED_FUNCTION_2_14(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_9_8()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_10_8()
{
  return type metadata accessor for MLFewShotSoundClassifier.ModelParameters();
}

void OUTLINED_FUNCTION_16_10(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 184), a2);
}

id OUTLINED_FUNCTION_18_6(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void MLImageClassifier.ModelParameters.algorithm.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t EnumTagSinglePayload;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.ModelParameters.ModelAlgorithmType?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_95_1();
  outlined init with copy of Any?(v1 + 48, (uint64_t)v10);
  if (!v11)
  {
    outlined destroy of URL?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
    v9 = OUTLINED_FUNCTION_2_15();
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v9);
    goto LABEL_5;
  }
  v5 = OUTLINED_FUNCTION_2_15();
  v6 = swift_dynamicCast();
  __swift_storeEnumTagSinglePayload(v2, v6 ^ 1u, 1, v5);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v5);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
LABEL_5:
    *(_QWORD *)a1 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    OUTLINED_FUNCTION_34_8();
    swift_storeEnumTagMultiPayload();
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLImageClassifier.ModelParameters.ModelAlgorithmType?);
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_32_5(EnumTagSinglePayload, v8, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
LABEL_6:
  OUTLINED_FUNCTION_125();
}

uint64_t MLImageClassifier.ModelParameters.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MLImageClassifier.ModelParameters.maxIterations.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*MLImageClassifier.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLImageClassifier.ModelParameters.augmentationOptions.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

_QWORD *MLImageClassifier.ModelParameters.augmentationOptions.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*MLImageClassifier.ModelParameters.augmentationOptions.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLImageClassifier.ModelParameters.algorithm.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10[4];

  v1 = OUTLINED_FUNCTION_2_15();
  v9 = OUTLINED_FUNCTION_35_4(v1, v2, v3, v4, v5, v6, v7, v8, v10[0], v10[1], v10[2], v10[3]);
  OUTLINED_FUNCTION_11_7((uint64_t)v9);
  outlined assign with take of Any?((uint64_t)v10, v0 + 48);
  OUTLINED_FUNCTION_13_12();
}

void (*MLImageClassifier.ModelParameters.algorithm.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[8] = v1;
  v4 = OUTLINED_FUNCTION_2_15();
  v3[9] = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v6 = malloc(v5);
  v3[11] = v6;
  MLImageClassifier.ModelParameters.algorithm.getter((uint64_t)v6);
  return MLImageClassifier.ModelParameters.algorithm.modify;
}

void MLImageClassifier.ModelParameters.algorithm.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v8;
  uint64_t *v9;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[10];
    v3 = (void *)v2[11];
    v6 = v2[8];
    v5 = v2[9];
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v3, v4, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    v2[3] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2);
    OUTLINED_FUNCTION_24_4(v4, (uint64_t)boxed_opaque_existential_0);
    outlined assign with take of Any?((uint64_t)v2, v6 + 48);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  }
  else
  {
    v3 = (void *)v2[11];
    v8 = v2[8];
    v2[7] = v2[9];
    v9 = __swift_allocate_boxed_opaque_existential_0(v2 + 4);
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v3, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    outlined assign with take of Any?((uint64_t)(v2 + 4), v8 + 48);
  }
  free(v3);
  OUTLINED_FUNCTION_31_9();
  OUTLINED_FUNCTION_5_12(v2);
}

void MLImageClassifier.ModelParameters.validationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  type metadata accessor for MLImageClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_4_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_50();
  v5 = v3 - v4;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - v7;
  outlined init with copy of Any?(v0 + 16, (uint64_t)&v11);
  if (v12)
  {
    outlined init with take of Any(&v11, &v13);
    OUTLINED_FUNCTION_16_0();
    outlined init with copy of MLTrainingSessionParameters((uint64_t)v8, v5, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    v9 = (char *)&loc_21AE4C580 + dword_21AE4C644[swift_getEnumCaseMultiPayload()];
    __asm { BR              X9 }
  }
  __break(1u);
  JUMPOUT(0x21AE4C644);
}

void key path setter for MLImageClassifier.ModelParameters.validationData : MLImageClassifier.ModelParameters()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  MLImageClassifier.ModelParameters.validationData.setter(v0);
}

void MLImageClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v12[4];

  v3 = OUTLINED_FUNCTION_4_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v12 - v9;
  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      *(_QWORD *)v7 = a1;
      type metadata accessor for MLImageClassifier.DataSource();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 256;
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v7, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  v12[3] = v3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v12);
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v10, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?((uint64_t)v12, v1 + 16);
  OUTLINED_FUNCTION_164();
}

uint64_t MLImageClassifier.ModelParameters.validation.getter()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  result = outlined init with copy of Any?(v0 + 16, (uint64_t)&v2);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    OUTLINED_FUNCTION_4_12();
    return OUTLINED_FUNCTION_16_0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLImageClassifier.ModelParameters.validation.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10[4];

  v1 = OUTLINED_FUNCTION_4_12();
  v9 = OUTLINED_FUNCTION_35_4(v1, v2, v3, v4, v5, v6, v7, v8, v10[0], v10[1], v10[2], v10[3]);
  OUTLINED_FUNCTION_11_7((uint64_t)v9);
  outlined assign with take of Any?((uint64_t)v10, v0 + 16);
  OUTLINED_FUNCTION_13_12();
}

void (*MLImageClassifier.ModelParameters.validationData.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  MLImageClassifier.ModelParameters.validationData.getter();
  *a1 = v3;
  return MLImageClassifier.ModelParameters.validationData.modify;
}

void MLImageClassifier.ModelParameters.validationData.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    MLImageClassifier.ModelParameters.validationData.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    MLImageClassifier.ModelParameters.validationData.setter(*a1);
    OUTLINED_FUNCTION_22();
  }
}

void key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v8 = a5(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v11 - v9;
  OUTLINED_FUNCTION_29_6(a1, (uint64_t)&v11 - v9);
  a6(v10);
  OUTLINED_FUNCTION_164();
}

void MLImageClassifier.ModelParameters.validation.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;

  v3 = malloc(0xA0uLL);
  *a1 = v3;
  v3[16] = v1;
  v4 = OUTLINED_FUNCTION_4_12();
  v3[17] = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[18] = malloc(v5);
  v3[19] = malloc(v5);
  outlined init with copy of Any?(v1 + 16, (uint64_t)(v3 + 4));
  if (v3[7])
  {
    outlined init with take of Any((_OWORD *)v3 + 2, v3);
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_164();
  }
  else
  {
    __break(1u);
  }
}

void MLImageClassifier.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v7;

  v2 = *a1;
  v3 = (void *)(*a1)[18];
  v4 = (*a1)[19];
  v5 = (*a1)[17];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of MLTrainingSessionParameters((*a1)[19], (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v3, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 8));
    outlined destroy of MLHandPoseClassifier.ModelParameters(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  }
  else
  {
    v2[15] = v5;
    v7 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLHandPoseClassifier.ModelParameters(v4, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 12));
  }
  OUTLINED_FUNCTION_31_9();
  free(v3);
  free(v2);
}

void MLImageClassifier.ModelParameters.featureExtractor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_2_15();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_95_1();
  MLImageClassifier.ModelParameters.algorithm.getter(v0);
  OUTLINED_FUNCTION_32_5(v2, v3, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  OUTLINED_FUNCTION_125();
}

void MLImageClassifier.ModelParameters.featureExtractor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v12[4];

  v3 = OUTLINED_FUNCTION_2_15();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v12 - v9;
  MLImageClassifier.ModelParameters.algorithm.getter((uint64_t)v12 - v9);
  outlined init with copy of MLTrainingSessionParameters(a1, v7, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  v12[3] = v3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v12);
  OUTLINED_FUNCTION_24_4(v7, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v12, v1 + 48);
  outlined destroy of MLHandPoseClassifier.ModelParameters(a1, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v10, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  OUTLINED_FUNCTION_8_0();
}

void MLImageClassifier.ModelParameters.featureExtractor.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;

  *a1 = v1;
  v3 = OUTLINED_FUNCTION_2_15();
  v4 = malloc(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  a1[1] = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(OUTLINED_FUNCTION_34_8() - 8) + 64);
  a1[2] = malloc(v5);
  v6 = malloc(v5);
  a1[3] = v6;
  MLImageClassifier.ModelParameters.algorithm.getter((uint64_t)v4);
  OUTLINED_FUNCTION_24_4((uint64_t)v4, (uint64_t)v6);
  OUTLINED_FUNCTION_164();
}

void MLImageClassifier.ModelParameters.featureExtractor.modify(_QWORD *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = a1[2];
  v3 = (void *)a1[3];
  v4 = (void *)a1[1];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of MLTrainingSessionParameters(a1[3], v2, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    MLImageClassifier.ModelParameters.featureExtractor.setter(v2);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v3, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  }
  else
  {
    MLImageClassifier.ModelParameters.featureExtractor.setter(a1[3]);
  }
  free(v3);
  OUTLINED_FUNCTION_31_9();
  OUTLINED_FUNCTION_5_12(v4);
}

void MLImageClassifier.ModelParameters.init(validation:maxIterations:augmentation:algorithm:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  _BYTE v15[24];
  uint64_t v16;

  v7 = OUTLINED_FUNCTION_2_15();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = OUTLINED_FUNCTION_4_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_1_13();
  OUTLINED_FUNCTION_10_9(a1);
  v16 = v11;
  v13 = OUTLINED_FUNCTION_9_9();
  OUTLINED_FUNCTION_12_8((uint64_t)v13);
  OUTLINED_FUNCTION_17_0((uint64_t)v15);
  outlined init with copy of MLTrainingSessionParameters(a4, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  v16 = v7;
  v14 = OUTLINED_FUNCTION_9_9();
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  OUTLINED_FUNCTION_33_6();
  OUTLINED_FUNCTION_25_5(a4);
  outlined destroy of MLHandPoseClassifier.ModelParameters(a1, a2);
  OUTLINED_FUNCTION_9_5();
}

void MLImageClassifier.ModelParameters.init(featureExtractor:validation:maxIterations:augmentationOptions:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _BYTE v14[24];
  uint64_t v15;

  v6 = OUTLINED_FUNCTION_2_15();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = OUTLINED_FUNCTION_4_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_1_13();
  OUTLINED_FUNCTION_10_9(a2);
  v15 = v10;
  v12 = OUTLINED_FUNCTION_9_9();
  OUTLINED_FUNCTION_12_8((uint64_t)v12);
  OUTLINED_FUNCTION_17_0((uint64_t)v14);
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)v9, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  v15 = v6;
  v13 = OUTLINED_FUNCTION_9_9();
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  OUTLINED_FUNCTION_33_6();
  outlined destroy of MLHandPoseClassifier.ModelParameters(a2, a3);
  OUTLINED_FUNCTION_25_5(a1);
  OUTLINED_FUNCTION_9_5();
}

void MLImageClassifier.ModelParameters.init(featureExtractor:validationData:maxIterations:augmentationOptions:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t *v15;
  _BYTE v16[24];
  uint64_t v17;

  v10 = OUTLINED_FUNCTION_2_15();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v16[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *a4;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_QWORD *)a5 = a3;
  *(_QWORD *)(a5 + 8) = v14;
  MLImageClassifier.ModelParameters.validationData.setter(a2);
  OUTLINED_FUNCTION_29_6(a1, (uint64_t)v13);
  v17 = v10;
  v15 = OUTLINED_FUNCTION_9_9();
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v13, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v16, a5 + 48);
  OUTLINED_FUNCTION_26_7();
  OUTLINED_FUNCTION_9_5();
}

{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v16[5];

  v11 = OUTLINED_FUNCTION_2_15();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_14_5();
  v13 = *a4;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_QWORD *)a5 = a3;
  *(_QWORD *)(a5 + 8) = v13;
  v14 = static _ImageUtilities.getImageURLsAndLabels(from:)(a2);
  MLImageClassifier.ModelParameters.validationData.setter(v14);
  OUTLINED_FUNCTION_29_6(a1, v5);
  v16[3] = v11;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v16);
  outlined init with take of MLHandPoseClassifier.ModelParameters(v5, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  outlined assign with take of Any?((uint64_t)v16, a5 + 48);
  outlined destroy of MLHandPoseClassifier.ModelParameters(a2, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.DataSource);
  OUTLINED_FUNCTION_26_7();
  OUTLINED_FUNCTION_8_0();
}

unint64_t MLImageClassifier.ModelParameters.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD v10[2];
  Swift::String v11;
  unint64_t v12;
  unint64_t v13;

  OUTLINED_FUNCTION_34_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_2_15();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  MLImageClassifier.ModelParameters.algorithm.getter(v1);
  outlined init with take of MLHandPoseClassifier.ModelParameters(v1, (uint64_t)v4, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  v12 = 0;
  v13 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v12 = 0xD000000000000013;
  v13 = 0x800000021AFF2D30;
  MLImageClassifier.FeatureExtractorType.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28_7();
  v7._countAndFlagsBits = 0xD00000000000001FLL;
  v7._object = (void *)0x800000021AFF2D50;
  String.append(_:)(v7);
  OUTLINED_FUNCTION_25_5((uint64_t)v4);
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0xD000000000000010;
  v11._object = (void *)0x800000021AFF13A0;
  v10[1] = *v0;
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28_7();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v12;
}

void MLImageClassifier.ModelParameters.playgroundDescription.getter(unint64_t *a1@<X8>)
{
  unint64_t v2;
  unint64_t v3;

  v2 = MLImageClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLImageClassifier.ModelParameters.validate()()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_14_5();
  MLImageClassifier.ModelParameters.algorithm.getter(v1);
  MLImageClassifier.ModelParameters.ModelAlgorithmType.validate()();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
  if (!v3)
  {
    v4 = *(_QWORD *)v0;
    outlined init with copy of MLImageClassifier.ModelParameters(v0, (uint64_t)&v14);
    if (v4 < 1)
    {
      outlined destroy of MLImageClassifier.ModelParameters((uint64_t)&v14);
    }
    else
    {
      v5 = v14;
      outlined destroy of MLImageClassifier.ModelParameters((uint64_t)&v14);
      if (v5 < 0x7FFFFFFF)
        return;
    }
    v14 = 0;
    v15 = 0xE000000000000000;
    _StringGuts.grow(_:)(87);
    v6._object = (void *)0x800000021AFF2D70;
    v6._countAndFlagsBits = 0xD000000000000048;
    String.append(_:)(v6);
    LODWORD(v16) = 0x7FFFFFFF;
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0x6F6720747562202CLL;
    v8._object = (void *)0xEA00000000002074;
    String.append(_:)(v8);
    v16 = *(_QWORD *)v0;
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11 = v14;
    v12 = v15;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v13 = v11;
    *(_QWORD *)(v13 + 8) = v12;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_BYTE *)(v13 + 48) = 0;
    swift_willThrow(0.0);
  }
}

void sub_21AE4D3FC(uint64_t a1@<X8>)
{
  MLImageClassifier.ModelParameters.algorithm.getter(a1);
  OUTLINED_FUNCTION_22();
}

void sub_21AE4D418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType, (void (*)(char *))MLImageClassifier.ModelParameters.algorithm.setter);
}

void sub_21AE4D43C(_QWORD *a1@<X8>)
{
  uint64_t v2;

  MLImageClassifier.ModelParameters.validationData.getter();
  *a1 = v2;
  OUTLINED_FUNCTION_22();
}

void sub_21AE4D464()
{
  MLImageClassifier.ModelParameters.validation.getter();
  OUTLINED_FUNCTION_22();
}

void sub_21AE4D480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData, (void (*)(char *))MLImageClassifier.ModelParameters.validation.setter);
}

void sub_21AE4D4A4()
{
  MLImageClassifier.ModelParameters.featureExtractor.getter();
  OUTLINED_FUNCTION_22();
}

void sub_21AE4D4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for MLImageClassifier.ModelParameters.algorithm : MLImageClassifier.ModelParameters(a1, a2, a3, a4, type metadata accessor for MLImageClassifier.FeatureExtractorType, (void (*)(char *))MLImageClassifier.ModelParameters.featureExtractor.setter);
}

uint64_t destroy for MLImageClassifier.ModelParameters(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 40))
    result = __swift_destroy_boxed_opaque_existential_0(result + 16);
  if (*(_QWORD *)(v1 + 72))
    return __swift_destroy_boxed_opaque_existential_0(v1 + 48);
  return result;
}

uint64_t initializeWithCopy for MLImageClassifier.ModelParameters(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;

  v5 = *a2;
  v4 = a2 + 1;
  *(_OWORD *)a1 = v5;
  v6 = (_OWORD *)(a1 + 16);
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v6, v4);
  }
  else
  {
    v8 = v4[1];
    *v6 = *v4;
    v6[1] = v8;
  }
  v9 = (_OWORD *)(a1 + 48);
  v10 = a2 + 3;
  v11 = *((_QWORD *)a2 + 9);
  if (v11)
  {
    *(_QWORD *)(a1 + 72) = v11;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v9, v10);
  }
  else
  {
    v12 = a2[4];
    *v9 = *v10;
    *(_OWORD *)(a1 + 64) = v12;
  }
  return a1;
}

uint64_t assignWithCopy for MLImageClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_0(a1 + 16);
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 40) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 16, a2 + 16);
    goto LABEL_8;
  }
  v7 = v5[1];
  *v4 = *v5;
  v4[1] = v7;
LABEL_8:
  v8 = *(_QWORD *)(a2 + 72);
  if (!*(_QWORD *)(a1 + 72))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 72) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 48, a2 + 48);
      return a1;
    }
LABEL_14:
    v9 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v9;
    return a1;
  }
  if (!v8)
  {
    __swift_destroy_boxed_opaque_existential_0(a1 + 48);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for MLImageClassifier.ModelParameters(uint64_t a1, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;

  v4 = a2 + 1;
  *(_OWORD *)a1 = *a2;
  v5 = (_OWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 40))
    __swift_destroy_boxed_opaque_existential_0(a1 + 16);
  v6 = v4[1];
  *v5 = *v4;
  v5[1] = v6;
  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_0(a1 + 48);
  v7 = a2[4];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.ModelParameters(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 40);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLImageClassifier.ModelParameters()
{
  return &type metadata for MLImageClassifier.ModelParameters;
}

uint64_t outlined init with copy of MLImageClassifier.ModelParameters(__int128 *a1, uint64_t a2)
{
  initializeWithCopy for MLImageClassifier.ModelParameters(a2, a1);
  return a2;
}

uint64_t outlined destroy of MLImageClassifier.ModelParameters(uint64_t a1)
{
  destroy for MLImageClassifier.ModelParameters(a1);
  return a1;
}

double OUTLINED_FUNCTION_1_13()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v3 = *v0;
  result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = v3;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_15()
{
  return type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
}

uint64_t OUTLINED_FUNCTION_4_12()
{
  return type metadata accessor for MLImageClassifier.ModelParameters.ValidationData();
}

void OUTLINED_FUNCTION_5_12(void *a1)
{
  free(a1);
}

uint64_t *OUTLINED_FUNCTION_9_9()
{
  uint64_t v0;

  return __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 - 112));
}

void OUTLINED_FUNCTION_10_9(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with copy of MLTrainingSessionParameters(a1, v2, v1);
}

void OUTLINED_FUNCTION_11_7(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with take of MLHandPoseClassifier.ModelParameters(v1, a1, v2);
}

void OUTLINED_FUNCTION_12_8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with take of MLHandPoseClassifier.ModelParameters(v1, a1, v2);
}

void OUTLINED_FUNCTION_24_4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of MLHandPoseClassifier.ModelParameters(a1, a2, v2);
}

void OUTLINED_FUNCTION_25_5(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandPoseClassifier.ModelParameters(a1, v1);
}

void OUTLINED_FUNCTION_26_7()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandPoseClassifier.ModelParameters(v0, v1);
}

void OUTLINED_FUNCTION_28_7()
{
  Swift::String v0;

  v0._countAndFlagsBits = 10;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_29_6(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of MLTrainingSessionParameters(a1, a2, v2);
}

void OUTLINED_FUNCTION_31_9()
{
  void *v0;

  free(v0);
}

void OUTLINED_FUNCTION_32_5(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with take of MLHandPoseClassifier.ModelParameters(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_33_6()
{
  uint64_t v0;
  uint64_t v1;

  return outlined assign with take of Any?(v1 - 112, v0);
}

uint64_t OUTLINED_FUNCTION_34_8()
{
  return type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
}

uint64_t *OUTLINED_FUNCTION_35_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a12 = a1;
  return __swift_allocate_boxed_opaque_existential_0(&a9);
}

int *MLHandActionClassifier.ModelParameters.init(validation:batchSize:maximumIterations:predictionWindowSize:augmentationOptions:algorithm:targetFrameRate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v12;
  int *result;

  v12 = *a5;
  outlined init with take of MLHandActionClassifier.ModelParameters.ValidationData(a1, a6, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  result = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)(a6 + result[5]) = a2;
  *(_QWORD *)(a6 + result[6]) = a3;
  *(_QWORD *)(a6 + result[7]) = a4;
  *(_QWORD *)(a6 + result[8]) = v12;
  *(double *)(a6 + result[10]) = a7;
  return result;
}

uint64_t type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.ModelParameters.ValidationData);
}

uint64_t type metadata accessor for MLHandActionClassifier.ModelParameters(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandActionClassifier.ModelParameters);
}

uint64_t MLHandActionClassifier.ModelParameters.validation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v1, a1);
}

uint64_t outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLHandActionClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of MLHandActionClassifier.ModelParameters.ValidationData(a1, v1);
}

uint64_t outlined assign with take of MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*MLHandActionClassifier.ModelParameters.validation.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.ModelParameters.batchSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 20));
}

void MLHandActionClassifier.ModelParameters.batchSize.setter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_5_13() + 20)) = v0;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLHandActionClassifier.ModelParameters.batchSize.modify())(_QWORD)
{
  type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.ModelParameters.maximumIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 24));
}

void MLHandActionClassifier.ModelParameters.maximumIterations.setter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_5_13() + 24)) = v0;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLHandActionClassifier.ModelParameters.maximumIterations.modify())(_QWORD)
{
  type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.ModelParameters.predictionWindowSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 28));
}

void MLHandActionClassifier.ModelParameters.predictionWindowSize.setter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_5_13() + 28)) = v0;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLHandActionClassifier.ModelParameters.predictionWindowSize.modify())(_QWORD)
{
  type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandActionClassifier.ModelParameters.augmentationOptions.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 32));
  OUTLINED_FUNCTION_22();
}

void MLHandActionClassifier.ModelParameters.augmentationOptions.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)(v1 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 32)) = v2;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLHandActionClassifier.ModelParameters.augmentationOptions.modify())(_QWORD)
{
  type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t (*MLHandActionClassifier.ModelParameters.algorithm.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLHandActionClassifier.ModelParameters.targetFrameRate.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for MLHandActionClassifier.ModelParameters(0) + 40));
}

uint64_t MLHandActionClassifier.ModelParameters.targetFrameRate.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(double *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*MLHandActionClassifier.ModelParameters.targetFrameRate.modify())(_QWORD)
{
  type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandActionClassifier.ModelParameters.ModelAlgorithmType.hash(into:)()
{
  Hasher._combine(_:)(0);
  OUTLINED_FUNCTION_22();
}

uint64_t static MLHandActionClassifier.ModelParameters.ModelAlgorithmType.== infix(_:_:)()
{
  return 1;
}

Swift::Int MLHandActionClassifier.ModelParameters.ModelAlgorithmType.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  return MLHandActionClassifier.ModelParameters.ModelAlgorithmType.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  MLHandActionClassifier.ModelParameters.ModelAlgorithmType.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  return 1;
}

void MLHandActionClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  char v13;
  int EnumCaseMultiPayload;
  int v15;
  id v16;
  uint64_t v17;
  char v18;
  char v19;
  id v20;
  char v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  char v34;
  char v35;
  id v36;
  char v37;
  uint64_t v38;
  char v39;
  void *v40;
  char v41;
  _QWORD *v42;

  v6 = type metadata accessor for MLHandActionClassifier.DataSource();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLHandActionClassifier.DataSource.videosWithAnnotations()();
  if (!v3)
  {
    v31 = a1;
    v42 = a2;
    v12 = v32;
    v13 = v33;
    outlined init with copy of MLHandActionClassifier.ModelParameters.ValidationData(v2, (uint64_t)v11);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v15 = swift_getEnumCaseMultiPayload();
        if (v15 == 5)
        {
          OUTLINED_FUNCTION_1_14();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          OUTLINED_FUNCTION_4_13();
          OUTLINED_FUNCTION_4_13();
          OUTLINED_FUNCTION_4_13();
          v28 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v11, v28);
          goto LABEL_14;
        }
        if (v15 == 3)
        {
          OUTLINED_FUNCTION_1_14();
          outlined consume of Result<_DataTable, Error>(*(id *)v11, v11[8]);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_14:
          v29 = v31;
          *v31 = 0;
          *((_BYTE *)v29 + 8) = -1;
          v27 = v42;
          *v42 = 0;
          goto LABEL_15;
        }
        outlined init with take of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
        MLHandActionClassifier.DataSource.videosWithAnnotations()();
        outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
        v30 = v31;
        v20 = v32;
        v21 = v33;
        *v31 = v12;
        *((_BYTE *)v30 + 8) = v13;
LABEL_9:
        v24 = v42;
        *v42 = v20;
        *((_BYTE *)v24 + 8) = v21;
        return;
      }
      OUTLINED_FUNCTION_10_10();
      if (v25)
      {
        v26 = v31;
        *v31 = v12;
        *((_BYTE *)v26 + 8) = v13;
        v27 = v42;
        *v42 = 0;
LABEL_15:
        *((_BYTE *)v27 + 8) = -1;
        return;
      }
    }
    else
    {
      v16 = *(id *)v11;
      v17 = *((_QWORD *)v11 + 1);
      v18 = v11[16];
      v19 = v11[17];
      if (OUTLINED_FUNCTION_10_10() >= 1)
      {
        v36 = v12;
        v37 = v13;
        v32 = v16;
        v33 = v17;
        v34 = v18;
        v35 = v19;
        MLDataTable.randomSplitBySequence(strategy:by:on:)((uint64_t)&v40, (uint64_t)&v38, (uint64_t)&v32, (void *)0x7461506F65646976, (void *)0xE900000000000068, (void *)0x6C6562616CLL, (void *)0xE500000000000000);
        OUTLINED_FUNCTION_1_14();
        v20 = v40;
        v21 = v41;
        v22 = v39;
        v23 = v31;
        *v31 = v38;
        *((_BYTE *)v23 + 8) = v22;
        goto LABEL_9;
      }
    }
    OUTLINED_FUNCTION_1_14();
    goto LABEL_14;
  }
}

unint64_t MLHandActionClassifier.ModelParameters.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;

  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v31 = 0xD000000000000014;
  v32 = 0x800000021AFF2DC0;
  v1 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  OUTLINED_FUNCTION_104();
  v3._countAndFlagsBits = 10;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  strcpy((char *)&v30, "Batch Size: ");
  BYTE5(v30._object) = 0;
  HIWORD(v30._object) = -5120;
  v33._countAndFlagsBits = OUTLINED_FUNCTION_3_11();
  OUTLINED_FUNCTION_13_0(v33);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_0_1();
  String.append(_:)(v30);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_13_13();
  _StringGuts.grow(_:)(27);
  OUTLINED_FUNCTION_145_0();
  v34._countAndFlagsBits = OUTLINED_FUNCTION_3_11();
  OUTLINED_FUNCTION_13_0(v34);
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_8_12(v4, v5, v6, v7, v8, v9, v10, v11, v26, v28, 0xD000000000000018, (void *)0x800000021AFF2DE0);
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_13_13();
  _StringGuts.grow(_:)(22);
  OUTLINED_FUNCTION_145_0();
  v35._countAndFlagsBits = Double.description.getter();
  OUTLINED_FUNCTION_13_0(v35);
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_8_12(v12, v13, v14, v15, v16, v17, v18, v19, v27, v29, 0xD000000000000013, (void *)0x800000021AFF2E00);
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_13_13();
  _StringGuts.grow(_:)(25);
  OUTLINED_FUNCTION_145_0();
  v20 = *(_QWORD *)(v0 + *(int *)(v1 + 32));
  v30._countAndFlagsBits = 0xD000000000000016;
  v30._object = (void *)0x800000021AFF2E20;
  if (v20 == 1)
    v21 = 0xD000000000000011;
  else
    v21 = 0;
  if (v20 == 1)
    v22 = 0x800000021AFF2E60;
  else
    v22 = 0xE000000000000000;
  v23 = v22;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_1();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_13_13();
  _StringGuts.grow(_:)(20);
  OUTLINED_FUNCTION_145_0();
  v24._countAndFlagsBits = 0xD000000000000015;
  v24._object = (void *)0x800000021AFF2E40;
  String.append(_:)(v24);
  return v31;
}

void MLHandActionClassifier.ModelParameters.playgroundDescription.getter(unint64_t *a1@<X8>)
{
  unint64_t v2;
  unint64_t v3;

  v2 = MLHandActionClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

unint64_t lazy protocol witness table accessor for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType;
  if (!lazy protocol witness table cache variable for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandActionClassifier.ModelParameters.ModelAlgorithmType, &type metadata for MLHandActionClassifier.ModelParameters.ModelAlgorithmType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandActionClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandActionClassifier.ModelParameters.ModelAlgorithmType);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.ModelParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      v8 = (char *)&loc_21AE4E3F4 + 4 * byte_21AFE9340[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    v10 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    v11 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  }
  return a1;
}

uint64_t destroy for MLHandActionClassifier.ModelParameters(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
        v4 = type metadata accessor for URL();
        v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
        v5(a1, v4);
        v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v5(a1 + *(int *)(v6 + 48), v4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 1:
      case 2:
        v3 = type metadata accessor for URL();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 4:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 5:
        v7 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 6:
        v8 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_10:
        result = swift_bridgeObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

char *initializeWithCopy for MLHandActionClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    v7 = (char *)&loc_21AE4EA58 + 4 * byte_21AFE934E[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  v9 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  return a1;
}

char *assignWithCopy for MLHandActionClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      v7 = (char *)&loc_21AE4EE88 + 4 * byte_21AFE9355[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  return a1;
}

char *initializeWithTake for MLHandActionClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v8 = type metadata accessor for URL();
        v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
        v9(a1, a2, v8);
        v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v9(&a1[v10[12]], &a2[v10[12]], v8);
        *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
        *(_OWORD *)&a1[v10[20]] = *(_OWORD *)&a2[v10[20]];
        *(_OWORD *)&a1[v10[24]] = *(_OWORD *)&a2[v10[24]];
        *(_OWORD *)&a1[v10[28]] = *(_OWORD *)&a2[v10[28]];
        goto LABEL_9;
      case 1u:
      case 2u:
        v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        goto LABEL_9;
      case 5u:
        v12 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v13[12]] = *(_OWORD *)&a2[v13[12]];
        *(_OWORD *)&a1[v13[16]] = *(_OWORD *)&a2[v13[16]];
        *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
        goto LABEL_9;
      case 6u:
        v14 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&a1[v15[12]] = *(_OWORD *)&a2[v15[12]];
        *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
        *(_OWORD *)&a1[v15[20]] = *(_OWORD *)&a2[v15[20]];
        *(_OWORD *)&a1[v15[24]] = *(_OWORD *)&a2[v15[24]];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v16 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  v17 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  return a1;
}

char *assignWithTake for MLHandActionClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    v6 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v8 = type metadata accessor for URL();
          v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
          v9(a1, a2, v8);
          v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v9(&a1[v10[12]], &a2[v10[12]], v8);
          *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
          *(_OWORD *)&a1[v10[20]] = *(_OWORD *)&a2[v10[20]];
          *(_OWORD *)&a1[v10[24]] = *(_OWORD *)&a2[v10[24]];
          *(_OWORD *)&a1[v10[28]] = *(_OWORD *)&a2[v10[28]];
          goto LABEL_10;
        case 1u:
        case 2u:
          v11 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
          goto LABEL_10;
        case 5u:
          v12 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
          v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&a1[v13[12]] = *(_OWORD *)&a2[v13[12]];
          *(_OWORD *)&a1[v13[16]] = *(_OWORD *)&a2[v13[16]];
          *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
          goto LABEL_10;
        case 6u:
          v14 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
          v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&a1[v15[12]] = *(_OWORD *)&a2[v15[12]];
          *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
          *(_OWORD *)&a1[v15[20]] = *(_OWORD *)&a2[v15[20]];
          *(_OWORD *)&a1[v15[24]] = *(_OWORD *)&a2[v15[24]];
LABEL_10:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v16 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  v17 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.ModelParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE4F7BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_7_8();
  return __swift_getEnumTagSinglePayload(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.ModelParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE4F7F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_7_8();
  return __swift_storeEnumTagSinglePayload(v1, v0, v0, v2);
}

uint64_t type metadata completion function for MLHandActionClassifier.ModelParameters()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MLHandActionClassifier.ModelParameters.ModelAlgorithmType(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for MLHandActionClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21AE4F93C + 4 * byte_21AFE936A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21AE4F95C + 4 * byte_21AFE936F[v4]))();
}

_BYTE *sub_21AE4F93C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21AE4F95C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21AE4F964(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21AE4F96C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21AE4F974(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21AE4F97C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MLHandActionClassifier.ModelParameters.ModelAlgorithmType()
{
  return &type metadata for MLHandActionClassifier.ModelParameters.ModelAlgorithmType;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandActionClassifier.ModelParameters.ValidationData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      v7 = (char *)&loc_21AE4FA10 + 4 * byte_21AFE9374[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
        v4 = type metadata accessor for URL();
        v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
        v5(a1, v4);
        v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v5(a1 + *(int *)(v6 + 48), v4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 1:
      case 2:
        v3 = type metadata accessor for URL();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 4:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 5:
        v7 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 6:
        v8 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_10:
        result = swift_bridgeObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

void *initializeWithCopy for MLHandActionClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  char *v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    v6 = (char *)&loc_21AE50020 + 4 * byte_21AFE9382[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for MLHandActionClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  char *v6;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      v6 = (char *)&loc_21AE5040C + 4 * byte_21AFE9389[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for MLHandActionClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for MLHandActionClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for URL();
        v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
        v8(a1, a2, v7);
        v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v8(&a1[v9[12]], &a2[v9[12]], v7);
        *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
        *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
        *(_OWORD *)&a1[v9[24]] = *(_OWORD *)&a2[v9[24]];
        *(_OWORD *)&a1[v9[28]] = *(_OWORD *)&a2[v9[28]];
        goto LABEL_9;
      case 1u:
      case 2u:
        v10 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        goto LABEL_9;
      case 5u:
        v11 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
        *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
        *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
        goto LABEL_9;
      case 6u:
        v13 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
        *(_OWORD *)&a1[v14[16]] = *(_OWORD *)&a2[v14[16]];
        *(_OWORD *)&a1[v14[20]] = *(_OWORD *)&a2[v14[20]];
        *(_OWORD *)&a1[v14[24]] = *(_OWORD *)&a2[v14[24]];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for MLHandActionClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for MLHandActionClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v7 = type metadata accessor for URL();
          v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
          v8(a1, a2, v7);
          v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          v8(&a1[v9[12]], &a2[v9[12]], v7);
          *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
          *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
          *(_OWORD *)&a1[v9[24]] = *(_OWORD *)&a2[v9[24]];
          *(_OWORD *)&a1[v9[28]] = *(_OWORD *)&a2[v9[28]];
          goto LABEL_10;
        case 1u:
        case 2u:
          v10 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
          goto LABEL_10;
        case 5u:
          v11 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
          v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
          *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
          *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
          goto LABEL_10;
        case 6u:
          v13 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
          v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
          *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
          *(_OWORD *)&a1[v14[16]] = *(_OWORD *)&a2[v14[16]];
          *(_OWORD *)&a1[v14[20]] = *(_OWORD *)&a2[v14[20]];
          *(_OWORD *)&a1[v14[24]] = *(_OWORD *)&a2[v14[24]];
LABEL_10:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLHandActionClassifier.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLHandActionClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t outlined init with take of MLHandActionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void OUTLINED_FUNCTION_1_14()
{
  char v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v1, v0);
}

uint64_t OUTLINED_FUNCTION_3_11()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_4_13()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_5_13()
{
  return type metadata accessor for MLHandActionClassifier.ModelParameters(0);
}

uint64_t OUTLINED_FUNCTION_7_8()
{
  return type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
}

void OUTLINED_FUNCTION_8_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  Swift::String v12;

  v12._countAndFlagsBits = a11;
  v12._object = a12;
  String.append(_:)(v12);
}

uint64_t OUTLINED_FUNCTION_10_10()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = v1;
  *(_BYTE *)(v2 - 144) = v0;
  return MLDataTable.size.getter();
}

uint64_t MLSplitStrategy.dictionary.getter()
{
  uint64_t *v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  uint64_t v10;

  if ((*((_BYTE *)v0 + 17) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
    v2 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 32) = 1684957547;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    *(_QWORD *)(inited + 72) = v2;
    *(_QWORD *)(inited + 48) = 0x6974616D6F747561;
    *(_QWORD *)(inited + 56) = 0xE900000000000063;
    return Dictionary.init(dictionaryLiteral:)();
  }
  else
  {
    v4 = v0[1];
    v5 = *((_BYTE *)v0 + 16);
    v6 = *v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v7 = swift_initStackObject();
    *(_OWORD *)(v7 + 16) = xmmword_21AFE7F70;
    *(_QWORD *)(v7 + 32) = 1684957547;
    *(_QWORD *)(v7 + 40) = 0xE400000000000000;
    v8 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v7 + 48) = 0x6465786966;
    *(_QWORD *)(v7 + 56) = 0xE500000000000000;
    *(_QWORD *)(v7 + 72) = v8;
    *(_QWORD *)(v7 + 80) = 0x6F69746172;
    *(_QWORD *)(v7 + 88) = 0xE500000000000000;
    *(_QWORD *)(v7 + 120) = MEMORY[0x24BEE13C8];
    *(_QWORD *)(v7 + 96) = v6;
    result = Dictionary.init(dictionaryLiteral:)();
    v10 = result;
    if ((v5 & 1) == 0)
    {
      v9[3] = MEMORY[0x24BEE1768];
      v9[0] = v4;
      specialized Dictionary.subscript.setter((uint64_t)v9, 1684366707, 0xE400000000000000);
      return v10;
    }
  }
  return result;
}

uint64_t MLSplitStrategy.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  BOOL v6;
  uint64_t result;
  char v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_24;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(1684957547, 0xE400000000000000);
  if ((v5 & 1) == 0)
    goto LABEL_24;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v14);
  if ((OUTLINED_FUNCTION_0_16() & 1) == 0)
    goto LABEL_24;
  v6 = v12 == 0x6974616D6F747561 && v13 == 0xE900000000000063;
  if (v6 || (OUTLINED_FUNCTION_2_16() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    result = OUTLINED_FUNCTION_30();
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 16) = 256;
LABEL_10:
    *(_BYTE *)(a2 + 18) = 0;
    return result;
  }
  if (v12 == 0x6465786966 && v13 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_2_16();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
      goto LABEL_24;
  }
  specialized Dictionary.subscript.getter(0x6F69746172, 0xE500000000000000, a1, &v14);
  if (!v15)
  {
    OUTLINED_FUNCTION_30();
    result = outlined destroy of Any?((uint64_t)&v14);
    goto LABEL_25;
  }
  if ((OUTLINED_FUNCTION_0_16() & 1) != 0)
  {
    specialized Dictionary.subscript.getter(1684366707, 0xE400000000000000, a1, &v14);
    OUTLINED_FUNCTION_30();
    if (v15)
    {
      result = OUTLINED_FUNCTION_0_16();
      v10 = v12;
      if (!(_DWORD)result)
        v10 = 0;
      v11 = result ^ 1;
    }
    else
    {
      result = outlined destroy of Any?((uint64_t)&v14);
      v10 = 0;
      v11 = 1;
    }
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v10;
    *(_WORD *)(a2 + 16) = v11;
    goto LABEL_10;
  }
LABEL_24:
  result = OUTLINED_FUNCTION_30();
LABEL_25:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 18) = 1;
  return result;
}

Swift::tuple_ratio_Double_seed_Int __swiftcall MLSplitStrategy.resolve(count:)(Swift::Int count)
{
  uint64_t v1;
  double v2;
  Swift::Int v3;
  Swift::tuple_ratio_Double_seed_Int result;

  if ((*(_BYTE *)(v1 + 17) & 1) != 0)
  {
    if (count >= 50)
      v2 = dbl_21AFE9520[(unint64_t)count < 0xC8];
    else
      v2 = 0.0;
    v3 = 1;
  }
  else
  {
    v2 = *(double *)v1;
    if ((*(_BYTE *)(v1 + 16) & 1) != 0)
      v3 = 1;
    else
      v3 = *(_QWORD *)(v1 + 8);
  }
  result.ratio = v2;
  result.seed = v3;
  return result;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MLSplitStrategy(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MLSplitStrategy(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 18) = v3;
  return result;
}

uint64_t getEnumTag for MLSplitStrategy(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for MLSplitStrategy(uint64_t result, int a2)
{
  char v2;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  *(_BYTE *)(result + 17) = v2;
  return result;
}

ValueMetadata *type metadata accessor for MLSplitStrategy()
{
  return &type metadata for MLSplitStrategy;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_16()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_2_16()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t MLShapedArray<>.init(shape:nestedArray:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MLShapedArray<>.init(shape:nestedArray:)(a1, a2, &demangling cache variable for type metadata for [Any], a3);
}

{
  return MLShapedArray<>.init(shape:nestedArray:)(a1, a2, &demangling cache variable for type metadata for [Any?], a3);
}

uint64_t MLShapedArray<>.fillNested(partialIndex:partialShape:element:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  Swift::String v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[32];
  _OWORD v82[2];
  unint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  v11 = a1;
  if (a5 >> 1 == a4)
  {
    v12 = OUTLINED_FUNCTION_4_14(a1, a2, a3, a4, a5, a6, a7, a8, v75, v77, v79);
    if (v85)
    {
      if ((OUTLINED_FUNCTION_0_17() & 1) != 0)
      {
        v83 = *(_QWORD *)&v82[0];
        *(_QWORD *)&v82[0] = v11;
        OUTLINED_FUNCTION_195();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
        lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int], MEMORY[0x24BEE12E0]);
        return MLShapedArray.subscript.setter();
      }
    }
    else
    {
LABEL_23:
      OUTLINED_FUNCTION_6_11(v12, v13, v14, v15, v16, v17, v18, v19, v75, v77, v79);
    }
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v48 = 0xD000000000000035;
    *(_QWORD *)(v48 + 8) = 0x800000021AFF2EA0;
    goto LABEL_48;
  }
  if ((uint64_t)(a5 >> 1) <= a4)
    goto LABEL_59;
  v9 = a3;
  v86 = *(_QWORD *)(a3 + 8 * a4);
  v21 = OUTLINED_FUNCTION_4_14(a1, a2, a3, a4, a5, a6, a7, a8, v75, v77, v79);
  if (v85)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    v29 = OUTLINED_FUNCTION_0_17();
    if ((v29 & 1) != 0)
    {
      if (*(_QWORD *)(*(_QWORD *)&v82[0] + 16) == v86)
      {
        v86 = *(_QWORD *)&v82[0];
        swift_unknownObjectRetain();
        v37 = OUTLINED_FUNCTION_3_12();
        v77 = v38;
        v79 = v37;
        v75 = v39;
        v10 = v40;
        OUTLINED_FUNCTION_195();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          goto LABEL_60;
        while (1)
        {
          v42 = *(_QWORD *)(v11 + 16);
          v41 = *(_QWORD *)(v11 + 24);
          v43 = v86;
          if (v42 >= v41 >> 1)
          {
            OUTLINED_FUNCTION_2_17(v41 > 1, v42 + 1);
            v11 = v72;
            v43 = v86;
          }
          *(_QWORD *)(v11 + 16) = v42 + 1;
          *(_QWORD *)(v11 + 8 * v42 + 32) = 0;
          v44 = *(_QWORD *)(v43 + 16);
          if (!v44)
            break;
          v45 = 0;
          v46 = v43 + 32;
          while (v45 < *(_QWORD *)(v43 + 16))
          {
            v83 = v45;
            outlined init with copy of Any(v46, (uint64_t)&v84);
            outlined init with take of Any(&v84, v82);
            v12 = OUTLINED_FUNCTION_7_9();
            if ((v12 & 1) != 0)
            {
              if (!v9)
                goto LABEL_22;
            }
            else
            {
              specialized _ArrayBuffer._consumeAndCreateNew()();
              v11 = v12;
              if (!v9)
              {
LABEL_22:
                __break(1u);
                goto LABEL_23;
              }
            }
            if (v9 > *(_QWORD *)(v11 + 16))
              goto LABEL_56;
            *(_QWORD *)(v11 + 8 * (v9 - 1) + 32) = v45;
            outlined init with copy of Any((uint64_t)v82, (uint64_t)v81);
            v47 = OUTLINED_FUNCTION_195();
            MLShapedArray<>.fillNested(partialIndex:partialShape:element:)(v47, v79, v77, v75, v10, v81);
            if (v8)
            {
              swift_unknownObjectRelease();
              OUTLINED_FUNCTION_101();
              outlined destroy of Any?((uint64_t)v81);
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v82);
              OUTLINED_FUNCTION_101();
              return swift_bridgeObjectRelease();
            }
            ++v45;
            OUTLINED_FUNCTION_101();
            outlined destroy of Any?((uint64_t)v81);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v82);
            v46 += 32;
            v43 = v86;
            if (v44 == v45)
              goto LABEL_49;
          }
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          OUTLINED_FUNCTION_2_17(0, *(_QWORD *)(v11 + 16) + 1);
          v11 = v71;
        }
LABEL_49:
        OUTLINED_FUNCTION_101();
        swift_bridgeObjectRelease();
        return swift_unknownObjectRelease();
      }
      v29 = swift_bridgeObjectRelease();
    }
  }
  else
  {
    v29 = OUTLINED_FUNCTION_6_11(v21, v22, v23, v24, v25, v26, v27, v28, v76, v78, v80);
  }
  v49 = OUTLINED_FUNCTION_4_14(v29, v30, v31, v32, v33, v34, v35, v36, v76, v78, v80);
  if (!v85)
  {
LABEL_45:
    OUTLINED_FUNCTION_6_11(v49, v50, v51, v52, v53, v54, v55, v56, v75, v77, v79);
    goto LABEL_47;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
  if ((OUTLINED_FUNCTION_0_17() & 1) == 0)
  {
LABEL_47:
    v83 = 0;
    *(_QWORD *)&v84 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v83 = 0xD00000000000001DLL;
    *(_QWORD *)&v84 = 0x800000021AFF2E80;
    *(_QWORD *)&v82[0] = v86;
    v67._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v68._countAndFlagsBits = 0x746E656D656C6520;
    v68._object = (void *)0xEA00000000002E73;
    String.append(_:)(v68);
    v69 = v83;
    v70 = v84;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v48 = v69;
    *(_QWORD *)(v48 + 8) = v70;
LABEL_48:
    *(_OWORD *)(v48 + 16) = 0u;
    *(_OWORD *)(v48 + 32) = 0u;
    *(_BYTE *)(v48 + 48) = 0;
    return swift_willThrow(0.0);
  }
  v57 = *(_QWORD *)&v82[0];
  if (*(_QWORD *)(*(_QWORD *)&v82[0] + 16) != v86)
  {
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  swift_unknownObjectRetain();
  v86 = OUTLINED_FUNCTION_3_12();
  v77 = v59;
  v79 = v58;
  v75 = v60;
  OUTLINED_FUNCTION_195();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_2_17(0, *(_QWORD *)(v11 + 16) + 1);
    v11 = v73;
  }
  v62 = *(_QWORD *)(v11 + 16);
  v61 = *(_QWORD *)(v11 + 24);
  if (v62 >= v61 >> 1)
  {
    OUTLINED_FUNCTION_2_17(v61 > 1, v62 + 1);
    v11 = v74;
  }
  *(_QWORD *)(v11 + 16) = v62 + 1;
  *(_QWORD *)(v11 + 8 * v62 + 32) = 0;
  v63 = *(_QWORD *)(v57 + 16);
  if (!v63)
  {
LABEL_50:
    OUTLINED_FUNCTION_101();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  v64 = 0;
  v10 = v57;
  v65 = v57 + 32;
  while (1)
  {
    if (v64 >= *(_QWORD *)(v10 + 16))
      goto LABEL_57;
    v83 = v64;
    outlined init with copy of Any?(v65, (uint64_t)&v84);
    outlined init with take of Any?((uint64_t)&v84, (uint64_t)v82);
    v49 = OUTLINED_FUNCTION_7_9();
    if ((v49 & 1) != 0)
    {
      if (!v9)
        goto LABEL_44;
    }
    else
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v11 = v49;
      if (!v9)
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
    }
    if (v9 > *(_QWORD *)(v11 + 16))
      goto LABEL_58;
    *(_QWORD *)(v11 + 8 * (v9 - 1) + 32) = v64;
    v66 = OUTLINED_FUNCTION_195();
    MLShapedArray<>.fillNested(partialIndex:partialShape:element:)(v66, v86, v79, v77, v75, v82);
    if (v8)
      break;
    ++v64;
    outlined destroy of Any?((uint64_t)v82);
    OUTLINED_FUNCTION_101();
    v65 += 32;
    if (v63 == v64)
      goto LABEL_50;
  }
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_101();
  outlined destroy of Any?((uint64_t)v82);
  OUTLINED_FUNCTION_101();
  return swift_bridgeObjectRelease();
}

uint64_t MLShapedArray<>.init(shape:nestedArray:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>, MEMORY[0x24BDBFCD0]);
  swift_bridgeObjectRetain();
  MLShapedArrayProtocol.init(repeating:shape:)();
  v9 = specialized MutableCollection.subscript.getter(0, a1);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease();
  v20[3] = __swift_instantiateConcreteTypeFromMangledName(a3);
  v20[0] = a2;
  v16 = v20[5];
  MLShapedArray<>.fillNested(partialIndex:partialShape:element:)(MEMORY[0x24BEE4AF8], v9, v11, v13, v15, (uint64_t)v20, v17, v18);
  if (v16)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a4, v8);
  swift_unknownObjectRelease();
  return outlined destroy of Any?((uint64_t)v20);
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  char v10;
  uint64_t v11;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = a5 >> 1;
    result = specialized ArraySlice.index(_:offsetBy:limitedBy:)(a4, result, a5 >> 1);
    if ((v10 & 1) != 0)
      result = v9;
    if (v9 >= result)
    {
      v11 = specialized ArraySlice.subscript.getter(result, v9, a2, a3, a4, a5);
      swift_unknownObjectRelease();
      return v11;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2)
    goto LABEL_10;
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain();
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized ArraySlice.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_17()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_2_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_3_12()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return specialized Collection.dropFirst(_:)(1, v3, v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_4_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  return outlined init with copy of Any?(v11, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_6_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  return outlined destroy of Any?((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_7_9()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t NeuralNetwork.Layer.InnerProductParameters.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;

  v41 = a2;
  v36 = type metadata accessor for NeuralNetwork.WeightParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v42 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork.WeightParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v35 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v39 = v8;
  v37 = type metadata accessor for TensorShape();
  v9 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v35 - v13;
  v15 = type metadata accessor for Tensor();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v35 - v20;
  OUTLINED_FUNCTION_3_13();
  Tensor.shape.getter();
  v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  v38 = v21;
  v22(v21, v15);
  TensorShape.subscript.getter();
  v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24 = v14;
  v25 = v37;
  v23(v24, v37);
  OUTLINED_FUNCTION_3_13();
  Tensor.shape.getter();
  v40 = v22;
  v22(v18, v15);
  TensorShape.subscript.getter();
  v26 = v11;
  v27 = v39;
  v23(v26, v25);
  NeuralNetwork.Layer.InnerProductParameters.init(inputChannelCount:outputChannelCount:)();
  Dense.bias.getter();
  if (__swift_getEnumTagSinglePayload(v27, 1, v15) == 1)
  {
    outlined destroy of Tensor?(v27);
    NeuralNetwork.Layer.InnerProductParameters.hasBias.setter();
    v28 = v40;
  }
  else
  {
    OUTLINED_FUNCTION_2_18();
    v29 = v27;
    v30 = v40;
    v40((char *)v29, v15);
    NeuralNetwork.Layer.InnerProductParameters.hasBias.setter();
    v31 = v35;
    NeuralNetwork.WeightParameters.init(_:updatable:)();
    __swift_storeEnumTagSinglePayload(v31, 0, 1, v36);
    NeuralNetwork.Layer.InnerProductParameters.bias.setter();
    v28 = v30;
  }
  v32 = v38;
  OUTLINED_FUNCTION_3_13();
  OUTLINED_FUNCTION_2_18();
  v28(v32, v15);
  NeuralNetwork.WeightParameters.init(_:updatable:)();
  NeuralNetwork.Layer.InnerProductParameters.weights.setter();
  v33 = type metadata accessor for Dense();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a1, v33);
}

uint64_t outlined destroy of Tensor?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_2_18()
{
  return Tensor.scalars<A>(as:)();
}

uint64_t OUTLINED_FUNCTION_3_13()
{
  return Dense.weight.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for MLLogisticRegressionClassifier.PersistentParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DataFrame();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v9, 1, v7))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v7);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    v19 = *(uint64_t *)((char *)a2 + v15);
    *v16 = *v17;
    v16[1] = v18;
    *(uint64_t *)((char *)a1 + v15) = v19;
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    *(uint64_t *)((char *)a1 + v20) = *(uint64_t *)((char *)a2 + v20);
    v23 = (_OWORD *)((char *)a1 + v20 + 8);
    v24 = *((_QWORD *)v22 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v24)
    {
      *((_QWORD *)v21 + 4) = v24;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v24 - 8))((uint64_t)(v21 + 8), (uint64_t)(v22 + 8), v24);
    }
    else
    {
      v25 = *(_OWORD *)(v22 + 24);
      *v23 = *(_OWORD *)(v22 + 8);
      *(_OWORD *)(v21 + 24) = v25;
    }
    *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
    *(_OWORD *)(v21 + 56) = *(_OWORD *)(v22 + 56);
    v21[72] = v22[72];
  }
  return a1;
}

uint64_t destroy for MLLogisticRegressionClassifier.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = type metadata accessor for DataFrame();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v4))
    v5(v6, v4);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(a2 + 32);
  if (*(_QWORD *)(v8 + 32))
    return __swift_destroy_boxed_opaque_existential_0(v8 + 8);
  return result;
}

char *initializeWithCopy for MLLogisticRegressionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;

  v6 = type metadata accessor for DataFrame();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = &a1[v12];
  v15 = &a2[v12];
  v16 = *((_QWORD *)v15 + 1);
  v17 = *(_QWORD *)&a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  *(_QWORD *)&a1[v13] = v17;
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  v21 = &a1[v18 + 8];
  v22 = *((_QWORD *)v20 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v22)
  {
    *((_QWORD *)v19 + 4) = v22;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v22 - 8))((uint64_t)(v19 + 8), (uint64_t)(v20 + 8), v22);
  }
  else
  {
    v23 = *(_OWORD *)(v20 + 24);
    *(_OWORD *)v21 = *(_OWORD *)(v20 + 8);
    *(_OWORD *)(v19 + 24) = v23;
  }
  *(_OWORD *)(v19 + 40) = *(_OWORD *)(v20 + 40);
  *(_OWORD *)(v19 + 56) = *(_OWORD *)(v20 + 56);
  v19[72] = v20[72];
  return a1;
}

char *assignWithCopy for MLLogisticRegressionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v6 = type metadata accessor for DataFrame();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v9], 1, v6);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  v21 = (uint64_t)&a1[v18 + 8];
  v22 = *((_QWORD *)v20 + 4);
  if (!*(_QWORD *)&a1[v18 + 32])
  {
    if (v22)
    {
      *((_QWORD *)v19 + 4) = v22;
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(v21, (uint64_t)(v20 + 8));
      goto LABEL_14;
    }
LABEL_13:
    v23 = *(_OWORD *)(v20 + 24);
    *(_OWORD *)v21 = *(_OWORD *)(v20 + 8);
    *(_OWORD *)(v21 + 16) = v23;
    goto LABEL_14;
  }
  if (!v22)
  {
    __swift_destroy_boxed_opaque_existential_0(v21);
    goto LABEL_13;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v21, (uint64_t *)v20 + 1);
LABEL_14:
  *((_QWORD *)v19 + 5) = *((_QWORD *)v20 + 5);
  *((_QWORD *)v19 + 6) = *((_QWORD *)v20 + 6);
  *((_QWORD *)v19 + 7) = *((_QWORD *)v20 + 7);
  *((_QWORD *)v19 + 8) = *((_QWORD *)v20 + 8);
  v19[72] = v20[72];
  return a1;
}

char *initializeWithTake for MLLogisticRegressionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for DataFrame();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  memcpy(&a1[a3[8]], &a2[a3[8]], 0x49uLL);
  return a1;
}

char *assignWithTake for MLLogisticRegressionClassifier.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;

  v6 = type metadata accessor for DataFrame();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v9], 1, v6);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];
  v23 = &a1[v20 + 8];
  if (*(_QWORD *)&a1[v20 + 32])
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
  v24 = *(_OWORD *)(v22 + 24);
  *(_OWORD *)v23 = *(_OWORD *)(v22 + 8);
  *((_OWORD *)v23 + 1) = v24;
  *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
  *(_OWORD *)(v21 + 56) = *(_OWORD *)(v22 + 56);
  v21[72] = v22[72];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLogisticRegressionClassifier.PersistentParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE526E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v6 = OUTLINED_FUNCTION_21_3();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v9;
    v8 = v4 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  v11 = *(_QWORD *)(v4 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for MLLogisticRegressionClassifier.PersistentParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE5278C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = OUTLINED_FUNCTION_21_3();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
    return __swift_storeEnumTagSinglePayload(v10, v4, v4, v9);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = v5 + *(int *)(a4 + 20);
    return __swift_storeEnumTagSinglePayload(v10, v4, v4, v9);
  }
  *(_QWORD *)(v5 + *(int *)(a4 + 24) + 8) = (v4 - 1);
  return result;
}

uint64_t type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLLogisticRegressionClassifier.PersistentParameters;
  if (!type metadata singleton initialization cache for MLLogisticRegressionClassifier.PersistentParameters)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for MLLogisticRegressionClassifier.PersistentParameters()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for DataFrame();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DataFrame?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML30MLLogisticRegressionClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML30ijk13V20Persistentm48V16sessionDirectoryAE10Foundation3URLV_tKcfcAC05l5G0V14nd3O07c5N00N5E17VcAMmcfu_AmPcfu0_AOXMtTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v4 = type metadata accessor for DataFrame();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DataFrame?(a1, (uint64_t)v10);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {
    v11 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
    v12 = a2;
    v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
    v14 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 = a2;
    v13 = 0;
    v11 = v14;
  }
  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v11);
}

uint64_t MLLogisticRegressionClassifier.PersistentParameters.init(sessionDirectory:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  Class isa;
  id v54;
  id v55;
  char v56;
  char *v57;
  void (*v58)(uint64_t, uint64_t);
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *boxed_opaque_existential_0;
  char *v78;
  void *v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, _QWORD, _QWORD);
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  char v125[8];
  uint64_t v126;

  v120 = a1;
  v126 = *MEMORY[0x24BDAC8D0];
  v108 = type metadata accessor for CSVType();
  v107 = *(_QWORD *)(v108 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v4);
  type metadata accessor for CSVReadingOptions();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_211();
  v105 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.ModelParameters.ValidationData?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v113 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v12);
  v13 = type metadata accessor for DataFrame();
  v106 = *(_QWORD *)(v13 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v16);
  v115 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v20);
  v21 = type metadata accessor for URL();
  v117 = *(_QWORD *)(v21 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v93 - v25;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v93 - v28;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v93 - v31;
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v93 - v34;
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v93 - v37;
  v39 = type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  v40 = *(int *)(v39 + 20);
  v119 = a2;
  v116 = a2 + v40;
  v111 = v13;
  __swift_storeEnumTagSinglePayload(a2 + v40, 1, 1, v13);
  v41 = v120;
  URL.appendingPathComponent(_:)();
  v42 = v118;
  v43 = Data.init(contentsOf:options:)();
  v118 = v42;
  if (v42)
  {
    v45 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
    v45((uint64_t)v41, v21);
    v45((uint64_t)v38, v21);
    v46 = v116;
    return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v46, &demangling cache variable for type metadata for DataFrame?);
  }
  v97 = v29;
  v96 = v26;
  v98 = v32;
  v99 = v35;
  v104 = v39;
  v47 = v117;
  v48 = *(void (**)(char *, uint64_t))(v117 + 8);
  v49 = v43;
  v50 = v44;
  v48(v38, v21);
  v51 = (void *)objc_opt_self();
  v52 = v21;
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v123 = 0;
  v54 = objc_msgSend(v51, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v123);

  v55 = (id)v123;
  if (!v54)
  {
    v79 = v55;
    _convertNSErrorToError(_:)();

    swift_willThrow(v80);
    outlined consume of Data._Representation(v49, v50);
    v48(v120, v52);
LABEL_24:
    v46 = v116;
    OUTLINED_FUNCTION_28_8();
    return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v46, &demangling cache variable for type metadata for DataFrame?);
  }
  v100 = v49;
  v101 = v50;
  v103 = (void (*)(uint64_t, uint64_t))v48;
  v102 = v52;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v125, (uint64_t)&v123);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v56 = OUTLINED_FUNCTION_0_18();
  v57 = v120;
  if ((v56 & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_18_0(v81, 0xD000000000000037);
    OUTLINED_FUNCTION_3_14();
    v103((uint64_t)v57, v102);
    OUTLINED_FUNCTION_19_4();
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_9_10(0x746567726174, 0xE600000000000000, &v123);
  v58 = v103;
  if (!v124)
  {
    v82 = OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_27_11(v82, &demangling cache variable for type metadata for Any?);
    v46 = v116;
LABEL_26:
    OUTLINED_FUNCTION_28_8();
LABEL_33:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_18_0(v84, 0xD000000000000034);
    OUTLINED_FUNCTION_3_14();
    v58((uint64_t)v57, v102);
    OUTLINED_FUNCTION_19_4();
    return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v46, &demangling cache variable for type metadata for DataFrame?);
  }
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_28_8();
  if ((v59 & 1) == 0)
  {
    OUTLINED_FUNCTION_106_0();
    v46 = v116;
    goto LABEL_33;
  }
  v60 = v121;
  v61 = v122;
  OUTLINED_FUNCTION_9_10(0xD000000000000010, 0x800000021AFF2390, &v123);
  if (!v124)
    goto LABEL_29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
  {
LABEL_31:
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_106_0();
    goto LABEL_32;
  }
  v94 = v60;
  v62 = v121;
  OUTLINED_FUNCTION_9_10(0x617265744978616DLL, 0xED0000736E6F6974, &v123);
  if (!v124)
  {
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    OUTLINED_FUNCTION_60_0();
    v83 = OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_27_11(v83, &demangling cache variable for type metadata for Any?);
LABEL_32:
    v46 = v116;
    v58 = v103;
    goto LABEL_33;
  }
  v95 = v62;
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
  {
LABEL_30:
    OUTLINED_FUNCTION_5_14();
    goto LABEL_31;
  }
  v63 = v121;
  OUTLINED_FUNCTION_9_10(0x746C616E6550316CLL, 0xE900000000000079, &v123);
  if (!v124)
    goto LABEL_35;
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
  {
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_106_0();
    goto LABEL_37;
  }
  v64 = v121;
  OUTLINED_FUNCTION_9_10(0x746C616E6550326CLL, 0xE900000000000079, &v123);
  if (!v124)
  {
LABEL_35:
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_60_0();
    v86 = OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_27_11(v86, &demangling cache variable for type metadata for Any?);
LABEL_37:
    v57 = v120;
    goto LABEL_32;
  }
  v65 = OUTLINED_FUNCTION_0_18();
  v57 = v120;
  if ((v65 & 1) == 0)
    goto LABEL_30;
  v66 = v121;
  OUTLINED_FUNCTION_9_10(0x657A695370657473, 0xE800000000000000, &v123);
  if (!v124)
    goto LABEL_28;
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
    goto LABEL_30;
  v93 = v63;
  v67 = v121;
  OUTLINED_FUNCTION_9_10(0xD000000000000014, 0x800000021AFF2EE0, &v123);
  if (!v124)
    goto LABEL_28;
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
  {
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_60_0();
LABEL_42:
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  v68 = v121;
  OUTLINED_FUNCTION_9_10(0xD000000000000010, 0x800000021AFF2F00, &v123);
  OUTLINED_FUNCTION_106_0();
  if (!v124)
  {
    OUTLINED_FUNCTION_5_14();
    v87 = OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_27_11(v87, &demangling cache variable for type metadata for Any?);
LABEL_43:
    v57 = v120;
    v46 = v116;
    v58 = v103;
    goto LABEL_26;
  }
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
  {
    OUTLINED_FUNCTION_5_14();
    goto LABEL_42;
  }
  v69 = v121;
  v70 = v104;
  v71 = v119;
  v72 = (_QWORD *)(v119 + *(int *)(v104 + 24));
  *v72 = v94;
  v72[1] = v61;
  *(_QWORD *)(v71 + *(int *)(v70 + 28)) = v95;
  v73 = (uint64_t)v110;
  *v110 = 0;
  *(_QWORD *)(v73 + 8) = 0;
  *(_WORD *)(v73 + 16) = 256;
  v74 = v115;
  swift_storeEnumTagMultiPayload();
  v75 = v71 + *(int *)(v70 + 32);
  *(_OWORD *)(v75 + 8) = 0u;
  *(_OWORD *)(v75 + 24) = 0u;
  *(_QWORD *)v75 = 10;
  *(_OWORD *)(v75 + 40) = xmmword_21AFE9550;
  *(_OWORD *)(v75 + 56) = xmmword_21AFE9560;
  *(_BYTE *)(v75 + 72) = 1;
  v76 = v109;
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v73, v109);
  v124 = v74;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v123);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v76, (uint64_t)boxed_opaque_existential_0);
  v109 = v75 + 8;
  outlined assign with take of Any?((uint64_t)&v123, v75 + 8, &demangling cache variable for type metadata for Any?);
  outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v73);
  *(_QWORD *)v75 = v93;
  *(_QWORD *)(v75 + 40) = v64;
  *(_QWORD *)(v75 + 48) = v66;
  *(_QWORD *)(v75 + 56) = v67;
  *(_QWORD *)(v75 + 64) = v68;
  *(_BYTE *)(v75 + 72) = v69;
  v78 = v99;
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_6_12();
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v97, v78, v102);
  OUTLINED_FUNCTION_16_11();
  v118 = 0;
  v88 = OUTLINED_FUNCTION_32_6();
  OUTLINED_FUNCTION_24_5(v88, v89);
  OUTLINED_FUNCTION_10_11((uint64_t)v96, (uint64_t)&v122);
  OUTLINED_FUNCTION_16_11();
  OUTLINED_FUNCTION_23_6(v114, 0);
  v90 = v116;
  outlined assign with take of Any?(v114, v116, &demangling cache variable for type metadata for DataFrame?);
  v91 = v113;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML30MLLogisticRegressionClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML30ijk13V20Persistentm48V16sessionDirectoryAE10Foundation3URLV_tKcfcAC05l5G0V14nd3O07c5N00N5E17VcAMmcfu_AmPcfu0_AOXMtTf1ncn_n(v90, v113);
  if (__swift_getEnumTagSinglePayload(v91, 1, v115) == 1)
  {
    swift_storeEnumTagMultiPayload();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v113, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.ModelParameters.ValidationData?);
  }
  else
  {
    outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v113, v112);
  }
  v124 = v115;
  v92 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v123);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v112, (uint64_t)v92);
  outlined assign with take of Any?((uint64_t)&v123, v109, &demangling cache variable for type metadata for Any?);
  OUTLINED_FUNCTION_3_14();
  OUTLINED_FUNCTION_13_14();
  OUTLINED_FUNCTION_14_9((uint64_t)&v122);
  OUTLINED_FUNCTION_14_9((uint64_t)&v123);
  return OUTLINED_FUNCTION_19_4();
}

uint64_t outlined destroy of MLLogisticRegressionClassifier.ModelParameters(uint64_t a1)
{
  destroy for MLLogisticRegressionClassifier.ModelParameters(a1);
  return a1;
}

uint64_t MLLogisticRegressionClassifier.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  Class isa;
  id v27;
  id v28;
  void (*v29)(_QWORD);
  uint64_t v30;
  void (*v31)(uint64_t);
  void *v33;
  double v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  uint64_t v53;
  uint64_t v54;
  id v55[55];

  v53 = a1;
  v2 = v1;
  v55[53] = *(id *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v46 = v4;
  v5 = type metadata accessor for CSVWritingOptions();
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  v45 = v7;
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_211();
  v48 = v9;
  v54 = type metadata accessor for URL();
  v51 = *(_QWORD *)(v54 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  v44 = v11;
  MEMORY[0x24BDAC7A8](v12);
  v47 = (char *)&v44 - v13;
  MEMORY[0x24BDAC7A8](v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F60;
  *(_QWORD *)(inited + 32) = 0x746567726174;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v16 = (int *)type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  v17 = (_QWORD *)(v2 + v16[6]);
  v18 = v17[1];
  v19 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = *v17;
  *(_QWORD *)(inited + 56) = v18;
  *(_QWORD *)(inited + 72) = v19;
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x800000021AFF2390;
  v20 = *(_QWORD *)(v2 + v16[7]);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(_QWORD *)(inited + 96) = v20;
  *(_QWORD *)(inited + 120) = v21;
  strcpy((char *)(inited + 128), "maxIterations");
  *(_WORD *)(inited + 142) = -4864;
  v22 = v2 + v16[8];
  v23 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 144) = *(_QWORD *)v22;
  *(_QWORD *)(inited + 168) = v23;
  *(_QWORD *)(inited + 176) = 0x746C616E6550316CLL;
  *(_QWORD *)(inited + 184) = 0xE900000000000079;
  v24 = MEMORY[0x24BEE13C8];
  *(_QWORD *)(inited + 192) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(inited + 216) = v24;
  *(_QWORD *)(inited + 224) = 0x746C616E6550326CLL;
  *(_QWORD *)(inited + 232) = 0xE900000000000079;
  *(_QWORD *)(inited + 240) = *(_QWORD *)(v22 + 48);
  *(_QWORD *)(inited + 264) = v24;
  *(_QWORD *)(inited + 272) = 0x657A695370657473;
  *(_QWORD *)(inited + 280) = 0xE800000000000000;
  *(_QWORD *)(inited + 288) = *(_QWORD *)(v22 + 56);
  *(_QWORD *)(inited + 312) = v24;
  *(_QWORD *)(inited + 320) = 0xD000000000000014;
  *(_QWORD *)(inited + 328) = 0x800000021AFF2EE0;
  *(_QWORD *)(inited + 336) = *(_QWORD *)(v22 + 64);
  *(_QWORD *)(inited + 360) = v24;
  *(_QWORD *)(inited + 368) = 0xD000000000000010;
  *(_QWORD *)(inited + 376) = 0x800000021AFF2F00;
  LOBYTE(v22) = *(_BYTE *)(v22 + 72);
  *(_QWORD *)(inited + 408) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 384) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_10();
  Dictionary.init(dictionaryLiteral:)();
  v25 = (void *)objc_opt_self();
  OUTLINED_FUNCTION_31_10();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v55[0] = 0;
  v27 = objc_msgSend(v25, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, v55, v44, v45, v46);

  v28 = v55[0];
  if (v27)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    URL.appendingPathComponent(_:)();
    v29 = v52;
    Data.write(to:options:)();
    if (v29)
    {
      v30 = OUTLINED_FUNCTION_29_7();
      v31(v30);
      return OUTLINED_FUNCTION_9_4();
    }
    else
    {
      v35 = OUTLINED_FUNCTION_29_7();
      v52 = v36;
      v36(v35);
      URL.appendingPathComponent(_:)();
      OUTLINED_FUNCTION_8_5();
      v37 = v48;
      OUTLINED_FUNCTION_2_19();
      v51 = type metadata accessor for DataFrame();
      DataFrameProtocol.writeCSV(to:options:)();
      v49 = *(_QWORD *)(v49 + 8);
      ((void (*)(uint64_t, uint64_t))v49)(v37, v50);
      v38 = OUTLINED_FUNCTION_29_7();
      v39 = (void (*)(uint64_t, uint64_t))v52;
      v52(v38);
      v40 = v2 + v16[5];
      v41 = v46;
      outlined init with copy of DataFrame?(v40, v46);
      if (__swift_getEnumTagSinglePayload(v41, 1, v51) == 1)
      {
        OUTLINED_FUNCTION_9_4();
        return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v41, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        v42 = v44;
        OUTLINED_FUNCTION_6_12();
        OUTLINED_FUNCTION_8_5();
        v43 = v45;
        OUTLINED_FUNCTION_2_19();
        DataFrameProtocol.writeCSV(to:options:)();
        OUTLINED_FUNCTION_9_4();
        ((void (*)(uint64_t, uint64_t))v49)(v43, v50);
        v39(v42, v54);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v41);
      }
    }
  }
  else
  {
    v33 = v28;
    _convertNSErrorToError(_:)();

    return swift_willThrow(v34);
  }
}

uint64_t outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of DataFrame?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_18()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_2_19()
{
  return CSVWritingOptions.init(includesHeader:dateFormat:nilEncoding:trueEncoding:falseEncoding:newline:delimiter:)();
}

uint64_t OUTLINED_FUNCTION_3_14()
{
  uint64_t v0;

  return outlined consume of Data._Representation(*(_QWORD *)(v0 - 440), *(_QWORD *)(v0 - 432));
}

uint64_t OUTLINED_FUNCTION_5_14()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_6_12()
{
  return URL.appendingPathComponent(_:)();
}

void OUTLINED_FUNCTION_9_10(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  specialized Dictionary.subscript.getter(a1, a2, v3, a3);
}

uint64_t OUTLINED_FUNCTION_10_11@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, _QWORD, _QWORD);
  uint64_t v3;

  return v2(a1, *(_QWORD *)(a2 - 256), *(_QWORD *)(v3 - 424));
}

uint64_t OUTLINED_FUNCTION_13_14()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 - 416))(*(_QWORD *)(v0 - 224), *(_QWORD *)(v0 - 424));
}

uint64_t OUTLINED_FUNCTION_14_9@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t);

  return v2(*(_QWORD *)(a1 - 256), v1);
}

uint64_t OUTLINED_FUNCTION_16_11()
{
  return DataFrame.init(contentsOfSFrameDirectory:columns:rows:)();
}

uint64_t OUTLINED_FUNCTION_23_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, *(_QWORD *)(v2 - 304));
}

uint64_t OUTLINED_FUNCTION_24_5@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, _QWORD)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, *(_QWORD *)(v2 - 256), *(_QWORD *)(v3 - 304));
}

uint64_t OUTLINED_FUNCTION_26_8()
{
  return CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
}

uint64_t OUTLINED_FUNCTION_27_11(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v2 - 192, a2);
}

uint64_t OUTLINED_FUNCTION_29_7()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_31_10()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_32_6()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 232);
}

void *static NLLanguageRecognizer.dominantLanguage(for:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  v3 = (void **)MEMORY[0x24BDDFC18];
  if (v1)
  {
    v23 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v23;
    v5 = (void *)objc_opt_self();
    v6 = *v3;
    v7 = (uint64_t *)(a1 + 40);
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      swift_bridgeObjectRetain();
      v10 = (void *)MEMORY[0x22075A8AC](v8, v9);
      v11 = objc_msgSend(v5, sel_dominantLanguageForString_, v10);

      if (!v11)
        v11 = v6;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v23 + 16);
      v12 = *(_QWORD *)(v23 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
      v7 += 2;
      *(_QWORD *)(v23 + 16) = v13 + 1;
      *(_QWORD *)(v23 + 8 * v13 + 32) = v11;
      --v1;
    }
    while (v1);
  }
  v14 = (void *)specialized Collection<>.mostFrequent()(v2);
  swift_bridgeObjectRelease();
  if (v14)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;
    if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
        return v14;
    }
  }
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_18_0(v21, 0xD00000000000001ELL);

  return v14;
}

uint64_t specialized Collection<>.mostFrequent()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  uint64_t v9;
  _BOOL8 v10;
  Swift::Int v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  type metadata accessor for NLLanguage(0);
  lazy protocol witness table accessor for type NLLanguage and conformance NLLanguage();
  v2 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    while (1)
    {
      v5 = *(id *)(a1 + 8 * v4 + 32);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v7 = specialized __RawDictionaryStorage.find<A>(_:)();
      v9 = v2[2];
      v10 = (v8 & 1) == 0;
      v11 = v9 + v10;
      if (__OFADD__(v9, v10))
        break;
      v12 = v7;
      v13 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<NLLanguage, Int>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11))
      {
        v14 = specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v13 & 1) != (v15 & 1))
          goto LABEL_17;
        v12 = v14;
      }
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
        v2[(v12 >> 6) + 8] |= 1 << v12;
        *(_QWORD *)(v2[6] + 8 * v12) = v5;
        *(_QWORD *)(v2[7] + 8 * v12) = 0;
        v16 = v2[2];
        v17 = __OFADD__(v16, 1);
        v18 = v16 + 1;
        if (v17)
          goto LABEL_16;
        v2[2] = v18;
        v19 = v5;
      }
      v20 = v2[7];
      v21 = *(_QWORD *)(v20 + 8 * v12);
      v17 = __OFADD__(v21, 1);
      v22 = v21 + 1;
      if (v17)
        goto LABEL_15;
      ++v4;
      *(_QWORD *)(v20 + 8 * v12) = v22;

      if (v3 == v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_13:
    specialized Sequence.max(by:)((uint64_t)v2);
    v24 = v23;
    swift_bridgeObjectRelease();
    return v24;
  }
  return result;
}

id static NLEmbedding.requestIfNotPresent(embeddingType:language:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id result;
  void *v6;
  uint64_t v7;
  _QWORD v8[6];

  v4 = (void *)objc_opt_self();
  result = objc_msgSend(v4, sel_assetsAvailableForEmbeddingType_language_, a1, a2);
  if (!(_DWORD)result)
  {
    v8[4] = MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
    v8[5] = 0;
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 1107296256;
    v8[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed Error?) -> ();
    v8[3] = &block_descriptor_0;
    v6 = _Block_copy(v8);
    objc_msgSend(v4, sel_requestAssetsForEmbeddingType_language_withCompletionHandler_, a1, a2, v6);
    _Block_release(v6);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    return (id)OUTLINED_FUNCTION_18_0(v7, 0xD000000000000080);
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void specialized Sequence.max(by:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;

  specialized _NativeDictionary.makeIterator()(&v21, a1);
  v1 = v22;
  if (!v25)
  {
    v18 = v24 + 1;
    if (__OFADD__(v24, 1))
      goto LABEL_43;
    v4 = (unint64_t)(v23 + 64) >> 6;
    if (v18 < v4)
    {
      v19 = *(_QWORD *)(v22 + 8 * v18);
      v5 = v24 + 1;
      if (v19)
      {
LABEL_28:
        v2 = (v19 - 1) & v19;
        v3 = __clz(__rbit64(v19)) + (v5 << 6);
        goto LABEL_3;
      }
      v5 = v24 + 2;
      if (v24 + 2 < v4)
      {
        v19 = *(_QWORD *)(v22 + 8 * v5);
        if (v19)
          goto LABEL_28;
        v5 = v24 + 3;
        if (v24 + 3 < v4)
        {
          v19 = *(_QWORD *)(v22 + 8 * v5);
          if (v19)
            goto LABEL_28;
          v5 = v24 + 4;
          if (v24 + 4 < v4)
          {
            v19 = *(_QWORD *)(v22 + 8 * v5);
            if (v19)
              goto LABEL_28;
            v5 = v24 + 5;
            if (v24 + 5 < v4)
            {
              v19 = *(_QWORD *)(v22 + 8 * v5);
              if (!v19)
              {
                v20 = v24 + 6;
                do
                {
                  if (v20 >= v4)
                    goto LABEL_41;
                  v19 = *(_QWORD *)(v22 + 8 * v20++);
                }
                while (!v19);
                v5 = v20 - 1;
              }
              goto LABEL_28;
            }
          }
        }
      }
    }
LABEL_41:
    swift_bridgeObjectRetain();
    outlined release of _NativeDictionary<NLLanguage, Int>.Iterator((uint64_t)&v21);
    return;
  }
  v2 = (v25 - 1) & v25;
  v3 = __clz(__rbit64(v25)) | (v24 << 6);
  v4 = (unint64_t)(v23 + 64) >> 6;
  v5 = v24;
LABEL_3:
  v6 = v21;
  v7 = *(void **)(*(_QWORD *)(v21 + 48) + 8 * v3);
  v8 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v3);
  swift_bridgeObjectRetain();
  v9 = v7;
  while (1)
  {
    if (v2)
    {
      v10 = __clz(__rbit64(v2));
      v2 &= v2 - 1;
      v11 = v10 | (v5 << 6);
      goto LABEL_22;
    }
    v12 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v12 >= v4)
      goto LABEL_24;
    v13 = *(_QWORD *)(v1 + 8 * v12);
    v14 = v5 + 1;
    if (!v13)
    {
      v14 = v5 + 2;
      if (v5 + 2 >= v4)
        goto LABEL_24;
      v13 = *(_QWORD *)(v1 + 8 * v14);
      if (!v13)
      {
        v14 = v5 + 3;
        if (v5 + 3 >= v4)
          goto LABEL_24;
        v13 = *(_QWORD *)(v1 + 8 * v14);
        if (!v13)
        {
          v14 = v5 + 4;
          if (v5 + 4 >= v4)
            goto LABEL_24;
          v13 = *(_QWORD *)(v1 + 8 * v14);
          if (!v13)
          {
            v14 = v5 + 5;
            if (v5 + 5 >= v4)
              goto LABEL_24;
            v13 = *(_QWORD *)(v1 + 8 * v14);
            if (!v13)
            {
              v15 = v5 + 6;
              while (v15 < v4)
              {
                v13 = *(_QWORD *)(v1 + 8 * v15++);
                if (v13)
                {
                  v14 = v15 - 1;
                  goto LABEL_21;
                }
              }
LABEL_24:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_21:
    v2 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v5 = v14;
LABEL_22:
    v16 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    if (v8 < v16)
    {
      v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v11);

      v9 = v17;
      v8 = v16;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type NLLanguage and conformance NLLanguage()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage;
  if (!lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage)
  {
    type metadata accessor for NLLanguage(255);
    result = MEMORY[0x22075B938](&protocol conformance descriptor for NLLanguage, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage);
  }
  return result;
}

uint64_t outlined release of _NativeDictionary<NLLanguage, Int>.Iterator(uint64_t a1)
{
  swift_release();
  return a1;
}

id specialized binaryDo<A, B, C>(_:_:_:)(id a1, char a2, id a3, char a4, uint64_t a5, uint64_t *a6)
{
  id v7;
  id v10;
  id v11;
  id v13;
  id v14;
  uint64_t v15;

  v7 = a1;
  if ((a2 & 1) != 0)
  {
    v10 = a1;
    OUTLINED_FUNCTION_30();
  }
  else if ((a4 & 1) != 0)
  {
    v11 = a3;
    OUTLINED_FUNCTION_30();
    return a3;
  }
  else
  {
    v13 = a3;
    v14 = a1;
    outlined copy of Result<_DataTable, Error>(a3, 0);
    outlined copy of Result<_DataTable, Error>(v7, 0);
    closure #1 in MLDataTable.join(with:on:type:)((uint64_t *)&v14, (uint64_t *)&v13, a5, a6, &v15);
    outlined consume of Result<_DataTable, Error>(a3, 0);
    outlined consume of Result<_DataTable, Error>(v7, 0);
    OUTLINED_FUNCTION_30();
    return (id)v15;
  }
  return v7;
}

void MLDataTable.init(contentsOf:options:)(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE __dst[144];
  uint64_t v108;
  Swift::String v109;
  Swift::String v110;

  v101 = a3;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v100 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v99 = (char *)&v97 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v102 = (char *)&v97 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UTType();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v108 = (uint64_t)&v97 - v21;
  memcpy(__dst, a2, sizeof(__dst));
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    OUTLINED_FUNCTION_20_8();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v35 = OUTLINED_FUNCTION_49_0();
    *v36 = 0xD00000000000002ALL;
    v36[1] = 0x800000021AFF2FF0;
    OUTLINED_FUNCTION_1_4(v35, (uint64_t)v36);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    return;
  }
  v97 = v7;
  v98 = v6;
  URL.pathExtension.getter();
  static UTType.data.getter();
  UTType.init(filenameExtension:conformingTo:)();
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16) != 1)
  {
    v37 = v16;
    v38 = v108;
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v108, v15, v16);
    static UTType.commaSeparatedText.getter();
    v39 = OUTLINED_FUNCTION_28_9();
    v40 = *(void (**)(char *, uint64_t))(v17 + 8);
    OUTLINED_FUNCTION_27_12((uint64_t)v20);
    if ((v39 & 1) != 0)
    {
      OUTLINED_FUNCTION_9_11();
      URL.path.getter();
      OUTLINED_FUNCTION_7_10();
      MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(&v105);
      OUTLINED_FUNCTION_10_12();
      v41 = OUTLINED_FUNCTION_24_6();
      v45 = OUTLINED_FUNCTION_22_5(v41, v42, v43, v44);
      if (v3)
        goto LABEL_31;
    }
    else
    {
      static UTType.plainText.getter();
      v63 = OUTLINED_FUNCTION_28_9();
      OUTLINED_FUNCTION_27_12((uint64_t)v20);
      v64 = v37;
      v65 = a1;
      if ((v63 & 1) != 0)
      {
        OUTLINED_FUNCTION_9_11();
        OUTLINED_FUNCTION_25_6();
        OUTLINED_FUNCTION_7_10();
        MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(&v105);
        OUTLINED_FUNCTION_10_12();
        v66 = OUTLINED_FUNCTION_24_6();
      }
      else
      {
        v77 = v38;
        OUTLINED_FUNCTION_20_8();
        static UTType.json.getter();
        v78 = OUTLINED_FUNCTION_28_9();
        v40(v20, v64);
        if ((v78 & 1) == 0)
        {
          OUTLINED_FUNCTION_13_15();
          OUTLINED_FUNCTION_0_19();
          v110._countAndFlagsBits = URL.pathExtension.getter();
          OUTLINED_FUNCTION_21_7(v110);
          OUTLINED_FUNCTION_101();
          OUTLINED_FUNCTION_6_13((uint64_t)"' must be a file of type CSV or JSON or a path to a folder containing a DataTa"
                                          "ble binary representation.");
          v87 = v105;
          v86 = v106;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
          v88 = OUTLINED_FUNCTION_9_1();
          *(_OWORD *)(v88 + 16) = xmmword_21AFE7DA0;
          *(_QWORD *)(v88 + 56) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v88 + 32) = v87;
          *(_QWORD *)(v88 + 40) = v86;
          OUTLINED_FUNCTION_52_1();
          OUTLINED_FUNCTION_8_13();
          OUTLINED_FUNCTION_101();
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          v89 = OUTLINED_FUNCTION_49_0();
          *v90 = v87;
          v90[1] = v86;
          OUTLINED_FUNCTION_1_4(v89, (uint64_t)v90);
          (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v65, v98);
          v82 = v77;
          v83 = v64;
          goto LABEL_32;
        }
        v37 = v64;
        OUTLINED_FUNCTION_9_11();
        v79 = OUTLINED_FUNCTION_25_6();
        v81 = v80;
        _s8CreateML11MLDataTableV14ParsingOptionsVSgWOi0_(&v105);
        OUTLINED_FUNCTION_10_12();
        v69 = &v104;
        v66 = v79;
        v67 = v81;
        v68 = 0;
      }
      v45 = OUTLINED_FUNCTION_22_5(v66, v67, v68, (uint64_t)v69);
      if (v3)
      {
LABEL_31:
        (*(void (**)(uint64_t, uint64_t))(v97 + 8))(a1, v98);
        v82 = v108;
        v83 = v37;
LABEL_32:
        v40((char *)v82, v83);
        return;
      }
    }
    v85 = v45;
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(a1, v98);
    OUTLINED_FUNCTION_27_12(v108);
LABEL_43:
    v93 = v101;
    type metadata accessor for _DataTable();
    OUTLINED_FUNCTION_9_1();
    *(_QWORD *)v93 = _DataTable.init(impl:)(v85);
    *(_BYTE *)(v93 + 8) = 0;
    return;
  }
  OUTLINED_FUNCTION_20_8();
  outlined destroy of UTType?((uint64_t)v15);
  v22 = (uint64_t)v102;
  OUTLINED_FUNCTION_3_15();
  v23 = URL.hasDirectoryPath.getter();
  v24 = v97;
  v25 = v98;
  OUTLINED_FUNCTION_4_15(v22);
  if ((v23 & 1) == 0)
  {
    v46 = URL.hasDirectoryPath.getter();
    v47 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    v48 = (uint64_t)v100;
    v108 = a1;
    v47(v100, a1, v25);
    if ((v46 & 1) != 0)
    {
      v49 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      URL.appendingPathComponent(_:)();
      v50 = URL.path.getter();
      v52 = v51;
      OUTLINED_FUNCTION_4_15(v22);
      v53 = (void *)MEMORY[0x22075A8AC](v50, v52);
      swift_bridgeObjectRelease();
      LOBYTE(v52) = objc_msgSend(v49, sel_fileExistsAtPath_, v53);

      OUTLINED_FUNCTION_4_15(v48);
      if ((v52 & 1) != 0)
      {
        v54 = v108;
        v55 = URL.path.getter();
        v57 = v56;
        if ((v56 & 0x1000000000000000) != 0 || !(v56 & 0x2000000000000000 | v55 & 0x1000000000000000))
        {
          v96 = v103;
          _StringGuts._slowWithCString<A>(_:)();
          if (v96)
          {
            swift_bridgeObjectRelease();
            v54 = v108;
            goto LABEL_46;
          }
          swift_bridgeObjectRelease();
          v54 = v108;
        }
        else
        {
          MEMORY[0x24BDAC7A8](v55);
          *(&v97 - 2) = (uint64_t)closure #1 in CMLTable.init(from:);
          *(&v97 - 1) = 0;
          if ((v57 & 0x2000000000000000) != 0)
          {
            v105 = v58;
            v106 = v57 & 0xFFFFFFFFFFFFFFLL;
            OUTLINED_FUNCTION_26_9();
            if (v3)
            {
LABEL_45:
              OUTLINED_FUNCTION_104();
LABEL_46:
              v76 = v54;
              goto LABEL_47;
            }
            if (!v62)
              goto LABEL_60;
          }
          else
          {
            if ((v58 & 0x1000000000000000) != 0)
            {
              v59 = (v57 & 0xFFFFFFFFFFFFFFFLL) + 32;
              v60 = v58 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v59 = _StringObject.sharedUTF8.getter();
            }
            v61 = v103;
            v62 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v59, v60, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
            if (v61)
              goto LABEL_45;
          }
          v104 = v62;
          OUTLINED_FUNCTION_104();
        }
        v94 = v104;
        OUTLINED_FUNCTION_9_11();
        v85 = OUTLINED_FUNCTION_9_1();
        *(_QWORD *)(v85 + 16) = v94;
        v92 = v54;
        goto LABEL_42;
      }
    }
    else
    {
      OUTLINED_FUNCTION_4_15(v48);
    }
    OUTLINED_FUNCTION_13_15();
    OUTLINED_FUNCTION_0_19();
    v70 = v108;
    v109._countAndFlagsBits = URL.pathExtension.getter();
    OUTLINED_FUNCTION_21_7(v109);
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_6_13((uint64_t)"' must be a file of type CSV or JSON or a path to a folder containing a DataTable bi"
                                    "nary representation.");
    v72 = v105;
    v71 = v106;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v73 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v73 + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(v73 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v73 + 32) = v72;
    *(_QWORD *)(v73 + 40) = v71;
    OUTLINED_FUNCTION_52_1();
    OUTLINED_FUNCTION_8_13();
    OUTLINED_FUNCTION_101();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v74 = OUTLINED_FUNCTION_49_0();
    *v75 = v72;
    v75[1] = v71;
    OUTLINED_FUNCTION_1_4(v74, (uint64_t)v75);
    v76 = v70;
LABEL_47:
    OUTLINED_FUNCTION_4_15(v76);
    return;
  }
  v26 = (uint64_t)v99;
  OUTLINED_FUNCTION_3_15();
  v27 = URL.path.getter();
  v29 = v28;
  v30 = OUTLINED_FUNCTION_4_15(v26);
  if ((v29 & 0x1000000000000000) != 0 || !(v29 & 0x2000000000000000 | v27 & 0x1000000000000000))
  {
    v95 = v103;
    _StringGuts._slowWithCString<A>(_:)();
    if (!v95)
    {
LABEL_38:
      OUTLINED_FUNCTION_30();
LABEL_41:
      v91 = v104;
      OUTLINED_FUNCTION_9_11();
      v85 = OUTLINED_FUNCTION_9_1();
      *(_QWORD *)(v85 + 16) = v91;
      v92 = a1;
LABEL_42:
      OUTLINED_FUNCTION_4_15(v92);
      goto LABEL_43;
    }
LABEL_34:
    OUTLINED_FUNCTION_30();
    v76 = a1;
    goto LABEL_47;
  }
  MEMORY[0x24BDAC7A8](v30);
  *(&v97 - 2) = (uint64_t)closure #1 in CMLTable.init(from:);
  *(&v97 - 1) = 0;
  if ((v29 & 0x2000000000000000) == 0)
  {
    if ((v27 & 0x1000000000000000) != 0)
    {
      v31 = (v29 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v32 = v27 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v31 = _StringObject.sharedUTF8.getter();
    }
    v33 = v103;
    v34 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v31, v32, (uint64_t (*)(void))_ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0);
    if (v33)
      goto LABEL_34;
    v104 = v34;
    goto LABEL_38;
  }
  v105 = v27;
  v106 = v29 & 0xFFFFFFFFFFFFFFLL;
  OUTLINED_FUNCTION_26_9();
  if (v3)
    goto LABEL_34;
  if (v84)
  {
    v104 = v84;
    OUTLINED_FUNCTION_30();
    goto LABEL_41;
  }
  __break(1u);
LABEL_60:
  __break(1u);
}

__n128 MLDataTable.ParsingOptions.init(containsHeader:delimiter:comment:escape:doubleQuote:quote:skipInitialSpaces:missingValues:lineTerminator:selectColumns:maxRows:skipRows:)@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, __int128 a13, __n128 a14, uint64_t a15, char a16, uint64_t a17)
{
  __n128 result;

  result = a14;
  *(_BYTE *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  *(_BYTE *)(a9 + 80) = a12;
  *(_OWORD *)(a9 + 88) = a13;
  *(__n128 *)(a9 + 104) = a14;
  *(_QWORD *)(a9 + 120) = a15;
  *(_BYTE *)(a9 + 128) = a16 & 1;
  *(_QWORD *)(a9 + 136) = a17 & ~(a17 >> 63);
  return result;
}

uint64_t MLDataTable.ParsingOptions.containsHeader.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t MLDataTable.ParsingOptions.containsHeader.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.containsHeader.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLDataTable.ParsingOptions.delimiter.getter()
{
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_22();
}

void MLDataTable.ParsingOptions.delimiter.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_23_5();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v0;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLDataTable.ParsingOptions.delimiter.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLDataTable.ParsingOptions.comment.getter()
{
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_22();
}

void MLDataTable.ParsingOptions.comment.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_23_5();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v0;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLDataTable.ParsingOptions.comment.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLDataTable.ParsingOptions.escape.getter()
{
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_22();
}

void MLDataTable.ParsingOptions.escape.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_23_5();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v0;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLDataTable.ParsingOptions.escape.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.doubleQuote.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t MLDataTable.ParsingOptions.doubleQuote.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.doubleQuote.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLDataTable.ParsingOptions.quote.getter()
{
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_22();
}

void MLDataTable.ParsingOptions.quote.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_23_5();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v0;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLDataTable.ParsingOptions.quote.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.skipInitialSpaces.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t MLDataTable.ParsingOptions.skipInitialSpaces.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.skipInitialSpaces.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.missingValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLDataTable.ParsingOptions.missingValues.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 88) = a1;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.missingValues.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLDataTable.ParsingOptions.lineTerminator.getter()
{
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_3_9();
  OUTLINED_FUNCTION_22();
}

void MLDataTable.ParsingOptions.lineTerminator.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_23_5();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 96) = v2;
  *(_QWORD *)(v1 + 104) = v0;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLDataTable.ParsingOptions.lineTerminator.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.selectColumns.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLDataTable.ParsingOptions.selectColumns.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 112) = a1;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.selectColumns.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.maxRows.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t MLDataTable.ParsingOptions.maxRows.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = result;
  *(_BYTE *)(v2 + 128) = a2 & 1;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.maxRows.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDataTable.ParsingOptions.skipRows.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t MLDataTable.ParsingOptions.skipRows.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = result;
  return result;
}

uint64_t (*MLDataTable.ParsingOptions.skipRows.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3();
  if (!v3)
    return v5;
  return result;
}

void specialized closure #1 in _StringGuts.withCString<A>(_:)(void (*a1)(uint64_t *__return_ptr)@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  a1(&v4);
  if (!v2)
    *a2 = v4;
  OUTLINED_FUNCTION_23_7();
}

uint64_t outlined release of MLDataTable.ParsingOptions(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of UTType?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void _ss11_StringGutsV11withCStringyxxSPys4Int8VGKXEKlFxSRyAEGKXEfU_s13OpaquePointerV_TG5TA_0(_QWORD *a1@<X8>)
{
  partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1);
}

void _s8CreateML11MLDataTableV14ParsingOptionsVSgWOi0_(void *a1)
{
  bzero(a1, 0x90uLL);
}

uint64_t outlined init with take of MLDataTable.ParsingOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataTable.ParsingOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for MLDataTable.ParsingOptions()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MLDataTable.ParsingOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MLDataTable.ParsingOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v4;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

void *__swift_memcpy144_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x90uLL);
}

uint64_t assignWithTake for MLDataTable.ParsingOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDataTable.ParsingOptions(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 144))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDataTable.ParsingOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDataTable.ParsingOptions()
{
  return &type metadata for MLDataTable.ParsingOptions;
}

void OUTLINED_FUNCTION_0_19()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;

  v1 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 208) = v1;
  v2._countAndFlagsBits = 0x7420666F204C5255;
  v2._object = (void *)0xED00002720657079;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_3_15()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t OUTLINED_FUNCTION_4_15(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_6_13(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000068;
  String.append(_:)(v1);
}

void *OUTLINED_FUNCTION_7_10()
{
  uint64_t v0;
  uint64_t v1;

  return memcpy((void *)(v0 + 200), (const void *)(v1 - 232), 0x90uLL);
}

uint64_t OUTLINED_FUNCTION_8_13()
{
  return print(_:separator:terminator:)();
}

uint64_t OUTLINED_FUNCTION_9_11()
{
  return type metadata accessor for CMLTable();
}

uint64_t OUTLINED_FUNCTION_10_12()
{
  uint64_t v0;

  return outlined init with take of MLDataTable.ParsingOptions?(v0 + 200, v0 + 56);
}

void OUTLINED_FUNCTION_13_15()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 200) = 0;
  *(_QWORD *)(v0 + 208) = 0xE000000000000000;
  _StringGuts.grow(_:)(119);
}

uint64_t OUTLINED_FUNCTION_20_8()
{
  uint64_t v0;

  return outlined release of MLDataTable.ParsingOptions(v0 - 232);
}

void OUTLINED_FUNCTION_21_7(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_22_5(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return CMLTable.__allocating_init(from:isCSV:options:)(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_24_6()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_25_6()
{
  return URL.path.getter();
}

void OUTLINED_FUNCTION_26_9()
{
  uint64_t v0;

  specialized handling<A, B>(_:_:)(v0 + 200);
}

uint64_t OUTLINED_FUNCTION_27_12(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_28_9()
{
  return UTType.conforms(to:)();
}

void CMLParameters.add(key:column:)(unsigned __int8 a1, uint64_t a2)
{
  CMLParameters.add(key:column:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = CMLParameters.Key.rawValue.getter(a1);
  v6 = v5;
  OUTLINED_FUNCTION_3_1();
  swift_retain();
  specialized String.withCString<A>(_:)(v4, v6, v2, a2);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_35_5();
}

void CMLFeatureValue.__allocating_init(_:)(uint64_t a1)
{
  CMLFeatureValue.__allocating_init(_:)(a1, (uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

{
  CMLFeatureValue.__allocating_init(_:)(a1, (uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

{
  CMLFeatureValue.__allocating_init(_:)(a1, (uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

uint64_t CMLParameters.add(key:featureValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = CMLParameters.Key.rawValue.getter(a1);
  v6 = v5;
  OUTLINED_FUNCTION_3_1();
  swift_retain();
  specialized String.withCString<A>(_:)(v4, v6, v2, a2);
  return OUTLINED_FUNCTION_123();
}

void CMLFeatureValue.__allocating_init(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = String.utf8CString.getter();
  OUTLINED_FUNCTION_101();
  specialized handling<A, B>(_:_:)(v1 + 32);
  v3 = v2;
  OUTLINED_FUNCTION_136();
  if (v0)
    goto LABEL_4;
  if (v3)
  {
    v4 = OUTLINED_FUNCTION_9_1();
    *(_QWORD *)(v4 + 16) = v3;
    OUTLINED_FUNCTION_7_11(v4);
LABEL_4:
    OUTLINED_FUNCTION_48_5();
    return;
  }
  __break(1u);
}

_QWORD *CMLModel.callFunction(name:arguments:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = MethodName.rawValue.getter(a1);
  v9 = v2;
  v10 = a2;
  v6 = specialized String.withCString<A>(_:)((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in CMLModel.callFunction(name:arguments:), (uint64_t)&v8, v4, v5);
  OUTLINED_FUNCTION_123();
  return v6;
}

void CMLVariant.featureValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized handling<A, B>(_:_:)(*(_QWORD *)(v0 + 16));
  OUTLINED_FUNCTION_37_4();
  if (v1)
    goto LABEL_4;
  if (v0)
  {
    type metadata accessor for CMLFeatureValue();
    v2 = OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_3_16(v2);
LABEL_4:
    OUTLINED_FUNCTION_22();
    return;
  }
  __break(1u);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLFeatureValue.stringValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String result;

  specialized handling<A, B>(_:_:)(*(_QWORD *)(v0 + 16));
  if (!v1)
  {
    if (!v2)
    {
      __break(1u);
      goto _$s8CreateML15CMLFeatureValueC06stringD0SSyKF;
    }
    String.init(cString:)();
  }
  OUTLINED_FUNCTION_2_0();
_$s8CreateML15CMLFeatureValueC06stringD0SSyKF:
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

void CMLSequence.append(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  specialized handling<A, B, C>(_:_:_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(a1 + 16));
  if (!v2 && v3 < 0)
    __break(1u);
}

uint64_t CMLTable.__allocating_init(from:isCSV:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ML11MLDataTableV14ParsingOptionsVSgWOg;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  unsigned __int8 v141;
  _BYTE v142[176];
  _BYTE v143[152];
  uint64_t v144;

  HIDWORD(v66) = a3;
  outlined init with take of MLDataTable.ParsingOptions?(a4, (uint64_t)v143);
  v7 = MEMORY[0x22075BB9C](0);
  if (!v7)
  {
    __break(1u);
    goto LABEL_31;
  }
  v8 = v7;
  type metadata accessor for CMLParameters();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v8;
  specialized handling<A, B>(_:_:)(0, v10, v11, v12, v13, v14, v15, v16, v59, v63, v66, a1, v74, v78, v82, v86, v90, v94, v98,
    v102,
    v106,
    v110,
    v114,
    v118,
    v122,
    v126,
    v130,
    v134,
    v138,
    v139);
  if (v5)
    goto LABEL_36;
  v18 = v17;
  if (!v17)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  type metadata accessor for CMLFeatureValue();
  v19 = swift_initStackObject();
  *(_QWORD *)(v19 + 16) = v18;
  OUTLINED_FUNCTION_7_11(v19);
  OUTLINED_FUNCTION_5_15(9u);
  OUTLINED_FUNCTION_41_3();
  swift_release();
  outlined init with take of MLDataTable.ParsingOptions?((uint64_t)v143, (uint64_t)v142);
  ML11MLDataTableV14ParsingOptionsVSgWOg = _s8CreateML11MLDataTableV14ParsingOptionsVSgWOg((uint64_t)v142);
  if ((_DWORD)ML11MLDataTableV14ParsingOptionsVSgWOg != 1)
  {
    OUTLINED_FUNCTION_50_4(v142[0], v21, v22, v23, v24, v25, v26, v27, v60, v4, v67, v71, v75, v79, v83, v87, v91, v95, v99,
      v103,
      v107,
      v111,
      v115,
      v119,
      v123,
      v127,
      v131,
      v135,
      v138,
      v139);
    if (v28)
    {
      v29 = OUTLINED_FUNCTION_30_8();
      OUTLINED_FUNCTION_3_16(v29);
      OUTLINED_FUNCTION_5_15(0xAu);
      OUTLINED_FUNCTION_21_8();
      swift_release();
      outlined init with take of MLDataTable.ParsingOptions?((uint64_t)v143, (uint64_t)&v138);
      OUTLINED_FUNCTION_13_16();
      OUTLINED_FUNCTION_6_14();
      OUTLINED_FUNCTION_12_9();
      OUTLINED_FUNCTION_10_13(0xBu);
      OUTLINED_FUNCTION_21_8();
      swift_release();
      OUTLINED_FUNCTION_13_16();
      OUTLINED_FUNCTION_6_14();
      OUTLINED_FUNCTION_12_9();
      OUTLINED_FUNCTION_10_13(0xCu);
      OUTLINED_FUNCTION_21_8();
      swift_release();
      OUTLINED_FUNCTION_13_16();
      OUTLINED_FUNCTION_6_14();
      OUTLINED_FUNCTION_12_9();
      OUTLINED_FUNCTION_10_13(0xDu);
      OUTLINED_FUNCTION_41_3();
      swift_release();
      OUTLINED_FUNCTION_50_4(v140, v30, v31, v32, v33, v34, v35, v36, v61, v64, v68, v72, v76, v80, v84, v88, v92, v96, v100,
        v104,
        v108,
        v112,
        v116,
        v120,
        v124,
        v128,
        v132,
        v136,
        v138,
        v139);
      if (v37)
      {
        v38 = OUTLINED_FUNCTION_30_8();
        OUTLINED_FUNCTION_3_16(v38);
        OUTLINED_FUNCTION_5_15(0xEu);
        OUTLINED_FUNCTION_21_8();
        swift_release();
        OUTLINED_FUNCTION_13_16();
        OUTLINED_FUNCTION_6_14();
        OUTLINED_FUNCTION_12_9();
        OUTLINED_FUNCTION_10_13(0xFu);
        OUTLINED_FUNCTION_41_3();
        swift_release();
        OUTLINED_FUNCTION_50_4(v141, v39, v40, v41, v42, v43, v44, v45, v62, v65, v69, v73, v77, v81, v85, v89, v93, v97, v101,
          v105,
          v109,
          v113,
          v117,
          v121,
          v125,
          v129,
          v133,
          v137,
          v138,
          v139);
        if (v46)
        {
          v47 = OUTLINED_FUNCTION_30_8();
          OUTLINED_FUNCTION_3_16(v47);
          OUTLINED_FUNCTION_5_15(0x10u);
          OUTLINED_FUNCTION_21_8();
          swift_release();
          swift_bridgeObjectRetain();
          specialized Array<A>.featureSequence.getter();
        }
        goto LABEL_34;
      }
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_37;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v48 = MEMORY[0x24BDAC7A8](ML11MLDataTableV14ParsingOptionsVSgWOg);
  if ((a2 & 0x1000000000000000) == 0 && a2 & 0x2000000000000000 | v49 & 0x1000000000000000)
  {
    MEMORY[0x24BDAC7A8](v48);
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((v50 & 0x1000000000000000) != 0)
      {
        v52 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v53 = v50 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v52 = _StringObject.sharedUTF8.getter();
      }
      v54 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v52, v53, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      if (v4)
        goto LABEL_15;
      v56 = v54;
      OUTLINED_FUNCTION_104();
      goto LABEL_26;
    }
    v138 = v50;
    v139 = a2 & 0xFFFFFFFFFFFFFFLL;
    if ((v51 & 1) != 0)
    {
      specialized handling<A, B, C>(_:_:_:)((uint64_t)&v138, *(_QWORD *)(inited + 16));
      if (v4)
      {
LABEL_21:
        OUTLINED_FUNCTION_104();
        goto LABEL_22;
      }
      v56 = v55;
      if (v55)
      {
LABEL_25:
        OUTLINED_FUNCTION_104();
        goto LABEL_26;
      }
      __break(1u);
    }
    specialized handling<A, B>(_:_:)((uint64_t)&v138);
    if (v4)
      goto LABEL_21;
    v56 = v57;
    if (v57)
      goto LABEL_25;
    __break(1u);
LABEL_36:
    swift_unexpectedError();
    __break(1u);
LABEL_37:
    JUMPOUT(0x21AE563D4);
  }
  _StringGuts._slowWithCString<A>(_:)();
  if (v4)
  {
LABEL_15:
    OUTLINED_FUNCTION_104();
LABEL_22:
    swift_setDeallocating();
    return tc_v1_release();
  }
  OUTLINED_FUNCTION_104();
  v56 = v144;
LABEL_26:
  swift_setDeallocating();
  tc_v1_release();
  result = OUTLINED_FUNCTION_0_20();
  *(_QWORD *)(result + 16) = v56;
  return result;
}

uint64_t __CMLFeatureValueType.init(rawValue:)(unint64_t a1)
{
  if (a1 > 9)
    return 8;
  else
    return byte_21AFE97FE[a1];
}

unint64_t CMLFeatureValueType.init(_:)(char a1)
{
  return 0x605050403020100uLL >> (8 * a1);
}

unint64_t CMLFeatureValueType.rawValue.getter(char a1)
{
  return 0x7050403020100uLL >> (8 * a1);
}

void CMLFeatureValueType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

void protocol witness for Hashable.hash(into:) in conformance CMLFeatureValueType(uint64_t a1)
{
  unsigned __int8 *v1;

  CMLFeatureValueType.hash(into:)(a1, *v1);
}

uint64_t CMLFeatureValue.deinit()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 24) == 1)
    OUTLINED_FUNCTION_47_7();
  return v0;
}

uint64_t CMLFeatureValue.__deallocating_deinit()
{
  CMLFeatureValue.deinit();
  OUTLINED_FUNCTION_42_5();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CMLFeatureValue()
{
  return objc_opt_self();
}

uint64_t CMLFeatureValue.init(rawValue:ownsValue:)(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 24) = a2;
  return v2;
}

uint64_t CMLFeatureValue.releaseRawValue()()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  if (result)
  {
    *(_QWORD *)(v0 + 16) = 0;
    *(_BYTE *)(v0 + 24) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CMLFeatureValue.__allocating_init()()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = MEMORY[0x22075BB24](0);
  if (result)
  {
    v1 = result;
    OUTLINED_FUNCTION_42_5();
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v1;
    return OUTLINED_FUNCTION_7_11(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void CMLFeatureValue.__allocating_init(_:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2(*(_QWORD *)(a1 + 16));
  if (v2)
  {
    OUTLINED_FUNCTION_136();
LABEL_5:
    OUTLINED_FUNCTION_48_5();
    return;
  }
  v4 = v3;
  if (v3)
  {
    OUTLINED_FUNCTION_136();
    v5 = OUTLINED_FUNCTION_9_1();
    *(_QWORD *)(v5 + 16) = v4;
    OUTLINED_FUNCTION_7_11(v5);
    goto LABEL_5;
  }
  __break(1u);
}

unint64_t CMLFeatureValue.type.getter()
{
  unint64_t v0;
  unint64_t result;

  v0 = tc_v1_ft_type();
  result = __CMLFeatureValueType.init(rawValue:)(v0);
  if (result != 8)
    return CMLFeatureValueType.init(_:)(result);
  __break(1u);
  return result;
}

uint64_t CMLFeatureValue.isInt64.getter()
{
  return tc_v1_ft_is_int64();
}

uint64_t CMLFeatureValue.isDouble.getter()
{
  return tc_v1_ft_is_double();
}

uint64_t CMLFeatureValue.isUndefined.getter()
{
  return tc_v1_ft_is_undefined();
}

uint64_t type metadata accessor for CMLSequence()
{
  return objc_opt_self();
}

void CMLSequence.value(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((a1 & 0x8000000000000000) == 0)
  {
    specialized handling<A, B, C>(_:_:_:)(*(_QWORD *)(v1 + 16), a1);
    OUTLINED_FUNCTION_37_4();
    if (v2)
    {
LABEL_5:
      OUTLINED_FUNCTION_28_10();
      return;
    }
    if (v1)
    {
      type metadata accessor for CMLFeatureValue();
      v3 = OUTLINED_FUNCTION_9_1();
      OUTLINED_FUNCTION_3_16(v3);
      goto LABEL_5;
    }
    __break(1u);
  }
  OUTLINED_FUNCTION_4_16();
  OUTLINED_FUNCTION_2_20();
  __break(1u);
}

uint64_t CMLSequence.size.getter()
{
  return CMLSequence.size.getter(MEMORY[0x24BEBAA18]);
}

uint64_t type metadata accessor for CMLFVTypeSequence()
{
  return objc_opt_self();
}

#error "21AE568C4: call analysis failed (funcsize=17)"

uint64_t type metadata accessor for CMLDictionary()
{
  return objc_opt_self();
}

uint64_t CMLDictionary.size.getter()
{
  return CMLSequence.size.getter(MEMORY[0x24BEBA9E8]);
}

#error "21AE56970: call analysis failed (funcsize=37)"

#error "21AE569F0: call analysis failed (funcsize=41)"

uint64_t type metadata accessor for CMLMultiArray()
{
  return objc_opt_self();
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLMultiArray.dimensions()()
{
  return CMLMultiArray.dimensions()((uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

uint64_t CMLMultiArray.shape()()
{
  return CMLMultiArray.shape()((uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

uint64_t CMLMultiArray.strides()()
{
  return CMLMultiArray.shape()((uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

uint64_t CMLMultiArray.data()()
{
  return CMLMultiArray.shape()((uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

uint64_t CMLMultiArray.shape()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;

  result = OUTLINED_FUNCTION_31_11(a1);
  if (!v1 && !result)
    __break(1u);
  return result;
}

uint64_t type metadata accessor for CMLColumn()
{
  return objc_opt_self();
}

#error "21AE56B34: call analysis failed (funcsize=26)"

uint64_t CMLColumn.__allocating_init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  if ((a2 & 0x8000000000000000) == 0)
  {
    specialized handling<A, B, C>(_:_:_:)(*(_QWORD *)(a1 + 16), a2);
    if (v2)
      return OUTLINED_FUNCTION_136();
    v5 = v3;
    if (v3)
    {
      OUTLINED_FUNCTION_136();
      result = OUTLINED_FUNCTION_0_20();
      *(_QWORD *)(result + 16) = v5;
      return result;
    }
    __break(1u);
  }
  OUTLINED_FUNCTION_4_16();
  result = OUTLINED_FUNCTION_2_20();
  __break(1u);
  return result;
}

uint64_t CMLColumn.__allocating_init(_:type:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (!CMLSequence.size.getter(MEMORY[0x24BEBAA18]))
    __asm { BR              X10 }
  specialized handling<A, B>(_:_:)(*(_QWORD *)(a1 + 16));
  if (v2)
    return OUTLINED_FUNCTION_81();
  v6 = v5;
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x21AE56F34);
  }
  OUTLINED_FUNCTION_81();
  result = OUTLINED_FUNCTION_0_20();
  *(_QWORD *)(result + 16) = v6;
  return result;
}

uint64_t CMLColumn.__allocating_init(concatenating:and:)(uint64_t a1, uint64_t a2)
{
  return CMLColumn.__allocating_init(concatenating:and:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized handling<A, B, C>(_:_:_:));
}

uint64_t CMLColumn.size.getter()
{
  return CMLSequence.size.getter(MEMORY[0x24BEBABD0]);
}

uint64_t CMLSequence.size.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;

  result = a1(*(_QWORD *)(v1 + 16));
  if (result < 0)
    __break(1u);
  return result;
}

unint64_t CMLColumn.type.getter()
{
  unint64_t v0;
  unint64_t result;

  v0 = tc_v1_sarray_type();
  result = __CMLFeatureValueType.init(rawValue:)(v0);
  if (result != 8)
    return CMLFeatureValueType.init(_:)(result);
  __break(1u);
  return result;
}

void CMLColumn.value(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((a1 & 0x8000000000000000) == 0)
  {
    specialized handling<A, B, C>(_:_:_:)(*(_QWORD *)(v1 + 16), a1);
    OUTLINED_FUNCTION_37_4();
    if (v2)
    {
LABEL_5:
      OUTLINED_FUNCTION_28_10();
      return;
    }
    if (v1)
    {
      type metadata accessor for CMLFeatureValue();
      v3 = OUTLINED_FUNCTION_9_1();
      OUTLINED_FUNCTION_3_16(v3);
      goto LABEL_5;
    }
    __break(1u);
  }
  OUTLINED_FUNCTION_4_16();
  OUTLINED_FUNCTION_2_20();
  __break(1u);
}

#error "21AE5707C: call analysis failed (funcsize=6)"

void CMLColumn.sum()()
{
  CMLColumn.sum()((uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

void CMLColumn.min()()
{
  CMLColumn.sum()((uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

void CMLColumn.max()()
{
  CMLColumn.sum()((uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

void CMLColumn.mean()()
{
  CMLColumn.sum()((uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

void CMLColumn.stdev()()
{
  CMLColumn.sum()((uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

void CMLColumn.sum()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_31_11(a1);
  OUTLINED_FUNCTION_37_4();
  if (v2)
    goto LABEL_4;
  if (v1)
  {
    type metadata accessor for CMLFeatureValue();
    v3 = OUTLINED_FUNCTION_9_1();
    OUTLINED_FUNCTION_3_16(v3);
LABEL_4:
    OUTLINED_FUNCTION_22();
    return;
  }
  __break(1u);
}

#error "21AE5721C: call analysis failed (funcsize=67)"

uint64_t closure #1 in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for CMLFeatureValue();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 24) = 0;
  a2();
  swift_release();
  v5 = CMLFeatureValue.releaseRawValue()();
  swift_release();
  return v5;
}

uint64_t specialized static UnsafeMutablePointer.allocate(capacity:)(uint64_t result)
{
  if ((unint64_t)(result - 0x800000000000000) >> 60 == 15)
    return swift_slowAlloc();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CMLTable()
{
  return objc_opt_self();
}

void closure #1 in CMLTable.init(from:isCSV:options:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    specialized handling<A, B, C>(_:_:_:)(a1, *(_QWORD *)(a3 + 16));
    if (v4)
      return;
    if (a1)
      goto LABEL_7;
    __break(1u);
  }
  specialized handling<A, B>(_:_:)(a1);
  if (v4)
    return;
  if (!a1)
  {
    __break(1u);
    return;
  }
LABEL_7:
  *a4 = a1;
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v6 = v5;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    if (v6)
    {
LABEL_7:
      swift_release();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_12;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v11 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v11, v12, (uint64_t (*)(void))partial apply for closure #1 in CMLTable.renameColumn(named:to:));
    if (v6)
      goto LABEL_7;
LABEL_12:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v14[0] = a1;
  v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_retain();
  specialized String.withCString<A>(_:)(a3, a4, a5, (uint64_t)v14);
  if (v6)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  _QWORD v20[2];

  v9 = v8;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    if (v8)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    goto LABEL_13;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v16 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v15 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v15, v16, partial apply for closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:));
    if (v8)
      goto LABEL_7;
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v20[0] = a1;
  v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized String.withCString<A>(_:)(a3, a4, a5, a6, a7 & 1, a8, (uint64_t)v20);
  if (v9)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRelease();
LABEL_14:
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  _QWORD v18[2];

  v8 = v7;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    if (v7)
    {
LABEL_7:
      swift_release();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_12;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v13 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v14 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v13 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v13, v14, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:));
    if (v7)
      goto LABEL_7;
LABEL_12:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v18[0] = a1;
  v18[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_retain();
  specialized String.withCString<A>(_:)(a3, a4, a5 & 1, a6, a7, (uint64_t)v18);
  if (v8)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD v12[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v10 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v10 = _StringObject.sharedUTF8.getter();
    closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(v10, a3 & 1, a4, a5, a6);
    return swift_release();
  }
  v12[0] = a1;
  v12[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)((uint64_t)v12, a3 & 1, a4, a5, a6);
  return swift_release();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9, uint64_t a10, void (*a11)(_QWORD, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[10];
  _QWORD v29[4];

  v13 = v11;
  v28[4] = a3;
  v28[5] = a4;
  v28[6] = a5;
  v28[7] = a6;
  v28[8] = a7;
  if ((a2 & 0x1000000000000000) != 0 || (OUTLINED_FUNCTION_33_7(), !v23))
  {
    _StringGuts._slowWithCString<A>(_:)();
    if (v11)
    {
LABEL_7:
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_101();
      return OUTLINED_FUNCTION_217();
    }
    goto LABEL_13;
  }
  if ((v21 & 0x2000000000000000) == 0)
  {
    if ((v20 & 0x1000000000000000) != 0)
      v24 = OUTLINED_FUNCTION_23_8(v18, v19, v20, v21);
    else
      v24 = OUTLINED_FUNCTION_15_9();
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v24, v25, a8);
    if (v11)
      goto LABEL_7;
LABEL_13:
    OUTLINED_FUNCTION_101();
    goto LABEL_14;
  }
  v26 = v22;
  v29[3] = v28;
  v29[0] = v20;
  v29[1] = v21 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_122();
  specialized String.withCString<A>(_:)(a3, a4, v26, a6, a7, (uint64_t)v29, a9, a10, a11);
  if (v13)
  {
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_101();
    return OUTLINED_FUNCTION_217();
  }
  OUTLINED_FUNCTION_101();
LABEL_14:
  OUTLINED_FUNCTION_217();
  return OUTLINED_FUNCTION_30();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(_QWORD, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v24)(void);
  uint64_t v25;
  _QWORD v26[2];

  v10 = v9;
  if ((a2 & 0x1000000000000000) != 0 || (OUTLINED_FUNCTION_33_7(), !v20))
  {
    OUTLINED_FUNCTION_22_6();
    if (v9)
    {
LABEL_7:
      OUTLINED_FUNCTION_217();
      return OUTLINED_FUNCTION_30();
    }
    goto LABEL_12;
  }
  if ((v17 & 0x2000000000000000) == 0)
  {
    if ((v16 & 0x1000000000000000) != 0)
      v21 = OUTLINED_FUNCTION_23_8(v14, v15, v16, v17);
    else
      v21 = OUTLINED_FUNCTION_15_9();
    OUTLINED_FUNCTION_26_10(v21, v22);
    if (v9)
      goto LABEL_7;
LABEL_12:
    OUTLINED_FUNCTION_30();
    return OUTLINED_FUNCTION_217();
  }
  v24 = v19;
  v25 = v18;
  v26[0] = v16;
  v26[1] = v17 & 0xFFFFFFFFFFFFFFLL;
  OUTLINED_FUNCTION_122();
  specialized String.withCString<A>(_:)(a3, a4, a5, v25, (uint64_t)v26, v24, a9);
  if (v10)
  {
    OUTLINED_FUNCTION_217();
    return OUTLINED_FUNCTION_30();
  }
  OUTLINED_FUNCTION_30();
  return OUTLINED_FUNCTION_217();
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), void (*a7)(_QWORD, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return OUTLINED_FUNCTION_217();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v8 = OUTLINED_FUNCTION_23_8(a1, a2, a1, a2);
    else
      v8 = OUTLINED_FUNCTION_15_9();
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v8, v9, a6);
    return OUTLINED_FUNCTION_217();
  }
  v11[0] = a1;
  v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  a7(*(_QWORD *)(a3 + 16), a4, a5, v11);
  return OUTLINED_FUNCTION_217();
}

uint64_t closure #1 in CMLTable.init(from:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in CMLTable.init(from:)((uint64_t (*)(void))specialized handling<A, B>(_:_:), a1);
}

#error "21AE58060: call analysis failed (funcsize=17)"

uint64_t CMLTable.__allocating_init(concatenating:and:)(uint64_t a1, uint64_t a2)
{
  return CMLColumn.__allocating_init(concatenating:and:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized handling<A, B, C>(_:_:_:));
}

uint64_t CMLColumn.__allocating_init(concatenating:and:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  if (v3)
  {
    OUTLINED_FUNCTION_13_7();
    return OUTLINED_FUNCTION_81();
  }
  else
  {
    v5 = result;
    if (result)
    {
      OUTLINED_FUNCTION_13_7();
      OUTLINED_FUNCTION_81();
      result = OUTLINED_FUNCTION_0_20();
      *(_QWORD *)(result + 16) = v5;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLTable.rows()()
{
  return CMLMultiArray.dimensions()((uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLTable.columns()()
{
  return CMLMultiArray.dimensions()((uint64_t (*)(_QWORD))specialized handling<A, B>(_:_:));
}

uint64_t CMLMultiArray.dimensions()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;

  result = OUTLINED_FUNCTION_31_11(a1);
  if (!v1 && result < 0)
    __break(1u);
  return result;
}

uint64_t CMLTable.addColumn(name:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_122();
  return specialized String.withCString<A>(_:)(a1, a2, v3, a3);
}

#error "21AE581CC: call analysis failed (funcsize=8)"

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLTable.renameColumn(named:to:)(Swift::String named, Swift::String to)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;

  object = to._object;
  countAndFlagsBits = to._countAndFlagsBits;
  v5 = named._object;
  v6 = named._countAndFlagsBits;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_3_1();
  specialized String.withCString<A>(_:)(v6, (uint64_t)v5, countAndFlagsBits, (uint64_t)object, v2);
}

uint64_t closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  return specialized String.withCString<A>(_:)(a2, a3, a4, a1);
}

uint64_t closure #1 in closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized handling<A, B, C, D>(_:_:_:_:)(*(_QWORD *)(a2 + 16), a3, a1);
}

void closure #1 in CMLTable.column(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = OUTLINED_FUNCTION_24_7(a1, a2);
  specialized handling<A, B, C>(_:_:_:)(v3, v4);
  if (v2)
    goto LABEL_4;
  if (v5)
  {
    type metadata accessor for CMLColumn();
    v6 = OUTLINED_FUNCTION_0_20();
    OUTLINED_FUNCTION_38_5(v6);
LABEL_4:
    OUTLINED_FUNCTION_18_7();
    return;
  }
  __break(1u);
}

void closure #1 in CMLTable.columnType(name:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v4 = OUTLINED_FUNCTION_24_7(a1, a2);
  specialized handling<A, B, C>(_:_:_:)(v4, v5);
  if (!v3)
  {
    v7 = __CMLFeatureValueType.init(rawValue:)(v6);
    if (v7 == 8)
      __break(1u);
    else
      *v2 = CMLFeatureValueType.init(_:)(v7);
  }
}

#error "21AE5834C: call analysis failed (funcsize=17)"

void CMLTable.row(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((a1 & 0x8000000000000000) == 0)
  {
    specialized handling<A, B, C>(_:_:_:)(*(_QWORD *)(v1 + 16), a1);
    OUTLINED_FUNCTION_37_4();
    if (v2)
    {
LABEL_5:
      OUTLINED_FUNCTION_28_10();
      return;
    }
    if (v1)
    {
      type metadata accessor for CMLSequence();
      v3 = OUTLINED_FUNCTION_9_1();
      OUTLINED_FUNCTION_3_16(v3);
      goto LABEL_5;
    }
    __break(1u);
  }
  OUTLINED_FUNCTION_4_16();
  OUTLINED_FUNCTION_2_20();
  __break(1u);
}

#error "21AE58428: call analysis failed (funcsize=47)"

uint64_t closure #1 in CMLTable.save(to:type:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v3 = result;
  if (a2 == 2)
  {
    v4 = *(_QWORD *)(a3 + 16);
    v5 = "json";
  }
  else if (a2 == 1)
  {
    v4 = *(_QWORD *)(a3 + 16);
    v5 = "binary";
  }
  else
  {
    if (a2)
      return result;
    v4 = *(_QWORD *)(a3 + 16);
    v5 = "csv";
  }
  return specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v4, v3, v5, 0);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLTable.description()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String result;

  specialized handling<A, B>(_:_:)(*(_QWORD *)(v0 + 16));
  if (!v1)
  {
    specialized handling<A, B>(_:_:)(v2);
    if (!v3)
    {
      __break(1u);
      goto _$s8CreateML8CMLTableC11descriptionSSyKF;
    }
    String.init(cString:)();
  }
  OUTLINED_FUNCTION_2_0();
_$s8CreateML8CMLTableC11descriptionSSyKF:
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

#error "21AE58604: call analysis failed (funcsize=58)"

uint64_t closure #1 in CMLTable.apply(transform:type:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for CMLSequence();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 24) = 0;
  a2();
  swift_release();
  v5 = CMLFeatureValue.releaseRawValue()();
  swift_release();
  return v5;
}

uint64_t releaseContext #1 (context:) in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t result)
{
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
    swift_arrayDestroy();
    JUMPOUT(0x22075BA10);
  }
  return result;
}

uint64_t invokeContext #1 (rawInput:context:error:) in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t result, void (**a2)(uint64_t *__return_ptr, uint64_t *))
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    if (result)
    {
      v2 = *a2;
      v4 = result;
      OUTLINED_FUNCTION_3_1();
      v2(&v3, &v4);
      swift_release();
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t @objc invokeContext #1 (rawInput:context:error:) in CMLTable.apply(transform:type:)(uint64_t a1, void (**a2)(uint64_t *__return_ptr, uint64_t *))
{
  return invokeContext #1 (rawInput:context:error:) in CMLColumn.apply(transform:type:skipUndefined:)(a1, a2);
}

uint64_t @objc releaseContext #1 (context:) in CMLTable.apply(transform:type:)(uint64_t a1)
{
  return releaseContext #1 (context:) in CMLColumn.apply(transform:type:skipUndefined:)(a1);
}

void closure #1 in CMLTable.fillMissing(columnNamed:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = specialized handling<A, B, C, D>(_:_:_:_:)(*(_QWORD *)(a2 + 16), a1, *(_QWORD *)(a3 + 16));
  if (v3)
    goto LABEL_4;
  if (v4)
  {
    type metadata accessor for CMLTable();
    v5 = OUTLINED_FUNCTION_0_20();
    OUTLINED_FUNCTION_38_5(v5);
LABEL_4:
    OUTLINED_FUNCTION_18_7();
    return;
  }
  __break(1u);
}

void CMLTable.filtered(_:columnName:isExcluding:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = String.utf8CString.getter();
  v10 = specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v7, v8, v9 + 32, a4);
  swift_release();
  if (v5)
    goto LABEL_4;
  if (v10)
  {
    *(_QWORD *)(OUTLINED_FUNCTION_0_20() + 16) = v10;
LABEL_4:
    OUTLINED_FUNCTION_35_5();
    return;
  }
  __break(1u);
}

_QWORD *closure #1 in CMLTable.stack(columnName:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return closure #1 in CMLTable.stack(columnName:to:)(a1, a2, a3, a4, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in closure #1 in CMLTable.stack(columnName:to:), a5);
}

uint64_t closure #1 in closure #1 in CMLTable.stack(columnName:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;

  result = specialized handling<A, B, C, D, E>(_:_:_:_:_:)(*(_QWORD *)(a2 + 16), a3, a1, 0);
  if (!v4)
  {
    v7 = result;
    if (result)
    {
      type metadata accessor for CMLTable();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v7;
      *a4 = result;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

_QWORD *closure #1 in CMLTable.unstack(columnName:newColumnName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return closure #1 in CMLTable.stack(columnName:to:)(a1, a2, a3, a4, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:), a5);
}

_QWORD *closure #1 in CMLTable.stack(columnName:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *(*a5)(uint64_t *__return_ptr, _QWORD *)@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  _QWORD *result;
  _QWORD v9[4];

  v9[3] = a1;
  v9[2] = a4;
  result = specialized String.withCString<A>(_:)(a5, (uint64_t)v9, a2, a3);
  if (!v6)
    *a6 = result;
  return result;
}

uint64_t closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;

  result = specialized handling<A, B, C, D>(_:_:_:_:)(*(_QWORD *)(a2 + 16), a3, a1);
  if (!v4)
  {
    v7 = result;
    if (result)
    {
      type metadata accessor for CMLTable();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v7;
      *a4 = result;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

#error "21AE58A0C: call analysis failed (funcsize=33)"

_QWORD *closure #1 in CMLTable.unpack(columnName:types:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  _QWORD v8[6];

  v8[5] = a4;
  v8[2] = a2;
  v8[3] = a1;
  v8[4] = a3;
  result = specialized String.withCString<A>(_:)((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in closure #1 in CMLTable.unpack(columnName:types:limit:), (uint64_t)v8, 0, 0xE000000000000000);
  if (!v5)
    *a5 = result;
  return result;
}

#error "21AE58AEC: call analysis failed (funcsize=50)"

uint64_t type metadata accessor for CMLVariant()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CMLParameters()
{
  return objc_opt_self();
}

void CMLParameters.featureValue(for:)(unsigned __int8 a1)
{
  CMLParameters.featureValue(for:)(a1, (uint64_t)partial apply for closure #1 in CMLParameters.featureValue(for:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized String.withCString<A>(_:));
}

void closure #1 in CMLParameters.featureValue(for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  specialized handling<A, B, C>(_:_:_:)(*(_QWORD *)(a2 + 16), a1);
  if (!v3)
  {
    v6 = v5;
    if (v5)
    {
      type metadata accessor for CMLFeatureValue();
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v6;
      *(_BYTE *)(v7 + 24) = 1;
      *a3 = v7;
    }
    else
    {
      __break(1u);
    }
  }
}

void CMLParameters.table(for:)(unsigned __int8 a1)
{
  CMLParameters.featureValue(for:)(a1, (uint64_t)partial apply for closure #1 in CMLParameters.table(for:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized String.withCString<A>(_:));
}

void CMLParameters.featureValue(for:)(unsigned __int8 a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = CMLParameters.Key.rawValue.getter(a1);
  a3(a2, v3, v6, v7);
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_34_9();
}

void closure #1 in CMLParameters.table(for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  specialized handling<A, B, C>(_:_:_:)(*(_QWORD *)(a2 + 16), a1);
  if (!v3)
  {
    v6 = v5;
    if (v5)
    {
      type metadata accessor for CMLTable();
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v6;
      *a3 = v7;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t closure #1 in CMLParameters.add(key:featureValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized handling<A, B, C, D>(_:_:_:_:)(*(_QWORD *)(a2 + 16), a1, *(_QWORD *)(a3 + 16));
}

void CMLParameters.add(key:table:)(unsigned __int8 a1, uint64_t a2)
{
  CMLParameters.add(key:column:)(a1, a2);
}

uint64_t closure #1 in CMLTable.addColumn(name:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, _QWORD))
{
  return a4(*(_QWORD *)(a2 + 16), a1, *(_QWORD *)(a3 + 16));
}

uint64_t type metadata accessor for CMLAggregator()
{
  return objc_opt_self();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLAggregator.add(operation:toColumnName:fromColumnName:)(Swift::String operation, Swift::String toColumnName, Swift::String fromColumnName)
{
  CMLAggregator.add(operation:toColumnName:fromColumnName:)(operation._countAndFlagsBits, (uint64_t)operation._object, toColumnName._countAndFlagsBits, (uint64_t)toColumnName._object, fromColumnName._countAndFlagsBits, (uint64_t)fromColumnName._object, (uint64_t (*)(void))partial apply for closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (uint64_t)partial apply for closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (void (*)(_QWORD, uint64_t, uint64_t, _QWORD *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
  OUTLINED_FUNCTION_44_6();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(Swift::Bool isMax, Swift::String toColumnName, Swift::String aggColumnName, Swift::String outputColumnName)
{
  uint64_t v4;
  void *object;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  object = outputColumnName._object;
  OUTLINED_FUNCTION_32_7();
  v7 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_3_1();
  v8 = OUTLINED_FUNCTION_39_4();
  specialized String.withCString<A>(_:)(v8, v9, v10, v11, v12, (uint64_t)object, v7, v4);
}

uint64_t closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  swift_bridgeObjectRetain();
  swift_retain();
  return specialized String.withCString<A>(_:)(a2, a3, a4, a5, a6, a7, a1);
}

uint64_t closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  swift_retain();
  return specialized String.withCString<A>(_:)(a2, a3, a4, a5, a6, a1);
}

uint64_t closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = *(_QWORD *)(a3 + 16);
  if ((a2 & 1) != 0)
    return specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v7, a4, a5, a1);
  else
    return specialized handling<A, B, C, D, E>(_:_:_:_:_:)(v7, a4, a5, a1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(Swift::String concatToColumnName, Swift::String keyColumnName, Swift::String valueColumnName)
{
  CMLAggregator.add(operation:toColumnName:fromColumnName:)(concatToColumnName._countAndFlagsBits, (uint64_t)concatToColumnName._object, keyColumnName._countAndFlagsBits, (uint64_t)keyColumnName._object, valueColumnName._countAndFlagsBits, (uint64_t)valueColumnName._object, (uint64_t (*)(void))partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (uint64_t)partial apply for closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (void (*)(_QWORD, uint64_t, uint64_t, _QWORD *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
  OUTLINED_FUNCTION_44_6();
}

uint64_t CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8, uint64_t a9, void (*a10)(_QWORD, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v10;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_3_1();
  return specialized String.withCString<A>(_:)(a1, a2, a3, a4, a5, a6, v10, a7, a8, a9, a10);
}

uint64_t closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(_QWORD, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_32_7();
  v11 = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  v12 = OUTLINED_FUNCTION_39_4();
  return specialized String.withCString<A>(_:)(v12, v13, v14, v15, v16, v11, a7, a8, a9);
}

uint64_t closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), void (*a7)(_QWORD, uint64_t, uint64_t, _QWORD *))
{
  swift_retain();
  return specialized String.withCString<A>(_:)(a2, a3, a4, a5, a1, a6, a7);
}

uint64_t closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  return a5(*(_QWORD *)(a2 + 16), a3, a4, a1);
}

uint64_t type metadata accessor for CMLPlot()
{
  return objc_opt_self();
}

uint64_t CMLEmbedding.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CMLEmbedding()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CMLGazetteer()
{
  return objc_opt_self();
}

uint64_t CMLFVTypeSequence.__deallocating_deinit()
{
  OUTLINED_FUNCTION_47_7();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CMLModel()
{
  return objc_opt_self();
}

uint64_t sub_21AE5927C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CMLColumn.apply(transform:type:skipUndefined:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CMLColumn.apply(transform:type:skipUndefined:)(a1, *(void (**)(void))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned OpaquePointer)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t closure #1 in CMLModel.init(name:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in CMLTable.init(from:)((uint64_t (*)(void))specialized handling<A, B>(_:_:), a1);
}

uint64_t closure #1 in CMLModel.init(url:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in CMLTable.init(from:)((uint64_t (*)(void))specialized handling<A, B>(_:_:), a1);
}

uint64_t closure #1 in CMLTable.init(from:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = a1();
  if (!v2)
  {
    if (result)
      *a2 = result;
    else
      __break(1u);
  }
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CMLModel.name()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String result;

  specialized handling<A, B>(_:_:)(*(_QWORD *)(v0 + 16));
  if (!v1)
  {
    if (!v2)
    {
      __break(1u);
      goto _$s8CreateML8CMLModelC4nameSSyKF;
    }
    String.init(cString:)();
  }
  OUTLINED_FUNCTION_2_0();
_$s8CreateML8CMLModelC4nameSSyKF:
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t closure #1 in CMLModel.callFunction(name:arguments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;

  result = specialized handling<A, B, C, D>(_:_:_:_:)(*(_QWORD *)(a2 + 16), a1, *(_QWORD *)(a3 + 16));
  if (!v4)
  {
    v7 = result;
    if (result)
    {
      type metadata accessor for CMLVariant();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v7;
      *a4 = result;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in CMLModel.callFunction(name:arguments:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in CMLModel.callFunction(name:arguments:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void partial apply for closure #1 in CMLParameters.featureValue(for:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in CMLParameters.featureValue(for:)(a1, v2, a2);
}

uint64_t partial apply for closure #1 in closure #1 in CMLTable.unpack(columnName:types:limit:)()
{
  OUTLINED_FUNCTION_49_2();
  return closure #1 in closure #1 in CMLTable.unpack(columnName:types:limit:)();
}

uint64_t partial apply for closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in CMLTable.unstack(columnName:newColumnName:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in closure #1 in CMLTable.stack(columnName:to:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in CMLTable.stack(columnName:to:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in CMLTable.apply(transform:type:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CMLTable.apply(transform:type:)(a1, *(void (**)(void))(v1 + 16));
}

void partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(uint64_t a1)
{
  partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (void (*)(_QWORD, uint64_t, uint64_t, _QWORD *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

void closure #1 in CMLCallFunction(name:arguments:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  specialized handling<A, B, C>(_:_:_:)(a1, *(_QWORD *)(a2 + 16));
  if (v2)
    goto LABEL_4;
  if (v3)
  {
    type metadata accessor for CMLVariant();
    v4 = OUTLINED_FUNCTION_0_20();
    OUTLINED_FUNCTION_38_5(v4);
LABEL_4:
    OUTLINED_FUNCTION_18_7();
    return;
  }
  __break(1u);
}

uint64_t partial apply for closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_49_2();
  return closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(v0, v1, v2, v3, v4, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:), (void (*)(_QWORD, uint64_t, uint64_t, _QWORD *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(a1, v1[2], v1[3], v1[4], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

void partial apply for closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1)
{
  partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (void (*)(_QWORD, uint64_t, uint64_t, _QWORD *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

void partial apply for closure #1 in CMLAggregator.add(concatToColumnName:keyColumnName:valueColumnName:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, _QWORD *))
{
  uint64_t *v4;

  closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(a1, v4[2], v4[3], v4[4], v4[5], v4[6], a2, a3, a4);
  OUTLINED_FUNCTION_44_6();
}

uint64_t partial apply for closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_49_2();
  return closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(v0, v1, v2, v3, v4, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:), (void (*)(_QWORD, uint64_t, uint64_t, _QWORD *))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in closure #1 in CMLAggregator.add(operation:toColumnName:fromColumnName:)(a1, v1[2], v1[3], v1[4], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized handling<A, B, C, D, E>(_:_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_49_2();
  return closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(v1, v2, v3, v4, v5, *(_BYTE *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t partial apply for closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in CMLAggregator.add(isMax:toColumnName:aggColumnName:outputColumnName:)(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void partial apply for closure #1 in CMLParameters.table(for:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in CMLParameters.table(for:)(a1, v2, a2);
}

uint64_t partial apply for closure #1 in CMLParameters.add(key:column:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CMLTable.addColumn(name:_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, uint64_t, _QWORD))specialized handling<A, B, C, D>(_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLParameters.add(key:featureValue:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CMLParameters.add(key:featureValue:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CMLParameters.add(key:table:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CMLTable.addColumn(name:_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, uint64_t, _QWORD))specialized handling<A, B, C, D>(_:_:_:_:));
}

uint64_t partial apply for closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in CMLTable.renameColumn(named:to:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in closure #1 in CMLTable.renameColumn(named:to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CMLTable.renameColumn(named:to:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CMLTable.addColumn(name:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CMLTable.addColumn(name:_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, uint64_t, _QWORD))specialized handling<A, B, C, D>(_:_:_:_:));
}

uint64_t _s8CreateML11MLDataTableV14ParsingOptionsVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

void partial apply for closure #1 in CMLTable.init(from:isCSV:options:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in CMLTable.init(from:isCSV:options:)(a1, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t *outlined release of MLDataTable.ParsingOptions?(uint64_t *a1)
{
  outlined consume of MLDataTable.ParsingOptions?(*a1, a1[1], a1[2]);
  return a1;
}

uint64_t outlined consume of MLDataTable.ParsingOptions?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CMLFeatureValueType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 6) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CMLFeatureValueType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_21AE598C0 + 4 * byte_21AFE9605[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_21AE598F4 + 4 * asc_21AFE9600[v4]))();
}

uint64_t sub_21AE598F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AE598FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AE59904);
  return result;
}

uint64_t sub_21AE59910(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AE59918);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_21AE5991C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AE59924(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CMLFeatureValueType()
{
  return &type metadata for CMLFeatureValueType;
}

unint64_t lazy protocol witness table accessor for type CMLFeatureValueType and conformance CMLFeatureValueType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CMLFeatureValueType and conformance CMLFeatureValueType;
  if (!lazy protocol witness table cache variable for type CMLFeatureValueType and conformance CMLFeatureValueType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for CMLFeatureValueType, &type metadata for CMLFeatureValueType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CMLFeatureValueType and conformance CMLFeatureValueType);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_20()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_2_20()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_3_16(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 16) = v1;
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_5_15(unsigned __int8 a1)
{
  uint64_t v1;

  return CMLParameters.add(key:featureValue:)(a1, v1);
}

void OUTLINED_FUNCTION_6_14()
{
  CMLFeatureValue.__allocating_init(_:)();
}

uint64_t OUTLINED_FUNCTION_7_11(uint64_t result)
{
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_8_14()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_10_13(unsigned __int8 a1)
{
  uint64_t v1;

  return CMLParameters.add(key:featureValue:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_12_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_13_16()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_15_9()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t OUTLINED_FUNCTION_21_8()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_22_6()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_23_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
}

uint64_t OUTLINED_FUNCTION_24_7(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t OUTLINED_FUNCTION_26_10(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(void);

  return _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_30_8()
{
  return swift_initStackObject();
}

uint64_t OUTLINED_FUNCTION_31_11(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16));
}

uint64_t OUTLINED_FUNCTION_38_5(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(result + 16) = v2;
  *v1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_39_4()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_41_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_42_5()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_43_6()
{
  return swift_deallocClassInstance();
}

uint64_t OUTLINED_FUNCTION_47_7()
{
  return tc_v1_release();
}

void OUTLINED_FUNCTION_50_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  specialized handling<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30);
}

void OUTLINED_FUNCTION_52_4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  CMLFeatureValue.__allocating_init(_:)(a1, a2);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.init(validation:maxIterations:l1Penalty:l2Penalty:stepSize:convergenceThreshold:featureRescaling:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v22[4];

  v16 = OUTLINED_FUNCTION_3_17();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_QWORD *)a4 = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(double *)(a4 + 56) = a7;
  *(double *)(a4 + 64) = a8;
  *(_BYTE *)(a4 + 72) = a3;
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(a1, (uint64_t)v19);
  v22[3] = v16;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v22);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v19, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v22, a4 + 8);
  return outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(a1);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v5[4];

  v5[3] = OUTLINED_FUNCTION_3_17();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1 + 8);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.maxIterations.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  OUTLINED_FUNCTION_3_17();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_91_1();
  result = outlined init with copy of Any?(v0 + 8, (uint64_t)&v4);
  if (v5)
  {
    outlined init with take of Any(&v4, &v6);
    OUTLINED_FUNCTION_16_0();
    MLLogisticRegressionClassifier.ModelParameters.ValidationData.asTable()();
    return outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLLogisticRegressionClassifier.ModelParameters.validationData : MLLogisticRegressionClassifier.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = MLLogisticRegressionClassifier.ModelParameters.validationData.getter();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for MLLogisticRegressionClassifier.ModelParameters.validationData : MLLogisticRegressionClassifier.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1;
  id v3;
  unsigned __int8 v4;

  v1 = *(_BYTE *)(a1 + 8);
  v3 = *(id *)a1;
  v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v11[4];

  v3 = v1;
  OUTLINED_FUNCTION_3_17();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_91_1();
  v6 = *(void **)a1;
  v7 = *(unsigned __int8 *)(a1 + 8);
  v11[3] = v8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v11);
  if (v7 == 255)
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_WORD *)(v2 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(_QWORD *)v2 = v6;
    *(_BYTE *)(v2 + 8) = v7 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v6, v7);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v2, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v11, v3 + 8);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.validation.getter()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  result = outlined init with copy of Any?(v0 + 8, (uint64_t)&v2);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    OUTLINED_FUNCTION_3_17();
    return OUTLINED_FUNCTION_16_0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*MLLogisticRegressionClassifier.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  MLLogisticRegressionClassifier.ModelParameters.validationData.getter();
  return MLLogisticRegressionClassifier.ModelParameters.validationData.modify;
}

void MLLogisticRegressionClassifier.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned __int8 v5;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(void **)a1;
  v5 = v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of MLDataTable?(v2, v3);
    MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLLogisticRegressionClassifier.ModelParameters.validation : MLLogisticRegressionClassifier.ModelParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData(a1, (uint64_t)v4);
  return MLLogisticRegressionClassifier.ModelParameters.validation.setter((uint64_t)v4);
}

void (*MLLogisticRegressionClassifier.ModelParameters.validation.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void (*result)(uint64_t **, char);

  v3 = malloc(0xA0uLL);
  *a1 = v3;
  v3[16] = v1;
  v4 = OUTLINED_FUNCTION_3_17();
  v3[17] = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[18] = malloc(v5);
  v3[19] = malloc(v5);
  result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v1 + 8, (uint64_t)(v3 + 4));
  if (v3[7])
  {
    outlined init with take of Any((_OWORD *)v3 + 2, v3);
    OUTLINED_FUNCTION_16_0();
    return MLLogisticRegressionClassifier.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLLogisticRegressionClassifier.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v7;

  v2 = *a1;
  v3 = (void *)(*a1)[18];
  v4 = (void *)(*a1)[19];
  v5 = (*a1)[17];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    OUTLINED_FUNCTION_8_15();
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v5;
    v7 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v7);
    OUTLINED_FUNCTION_8_15();
  }
  free(v4);
  free(v3);
  free(v2);
}

double MLLogisticRegressionClassifier.ModelParameters.l1Penalty.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void MLLogisticRegressionClassifier.ModelParameters.l1Penalty.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.l1Penalty.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLogisticRegressionClassifier.ModelParameters.l2Penalty.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void MLLogisticRegressionClassifier.ModelParameters.l2Penalty.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.l2Penalty.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLogisticRegressionClassifier.ModelParameters.stepSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void MLLogisticRegressionClassifier.ModelParameters.stepSize.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.stepSize.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLogisticRegressionClassifier.ModelParameters.convergenceThreshold.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void MLLogisticRegressionClassifier.ModelParameters.convergenceThreshold.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.convergenceThreshold.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.featureRescaling.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.featureRescaling.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = result;
  return result;
}

uint64_t (*MLLogisticRegressionClassifier.ModelParameters.featureRescaling.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLogisticRegressionClassifier.ModelParameters.init(validationData:maxIterations:l1Penalty:l2Penalty:stepSize:convergenceThreshold:featureRescaling:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v8;
  char v9;
  uint64_t v11;
  char v12;

  v8 = *a1;
  v9 = *((_BYTE *)a1 + 8);
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)a4 = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(double *)(a4 + 56) = a7;
  *(double *)(a4 + 64) = a8;
  *(_BYTE *)(a4 + 72) = a3;
  v11 = v8;
  v12 = v9;
  return MLLogisticRegressionClassifier.ModelParameters.validationData.setter((uint64_t)&v11);
}

unint64_t MLLogisticRegressionClassifier.ModelParameters.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;

  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 10;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_4_17(0x6C616E655020314CLL);
  OUTLINED_FUNCTION_1_15();
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_2_21(v3, v4, v5, v6, v7, v8, v9, v10, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_4_17(0x6C616E655020324CLL);
  OUTLINED_FUNCTION_1_15();
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_2_21(v11, v12, v13, v14, v15, v16, v17, v18, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_12_0();
  v19._countAndFlagsBits = 0x7A69532070657453;
  v19._object = (void *)0xEB00000000203A65;
  String.append(_:)(v19);
  OUTLINED_FUNCTION_1_15();
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_2_21(v20, v21, v22, v23, v24, v25, v26, v27, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_12_0();
  _StringGuts.grow(_:)(26);
  v28._countAndFlagsBits = 0xD000000000000017;
  v28._object = (void *)0x800000021AFF3340;
  String.append(_:)(v28);
  OUTLINED_FUNCTION_1_15();
  OUTLINED_FUNCTION_0_21();
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 72))
    v30 = 1702195828;
  else
    v30 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 72))
    v31 = 0xE400000000000000;
  else
    v31 = 0xE500000000000000;
  v32 = v31;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_21();
  v33._countAndFlagsBits = 0xD000000000000013;
  v33._object = (void *)0x800000021AFF3360;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

unint64_t MLLogisticRegressionClassifier.ModelParameters.playgroundDescription.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = MLLogisticRegressionClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21AE5A5C4()
{
  return MLLogisticRegressionClassifier.ModelParameters.validation.getter();
}

uint64_t destroy for MLLogisticRegressionClassifier.ModelParameters(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
    return __swift_destroy_boxed_opaque_existential_0(result + 8);
  return result;
}

uint64_t initializeWithCopy for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;

  v5 = *a2;
  v4 = a2 + 1;
  *(_QWORD *)a1 = v5;
  v6 = (_OWORD *)(a1 + 8);
  v7 = a2[4];
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v6, v4);
  }
  else
  {
    v8 = v4[1];
    *v6 = *v4;
    v6[1] = v8;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  return a1;
}

uint64_t assignWithCopy for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 32) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }
LABEL_7:
    v7 = v5[1];
    *v4 = *v5;
    v4[1] = v7;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_0(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

void *__swift_memcpy73_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x49uLL);
}

uint64_t assignWithTake for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *v4 = *(_OWORD *)(a2 + 8);
  v4[1] = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLogisticRegressionClassifier.ModelParameters(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 73))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 32);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLLogisticRegressionClassifier.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLLogisticRegressionClassifier.ModelParameters()
{
  return &type metadata for MLLogisticRegressionClassifier.ModelParameters;
}

void OUTLINED_FUNCTION_0_21()
{
  Swift::String v0;

  v0._countAndFlagsBits = 10;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_1_15()
{
  return Double.write<A>(to:)();
}

void OUTLINED_FUNCTION_2_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  Swift::String v10;

  v10._countAndFlagsBits = a9;
  v10._object = a10;
  String.append(_:)(v10);
}

uint64_t OUTLINED_FUNCTION_3_17()
{
  return type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
}

void OUTLINED_FUNCTION_4_17(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xEC000000203A7974;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_8_15()
{
  uint64_t v0;
  uint64_t v1;

  return outlined assign with take of Any?(v1, v0);
}

uint64_t static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)@<X0>(uint64_t a1@<X1>, double *a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  void *v15;
  char v16;
  void *v17;
  char *v18;
  double *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;

  v27 = a2;
  v5 = type metadata accessor for DataFrame();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_28_11();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v23 - v8;
  v10 = type metadata accessor for Tensor();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_55_0();
  _MetricUtilities.ConfusionMatrixMeter.value(normalized:)();
  static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v3, *(_QWORD *)(a1 + 16));
  v12 = v11;
  v13 = v28;
  _MetricUtilities.ConfusionMatrixMeter.valueAsMetricTable(classLabels:)(a1, (uint64_t)&v29);
  if (v13)
    return OUTLINED_FUNCTION_18_8();
  v25 = v9;
  v26 = v6;
  v28 = v5;
  v15 = v29;
  v16 = v30;
  static _MetricUtilities.precisionRecall(confusionMatrix:classLabels:)(v3, a1, (uint64_t)&v29);
  v17 = v29;
  HIDWORD(v23) = v30;
  v29 = v15;
  v30 = v16;
  outlined copy of Result<_DataTable, Error>(v15, v16);
  v18 = v25;
  DataFrame.init(_:)((uint64_t)&v29);
  v29 = v17;
  v30 = BYTE4(v23);
  v24 = v2;
  DataFrame.init(_:)((uint64_t)&v29);
  OUTLINED_FUNCTION_51_7();
  OUTLINED_FUNCTION_18_8();
  v19 = v27;
  *v27 = 1.0 - v12;
  v20 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
  v21 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v22 = v28;
  v21((char *)v19 + *(int *)(v20 + 20), v18, v28);
  v21((char *)v19 + *(int *)(v20 + 24), v24, v22);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sds5NeverOTg5015_sS2dIgyd_S2ds5d16OIegnrzr_TR011_sF77Iegnr_C58Iegyd_TR40_ss3absyxxSLRzs13SignedNumericRzlFSd_TG5Tf3npf_nTf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  double *v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v8;
    v4 = (double *)(a1 + 32);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(double *)(result + 8 * v7 + 32) = fabs(v5);
      ++v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_Sds5NeverOTg5022_sS3dIegyyd_Sd_SdtSds5f68OIegnrzr_TR059_s8CreateML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double *v7;
  double *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v27 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  v25 = a2;
  v26 = a1;
  if (v6)
  {
    v7 = (double *)(a1 + 32);
    v8 = (double *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v6;
    v10 = v4;
    v11 = v5;
    v12 = v5;
    while (v4)
    {
      if (!v11)
        goto LABEL_22;
      v13 = *v7;
      v14 = *v8;
      v16 = *(_QWORD *)(v27 + 16);
      v15 = *(_QWORD *)(v27 + 24);
      if (v16 >= v15 >> 1)
      {
        v22 = v10;
        v23 = v12;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v10 = v22;
        v12 = v23;
      }
      --v11;
      *(_QWORD *)(v27 + 16) = v16 + 1;
      *(double *)(v27 + 8 * v16 + 32) = v13 - v14;
      --v4;
      ++v8;
      ++v7;
      if (!--v9)
        goto LABEL_13;
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = v4;
    v12 = v5;
LABEL_13:
    if (v10 <= v12)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_12_0();
      return;
    }
    while (v6 < v10)
    {
      if (v12 == v6)
        goto LABEL_20;
      if (v6 >= v12)
        goto LABEL_24;
      v17 = *(double *)(v26 + 32 + 8 * v6);
      v18 = *(double *)(v25 + 32 + 8 * v6);
      v20 = *(_QWORD *)(v27 + 16);
      v19 = *(_QWORD *)(v27 + 24);
      if (v20 >= v19 >> 1)
      {
        v21 = v10;
        v24 = v12;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v12 = v24;
        v10 = v21;
      }
      ++v6;
      *(_QWORD *)(v27 + 16) = v20 + 1;
      *(double *)(v27 + 8 * v20 + 32) = v17 - v18;
      if (v10 == v6)
        goto LABEL_20;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
}

void _MetricUtilities.ConfusionMatrixMeter.add(predicted:target:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  unsigned int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_20_3();
  v20 = v2;
  v3 = type metadata accessor for FloatingPointRoundingRule();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_20_0();
  type metadata accessor for ScalarType();
  OUTLINED_FUNCTION_96_2();
  MEMORY[0x24BDAC7A8](v5);
  v19 = OUTLINED_FUNCTION_21_9();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_208();
  v17 = v6;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_12_10();
  MEMORY[0x24BDAC7A8](v8);
  v18 = (char *)&v14 - v9;
  Tensor.argmax(squeezingAxis:)();
  static ScalarType.int.getter();
  v16 = *MEMORY[0x24BEE38B8];
  v15 = *(void (**)(uint64_t))(v4 + 104);
  v15(v1);
  Tensor.cast(to:roundingRule:)();
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  OUTLINED_FUNCTION_47_2(v1, v14);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_38_6(v0);
  v10 = v17;
  Tensor.argmax(squeezingAxis:)();
  static ScalarType.int.getter();
  ((void (*)(uint64_t, _QWORD, uint64_t))v15)(v1, v16, v3);
  Tensor.cast(to:roundingRule:)();
  v14(v1, v3);
  OUTLINED_FUNCTION_52_5();
  OUTLINED_FUNCTION_38_6(v10);
  v11 = (uint64_t)v18;
  v12 = Tensor.scalars<A>(as:)();
  v13 = Tensor.scalars<A>(as:)();
  _MetricUtilities.ConfusionMatrixMeter.add(predictedIds:targetIds:)((Swift::OpaquePointer)v12, (Swift::OpaquePointer)v13);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_38_6(v0);
  OUTLINED_FUNCTION_38_6(v11);
  OUTLINED_FUNCTION_9_5();
}

uint64_t static _MetricUtilities.rmse(target:prediction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  uint64_t result;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    OUTLINED_FUNCTION_33_8();
    OUTLINED_FUNCTION_52_1();
    OUTLINED_FUNCTION_27_13();
    v3 = v2;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_123();
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v15 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
      v5 = 0;
      v6 = v15;
      v7 = *(_QWORD *)(v15 + 16);
      do
      {
        v8 = *(double *)(v3 + 8 * v5 + 32);
        v9 = *(_QWORD *)(v15 + 24);
        if (v7 >= v9 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7 + 1, 1);
        ++v5;
        *(_QWORD *)(v15 + 16) = v7 + 1;
        *(double *)(v15 + 8 * v7++ + 32) = v8 * v8;
      }
      while (v4 != v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v6 = MEMORY[0x24BEE4AF8];
    }
    v10 = *(_QWORD *)(v6 + 16);
    if (v10)
    {
      v11 = (double *)(v6 + 32);
      v12 = 0.0;
      do
      {
        v13 = *v11++;
        v12 = v12 + v13;
        --v10;
      }
      while (v10);
    }
    return OUTLINED_FUNCTION_123();
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_197();
    v16._countAndFlagsBits = OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_24_8(v16);
    OUTLINED_FUNCTION_101();
    v17._countAndFlagsBits = 0xD000000000000011;
    v17._object = (void *)0x800000021AFF3470;
    OUTLINED_FUNCTION_24_8(v17);
    v18._countAndFlagsBits = OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_24_8(v18);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_8_16();
    result = OUTLINED_FUNCTION_13_17();
    __break(1u);
  }
  return result;
}

uint64_t static _MetricUtilities.maximumError(target:prediction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    OUTLINED_FUNCTION_33_8();
    OUTLINED_FUNCTION_52_1();
    OUTLINED_FUNCTION_27_13();
    v3 = v2;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_123();
    v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_Sds5NeverOTg5015_sS2dIgyd_S2ds5d16OIegnrzr_TR011_sF77Iegnr_C58Iegyd_TR40_ss3absyxxSLRzs13SignedNumericRzlFSd_TG5Tf3npf_nTf3nnnpf_nTf1cn_n(v3);
    OUTLINED_FUNCTION_101();
    v5 = specialized Sequence<>.max()(v4);
    OUTLINED_FUNCTION_123();
    return v5;
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_197();
    v7._countAndFlagsBits = OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_24_8(v7);
    OUTLINED_FUNCTION_101();
    v8._countAndFlagsBits = 0xD000000000000011;
    v8._object = (void *)0x800000021AFF3470;
    OUTLINED_FUNCTION_24_8(v8);
    v9._countAndFlagsBits = OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_24_8(v9);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_8_16();
    result = OUTLINED_FUNCTION_13_17();
    __break(1u);
  }
  return result;
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.init(classCount:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _DWORD v11[4];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  OUTLINED_FUNCTION_96_2();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + 16) = a1;
  v11[3] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v9 = OUTLINED_FUNCTION_74_2();
  *(_OWORD *)(v9 + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a1;
  lazy protocol witness table accessor for type MLShapedArray<Int32> and conformance MLShapedArray<A>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
  MLShapedArrayProtocol.init(repeating:shape:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v3 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion, v8, v5);
  return v3;
}

Swift::Void __swiftcall _MetricUtilities.ConfusionMatrixMeter.add(predictedIds:targetIds:)(Swift::OpaquePointer predictedIds, Swift::OpaquePointer targetIds)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  char v37;

  OUTLINED_FUNCTION_20_3();
  v4 = v3;
  v6 = v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  v33 = *(_QWORD *)(v7 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v32 = v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArraySlice<Int32>);
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  OUTLINED_FUNCTION_3();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v29 = (char *)&v27 - v15;
  v34 = v4;
  v16 = *(_QWORD *)(v4 + 16);
  if (v16 && (v28 = *(_QWORD *)(v6 + 16)) != 0)
  {
    v17 = *(_QWORD *)(v34 + 32);
    v18 = v2 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_44_7();
    v19 = 0;
    v27 = v16 - 1;
    v35 = xmmword_21AFE7F70;
    while (1)
    {
      v20 = v6;
      v21 = *(_QWORD *)(v6 + 8 * v19 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v22 = OUTLINED_FUNCTION_74_2();
      *(_OWORD *)(v22 + 16) = v35;
      *(_QWORD *)(v22 + 32) = v17;
      *(_QWORD *)(v22 + 40) = v21;
      v23 = OUTLINED_FUNCTION_74_2();
      *(_OWORD *)(v23 + 16) = v35;
      *(_QWORD *)(v23 + 32) = v17;
      *(_QWORD *)(v23 + 40) = v21;
      v24 = v32;
      v25 = v33;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v32, v18, v7);
      lazy protocol witness table accessor for type MLShapedArray<Int32> and conformance MLShapedArray<A>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
      MLShapedArrayProtocol.subscript.getter();
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_47_2(v24, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
      lazy protocol witness table accessor for type MLShapedArray<Int32> and conformance MLShapedArray<A>(&lazy protocol witness table cache variable for type MLShapedArraySlice<Int32> and conformance MLShapedArraySlice<A>, &demangling cache variable for type metadata for MLShapedArraySlice<Int32>);
      v26 = v31;
      MLShapedArrayProtocol.scalar.getter();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v26);
      if ((v37 & 1) != 0)
        break;
      if (__OFADD__(v36, 1))
      {
        __break(1u);
        break;
      }
      ++v36;
      MLShapedArraySlice.init(scalar:)();
      OUTLINED_FUNCTION_44_7();
      MLShapedArrayProtocol.subscript.setter();
      swift_endAccess();
      v6 = v20;
      if (v27 != v19)
      {
        v17 = *(_QWORD *)(v34 + 8 * v19++ + 40);
        if (v28 != v19)
          continue;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    OUTLINED_FUNCTION_9_5();
  }
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.valueAsMetricTable(classLabels:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t inited;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  char v51;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArraySlice<Int32>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v64 = v6;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  v63 = *(_QWORD *)(v62 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v61 = v8;
  v9 = *(_QWORD *)(a1 + 16);
  v56 = v2;
  if (v9 != *(_QWORD *)(v2 + 16))
  {
LABEL_34:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9)
  {
    v60 = v5;
    v10 = 0;
    v65 = v2 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion;
    v55 = a1 + 32;
    v54 = (uint64_t *)(a1 + 40);
    v66 = MEMORY[0x24BEE4AF8];
    v70 = MEMORY[0x24BEE4AF8];
    v67 = MEMORY[0x24BEE4AF8];
    v57 = v4;
    v59 = v9;
    while (1)
    {
      if (v10 == v9)
        goto LABEL_32;
      v11 = *(_QWORD *)(v56 + 16);
      if (v11 < 0)
        break;
      if (v11)
      {
        swift_beginAccess();
        v12 = 0;
        v58 = (uint64_t *)(v55 + 16 * v10);
        v13 = v54;
        do
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
          v14 = OUTLINED_FUNCTION_74_2();
          *(_OWORD *)(v14 + 16) = xmmword_21AFE7F70;
          v15 = v10;
          *(_QWORD *)(v14 + 32) = v10;
          *(_QWORD *)(v14 + 40) = v12;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v61, v65, v62);
          lazy protocol witness table accessor for type MLShapedArray<Int32> and conformance MLShapedArray<A>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
          MLShapedArrayProtocol.subscript.getter();
          OUTLINED_FUNCTION_12_0();
          (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
          lazy protocol witness table accessor for type MLShapedArray<Int32> and conformance MLShapedArray<A>(&lazy protocol witness table cache variable for type MLShapedArraySlice<Int32> and conformance MLShapedArraySlice<A>, &demangling cache variable for type metadata for MLShapedArraySlice<Int32>);
          MLShapedArrayProtocol.scalar.getter();
          (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v64, v4);
          if ((v68 & 0x100000000) == 0)
          {
            v16 = v68;
            if ((int)v68 > 0)
            {
              v18 = *v58;
              v17 = v58[1];
              OUTLINED_FUNCTION_52_1();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                OUTLINED_FUNCTION_29_8();
                v70 = v31;
              }
              v20 = *(_QWORD *)(v70 + 16);
              v19 = *(_QWORD *)(v70 + 24);
              if (v20 >= v19 >> 1)
              {
                OUTLINED_FUNCTION_47_8(v19);
                specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                v70 = v32;
              }
              v21 = v70;
              *(_QWORD *)(v70 + 16) = v20 + 1;
              v22 = v21 + 16 * v20;
              *(_QWORD *)(v22 + 32) = v18;
              *(_QWORD *)(v22 + 40) = v17;
              if (v12 >= v59)
              {
                __break(1u);
LABEL_32:
                __break(1u);
                goto LABEL_33;
              }
              v24 = *(v13 - 1);
              v23 = *v13;
              OUTLINED_FUNCTION_52_1();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                OUTLINED_FUNCTION_29_8();
                v66 = v33;
              }
              v26 = *(_QWORD *)(v66 + 16);
              v25 = *(_QWORD *)(v66 + 24);
              if (v26 >= v25 >> 1)
              {
                OUTLINED_FUNCTION_47_8(v25);
                specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                v66 = v34;
              }
              *(_QWORD *)(v66 + 16) = v26 + 1;
              v27 = v66 + 16 * v26;
              *(_QWORD *)(v27 + 32) = v24;
              *(_QWORD *)(v27 + 40) = v23;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                v35 = OUTLINED_FUNCTION_15_10();
                specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35, v36, v37, v38);
                v67 = v39;
              }
              v4 = v57;
              v10 = v15;
              v28 = *(_QWORD *)(v67 + 16);
              OUTLINED_FUNCTION_30_9();
              if (v30)
              {
                v40 = OUTLINED_FUNCTION_3_18(v29);
                specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40, v41, v42, v67);
                v67 = v43;
              }
              *(_QWORD *)(v67 + 16) = v23;
              *(_QWORD *)(v67 + 8 * v28 + 32) = v16;
            }
          }
          ++v12;
          v13 += 2;
        }
        while (v11 != v12);
      }
      ++v10;
      v9 = v59;
      if (v10 == v59)
        goto LABEL_28;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v66 = MEMORY[0x24BEE4AF8];
  v70 = MEMORY[0x24BEE4AF8];
  v67 = MEMORY[0x24BEE4AF8];
LABEL_28:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  OUTLINED_FUNCTION_37_5();
  *(_QWORD *)(v45 + 32) = v46;
  *(_QWORD *)(v45 + 40) = 0xE500000000000000;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(_QWORD *)(inited + 72) = v47;
  v48 = lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
  *(_QWORD *)(inited + 48) = v70;
  *(_QWORD *)(inited + 80) = v48;
  *(_QWORD *)(inited + 88) = 0x6574636964657270;
  *(_QWORD *)(inited + 128) = v47;
  *(_QWORD *)(inited + 136) = v48;
  *(_QWORD *)(inited + 96) = 0xEF7373616C635F64;
  *(_QWORD *)(inited + 104) = v66;
  *(_QWORD *)(inited + 144) = 0x746E756F63;
  *(_QWORD *)(inited + 152) = 0xE500000000000000;
  *(_QWORD *)(inited + 184) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  *(_QWORD *)(inited + 192) = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
  *(_QWORD *)(inited + 160) = v67;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
  v49 = Dictionary.init(dictionaryLiteral:)();
  result = MLDataTable.init(dictionary:)(v49, (uint64_t)&v68);
  if (!v53)
  {
    v51 = v69;
    *(_QWORD *)a2 = v68;
    *(_BYTE *)(a2 + 8) = v51;
  }
  return result;
}

uint64_t _MetricUtilities.ConfusionMatrixMeter.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for _MetricUtilities.ConfusionMatrixMeter()
{
  return type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
}

uint64_t type metadata accessor for _MetricUtilities.ConfusionMatrixMeter()
{
  uint64_t result;

  result = type metadata singleton initialization cache for _MetricUtilities.ConfusionMatrixMeter;
  if (!type metadata singleton initialization cache for _MetricUtilities.ConfusionMatrixMeter)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for _MetricUtilities.ConfusionMatrixMeter()
{
  unint64_t v0;

  type metadata accessor for MLShapedArray<Int32>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for MLShapedArray<Int32>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for MLShapedArray<Int32>)
  {
    v0 = type metadata accessor for MLShapedArray();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MLShapedArray<Int32>);
  }
}

id static _MetricUtilities.supplementConfusionMatrixWithMissingClasses(_:classes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  id result;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  void *v33;
  char v34;

  v5 = *(void **)a1;
  v6 = (void *)*(unsigned __int8 *)(a1 + 8);
  v33 = *(void **)a1;
  v34 = (char)v6;
  OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_26_11((uint64_t)&v31);
  OUTLINED_FUNCTION_56_4();
  v7 = v31;
  v8 = v32;
  MLUntypedColumn.dropDuplicates()(&v33);
  outlined consume of Result<_DataTable, Error>(v7, v8);
  v9 = v33;
  if ((v34 & 1) != 0)
    goto LABEL_36;
  OUTLINED_FUNCTION_50_5();
  outlined consume of Result<_DataTable, Error>(v9, 0);
  if (v31 != 2)
    goto LABEL_36;
  v10 = (_QWORD *)OUTLINED_FUNCTION_49_3();
  v11 = v10[2];
  v12 = *(_QWORD *)(a2 + 16);
  if (v11 >= v12)
  {
    OUTLINED_FUNCTION_12_0();
    *(_QWORD *)a3 = v5;
    *(_BYTE *)(a3 + 8) = (_BYTE)v6;
    return OUTLINED_FUNCTION_5_16();
  }
  v29 = a3;
  v33 = v5;
  v34 = (char)v6;
  v13 = a2 + 32;
  OUTLINED_FUNCTION_5_16();
  swift_bridgeObjectRetain();
  v14 = 0;
  v6 = 0;
  v30 = a2 + 32;
  while (1)
  {
    if (v14 == v12)
    {
      __break(1u);
      goto LABEL_35;
    }
    v15 = (uint64_t *)(v13 + 16 * v14);
    v17 = *v15;
    v16 = v15[1];
    if (!v11)
      goto LABEL_13;
    v18 = v10[4] == v17 && v10[5] == v16;
    if (!v18 && (OUTLINED_FUNCTION_2_22() & 1) == 0)
    {
      if (v11 == 1)
        goto LABEL_13;
      v22 = v10[6] == v17 && v10[7] == v16;
      if (!v22 && (OUTLINED_FUNCTION_2_22() & 1) == 0)
        break;
    }
LABEL_15:
    if (++v14 == v12)
    {
      OUTLINED_FUNCTION_12_0();
      result = (id)swift_bridgeObjectRelease();
      v28 = v34;
      *(_QWORD *)v29 = v33;
      *(_BYTE *)(v29 + 8) = v28;
      return result;
    }
  }
  if (v11 == 2)
  {
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
    *(_QWORD *)(inited + 32) = 0x7373616C63;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    v20 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 48) = v17;
    *(_QWORD *)(inited + 56) = v16;
    *(_QWORD *)(inited + 80) = &protocol witness table for String;
    *(_QWORD *)(inited + 88) = 0x6574636964657270;
    *(_QWORD *)(inited + 96) = 0xEF7373616C635F64;
    *(_QWORD *)(inited + 104) = v17;
    *(_QWORD *)(inited + 128) = v20;
    *(_QWORD *)(inited + 136) = &protocol witness table for String;
    *(_QWORD *)(inited + 112) = v16;
    *(_QWORD *)(inited + 144) = 0x746E756F63;
    *(_QWORD *)(inited + 152) = 0xE500000000000000;
    *(_QWORD *)(inited + 184) = MEMORY[0x24BEE1768];
    *(_QWORD *)(inited + 192) = &protocol witness table for Int;
    *(_QWORD *)(inited + 160) = 0;
    swift_bridgeObjectRetain_n();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
    v21 = Dictionary.init(dictionaryLiteral:)();
    MLDataTable.init(dictionary:)(v21, (uint64_t)&v31);
    OUTLINED_FUNCTION_19_10();
    OUTLINED_FUNCTION_59_5();
LABEL_14:
    v13 = v30;
    goto LABEL_15;
  }
  v23 = v10 + 9;
  v24 = 2;
  while (1)
  {
    v25 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    v26 = *(v23 - 1) == v17 && *v23 == v16;
    if (v26 || (OUTLINED_FUNCTION_2_22() & 1) != 0)
      goto LABEL_14;
    v23 += 2;
    ++v24;
    if (v25 == v11)
      goto LABEL_13;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  OUTLINED_FUNCTION_48_6();
  __break(1u);

  result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void static _MetricUtilities.supplementPrecisionRecallWithMissingClasses(_:classes:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char v44;
  void *v45;
  char v46;

  OUTLINED_FUNCTION_20_3();
  v1 = v0;
  v38 = v2;
  v4 = *v3;
  v5 = (void *)*((unsigned __int8 *)v3 + 8);
  v43 = *v3;
  v44 = (char)v5;
  OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_26_11((uint64_t)&v45);
  OUTLINED_FUNCTION_56_4();
  v6 = v45;
  if ((v46 & 1) != 0)
    goto LABEL_36;
  OUTLINED_FUNCTION_50_5();
  outlined consume of Result<_DataTable, Error>(v6, 0);
  if (v43 != 2)
    goto LABEL_36;
  v7 = (_QWORD *)OUTLINED_FUNCTION_49_3();
  v8 = v7[2];
  v9 = *(_QWORD *)(v1 + 16);
  if (v8 >= v9)
  {
    OUTLINED_FUNCTION_12_0();
    *(_QWORD *)v38 = v4;
    *(_BYTE *)(v38 + 8) = (_BYTE)v5;
    OUTLINED_FUNCTION_5_16();
LABEL_33:
    OUTLINED_FUNCTION_9_5();
    return;
  }
  v45 = v4;
  v46 = (char)v5;
  v10 = v1 + 32;
  OUTLINED_FUNCTION_5_16();
  swift_bridgeObjectRetain();
  v11 = 0;
  v5 = 0;
  OUTLINED_FUNCTION_197();
  v40 = v12;
  v41 = v13;
  OUTLINED_FUNCTION_197();
  v39 = v14;
  v42 = v1 + 32;
  while (1)
  {
    if (v11 == v9)
    {
      __break(1u);
      goto LABEL_35;
    }
    v15 = (uint64_t *)(v10 + 16 * v11);
    v17 = *v15;
    v16 = v15[1];
    if (!v8)
      goto LABEL_13;
    v18 = v7[4] == v17 && v7[5] == v16;
    if (!v18 && (OUTLINED_FUNCTION_2_22() & 1) == 0)
    {
      if (v8 == 1)
        goto LABEL_13;
      v32 = v7[6] == v17 && v7[7] == v16;
      if (!v32 && (OUTLINED_FUNCTION_2_22() & 1) == 0)
        break;
    }
LABEL_15:
    if (++v11 == v9)
    {
      OUTLINED_FUNCTION_12_0();
      swift_bridgeObjectRelease();
      v37 = v46;
      *(_QWORD *)v38 = v45;
      *(_BYTE *)(v38 + 8) = v37;
      goto LABEL_33;
    }
  }
  if (v8 == 2)
  {
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_21AFE9910;
    OUTLINED_FUNCTION_39_5();
    v19[4] = v20;
    v19[5] = 0xEC000000746E756FLL;
    v19[9] = MEMORY[0x24BEE1768];
    v19[6] = 0;
    OUTLINED_FUNCTION_37_5();
    v21[10] = v23;
    v21[11] = v22;
    v21[12] = 0xE500000000000000;
    v21[16] = MEMORY[0x24BEE0D00];
    v21[17] = &protocol witness table for String;
    v21[13] = v17;
    v21[14] = v16;
    v21[18] = 0xD000000000000016;
    v21[19] = v41;
    v21[20] = 0;
    v21[23] = v24;
    v21[24] = v23;
    OUTLINED_FUNCTION_58_3();
    v25[25] = v26;
    v25[26] = 0xE90000000000006ELL;
    v27 = MEMORY[0x24BEE13C8];
    v25[30] = MEMORY[0x24BEE13C8];
    v25[27] = 0;
    v25[31] = &protocol witness table for Double;
    v25[32] = 0x6C6C61636572;
    v25[37] = v27;
    v25[38] = &protocol witness table for Double;
    v25[33] = 0xE600000000000000;
    v25[34] = 0x7FF8000000000000;
    v25[39] = v28;
    v25[40] = v40;
    v25[44] = v29;
    v25[45] = v30;
    v25[41] = 0;
    v25[46] = v28 + 7;
    v25[47] = v39;
    v25[48] = 0;
    v25[51] = v29;
    v25[52] = v30;
    OUTLINED_FUNCTION_52_1();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
    v31 = Dictionary.init(dictionaryLiteral:)();
    MLDataTable.init(dictionary:)(v31, (uint64_t)&v43);
    OUTLINED_FUNCTION_19_10();
    OUTLINED_FUNCTION_59_5();
LABEL_14:
    v10 = v42;
    goto LABEL_15;
  }
  v33 = v7 + 9;
  v34 = 2;
  while (1)
  {
    v35 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    v36 = *(v33 - 1) == v17 && *v33 == v16;
    if (v36 || (OUTLINED_FUNCTION_2_22() & 1) != 0)
      goto LABEL_14;
    v33 += 2;
    ++v34;
    if (v35 == v8)
      goto LABEL_13;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  OUTLINED_FUNCTION_48_6();
  __break(1u);

  OUTLINED_FUNCTION_13_17();
  __break(1u);
}

void _MetricUtilities.ConfusionMatrixMeter.value(normalized:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;

  OUTLINED_FUNCTION_20_3();
  v60 = v5;
  v61 = v6;
  v7 = type metadata accessor for FloatingPointRoundingRule();
  v58 = *(_QWORD *)(v7 - 8);
  v59 = v7;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ScalarType();
  v56 = *(_QWORD *)(v11 - 8);
  v57 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_55_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  v14 = OUTLINED_FUNCTION_21_9();
  v54 = *(_QWORD *)(v14 - 8);
  v55 = v14;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_208();
  v52 = v16;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_65_5();
  v50 = v18;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_65_5();
  v53 = v20;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_65_5();
  v51 = v22;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_12_10();
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v49 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_20_0();
  type metadata accessor for MLMultiArray();
  v29 = v0 + OBJC_IVAR____TtCV8CreateML16_MetricUtilities20ConfusionMatrixMeter_confusion;
  OUTLINED_FUNCTION_44_7();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v2, v29, v27);
  lazy protocol witness table accessor for type MLShapedArray<Int32> and conformance MLShapedArray<A>(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>);
  v30 = (uint64_t)v26;
  v31 = (void *)MLMultiArray.init<A>(_:)();
  v32 = type metadata accessor for ComputeDevice();
  OUTLINED_FUNCTION_37_0(v4, v33, v34, v32);
  v35 = v31;
  Tensor.init(_:device:)(v35, v4);
  v36 = v56;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v56 + 104))(v3, *MEMORY[0x24BE6B8B8], v57);
  v38 = v58;
  v37 = v59;
  (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v10, *MEMORY[0x24BEE38B8], v59);
  Tensor.cast(to:roundingRule:)();
  v39 = v10;
  v40 = v37;
  v41 = v54;
  v42 = v55;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  OUTLINED_FUNCTION_47_2(v3, *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
  OUTLINED_FUNCTION_22_7(v1);
  if ((v60 & 1) == 0)
  {

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v61, v30, v42);
    goto LABEL_6;
  }
  v43 = Tensor.rank.getter();
  if (v43 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_42_6(v43);
    v44 = v51;
    Tensor.transposed(permutation:)();
    OUTLINED_FUNCTION_123();
    v45 = v50;
    Tensor.sum(squeezingAxes:)();
    v46 = v52;
    Tensor.init(floatLiteral:)();
    v47 = v53;
    static Tensor.+ infix(_:_:)();
    OUTLINED_FUNCTION_22_7(v46);
    OUTLINED_FUNCTION_22_7(v45);
    static Tensor./ infix(_:_:)();
    OUTLINED_FUNCTION_22_7(v47);
    OUTLINED_FUNCTION_22_7(v44);
    v48 = Tensor.rank.getter();
    if ((v48 & 0x8000000000000000) == 0)
    {
      OUTLINED_FUNCTION_42_6(v48);
      Tensor.transposed(permutation:)();

      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_22_7(v1);
      OUTLINED_FUNCTION_22_7(v30);
LABEL_6:
      OUTLINED_FUNCTION_9_5();
      return;
    }
  }
  __break(1u);
}

uint64_t static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_20_0();
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_96_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_28_11();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_12_10();
  result = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v16 - v11;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v16[0] = 0;
    v16[1] = a2;
    v13 = type metadata accessor for ComputeDevice();
    OUTLINED_FUNCTION_37_0(v4, v14, v15, v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    Tensor.init<A>(oneHotAtIndices:depth:onValue:offValue:on:)();
    static Tensor.* infix(_:_:)();
    Tensor.sum()();
    OUTLINED_FUNCTION_76(v3);
    OUTLINED_FUNCTION_23_9();
    OUTLINED_FUNCTION_76(v2);
    Tensor.sum()();
    OUTLINED_FUNCTION_23_9();
    OUTLINED_FUNCTION_76(v2);
    return OUTLINED_FUNCTION_76((uint64_t)v12);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v2 = lazy protocol witness table accessor for type Int and conformance Int();
    v3[0] = MEMORY[0x24BEE17A8];
    v3[1] = v2;
    result = MEMORY[0x22075B938](MEMORY[0x24BEE1BD8], v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v2 = lazy protocol witness table accessor for type Int and conformance Int();
    v3[0] = MEMORY[0x24BEE17A8];
    v3[1] = v2;
    result = MEMORY[0x22075B938](MEMORY[0x24BEE1BB8], v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

unint64_t type metadata accessor for MLMultiArray()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MLMultiArray;
  if (!lazy cache variable for type metadata for MLMultiArray)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  }
  return result;
}

uint64_t static _MetricUtilities.precisionRecall(confusionMatrix:classLabels:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  _QWORD *v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  __n128 *v38;
  _QWORD *v39;
  uint64_t v40;
  __n128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  _QWORD *v51;
  uint64_t v52;
  __n128 *v53;
  _QWORD *v54;
  uint64_t v55;
  __n128 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  __n128 *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t result;
  float v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BOOL8 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t inited;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  _QWORD v119[2];
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  char v145;

  v5 = v3;
  v140 = a1;
  v143 = type metadata accessor for Tensor();
  v124 = *(_QWORD *)(v143 - 8);
  OUTLINED_FUNCTION_3();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_12_10();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_65_5();
  v132 = v13;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_65_5();
  v131 = v15;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_65_5();
  v130 = v17;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_65_5();
  v139 = v19;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_65_5();
  v138 = v21;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v119 - v23;
  v123 = *(_QWORD *)(a2 + 16);
  if (v123)
  {
    v120 = v3;
    v121 = a3;
    OUTLINED_FUNCTION_52_1();
    v25 = 0;
    v119[1] = a2;
    v26 = (_QWORD *)(a2 + 40);
    v142 = xmmword_21AFE7DA0;
    v141 = MEMORY[0x24BEE4AF8];
    v133 = MEMORY[0x24BEE4AF8];
    v134 = MEMORY[0x24BEE4AF8];
    v135 = MEMORY[0x24BEE4AF8];
    v122 = v11;
    v137 = v4;
    v129 = v24;
    while (1)
    {
      v27 = *(v26 - 1);
      v28 = *v26;
      v126 = v26;
      v127 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TensorRangeExpression?>);
      v29 = (__n128 *)OUTLINED_FUNCTION_0_22();
      OUTLINED_FUNCTION_4_18(v29);
      v30[7] = MEMORY[0x24BEE1768];
      v31 = MEMORY[0x24BE6C248];
      v30[8] = MEMORY[0x24BE6C248];
      v30[4] = v25;
      v128 = v28;
      OUTLINED_FUNCTION_52_1();
      v32 = v138;
      Tensor.subscript.getter();
      OUTLINED_FUNCTION_12_0();
      v33 = (__n128 *)OUTLINED_FUNCTION_0_22();
      OUTLINED_FUNCTION_4_18(v33);
      v34[7] = MEMORY[0x24BEE1768];
      v34[8] = v31;
      v34[4] = v25;
      v35 = v32;
      Tensor.subscript.getter();
      OUTLINED_FUNCTION_12_0();
      v36 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
      OUTLINED_FUNCTION_16_12(v35);
      v37 = v130;
      Tensor.sum(alongAxes:)();
      v38 = (__n128 *)OUTLINED_FUNCTION_0_22();
      OUTLINED_FUNCTION_4_18(v38);
      v39[7] = MEMORY[0x24BEE1768];
      v39[8] = MEMORY[0x24BE6C248];
      v39[4] = 0;
      v40 = v131;
      Tensor.subscript.getter();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_16_12(v37);
      v41 = (__n128 *)OUTLINED_FUNCTION_0_22();
      OUTLINED_FUNCTION_62_6(v41);
      *(_QWORD *)(v42 + 64) = MEMORY[0x24BE6C248];
      *(_QWORD *)(v42 + 32) = v25;
      v43 = v25;
      v44 = v132;
      Tensor.subscript.getter();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_16_12(v40);
      v45 = v139;
      static Tensor./ infix(_:_:)();
      OUTLINED_FUNCTION_16_12(v44);
      OUTLINED_FUNCTION_16_12(v45);
      v46 = (__n128 *)OUTLINED_FUNCTION_0_22();
      OUTLINED_FUNCTION_4_18(v46);
      v47[7] = MEMORY[0x24BEE1768];
      v47[8] = MEMORY[0x24BE6C248];
      v48 = v43;
      v47[4] = v43;
      v49 = v138;
      Tensor.subscript.getter();
      OUTLINED_FUNCTION_12_0();
      v50 = (__n128 *)OUTLINED_FUNCTION_0_22();
      OUTLINED_FUNCTION_4_18(v50);
      v51[7] = MEMORY[0x24BEE1768];
      v51[8] = MEMORY[0x24BE6C248];
      v51[4] = v48;
      v136 = v48;
      Tensor.subscript.getter();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_16_12(v49);
      v52 = v130;
      Tensor.sum(alongAxes:)();
      v53 = (__n128 *)OUTLINED_FUNCTION_0_22();
      OUTLINED_FUNCTION_4_18(v53);
      v54[7] = MEMORY[0x24BEE1768];
      v54[8] = MEMORY[0x24BE6C248];
      v54[4] = v48;
      v55 = v131;
      Tensor.subscript.getter();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_16_12(v52);
      v56 = (__n128 *)OUTLINED_FUNCTION_0_22();
      OUTLINED_FUNCTION_62_6(v56);
      v57 = MEMORY[0x24BE6C248];
      *(_QWORD *)(v58 + 64) = MEMORY[0x24BE6C248];
      *(_QWORD *)(v58 + 32) = 0;
      v59 = v132;
      Tensor.subscript.getter();
      OUTLINED_FUNCTION_12_0();
      v60 = v143;
      OUTLINED_FUNCTION_53_7(v55);
      v61 = v139;
      static Tensor./ infix(_:_:)();
      OUTLINED_FUNCTION_53_7(v59);
      OUTLINED_FUNCTION_53_7(v61);
      v62 = v122;
      v63 = (__n128 *)OUTLINED_FUNCTION_0_22();
      OUTLINED_FUNCTION_4_18(v63);
      v64[7] = MEMORY[0x24BEE1768];
      v64[8] = v57;
      v64[4] = v136;
      v65 = v138;
      Tensor.subscript.getter();
      OUTLINED_FUNCTION_12_0();
      v66 = v65;
      Tensor.sum()();
      v125 = v36;
      v36(v65, v60);
      v67 = v134;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_15_10();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v67 = v91;
      }
      v68 = *(_QWORD *)(v67 + 16);
      OUTLINED_FUNCTION_30_9();
      v70 = v135;
      v71 = v133;
      v72 = v129;
      if (v73)
      {
        OUTLINED_FUNCTION_3_18(v69);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v67 = v92;
      }
      *(_QWORD *)(v67 + 16) = v66;
      v74 = v67 + 16 * v68;
      v75 = v128;
      *(_QWORD *)(v74 + 32) = v127;
      *(_QWORD *)(v74 + 40) = v75;
      Tensor.scalar<A>(as:)();
      v76 = *(float *)&v144;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v77 = v141;
      }
      else
      {
        OUTLINED_FUNCTION_15_10();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v77 = v93;
      }
      v78 = *(_QWORD *)(v77 + 16);
      OUTLINED_FUNCTION_30_9();
      if (v73)
      {
        OUTLINED_FUNCTION_3_18(v80);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v79 = v94;
      }
      *(_QWORD *)(v79 + 16) = v72;
      v141 = v79;
      *(double *)(v79 + 8 * v78 + 32) = v76;
      v81 = v137;
      Tensor.scalar<A>(as:)();
      v82 = *(float *)&v144;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_15_10();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v71 = v95;
      }
      v83 = *(_QWORD *)(v71 + 16);
      OUTLINED_FUNCTION_30_9();
      if (v73)
      {
        OUTLINED_FUNCTION_3_18(v84);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v71 = v96;
      }
      *(_QWORD *)(v71 + 16) = v81;
      *(double *)(v71 + 8 * v83 + 32) = v82;
      result = Tensor.scalar<A>(as:)();
      v86 = *(float *)&v144;
      if ((~(_DWORD)v144 & 0x7F800000) == 0)
        break;
      if (*(float *)&v144 <= -9.2234e18)
        goto LABEL_30;
      if (*(float *)&v144 >= 9.2234e18)
        goto LABEL_31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v97 = OUTLINED_FUNCTION_15_10();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v97, v98, v99, v70);
        v70 = v100;
      }
      v87 = *(_QWORD *)(v70 + 16);
      OUTLINED_FUNCTION_30_9();
      if (v73)
      {
        v101 = OUTLINED_FUNCTION_3_18(v88);
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v101, v102, v103, v70);
        v70 = v104;
      }
      v133 = v71;
      v134 = v67;
      v25 = v136 + 1;
      v26 = v126 + 2;
      *(_QWORD *)(v70 + 16) = v62;
      v135 = v70;
      *(_QWORD *)(v70 + 8 * v87 + 32) = (uint64_t)v86;
      v89 = v143;
      v90 = v125;
      v125((uint64_t)v62, v143);
      v90(v137, v89);
      v90((uint64_t)v72, v89);
      if (v123 == v25)
      {
        swift_bridgeObjectRelease();
        v5 = v120;
        a3 = v121;
        v105 = v134;
        v106 = v135;
        v107 = v133;
        v108 = v141;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
    v105 = MEMORY[0x24BEE4AF8];
    v108 = MEMORY[0x24BEE4AF8];
    v107 = MEMORY[0x24BEE4AF8];
    v106 = MEMORY[0x24BEE4AF8];
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7D90;
    OUTLINED_FUNCTION_37_5();
    *(_QWORD *)(v110 + 32) = v111;
    *(_QWORD *)(v110 + 40) = 0xE500000000000000;
    *(_QWORD *)(inited + 72) = OUTLINED_FUNCTION_41_4();
    OUTLINED_FUNCTION_60_4((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    *(_QWORD *)(inited + 48) = v105;
    OUTLINED_FUNCTION_58_3();
    *(_QWORD *)(inited + 80) = v112;
    *(_QWORD *)(inited + 88) = v113;
    *(_QWORD *)(inited + 96) = 0xE90000000000006ELL;
    v114 = OUTLINED_FUNCTION_41_4();
    *(_QWORD *)(inited + 128) = v114;
    v115 = OUTLINED_FUNCTION_60_4(&lazy protocol witness table cache variable for type [Double] and conformance <A> [A]);
    *(_QWORD *)(inited + 104) = v108;
    *(_QWORD *)(inited + 136) = v115;
    *(_QWORD *)(inited + 144) = 0x6C6C61636572;
    *(_QWORD *)(inited + 184) = v114;
    *(_QWORD *)(inited + 192) = v115;
    *(_QWORD *)(inited + 152) = 0xE600000000000000;
    *(_QWORD *)(inited + 160) = v107;
    OUTLINED_FUNCTION_39_5();
    *(_QWORD *)(inited + 200) = v116;
    *(_QWORD *)(inited + 208) = 0xEC000000746E756FLL;
    *(_QWORD *)(inited + 240) = OUTLINED_FUNCTION_41_4();
    *(_QWORD *)(inited + 248) = OUTLINED_FUNCTION_60_4(&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
    *(_QWORD *)(inited + 216) = v106;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
    v117 = Dictionary.init(dictionaryLiteral:)();
    result = MLDataTable.init(dictionary:)(v117, (uint64_t)&v144);
    if (!v5)
    {
      v118 = v145;
      *(_QWORD *)a3 = v144;
      *(_BYTE *)(a3 + 8) = v118;
    }
  }
  return result;
}

uint64_t specialized Sequence.reversed()(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t i;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4 < 2)
    return v3;
  v5 = 0;
  v6 = v4 >> 1;
  for (i = v4 + 3; ; --i)
  {
    if (v5 == i - 4)
      goto LABEL_10;
    v8 = *(_QWORD *)(v3 + 16);
    if (v5 >= v8)
      break;
    if (i - 4 >= v8)
      goto LABEL_13;
    v9 = *(_QWORD *)(v3 + 8 * v5 + 32);
    v10 = *(_QWORD *)(v3 + 8 * i);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      v3 = result;
    }
    *(_QWORD *)(v3 + 8 * v5 + 32) = v10;
    *(_QWORD *)(v3 + 8 * i) = v9;
LABEL_10:
    if (v6 == ++v5)
      return v3;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || &v13[8 * v8] <= v12)
      memmove(v12, v13, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12)
      memmove(v12, v13, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  OUTLINED_FUNCTION_123();
  return v10;
}

uint64_t lazy protocol witness table accessor for type MLShapedArray<Int32> and conformance MLShapedArray<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = OUTLINED_FUNCTION_45_5(0, a2);
    result = MEMORY[0x22075B938](v2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v5 = OUTLINED_FUNCTION_45_5(0, a2);
    v6 = v2;
    result = MEMORY[0x22075B938](&protocol conformance descriptor for <A> [A], v5, &v6);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for _MetricUtilities()
{
  return &type metadata for _MetricUtilities;
}

uint64_t OUTLINED_FUNCTION_0_22()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_2_22()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

BOOL OUTLINED_FUNCTION_3_18@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

__n128 OUTLINED_FUNCTION_4_18(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = v1[12];
  a1[1] = result;
  return result;
}

id OUTLINED_FUNCTION_5_16()
{
  char v0;
  void *v1;

  return outlined copy of Result<_DataTable, Error>(v1, v0);
}

uint64_t OUTLINED_FUNCTION_7_12()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_8_16()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x20746F6E206F6420;
  v0._object = (void *)0xED0000686374616DLL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_13_17()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_15_10()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_16_12(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, _QWORD);

  return v2(a1, *(_QWORD *)(v1 + 208));
}

uint64_t OUTLINED_FUNCTION_18_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void OUTLINED_FUNCTION_19_10()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 - 112);
  *(_QWORD *)(v0 - 120) = *(_QWORD *)(v0 - 120);
  *(_BYTE *)(v0 - 112) = v1;
  MLDataTable.append(contentsOf:)();
}

uint64_t OUTLINED_FUNCTION_21_9()
{
  return type metadata accessor for Tensor();
}

uint64_t OUTLINED_FUNCTION_22_7(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_23_9()
{
  return Tensor.scalar<A>(as:)();
}

void OUTLINED_FUNCTION_24_8(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_26_11(uint64_t a1@<X8>)
{
  MLDataTable.subscript.getter(0x7373616C63, (void *)0xE500000000000000, a1);
}

void OUTLINED_FUNCTION_27_13()
{
  uint64_t v0;
  uint64_t v1;

  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySdGAHG_Sds5NeverOTg5022_sS3dIegyyd_Sd_SdtSds5f68OIegnrzr_TR059_s8CreateML16_MetricUtilitiesV4rmse6target10predictionJ35SayH19G_AGtFZS2d_Sdtcfu0_Tf3nnnpf_nTf1cn_nTm(v0, v1);
}

void OUTLINED_FUNCTION_29_8()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_33_8()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_38_6(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_41_4()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_42_6(uint64_t a1)
{
  return specialized Sequence.reversed()(0, a1);
}

uint64_t OUTLINED_FUNCTION_44_7()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_45_5(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
}

BOOL OUTLINED_FUNCTION_47_8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void OUTLINED_FUNCTION_48_6()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_49_3()
{
  void *v0;

  return specialized Array<A>.init(_:)(v0, 0);
}

void OUTLINED_FUNCTION_50_5()
{
  void *v0;
  uint64_t v1;

  outlined copy of Result<_DataTable, Error>(v0, 0);
  _UntypedColumn.type.getter((_BYTE *)(v1 - 120));
}

void OUTLINED_FUNCTION_51_7()
{
  char v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v1, v0);
}

uint64_t OUTLINED_FUNCTION_52_5()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_53_7(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_56_4()
{
  char v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v1, v0);
}

void OUTLINED_FUNCTION_59_5()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_60_4(unint64_t *a1)
{
  uint64_t *v1;

  return lazy protocol witness table accessor for type [String] and conformance <A> [A](a1, v1);
}

__n128 OUTLINED_FUNCTION_62_6(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  result = v1[12];
  a1[1] = result;
  a1[3].n128_u64[1] = v2;
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML23MLRandomForestRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML23ijk3V15lm76V13configuration10validationAE0A12MLComponents24BoostedTreeConfigurationV_11c7Data0O5e12VSgtcfcAE010N21O0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for DataFrame();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)v10, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {
    v11 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
    v12 = a2;
    v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
    v14 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 = a2;
    v13 = 0;
    v11 = v14;
  }
  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v11);
}

uint64_t MLRandomForestRegressor.ModelParameters.init(validation:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:rowSubsample:columnSubsample:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  uint64_t v9;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v24[4];

  v19 = OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  *(double *)&v21 = OUTLINED_FUNCTION_7_13();
  *(_OWORD *)a5 = v21;
  *(_OWORD *)(a5 + 16) = v21;
  *(_QWORD *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 104) = 0;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 32) = a2;
  *(_QWORD *)(a5 + 40) = a3;
  *(double *)(a5 + 48) = a6;
  *(double *)(a5 + 56) = a7;
  *(_QWORD *)(a5 + 64) = a4;
  *(double *)(a5 + 72) = a8;
  *(double *)(a5 + 80) = a9;
  outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(a1, v9);
  v24[3] = v19;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v24);
  OUTLINED_FUNCTION_19_11((uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v24, a5);
  return outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(a1);
}

uint64_t outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLRandomForestRegressor.ModelParameters.validation.getter()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  result = outlined init with copy of Any?(v0, (uint64_t)&v2, &demangling cache variable for type metadata for Any?);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    OUTLINED_FUNCTION_3_19();
    return OUTLINED_FUNCTION_16_0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLRandomForestRegressor.ModelParameters.init(validationData:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:rowSubsample:columnSubsample:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;

  v9 = *a1;
  v10 = *((_BYTE *)a1 + 8);
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 104) = 0;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 32) = a2;
  *(_QWORD *)(a5 + 40) = a3;
  *(double *)(a5 + 48) = a6;
  *(double *)(a5 + 56) = a7;
  *(_QWORD *)(a5 + 64) = a4;
  *(double *)(a5 + 72) = a8;
  *(double *)(a5 + 80) = a9;
  v11 = v9;
  v12 = v10;
  MLRandomForestRegressor.ModelParameters.validationData.setter((uint64_t)&v11);
}

void MLRandomForestRegressor.ModelParameters.init(configuration:validation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v19;
  uint64_t v20[4];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLRandomForestRegressor.ModelParameters.ValidationData?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_49();
  v10 = v9 - v8;
  v11 = OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  *(double *)&v13 = OUTLINED_FUNCTION_7_13();
  *(_OWORD *)a3 = v13;
  *(_OWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 32) = BoostedTreeConfiguration.maximumDepth.getter();
  *(_QWORD *)(a3 + 40) = BoostedTreeConfiguration.maximumIterations.getter();
  BoostedTreeConfiguration.minimumLossReduction.getter();
  *(_QWORD *)(a3 + 48) = v14;
  BoostedTreeConfiguration.minimumChildWeight.getter();
  *(_QWORD *)(a3 + 56) = v15;
  *(_QWORD *)(a3 + 64) = BoostedTreeConfiguration.randomSeed.getter();
  BoostedTreeConfiguration.rowSubsample.getter();
  *(_QWORD *)(a3 + 72) = v16;
  BoostedTreeConfiguration.columnSubsample.getter();
  *(_QWORD *)(a3 + 80) = v17;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML23MLRandomForestRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML23ijk3V15lm76V13configuration10validationAE0A12MLComponents24BoostedTreeConfigurationV_11c7Data0O5e12VSgtcfcAE010N21O0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(a2, v10);
  if (__swift_getEnumTagSinglePayload(v10, 1, v11) == 1)
  {
    swift_storeEnumTagMultiPayload();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v10, &demangling cache variable for type metadata for MLRandomForestRegressor.ModelParameters.ValidationData?);
  }
  else
  {
    outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData(v10, v3);
  }
  v20[3] = v11;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v20);
  OUTLINED_FUNCTION_19_11((uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v20, a3);
  outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(a2, &demangling cache variable for type metadata for DataFrame?);
  v19 = type metadata accessor for BoostedTreeConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLRandomForestRegressor.ModelParameters.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;

  v47 = 0x747065442078614DLL;
  v48 = 0xEB00000000203A68;
  v1._countAndFlagsBits = OUTLINED_FUNCTION_5_11();
  String.append(_:)(v1);
  OUTLINED_FUNCTION_12_0();
  v2._countAndFlagsBits = 10;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = 0xD000000000000010;
  v46._object = (void *)0x800000021AFF13A0;
  v42 = *(_QWORD *)(v0 + 40);
  v49._countAndFlagsBits = OUTLINED_FUNCTION_5_11();
  OUTLINED_FUNCTION_13_0(v49);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_0_1();
  v3._countAndFlagsBits = 0xD000000000000010;
  v3._object = (void *)0x800000021AFF13A0;
  String.append(_:)(v3);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(23);
  OUTLINED_FUNCTION_14_0();
  v50._countAndFlagsBits = 0xD000000000000014;
  v50._object = (void *)0x800000021AFF13C0;
  OUTLINED_FUNCTION_13_0(v50);
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_0(v4, v5, v6, v7, v8, v9, v10, v11, v38, v42, 0xD000000000000010, (void *)0x800000021AFF13A0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_6_0((uint64_t)"Min Child Weight: ");
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_0(v12, v13, v14, v15, v16, v17, v18, v19, v39, v43, v46._countAndFlagsBits, v46._object);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v46, "Random Seed: ");
  HIWORD(v46._object) = -4864;
  v44 = *(_QWORD *)(v0 + 64);
  v51._countAndFlagsBits = OUTLINED_FUNCTION_5_11();
  OUTLINED_FUNCTION_13_0(v51);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_8(v20, v21, v22, v23, v24, v25, v26, v27, v40, v44, v46._countAndFlagsBits, v46._object);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(18);
  OUTLINED_FUNCTION_14_0();
  v28._countAndFlagsBits = 0x7362755320776F52;
  v28._object = (void *)0xEF203A656C706D61;
  String.append(_:)(v28);
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_8(v29, v30, v31, v32, v33, v34, v35, v36, v41, v45, v46._countAndFlagsBits, v46._object);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_6_0((uint64_t)"Column Subsample: ");
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_0_1();
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  return 0x747065442078614DLL;
}

uint64_t MLRandomForestRegressor.ModelParameters.validationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v1 = v0;
  OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v5 = v4 - v3;
  result = outlined init with copy of Any?(v1, (uint64_t)&v7, &demangling cache variable for type metadata for Any?);
  if (v8)
  {
    outlined init with take of Any(&v7, &v9);
    OUTLINED_FUNCTION_16_0();
    MLRandomForestRegressor.ModelParameters.ValidationData.table.getter();
    return outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLRandomForestRegressor.ModelParameters.validationData : MLRandomForestRegressor.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = MLRandomForestRegressor.ModelParameters.validationData.getter();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

void key path setter for MLRandomForestRegressor.ModelParameters.validationData : MLRandomForestRegressor.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1;
  id v2;
  unsigned __int8 v3;

  v1 = *(_BYTE *)(a1 + 8);
  v2 = *(id *)a1;
  v3 = v1;
  outlined copy of MLDataTable?(v2, v1);
  MLRandomForestRegressor.ModelParameters.validationData.setter((uint64_t)&v2);
}

void MLRandomForestRegressor.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v12[4];

  v2 = v1;
  OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  v8 = *(void **)a1;
  v9 = *(unsigned __int8 *)(a1 + 8);
  v12[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v12);
  if (v9 == 255)
  {
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(_QWORD *)v7 = v8;
    *(_BYTE *)(v7 + 8) = v9 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData(v7, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v12, v2);
  OUTLINED_FUNCTION_8_0();
}

void (*MLRandomForestRegressor.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  MLRandomForestRegressor.ModelParameters.validationData.getter();
  return MLRandomForestRegressor.ModelParameters.validationData.modify;
}

void MLRandomForestRegressor.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned __int8 v5;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(void **)a1;
  v5 = v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of MLDataTable?(v2, v3);
    MLRandomForestRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    MLRandomForestRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLRandomForestRegressor.ModelParameters.validation : MLRandomForestRegressor.ModelParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(a1, (uint64_t)v4);
  return MLRandomForestRegressor.ModelParameters.validation.setter((uint64_t)v4);
}

uint64_t MLRandomForestRegressor.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v5[4];

  v5[3] = OUTLINED_FUNCTION_3_19();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1);
}

uint64_t outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*MLRandomForestRegressor.ModelParameters.validation.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  void (*result)(uint64_t **, char);

  v2 = v1;
  v4 = malloc(0xA0uLL);
  *a1 = v4;
  v4[16] = v2;
  v5 = OUTLINED_FUNCTION_3_19();
  v4[17] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[18] = malloc(v6);
  v4[19] = malloc(v6);
  result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v2, (uint64_t)(v4 + 4), &demangling cache variable for type metadata for Any?);
  if (v4[7])
  {
    outlined init with take of Any((_OWORD *)v4 + 2, v4);
    OUTLINED_FUNCTION_16_0();
    return MLRandomForestRegressor.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLRandomForestRegressor.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v7;

  v2 = *a1;
  v3 = (void *)(*a1)[18];
  v4 = (void *)(*a1)[19];
  v5 = (*a1)[17];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    OUTLINED_FUNCTION_8_15();
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v5;
    v7 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v7);
    OUTLINED_FUNCTION_8_15();
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t MLRandomForestRegressor.ModelParameters.maxDepth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t MLRandomForestRegressor.ModelParameters.maxDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*MLRandomForestRegressor.ModelParameters.maxDepth.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.ModelParameters.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t MLRandomForestRegressor.ModelParameters.maxIterations.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*MLRandomForestRegressor.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestRegressor.ModelParameters.minLossReduction.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void MLRandomForestRegressor.ModelParameters.minLossReduction.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLRandomForestRegressor.ModelParameters.minLossReduction.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestRegressor.ModelParameters.minChildWeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void MLRandomForestRegressor.ModelParameters.minChildWeight.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*MLRandomForestRegressor.ModelParameters.minChildWeight.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.ModelParameters.randomSeed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t MLRandomForestRegressor.ModelParameters.randomSeed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*MLRandomForestRegressor.ModelParameters.randomSeed.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestRegressor.ModelParameters.rowSubsample.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

void MLRandomForestRegressor.ModelParameters.rowSubsample.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 72) = a1;
}

uint64_t (*MLRandomForestRegressor.ModelParameters.rowSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestRegressor.ModelParameters.columnSubsample.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

void MLRandomForestRegressor.ModelParameters.columnSubsample.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 80) = a1;
}

uint64_t (*MLRandomForestRegressor.ModelParameters.columnSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestRegressor.ModelParameters.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MLRandomForestRegressor.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21AE5E72C()
{
  return MLRandomForestRegressor.ModelParameters.validation.getter();
}

uint64_t initializeWithCopy for MLRandomForestRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithCopy for MLRandomForestRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t assignWithTake for MLRandomForestRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

ValueMetadata *type metadata accessor for MLRandomForestRegressor.ModelParameters()
{
  return &type metadata for MLRandomForestRegressor.ModelParameters;
}

uint64_t OUTLINED_FUNCTION_2_23()
{
  return Double.write<A>(to:)();
}

uint64_t OUTLINED_FUNCTION_3_19()
{
  return type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
}

double OUTLINED_FUNCTION_7_13()
{
  return 0.0;
}

void OUTLINED_FUNCTION_11_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  Swift::String v12;

  v12._countAndFlagsBits = a11;
  v12._object = a12;
  String.append(_:)(v12);
}

uint64_t OUTLINED_FUNCTION_19_11(uint64_t a1)
{
  uint64_t v1;

  return outlined init with take of MLRandomForestRegressor.ModelParameters.ValidationData(v1, a1);
}

void static Conv2D.loadLayer(from:layerName:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  unint64_t v40;
  void (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42;
  unint64_t v43;
  const char *v44;
  uint64_t v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  double v74;
  double v75;
  char v76;
  unint64_t v77;
  double v78;
  double v79;
  uint64_t v80;
  unint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  double v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v86 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TensorShape?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  v99 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Tensor();
  v97 = *(_QWORD *)(v14 - 8);
  v98 = v14;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_208();
  v96 = v16;
  MEMORY[0x24BDAC7A8](v17);
  v105 = (uint64_t)&v86 - v18;
  v19 = type metadata accessor for TensorShape();
  v101 = *(_QWORD *)(v19 - 8);
  v102 = v19;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_208();
  v95 = v21;
  MEMORY[0x24BDAC7A8](v22);
  v100 = (char *)&v86 - v23;
  OUTLINED_FUNCTION_1_16();
  v24._countAndFlagsBits = OUTLINED_FUNCTION_12_11() & 0xFFFFFFFFFFFFLL | 0x74000000000000;
  v24._object = (void *)0xE700000000000000;
  String.append(_:)(v24);
  v25 = OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_30();
  if (!v25)
  {
    OUTLINED_FUNCTION_4_19();
    _StringGuts.grow(_:)(39);
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_6_15();
    v43 = v42 - 1;
    v44 = ".weight not found in state dictionary";
LABEL_22:
    v46 = (unint64_t)(v44 - 32) | 0x8000000000000000;
LABEL_28:
    String.append(_:)(*(Swift::String *)&v43);
    v49 = v103;
    v48 = v104;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v50 = v49;
    *(_QWORD *)(v50 + 8) = v48;
    *(_OWORD *)(v50 + 16) = 0u;
    *(_OWORD *)(v50 + 32) = 0u;
    *(_BYTE *)(v50 + 48) = 2;
    swift_willThrow(0.0);
    return;
  }
  v94 = v9;
  OUTLINED_FUNCTION_1_16();
  v26._countAndFlagsBits = OUTLINED_FUNCTION_12_11() & 0xFFFFFFFFFFFFLL | 0x2E74000000000000;
  v26._object = (void *)0xED00006570616873;
  String.append(_:)(v26);
  v27 = OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_30();
  if (!v27)
  {
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_4_19();
    _StringGuts.grow(_:)(45);
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_6_15();
    v43 = v45 + 5;
    v44 = ".weight.shape not found in state dictionary";
    goto LABEL_22;
  }
  v93 = a3;
  OUTLINED_FUNCTION_1_16();
  v28._countAndFlagsBits = 0x736564697274732ELL;
  v28._object = (void *)0xE800000000000000;
  String.append(_:)(v28);
  v29 = OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_30();
  if (!v29)
  {
LABEL_24:
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_9_13();
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_15_0();
    v103 = a1;
    v104 = a2;
    v47 = ".strides not found in state dictionary";
LABEL_27:
    v46 = (unint64_t)(v47 - 32) | 0x8000000000000000;
    v43 = 0xD000000000000026;
    goto LABEL_28;
  }
  if (*(_QWORD *)(v29 + 16) != 2)
  {
    OUTLINED_FUNCTION_10_3();
    goto LABEL_24;
  }
  v92 = v29;
  OUTLINED_FUNCTION_1_16();
  v30._countAndFlagsBits = 0x676E69646461702ELL;
  v30._object = (void *)0xE800000000000000;
  String.append(_:)(v30);
  v31 = OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_30();
  if (!v31)
  {
LABEL_26:
    OUTLINED_FUNCTION_11_9();
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_9_13();
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_15_0();
    v103 = a1;
    v104 = a2;
    v47 = ".padding not found in state dictionary";
    goto LABEL_27;
  }
  if (*(_QWORD *)(v31 + 16) != 2)
  {
    OUTLINED_FUNCTION_10_3();
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_1_16();
  v32._countAndFlagsBits = 0x6F6974616C69642ELL;
  v32._object = (void *)0xEA0000000000736ELL;
  String.append(_:)(v32);
  v90 = OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_30();
  if (!v90)
  {
LABEL_30:
    OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_11_9();
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_4_19();
    _StringGuts.grow(_:)(42);
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_6_15();
    v43 = v51 + 2;
    v44 = ".dilations not found in state dictionary";
    goto LABEL_22;
  }
  if (*(_QWORD *)(v90 + 16) != 2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  OUTLINED_FUNCTION_1_16();
  v33._countAndFlagsBits = 0x6F4370756F72672ELL;
  v33._object = (void *)0xEB00000000746E75;
  String.append(_:)(v33);
  v89 = OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_30();
  if (!v89)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_11_9();
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_4_19();
    _StringGuts.grow(_:)(43);
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_6_15();
    v43 = v52 + 3;
    v44 = ".groupCount not found in state dictionary";
    goto LABEL_22;
  }
  if (*(_QWORD *)(v89 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v88 = v31;
  v34 = *(_QWORD *)(v27 + 16);
  v91 = v11;
  if (v34)
  {
    v103 = MEMORY[0x24BEE4AF8];
    v87 = v34;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
    v35 = v87;
    v36 = 0;
    v37 = v103;
    while (1)
    {
      v38 = *(double *)(v27 + 8 * v36 + 32);
      if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) == 0)
        break;
      if (v38 <= -9.22337204e18)
        goto LABEL_78;
      if (v38 >= 9.22337204e18)
        goto LABEL_79;
      v103 = v37;
      v40 = *(_QWORD *)(v37 + 16);
      v39 = *(_QWORD *)(v37 + 24);
      v41 = (void (*)(_QWORD, _QWORD, _QWORD))(v40 + 1);
      if (v40 >= v39 >> 1)
      {
        v86 = (void (*)(_QWORD, _QWORD, _QWORD))(v40 + 1);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
        v41 = v86;
        v35 = v87;
        v37 = v103;
      }
      ++v36;
      *(_QWORD *)(v37 + 16) = v41;
      *(_QWORD *)(v37 + 8 * v40 + 32) = (uint64_t)v38;
      v11 = v91;
      if (v35 == v36)
      {
        OUTLINED_FUNCTION_101();
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  OUTLINED_FUNCTION_101();
  v37 = MEMORY[0x24BEE4AF8];
LABEL_34:
  v53 = v100;
  MEMORY[0x220758C74](v37);
  v54 = (uint64_t)v99;
  v55 = v53;
  v56 = v102;
  v86 = *(void (**)(_QWORD, _QWORD, _QWORD))(v101 + 16);
  v86(v99, v55, v102);
  __swift_storeEnumTagSinglePayload(v54, 0, 1, v56);
  Array<A>.floatTensor(shape:)(v54, v25, v105);
  OUTLINED_FUNCTION_60_0();
  outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v54, &demangling cache variable for type metadata for TensorShape?);
  v57 = v98;
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 1, 1, v98);
  OUTLINED_FUNCTION_1_16();
  v58._countAndFlagsBits = 0x736169622ELL;
  v58._object = (void *)0xE500000000000000;
  String.append(_:)(v58);
  v59 = OUTLINED_FUNCTION_0_23();
  OUTLINED_FUNCTION_30();
  v60 = (uint64_t)v94;
  v87 = v59;
  if (v59)
  {
    OUTLINED_FUNCTION_1_16();
    v61._countAndFlagsBits = 0x68732E736169622ELL;
    v61._object = (void *)0xEB00000000657061;
    String.append(_:)(v61);
    v62 = OUTLINED_FUNCTION_0_23();
    OUTLINED_FUNCTION_30();
    if (v62)
    {
      v63 = *(_QWORD *)(v62 + 16);
      if (v63)
      {
        v103 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63, 0);
        v64 = 0;
        v65 = v103;
        while (1)
        {
          v66 = *(double *)(v62 + 8 * v64 + 32);
          if ((~*(_QWORD *)&v66 & 0x7FF0000000000000) == 0)
            break;
          if (v66 <= -9.22337204e18)
            goto LABEL_81;
          if (v66 >= 9.22337204e18)
            goto LABEL_82;
          v103 = v65;
          v68 = *(_QWORD *)(v65 + 16);
          v67 = *(_QWORD *)(v65 + 24);
          if (v68 >= v67 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1);
            v65 = v103;
          }
          ++v64;
          *(_QWORD *)(v65 + 16) = v68 + 1;
          *(_QWORD *)(v65 + 8 * v68 + 32) = (uint64_t)v66;
          v11 = v91;
          if (v63 == v64)
          {
            swift_bridgeObjectRelease();
            v60 = (uint64_t)v94;
            v57 = v98;
            goto LABEL_47;
          }
        }
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      swift_bridgeObjectRelease();
      v65 = MEMORY[0x24BEE4AF8];
LABEL_47:
      v69 = v95;
      MEMORY[0x220758C74](v65);
      v70 = (uint64_t)v99;
      v71 = v102;
      v86(v99, v69, v102);
      __swift_storeEnumTagSinglePayload(v70, 0, 1, v71);
      Array<A>.floatTensor(shape:)(v70, v87, v60);
      OUTLINED_FUNCTION_10_3();
      outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v70, &demangling cache variable for type metadata for TensorShape?);
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v69, v71);
      outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v11, &demangling cache variable for type metadata for Tensor?);
      __swift_storeEnumTagSinglePayload(v60, 0, 1, v57);
      outlined init with take of Tensor?(v60, (uint64_t)v11);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v72 = v97;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v96, v105, v57);
  outlined init with copy of Tensor?((uint64_t)v11, v60);
  v73 = *(_QWORD *)(v92 + 16);
  if (!v73)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v74 = *(double *)(v92 + 32);
  if ((~*(_QWORD *)&v74 & 0x7FF0000000000000) == 0)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (v74 <= -9.22337204e18)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (v74 >= 9.22337204e18)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (v73 < 2)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  v75 = *(double *)(v92 + 40);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_16_13();
  if (v76)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v75 <= -9.22337204e18)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (v75 >= OUTLINED_FUNCTION_14_10())
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  v77 = *(_QWORD *)(v88 + 16);
  if (!v77)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v78 = *(double *)(v88 + 32);
  if ((~*(_QWORD *)&v78 & 0x7FF0000000000000) == 0)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  if (v78 <= -9.22337204e18)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if (v78 >= 9.22337204e18)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  if (v77 < 2)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  v79 = *(double *)(v88 + 40);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_16_13();
  if (v76)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  if (v79 <= -9.22337204e18)
  {
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  if (v79 >= OUTLINED_FUNCTION_14_10())
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  v81 = *(_QWORD *)(v80 + 16);
  if (!v81)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  v82 = *(double *)(v80 + 32);
  if ((~*(_QWORD *)&v82 & 0x7FF0000000000000) == 0)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  if (v82 <= -9.22337204e18)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  if (v82 >= 9.22337204e18)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  if (v81 < 2)
  {
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  v83 = *(double *)(v80 + 40);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_16_13();
  if (v76)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  if (v83 <= -9.22337204e18)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  if (v83 >= OUTLINED_FUNCTION_14_10())
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  if (!*(_QWORD *)(v84 + 16))
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  v85 = *(double *)(v84 + 32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_16_13();
  if (v76)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  if (v85 <= -9.22337204e18)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  if (v85 < OUTLINED_FUNCTION_14_10())
  {
    Conv2D.init(weight:bias:stride:padding:dilation:groupCount:)();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v11, &demangling cache variable for type metadata for Tensor?);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v105, v57);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v100, v102);
    return;
  }
LABEL_110:
  __break(1u);
}

uint64_t outlined init with copy of Tensor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Tensor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_23()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Dictionary.subscript.getter(*(_QWORD *)(v1 - 168), *(_QWORD *)(v1 - 160), v0);
}

uint64_t OUTLINED_FUNCTION_1_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 168) = v1;
  *(_QWORD *)(v2 - 160) = v0;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_4_19()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 168) = 0;
  *(_QWORD *)(v0 - 160) = 0xE000000000000000;
}

void OUTLINED_FUNCTION_6_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 168) = v1;
  *(_QWORD *)(v2 - 160) = v0;
}

void OUTLINED_FUNCTION_9_13()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 168) = 0;
  *(_QWORD *)(v0 - 160) = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
}

uint64_t OUTLINED_FUNCTION_11_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_12_11()
{
  return 0x68676965772ELL;
}

double OUTLINED_FUNCTION_14_10()
{
  return 9.22337204e18;
}

id AnalyticsReporter.init()()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)MEMORY[0x22075A8AC](0xD00000000000002ALL, 0x800000021AFF3790);
  v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  return v2;
}

Swift::Bool __swiftcall AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML::ModelType model, Swift::String metricName, Swift::Int quantity)
{
  void *object;
  uint64_t countAndFlagsBits;
  __n128 *v6;
  __n128 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSNumber v13;
  id v14;

  object = metricName._object;
  countAndFlagsBits = metricName._countAndFlagsBits;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  v6 = (__n128 *)OUTLINED_FUNCTION_12_12();
  v7 = OUTLINED_FUNCTION_11_10(v6, (__n128)xmmword_21AFE7D90);
  v7[2].n128_u64[0] = v8;
  v7[2].n128_u64[1] = 0xE800000000000000;
  v9 = ModelType.description.getter(model);
  v10 = MEMORY[0x22075A8AC](v9);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_11();
  v6[3].n128_u64[0] = v10;
  v6[3].n128_u64[1] = v11;
  v6[4].n128_u64[0] = 0xEA0000000000656DLL;
  v12 = MEMORY[0x22075A8AC](countAndFlagsBits, object);
  OUTLINED_FUNCTION_13_18(v12);
  v6[5].n128_u64[1] = 0xE800000000000000;
  v13.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  OUTLINED_FUNCTION_0_24((uint64_t)v13.super.super.isa);
  v14 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v14);
  OUTLINED_FUNCTION_9_14();
  OUTLINED_FUNCTION_5_17();
}

void sub_21AE5F6C0()
{
  uint64_t v0;

  OUTLINED_FUNCTION_2_24();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_1_17(v0 | 0xB, (uint64_t)"com.apple.createml.data_metrics");
  OUTLINED_FUNCTION_4_20();
  OUTLINED_FUNCTION_8_17();
}

Swift::Bool __swiftcall AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML::ModelType model, Swift::String metricName, Swift::Float quantity)
{
  unint64_t v3;
  __n128 *v4;
  uint64_t v5;
  unint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  v4 = (__n128 *)OUTLINED_FUNCTION_12_12();
  v5 = OUTLINED_FUNCTION_3_20(v4, (__n128)xmmword_21AFE7D90);
  MEMORY[0x22075A8AC](v5);
  OUTLINED_FUNCTION_15_11();
  OUTLINED_FUNCTION_14_11();
  v4[3].n128_u64[0] = v3;
  v4[3].n128_u64[1] = v6;
  v4[4].n128_u64[0] = 0xEA0000000000656DLL;
  OUTLINED_FUNCTION_5_17();
}

void sub_21AE5F77C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSNumber v3;
  id v4;

  OUTLINED_FUNCTION_13_18(a1);
  *(_QWORD *)(v1 + 88) = v2;
  v3.super.super.isa = Float._bridgeToObjectiveC()().super.super.isa;
  OUTLINED_FUNCTION_0_24((uint64_t)v3.super.super.isa);
  v4 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v4);
  OUTLINED_FUNCTION_9_14();
  OUTLINED_FUNCTION_5_17();
}

void sub_21AE5F7D4()
{
  uint64_t v0;

  OUTLINED_FUNCTION_2_24();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_1_17(v0 | 0xB, (uint64_t)"com.apple.createml.data_metrics");
  OUTLINED_FUNCTION_4_20();
  OUTLINED_FUNCTION_7_14();
}

Swift::Bool __swiftcall AnalyticsReporter.reportParameterSettings(model:parameterName:parameterValue:)(CreateML::ModelType model, Swift::String parameterName, Swift::String parameterValue)
{
  void *object;
  uint64_t countAndFlagsBits;
  __n128 *v6;
  __n128 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  object = parameterName._object;
  countAndFlagsBits = parameterName._countAndFlagsBits;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  v6 = (__n128 *)OUTLINED_FUNCTION_12_12();
  v7 = OUTLINED_FUNCTION_11_10(v6, (__n128)xmmword_21AFE7D90);
  v7[2].n128_u64[0] = v8;
  v7[2].n128_u64[1] = 0xE800000000000000;
  v9 = ModelType.description.getter(model);
  v10 = MEMORY[0x22075A8AC](v9);
  swift_bridgeObjectRelease();
  v6[3].n128_u64[0] = v10;
  strcpy(&v6[3].n128_i8[8], "ParameterName");
  v6[4].n128_u16[3] = -4864;
  v6[4].n128_u64[1] = MEMORY[0x22075A8AC](countAndFlagsBits, object);
  strcpy((char *)&v6[5], "ParameterValue");
  v6[5].n128_u8[15] = -18;
  OUTLINED_FUNCTION_5_17();
}

void sub_21AE5F8E4(uint64_t a1)
{
  id v1;

  OUTLINED_FUNCTION_0_24(a1);
  v1 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v1);
  OUTLINED_FUNCTION_9_14();
  OUTLINED_FUNCTION_5_17();
}

void sub_21AE5F92C()
{
  uint64_t v0;

  OUTLINED_FUNCTION_2_24();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_1_17(v0 + 16, (uint64_t)"com.apple.createml.parameter_setting");
  OUTLINED_FUNCTION_4_20();
  OUTLINED_FUNCTION_8_17();
}

Swift::Bool __swiftcall AnalyticsReporter.analyticsSendEventWrapper(_:_:)(Swift::String a1, Swift::OpaquePointer a2)
{
  void *v3;
  Swift::OpaquePointer *v4;
  void *v5;
  _QWORD v7[6];

  v3 = (void *)MEMORY[0x22075A8AC](a1._countAndFlagsBits, a1._object);
  v4 = (Swift::OpaquePointer *)swift_allocObject();
  v4[2]._rawValue = a2._rawValue;
  v7[4] = partial apply for closure #1 in AnalyticsReporter.analyticsSendEventWrapper(_:_:);
  v7[5] = v4;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v7[3] = &block_descriptor_1;
  v5 = _Block_copy(v7);
  swift_bridgeObjectRetain();
  swift_release();
  LOBYTE(a2._rawValue) = AnalyticsSendEventLazy();
  _Block_release(v5);

  return (Swift::Bool)a2._rawValue;
}

void AnalyticsReporter.reportTemplateUsed(model:mode:)(uint64_t a1, unsigned __int8 a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t inited;
  uint64_t v8;
  id v9;

  v3 = a2;
  ModelType.description.getter(a1);
  if (v3 != 2)
  {
    if ((v3 & 1) != 0)
      v4 = 0x68636E7953202D20;
    else
      v4 = 0x636E797341202D20;
    if ((v3 & 1) != 0)
      v5 = 0xEE0073756F6E6F72;
    else
      v5 = 0xEF73756F6E6F7268;
    v6 = v5;
    String.append(_:)(*(Swift::String *)&v4);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  *(_QWORD *)(inited + 32) = 0x6574616C706D6554;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v8 = ModelType.description.getter(a1);
  MEMORY[0x22075A8AC](v8);
  OUTLINED_FUNCTION_2_24();
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = 0x656C646E7542;
  *(_QWORD *)(inited + 64) = 0xE600000000000000;
  v9 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v9);
  OUTLINED_FUNCTION_5_17();
}

void sub_21AE5FBEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_2_24();
  v0[9] = v1;
  v0[10] = v2;
  v0[11] = 0xEF65736F62726556;
  OUTLINED_FUNCTION_5_17();
}

uint64_t sub_21AE5FC10()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_2_24();
  *(_QWORD *)(v0 + 96) = v2;
  type metadata accessor for NSObject();
  OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_1_17(v3 + 12, (uint64_t)"com.apple.createml.template_used");
  OUTLINED_FUNCTION_4_20();
  return v1 & 1;
}

Swift::Bool __swiftcall AnalyticsReporter.reportEventDuration(model:task:startTime:)(CreateML::ModelType model, Swift::String task, Swift::Double startTime)
{
  unint64_t v3;
  __n128 *v4;
  uint64_t v5;

  CFAbsoluteTimeGetCurrent();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  v4 = (__n128 *)OUTLINED_FUNCTION_12_12();
  v5 = OUTLINED_FUNCTION_3_20(v4, (__n128)xmmword_21AFE7D90);
  MEMORY[0x22075A8AC](v5);
  OUTLINED_FUNCTION_15_11();
  v4[3].n128_u64[0] = v3;
  v4[3].n128_u64[1] = 1802723668;
  v4[4].n128_u64[0] = 0xE400000000000000;
  OUTLINED_FUNCTION_5_17();
}

void sub_21AE5FCE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  id v5;

  v1[9] = a1;
  v1[10] = 0x6E6F697461727544;
  v1[11] = v2;
  v4 = MEMORY[0x22075AB7C](v3);
  OUTLINED_FUNCTION_0_24(v4);
  v5 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(v5);
  OUTLINED_FUNCTION_9_14();
  OUTLINED_FUNCTION_5_17();
}

void sub_21AE5FD50()
{
  uint64_t v0;

  OUTLINED_FUNCTION_2_24();
  OUTLINED_FUNCTION_6_16();
  OUTLINED_FUNCTION_10_14();
  OUTLINED_FUNCTION_1_17(v0 + 13, (uint64_t)"com.apple.createml.event_duration");
  OUTLINED_FUNCTION_4_20();
  OUTLINED_FUNCTION_7_14();
}

uint64_t outlined bridged method (ob) of @objc NSBundle.bundleIdentifier.getter(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_bundleIdentifier);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t sub_21AE5FE3C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnalyticsReporter.analyticsSendEventWrapper(_:_:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_0_24(uint64_t result)
{
  _QWORD *v1;

  v1[12] = result;
  v1[13] = 0x656C646E7542;
  v1[14] = 0xE600000000000000;
  return result;
}

BOOL OUTLINED_FUNCTION_1_17@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Swift::OpaquePointer v2;
  unint64_t v3;

  v3 = (a2 - 32) | 0x8000000000000000;
  return AnalyticsReporter.analyticsSendEventWrapper(_:_:)(*(Swift::String *)&a1, v2);
}

uint64_t OUTLINED_FUNCTION_2_24()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_3_20(__n128 *a1, __n128 a2)
{
  unsigned __int8 v2;

  a1[1] = a2;
  a1[2].n128_u64[0] = 0x6574616C706D6554;
  a1[2].n128_u64[1] = 0xE800000000000000;
  return ModelType.description.getter(v2);
}

uint64_t OUTLINED_FUNCTION_4_20()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_5_17()
{
  JUMPOUT(0x22075A8ACLL);
}

unint64_t OUTLINED_FUNCTION_6_16()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 120) = v1;
  return type metadata accessor for NSObject();
}

uint64_t OUTLINED_FUNCTION_10_14()
{
  return Dictionary.init(dictionaryLiteral:)();
}

__n128 *OUTLINED_FUNCTION_11_10(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_12()
{
  return swift_initStackObject();
}

uint64_t OUTLINED_FUNCTION_13_18(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = result;
  *(_QWORD *)(v1 + 80) = 0x797469746E617551;
  return result;
}

uint64_t OUTLINED_FUNCTION_15_11()
{
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DataFrame.flattenNestedArrays(in:shape:)(Swift::String in, Swift::OpaquePointer shape)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  void (**v6)(char *, uint64_t);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (**v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (**v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *rawValue;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  rawValue = shape._rawValue;
  object = in._object;
  countAndFlagsBits = in._countAndFlagsBits;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any?]>);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = (uint64_t *)v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any]>);
  v6 = *(void (***)(char *, uint64_t))(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_208();
  v38 = v10;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v34 - v12;
  v14 = type metadata accessor for AnyColumn();
  v43 = *(_QWORD *)(v14 - 8);
  v44 = v14;
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  v35 = v15;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v34 - v18;
  MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x220758A1C](countAndFlagsBits, object);
  v20 = OUTLINED_FUNCTION_3_21();
  if (v20 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]))
  {
    v30 = DataFrame.subscript.getter();
    v41 = &v34;
    MEMORY[0x24BDAC7A8](v30);
    *(&v34 - 2) = (uint64_t)rawValue;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
    v31 = v48;
    Column.mapNonNil<A>(_:)();
    if (v31)
    {
      v6[1](v8, v42);
      goto LABEL_12;
    }
    v48 = 0;
    v6[1](v8, v42);
    OUTLINED_FUNCTION_1_18();
LABEL_11:
    (*(void (**)(char *, char *))(v36 + 8))(v13, (char *)v6);
    swift_bridgeObjectRetain();
    MEMORY[0x220758A28](v19, countAndFlagsBits, object);
    goto LABEL_12;
  }
  v21 = (uint64_t)rawValue;
  v22 = OUTLINED_FUNCTION_3_21();
  if (v22 == __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]))
  {
    v42 = countAndFlagsBits;
    v32 = DataFrame.subscript.getter();
    MEMORY[0x24BDAC7A8](v32);
    *(&v34 - 2) = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
    v6 = v38;
    v33 = v48;
    Column.mapNonNil<A>(_:)();
    if (v33)
    {
      OUTLINED_FUNCTION_0_25();
      goto LABEL_12;
    }
    v48 = 0;
    OUTLINED_FUNCTION_0_25();
    v19 = v35;
    v13 = (char *)v6;
    OUTLINED_FUNCTION_1_18();
    countAndFlagsBits = v42;
    goto LABEL_11;
  }
  v23 = OUTLINED_FUNCTION_3_21();
  if (v23 != __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>))
  {
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(73);
    v24._countAndFlagsBits = 0x27206E6D756C6F43;
    v24._object = (void *)0xE800000000000000;
    String.append(_:)(v24);
    v25._countAndFlagsBits = countAndFlagsBits;
    v25._object = object;
    String.append(_:)(v25);
    v26._object = (void *)0x800000021AFF37C0;
    v26._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v26);
    v27 = v46;
    v28 = v47;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v29 = v27;
    *(_QWORD *)(v29 + 8) = v28;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_BYTE *)(v29 + 48) = 1;
    swift_willThrow(0.0);
  }
LABEL_12:
  OUTLINED_FUNCTION_2_25();
}

uint64_t closure #1 in DataFrame.flattenNestedArrays(in:shape:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = a3(a2, v8);
  if (!v4)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
    return __swift_storeEnumTagSinglePayload(a4, 0, 1, v10);
  }
  return result;
}

uint64_t partial apply for closure #2 in DataFrame.flattenNestedArrays(in:shape:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in DataFrame.flattenNestedArrays(in:shape:)(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(uint64_t, uint64_t))MLShapedArray<>.init(shape:nestedArray:), a2);
}

uint64_t partial apply for closure #1 in DataFrame.flattenNestedArrays(in:shape:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in DataFrame.flattenNestedArrays(in:shape:)(a1, *(_QWORD *)(v2 + 16), (uint64_t (*)(uint64_t, uint64_t))MLShapedArray<>.init(shape:nestedArray:), a2);
}

uint64_t OUTLINED_FUNCTION_0_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_1_18()
{
  return Column.eraseToAnyColumn()();
}

uint64_t OUTLINED_FUNCTION_2_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_3_21()
{
  return AnyColumn.wrappedElementType.getter();
}

void CMLParameters.setOptions(dictionary:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for CMLFeatureValue();
  v1 = swift_retain();
  CMLFeatureValue.__allocating_init(_:)(v1);
  if (!v0)
  {
    CMLParameters.add(key:featureValue:)(6u, v2);
    swift_release();
  }
}

void MLImageClassifier.write(to:metadata:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  type metadata accessor for MLImageClassifier.Model();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v26 = v4;
  v19 = type metadata accessor for Model();
  v24 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_64();
  v23 = v5;
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v25 = v7;
  type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_49();
  v11 = v10 - v9;
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_49();
  v16 = v15 - v14;
  v20 = a2[1];
  v22 = *a2;
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(a1, 0x616C436567616D49, 0xEF72656966697373, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v15 - v14);
  if (!v28)
  {
    MLImageClassifier.ModelParameters.algorithm.getter(v11);
    outlined init with take of MLImageClassifier.FeatureExtractorType(v11, v25);
    v17 = type metadata accessor for MLImageClassifier();
    outlined init with copy of MLImageClassifier.Model(v21 + *(int *)(v17 + 32), v26);
    if (!v20)
    {
      v18 = NSFullUserName();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    outlined copy of MLModelMetadata?(v22, v20);
    MLImageClassifier.Model.export(metadata:featureExtractorType:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLImageClassifier.CustomFeatureExtractor(v26, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
    Model.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v19);
    outlined destroy of MLImageClassifier.CustomFeatureExtractor(v25, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t outlined init with take of MLImageClassifier.FeatureExtractorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of MLImageClassifier.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLImageClassifier.Model();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void MLImageClassifier.write(toFile:metadata:)(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[9];

  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_49();
  v11 = v10 - v9;
  v12 = *a3;
  v13 = a3[2];
  v21 = a3[3];
  v22 = a3[1];
  v19 = a3[5];
  v20 = a3[4];
  v14 = a3[6];
  v15 = a3[7];
  v16 = a3[8];
  v17 = v15;
  v18 = v14;
  static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(a1, a2, 0x616C436567616D49, (void *)0xEF72656966697373);
  if (!v3)
  {
    v23[0] = v12;
    v23[1] = v22;
    v23[2] = v13;
    v23[3] = v21;
    v23[4] = v20;
    v23[5] = v19;
    v23[6] = v18;
    v23[7] = v17;
    v23[8] = v16;
    MLImageClassifier.write(to:metadata:)(v11, v23);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t MLSoundClassifier.ModelParameters.validation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v1, a1);
}

uint64_t outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLSoundClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of MLSoundClassifier.ModelParameters.ValidationData(a1, v1);
}

uint64_t outlined assign with take of MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*MLSoundClassifier.ModelParameters.validation.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLSoundClassifier.ModelParameters.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_0_26() + 20));
}

uint64_t type metadata accessor for MLSoundClassifier.ModelParameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLSoundClassifier.ModelParameters;
  if (!type metadata singleton initialization cache for MLSoundClassifier.ModelParameters)
    return swift_getSingletonMetadata();
  return result;
}

void MLSoundClassifier.ModelParameters.maxIterations.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_0_26() + 20)) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLSoundClassifier.ModelParameters.maxIterations.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_26();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLSoundClassifier.ModelParameters.overlapFactor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(OUTLINED_FUNCTION_0_26() + 24));
}

uint64_t MLSoundClassifier.ModelParameters.overlapFactor.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = OUTLINED_FUNCTION_0_26();
  *(double *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*MLSoundClassifier.ModelParameters.overlapFactor.modify())(_QWORD)
{
  OUTLINED_FUNCTION_0_26();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLSoundClassifier.ModelParameters.algorithm.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v2 = OUTLINED_FUNCTION_0_26();
  v5 = OUTLINED_FUNCTION_12_13(v2, v3, v4);
  if (!v11)
  {
    OUTLINED_FUNCTION_18_9(v5, v6);
    goto LABEL_5;
  }
  if (!OUTLINED_FUNCTION_1_19())
  {
LABEL_5:
    OUTLINED_FUNCTION_17_7();
    goto LABEL_6;
  }
  v7 = v9;
  v8 = v10;
LABEL_6:
  *(_QWORD *)a1 = v7;
  *(_BYTE *)(a1 + 8) = v8;
}

void key path getter for MLSoundClassifier.ModelParameters.algorithm : MLSoundClassifier.ModelParameters(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  char v4;

  MLSoundClassifier.ModelParameters.algorithm.getter((uint64_t)&v3);
  v2 = v4;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t key path setter for MLSoundClassifier.ModelParameters.algorithm : MLSoundClassifier.ModelParameters(uint64_t a1)
{
  char v1;
  uint64_t v3;
  char v4;

  v1 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)a1;
  v4 = v1;
  return MLSoundClassifier.ModelParameters.algorithm.setter(&v3);
}

uint64_t MLSoundClassifier.ModelParameters.algorithm.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  ValueMetadata *v8;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v8 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
  v6 = v2;
  v7 = v3;
  v4 = OUTLINED_FUNCTION_0_26();
  return outlined assign with take of Any?((uint64_t)&v6, v1 + *(int *)(v4 + 28));
}

void (*MLSoundClassifier.ModelParameters.algorithm.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  v4 = *(int *)(OUTLINED_FUNCTION_0_26() + 28);
  *((_DWORD *)v3 + 11) = v4;
  outlined init with copy of Any?(v1 + v4, (uint64_t)v3);
  if (!v3[3])
  {
    outlined destroy of Any?((uint64_t)v3);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    OUTLINED_FUNCTION_17_7();
    goto LABEL_6;
  }
  v5 = v3[6];
  v6 = *((_BYTE *)v3 + 56);
LABEL_6:
  v3[4] = v5;
  *((_BYTE *)v3 + 40) = v6;
  return MLSoundClassifier.ModelParameters.algorithm.modify;
}

void MLSoundClassifier.ModelParameters.algorithm.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64) + *(int *)(*(_QWORD *)a1 + 44);
  v1[3] = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
  *v1 = v2;
  *((_BYTE *)v1 + 8) = v3;
  outlined assign with take of Any?((uint64_t)v1, v4);
  free(v1);
}

double MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v1 = OUTLINED_FUNCTION_0_26();
  v4 = OUTLINED_FUNCTION_12_13(v1, v2, v3);
  if (v10)
  {
    if ((OUTLINED_FUNCTION_1_19() & 1) != 0 && (v9 & 1) == 0 && v8 == 1)
      return 0.975;
  }
  else
  {
    OUTLINED_FUNCTION_18_9(v4, v5);
  }
  v7 = v0 + *(int *)(v1 + 32);
  result = *(double *)v7;
  if (*(_BYTE *)(v7 + 8))
    return 0.975;
  return result;
}

uint64_t MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = OUTLINED_FUNCTION_0_26();
  v4 = v1 + *(int *)(result + 32);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

void (*MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  return MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.modify;
}

void MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = v1 + *(int *)(OUTLINED_FUNCTION_0_26() + 32);
  *(_QWORD *)v3 = v2;
  *(_BYTE *)(v3 + 8) = 0;
  OUTLINED_FUNCTION_22();
}

void MLSoundClassifier.ModelParameters.init(validation:maxIterations:overlapFactor:algorithm:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_21_10();
  v3 = *v2;
  v4 = OUTLINED_FUNCTION_0_26();
  v5 = (_OWORD *)(v1 + *(int *)(v4 + 28));
  *v5 = 0u;
  v5[1] = 0u;
  v6 = OUTLINED_FUNCTION_2_26(v4);
  outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(v6, v7);
  OUTLINED_FUNCTION_20_9();
  OUTLINED_FUNCTION_19_12(v8, v9, v10, v11, v12, v13, v14, v15, v3);
  outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(v0);
  OUTLINED_FUNCTION_0_13();
}

uint64_t outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void MLSoundClassifier.ModelParameters.init(validation:maxIterations:overlapFactor:)()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_21_10();
  v1 = OUTLINED_FUNCTION_0_26();
  v2 = (_OWORD *)(v0 + *(int *)(v1 + 28));
  *v2 = 0u;
  v2[1] = 0u;
  v3 = OUTLINED_FUNCTION_2_26(v1);
  outlined init with take of MLSoundClassifier.ModelParameters.ValidationData(v3, v4);
  OUTLINED_FUNCTION_20_9();
}

uint64_t outlined init with take of MLSoundClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void MLSoundClassifier.ModelParameters.init(validation:maxIterations:overlapFactor:algorithm:featureExtractionTimeWindowSize:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11;
  int *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  unint64_t v26;
  os_log_type_t v27;

  v11 = *a3;
  v12 = (int *)OUTLINED_FUNCTION_0_26();
  v13 = (_OWORD *)(a4 + v12[7]);
  *v13 = 0u;
  v13[1] = 0u;
  v14 = a4 + v12[8];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  *(_QWORD *)(a4 + v12[9]) = 32;
  v15 = outlined init with copy of MLSoundClassifier.ModelParameters.ValidationData(a1, a4);
  *(_QWORD *)(a4 + v12[5]) = a2;
  *(double *)(a4 + v12[6]) = a5;
  OUTLINED_FUNCTION_19_12(v15, v16, v17, v18, v19, v20, v21, v22, v11);
  *(double *)v14 = a6;
  *(_BYTE *)(v14 + 8) = 0;
  if (a6 >= 0.5)
  {
    if (a6 <= 15.0)
    {
      OUTLINED_FUNCTION_16_14();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_7_15();
    v26 = OUTLINED_FUNCTION_15_12();
    OUTLINED_FUNCTION_0_9(v26, (uint64_t)"The input featureExtractionTimeWindowSize is greater than the maximum supported value ");
    OUTLINED_FUNCTION_1_1();
    OUTLINED_FUNCTION_6_17((uint64_t)". Clamping it to ");
    OUTLINED_FUNCTION_1_1();
    OUTLINED_FUNCTION_9_15();
    v27 = static os_log_type_t.default.getter();
    OUTLINED_FUNCTION_11_11(v27);
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_16_14();
    v25 = 0x402E000000000000;
  }
  else
  {
    OUTLINED_FUNCTION_7_15();
    v23 = OUTLINED_FUNCTION_15_12();
    OUTLINED_FUNCTION_0_9(v23, (uint64_t)"The input featureExtractionTimeWindowSize is smaller than the minimum supported value ");
    OUTLINED_FUNCTION_1_1();
    OUTLINED_FUNCTION_6_17((uint64_t)". Clamping it to ");
    OUTLINED_FUNCTION_1_1();
    OUTLINED_FUNCTION_9_15();
    v24 = static os_log_type_t.default.getter();
    OUTLINED_FUNCTION_11_11(v24);
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_16_14();
    v25 = 0x3FE0000000000000;
  }
  *(_QWORD *)v14 = v25;
  *(_BYTE *)(v14 + 8) = 0;
LABEL_7:
  OUTLINED_FUNCTION_0_13();
}

uint64_t MLSoundClassifier.ModelParameters.FeaturePrintType.description.getter()
{
  return 0x756F732065707974;
}

void MLSoundClassifier.ModelParameters.FeaturePrintType.hash(into:)()
{
  Hasher._combine(_:)(0);
  OUTLINED_FUNCTION_22();
}

uint64_t static MLSoundClassifier.ModelParameters.FeaturePrintType.== infix(_:_:)()
{
  return 1;
}

Swift::Int MLSoundClassifier.ModelParameters.FeaturePrintType.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLSoundClassifier.ModelParameters.FeaturePrintType()
{
  return MLSoundClassifier.ModelParameters.FeaturePrintType.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLSoundClassifier.ModelParameters.FeaturePrintType()
{
  MLSoundClassifier.ModelParameters.FeaturePrintType.hash(into:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLSoundClassifier.ModelParameters.FeaturePrintType()
{
  return 0x756F732065707974;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLSoundClassifier.ModelParameters.validate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v1 = type metadata accessor for MLSoundClassifier.ModelParameters();
  outlined init with copy of Any?(v0 + *(int *)(v1 + 28), (uint64_t)&v6);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)&v6);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    OUTLINED_FUNCTION_17_7();
    goto LABEL_6;
  }
  v2 = v4;
  v3 = v5;
LABEL_6:
  v6 = v2;
  v7 = v3;
  MLSoundClassifier.ModelParameters.FeatureExtractorType.validate()();
}

uint64_t MLSoundClassifier.ModelParameters.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  uint64_t v15;
  char v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  OUTLINED_FUNCTION_45_3();
  swift_bridgeObjectRelease();
  v1 = OUTLINED_FUNCTION_0_26();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_45_3();
  v3._object = (void *)0x800000021AFF38E0;
  v3._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  Double.write<A>(to:)();
  OUTLINED_FUNCTION_0_1();
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 0xD000000000000010;
  v4._object = (void *)0x800000021AFF13A0;
  String.append(_:)(v4);
  OUTLINED_FUNCTION_15_0();
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v19 = 0xD000000000000010;
  v20 = 0x800000021AFF3900;
  v5 = outlined init with copy of Any?(v0 + *(int *)(v1 + 28), (uint64_t)&v17);
  if (!v18)
  {
    OUTLINED_FUNCTION_18_9(v5, v6);
    goto LABEL_5;
  }
  if ((OUTLINED_FUNCTION_1_19() & 1) == 0)
  {
LABEL_5:
    OUTLINED_FUNCTION_17_7();
    goto LABEL_6;
  }
  v7 = v15;
  v8 = v16;
LABEL_6:
  v17._countAndFlagsBits = v7;
  LOBYTE(v17._object) = v8;
  v17._countAndFlagsBits = MLSoundClassifier.ModelParameters.FeatureExtractorType.description.getter();
  v17._object = v9;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 0xD000000000000012;
  v10._object = (void *)0x800000021AFF3920;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v11 = v19;
  v12 = (void *)v20;
  v17._countAndFlagsBits = 0xD000000000000010;
  v17._object = (void *)0x800000021AFF13A0;
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  OUTLINED_FUNCTION_15_0();
  swift_bridgeObjectRelease();
  return v17._countAndFlagsBits;
}

void MLSoundClassifier.ModelParameters.playgroundDescription.getter(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MLSoundClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

unint64_t lazy protocol witness table accessor for type MLSoundClassifier.ModelParameters.FeaturePrintType and conformance MLSoundClassifier.ModelParameters.FeaturePrintType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLSoundClassifier.ModelParameters.FeaturePrintType and conformance MLSoundClassifier.ModelParameters.FeaturePrintType;
  if (!lazy protocol witness table cache variable for type MLSoundClassifier.ModelParameters.FeaturePrintType and conformance MLSoundClassifier.ModelParameters.FeaturePrintType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLSoundClassifier.ModelParameters.FeaturePrintType, &type metadata for MLSoundClassifier.ModelParameters.FeaturePrintType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLSoundClassifier.ModelParameters.FeaturePrintType and conformance MLSoundClassifier.ModelParameters.FeaturePrintType);
  }
  return result;
}

void sub_21AE61748(double *a1@<X8>)
{
  *a1 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
  OUTLINED_FUNCTION_22();
}

void sub_21AE6176C(double *a1)
{
  MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.setter(*a1);
  OUTLINED_FUNCTION_22();
}

uint64_t *initializeBufferWithCopyOfBuffer for MLSoundClassifier.ModelParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v9 = (char *)&loc_21AE61818 + 4 * byte_21AFE9A40[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v11 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
    v12 = a3[7];
    v13 = (char *)a1 + v12;
    v14 = (_OWORD *)((char *)a2 + v12);
    v15 = *(uint64_t *)((char *)a2 + v12 + 24);
    if (v15)
    {
      *((_QWORD *)v13 + 3) = v15;
      (**(void (***)(void))(v15 - 8))();
    }
    else
    {
      v16 = v14[1];
      *(_OWORD *)v13 = *v14;
      *((_OWORD *)v13 + 1) = v16;
    }
    v17 = a3[8];
    v18 = a3[9];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
  }
  return a1;
}

uint64_t destroy for MLSoundClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_5:
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for MLSoundClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        v5 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
        break;
      case 2u:
        goto LABEL_5;
      case 3u:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 4u:
        v7 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
        swift_bridgeObjectRelease();
        goto LABEL_5;
      default:
        break;
    }
  }
  result = a1 + *(int *)(a2 + 28);
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

_QWORD *initializeWithCopy for MLSoundClassifier.ModelParameters(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for MLSoundClassifier.DataSource();
      v8 = (char *)&loc_21AE61C18 + 4 * byte_21AFE9A4A[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v9 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v9) = *(_QWORD *)((char *)a2 + v9);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (_OWORD *)((char *)a2 + v10);
  v13 = *(_QWORD *)((char *)a2 + v10 + 24);
  if (v13)
  {
    *((_QWORD *)v11 + 3) = v13;
    (**(void (***)(void))(v13 - 8))();
  }
  else
  {
    v14 = v12[1];
    *(_OWORD *)v11 = *v12;
    *((_OWORD *)v11 + 1) = v14;
  }
  v15 = a3[8];
  v16 = a3[9];
  v17 = (char *)a1 + v15;
  v18 = (char *)a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  return a1;
}

_QWORD *assignWithCopy for MLSoundClassifier.ModelParameters(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  if (a1 != a2)
  {
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)a1);
    v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        type metadata accessor for MLSoundClassifier.DataSource();
        v8 = (char *)&loc_21AE61ED4 + 4 * byte_21AFE9A4F[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v9 = a3[7];
  v10 = (uint64_t)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = *(_QWORD *)((char *)a2 + v9 + 24);
  if (!*(_QWORD *)((char *)a1 + v9 + 24))
  {
    if (v12)
    {
      *(_QWORD *)(v10 + 24) = v12;
      (**(void (***)(uint64_t, char *))(v12 - 8))(v10, v11);
      goto LABEL_14;
    }
LABEL_13:
    v13 = *((_OWORD *)v11 + 1);
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 16) = v13;
    goto LABEL_14;
  }
  if (!v12)
  {
    __swift_destroy_boxed_opaque_existential_0(v10);
    goto LABEL_13;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v10, (uint64_t *)v11);
LABEL_14:
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  v15[8] = v16[8];
  *(_QWORD *)v15 = v17;
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

char *initializeWithTake for MLSoundClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int EnumCaseMultiPayload;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;

  v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for MLSoundClassifier.DataSource();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
      *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
      v11 = v10[20];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = *((_OWORD *)v13 + 1);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v14;
      v12[32] = v13[32];
    }
    else
    {
      if (EnumCaseMultiPayload > 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        goto LABEL_9;
      }
      v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
    }
    swift_storeEnumTagMultiPayload();
LABEL_9:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_10:
  v16 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  v17 = a3[7];
  v18 = a3[8];
  v19 = &a1[v17];
  v20 = &a2[v17];
  v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  v22 = &a1[v18];
  v23 = &a2[v18];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  return a1;
}

char *assignWithTake for MLSoundClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int EnumCaseMultiPayload;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  if (a1 != a2)
  {
    outlined destroy of MLSoundClassifier.ModelParameters.ValidationData((uint64_t)a1);
    v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_11;
    }
    v7 = type metadata accessor for MLSoundClassifier.DataSource();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, featureColumn: String, labelColumn: String, parameters: MLSoundClassifier.FeatureExtractionParameters));
      *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
      *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
      v11 = v10[20];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = *((_OWORD *)v13 + 1);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v14;
      v12[32] = v13[32];
    }
    else
    {
      if (EnumCaseMultiPayload > 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        goto LABEL_10;
      }
      v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
    }
    swift_storeEnumTagMultiPayload();
LABEL_10:
    swift_storeEnumTagMultiPayload();
  }
LABEL_11:
  v16 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  v17 = a3[7];
  v18 = &a1[v17];
  if (*(_QWORD *)&a1[v17 + 24])
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&a1[v17]);
  v19 = *(_OWORD *)&a2[v17 + 16];
  *(_OWORD *)v18 = *(_OWORD *)&a2[v17];
  *((_OWORD *)v18 + 1) = v19;
  v20 = a3[8];
  v21 = a3[9];
  v22 = &a1[v20];
  v23 = &a2[v20];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.ModelParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE62540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;
  int v9;

  v6 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 24);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  v9 = v8 - 1;
  if (v9 < 0)
    v9 = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.ModelParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE625D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 24) = a2;
  return result;
}

uint64_t type metadata completion function for MLSoundClassifier.ModelParameters()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.ModelParameters.FeaturePrintType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21AE62718 + 4 * byte_21AFE9A54[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21AE62738 + 4 * byte_21AFE9A59[v4]))();
}

_BYTE *sub_21AE62718(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21AE62738(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21AE62740(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21AE62748(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21AE62750(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21AE62758(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.ModelParameters.FeaturePrintType()
{
  return &type metadata for MLSoundClassifier.ModelParameters.FeaturePrintType;
}

uint64_t OUTLINED_FUNCTION_0_26()
{
  return type metadata accessor for MLSoundClassifier.ModelParameters();
}

uint64_t OUTLINED_FUNCTION_1_19()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_2_26(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + *(int *)(a1 + 32);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  *(_QWORD *)(v2 + *(int *)(a1 + 36)) = 32;
  return v1;
}

void OUTLINED_FUNCTION_6_17(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v1);
}

void OUTLINED_FUNCTION_7_15()
{
  _StringGuts.grow(_:)(108);
}

void OUTLINED_FUNCTION_9_15()
{
  Swift::String v0;

  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_11_11(os_log_type_t type)
{
  uint64_t v1;
  void *v2;
  Swift::String v4;

  v4._countAndFlagsBits = v1;
  v4._object = v2;
  log(_:type:)(v4, type);
}

uint64_t OUTLINED_FUNCTION_12_13(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  return outlined init with copy of Any?(v3 + *(int *)(a1 + 28), (uint64_t)va);
}

unint64_t OUTLINED_FUNCTION_15_12()
{
  return 0xD000000000000056;
}

uint64_t OUTLINED_FUNCTION_16_14()
{
  uint64_t v0;

  return outlined destroy of MLSoundClassifier.ModelParameters.ValidationData(v0);
}

uint64_t OUTLINED_FUNCTION_18_9(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return outlined destroy of Any?((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_19_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return outlined assign with take of Any?((uint64_t)&a9, v9);
}

void OUTLINED_FUNCTION_20_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + *(int *)(v2 + 20)) = v0;
  *(_QWORD *)(v1 + *(int *)(v2 + 24)) = v3;
}

id MLDataTable.rows.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  char v3;

  v2 = *(void **)v1;
  v3 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of Result<_DataTable, Error>(v2, v3);
}

void MLDataTable.Rows.subscript.getter(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    outlined copy of Result<_DataTable, Error>(*(id *)v2, 1);
    OUTLINED_FUNCTION_17_3();
  }
  OUTLINED_FUNCTION_4_21();
  swift_retain();
  CMLTable.row(at:)(a1);
  v6 = v5;
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_4_21();
  _DataTable.columnNames.getter(&v9);
  OUTLINED_FUNCTION_3_10();
  v7 = v9;
  OUTLINED_FUNCTION_4_21();
  v8 = _DataTable.columnIndexes.getter();
  OUTLINED_FUNCTION_3_10();
  OUTLINED_FUNCTION_3_10();
  *a2 = v7;
  a2[1] = v8;
  a2[2] = v6;
}

uint64_t MLDataTable.Rows.startIndex.getter()
{
  return 0;
}

uint64_t MLDataTable.Rows.endIndex.getter()
{
  return MLDataTable.size.getter();
}

void protocol witness for BidirectionalCollection.index(before:) in conformance MLDataTable.Rows(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  specialized RandomAccessCollection<>.index(before:)(*a1);
  *a2 = v3;
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance MLDataTable.Rows(uint64_t *a1)
{
  uint64_t v2;

  specialized RandomAccessCollection<>.index(before:)(*a1);
  *a1 = v2;
}

void protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance MLDataTable.Rows(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  *a3 = v4;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance MLDataTable.Rows()
{
  return specialized RandomAccessCollection<>.distance(from:to:)();
}

void protocol witness for Collection.endIndex.getter in conformance MLDataTable.Rows(uint64_t *a1@<X8>)
{
  *a1 = MLDataTable.Rows.endIndex.getter();
  OUTLINED_FUNCTION_22();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MLDataTable.Rows(_QWORD *a1, uint64_t *a2))()
{
  MLDataTable.Rows.subscript.getter(*a2, a1);
  return protocol witness for Collection.subscript.read in conformance MLDataTable.Rows;
}

uint64_t protocol witness for Collection.subscript.read in conformance MLDataTable.Rows()
{
  swift_release();
  OUTLINED_FUNCTION_123();
  return swift_release();
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataTable.Rows@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return specialized Collection<>.subscript.getter(*a1, a1[1], *(void **)v2, *(_BYTE *)(v2 + 8), a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance MLDataTable.Rows@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized RandomAccessCollection<>.indices.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance MLDataTable.Rows()
{
  return specialized Collection.isEmpty.getter();
}

uint64_t protocol witness for Collection.count.getter in conformance MLDataTable.Rows()
{
  return specialized Collection.count.getter();
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance MLDataTable.Rows(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;

  *(_QWORD *)a3 = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2);
  *(_BYTE *)(a3 + 8) = v4 & 1;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Rows(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1]);
}

void protocol witness for Collection.index(after:) in conformance MLDataTable.Rows(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = specialized RandomAccessCollection<>.index(after:)(*a1);
  OUTLINED_FUNCTION_22();
}

void protocol witness for Collection.formIndex(after:) in conformance MLDataTable.Rows(uint64_t *a1)
{
  *a1 = specialized RandomAccessCollection<>.index(after:)(*a1);
  OUTLINED_FUNCTION_22();
}

void protocol witness for Sequence.makeIterator() in conformance MLDataTable.Rows(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance MLDataTable.Rows()
{
  return specialized Collection.underestimatedCount.getter();
}

void protocol witness for Sequence._copyToContiguousArray() in conformance MLDataTable.Rows()
{
  uint64_t v0;

  specialized Collection._copyToContiguousArray()(*(void **)v0, *(_BYTE *)(v0 + 8));
}

void protocol witness for Sequence._copyContents(initializing:) in conformance MLDataTable.Rows(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  specialized Sequence._copyContents(initializing:)(a1, a2, a3, *(_QWORD *)v3, *(_BYTE *)(v3 + 8));
}

uint64_t MLDataTable.Rows.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69[8];
  char v70[8];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;

  v2 = *(void **)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  v73 = (uint64_t)v2;
  LOBYTE(v74) = v3;
  outlined copy of Result<_DataTable, Error>(v2, v3);
  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_0_27();
  OUTLINED_FUNCTION_1_20();
  v66 = v0;
  v4 = 0x2020203A7379654BLL;
  if (v0 < 1)
    v4 = 0x2020203A79654BLL;
  v5 = 0xE800000000000000;
  if (v0 < 1)
    v5 = 0xE700000000000000;
  v75 = v4;
  v76 = v5;
  v73 = (uint64_t)v2;
  LOBYTE(v74) = v3;
  outlined copy of Result<_DataTable, Error>(v2, v3);
  OUTLINED_FUNCTION_19_13();
  OUTLINED_FUNCTION_0_27();
  OUTLINED_FUNCTION_1_20();
  if (v0 >= 10)
    v14 = 10;
  else
    v14 = v0;
  if ((v14 & 0x8000000000000000) == 0)
  {
    if (!v14)
    {
LABEL_31:
      v73 = (uint64_t)v2;
      LOBYTE(v74) = v3;
      outlined copy of Result<_DataTable, Error>(v2, v3);
      OUTLINED_FUNCTION_19_13();
      OUTLINED_FUNCTION_0_27();
      OUTLINED_FUNCTION_1_20();
      if (v14 < v0)
      {
        v59._countAndFlagsBits = 0x2E2E2E202CLL;
        v59._object = (void *)0xE500000000000000;
        String.append(_:)(v59);
      }
      return v75;
    }
    v15 = 0;
    v64 = (uint64_t)v2;
    v65 = v14;
    HIDWORD(v63) = v3;
    while (v15 != v14)
    {
      if (v15)
      {
        LOBYTE(v72) = v3;
        MLDataTable.Rows.subscript.getter(v15, &v73);
        OUTLINED_FUNCTION_15_13();
        swift_release();
        OUTLINED_FUNCTION_14_12();
        v16 = OUTLINED_FUNCTION_11_12();
        OUTLINED_FUNCTION_7_16(v16, v17, v18, v19, v20, v21, v22, v23, v61, v63, v64, v65, v66, v67, v68, 32, v72);
        swift_bridgeObjectRelease();
        v73 = *(_QWORD *)v69;
        v74 = v72;
        swift_bridgeObjectRetain();
        v24._countAndFlagsBits = 32;
        v24._object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        OUTLINED_FUNCTION_123();
        v0 = v74;
        OUTLINED_FUNCTION_17_8(v73);
        v6 = OUTLINED_FUNCTION_123();
      }
      else
      {
        v67 = 0;
        OUTLINED_FUNCTION_2_27(v6, v7, v8, v9, v10, v11, v12, v13, v61);
        swift_release();
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_16_15();
        v25 = CMLSequence.size.getter();
        OUTLINED_FUNCTION_5_1(v25);
        v27 = v26;
        OUTLINED_FUNCTION_16_15();
        v28 = CMLSequence.size.getter();
        OUTLINED_FUNCTION_5_1(v28);
        v30 = v29;
        swift_release();
        if (v30 < 0)
          goto LABEL_36;
        OUTLINED_FUNCTION_16_15();
        v31 = CMLSequence.size.getter();
        OUTLINED_FUNCTION_5_1(v31);
        v33 = v32;
        swift_release_n();
        if (v27 < 0 || v33 < v27)
          goto LABEL_37;
        if (v27)
        {
          *(_QWORD *)v70 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v34 = 0;
          v35 = *(_QWORD *)v70;
          while (v27 != v34)
          {
            CMLSequence.value(at:)(v34);
            v36 = CMLFeatureValue.stringValue()();
            OUTLINED_FUNCTION_4_2();
            if (v37)
              goto LABEL_39;
            v38 = *(_QWORD *)(*(_QWORD *)v70 + 16);
            if (v38 >= *(_QWORD *)(*(_QWORD *)v70 + 24) >> 1)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            ++v34;
            *(_QWORD *)(*(_QWORD *)v70 + 16) = v38 + 1;
            *(Swift::String *)(*(_QWORD *)v70 + 16 * v38 + 32) = v36;
            if (v27 == v34)
            {
              v2 = (void *)v64;
              LOBYTE(v3) = BYTE4(v63);
              goto LABEL_26;
            }
          }
          __break(1u);
          break;
        }
        v35 = MEMORY[0x24BEE4AF8];
LABEL_26:
        v0 = MEMORY[0x22075AAA4](v35, MEMORY[0x24BEE0D00]);
        v40 = v39;
        swift_release();
        swift_bridgeObjectRelease();
        v41._countAndFlagsBits = v0;
        v41._object = v40;
        String.append(_:)(v41);
        v42 = swift_bridgeObjectRelease();
        if (v66 < 1)
        {
          v58._countAndFlagsBits = 0x203A65756C61560ALL;
          v58._object = (void *)0xE800000000000000;
          String.append(_:)(v58);
        }
        else
        {
          OUTLINED_FUNCTION_2_27(v42, v43, v44, v45, v46, v47, v48, v49, v61);
          OUTLINED_FUNCTION_15_13();
          swift_release();
          OUTLINED_FUNCTION_14_12();
          v50 = OUTLINED_FUNCTION_11_12();
          OUTLINED_FUNCTION_7_16(v50, v51, v52, v53, v54, v55, v56, v57, v62, v63, v64, v65, v66, 0, v68, 10, v72);
          swift_bridgeObjectRelease();
          v0 = v72;
          OUTLINED_FUNCTION_17_8(v71);
          v6 = OUTLINED_FUNCTION_123();
        }
        v14 = v65;
        v15 = v67;
      }
      if (++v15 == v14)
        goto LABEL_31;
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  __break(1u);
LABEL_39:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t MLDataTable.Rows.debugDescription.getter()
{
  return OUTLINED_FUNCTION_3_22();
}

unint64_t MLDataTable.Rows.playgroundDescription.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;

  v2 = OUTLINED_FUNCTION_3_22();
  v4 = v3;
  v5 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  @nonobjc NSAttributedString.init(string:attributes:)(v2, v4, 0);
  v7 = v6;
  result = type metadata accessor for NSAttributedString();
  a1[3] = result;
  *a1 = v7;
  return result;
}

unint64_t lazy protocol witness table accessor for type MLDataTable.Rows and conformance MLDataTable.Rows()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows;
  if (!lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.Rows, &type metadata for MLDataTable.Rows);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows;
  if (!lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.Rows, &type metadata for MLDataTable.Rows);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows;
  if (!lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.Rows, &type metadata for MLDataTable.Rows);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows;
  if (!lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.Rows, &type metadata for MLDataTable.Rows);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Rows and conformance MLDataTable.Rows);
  }
  return result;
}

void associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in MLDataTable.Rows()
{
  lazy protocol witness table accessor for type Slice<MLDataTable.Rows> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.Rows> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type MLDataTable.Rows and conformance MLDataTable.Rows, MEMORY[0x24BEE4230]);
}

void associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in MLDataTable.Rows()
{
  lazy protocol witness table accessor for type Slice<MLDataTable.Rows> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<MLDataTable.Rows> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type MLDataTable.Rows and conformance MLDataTable.Rows, MEMORY[0x24BEE4218]);
}

void lazy protocol witness table accessor for type Slice<MLDataTable.Rows> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!*a1)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<MLDataTable.Rows>);
    v7 = a2();
    atomic_store(MEMORY[0x22075B938](a3, v6, &v7), a1);
  }
  OUTLINED_FUNCTION_27_0();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MLDataTable.Rows()
{
  return lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type Slice<MLDataTable.Rows> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MLDataTable.Rows>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataTable.Rows()
{
  return lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<MLDataTable.Rows> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<MLDataTable.Rows>, MEMORY[0x24BEE2C18]);
}

uint64_t initializeBufferWithCopyOfBuffer for MLDataTable.Rows(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of Result<_DataTable, Error>(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for MLDataTable.Rows(uint64_t a1)
{
  outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for MLDataTable.Rows(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of Result<_DataTable, Error>(*(id *)a2, v4);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of Result<_DataTable, Error>(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for MLDataTable.Rows(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of Result<_DataTable, Error>(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDataTable.Rows(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDataTable.Rows(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLDataTable.Rows()
{
  return &type metadata for MLDataTable.Rows;
}

uint64_t OUTLINED_FUNCTION_0_27()
{
  return specialized RandomAccessCollection<>.distance(from:to:)();
}

void OUTLINED_FUNCTION_1_20()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

void OUTLINED_FUNCTION_2_27(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  MLDataTable.Rows.subscript.getter(0, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_3_22()
{
  return MLDataTable.Rows.description.getter();
}

id OUTLINED_FUNCTION_4_21()
{
  void *v0;

  return outlined copy of Result<_DataTable, Error>(v0, 0);
}

void OUTLINED_FUNCTION_7_16(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  uint64_t v17;
  void *v18;
  Swift::String v19;

  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
}

uint64_t OUTLINED_FUNCTION_11_12()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_14_12()
{
  return MLDataTable.Row.Values.description.getter();
}

uint64_t OUTLINED_FUNCTION_15_13()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_16_15()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_17_8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_19_13()
{
  return MLDataTable.size.getter();
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML30MLLogisticRegressionClassifierV_s5Error_pTgm503_s8c4ML30efg80V12handleResult33_66687B25F10324110578427E448BFE6CLL_7session7fulfillys0G0Oyyts5H55_pG_AA17MLTrainingSessionCyACGyAIyACsAJ_pGctFZACyKXEfU_AE08Logisticfg8TrainingW8DelegateCTf1nc_n@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLLogisticRegressionClassifier, Error>);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v9[-v6];
  swift_retain();
  MLLogisticRegressionClassifier.init(delegate:)();
  swift_storeEnumTagMultiPayload();
  outlined init with take of (key: URL, value: CIImage)?((uint64_t)v5, (uint64_t)v7, &demangling cache variable for type metadata for Result<MLLogisticRegressionClassifier, Error>);
  outlined init with take of (key: URL, value: CIImage)?((uint64_t)v7, a1, &demangling cache variable for type metadata for Result<MLLogisticRegressionClassifier, Error>);
  return swift_release();
}

id MLLogisticRegressionClassifier.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_8_18() + 20));
}

uint64_t type metadata accessor for MLLogisticRegressionClassifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLLogisticRegressionClassifier;
  if (!type metadata singleton initialization cache for MLLogisticRegressionClassifier)
    return swift_getSingletonMetadata();
  return result;
}

void key path setter for MLLogisticRegressionClassifier.model : MLLogisticRegressionClassifier(id *a1)
{
  MLLogisticRegressionClassifier.model.setter((uint64_t)*a1);
}

void MLLogisticRegressionClassifier.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_8_18() + 20);

  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

void (*MLLogisticRegressionClassifier.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_8_18() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(void **)(v1 + v3);
  *(_QWORD *)a1 = v4;
  v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

uint64_t MLLogisticRegressionClassifier.targetColumn.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_8_18() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

void MLLogisticRegressionClassifier.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(OUTLINED_FUNCTION_8_18() + 24));
  swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLLogisticRegressionClassifier.targetColumn.modify())(_QWORD)
{
  OUTLINED_FUNCTION_8_18();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLogisticRegressionClassifier.featureColumns.getter()
{
  OUTLINED_FUNCTION_8_18();
  return swift_bridgeObjectRetain();
}

void MLLogisticRegressionClassifier.featureColumns.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_8_18() + 28);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLLogisticRegressionClassifier.featureColumns.modify())(_QWORD)
{
  OUTLINED_FUNCTION_8_18();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLogisticRegressionClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = (uint64_t *)(v1 + *(int *)(OUTLINED_FUNCTION_8_18() + 32));
  return outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v3, a1);
}

uint64_t outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for MLLogisticRegressionClassifier.ModelParameters(a2, a1);
  return a2;
}

void MLLogisticRegressionClassifier.trainingMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_8_18();
  outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 36), a1, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void MLLogisticRegressionClassifier.validationMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_8_18();
  outlined init with copy of MLTrainingSessionParameters(v1 + *(int *)(v3 + 40), a1, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void static MLLogisticRegressionClassifier._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLLogisticRegressionClassifier._defaultSessionParameters);
  outlined init with copy of MLTrainingSessionParameters(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_22();
}

#error "21AE63AEC: call analysis failed (funcsize=110)"

uint64_t closure #1 in MLLogisticRegressionClassifier.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:);
  return v4();
}

void MLLogisticRegressionClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(_QWORD, _QWORD, _QWORD);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t);
  void (*v103)(uint64_t, unint64_t);
  uint64_t inited;
  unint64_t v105;
  Swift::String v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, unint64_t);
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  Swift::String v115;
  Swift::String v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  int *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void (*v159)(char *, unint64_t);
  uint64_t (*v160)(_QWORD, _QWORD, _QWORD);
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  int *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  void (*v180)(uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  char *v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE v196[80];
  uint64_t v197;
  _QWORD v198[4];
  char *v199;

  OUTLINED_FUNCTION_8_1();
  a19 = v21;
  a20 = v22;
  v191 = v20;
  v24 = v23;
  v190 = (char *)v25;
  v199 = v26;
  v187 = (_QWORD *)v27;
  v29 = v28;
  v31 = v30;
  type metadata accessor for AnyClassificationMetrics();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_211();
  v35 = OUTLINED_FUNCTION_28_3(v34);
  type metadata accessor for MLClassifierMetrics(v35);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v38);
  v39 = type metadata accessor for MLLogisticRegressionClassifier.Model();
  v176 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_68_3((uint64_t)&v158 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  v174 = v41;
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v43);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v45);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v47);
  v181 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v49);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v50);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v51);
  type metadata accessor for MLLogisticRegressionClassifier.Classifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v52);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v53);
  v193 = type metadata accessor for DataFrame();
  v192 = *(_QWORD *)(v193 - 8);
  MEMORY[0x24BDAC7A8](v193);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v54);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v56);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v57);
  type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v58);
  OUTLINED_FUNCTION_5();
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v60);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v61);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  v63 = MEMORY[0x24BDAC7A8](v62);
  v65 = (char *)&v158 - v64;
  MEMORY[0x24BDAC7A8](v63);
  v67 = (char *)&v158 - v66;
  v68 = OUTLINED_FUNCTION_8_18();
  v189 = v31 + *(int *)(v68 + 36);
  MLClassifierMetrics.init()(v68, v69, v70, v71, v72, v73, v74, v75, v158, (uint64_t)v159, (uint64_t)v160, v161, v162, v163, v164, v165, v166, v167, v168,
    v169);
  v175 = (int *)v68;
  v76 = *(int *)(v68 + 40);
  v178 = v31;
  v77 = (_QWORD *)(v31 + v76);
  v78 = lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v79, 0xD0000000000000C0);
  *v77 = v80;
  v81 = OUTLINED_FUNCTION_83_4();
  v188 = v77;
  v82 = v24;
  v171 = v81;
  OUTLINED_FUNCTION_79_4();
  outlined init with copy of URL?((uint64_t)(v24 + 1), (uint64_t)&v197, &demangling cache variable for type metadata for Any?);
  if (v198[2])
  {
    v83 = (uint64_t)&v67[*(int *)(v59 + 48)];
    OUTLINED_FUNCTION_73_3();
    OUTLINED_FUNCTION_28_12();
    v84 = v191;
    MLLogisticRegressionClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    if (v84)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_21_11();
      v86 = OUTLINED_FUNCTION_75_6(*(uint64_t (**)(uint64_t, _QWORD))(v192 + 8));
      OUTLINED_FUNCTION_203(v86, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData);
LABEL_19:
      OUTLINED_FUNCTION_29_9();
      OUTLINED_FUNCTION_92((uint64_t)v67);
      OUTLINED_FUNCTION_92(v59);
LABEL_20:
      OUTLINED_FUNCTION_7();
      return;
    }
    v191 = v83;
    v163 = v59;
    OUTLINED_FUNCTION_203(v85, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData);
    static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v67, (uint64_t)v187, v199, (uint64_t)v190);
    v87 = v192;
    v161 = v88;
    v158 = v78;
    v162 = v29;
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_52_6();
    v90 = (uint64_t)&v65[v89];
    v91 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v87 + 16);
    v190 = v67;
    v59 = v193;
    v160 = v91;
    v92 = v91(v65, v67, v193);
    OUTLINED_FUNCTION_53_8(v92, v93, &demangling cache variable for type metadata for DataFrame?);
    v94 = OUTLINED_FUNCTION_128(v90, 1, v59);
    if (v95)
    {
      OUTLINED_FUNCTION_78_5(v94, &demangling cache variable for type metadata for DataFrame?);
      v159 = *(void (**)(char *, unint64_t))(v87 + 8);
      v159(v65, v59);
      v96 = (uint64_t)v187;
    }
    else
    {
      v102 = v180;
      OUTLINED_FUNCTION_74_4((uint64_t)v180, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 32));
      v103 = *(void (**)(uint64_t, unint64_t))(v87 + 8);
      OUTLINED_FUNCTION_34_10((uint64_t)v65);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
      v67 = v199;
      *(_QWORD *)(inited + 32) = v187;
      *(_QWORD *)(inited + 40) = v199;
      swift_bridgeObjectRetain();
      v105 = v59;
      v59 = 0x800000021AFF3970;
      v106._countAndFlagsBits = 0xD00000000000001CLL;
      v106._object = (void *)0x800000021AFF3970;
      DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v106);
      if (v107)
      {
        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        OUTLINED_FUNCTION_12_0();
        OUTLINED_FUNCTION_19_14();
        OUTLINED_FUNCTION_21_11();
        v103(v162, v105);
        v108 = OUTLINED_FUNCTION_59_6();
        ((void (*)(uint64_t))v103)(v108);
LABEL_16:
        v119 = (uint64_t)v190;
LABEL_18:
        outlined destroy of URL?(v119, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        goto LABEL_19;
      }
      v159 = (void (*)(char *, unint64_t))v103;
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
      v113 = swift_allocObject();
      *(_OWORD *)(v113 + 16) = xmmword_21AFE7F70;
      v114 = MEMORY[0x24BEE1768];
      *(_QWORD *)(v113 + 32) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v113 + 40) = v114;
      v96 = (uint64_t)v187;
      v115._countAndFlagsBits = (uint64_t)v187;
      v115._object = v199;
      v116._countAndFlagsBits = 0xD00000000000001CLL;
      v116._object = (void *)0x800000021AFF3970;
      DataFrame.validateColumnTypes(_:_:context:)(v115, (Swift::OpaquePointer)v113, v116);
      if (v117)
      {
        OUTLINED_FUNCTION_12_0();
        OUTLINED_FUNCTION_19_14();
        OUTLINED_FUNCTION_106_0();
        OUTLINED_FUNCTION_21_11();
        OUTLINED_FUNCTION_41_5();
        v118 = OUTLINED_FUNCTION_59_6();
        v102(v118);
        goto LABEL_16;
      }
      v59 = v193;
      OUTLINED_FUNCTION_23_10();
      OUTLINED_FUNCTION_106_0();
    }
    MEMORY[0x220758A1C](v96, v199);
    OUTLINED_FUNCTION_52_6();
    v97 = v183;
    v99 = v183 + v98;
    OUTLINED_FUNCTION_62_7(v183, (uint64_t)v190);
    OUTLINED_FUNCTION_76_2(v191);
    v100 = v99;
    v101 = (uint64_t)v184;
    outlined init with take of (key: URL, value: CIImage)?(v100, (uint64_t)v184, &demangling cache variable for type metadata for DataFrame?);
    OUTLINED_FUNCTION_128(v101, 1, v59);
    v67 = v185;
    if (v95)
    {
      OUTLINED_FUNCTION_41_5();
      outlined destroy of URL?(v101, &demangling cache variable for type metadata for DataFrame?);
      OUTLINED_FUNCTION_58_4(v182, 1);
    }
    else
    {
      v109 = (void (*)(uint64_t, unint64_t))v101;
      v110 = v182;
      MEMORY[0x220758A1C](v96, v199);
      OUTLINED_FUNCTION_41_5();
      OUTLINED_FUNCTION_58_4(v110, 0);
      v109(v97, v59);
    }
    outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v82, (uint64_t)v196);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MLLogisticRegressionClassifier.Classifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:parameters:)();
    v111 = (uint64_t)v190;
    if (*(_QWORD *)(*((_QWORD *)v67 + 13) + 16) > 1uLL)
    {
      v112 = v179;
      MLLogisticRegressionClassifier.Classifier.fitted(to:validateOn:eventHandler:)();
      v122 = v175;
      v123 = v82;
      v124 = v178;
      v125 = (uint64_t *)(v178 + v175[6]);
      v126 = (uint64_t)v187;
      v187 = v125;
      *v125 = v126;
      v125[1] = (uint64_t)v199;
      outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v123, v124 + v122[8]);
      v186 = v122[7];
      *(_QWORD *)(v124 + v186) = v161;
      v127 = v177;
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v112, v177, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
      v128 = (*(unsigned __int8 *)(v176 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80);
      v129 = swift_allocObject();
      outlined init with take of MLHandPoseClassifier.ModelParameters(v127, v129 + v128, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
      specialized blockAwait<A>(_:)();
      v131 = v130;
      v184 = v123;
      swift_release();
      *(_QWORD *)(v124 + v122[5]) = v131;
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v112, v124, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
      v132 = v173;
      v133 = (uint64_t)v190;
      OUTLINED_FUNCTION_18();
      MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(v134);
      v135 = *v112;
      v136 = v112[1];
      v137 = v172;
      MEMORY[0x220758A1C](*v112, v136);
      MEMORY[0x220758A1C](v135, v136);
      v138 = v170;
      AnyClassificationMetrics.init(_:_:)();
      v139 = v132;
      v140 = v193;
      v141 = (void (*)(uint64_t, uint64_t))v159;
      v159(v139, v193);
      OUTLINED_FUNCTION_67_5(v138, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics, (uint64_t)v196);
      OUTLINED_FUNCTION_39_6();
      outlined assign with take of MLClassifierMetrics(v137, v189);
      OUTLINED_FUNCTION_52_6();
      v142 = v168;
      v144 = v168 + v143;
      v145 = OUTLINED_FUNCTION_62_7(v168, v133);
      OUTLINED_FUNCTION_53_8(v145, v146, &demangling cache variable for type metadata for DataFrame?);
      OUTLINED_FUNCTION_128(v144, 1, v140);
      if (v95)
      {
        OUTLINED_FUNCTION_24_9();
        OUTLINED_FUNCTION_34_10(v162);
        OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model, (uint64_t)v198);
        OUTLINED_FUNCTION_63_6(v147, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
        outlined destroy of URL?(v133, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        OUTLINED_FUNCTION_78_5(v148, &demangling cache variable for type metadata for DataFrame?);
        OUTLINED_FUNCTION_34_10(v142);
      }
      else
      {
        OUTLINED_FUNCTION_74_4(v167, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v192 + 32));
        OUTLINED_FUNCTION_34_10(v142);
        OUTLINED_FUNCTION_18();
        MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(v149);
        v150 = v140;
        v151 = v172;
        v152 = OUTLINED_FUNCTION_71_6();
        MEMORY[0x220758A1C](v152);
        v153 = OUTLINED_FUNCTION_71_6();
        v154 = v167;
        MEMORY[0x220758A1C](v153);
        v155 = v165;
        AnyClassificationMetrics.init(_:_:)();
        OUTLINED_FUNCTION_68_4((uint64_t)&v195);
        OUTLINED_FUNCTION_24_9();
        OUTLINED_FUNCTION_68_4((uint64_t)&v193);
        v141(v154, v150);
        OUTLINED_FUNCTION_69_3((uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model, (uint64_t)v198);
        OUTLINED_FUNCTION_63_6(v156, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
        OUTLINED_FUNCTION_37_6(v157, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
        OUTLINED_FUNCTION_67_5(v155, (uint64_t (*)(_QWORD))type metadata accessor for AnyClassificationMetrics, (uint64_t)&v194);
        OUTLINED_FUNCTION_39_6();
        outlined assign with take of MLClassifierMetrics(v151, (uint64_t)v188);
      }
      goto LABEL_20;
    }
    OUTLINED_FUNCTION_19_14();
    OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_49_0();
    v121 = OUTLINED_FUNCTION_44_2(v120, 0xD000000000000027);
    swift_willThrow(v121);
    OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_65_7();
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
    v119 = v111;
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t partial apply for closure #1 in MLLogisticRegressionClassifier.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_35_6();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLLogisticRegressionClassifier.init(_:targetColumn:featureColumns:parameters:)(v2);
}

void MLLogisticRegressionClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_161();
  v12 = *(_BYTE *)(a1 + 8);
  v16 = *(_QWORD *)a1;
  LOBYTE(v17) = v12;
  DataFrame.init(_:)((uint64_t)&v16);
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(a5, (uint64_t)&v16);
  MLLogisticRegressionClassifier.init(trainingData:targetColumn:featureColumns:parameters:)(v5, a2, a3, a4, (uint64_t)&v16, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26,
    v27);
  outlined destroy of MLLogisticRegressionClassifier.ModelParameters((uint64_t)a5);
  OUTLINED_FUNCTION_127();
}

void MLLogisticRegressionClassifier.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_8_1();
  v2 = v1;
  v4 = v3;
  v26 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_208();
  v25 = v6;
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_211();
  v27 = v8;
  v9 = OUTLINED_FUNCTION_35_6();
  v29 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_211();
  v30 = v11;
  type metadata accessor for MLLogisticRegressionClassifier.Classifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_5();
  v13 = OUTLINED_FUNCTION_8_18();
  MLClassifierMetrics.init()(v13, v14, v15, v16, v17, v18, v19, v20, v25, v26, v27, v28, v29, v0, v4 + *(int *)(v13 + 36), v30, v31, v32, v33,
    v34);
  v21 = (_QWORD *)(v4 + *(int *)(v13 + 40));
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v22, 0xD0000000000000C0);
  *v21 = v23;
  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_79_4();
  v24 = (char *)sub_21AE64D1C
      + 4 * byte_21AFE9E70[*(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for MLCheckpoint() + 20))];
  __asm { BR              X10 }
}

void sub_21AE64D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v23;
  uint64_t v24;

  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  OUTLINED_FUNCTION_12_0();
  if ((v5 & 1) == 0)
  {
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v9 = 0xD000000000000049;
    *(_QWORD *)(v9 + 8) = 0x800000021AFF3990;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_BYTE *)(v9 + 48) = 0;
    swift_willThrow(0.0);
    v15 = type metadata accessor for MLCheckpoint;
    v16 = *(_QWORD *)(v4 - 72);
    goto LABEL_6;
  }
  MLLogisticRegressionClassifier.Classifier.init(labels:annotationColumnName:featureColumnNames:)(MEMORY[0x24BEE4AF8], 1, 0, 0xE000000000000000, MEMORY[0x24BEE4AF8], v0);
  lazy protocol witness table accessor for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier();
  v6 = *(_QWORD *)(v4 - 120);
  v7 = *(_QWORD *)(v4 - 72);
  v8 = *(_QWORD *)(v4 - 136);
  UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
  if (v8)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v15 = type metadata accessor for MLLogisticRegressionClassifier.Classifier;
    v16 = v0;
LABEL_6:
    outlined destroy of MLHandPoseClassifier.ModelParameters(v16, (uint64_t (*)(_QWORD))v15);
    OUTLINED_FUNCTION_92(*(_QWORD *)(v4 - 128));
    OUTLINED_FUNCTION_92(v2);
    goto LABEL_7;
  }
  outlined init with copy of MLTrainingSessionParameters(v6, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 144) + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v1, v12 + v11, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
  specialized blockAwait<A>(_:)();
  v14 = v13;
  swift_release();
  v17 = *(_QWORD *)(v4 - 152);
  *(_QWORD *)(v17 + v3[5]) = v14;
  outlined init with copy of MLTrainingSessionParameters(*(_QWORD *)(v4 - 120), v17, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
  v19 = *(_QWORD *)(v4 - 168);
  v18 = *(_QWORD *)(v4 - 160);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_WORD *)(v18 + 16) = 256;
  swift_storeEnumTagMultiPayload();
  v20 = v17 + v3[8];
  *(_OWORD *)(v20 + 40) = xmmword_21AFE9550;
  *(_OWORD *)(v20 + 56) = xmmword_21AFE9560;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_QWORD *)v20 = 10;
  *(_BYTE *)(v20 + 72) = 1;
  *(_OWORD *)(v20 + 8) = 0u;
  v21 = *(_QWORD *)(v4 - 176);
  outlined init with copy of MLTrainingSessionParameters(v18, v21, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData);
  *(_QWORD *)(v4 - 88) = v19;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v4 - 112));
  outlined init with take of MLHandPoseClassifier.ModelParameters(v21, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData);
  outlined assign with take of Any?(v4 - 112, v20 + 8);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v18, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData);
  v23 = (_QWORD *)(v17 + v3[6]);
  *v23 = 0;
  v23[1] = 0xE000000000000000;
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v4 - 72), (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v4 - 120), (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
  OUTLINED_FUNCTION_203(v24, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
  *(_QWORD *)(v17 + v3[7]) = MEMORY[0x24BEE4AF8];
LABEL_7:
  OUTLINED_FUNCTION_7();
}

uint64_t closure #1 in MLLogisticRegressionClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                             + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = closure #1 in MLRandomForestRegressor.init(checkpoint:);
  return v4();
}

void static MLLogisticRegressionClassifier.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_8_1();
  v2 = OUTLINED_FUNCTION_93();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_91_1();
  v4 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v4);
  static MLLogisticRegressionClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLLogisticRegressionClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;

  static MLLogisticRegressionClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLLogisticRegressionClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
}

void static MLLogisticRegressionClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_1();
  v1 = OUTLINED_FUNCTION_93();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_5();
  v3 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v3);
  static MLLogisticRegressionClassifier.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[10];
  _QWORD v38[5];
  uint64_t v39;

  OUTLINED_FUNCTION_8_1();
  v39 = v1;
  v3 = v2;
  v35 = v4;
  v36 = v5;
  v34 = v6;
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_208();
  v31 = v8;
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_211();
  v33 = v10;
  type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_5();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v29 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)v29 - v20;
  v32 = v3;
  outlined init with copy of URL?((uint64_t)(v3 + 1), (uint64_t)v38, &demangling cache variable for type metadata for Any?);
  if (v38[3])
  {
    v22 = (uint64_t)&v21[*(int *)(v12 + 48)];
    OUTLINED_FUNCTION_73_3();
    OUTLINED_FUNCTION_28_12();
    MLLogisticRegressionClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    OUTLINED_FUNCTION_203(v23, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData);
    if (!v0)
    {
      v24 = (uint64_t)&v19[*(int *)(v12 + 48)];
      v29[1] = *(_QWORD *)(OUTLINED_FUNCTION_93() - 8);
      OUTLINED_FUNCTION_81_6((uint64_t)v19);
      v30 = v24;
      outlined init with copy of URL?(v22, v24, &demangling cache variable for type metadata for DataFrame?);
      v29[0] = &v16[*(int *)(v12 + 48)];
      OUTLINED_FUNCTION_81_6((uint64_t)v16);
      OUTLINED_FUNCTION_76_2(v22);
      outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v32, (uint64_t)v37);
      OUTLINED_FUNCTION_131(v39, v25, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      v26 = type metadata accessor for LogisticRegressionClassifierTrainingSessionDelegate();
      OUTLINED_FUNCTION_15_1();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27 = LogisticRegressionClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:modelParameters:sessionParameters:)();
      OUTLINED_FUNCTION_27_14();
      outlined destroy of URL?(v30, &demangling cache variable for type metadata for DataFrame?);
      v37[3] = v26;
      v37[4] = &protocol witness table for LogisticRegressionClassifierTrainingSessionDelegate;
      v37[0] = v27;
      v28 = v31;
      outlined init with copy of MLTrainingSessionParameters(v39, v31, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>);
      OUTLINED_FUNCTION_15_1();
      swift_retain();
      specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v37, v28, 8);
      outlined destroy of URL?((uint64_t)v21, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
    OUTLINED_FUNCTION_7();
  }
  else
  {
    __break(1u);
  }
}

void static MLLogisticRegressionClassifier.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLLogisticRegressionClassifier>);
  OUTLINED_FUNCTION_15_1();
  swift_retain();
  specialized MLJob.init(_:)();
}

void static MLLogisticRegressionClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14[-1] - v7;
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)&v14[-1] - v7, v9);
  v10 = type metadata accessor for LogisticRegressionClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v11 = LogisticRegressionClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v8);
  if (!v1)
  {
    v14[3] = v10;
    v14[4] = &protocol witness table for LogisticRegressionClassifierTrainingSessionDelegate;
    v14[0] = v11;
    OUTLINED_FUNCTION_131(a1, v12, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLLogisticRegressionClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v14, (uint64_t)v6, 8);
  }
}

void closure #1 in closure #1 in static MLLogisticRegressionClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *))
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  _BYTE v13[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLLogisticRegressionClassifier, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a2 & 1) != 0)
  {
    *v10 = a1;
    swift_storeEnumTagMultiPayload();
    v11 = a1;
    a4(v10);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for LogisticRegressionClassifierTrainingSessionDelegate();
    swift_dynamicCast();
    swift_retain();
    _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML30MLLogisticRegressionClassifierV_s5Error_pTgm503_s8c4ML30efg80V12handleResult33_66687B25F10324110578427E448BFE6CLL_7session7fulfillys0G0Oyyts5H55_pG_AA17MLTrainingSessionCyACGyAIyACsAJ_pGctFZACyKXEfU_AE08Logisticfg8TrainingW8DelegateCTf1nc_n((uint64_t)v10);
    a4(v10);
    swift_release();
  }
  outlined destroy of URL?((uint64_t)v10, &demangling cache variable for type metadata for Result<MLLogisticRegressionClassifier, Error>);
  OUTLINED_FUNCTION_164();
}

void MLLogisticRegressionClassifier.init(delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[104];
  uint64_t v49[14];

  OUTLINED_FUNCTION_8_1();
  v4 = v3;
  v47 = v5;
  v46 = type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v42 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_36_6();
  v44 = type metadata accessor for MLLogisticRegressionClassifier();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of URL?(v21, (uint64_t)v16, &demangling cache variable for type metadata for MLLogisticRegressionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_128((uint64_t)v16, 1, (uint64_t)v17);
  if (v22)
  {
    __break(1u);
    goto LABEL_11;
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters((uint64_t *)&v20[v17[8]], (uint64_t)v49);
  v23 = v17[7];
  v24 = &v20[v17[6]];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  v27 = *(_QWORD *)&v20[v23];
  OUTLINED_FUNCTION_29_0();
  v28 = OUTLINED_FUNCTION_59_6();
  outlined init with copy of URL?(v28, v29, v30);
  v31 = OUTLINED_FUNCTION_35_6();
  OUTLINED_FUNCTION_128(v0, 1, v31);
  if (v22)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v49, (uint64_t)v48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MLLogisticRegressionClassifier.init(_:targetColumn:featureColumns:parameters:)(v0, v26, v25, v27, v48);
  if (v2)
  {
    swift_release();
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters((uint64_t)v49);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
LABEL_9:
    OUTLINED_FUNCTION_7();
    return;
  }
  v32 = v47;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v1, v47, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier);
  v33 = v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_trainingMetrics;
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of URL?(v33, (uint64_t)v11, &demangling cache variable for type metadata for MLClassifierMetrics?);
  v34 = v46;
  OUTLINED_FUNCTION_128((uint64_t)v11, 1, v46);
  if (!v22)
  {
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters((uint64_t)v49);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.PersistentParameters);
    v35 = v44;
    outlined assign with take of MLClassifierMetrics((uint64_t)v11, v32 + *(int *)(v44 + 36));
    v36 = v4 + OBJC_IVAR____TtC8CreateML51LogisticRegressionClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_29_0();
    v37 = v36;
    v38 = v45;
    outlined init with copy of URL?(v37, v45, &demangling cache variable for type metadata for MLClassifierMetrics?);
    swift_release();
    v39 = OUTLINED_FUNCTION_128(v38, 1, v34);
    if (v22)
    {
      OUTLINED_FUNCTION_78_5(v39, &demangling cache variable for type metadata for MLClassifierMetrics?);
    }
    else
    {
      v40 = v38;
      v41 = v43;
      outlined init with take of MLHandPoseClassifier.ModelParameters(v40, v43, type metadata accessor for MLClassifierMetrics);
      outlined assign with take of MLClassifierMetrics(v41, v32 + *(int *)(v35 + 40));
    }
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
}

void MLLogisticRegressionClassifier.predictions(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::OpaquePointer v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;

  v2 = OUTLINED_FUNCTION_93();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for MLLogisticRegressionClassifier();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v4, v5);
  if (!v6)
  {
    OUTLINED_FUNCTION_18();
    MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(v7);
    MEMORY[0x220758A1C](*v0, v0[1]);
    OUTLINED_FUNCTION_23_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
}

void MLLogisticRegressionClassifier.predictions(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  char v10;

  v6 = OUTLINED_FUNCTION_93();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_54_0();
  v8 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v8;
  outlined copy of Result<_DataTable, Error>(v9, v8);
  DataFrame.init(_:)((uint64_t)&v9);
  MLLogisticRegressionClassifier.predictions(from:)();
  OUTLINED_FUNCTION_60_5();
  if (!v2)
    MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v3, 1, a2);
  OUTLINED_FUNCTION_127();
}

uint64_t MLLogisticRegressionClassifier.evaluation(on:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::OpaquePointer v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t inited;
  _QWORD *v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;

  type metadata accessor for AnyClassificationMetrics();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OUTLINED_FUNCTION_8_18();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v9, v10);
  if (v11)
    goto LABEL_5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  v13 = (_QWORD *)(v2 + *(int *)(v8 + 24));
  v14 = v13[1];
  *(_QWORD *)(inited + 32) = *v13;
  *(_QWORD *)(inited + 40) = v14;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 0x6C6562614CLL;
  v15._object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v15);
  if (v11)
  {
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
LABEL_5:
    *a2 = v11;
    OUTLINED_FUNCTION_83_4();
    return swift_storeEnumTagMultiPayload();
  }
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  MLLogisticRegressionClassifier.Model.computeMetrics(on:)(a1, (uint64_t)v7);
  v17 = OUTLINED_FUNCTION_59_6();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v17, v18, v19);
  OUTLINED_FUNCTION_83_4();
  return swift_storeEnumTagMultiPayload();
}

void MLLogisticRegressionClassifier.evaluation(on:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  id v9;
  char v10;

  v5 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  v6 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v6;
  outlined copy of Result<_DataTable, Error>(v9, v6);
  DataFrame.init(_:)((uint64_t)&v9);
  MLLogisticRegressionClassifier.evaluation(on:)(v2, a2);
  v7 = OUTLINED_FUNCTION_71_6();
  v8(v7);
  OUTLINED_FUNCTION_164();
}

void MLLogisticRegressionClassifier.write(to:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[10];

  OUTLINED_FUNCTION_8_1();
  v31 = v0;
  v5 = v4;
  v37 = v6;
  OUTLINED_FUNCTION_35_6();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v8 = type metadata accessor for Model();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_91_1();
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_53_0();
  v30 = v5[1];
  v35 = v5[2];
  v36 = *v5;
  v33 = v5[4];
  v34 = v5[3];
  v12 = v5[6];
  v32 = v5[5];
  v13 = v5[7];
  v14 = v5[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v37, 0xD00000000000001CLL, 0x800000021AFF3970, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v3);
  if (!v1)
  {
    v29 = v13;
    v38 = v2;
    v28 = v8;
    OUTLINED_FUNCTION_131(v31, v15, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
    if (v30)
    {
      v16 = v36;
      v17 = v36;
      v18 = v30;
      v19 = v35;
      v20 = v34;
      v21 = v33;
      v22 = v32;
      v23 = v12;
      v24 = v29;
    }
    else
    {
      v25 = NSFullUserName();
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v26;

      v21 = 0;
      v22 = 0;
      v14 = 0;
      v19 = 0xD000000000000033;
      v20 = 0x800000021AFF2260;
      v24 = 0xE100000000000000;
      v23 = 49;
      v16 = v36;
    }
    v39[0] = v17;
    v39[1] = v18;
    v39[2] = v19;
    v39[3] = v20;
    v39[4] = v21;
    v39[5] = v22;
    v39[6] = v23;
    v39[7] = v24;
    v39[8] = v14;
    outlined copy of MLModelMetadata?(v16, v30);
    specialized CoreMLExportable.export(metadata:)(v39);
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_101();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_203(v27, (uint64_t (*)(_QWORD))type metadata accessor for MLLogisticRegressionClassifier.Model);
    Model.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v38, v28);
    OUTLINED_FUNCTION_23_2(v3, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  }
  OUTLINED_FUNCTION_7();
}

void MLLogisticRegressionClassifier.write(toFile:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_8_1();
  v3 = type metadata accessor for URL.DirectoryHint();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_36_6();
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_161();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, *MEMORY[0x24BDCD7A0], v3);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLLogisticRegressionClassifier.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
  OUTLINED_FUNCTION_7();
}

unint64_t MLLogisticRegressionClassifier.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;

  OUTLINED_FUNCTION_83_4();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = OUTLINED_FUNCTION_8_18();
  v5 = MLLogisticRegressionClassifier.ModelParameters.description.getter();
  v7 = v6;
  v8 = MLClassifierMetrics.description.getter();
  v10 = v9;
  outlined init with copy of MLTrainingSessionParameters(v0 + *(int *)(v4 + 40), (uint64_t)v3, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v4) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v3, type metadata accessor for MLClassifierMetrics.Contents);
  MLClassifierMetrics.description.getter();
  v16 = 0xD000000000000029;
  v17 = 0x800000021AFF39E0;
  v11._countAndFlagsBits = v5;
  v11._object = v7;
  String.append(_:)(v11);
  v15._countAndFlagsBits = 0xD00000000000001ELL;
  v15._object = (void *)0x800000021AFF1480;
  v12._countAndFlagsBits = v8;
  v12._object = v10;
  String.append(_:)(v12);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  if (v4 <= 1)
  {
    v15._countAndFlagsBits = 0xD000000000000020;
    v15._object = (void *)0x800000021AFF14A0;
    v13._countAndFlagsBits = OUTLINED_FUNCTION_71_6();
    String.append(_:)(v13);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

void MLLogisticRegressionClassifier.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  unint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString();
  v3._countAndFlagsBits = MLLogisticRegressionClassifier.debugDescription.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

unint64_t lazy protocol witness table accessor for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier;
  if (!lazy protocol witness table cache variable for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier)
  {
    v1 = type metadata accessor for MLLogisticRegressionClassifier.Classifier();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLLogisticRegressionClassifier.Classifier, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier;
  if (!lazy protocol witness table cache variable for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier)
  {
    v1 = type metadata accessor for MLLogisticRegressionClassifier.Classifier();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLLogisticRegressionClassifier.Classifier, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier);
  }
  return result;
}

uint64_t partial apply for closure #1 in MLLogisticRegressionClassifier.init(checkpoint:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_35_6();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLLogisticRegressionClassifier.init(checkpoint:)(v2);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_21AE66640(id *a1@<X8>)
{
  *a1 = MLLogisticRegressionClassifier.model.getter();
  OUTLINED_FUNCTION_22();
}

_QWORD *initializeBufferWithCopyOfBuffer for MLLogisticRegressionClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  id v34;
  __int128 v35;
  int *v36;
  uint64_t v37;
  void **v38;
  void **v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  void *v47;
  id v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  void **v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  void *v61;
  id v62;
  uint64_t *v63;
  uint64_t v64;
  char *v66;
  int *v67;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = type metadata accessor for MLLogisticRegressionClassifier.Model();
    v14 = *(int *)(v13 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for BaseLogisticRegressionClassifierModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = *(int *)(v13 + 28);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = *(_QWORD *)v20;
    LOBYTE(v20) = v20[8];
    *(_QWORD *)v19 = v21;
    v19[8] = (char)v20;
    v22 = a3[5];
    v23 = a3[6];
    v24 = *(void **)((char *)a2 + v22);
    *(_QWORD *)((char *)a1 + v22) = v24;
    v25 = (_QWORD *)((char *)a1 + v23);
    v26 = (_QWORD *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = a3[8];
    v67 = a3;
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    *(_QWORD *)((char *)a1 + v28) = *(_QWORD *)((char *)a2 + v28);
    v31 = (_OWORD *)((char *)a1 + v28 + 8);
    v32 = (_OWORD *)((char *)a2 + v28 + 8);
    v33 = *(_QWORD *)((char *)a2 + v28 + 32);
    swift_bridgeObjectRetain();
    v34 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33)
    {
      *((_QWORD *)v29 + 4) = v33;
      (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v33 - 8))(v31, v32, v33);
    }
    else
    {
      v35 = v32[1];
      *v31 = *v32;
      v31[1] = v35;
    }
    *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
    *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 56);
    v29[72] = v30[72];
    v36 = a3;
    v37 = a3[9];
    v38 = (void **)((char *)a1 + v37);
    v39 = (void **)((char *)a2 + v37);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v47 = *v39;
      v48 = v47;
      *v38 = v47;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v38 = *v39;
      v41 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v42 = *(int *)(v41 + 20);
      v66 = (char *)v38 + v42;
      v43 = (char *)v39 + v42;
      v44 = type metadata accessor for DataFrame();
      v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
      v46 = v43;
      v36 = v67;
      v45(v66, v46, v44);
      v45((char *)v38 + *(int *)(v41 + 24), (char *)v39 + *(int *)(v41 + 24), v44);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v49 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v49 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v50 = __swift_instantiateConcreteTypeFromMangledName(v49);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v38, v39, v50);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v51 = v36[10];
    v52 = (void **)((char *)a1 + v51);
    v53 = (void **)((char *)a2 + v51);
    v54 = swift_getEnumCaseMultiPayload();
    if (v54 == 2)
    {
      v61 = *v53;
      v62 = v61;
      *v52 = v61;
    }
    else if (v54 == 1)
    {
      *v52 = *v53;
      v55 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v56 = *(int *)(v55 + 20);
      v57 = (char *)v52 + v56;
      v58 = (char *)v53 + v56;
      v59 = type metadata accessor for DataFrame();
      v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
      v60(v57, v58, v59);
      v60((char *)v52 + *(int *)(v55 + 24), (char *)v53 + *(int *)(v55 + 24), v59);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v63 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v63 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v64 = __swift_instantiateConcreteTypeFromMangledName(v63);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v52, v53, v64);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for MLLogisticRegressionClassifier(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  int EnumCaseMultiPayload;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  id *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  void (*v23)(id *, uint64_t);
  void (*v24)(char *, uint64_t);

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(type metadata accessor for MLLogisticRegressionClassifier.Model() + 24);
  v5 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + a2[8];
  if (*(_QWORD *)(v6 + 32))
    __swift_destroy_boxed_opaque_existential_0(v6 + 8);
  v7 = (id *)(a1 + a2[9]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      v10 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v11 = (char *)v7 + *(int *)(v10 + 20);
      v12 = type metadata accessor for DataFrame();
      v13 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
      v13(v11, v12);
      v13((char *)v7 + *(int *)(v10 + 24), v12);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v9 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v9 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v14 = __swift_instantiateConcreteTypeFromMangledName(v9);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v7, v14);
      break;
  }
  v15 = (id *)(a1 + a2[10]);
  v16 = swift_getEnumCaseMultiPayload();
  switch(v16)
  {
    case 2:

      return;
    case 1:
      v18 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v19 = (char *)v15 + *(int *)(v18 + 20);
      v20 = type metadata accessor for DataFrame();
      v24 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
      v24(v19, v20);
      v21 = (id *)((char *)v15 + *(int *)(v18 + 24));
      v22 = v20;
      v23 = (void (*)(id *, uint64_t))v24;
LABEL_24:
      v23(v21, v22);
      return;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v17 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v17 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v22 = __swift_instantiateConcreteTypeFromMangledName(v17);
      v23 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
      v21 = v15;
      goto LABEL_24;
  }
}

_QWORD *initializeWithCopy for MLLogisticRegressionClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  int *v34;
  uint64_t v35;
  void **v36;
  void **v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  void *v45;
  id v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  void **v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  void *v59;
  id v60;
  uint64_t *v61;
  uint64_t v62;
  char *v64;
  int *v65;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = type metadata accessor for MLLogisticRegressionClassifier.Model();
  v12 = *(int *)(v11 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = *(int *)(v11 + 28);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  *(_QWORD *)v17 = v19;
  v17[8] = (char)v18;
  v20 = a3[5];
  v21 = a3[6];
  v22 = *(void **)((char *)a2 + v20);
  *(_QWORD *)((char *)a1 + v20) = v22;
  v23 = (_QWORD *)((char *)a1 + v21);
  v24 = (_QWORD *)((char *)a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = a3[8];
  v65 = a3;
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)((char *)a2 + v26);
  v29 = (_OWORD *)((char *)a1 + v26 + 8);
  v30 = (_OWORD *)((char *)a2 + v26 + 8);
  v31 = *(_QWORD *)((char *)a2 + v26 + 32);
  swift_bridgeObjectRetain();
  v32 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31)
  {
    *((_QWORD *)v27 + 4) = v31;
    (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v31 - 8))(v29, v30, v31);
  }
  else
  {
    v33 = v30[1];
    *v29 = *v30;
    v29[1] = v33;
  }
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(v28 + 40);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(v28 + 56);
  v27[72] = v28[72];
  v34 = a3;
  v35 = a3[9];
  v36 = (void **)((char *)a1 + v35);
  v37 = (void **)((char *)a2 + v35);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v45 = *v37;
    v46 = v45;
    *v36 = v45;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *v36 = *v37;
    v39 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v40 = *(int *)(v39 + 20);
    v64 = (char *)v36 + v40;
    v41 = (char *)v37 + v40;
    v42 = type metadata accessor for DataFrame();
    v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
    v44 = v41;
    v34 = v65;
    v43(v64, v44, v42);
    v43((char *)v36 + *(int *)(v39 + 24), (char *)v37 + *(int *)(v39 + 24), v42);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v47 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v47 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v48 = __swift_instantiateConcreteTypeFromMangledName(v47);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v36, v37, v48);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v49 = v34[10];
  v50 = (void **)((char *)a1 + v49);
  v51 = (void **)((char *)a2 + v49);
  v52 = swift_getEnumCaseMultiPayload();
  if (v52 == 2)
  {
    v59 = *v51;
    v60 = v59;
    *v50 = v59;
  }
  else if (v52 == 1)
  {
    *v50 = *v51;
    v53 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v54 = *(int *)(v53 + 20);
    v55 = (char *)v50 + v54;
    v56 = (char *)v51 + v54;
    v57 = type metadata accessor for DataFrame();
    v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16);
    v58(v55, v56, v57);
    v58((char *)v50 + *(int *)(v53 + 24), (char *)v51 + *(int *)(v53 + 24), v57);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v61 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v61 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v62 = __swift_instantiateConcreteTypeFromMangledName(v61);
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v50, v51, v62);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for MLLogisticRegressionClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  void **v35;
  void **v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  void *v42;
  id v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  void **v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  void *v56;
  id v57;
  uint64_t *v58;
  uint64_t v59;
  char *v61;
  char *v62;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = type metadata accessor for MLLogisticRegressionClassifier.Model();
  v12 = *(int *)(v11 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = *(int *)(v11 + 28);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  *(_QWORD *)v17 = v19;
  v17[8] = (char)v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3[5];
  v21 = *(void **)((char *)a2 + v20);
  v22 = *(void **)((char *)a1 + v20);
  *(_QWORD *)((char *)a1 + v20) = v21;
  v23 = v21;

  v24 = a3[6];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[8];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  *(_QWORD *)((char *)a1 + v27) = *(_QWORD *)((char *)a2 + v27);
  v30 = (uint64_t)a1 + v27 + 8;
  v31 = (uint64_t)a2 + v27 + 8;
  v32 = *(_QWORD *)((char *)a2 + v27 + 32);
  if (*(_QWORD *)((char *)a1 + v27 + 32))
  {
    if (v32)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v30, (uint64_t *)v31);
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_0(v30);
  }
  else if (v32)
  {
    *((_QWORD *)v28 + 4) = v32;
    (**(void (***)(uint64_t, uint64_t))(v32 - 8))(v30, v31);
    goto LABEL_15;
  }
  v33 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v33;
LABEL_15:
  *((_QWORD *)v28 + 5) = *((_QWORD *)v29 + 5);
  *((_QWORD *)v28 + 6) = *((_QWORD *)v29 + 6);
  *((_QWORD *)v28 + 7) = *((_QWORD *)v29 + 7);
  *((_QWORD *)v28 + 8) = *((_QWORD *)v29 + 8);
  v28[72] = v29[72];
  if (a1 != a2)
  {
    v34 = a3[9];
    v35 = (void **)((char *)a1 + v34);
    v36 = (void **)((char *)a2 + v34);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v34, type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v42 = *v36;
      v43 = v42;
      *v35 = v42;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v35 = *v36;
      v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v39 = *(int *)(v38 + 20);
      v61 = (char *)v36 + v39;
      v62 = (char *)v35 + v39;
      v40 = type metadata accessor for DataFrame();
      v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
      v41(v62, v61, v40);
      v41((char *)v35 + *(int *)(v38 + 24), (char *)v36 + *(int *)(v38 + 24), v40);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v44 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v44 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v45 = __swift_instantiateConcreteTypeFromMangledName(v44);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v35, v36, v45);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v46 = a3[10];
    v47 = (void **)((char *)a1 + v46);
    v48 = (void **)((char *)a2 + v46);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v46, type metadata accessor for MLClassifierMetrics.Contents);
    v49 = swift_getEnumCaseMultiPayload();
    if (v49 == 2)
    {
      v56 = *v48;
      v57 = v56;
      *v47 = v56;
    }
    else if (v49 == 1)
    {
      *v47 = *v48;
      v50 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v51 = *(int *)(v50 + 20);
      v52 = (char *)v47 + v51;
      v53 = (char *)v48 + v51;
      v54 = type metadata accessor for DataFrame();
      v55 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
      v55(v52, v53, v54);
      v55((char *)v47 + *(int *)(v50 + 24), (char *)v48 + *(int *)(v50 + 24), v54);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v58 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v58 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v59 = __swift_instantiateConcreteTypeFromMangledName(v58);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v47, v48, v59);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MLLogisticRegressionClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v42;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = type metadata accessor for MLLogisticRegressionClassifier.Model();
  v8 = *(int *)(v7 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = *(int *)(v7 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v16 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  memcpy((void *)(a1 + v16), (const void *)(a2 + v16), 0x49uLL);
  v17 = a3[9];
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  v20 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v24 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v25 = *(int *)(v24 + 20);
    v42 = &v18[v25];
    v26 = &v19[v25];
    v27 = type metadata accessor for DataFrame();
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
    v28(v42, v26, v27);
    v28(&v18[*(int *)(v24 + 24)], &v19[*(int *)(v24 + 24)], v27);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v22 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v22 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v23 = __swift_instantiateConcreteTypeFromMangledName(v22);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v18, v19, v23);
    swift_storeEnumTagMultiPayload();
    goto LABEL_8;
  }
  memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
LABEL_10:
  v29 = a3[10];
  v30 = (char *)(a1 + v29);
  v31 = (char *)(a2 + v29);
  v32 = swift_getEnumCaseMultiPayload();
  if (v32 == 1)
  {
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v35 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v36 = *(int *)(v35 + 20);
    v37 = &v30[v36];
    v38 = &v31[v36];
    v39 = type metadata accessor for DataFrame();
    v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32);
    v40(v37, v38, v39);
    v40(&v30[*(int *)(v35 + 24)], &v31[*(int *)(v35 + 24)], v39);
  }
  else
  {
    if (v32)
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v33 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v33 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v34 = __swift_instantiateConcreteTypeFromMangledName(v33);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v30, v31, v34);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithTake for MLLogisticRegressionClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int EnumCaseMultiPayload;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v56;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  v9 = type metadata accessor for MLLogisticRegressionClassifier.Model();
  v10 = *(int *)(v9 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = *(int *)(v9 + 28);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  LOBYTE(v16) = v16[8];
  *(_QWORD *)v15 = v17;
  v15[8] = (char)v16;
  swift_bridgeObjectRelease();
  v18 = a3[5];
  v19 = *(void **)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);

  v20 = a3[6];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  v25 = a3[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = (_OWORD *)((char *)a2 + v25 + 8);
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  v29 = (_OWORD *)((char *)a1 + v25 + 8);
  if (*(_QWORD *)((char *)a1 + v25 + 32))
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
  v30 = v28[1];
  *v29 = *v28;
  v29[1] = v30;
  *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
  *(_OWORD *)(v26 + 56) = *(_OWORD *)(v27 + 56);
  v26[72] = v27[72];
  if (a1 == a2)
    return a1;
  v31 = a3[9];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v31, type metadata accessor for MLClassifierMetrics.Contents);
  v34 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v38 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v39 = *(int *)(v38 + 20);
    v56 = &v32[v39];
    v40 = &v33[v39];
    v41 = type metadata accessor for DataFrame();
    v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32);
    v42(v56, v40, v41);
    v42(&v32[*(int *)(v38 + 24)], &v33[*(int *)(v38 + 24)], v41);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      goto LABEL_18;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v36 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v36 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v37 = __swift_instantiateConcreteTypeFromMangledName(v36);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v32, v33, v37);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
LABEL_18:
  v43 = a3[10];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)a1 + v43, type metadata accessor for MLClassifierMetrics.Contents);
  v46 = swift_getEnumCaseMultiPayload();
  if (v46 == 1)
  {
    *(_QWORD *)v44 = *(_QWORD *)v45;
    v49 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v50 = *(int *)(v49 + 20);
    v51 = &v44[v50];
    v52 = &v45[v50];
    v53 = type metadata accessor for DataFrame();
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32);
    v54(v51, v52, v53);
    v54(&v44[*(int *)(v49 + 24)], &v45[*(int *)(v49 + 24)], v53);
  }
  else
  {
    if (v46)
    {
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      return a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v47 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v47 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v48 = __swift_instantiateConcreteTypeFromMangledName(v47);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v44, v45, v48);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLogisticRegressionClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE67CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = OUTLINED_FUNCTION_35_6();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v7 = type metadata accessor for MLClassifierMetrics(0);
    v8 = a1 + *(int *)(a3 + 36);
    return __swift_getEnumTagSinglePayload(v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MLLogisticRegressionClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AE67D80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_35_6();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      OUTLINED_FUNCTION_125();
      return;
    }
    v9 = type metadata accessor for MLClassifierMetrics(0);
    v10 = a1 + *(int *)(a4 + 36);
  }
  __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
}

uint64_t type metadata completion function for MLLogisticRegressionClassifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MLLogisticRegressionClassifier.Model();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLClassifierMetrics.Contents(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_35_6();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v3 = v2 + *(int *)(v1 + 24);
  v4 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLLogisticRegressionClassifier.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_35_6();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLLogisticRegressionClassifier.init(_:targetColumn:featureColumns:parameters:)(v2);
}

uint64_t OUTLINED_FUNCTION_8_18()
{
  return type metadata accessor for MLLogisticRegressionClassifier();
}

uint64_t OUTLINED_FUNCTION_19_14()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_21_11()
{
  uint64_t v0;

  return outlined destroy of MLLogisticRegressionClassifier.ModelParameters(v0);
}

uint64_t OUTLINED_FUNCTION_23_10()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 536))();
}

uint64_t OUTLINED_FUNCTION_24_9()
{
  uint64_t v0;

  return outlined destroy of MLLogisticRegressionClassifier.ModelParameters(*(_QWORD *)(v0 - 328));
}

uint64_t OUTLINED_FUNCTION_27_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 264) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_28_12()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_34_10(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_35_6()
{
  return type metadata accessor for MLLogisticRegressionClassifier.Model();
}

uint64_t OUTLINED_FUNCTION_36_6()
{
  return 0;
}

void OUTLINED_FUNCTION_37_6(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(*(_QWORD *)(v2 - 280), a2);
}

uint64_t OUTLINED_FUNCTION_39_6()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_41_5()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 536))();
}

void OUTLINED_FUNCTION_53_8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of URL?(*(_QWORD *)(v4 - 272), v3, a3);
}

uint64_t OUTLINED_FUNCTION_58_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, *(_QWORD *)(v2 - 352));
}

uint64_t OUTLINED_FUNCTION_59_6()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_60_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_62_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 528))(a1, a2, v2);
}

void OUTLINED_FUNCTION_63_6(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, a2);
}

uint64_t OUTLINED_FUNCTION_65_7()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(*(_QWORD *)(v2 - 512), v1);
}

void OUTLINED_FUNCTION_67_5(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  outlined init with take of MLHandPoseClassifier.ModelParameters(a1, *(_QWORD *)(a3 - 256), a2);
}

uint64_t OUTLINED_FUNCTION_68_4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t);

  return v2(*(_QWORD *)(a1 - 256), v1);
}

void OUTLINED_FUNCTION_69_3(uint64_t (*a1)(_QWORD)@<X1>, uint64_t a2@<X8>)
{
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(a2 - 256), a1);
}

uint64_t OUTLINED_FUNCTION_71_6()
{
  uint64_t v0;

  return v0;
}

_OWORD *OUTLINED_FUNCTION_73_3()
{
  uint64_t v0;

  return outlined init with take of Any((_OWORD *)(v0 - 120), (_OWORD *)(v0 - 200));
}

uint64_t OUTLINED_FUNCTION_74_4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_75_6@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 256));
}

void OUTLINED_FUNCTION_76_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  outlined init with copy of URL?(a1, v1, v2);
}

void OUTLINED_FUNCTION_78_5(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_79_4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_81_6(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_83_4()
{
  return type metadata accessor for MLClassifierMetrics.Contents(0);
}

uint64_t closure #1 in FeatureMatrixBuilder.fillArray(from:size:column:)@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = *a1;
  MLShapedArray.init(_:)();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v4);
}

void FeatureMatrixBuilder.fillArray<A, B>(_:descriptor:size:row:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[20];
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;

  OUTLINED_FUNCTION_1_21(a1, a2, a3, a4, a5, a6, a7, a8);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_2_28(v16, v33[0]);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_38_4(v18, v33[0]);
  v21 = OUTLINED_FUNCTION_22_8(v19, MEMORY[0x24BEE1768], v20);
  OUTLINED_FUNCTION_26_12(v21);
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (uint64_t *)((char *)v33 - v23);
  v25 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PartialRangeFrom<Int>);
  v26 = lazy protocol witness table accessor for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>();
  v33[2] = OUTLINED_FUNCTION_13_19(v26);
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v27);
  v33[0] = *(_QWORD *)(OUTLINED_FUNCTION_3_23() - 8);
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v28);
  if (OUTLINED_FUNCTION_7_17() != v33[8])
  {
    OUTLINED_FUNCTION_18_10();
    v30 = OUTLINED_FUNCTION_21_12();
    OUTLINED_FUNCTION_15_4(v30, (uint64_t)"Expected arrays with size ");
    v34 = v13;
    v35._countAndFlagsBits = OUTLINED_FUNCTION_0_28();
    OUTLINED_FUNCTION_12_14(v35);
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_6_18();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_34_11();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20_10((uint64_t)"', but got size ");
    v34 = OUTLINED_FUNCTION_33_9();
    v36._countAndFlagsBits = OUTLINED_FUNCTION_0_28();
    OUTLINED_FUNCTION_12_14(v36);
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_16_16();
    v34 = v14;
    v37._countAndFlagsBits = OUTLINED_FUNCTION_0_28();
    OUTLINED_FUNCTION_31_12(v37);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51_6();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v31 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_14_13(v31, v32);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_9_16();
  OUTLINED_FUNCTION_23_11();
  OUTLINED_FUNCTION_27_15();
  OUTLINED_FUNCTION_25_7((uint64_t)v24, 1);
  if (v29)
  {
LABEL_7:
    OUTLINED_FUNCTION_15_14();
LABEL_9:
    OUTLINED_FUNCTION_7();
    return;
  }
  v33[10] = a13;
  v33[11] = v25;
  while (!__OFADD__(v33[19], *v24))
  {
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_5_18();
    dispatch thunk of FloatingPoint.init<A>(_:)();
    OUTLINED_FUNCTION_11_13();
    OUTLINED_FUNCTION_10_15();
    OUTLINED_FUNCTION_28_13();
    OUTLINED_FUNCTION_25_7((uint64_t)v24, 1);
    if (v29)
      goto LABEL_7;
  }
  __break(1u);
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[20];
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;

  OUTLINED_FUNCTION_1_21(a1, a2, a3, a4, a5, a6, a7, a8);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_2_28(v16, v33[0]);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_38_4(v18, v33[0]);
  v21 = OUTLINED_FUNCTION_22_8(v19, MEMORY[0x24BEE1768], v20);
  OUTLINED_FUNCTION_26_12(v21);
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (uint64_t *)((char *)v33 - v23);
  v25 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PartialRangeFrom<Int>);
  v26 = lazy protocol witness table accessor for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>();
  v33[2] = OUTLINED_FUNCTION_13_19(v26);
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v27);
  v33[0] = *(_QWORD *)(OUTLINED_FUNCTION_3_23() - 8);
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v28);
  if (OUTLINED_FUNCTION_7_17() != v33[8])
  {
    OUTLINED_FUNCTION_18_10();
    v30 = OUTLINED_FUNCTION_21_12();
    OUTLINED_FUNCTION_15_4(v30, (uint64_t)"Expected arrays with size ");
    v34 = v13;
    v35._countAndFlagsBits = OUTLINED_FUNCTION_0_28();
    OUTLINED_FUNCTION_12_14(v35);
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_6_18();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_34_11();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20_10((uint64_t)"', but got size ");
    v34 = OUTLINED_FUNCTION_33_9();
    v36._countAndFlagsBits = OUTLINED_FUNCTION_0_28();
    OUTLINED_FUNCTION_12_14(v36);
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_16_16();
    v34 = v14;
    v37._countAndFlagsBits = OUTLINED_FUNCTION_0_28();
    OUTLINED_FUNCTION_31_12(v37);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_51_6();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v31 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_14_13(v31, v32);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_9_16();
  OUTLINED_FUNCTION_23_11();
  OUTLINED_FUNCTION_27_15();
  OUTLINED_FUNCTION_25_7((uint64_t)v24, 1);
  if (v29)
  {
LABEL_7:
    OUTLINED_FUNCTION_15_14();
LABEL_9:
    OUTLINED_FUNCTION_7();
    return;
  }
  v33[10] = a13;
  v33[11] = v25;
  while (!__OFADD__(v33[19], *v24))
  {
    OUTLINED_FUNCTION_8_19();
    OUTLINED_FUNCTION_5_18();
    dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
    OUTLINED_FUNCTION_11_13();
    OUTLINED_FUNCTION_10_15();
    OUTLINED_FUNCTION_28_13();
    OUTLINED_FUNCTION_25_7((uint64_t)v24, 1);
    if (v29)
      goto LABEL_7;
  }
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PartialRangeFrom<Int>);
    v2 = lazy protocol witness table accessor for type Int and conformance Int();
    v3[0] = MEMORY[0x24BEE17A8];
    v3[1] = v2;
    result = MEMORY[0x22075B938](MEMORY[0x24BEE2C48], v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>);
  }
  return result;
}

uint64_t type metadata instantiation function for FeatureMatrixBuilder()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for FeatureMatrixBuilder()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DenseMatrix();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FeatureMatrixBuilder(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = *(int *)(a3 + 44);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for DenseMatrix();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for FeatureMatrixBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for DenseMatrix();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for FeatureMatrixBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 44);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for DenseMatrix();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for FeatureMatrixBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 44);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for DenseMatrix();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for FeatureMatrixBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 44);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for DenseMatrix();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for FeatureMatrixBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 44);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for DenseMatrix();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureMatrixBuilder()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE68A5C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DenseMatrix();
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FeatureMatrixBuilder()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *sub_21AE68AE0(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DenseMatrix();
    return (_QWORD *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FeatureMatrixBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeatureMatrixBuilder);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x22075B890](a1, v6, a5);
}

uint64_t OUTLINED_FUNCTION_0_28()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_1_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 280) = v9;
  *(_QWORD *)(v10 - 144) = v8;
  *(_QWORD *)(v10 - 136) = a8;
  *(_QWORD *)(v10 - 232) = a2;
  *(_QWORD *)(v10 - 224) = a6;
  *(_QWORD *)(v10 - 240) = a3;
  *(_QWORD *)(v10 - 168) = *(_QWORD *)(*(_QWORD *)(v10 + 32) - 8);
}

void OUTLINED_FUNCTION_2_28(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 - 160) = v2;
  *(_QWORD *)(v3 - 192) = *(_QWORD *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_3_23()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 256) = v3;
  *(_QWORD *)(v4 - 248) = v2;
  *(_QWORD *)(v4 - 120) = v2;
  *(_QWORD *)(v4 - 112) = v1;
  *(_QWORD *)(v4 - 104) = v3;
  *(_QWORD *)(v4 - 96) = v0;
  *(_QWORD *)(v4 - 264) = v0;
  return type metadata accessor for Zip2Sequence.Iterator();
}

uint64_t OUTLINED_FUNCTION_5_18()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_6_18()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x61656620726F6620;
  v0._object = (void *)0xEE00272065727574;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_7_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 216) = v1;
  *(_QWORD *)(v2 - 208) = v0;
  return dispatch thunk of Collection.count.getter();
}

uint64_t OUTLINED_FUNCTION_8_19()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 168) + 32))(*(_QWORD *)(v2 - 176), v0 + *(int *)(v1 + 48), *(_QWORD *)(v2 - 152));
}

uint64_t OUTLINED_FUNCTION_9_16()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 120) = 0;
  return zip<A, B>(_:_:)();
}

uint64_t OUTLINED_FUNCTION_10_15()
{
  return DenseMatrix.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_11_13()
{
  return type metadata accessor for DenseMatrix();
}

void OUTLINED_FUNCTION_12_14(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_13_19(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v4 - 120) = v3;
  *(_QWORD *)(v4 - 112) = v2;
  *(_QWORD *)(v4 - 104) = a1;
  *(_QWORD *)(v4 - 96) = v5;
  return type metadata accessor for Zip2Sequence();
}

uint64_t OUTLINED_FUNCTION_14_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 0;
  return swift_willThrow(0.0);
}

uint64_t OUTLINED_FUNCTION_15_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 288) + 8))(v0, v1);
}

void OUTLINED_FUNCTION_16_16()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x20776F7220746120;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_18_10()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 120) = 0;
  *(_QWORD *)(v0 - 112) = 0xE000000000000000;
  _StringGuts.grow(_:)(73);
}

void OUTLINED_FUNCTION_20_10(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
}

unint64_t OUTLINED_FUNCTION_21_12()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 112);
  *(_QWORD *)(v0 - 120) = *(_QWORD *)(v0 - 120);
  *(_QWORD *)(v0 - 112) = v1;
  return 0xD00000000000001ALL;
}

uint64_t OUTLINED_FUNCTION_22_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 - 152) = a3;
  return swift_getTupleTypeMetadata2();
}

uint64_t OUTLINED_FUNCTION_23_11()
{
  return Zip2Sequence.makeIterator()();
}

uint64_t OUTLINED_FUNCTION_25_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_getEnumTagSinglePayload(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_26_12(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = a1;
  return type metadata accessor for Optional();
}

uint64_t OUTLINED_FUNCTION_27_15()
{
  return Zip2Sequence.Iterator.next()();
}

uint64_t OUTLINED_FUNCTION_28_13()
{
  return Zip2Sequence.Iterator.next()();
}

void OUTLINED_FUNCTION_31_12(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_33_9()
{
  return dispatch thunk of Collection.count.getter();
}

void OUTLINED_FUNCTION_34_11()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = *(_QWORD *)(v1 - 232);
  v2._object = v0;
  String.append(_:)(v2);
}

void static MLDataColumn.== infix(_:_:)()
{
  static MLDataColumn.== infix(_:_:)();
}

{
  uint64_t (*v0)(void);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  OUTLINED_FUNCTION_0_29();
  v1 = v0();
  OUTLINED_FUNCTION_12_15(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
  OUTLINED_FUNCTION_7_18();
}

void static MLDataColumn.!= infix(_:_:)()
{
  static MLDataColumn.== infix(_:_:)();
}

void static MLDataColumn.> infix(_:_:)()
{
  static MLDataColumn.== infix(_:_:)();
}

void static MLDataColumn.< infix(_:_:)()
{
  static MLDataColumn.== infix(_:_:)();
}

void static MLDataColumn.>= infix(_:_:)()
{
  static MLDataColumn.== infix(_:_:)();
}

void static MLDataColumn.<= infix(_:_:)()
{
  static MLDataColumn.== infix(_:_:)();
}

void static MLDataColumn.== infix(_:_:)(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.== infix(_:_:), a4);
}

void static MLDataColumn.!= infix(_:_:)(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.!= infix(_:_:), a4);
}

void static MLDataColumn.> infix(_:_:)(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.> infix(_:_:), a4);
}

void static MLDataColumn.< infix(_:_:)(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.< infix(_:_:), a4);
}

void static MLDataColumn.>= infix(_:_:)(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.>= infix(_:_:), a4);
}

void static MLDataColumn.<= infix(_:_:)(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.<= infix(_:_:), a4);
}

void static MLDataColumn.== infix(_:_:)(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(char *)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 8);
  v23 = a3;
  v24 = v7;
  v25 = v8;
  v22 = a2;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v21);
  v10 = OUTLINED_FUNCTION_5_19((uint64_t)boxed_opaque_existential_0);
  v18 = OUTLINED_FUNCTION_10_16(v10, v11, v12, v13, v14, v15, v16, v17, v20, v21[0], v21[1], v21[2], v22, v23, v24);
  a4(v18);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  v19 = v27;
  *(_QWORD *)a5 = v26;
  *(_BYTE *)(a5 + 8) = v19;
  OUTLINED_FUNCTION_44();
}

uint64_t static MLDataColumn.== infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.== infix(_:_:), a4);
}

uint64_t static MLDataColumn.!= infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.!= infix(_:_:), a4);
}

uint64_t static MLDataColumn.> infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.> infix(_:_:), a4);
}

uint64_t static MLDataColumn.< infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.< infix(_:_:), a4);
}

uint64_t static MLDataColumn.>= infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.>= infix(_:_:), a4);
}

uint64_t static MLDataColumn.<= infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static MLDataColumn.== infix(_:_:)(a1, a2, a3, (void (*)(char *))static MLUntypedColumn.<= infix(_:_:), a4);
}

uint64_t static MLDataColumn.== infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(char *)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[6];
  char v24;

  v7 = *(_QWORD *)a1;
  v8 = *(_BYTE *)(a1 + 8);
  v23[3] = a2;
  v23[4] = a3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
  v10 = OUTLINED_FUNCTION_5_19((uint64_t)boxed_opaque_existential_0);
  LOBYTE(v22) = v8;
  v18 = OUTLINED_FUNCTION_8_20(v10, v11, v12, v13, v14, v15, v16, v17, v21, v7, v22, v23[0]);
  a4(v18);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
  v20 = v24;
  *(_QWORD *)a5 = v23[5];
  *(_BYTE *)(a5 + 8) = v20;
  return result;
}

void static MLDataColumn<>.+ infix(_:_:)()
{
  static MLDataColumn<>.+ infix(_:_:)();
}

{
  static MLDataColumn<>.+ infix(_:_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13[40];

  OUTLINED_FUNCTION_6_19();
  v8 = OUTLINED_FUNCTION_8_20(v0, v1, v2, v3, v4, v5, v6, v7, v10, v11, v12, v13[0]);
  v9(v8);
  OUTLINED_FUNCTION_1_22((uint64_t)v13);
  OUTLINED_FUNCTION_1_6();
}

{
  static MLDataColumn<>.+ infix(_:_:)();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *);
  uint64_t v11;
  _QWORD v12[3];
  char v13;
  char v14;

  OUTLINED_FUNCTION_11_14();
  v14 = v0;
  v9 = OUTLINED_FUNCTION_10_16(v1, v2, v3, v4, v5, v6, v7, v8, v11, v2, v12[1], v12[2], MEMORY[0x24BEE1768], (uint64_t)&protocol witness table for Int, v13);
  v10(v9);
  OUTLINED_FUNCTION_1_22((uint64_t)v12);
  OUTLINED_FUNCTION_1_6();
}

{
  static MLDataColumn<>.+ infix(_:_:)();
}

{
  uint64_t (*v0)(void);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  OUTLINED_FUNCTION_0_29();
  v1 = v0();
  OUTLINED_FUNCTION_12_15(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
  OUTLINED_FUNCTION_7_18();
}

void static MLDataColumn<>.- infix(_:_:)()
{
  static MLDataColumn<>.+ infix(_:_:)();
}

{
  static MLDataColumn<>.+ infix(_:_:)();
}

{
  static MLDataColumn<>.+ infix(_:_:)();
}

{
  static MLDataColumn<>.+ infix(_:_:)();
}

void static MLDataColumn<>.* infix(_:_:)()
{
  static MLDataColumn<>.+ infix(_:_:)();
}

{
  static MLDataColumn<>.+ infix(_:_:)();
}

{
  static MLDataColumn<>.+ infix(_:_:)();
}

{
  static MLDataColumn<>.+ infix(_:_:)();
}

void static MLDataColumn<>./ infix(_:_:)()
{
  void *v0;
  char v1;

  OUTLINED_FUNCTION_0_29();
  static MLUntypedColumn./ infix(_:_:)();
  OUTLINED_FUNCTION_4_23();
  outlined consume of Result<_DataTable, Error>(v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13[40];

  OUTLINED_FUNCTION_6_19();
  v8 = OUTLINED_FUNCTION_8_20(v0, v1, v2, v3, v4, v5, v6, v7, v10, v11, v12, v13[0]);
  static MLUntypedColumn./ infix(_:_:)((uint64_t)v8, v9);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  OUTLINED_FUNCTION_4_23();
  OUTLINED_FUNCTION_9_17();
  OUTLINED_FUNCTION_44();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  char v11;
  char v12;

  OUTLINED_FUNCTION_11_14();
  v12 = v0;
  OUTLINED_FUNCTION_10_16(v1, v2, v3, v4, v5, v6, v7, v8, v9, v2, v10[1], v10[2], MEMORY[0x24BEE1768], (uint64_t)&protocol witness table for Int, v11);
  static MLUntypedColumn./ infix(_:_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
  OUTLINED_FUNCTION_4_23();
  OUTLINED_FUNCTION_9_17();
  OUTLINED_FUNCTION_44();
}

{
  static MLDataColumn<>.+ infix(_:_:)();
}

#error "21AE6918C: call analysis failed (funcsize=120)"

void static MLDataColumn<>.+ infix(_:_:)(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  static MLDataColumn<>.+ infix(_:_:)(a1, (uint64_t)static MLUntypedColumn.+ infix(_:_:), a4, a5, a6, a7, a8, a9, a2);
}

void static MLDataColumn<>.- infix(_:_:)(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  static MLDataColumn<>.+ infix(_:_:)(a1, (uint64_t)static MLUntypedColumn.- infix(_:_:), a4, a5, a6, a7, a8, a9, a2);
}

void static MLDataColumn<>.* infix(_:_:)(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  static MLDataColumn<>.+ infix(_:_:)(a1, (uint64_t)static MLUntypedColumn.* infix(_:_:), a4, a5, a6, a7, a8, a9, a2);
}

void static MLDataColumn<>./ infix(_:_:)(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  static MLDataColumn<>.+ infix(_:_:)(a1, (uint64_t)static MLUntypedColumn./ infix(_:_:), a4, a5, a6, a7, a8, a9, a2);
}

void static MLDataColumn<>.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  char v10;
  char *v11;
  void (*v12)(char *);
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v9 = *(_QWORD *)a1;
  v10 = *(_BYTE *)(a1 + 8);
  v15[3] = MEMORY[0x24BEE13C8];
  v15[4] = &protocol witness table for Double;
  LOBYTE(v14) = v10;
  v11 = OUTLINED_FUNCTION_8_20(a1, a2, a3, a4, a5, a6, a7, a8, v13, v9, v14, a9.n128_i8[0]);
  v12(v11);
  OUTLINED_FUNCTION_1_22((uint64_t)v15);
  OUTLINED_FUNCTION_1_6();
}

void static MLDataColumn<>.+ infix(_:_:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  static MLDataColumn<>.+ infix(_:_:)(a1, (uint64_t)static MLUntypedColumn.+ infix(_:_:), a4, a5, a6, a7, a8, a9, a2);
}

void static MLDataColumn<>.- infix(_:_:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  static MLDataColumn<>.+ infix(_:_:)(a1, (uint64_t)static MLUntypedColumn.- infix(_:_:), a4, a5, a6, a7, a8, a9, a2);
}

void static MLDataColumn<>.* infix(_:_:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  static MLDataColumn<>.+ infix(_:_:)(a1, (uint64_t)static MLUntypedColumn.* infix(_:_:), a4, a5, a6, a7, a8, a9, a2);
}

void static MLDataColumn<>./ infix(_:_:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  static MLDataColumn<>.+ infix(_:_:)(a1, (uint64_t)static MLUntypedColumn./ infix(_:_:), a4, a5, a6, a7, a8, a9, a2);
}

void static MLDataColumn<>.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  char v9;
  char *v10;
  void (*v11)(char *);
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  char v15;

  v9 = *(_BYTE *)(a1 + 8);
  v14 = *(_QWORD *)a1;
  v15 = v9;
  v10 = OUTLINED_FUNCTION_10_16(a1, a2, a3, a4, a5, a6, a7, a8, v12, *(uint64_t *)&a9, v13[1], v13[2], MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, v14);
  v11(v10);
  OUTLINED_FUNCTION_1_22((uint64_t)v13);
  OUTLINED_FUNCTION_1_6();
}

void static MLDataColumn<>.|| infix(_:_:)()
{
  static MLDataColumn<>.+ infix(_:_:)();
}

void static MLDataColumn<>.&& infix(_:_:)()
{
  static MLDataColumn<>.+ infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_1_22(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  char v4;

  result = __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_BYTE *)(v2 - 24);
  *(_QWORD *)v1 = *(_QWORD *)(v2 - 32);
  *(_BYTE *)(v1 + 8) = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_4_23()
{
  uint64_t v0;
  uint64_t v1;

  return specialized MLUntypedColumn.map<A>(to:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_5_19(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

char *OUTLINED_FUNCTION_8_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  return &a12;
}

void OUTLINED_FUNCTION_9_17()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

char *OUTLINED_FUNCTION_10_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  return &a15;
}

void OUTLINED_FUNCTION_12_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  *(_QWORD *)v14 = a13;
  *(_BYTE *)(v14 + 8) = a14;
}

uint64_t static MLModel.compile(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = a1;
  return swift_task_switch();
}

uint64_t static MLModel.compile(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = Model.serialized()();
  v0[17] = v1;
  v0[18] = v2;
  v3 = v1;
  v4 = v2;
  type metadata accessor for MLModelAsset();
  outlined copy of Data._Representation(v3, v4);
  v5 = @nonobjc MLModelAsset.__allocating_init(specification:)(v3, v4);
  v0[19] = v5;
  v6 = v5;
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFD8]), sel_init);
  v0[20] = v8;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = static MLModel.compile(_:);
  v9 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v10 = v0 + 10;
  v10[1] = 0x40000000;
  v10[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned MLModel?, @unowned NSError?) -> () with result type MLModel;
  v10[3] = &block_descriptor_2;
  v10[4] = v9;
  objc_msgSend(v7, sel_loadModelAsset_configuration_completionHandler_, v6, v8, v10);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 168) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v0 + 152);
  v1 = *(void **)(v0 + 160);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));

  v3 = *(_QWORD *)(v0 + 120);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t static MLModel.compile(_:)(double a1)
{
  uint64_t v1;
  void *v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *(void **)(v1 + 160);
  v3 = *(_QWORD *)(v1 + 144);
  v4 = *(void **)(v1 + 152);
  v5 = *(_QWORD *)(v1 + 136);
  swift_willThrow(a1);
  outlined consume of Data._Representation(v5, v3);

  return OUTLINED_FUNCTION_0_30(*(uint64_t (**)(void))(v1 + 8));
}

unint64_t type metadata accessor for MLModelAsset()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MLModelAsset;
  if (!lazy cache variable for type metadata for MLModelAsset)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MLModelAsset);
  }
  return result;
}

id @nonobjc MLModelAsset.__allocating_init(specification:)(uint64_t a1, unint64_t a2)
{
  Class isa;
  id v5;
  id v6;
  id v7;
  double v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v10[0] = 0;
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_modelAssetWithSpecificationData_error_, isa, v10);

  if (v5)
  {
    v6 = v10[0];
  }
  else
  {
    v7 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow(v8);
  }
  outlined consume of Data._Representation(a1, a2);
  return v5;
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned MLModel?, @unowned NSError?) -> () with result type MLModel(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, (uint64_t)a3);
  if (a2)
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, (uint64_t)a2);
  __break(1u);
  return result;
}

uint64_t specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  *v3 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

uint64_t OUTLINED_FUNCTION_0_30(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML23MLDecisionTreeRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML23ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for DataFrame();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sypSgWOcTm_0(a1, (uint64_t)v10, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {
    v11 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
    v12 = a2;
    v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
    v14 = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 = a2;
    v13 = 0;
    v11 = v14;
  }
  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v11);
}

id MLDecisionTreeRegressor.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(OUTLINED_FUNCTION_4_24() + 20));
}

uint64_t type metadata accessor for MLDecisionTreeRegressor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLDecisionTreeRegressor;
  if (!type metadata singleton initialization cache for MLDecisionTreeRegressor)
    return swift_getSingletonMetadata();
  return result;
}

void key path setter for MLDecisionTreeRegressor.model : MLDecisionTreeRegressor(id *a1)
{
  MLDecisionTreeRegressor.model.setter((uint64_t)*a1);
}

void MLDecisionTreeRegressor.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_4_24() + 20);

  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

void (*MLDecisionTreeRegressor.model.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_4_24() + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(void **)(v1 + v3);
  *(_QWORD *)a1 = v4;
  v5 = v4;
  return MLRandomForestRegressor.model.modify;
}

uint64_t MLDecisionTreeRegressor.targetColumn.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_4_24() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

void MLDecisionTreeRegressor.targetColumn.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(OUTLINED_FUNCTION_4_24() + 24));
  swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLDecisionTreeRegressor.targetColumn.modify())(_QWORD)
{
  OUTLINED_FUNCTION_4_24();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeRegressor.featureColumns.getter()
{
  OUTLINED_FUNCTION_4_24();
  return swift_bridgeObjectRetain();
}

void MLDecisionTreeRegressor.featureColumns.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_4_24() + 28);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_125();
}

uint64_t (*MLDecisionTreeRegressor.featureColumns.modify())(_QWORD)
{
  OUTLINED_FUNCTION_4_24();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLDecisionTreeRegressor.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_4_24() + 32);
  return outlined init with copy of MLDecisionTreeRegressor.ModelParameters(v3, a1);
}

uint64_t outlined init with copy of MLDecisionTreeRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MLDecisionTreeRegressor.ModelParameters(a2, a1);
  return a2;
}

id MLDecisionTreeRegressor.trainingMetrics.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;

  v0 = OUTLINED_FUNCTION_4_24();
  v1 = (void *)OUTLINED_FUNCTION_66_1(*(int *)(v0 + 36));
  return OUTLINED_FUNCTION_53_3(v1, v2, v3);
}

id MLDecisionTreeRegressor.validationMetrics.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;

  v0 = OUTLINED_FUNCTION_4_24();
  v1 = (void *)OUTLINED_FUNCTION_66_1(*(int *)(v0 + 40));
  return OUTLINED_FUNCTION_53_3(v1, v2, v3);
}

void static MLDecisionTreeRegressor._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLDecisionTreeRegressor._defaultSessionParameters);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLDecisionTreeRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

uint64_t MLDecisionTreeRegressor.init(_:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v14)(void);

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = (int *)OUTLINED_FUNCTION_4_24();
  *(_QWORD *)(v0 + 64) = v5;
  v6 = v5[9];
  *(_DWORD *)(v0 + 96) = v6;
  v7 = v4 + v6;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = 0;
  *(_DWORD *)(v0 + 100) = v5[10];
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v8 = swift_allocError();
  OUTLINED_FUNCTION_25_2(v8, v9, 0xD0000000000000C0);
  v10 = v5[7];
  *(_DWORD *)(v0 + 104) = v10;
  *(_QWORD *)(v4 + v10) = v1;
  v11 = (_QWORD *)(v4 + v5[6]);
  *v11 = v3;
  v11[1] = v2;
  v14 = (uint64_t (*)(void))((char *)&async function pointer to specialized CoreMLExportable.exportAsCoreMLModel()
                          + async function pointer to specialized CoreMLExportable.exportAsCoreMLModel());
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v12;
  *v12 = v0;
  v12[1] = MLDecisionTreeRegressor.init(_:targetColumn:featureColumns:parameters:);
  return v14();
}

{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD **)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v4 + *(int *)(v1 + 20)) = *(_QWORD *)(v0 + 88);
  outlined init with take of TreeRegressorModel(v3, v4, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  v5 = (_OWORD *)(v4 + *(int *)(v1 + 32));
  v7 = v2[2];
  v6 = v2[3];
  v8 = v2[1];
  *v5 = *v2;
  v5[1] = v8;
  v5[2] = v7;
  v5[3] = v6;
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = v2 + *(int *)(v0 + 96);
  v4 = v2 + *(int *)(v0 + 100);
  outlined destroy of MLDecisionTreeRegressor.ModelParameters(*(_QWORD *)(v0 + 56));
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  return OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t MLDecisionTreeRegressor.init(_:targetColumn:featureColumns:parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

void MLDecisionTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::Int v75;
  Swift::String v76;
  int *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  char v139;
  uint64_t v140;

  OUTLINED_FUNCTION_8_1();
  v128 = (char *)v2;
  v129 = v0;
  v4 = v3;
  v135 = v5;
  v126 = (_QWORD *)v6;
  v140 = v7;
  v9 = v8;
  v10 = OUTLINED_FUNCTION_93();
  v132 = *(_QWORD *)(v10 - 8);
  v133 = v10;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v12);
  v13 = type metadata accessor for TreeRegressorModel();
  v114 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_101_0();
  v116 = v14;
  v115 = v15;
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v17);
  v123 = type metadata accessor for BaseTreeRegressor();
  v122 = *(_QWORD *)(v123 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v19);
  v120 = type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v21);
  type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_54_0();
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_208();
  v111 = v25;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v26);
  v112 = (uint64_t)&v107 - v27;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v107 - v29;
  v134 = type metadata accessor for BoostedTreeConfiguration();
  v31 = *(_QWORD *)(v134 - 8);
  MEMORY[0x24BDAC7A8](v134);
  OUTLINED_FUNCTION_208();
  v119 = v32;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v33);
  v118 = (uint64_t)&v107 - v34;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v107 - v36;
  v38 = type metadata accessor for MLDecisionTreeRegressor();
  v39 = v9 + *(int *)(v38 + 36);
  *(_QWORD *)v39 = 0;
  *(_QWORD *)(v39 + 8) = 0;
  v130 = v39;
  *(_BYTE *)(v39 + 16) = 0;
  v113 = (int *)v38;
  v40 = *(int *)(v38 + 40);
  v117 = v9;
  v41 = v9 + v40;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v42, 0xD0000000000000C0);
  *(_QWORD *)v41 = v43;
  *(_QWORD *)(v41 + 8) = 0;
  v127 = v41;
  *(_BYTE *)(v41 + 16) = 1;
  outlined init with copy of MLDecisionTreeRegressor.ModelParameters(v4, (uint64_t)&v138);
  BoostedTreeConfiguration.init()();
  BoostedTreeConfiguration.maximumIterations.setter();
  BoostedTreeConfiguration.learningRate.setter();
  BoostedTreeConfiguration.maximumDepth.setter();
  BoostedTreeConfiguration.minimumLossReduction.setter();
  BoostedTreeConfiguration.minimumChildWeight.setter();
  BoostedTreeConfiguration.randomSeed.setter();
  outlined destroy of MLDecisionTreeRegressor.ModelParameters((uint64_t)&v138);
  v131 = v4;
  _sypSgWOcTm_0(v4, (uint64_t)&v136, &demangling cache variable for type metadata for Any?);
  if (v137)
  {
    v44 = (uint64_t)&v30[*(int *)(v23 + 48)];
    outlined init with take of Any(&v136, &v138);
    swift_dynamicCast();
    OUTLINED_FUNCTION_53_9();
    v45 = v129;
    MLDecisionTreeRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    if (v45)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_24_10();
      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v140, v133);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v134);
    }
    else
    {
      v129 = v44;
      outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData);
      v46 = (uint64_t)v126;
      v47 = v135;
      static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)((uint64_t)v30, (uint64_t)v126, v135, (uint64_t)v128);
      v49 = v48;
      v107 = v23;
      OUTLINED_FUNCTION_10_3();
      v109 = 0;
      v50 = v46;
      v51 = *(void (**)(uint64_t, char *, uint64_t))(v31 + 16);
      v52 = v118;
      v128 = v30;
      v53 = v134;
      v51(v118, v37, v134);
      v54 = v47;
      v55 = (char *)v124;
      *v124 = v50;
      *((_QWORD *)v55 + 1) = v54;
      *((_QWORD *)v55 + 2) = v49;
      *((_QWORD *)v55 + 3) = v49;
      OUTLINED_FUNCTION_60_2((uint64_t)"vectorized_features");
      v51(v119, (char *)v52, v53);
      v108 = v49;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v56 = v121;
      BaseTreeRegressor.init(configuration:)();
      v57 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
      v58 = v53;
      v59 = v57;
      v60 = (uint64_t)v128;
      OUTLINED_FUNCTION_23_2(v52, v57);
      (*(void (**)(char *, uint64_t, uint64_t))(v122 + 32))(&v55[*(int *)(v120 + 28)], v56, v123);
      v61 = v125;
      v62 = v109;
      TreeRegressor.fitted(to:validateOn:eventHandler:)(v60, v129, 0, 0, v63, v64, v65, v66, v107, v108, v109, v110, v111, v112, (uint64_t)v113, v114, v115, v116, v117,
        v118);
      if (!v62)
      {
        v68 = v108;
        v123 = (uint64_t)v59;
        v69 = AnalyticsReporter.init()();
        v70 = v131;
        if ((v69 & 1) == 0)
        {
          v71 = v112;
          v122 = v112 + *(int *)(v107 + 48);
          v72 = v122;
          v73 = v132;
          v74 = v133;
          OUTLINED_FUNCTION_216(v112, (uint64_t)v128, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v132 + 16));
          _sypSgWOcTm_0(v129, v72, &demangling cache variable for type metadata for DataFrame?);
          v75 = DataFrame.shape.getter();
          (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v74);
          v76._countAndFlagsBits = 0xD000000000000015;
          v76._object = (void *)0x800000021AFF21D0;
          AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_decisionTreeRegressor, v76, v75);
        }
        v77 = v113;
        v78 = v117;
        v79 = (uint64_t *)(v117 + v113[6]);
        v80 = (uint64_t)v126;
        v81 = (uint64_t)v135;
        v126 = v79;
        *v79 = v80;
        v79[1] = v81;
        v135 = (void *)(v78 + v77[8]);
        outlined init with copy of MLDecisionTreeRegressor.ModelParameters(v70, (uint64_t)v135);
        v122 = v77[7];
        *(_QWORD *)(v78 + v122) = v68;
        v82 = v116;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v61, v116, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
        v83 = (*(unsigned __int8 *)(v114 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
        v84 = swift_allocObject();
        outlined init with take of TreeRegressorModel(v82, v84 + v83, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
        specialized blockAwait<A>(_:)();
        v86 = v85;
        swift_release();
        *(_QWORD *)(v78 + v77[5]) = v86;
        _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v125, v78, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
        v87 = (uint64_t)v128;
        TreeRegressorModel.computeMetrics(on:)((uint64_t)v128, &v138);
        v88 = v138;
        LOBYTE(v86) = v139;
        v89 = v130;
        outlined consume of Result<_RegressorMetrics, Error>(*(id *)v130, *(_QWORD *)(v130 + 8), *(_BYTE *)(v130 + 16));
        *(_OWORD *)v89 = v88;
        *(_BYTE *)(v89 + 16) = v86;
        v90 = v111;
        v91 = v111 + *(int *)(v107 + 48);
        v92 = v132;
        v93 = v133;
        OUTLINED_FUNCTION_216(v111, v87, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v132 + 16));
        _sypSgWOcTm_0(v129, v91, &demangling cache variable for type metadata for DataFrame?);
        if (__swift_getEnumTagSinglePayload(v91, 1, v93) == 1)
        {
          OUTLINED_FUNCTION_24_10();
          v94 = *(uint64_t (**)(uint64_t, uint64_t))(v92 + 8);
          v95 = v94(v140, v93);
          OUTLINED_FUNCTION_58_0(v95, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
          OUTLINED_FUNCTION_15_15(v96, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
          outlined destroy of URL?(v87, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          OUTLINED_FUNCTION_8_21();
          outlined destroy of URL?(v91, &demangling cache variable for type metadata for DataFrame?);
          v94(v90, v93);
        }
        else
        {
          v97 = v110;
          v98 = OUTLINED_FUNCTION_53_9();
          OUTLINED_FUNCTION_216(v98, v99, v100);
          OUTLINED_FUNCTION_48_2(v90);
          TreeRegressorModel.computeMetrics(on:)(v97, &v138);
          OUTLINED_FUNCTION_24_10();
          OUTLINED_FUNCTION_48_2(v140);
          v101 = OUTLINED_FUNCTION_48_2(v97);
          OUTLINED_FUNCTION_58_0(v101, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
          OUTLINED_FUNCTION_15_15(v102, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
          OUTLINED_FUNCTION_44_8(v103, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
          OUTLINED_FUNCTION_8_21();
          v104 = v138;
          v105 = v139;
          v106 = v127;
          outlined consume of Result<_RegressorMetrics, Error>(*(id *)v127, *(_QWORD *)(v127 + 8), *(_BYTE *)(v127 + 16));
          *(_OWORD *)v106 = v104;
          *(_BYTE *)(v106 + 16) = v105;
        }
        goto LABEL_6;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_24_10();
      v67 = OUTLINED_FUNCTION_13_20();
      OUTLINED_FUNCTION_203(v67, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
      outlined destroy of URL?(v60, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      v59((uint64_t)v37, v58);
    }
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v130, *(_QWORD *)(v130 + 8), *(_BYTE *)(v130 + 16));
    OUTLINED_FUNCTION_94_0();
LABEL_6:
    OUTLINED_FUNCTION_7();
    return;
  }
  __break(1u);
}

uint64_t outlined destroy of MLDecisionTreeRegressor.ModelParameters(uint64_t a1)
{
  destroy for MLBoostedTreeRegressor.ModelParameters(a1);
  return a1;
}

uint64_t partial apply for closure #1 in MLDecisionTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(v2);
}

void MLDecisionTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_161();
  v8 = *((_BYTE *)a1 + 8);
  v9 = *a1;
  v10 = v8;
  DataFrame.init(_:)((uint64_t)&v9);
  outlined init with copy of MLDecisionTreeRegressor.ModelParameters(a5, (uint64_t)&v9);
  MLDecisionTreeRegressor.init(trainingData:targetColumn:featureColumns:parameters:)();
  outlined destroy of MLDecisionTreeRegressor.ModelParameters(a5);
  OUTLINED_FUNCTION_127();
}

void MLDecisionTreeRegressor.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  OUTLINED_FUNCTION_8_1();
  v1 = v0;
  v3 = v2;
  type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_211();
  v6 = type metadata accessor for TreeRegressorModel();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_101_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_211();
  type metadata accessor for BaseTreeRegressor();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_62_8();
  OUTLINED_FUNCTION_3();
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  type metadata accessor for TreeRegressor();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_5();
  v12 = v3 + *(int *)(type metadata accessor for MLDecisionTreeRegressor() + 36);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) = 0;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v13 = OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_25_2(v13, v14, 0xD0000000000000C0);
  v15 = (char *)sub_21AE6AF58
      + 4 * byte_21AFE9FE0[*(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for MLCheckpoint() + 20))];
  __asm { BR              X10 }
}

void sub_21AE6AF58()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v31;
  uint64_t (*v32)(_QWORD);
  _QWORD *v33;
  uint64_t v34;

  v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    OUTLINED_FUNCTION_49_0();
    v15 = OUTLINED_FUNCTION_44_2(v14, 0xD000000000000042);
    swift_willThrow(v15);
    v22 = type metadata accessor for MLCheckpoint;
    v23 = *(_QWORD *)(v5 - 72);
    goto LABEL_6;
  }
  BoostedTreeConfiguration.init()();
  *(_QWORD *)v0 = 0;
  *((_QWORD *)v0 + 1) = 0xE000000000000000;
  v7 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)v0 + 2) = MEMORY[0x24BEE4AF8];
  *((_QWORD *)v0 + 3) = v7;
  OUTLINED_FUNCTION_60_2((uint64_t)"vectorized_features");
  v9 = *(_QWORD *)(v5 - 168);
  v8 = *(_QWORD *)(v5 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v2, v4, v8);
  v10 = *(_QWORD *)(v5 - 152);
  BaseTreeRegressor.init(configuration:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v5 - 144) + 32))(&v0[*(int *)(v1 + 28)], v10, *(_QWORD *)(v5 - 136));
  lazy protocol witness table accessor for type TreeRegressor and conformance TreeRegressor();
  v11 = *(_QWORD *)(v5 - 128);
  v12 = *(_QWORD *)(v5 - 120);
  v13 = *(_QWORD *)(v5 - 72);
  UpdatableSupervisedTabularEstimator.readWithOptimizer(from:)();
  if (v11)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters(v13, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v22 = type metadata accessor for TreeRegressor;
    v23 = (uint64_t)v0;
LABEL_6:
    outlined destroy of MLHandPoseClassifier.ModelParameters(v23, (uint64_t (*)(_QWORD))v22);
    OUTLINED_FUNCTION_94_0();
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(v5 - 176);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v12, v16, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  v17 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 192) + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject();
  outlined init with take of TreeRegressorModel(v16, v19 + v18, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  specialized blockAwait<A>(_:)();
  v21 = v20;
  swift_release();
  v24 = *(int **)(v5 - 232);
  v25 = *(_QWORD *)(v5 - 200);
  *(_QWORD *)(v25 + v24[5]) = v21;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(*(_QWORD *)(v5 - 120), v25, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  v26 = *(_QWORD *)(v5 - 216);
  v27 = *(_QWORD *)(v5 - 208);
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_WORD *)(v27 + 16) = 256;
  OUTLINED_FUNCTION_53_9();
  swift_storeEnumTagMultiPayload();
  v28 = v25 + v24[8];
  *(_OWORD *)v28 = 0u;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_QWORD *)(v28 + 32) = 6;
  *(_OWORD *)(v28 + 40) = xmmword_21AFE84E0;
  *(_QWORD *)(v28 + 56) = 42;
  v29 = *(_QWORD *)(v5 - 224);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v27, v29, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData);
  *(_QWORD *)(v5 - 88) = v26;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v5 - 112));
  outlined init with take of TreeRegressorModel(v29, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData);
  outlined assign with take of Any?(v5 - 112, v28);
  v31 = OUTLINED_FUNCTION_53_9();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v31, v32);
  v33 = (_QWORD *)(v25 + v24[6]);
  *v33 = 0;
  v33[1] = 0xE000000000000000;
  outlined destroy of MLHandPoseClassifier.ModelParameters(v13, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v5 - 120), (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
  OUTLINED_FUNCTION_203(v34, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressor);
  *(_QWORD *)(v25 + v24[7]) = MEMORY[0x24BEE4AF8];
LABEL_7:
  OUTLINED_FUNCTION_7();
}

void static MLDecisionTreeRegressor.train(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_8_1();
  v1 = OUTLINED_FUNCTION_93();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v5);
  static MLDecisionTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2((uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLDecisionTreeRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;

  static MLDecisionTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLDecisionTreeRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
}

void static MLDecisionTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_1();
  v1 = OUTLINED_FUNCTION_93();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_5();
  v3 = OUTLINED_FUNCTION_78_1();
  DataFrame.init(_:)(v3);
  static MLDecisionTreeRegressor.makeTrainingSession(trainingData:targetColumn:featureColumns:parameters:sessionParameters:)();
  OUTLINED_FUNCTION_23_2(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _UNKNOWN **v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  OUTLINED_FUNCTION_8_1();
  v41 = v1;
  v42 = v2;
  v4 = v3;
  v39 = v5;
  v40 = v6;
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_208();
  v36 = v8;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_211();
  v38 = v10;
  OUTLINED_FUNCTION_62_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_46_2();
  type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_5();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  v48 = v15;
  OUTLINED_FUNCTION_29_3();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v33 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)v33 - v20;
  v37 = v4;
  _sypSgWOcTm_0(v4, (uint64_t)&v46, &demangling cache variable for type metadata for Any?);
  if (v47)
  {
    v22 = (uint64_t)&v21[*(int *)(v13 + 48)];
    outlined init with take of Any(&v46, &v43);
    swift_dynamicCast();
    MLDecisionTreeRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)();
    OUTLINED_FUNCTION_203(v23, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData);
    if (!v0)
    {
      v24 = (uint64_t)&v19[*(int *)(v13 + 48)];
      v25 = OUTLINED_FUNCTION_93();
      v34 = *(_QWORD *)(v25 - 8);
      v26 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
      v26(v19, v21, v25);
      v35 = v24;
      _sypSgWOcTm_0(v22, v24, &demangling cache variable for type metadata for DataFrame?);
      v33[0] = v48 + *(int *)(v13 + 48);
      v27 = v33[0];
      v33[1] = v25;
      ((void (*)(uint64_t, char *))v26)(v48, v21);
      _sypSgWOcTm_0(v22, v27, &demangling cache variable for type metadata for DataFrame?);
      outlined init with copy of MLDecisionTreeRegressor.ModelParameters(v37, (uint64_t)&v43);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      BoostedTreeConfiguration.init()();
      BoostedTreeConfiguration.maximumIterations.setter();
      BoostedTreeConfiguration.learningRate.setter();
      BoostedTreeConfiguration.maximumDepth.setter();
      BoostedTreeConfiguration.minimumLossReduction.setter();
      BoostedTreeConfiguration.minimumChildWeight.setter();
      BoostedTreeConfiguration.randomSeed.setter();
      outlined destroy of MLDecisionTreeRegressor.ModelParameters((uint64_t)&v43);
      _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v42, v38, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      v28 = type metadata accessor for TreeRegressorTrainingSessionDelegate();
      OUTLINED_FUNCTION_15_1();
      v29 = TreeRegressorTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)();
      v30 = OUTLINED_FUNCTION_26_13();
      OUTLINED_FUNCTION_44_8(v30, &demangling cache variable for type metadata for DataFrame?);
      v44 = v28;
      v45 = &protocol witness table for TreeRegressorTrainingSessionDelegate;
      *(_QWORD *)&v43 = v29;
      v31 = v36;
      OUTLINED_FUNCTION_97(v42, v32, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>);
      OUTLINED_FUNCTION_15_1();
      swift_retain();
      specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)&v43, v31, 2);
      outlined destroy of URL?((uint64_t)v21, &demangling cache variable for type metadata for (training: DataFrame, validation: DataFrame?));
      swift_release();
    }
    OUTLINED_FUNCTION_7();
  }
  else
  {
    __break(1u);
  }
}

void static MLDecisionTreeRegressor.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLDecisionTreeRegressor>);
  OUTLINED_FUNCTION_15_1();
  swift_retain();
  specialized MLJob.init(_:)();
}

void static MLDecisionTreeRegressor.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14[-1] - v7;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(a1, (uint64_t)&v14[-1] - v7, v9);
  v10 = type metadata accessor for TreeRegressorTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v11 = TreeRegressorTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v8);
  if (!v1)
  {
    v14[3] = v10;
    v14[4] = &protocol witness table for TreeRegressorTrainingSessionDelegate;
    v14[0] = v11;
    OUTLINED_FUNCTION_97(a1, v12, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLDecisionTreeRegressor>);
    OUTLINED_FUNCTION_15_1();
    specialized MLTrainingSession.init(delegate:parameters:modelType:)((uint64_t)v14, (uint64_t)v6, 2);
  }
}

void closure #1 in closure #1 in static MLDecisionTreeRegressor.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  _BYTE v20[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a2 & 1) != 0)
  {
    *v5 = a1;
    swift_storeEnumTagMultiPayload();
    v18 = a1;
    a4(v5);
    outlined destroy of URL?((uint64_t)v5, &demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
  }
  else
  {
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for TreeRegressorTrainingSessionDelegate();
    swift_dynamicCast();
    v15 = v19;
    v16 = type metadata accessor for TaskPriority();
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 1, 1, v16);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v15;
    v17[5] = a4;
    v17[6] = a5;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in static MLDecisionTreeRegressor.handleResult(_:session:fulfill:), (uint64_t)v17);
    swift_release();
  }
}

uint64_t closure #1 in static MLDecisionTreeRegressor.handleResult(_:session:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
  v6[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static MLDecisionTreeRegressor.handleResult(_:session:fulfill:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Result<>.init(catching:)
                                                + async function pointer to specialized Result<>.init(catching:));
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  v0[6] = v1;
  *v1 = v0;
  v1[1] = closure #1 in static MLDecisionTreeRegressor.handleResult(_:session:fulfill:);
  return v3(v0[5], v0[2]);
}

{
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for Result<MLDecisionTreeRegressor, Error>);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MLDecisionTreeRegressor.init(delegate:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[29] = a1;
  v2[30] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TreeRegressorModel?);
  v2[31] = OUTLINED_FUNCTION_4_6();
  v2[32] = OUTLINED_FUNCTION_4_24();
  v2[33] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDecisionTreeRegressor.ModelParameters.ValidationData?);
  v2[34] = OUTLINED_FUNCTION_4_6();
  v2[35] = type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  v2[36] = OUTLINED_FUNCTION_4_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v2[37] = OUTLINED_FUNCTION_4_6();
  v3 = type metadata accessor for BoostedTreeConfiguration();
  v2[38] = v3;
  v2[39] = *(_QWORD *)(v3 - 8);
  v2[40] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[41] = OUTLINED_FUNCTION_4_6();
  v2[42] = type metadata accessor for PersistentParametersForTreeBasedMethods();
  v2[43] = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLDecisionTreeRegressor.init(delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 240) + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v3, v1, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 344);
    v34 = (uint64_t *)(v0 + 144);
    v7 = *(_QWORD *)(v0 + 320);
    v8 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 312);
    v10 = *(_QWORD *)(v0 + 296);
    v11 = *(_QWORD *)(v0 + 272);
    v32 = *(_QWORD *)(v0 + 280);
    outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 328), v6, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v6 + *(int *)(v5 + 32), v8);
    _sypSgWOcTm_0(v6 + *(int *)(v5 + 20), v10, &demangling cache variable for type metadata for DataFrame?);
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    v35 = v0 + 16;
    *(_QWORD *)(v0 + 48) = BoostedTreeConfiguration.maximumDepth.getter();
    BoostedTreeConfiguration.minimumLossReduction.getter();
    *(_QWORD *)(v0 + 56) = v12;
    BoostedTreeConfiguration.minimumChildWeight.getter();
    *(_QWORD *)(v0 + 64) = v13;
    *(_QWORD *)(v0 + 72) = BoostedTreeConfiguration.randomSeed.getter();
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML23MLDecisionTreeRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML23ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(v10, v11);
    if (__swift_getEnumTagSinglePayload(v11, 1, v32) == 1)
    {
      v14 = *(_QWORD *)(v0 + 272);
      swift_storeEnumTagMultiPayload();
      outlined destroy of URL?(v14, &demangling cache variable for type metadata for MLDecisionTreeRegressor.ModelParameters.ValidationData?);
    }
    else
    {
      outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 288), (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData);
    }
    v15 = *(_QWORD *)(v0 + 336);
    v16 = *(_QWORD *)(v0 + 344);
    v18 = *(_QWORD *)(v0 + 312);
    v17 = *(_QWORD *)(v0 + 320);
    v20 = *(_QWORD *)(v0 + 296);
    v19 = *(_QWORD *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 288);
    v22 = *(_QWORD *)(v0 + 248);
    v33 = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v0 + 280);
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v34);
    outlined init with take of TreeRegressorModel(v21, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData);
    outlined assign with take of Any?((uint64_t)v34, v35);
    outlined destroy of URL?(v20, &demangling cache variable for type metadata for DataFrame?);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    v24 = *(int *)(v15 + 28);
    v25 = (uint64_t *)(v16 + *(int *)(v15 + 24));
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v16 + v24);
    v29 = v33 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v29, v22, &demangling cache variable for type metadata for TreeRegressorModel?);
    v30 = OUTLINED_FUNCTION_42_2();
    result = __swift_getEnumTagSinglePayload(v22, 1, v30);
    if ((_DWORD)result != 1)
    {
      outlined init with copy of MLDecisionTreeRegressor.ModelParameters(v35, v0 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 352) = v31;
      *v31 = v0;
      v31[1] = MLDecisionTreeRegressor.init(delegate:);
      return MLDecisionTreeRegressor.init(_:targetColumn:featureColumns:parameters:)(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248), v27, v26, v28, v0 + 80);
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 344);
  swift_release();
  outlined destroy of MLDecisionTreeRegressor.ModelParameters(v0 + 16);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MLDecisionTreeRegressor.init(delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 240);
  outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 232), (uint64_t (*)(_QWORD))type metadata accessor for MLDecisionTreeRegressor);
  v2 = v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics;
  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_trainingMetrics + 16);
  if (v3 == 255)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 344);
    v5 = *(_QWORD *)(v0 + 256);
    v7 = *(_QWORD *)(v0 + 232);
    v6 = *(_QWORD *)(v0 + 240);
    v8 = v3 & 1;
    v10 = *(id *)v2;
    v9 = *(_QWORD *)(v2 + 8);
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v2, v9, v3 & 1);
    outlined destroy of MLDecisionTreeRegressor.ModelParameters(v0 + 16);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v4, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    v11 = v7 + *(int *)(v5 + 36);
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    *(_QWORD *)v11 = v10;
    *(_QWORD *)(v11 + 8) = v9;
    *(_BYTE *)(v11 + 16) = v8;
    v13 = *(void **)(v6 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics);
    v12 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 8);
    v14 = *(unsigned __int8 *)(v6
                             + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics
                             + 16);
    outlined copy of MLRegressorMetrics?(v13, v12, *(_BYTE *)(v6 + OBJC_IVAR____TtC8CreateML36TreeRegressorTrainingSessionDelegate_validationMetrics + 16));
    swift_release();
    if (v14 != 255)
    {
      v15 = *(_QWORD *)(v0 + 232) + *(int *)(*(_QWORD *)(v0 + 256) + 40);
      outlined consume of Result<_RegressorMetrics, Error>(*(id *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
      *(_QWORD *)v15 = v13;
      *(_QWORD *)(v15 + 8) = v12;
      *(_BYTE *)(v15 + 16) = v14 & 1;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_2(*(uint64_t (**)(void))(v0 + 8));
  }
}

void MLDecisionTreeRegressor.predictions(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::OpaquePointer v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;

  v2 = OUTLINED_FUNCTION_93();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for MLDecisionTreeRegressor();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v4, v5);
  if (!v6)
  {
    OUTLINED_FUNCTION_18();
    TreeRegressorModel.applied(to:eventHandler:)(v7);
    MEMORY[0x220758A1C](*v0, v0[1]);
    OUTLINED_FUNCTION_23_2(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
}

void MLDecisionTreeRegressor.predictions(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  char v10;

  v6 = OUTLINED_FUNCTION_93();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_45_2();
  type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_54_0();
  v8 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v8;
  outlined copy of Result<_DataTable, Error>(v9, v8);
  DataFrame.init(_:)((uint64_t)&v9);
  MLDecisionTreeRegressor.predictions(from:)();
  OUTLINED_FUNCTION_60_5();
  if (!v2)
    MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v3, 1, a2);
  OUTLINED_FUNCTION_127();
}

void MLDecisionTreeRegressor.evaluation(on:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  Swift::OpaquePointer v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t inited;
  _QWORD *v10;
  uint64_t v11;
  Swift::String v12;

  v5 = OUTLINED_FUNCTION_4_24();
  OUTLINED_FUNCTION_77_0();
  DataFrame.validateContainsColumns(_:context:)(v6, v7);
  if (v8)
    goto LABEL_4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  v10 = (_QWORD *)(v2 + *(int *)(v5 + 24));
  v11 = v10[1];
  *(_QWORD *)(inited + 32) = *v10;
  *(_QWORD *)(inited + 40) = v11;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 0x6C6562614CLL;
  v12._object = (void *)0xE500000000000000;
  DataFrame.validateContainsColumns(_:context:)((Swift::OpaquePointer)inited, v12);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (v8)
  {
LABEL_4:
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    TreeRegressorModel.computeMetrics(on:)(a1, (_QWORD *)a2);
  }
}

uint64_t MLDecisionTreeRegressor.evaluation(on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v9;
  char v10;

  v5 = type metadata accessor for DataFrame();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  v7 = *(_BYTE *)(a1 + 8);
  v9 = *(id *)a1;
  v10 = v7;
  outlined copy of Result<_DataTable, Error>(v9, v7);
  DataFrame.init(_:)((uint64_t)&v9);
  MLDecisionTreeRegressor.evaluation(on:)(v2, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
}

