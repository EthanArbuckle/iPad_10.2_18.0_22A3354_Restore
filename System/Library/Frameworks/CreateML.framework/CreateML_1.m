void MLDecisionTreeRegressor.write(to:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[10];

  OUTLINED_FUNCTION_8_1();
  v31 = v0;
  v5 = v4;
  v37 = v6;
  type metadata accessor for TreeRegressorModel();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v8 = type metadata accessor for Model();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_46_2();
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_53_0();
  v30 = v5[1];
  v35 = v5[2];
  v36 = *v5;
  v33 = v5[4];
  v34 = v5[3];
  v12 = v5[6];
  v32 = v5[5];
  v13 = v5[7];
  v14 = v5[8];
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v37, 0xD000000000000015, 0x800000021AFF3AE0, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v3);
  if (!v1)
  {
    v29 = v13;
    v38 = v2;
    v28 = v8;
    OUTLINED_FUNCTION_97(v31, v15, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
    if (v30)
    {
      v16 = v36;
      v17 = v36;
      v18 = v30;
      v19 = v35;
      v20 = v34;
      v21 = v33;
      v22 = v32;
      v23 = v12;
      v24 = v29;
    }
    else
    {
      v25 = NSFullUserName();
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v26;

      v21 = 0;
      v22 = 0;
      v14 = 0;
      v19 = 0xD000000000000033;
      v20 = 0x800000021AFF2260;
      v24 = 0xE100000000000000;
      v23 = 49;
      v16 = v36;
    }
    v39[0] = v17;
    v39[1] = v18;
    v39[2] = v19;
    v39[3] = v20;
    v39[4] = v21;
    v39[5] = v22;
    v39[6] = v23;
    v39[7] = v24;
    v39[8] = v14;
    outlined copy of MLModelMetadata?(v16, v30);
    specialized CoreMLExportable.export(metadata:)(v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_3();
    v27 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_203(v27, (uint64_t (*)(_QWORD))type metadata accessor for TreeRegressorModel);
    Model.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v38, v28);
    OUTLINED_FUNCTION_23_2(v3, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  }
  OUTLINED_FUNCTION_7();
}

void MLDecisionTreeRegressor.write(toFile:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  OUTLINED_FUNCTION_8_1();
  v19 = v2;
  v4 = v3;
  v5 = type metadata accessor for URL.DirectoryHint();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_161();
  v12 = *v4;
  v17 = v4[1];
  v18 = v12;
  v13 = v4[2];
  v15 = v4[3];
  v16 = v13;
  v14 = *((_QWORD *)v4 + 8);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 1, 1, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v0, *MEMORY[0x24BDCD7A0], v5);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  v20 = v18;
  v21 = v17;
  v22 = v16;
  v23 = v15;
  v24 = v14;
  MLDecisionTreeRegressor.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v10);
  OUTLINED_FUNCTION_7();
}

unint64_t MLDecisionTreeRegressor.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  char v8;
  unint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  v1 = OUTLINED_FUNCTION_4_24();
  v2 = MLDecisionTreeRegressor.ModelParameters.description.getter();
  v4 = v3;
  v5 = MLRegressorMetrics.description.getter();
  v7 = v6;
  v8 = *(_BYTE *)(v0 + *(int *)(v1 + 40) + 16);
  v9 = MLRegressorMetrics.description.getter();
  v11 = v10;
  v12._countAndFlagsBits = v2;
  v12._object = v4;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v5;
  v13._object = v7;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xD00000000000001ELL;
  v14._object = (void *)0x800000021AFF1480;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    v15._countAndFlagsBits = v9;
    v15._object = v11;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD000000000000020;
    v16._object = (void *)0x800000021AFF14A0;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000022;
}

void MLDecisionTreeRegressor.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  unint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString();
  v3._countAndFlagsBits = MLDecisionTreeRegressor.description.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

uint64_t partial apply for closure #1 in MLDecisionTreeRegressor.init(checkpoint:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_61_2();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_87_0(v1);
  return closure #1 in MLRandomForestRegressor.init(checkpoint:)(v2);
}

id sub_21AE6CC58@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = MLDecisionTreeRegressor.model.getter();
  *a1 = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MLDecisionTreeRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  uint64_t v29;
  id v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  id v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  id v42;
  uint64_t v43;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for BaseTreeRegressorModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[5];
    v18 = a3[6];
    v19 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)a1 + v17) = v19;
    v20 = (_QWORD *)((char *)a1 + v18);
    v21 = (_QWORD *)((char *)a2 + v18);
    v22 = *v21;
    v23 = v21[1];
    v24 = a3[7];
    v25 = a3[8];
    v26 = *(_QWORD *)((char *)a2 + v24);
    *v20 = v22;
    v20[1] = v23;
    *(_QWORD *)((char *)a1 + v24) = v26;
    v27 = (char *)a1 + v25;
    v28 = (_OWORD *)((char *)a2 + v25);
    v29 = *(_QWORD *)((char *)a2 + v25 + 24);
    v30 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29)
    {
      *((_QWORD *)v27 + 3) = v29;
      (**(void (***)(char *, _OWORD *, uint64_t))(v29 - 8))(v27, v28, v29);
    }
    else
    {
      v31 = v28[1];
      *(_OWORD *)v27 = *v28;
      *((_OWORD *)v27 + 1) = v31;
    }
    v32 = v28[3];
    *((_OWORD *)v27 + 2) = v28[2];
    *((_OWORD *)v27 + 3) = v32;
    v33 = a3[9];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(id *)v35;
    v37 = *((_QWORD *)v35 + 1);
    v38 = v35[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v35, v37, v38);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    v34[16] = v38;
    v39 = a3[10];
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    v42 = *(id *)v41;
    v43 = *((_QWORD *)v41 + 1);
    LOBYTE(v36) = v41[16];
    outlined copy of Result<_RegressorMetrics, Error>(*(id *)v41, v43, (char)v36);
    *(_QWORD *)v40 = v42;
    *((_QWORD *)v40 + 1) = v43;
    v40[16] = (char)v36;
  }
  return a1;
}

_QWORD *initializeWithCopy for MLDecisionTreeRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  uint64_t v27;
  id v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  id v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  id v40;
  uint64_t v41;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[5];
  v16 = a3[6];
  v17 = *(void **)((char *)a2 + v15);
  *(_QWORD *)((char *)a1 + v15) = v17;
  v18 = (_QWORD *)((char *)a1 + v16);
  v19 = (_QWORD *)((char *)a2 + v16);
  v20 = *v19;
  v21 = v19[1];
  v22 = a3[7];
  v23 = a3[8];
  v24 = *(_QWORD *)((char *)a2 + v22);
  *v18 = v20;
  v18[1] = v21;
  *(_QWORD *)((char *)a1 + v22) = v24;
  v25 = (char *)a1 + v23;
  v26 = (_OWORD *)((char *)a2 + v23);
  v27 = *(_QWORD *)((char *)a2 + v23 + 24);
  v28 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27)
  {
    *((_QWORD *)v25 + 3) = v27;
    (**(void (***)(char *, _OWORD *, uint64_t))(v27 - 8))(v25, v26, v27);
  }
  else
  {
    v29 = v26[1];
    *(_OWORD *)v25 = *v26;
    *((_OWORD *)v25 + 1) = v29;
  }
  v30 = v26[3];
  *((_OWORD *)v25 + 2) = v26[2];
  *((_OWORD *)v25 + 3) = v30;
  v31 = a3[9];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(id *)v33;
  v35 = *((_QWORD *)v33 + 1);
  v36 = v33[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v33, v35, v36);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  v32[16] = v36;
  v37 = a3[10];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(id *)v39;
  v41 = *((_QWORD *)v39 + 1);
  LOBYTE(v34) = v39[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v39, v41, (char)v34);
  *(_QWORD *)v38 = v40;
  *((_QWORD *)v38 + 1) = v41;
  v38[16] = (char)v34;
  return a1;
}

_QWORD *assignWithCopy for MLDecisionTreeRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  id v30;
  uint64_t v31;
  char v32;
  void *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  char v43;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[5];
  v16 = *(void **)((char *)a2 + v15);
  v17 = *(void **)((char *)a1 + v15);
  *(_QWORD *)((char *)a1 + v15) = v16;
  v18 = v16;

  v19 = a3[6];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = (uint64_t)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)((char *)a2 + v22 + 24);
  if (!*(_QWORD *)((char *)a1 + v22 + 24))
  {
    if (v25)
    {
      *(_QWORD *)(v23 + 24) = v25;
      (**(void (***)(uint64_t, char *))(v25 - 8))(v23, v24);
      goto LABEL_15;
    }
LABEL_14:
    v26 = *((_OWORD *)v24 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v26;
    goto LABEL_15;
  }
  if (!v25)
  {
    __swift_destroy_boxed_opaque_existential_0(v23);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v23, (uint64_t *)v24);
LABEL_15:
  *(_QWORD *)(v23 + 32) = *((_QWORD *)v24 + 4);
  *(_QWORD *)(v23 + 40) = *((_QWORD *)v24 + 5);
  *(_QWORD *)(v23 + 48) = *((_QWORD *)v24 + 6);
  *(_QWORD *)(v23 + 56) = *((_QWORD *)v24 + 7);
  v27 = a3[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(id *)v29;
  v31 = *((_QWORD *)v29 + 1);
  v32 = v29[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v29, v31, v32);
  v33 = *(void **)v28;
  v34 = *((_QWORD *)v28 + 1);
  v35 = v28[16];
  *(_QWORD *)v28 = v30;
  *((_QWORD *)v28 + 1) = v31;
  v28[16] = v32;
  outlined consume of Result<_RegressorMetrics, Error>(v33, v34, v35);
  v36 = a3[10];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(id *)v38;
  v40 = *((_QWORD *)v38 + 1);
  LOBYTE(v30) = v38[16];
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)v38, v40, (char)v30);
  v41 = *(void **)v37;
  v42 = *((_QWORD *)v37 + 1);
  v43 = v37[16];
  *(_QWORD *)v37 = v39;
  *((_QWORD *)v37 + 1) = v40;
  v37[16] = (char)v30;
  outlined consume of Result<_RegressorMetrics, Error>(v41, v42, v43);
  return a1;
}

uint64_t initializeWithTake for MLDecisionTreeRegressor(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v14[3];
  v13[2] = v14[2];
  v13[3] = v16;
  v17 = a3[9];
  v18 = a3[10];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  return a1;
}

_QWORD *assignWithTake for MLDecisionTreeRegressor(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  void *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  void *v34;
  uint64_t v35;
  char v36;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRelease();
      v8 = a2[4];
      a1[3] = a2[3];
      a1[4] = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of URL?((uint64_t)(a1 + 2), &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
LABEL_6:
  v9 = *(int *)(type metadata accessor for TreeRegressorModel() + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[5];
  v14 = *(void **)((char *)a1 + v13);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);

  v15 = a3[6];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (char *)a1 + v20;
  if (*(_QWORD *)((char *)a1 + v20 + 24))
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1 + v20);
  v22 = *(_OWORD *)((char *)a2 + v20 + 16);
  *(_OWORD *)v21 = *(_OWORD *)((char *)a2 + v20);
  *((_OWORD *)v21 + 1) = v22;
  *((_QWORD *)v21 + 4) = *(_QWORD *)((char *)a2 + v20 + 32);
  *(_OWORD *)(v21 + 40) = *(_OWORD *)((char *)a2 + v20 + 40);
  *((_QWORD *)v21 + 7) = *(_QWORD *)((char *)a2 + v20 + 56);
  v23 = a3[9];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = v25[16];
  v27 = *(void **)v24;
  v28 = *((_QWORD *)v24 + 1);
  v29 = v24[16];
  *(_OWORD *)v24 = *(_OWORD *)v25;
  v24[16] = v26;
  outlined consume of Result<_RegressorMetrics, Error>(v27, v28, v29);
  v30 = a3[10];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = v32[16];
  v34 = *(void **)v31;
  v35 = *((_QWORD *)v31 + 1);
  v36 = v31[16];
  *(_OWORD *)v31 = *(_OWORD *)v32;
  v31[16] = v33;
  outlined consume of Result<_RegressorMetrics, Error>(v34, v35, v36);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLDecisionTreeRegressor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE6D4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;

  v6 = OUTLINED_FUNCTION_42_2();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MLDecisionTreeRegressor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AE6D570(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_42_2();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    OUTLINED_FUNCTION_125();
  }
}

uint64_t type metadata completion function for MLDecisionTreeRegressor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TreeRegressorModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21AE6D67C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MLDecisionTreeRegressor.handleResult(_:session:fulfill:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for specialized closure #1 in blockAwait<A>(_:);
  return closure #1 in static MLDecisionTreeRegressor.handleResult(_:session:fulfill:)(a1, v4, v5, v6, v7, v8);
}

uint64_t OUTLINED_FUNCTION_4_24()
{
  return type metadata accessor for MLDecisionTreeRegressor();
}

uint64_t OUTLINED_FUNCTION_8_21()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 288))(v0, *(_QWORD *)(v1 - 200));
}

uint64_t OUTLINED_FUNCTION_13_20()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 216) + 8))(*(_QWORD *)(v0 - 72), *(_QWORD *)(v0 - 208));
}

void OUTLINED_FUNCTION_15_15(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 280), a2);
}

uint64_t OUTLINED_FUNCTION_24_10()
{
  uint64_t v0;

  return outlined destroy of MLDecisionTreeRegressor.ModelParameters(*(_QWORD *)(v0 - 224));
}

uint64_t OUTLINED_FUNCTION_26_13()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 256) + 8))(*(_QWORD *)(v0 - 72), *(_QWORD *)(v0 - 264));
}

void OUTLINED_FUNCTION_44_8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(*(_QWORD *)(v2 - 248), a2);
}

uint64_t OUTLINED_FUNCTION_53_9()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_62_8()
{
  return type metadata accessor for BoostedTreeConfiguration();
}

uint64_t SortedSet.init(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v0 = type metadata accessor for Set();
  MEMORY[0x22075B938](MEMORY[0x24BEE1718], v0);
  Array.init<A>(_:)();
  v1 = type metadata accessor for Array();
  MEMORY[0x22075B938](MEMORY[0x24BEE12C8], v1);
  v2 = Sequence.sorted(by:)();
  swift_bridgeObjectRelease();
  v7[2] = v2;
  v7[3] = v2;
  swift_bridgeObjectRetain();
  MEMORY[0x22075B938](MEMORY[0x24BEE12D8], v1);
  v3 = MEMORY[0x24BEE17A8];
  RandomAccessCollection<>.indices.getter();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  v7[0] = v3;
  v7[1] = lazy protocol witness table accessor for type Int and conformance Int();
  MEMORY[0x22075B938](MEMORY[0x24BEE1BB8], v4, v7);
  zip<A, B>(_:_:)();
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for Zip2Sequence();
  MEMORY[0x22075B938](MEMORY[0x24BEE2620], v5);
  Dictionary.init<A>(uniqueKeysWithValues:)();
  return v2;
}

uint64_t partial apply for implicit closure #1 in SortedSet.init(_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

uint64_t destroy for SortedSet()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for SortedSet(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SortedSet(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for SortedSet(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SortedSet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SortedSet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for SortedSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SortedSet);
}

_QWORD *initializeBufferWithCopyOfBuffer for TreeRegressorModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = *(int *)(a3 + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for BaseTreeRegressorModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t destroy for TreeRegressorModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for BaseTreeRegressorModel();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for TreeRegressorModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

_QWORD *assignWithCopy for TreeRegressorModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of FeatureVectorizer<Float>.Transformer((uint64_t)(a1 + 2));
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t outlined destroy of FeatureVectorizer<Float>.Transformer(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for TreeRegressorModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for TreeRegressorModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (!a1[2])
    goto LABEL_5;
  if (!v7)
  {
    outlined destroy of FeatureVectorizer<Float>.Transformer((uint64_t)(a1 + 2));
LABEL_5:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    a1[4] = a2[4];
    goto LABEL_6;
  }
  a1[2] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for BaseTreeRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for TreeRegressorModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE6DFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for BaseTreeRegressorModel();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TreeRegressorModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE6E028(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for BaseTreeRegressorModel();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TreeRegressorModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TreeRegressorModel;
  if (!type metadata singleton initialization cache for TreeRegressorModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for TreeRegressorModel()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BaseTreeRegressorModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void TreeRegressorModel.computeMetrics(on:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v2;
  v32 = a2;
  v5 = type metadata accessor for AnyColumn();
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v34 = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v33 = *(_QWORD *)(v8 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Double>>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_64();
  v38 = v14;
  v15 = type metadata accessor for DataFrame();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_64();
  v18 = v17;
  v35 = a1;
  v19 = v39;
  TreeRegressorModel.applied(to:eventHandler:)(v17);
  if (!v19)
  {
    v29 = 0;
    v30 = v16;
    v31 = v15;
    v39 = v13;
    v28 = v18;
    DataFrame.subscript.getter();
    v41 = 0;
    lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>, MEMORY[0x24BDF5F90]);
    OptionalColumnProtocol.filled(with:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v8);
    v20 = v34;
    MEMORY[0x220758A1C](*v3, v3[1]);
    AnyColumn.convertedToDoubles()();
    v22 = v21;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v20, v37);
    if (v22)
    {
      v40 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<Double>);
      lazy protocol witness table accessor for type Double and conformance Double();
      lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type FilledColumn<Column<Double>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<Double>>, MEMORY[0x24BDF5E58]);
      lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ContiguousArray<Double> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<Double>, MEMORY[0x24BEE2A60]);
      v23 = v38;
      OUTLINED_FUNCTION_1_23();
      maximumAbsoluteError<A, B, C>(_:_:)();
      v24 = v41;
      v40 = v22;
      OUTLINED_FUNCTION_1_23();
      rootMeanSquaredError<A, B, C>(_:_:)();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v23, v12);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v31);
      swift_release();
      v25 = v41;
      v26 = v32;
      *v32 = v24;
      v26[1] = v25;
      *((_BYTE *)v26 + 16) = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

void TreeRegressorModel.applied(to:eventHandler:)(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v25 = *(_QWORD *)(v5 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v24 = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  v26 = *(_QWORD *)(v8 - 8);
  v27 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v3[2])
  {
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
  if (!v2)
  {
    v23 = v5;
    type metadata accessor for TreeRegressorModel();
    v12 = BaseTreeRegressorModel.applied(features:eventHandler:)();
    DataFrame.init()();
    v13 = v3[1];
    v22[3] = *v3;
    v14 = *(_QWORD *)(v12 + 16);
    if (v14)
    {
      v22[2] = a1;
      v28 = MEMORY[0x24BEE4AF8];
      v22[1] = v13;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      v15 = 0;
      v16 = v28;
      v17 = *(_QWORD *)(v12 + 16);
      while (v17 != v15)
      {
        v18 = *(float *)(v12 + 4 * v15 + 32);
        v28 = v16;
        v20 = *(_QWORD *)(v16 + 16);
        v19 = *(_QWORD *)(v16 + 24);
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          v16 = v28;
        }
        ++v15;
        *(_QWORD *)(v16 + 16) = v20 + 1;
        *(double *)(v16 + 8 * v20 + 32) = v18;
        if (v14 == v15)
        {
          swift_release();
          goto LABEL_11;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
    swift_bridgeObjectRetain();
    swift_release();
    v16 = MEMORY[0x24BEE4AF8];
LABEL_11:
    v28 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type [Double] and conformance [A], &demangling cache variable for type metadata for [Double], MEMORY[0x24BEE12C8]);
    v21 = v24;
    Column.init<A>(name:contents:)();
    DataFrame.append<A>(column:)();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v21, v23);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  }
}

uint64_t protocol witness for Transformer.applied(to:eventHandler:) in conformance TreeRegressorModel(uint64_t a1)
{
  uint64_t v1;

  TreeRegressorModel.applied(to:eventHandler:)(a1);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v1 + 8));
}

unint64_t lazy protocol witness table accessor for type TreeRegressorModel and conformance TreeRegressorModel()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TreeRegressorModel and conformance TreeRegressorModel;
  if (!lazy protocol witness table cache variable for type TreeRegressorModel and conformance TreeRegressorModel)
  {
    v1 = type metadata accessor for TreeRegressorModel();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for TreeRegressorModel, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TreeRegressorModel and conformance TreeRegressorModel);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_23()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized Array.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return specialized Array.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    OUTLINED_FUNCTION_273();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    v10 = a5(a1, a2, a3, a4);
    goto LABEL_9;
  }
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    OUTLINED_FUNCTION_273();
    v10 = MEMORY[0x24BEE4AF8];
  }
LABEL_9:
  OUTLINED_FUNCTION_273();
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D4LL10parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    __swift_instantiateConcreteTypeFromMangledName(a3);
    OUTLINED_FUNCTION_251();
    v8 = a1 + v7;
    v10 = *(_QWORD *)(v9 + 72);
    do
    {
      swift_getKeyPath();
      swift_getAtKeyPath();
      swift_release();
      v4 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v4 = v16;
      }
      v11 = *(_QWORD *)(v4 + 16);
      if (v11 >= *(_QWORD *)(v4 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v4 = v16;
      }
      *(_QWORD *)(v4 + 16) = v11 + 1;
      v12 = v4 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v14;
      *(_QWORD *)(v12 + 40) = v15;
      v8 += v10;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData12FilledColumnVyAH0I0VySSGGAJyALySaySfGGGG_18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGs5NeverOTg5012_sSSSaySfG18j14MLComponents16lm3Vy6n4ML13pq2Vyu20GSSGIgggr_SS_AAtAIs5r68OIegnrzr_TR03_s8a80ML38SoundClassifierTrainingSessionDelegateC13loadg44FrameySay0A12MLComponents16cd4Vy04e4B013gh36zu7GSSGG07F37I00iJ0VKFZALSS_SayZ7GtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char **, _QWORD);
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  void (*v37)(char **, _QWORD);
  char **v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char **, _QWORD);
  char **v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char **, _QWORD);
  char **v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t result;
  uint64_t v66;
  char *v67;
  __int128 v68;
  _QWORD *v69;
  char **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;

  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  MEMORY[0x24BDAC7A8](v75);
  v74 = (char *)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  v72 = *(_QWORD *)(v3 - 8);
  v73 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v85 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v67 = (char *)&v66 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[Float]>>);
  v80 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v79 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  v82 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<FilledColumn<Column<String>>, FilledColumn<Column<[Float]>>>);
  MEMORY[0x24BDAC7A8](v81);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<FilledColumn<Column<String>>, FilledColumn<Column<[Float]>>>.Iterator);
  MEMORY[0x24BDAC7A8](v84);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>);
  v78 = a1;
  v16 = dispatch thunk of Sequence.underestimatedCount.getter();
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<[Float]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[Float]>>);
  *(_QWORD *)&v83 = v17;
  v18 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (v18 >= v16)
    v19 = v16;
  else
    v19 = v18;
  v88 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  outlined init with copy of URL?(v78, (uint64_t)v13, &demangling cache variable for type metadata for Zip2Sequence<FilledColumn<Column<String>>, FilledColumn<Column<[Float]>>>);
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v11, v13, v9);
  v77 = v11;
  v71 = v9;
  dispatch thunk of Sequence.makeIterator()();
  v20 = &v13[*(int *)(v81 + 52)];
  v21 = (uint64_t)v15;
  (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v79, v20, v7);
  v22 = v84;
  v78 = v21 + *(int *)(v84 + 52);
  dispatch thunk of Sequence.makeIterator()();
  v81 = *(int *)(v22 + 56);
  *(_BYTE *)(v21 + v81) = 0;
  if (v19 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v23 = v71;
    v76 = v21;
    if (v19)
    {
      v24 = (_QWORD *)(v21
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<String>>>)
                              + 36));
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[Float]>>>);
      v70 = (char **)(v78 + *(int *)(v25 + 36));
      v68 = xmmword_21AFE7DA0;
      v69 = v24;
      do
      {
        if ((*(_BYTE *)(v21 + v81) & 1) != 0)
        {
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        v26 = (char *)*v24;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>);
        dispatch thunk of Collection.endIndex.getter();
        if (v26 == v86)
          goto LABEL_29;
        v84 = v19;
        v27 = (void (*)(char **, _QWORD))dispatch thunk of Collection.subscript.read();
        v28 = v23;
        v30 = (char *)v29[1];
        *(_QWORD *)&v83 = *v29;
        swift_bridgeObjectRetain();
        v27(&v86, 0);
        v31 = v7;
        v32 = v82;
        v33 = v77;
        (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v77, v21, v28);
        dispatch thunk of Collection.formIndex(after:)();
        v34 = *(void (**)(char *, uint64_t))(v32 + 8);
        v7 = v31;
        v34(v33, v28);
        v35 = *v70;
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<[Float]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[Float]>>);
        v36 = v78;
        dispatch thunk of Collection.endIndex.getter();
        if (v35 == v86)
          goto LABEL_31;
        v37 = (void (*)(char **, _QWORD))dispatch thunk of Collection.subscript.read();
        v39 = *v38;
        swift_bridgeObjectRetain();
        v37(&v86, 0);
        v41 = v79;
        v40 = v80;
        (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, v36, v31);
        dispatch thunk of Collection.formIndex(after:)();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v31);
        v86 = v39;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        v42 = swift_allocObject();
        *(_OWORD *)(v42 + 16) = v68;
        *(_QWORD *)(v42 + 32) = *((_QWORD *)v39 + 2);
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
        MLShapedArray.init<A>(scalars:shape:)();
        v86 = (char *)v83;
        v87 = v30;
        AnnotatedFeature.init(feature:annotation:)();
        swift_bridgeObjectRelease();
        v43 = v88;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v45 = v84;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v43 = v88;
        }
        v21 = v76;
        v46 = *(_QWORD *)(v43 + 16);
        if (v46 >= *(_QWORD *)(v43 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v43 = v88;
        }
        *(_QWORD *)(v43 + 16) = v46 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v72 + 32))(v43+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(_QWORD *)(v72 + 72) * v46, v85, v73);
        v19 = v45 - 1;
        v23 = v71;
        v24 = v69;
      }
      while (v19);
      if ((*(_BYTE *)(v21 + v81) & 1) != 0)
        goto LABEL_27;
    }
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<String>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<String>>);
    v83 = xmmword_21AFE7DA0;
    v84 = v47;
    while (1)
    {
      v48 = *(char **)(v21
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<String>>>)
                              + 36));
      dispatch thunk of Collection.endIndex.getter();
      if (v48 == v86)
        break;
      v49 = (void (*)(char **, _QWORD))dispatch thunk of Collection.subscript.read();
      v51 = v50[1];
      v85 = *v50;
      swift_bridgeObjectRetain();
      v49(&v86, 0);
      v52 = v82;
      v53 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v77, v21, v23);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v23);
      v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<FilledColumn<Column<[Float]>>>);
      v55 = v78;
      v56 = *(char **)(v78 + *(int *)(v54 + 36));
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FilledColumn<Column<[Float]>> and conformance FilledColumn<A>, &demangling cache variable for type metadata for FilledColumn<Column<[Float]>>);
      dispatch thunk of Collection.endIndex.getter();
      if (v56 == v86)
      {
        swift_bridgeObjectRelease();
        v21 = v76;
        break;
      }
      v57 = (void (*)(char **, _QWORD))dispatch thunk of Collection.subscript.read();
      v59 = *v58;
      swift_bridgeObjectRetain();
      v57(&v86, 0);
      v60 = v79;
      v61 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, v55, v7);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v60, v7);
      v86 = v59;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = v83;
      *(_QWORD *)(v62 + 32) = *((_QWORD *)v59 + 2);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
      MLShapedArray.init<A>(scalars:shape:)();
      v86 = v85;
      v87 = v51;
      AnnotatedFeature.init(feature:annotation:)();
      swift_bridgeObjectRelease();
      v63 = v88;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v63 = v88;
      }
      v21 = v76;
      v64 = *(_QWORD *)(v63 + 16);
      if (v64 >= *(_QWORD *)(v63 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v63 = v88;
      }
      *(_QWORD *)(v63 + 16) = v64 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v72 + 32))(v63+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(_QWORD *)(v72 + 72) * v64, v67, v73);
      if ((*(_BYTE *)(v21 + v81) & 1) != 0)
        goto LABEL_27;
    }
    *(_BYTE *)(v21 + v81) = 1;
LABEL_27:
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v21, &demangling cache variable for type metadata for Zip2Sequence<FilledColumn<Column<String>>, FilledColumn<Column<[Float]>>>.Iterator);
    return v88;
  }
  return result;
}

void key path getter for AnnotatedFeature.annotation : AnnotatedFeature<MLShapedArray<Float>, String>(_QWORD *a1@<X8>)
{
  key path getter for AnnotatedFeature.annotation : AnnotatedFeature<MLShapedArray<Float>, String>(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>, a1);
}

void key path setter for AnnotatedFeature.annotation : AnnotatedFeature<MLShapedArray<Float>, String>()
{
  key path setter for AnnotatedFeature.annotation : AnnotatedFeature<MLShapedArray<Float>, String>();
}

{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_206_0();
  AnnotatedFeature.annotation.setter();
  OUTLINED_FUNCTION_23_7();
}

uint64_t SoundClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v1 + 16) = 0xD000000000000010;
  *(_QWORD *)(v1 + 24) = 0x800000021AFF3E80;
  v3 = OUTLINED_FUNCTION_89_2();
  OUTLINED_FUNCTION_42_7(v3);
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFiles) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFiles) = v4;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFeatures) = v4;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFeatures) = v4;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_labels) = MEMORY[0x24BEE4B08];
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_featureExtractionOnly) = 0;
  v5 = OUTLINED_FUNCTION_131_1();
  OUTLINED_FUNCTION_42_7(v5);
  v6 = OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_42_7(v6);
  v7 = OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_42_7(v7);
  v8 = v1 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingMetrics;
  type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_159_0(v8, 1);
  OUTLINED_FUNCTION_159_0(v1 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationMetrics, 1);
  v9 = type metadata accessor for TrainingTablePrinter(0);
  OUTLINED_FUNCTION_42_7(v9);
  outlined init with take of MLHandPoseClassifier.ModelParameters(a1, v1 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

_QWORD *SoundClassifierTrainingSessionDelegate.init(trainingData:featureExtractionOnly:modelParameters:sessionParameters:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = a4;
  HIDWORD(v42) = a2;
  v43 = *v4;
  v44 = a1;
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_53_0();
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_161();
  v4[2] = 0xD000000000000010;
  v4[3] = 0x800000021AFF3E80;
  v12 = (uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingParameters;
  v13 = OUTLINED_FUNCTION_89_2();
  __swift_storeEnumTagSinglePayload(v12, 1, 1, v13);
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFiles) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFiles) = v14;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFeatures) = v14;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFeatures) = v14;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_labels) = MEMORY[0x24BEE4B08];
  *((_BYTE *)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_featureExtractionOnly) = 0;
  v15 = (uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_classifier;
  v16 = OUTLINED_FUNCTION_131_1();
  OUTLINED_FUNCTION_37_0(v15, v17, v18, v16);
  v19 = (uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_model;
  v20 = OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_37_0(v19, v21, v22, v20);
  OUTLINED_FUNCTION_116_2((uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_parameters);
  v23 = (uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingMetrics;
  type metadata accessor for MLClassifierMetrics(0);
  OUTLINED_FUNCTION_116_2(v23);
  OUTLINED_FUNCTION_116_2((uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationMetrics);
  v24 = (char *)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_tablePrinter;
  v25 = type metadata accessor for TrainingTablePrinter(0);
  v26 = (uint64_t)v24;
  v27 = v44;
  OUTLINED_FUNCTION_37_0(v26, v28, v29, v25);
  outlined init with copy of MLTrainingSessionParameters(v27, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
  v30 = OUTLINED_FUNCTION_189_0();
  outlined init with copy of MLTrainingSessionParameters(v30, v31, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  v32 = v45;
  MLSoundClassifier.PersistentParameters.init(trainingData:modelParameters:)((uint64_t)v10, v5, v6);
  if (v32)
  {
    outlined destroy of MLHandActionClassifier.DataSource(v46, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_188_0(v34, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    OUTLINED_FUNCTION_248(v35, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
    swift_bridgeObjectRelease();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_141_1();
    OUTLINED_FUNCTION_141_1();
    OUTLINED_FUNCTION_141_1();
    OUTLINED_FUNCTION_141_1();
    OUTLINED_FUNCTION_141_1();
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_classifier, &demangling cache variable for type metadata for MLSoundClassifier.Classifier?);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLSoundClassifier.Model?);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_parameters, &demangling cache variable for type metadata for MLSoundClassifier.ModelParameters?);
    OUTLINED_FUNCTION_218_0((uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingMetrics);
    OUTLINED_FUNCTION_218_0((uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationMetrics);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_tablePrinter, &demangling cache variable for type metadata for TrainingTablePrinter?);
    swift_deallocPartialClassInstance();
  }
  else
  {
    OUTLINED_FUNCTION_188_0(v33, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    OUTLINED_FUNCTION_248(v36, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.DataSource);
    OUTLINED_FUNCTION_173_0();
    __swift_storeEnumTagSinglePayload(v37, v38, v39, v13);
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_175_0(v6, v40, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
    swift_endAccess();
    outlined init with take of MLHandPoseClassifier.ModelParameters(v46, (uint64_t)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    *((_BYTE *)v4 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_featureExtractionOnly) = BYTE4(v42) & 1;
  }
  return v4;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SoundClassifierTrainingSessionDelegate.setUp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  ValueMetadata *v65;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_38_4(v4, v56);
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_70_5(v6, v56);
  v7 = (int *)OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_151_1();
  v10 = MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_213_0(v10, v11, v12, v13, v14, v15, v16, v17, v56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Classifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_208();
  v60 = v19;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v56 - v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_55_0();
  v24 = (int *)OUTLINED_FUNCTION_89_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = v0;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_281();
  outlined init with copy of URL?(v28, v29, v30);
  OUTLINED_FUNCTION_128(v2, 1, (uint64_t)v24);
  if (v31)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v2, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
    __break(1u);
  }
  else
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters(v2, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
    v32 = v61;
    SoundClassifierTrainingSessionDelegate.populateFiles(parameters:)((uint64_t)v27);
    if (v32)
    {
      OUTLINED_FUNCTION_188_0(v33, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
LABEL_6:
      OUTLINED_FUNCTION_117_0();
      return;
    }
    v56 = 0;
    v61 = *(_QWORD *)(v62 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_labels);
    v34 = v59;
    outlined init with copy of MLTrainingSessionParameters((uint64_t)&v27[v24[5]], v59, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    v35 = v24[9];
    v36 = *(_QWORD *)&v27[v24[8]];
    v37 = *(_QWORD *)&v27[v24[6]];
    v38 = *(_QWORD *)&v27[v35];
    v39 = v27[v35 + 8];
    v40 = (_OWORD *)(v1 + v7[7]);
    *v40 = 0u;
    v40[1] = 0u;
    OUTLINED_FUNCTION_104_2(v1 + v7[8]);
    *(_QWORD *)(v1 + v41) = v42;
    outlined init with copy of MLTrainingSessionParameters(v34, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    *(_QWORD *)(v1 + v7[5]) = v36;
    *(_QWORD *)(v1 + v7[6]) = v37;
    v65 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
    v63 = v38;
    v64 = v39;
    OUTLINED_FUNCTION_52_1();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)&v63, (uint64_t)v40, &demangling cache variable for type metadata for Any?);
    outlined destroy of MLHandActionClassifier.DataSource(v34, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    outlined init with take of MLHandPoseClassifier.ModelParameters(v1, v58, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    v43 = OUTLINED_FUNCTION_261();
    MLSoundClassifier.Classifier.init(labels:parameters:)(v43, v44, v45);
    v46 = OUTLINED_FUNCTION_131_1();
    OUTLINED_FUNCTION_174_0((uint64_t)v22);
    v47 = v62 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_classifier;
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_243((uint64_t)v22);
    swift_endAccess();
    v48 = v47;
    v49 = v60;
    OUTLINED_FUNCTION_244(v48);
    OUTLINED_FUNCTION_128(v49, 1, v46);
    if (!v31)
    {
      v50 = v57;
      MLSoundClassifier.Classifier.makeTransformer()(v57);
      OUTLINED_FUNCTION_188_0(v51, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
      OUTLINED_FUNCTION_198_0(v52, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
      v53 = OUTLINED_FUNCTION_105_1();
      OUTLINED_FUNCTION_63_7(v50, 0, v54, v53);
      OUTLINED_FUNCTION_44_7();
      OUTLINED_FUNCTION_175_0(v50, v55, &demangling cache variable for type metadata for MLSoundClassifier.Model?);
      swift_endAccess();
      goto LABEL_6;
    }
  }
  __break(1u);
}

void SoundClassifierTrainingSessionDelegate.populateFiles(parameters:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char *v25;
  char *v26;
  void *rawValue;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::OpaquePointer v57;
  uint64_t v58;
  char v59[8];
  char v60[8];
  uint64_t v61;
  char v62;
  ValueMetadata *v63;

  v2 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v56 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v56 - v9;
  v11 = (int *)type metadata accessor for MLSoundClassifier.ModelParameters();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v56 - v15;
  v17 = (void *)MLSoundClassifier.DataSource.annotatedFeatures()();
  if (!v18)
  {
    if (v17)
    {
      v57._rawValue = v17;
      v19 = (int *)type metadata accessor for MLSoundClassifier.PersistentParameters();
      outlined init with copy of MLTrainingSessionParameters(a1 + v19[5], (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      v20 = *(_QWORD *)(a1 + v19[8]);
      v21 = *(_QWORD *)(a1 + v19[6]);
      v22 = a1 + v19[9];
      v23 = *(_QWORD *)v22;
      v24 = *(_BYTE *)(v22 + 8);
      v25 = &v16[v11[7]];
      *(_OWORD *)v25 = 0u;
      *((_OWORD *)v25 + 1) = 0u;
      v26 = &v16[v11[8]];
      *(_QWORD *)v26 = 0;
      v26[8] = 1;
      *(_QWORD *)&v16[v11[9]] = 32;
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v10, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      *(_QWORD *)&v16[v11[5]] = v20;
      *(_QWORD *)&v16[v11[6]] = v21;
      v63 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
      v61 = v23;
      v62 = v24;
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)&v61, (uint64_t)v25, &demangling cache variable for type metadata for Any?);
      outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v16, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
      rawValue = v57._rawValue;
      *(_OWORD *)&v28 = (unsigned __int128)MLSoundClassifier.ModelParameters.ValidationData.splitFeatures(trainingData:)(v57);
      if (v30)
      {
        outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      }
      else
      {
        v44 = v28;
        v45 = v29;
        outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
        v46 = v58;
        v47 = (_QWORD *)(v58 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFeatures);
        swift_beginAccess();
        *v47 = v44;
        swift_bridgeObjectRelease();
        if (v45)
          v48 = v45;
        else
          v48 = MEMORY[0x24BEE4AF8];
        v49 = (_QWORD *)(v46 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFeatures);
        swift_beginAccess();
        *v49 = v48;
        swift_bridgeObjectRelease();
        MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm((uint64_t)rawValue, (uint64_t)v59, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v46 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_labels) = specialized Set.init<A>(_:)(MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm);
      }
    }
    else
    {
      MLSoundClassifier.DataSource.labeledSounds()();
      v56 = specialized Sequence.flatMap<A>(_:)(v31);
      v57._rawValue = 0;
      swift_bridgeObjectRelease();
      v32 = (int *)type metadata accessor for MLSoundClassifier.PersistentParameters();
      outlined init with copy of MLTrainingSessionParameters(a1 + v32[5], (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      v33 = *(_QWORD *)(a1 + v32[8]);
      v34 = *(_QWORD *)(a1 + v32[6]);
      v35 = a1 + v32[9];
      v36 = *(_QWORD *)v35;
      v37 = *(_BYTE *)(v35 + 8);
      v38 = &v14[v11[7]];
      *(_OWORD *)v38 = 0u;
      *((_OWORD *)v38 + 1) = 0u;
      v39 = &v14[v11[8]];
      *(_QWORD *)v39 = 0;
      v39[8] = 1;
      *(_QWORD *)&v14[v11[9]] = 32;
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      *(_QWORD *)&v14[v11[5]] = v33;
      v40 = v56;
      *(_QWORD *)&v14[v11[6]] = v34;
      v63 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
      v61 = v36;
      v62 = v37;
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)&v61, (uint64_t)v38, &demangling cache variable for type metadata for Any?);
      outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v14, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
      *(_OWORD *)&v41 = (unsigned __int128)MLSoundClassifier.ModelParameters.ValidationData.splitFiles(trainingData:)((Swift::OpaquePointer)v40);
      if (v43)
      {
        outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      }
      else
      {
        v51 = v41;
        v52 = v42;
        outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
        if (v52)
          v53 = v52;
        else
          v53 = MEMORY[0x24BEE4AF8];
        v54 = v58;
        specialized SoundClassifierTrainingSessionDelegate.populateFiles<A, B>(training:validation:parameters:)(v51, v53, a1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v55 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm(v40, (uint64_t)v60, &demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v54 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_labels) = specialized Set.init<A>(_:)(v55);
      }
    }
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SoundClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD, _QWORD);
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char v61;
  _QWORD *v62;
  void (*v63)(_QWORD, _QWORD);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  void (*v78)(_QWORD, _QWORD);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  OUTLINED_FUNCTION_8_1();
  v86 = v3;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Classifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_14_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v84 = v10;
  v83 = OUTLINED_FUNCTION_78();
  v80 = *(_QWORD *)(v83 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_208();
  v79 = v12;
  OUTLINED_FUNCTION_29_3();
  v14 = MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_213_0(v14, v15, v16, v17, v18, v19, v20, v21, v77);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = OUTLINED_FUNCTION_89_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_70_5(v27, v77);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v28);
  v82 = (uint64_t *)((char *)&v77 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_212_0();
  v31 = type metadata accessor for MLCheckpoint();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_65_5();
  v78 = (void (*)(_QWORD, _QWORD))v34;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v77 - v36;
  v81 = v7;
  v38 = v7;
  v40 = v39;
  specialized BidirectionalCollection.last.getter(v38, v5);
  OUTLINED_FUNCTION_128(v5, 1, v40);
  if (!v44)
  {
    v77 = v4;
    v85 = (unsigned __int8 *)v37;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v5, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v43 = v2 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_44_7();
    outlined init with copy of URL?(v43, (uint64_t)v24, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_128((uint64_t)v24, 1, v25);
    if (v44)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v24, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
      __break(1u);
    }
    else
    {
      v45 = v88;
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v24, v88, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
      v46 = v86;
      SoundClassifierTrainingSessionDelegate.populateFiles(parameters:)(v45);
      v48 = v87;
      if (v46)
      {
        OUTLINED_FUNCTION_138_1(v47, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
        v49 = (void (*)(_QWORD, _QWORD))v85;
LABEL_17:
        outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
        goto LABEL_18;
      }
      v50 = v2;
      v51 = v85;
      v52 = v85[*(int *)(v40 + 20)];
      if (v52 != 2)
      {
        if (v52 == 1)
        {
          OUTLINED_FUNCTION_235((void (*)(_QWORD, _QWORD))v85);
        }
        else
        {
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          v58 = OUTLINED_FUNCTION_49_0();
          *v59 = 0xD00000000000003ELL;
          v59[1] = 0x800000021AFF3DB0;
          v53 = OUTLINED_FUNCTION_5_8(v58, (uint64_t)v59);
        }
        OUTLINED_FUNCTION_138_1(v53, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
        v49 = (void (*)(_QWORD, _QWORD))v51;
        goto LABEL_17;
      }
      v89 = v81;
      if (*(_QWORD *)(v81 + 16))
      {
        v86 = v2;
        OUTLINED_FUNCTION_251();
        outlined init with copy of MLTrainingSessionParameters(v56 + v55 + *(_QWORD *)(v32 + 72) * (v54 - 1), v1, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
        OUTLINED_FUNCTION_91_0();
        __asm { BR              X9 }
      }
      v60 = v84;
      MEMORY[0x24BDAC7A8](v47);
      *(&v77 - 2) = (uint64_t)&v89;
      v62 = v82;
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5((_QWORD *(*)(_QWORD *__return_ptr, uint64_t *))partial apply for specialized closure #1 in BidirectionalCollection.last(where:), 0, v61 & 1, v82);
      OUTLINED_FUNCTION_128((uint64_t)v62, 1, v40);
      if (v44)
      {
        outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v62, &demangling cache variable for type metadata for MLCheckpoint?);
      }
      else
      {
        v63 = v78;
        outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v62, (uint64_t)v78, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
        OUTLINED_FUNCTION_235(v63);
        outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v63, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      }
      v64 = v83;
      v65 = v79;
      OUTLINED_FUNCTION_215_0();
      URL.appendingPathComponent(_:)();
      URL.appendingPathExtension(_:)();
      v66 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
      v66(v65, v64);
      v67 = v50 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_classifier;
      OUTLINED_FUNCTION_44_7();
      v68 = v77;
      outlined init with copy of URL?(v67, v77, &demangling cache variable for type metadata for MLSoundClassifier.Classifier?);
      v69 = OUTLINED_FUNCTION_131_1();
      OUTLINED_FUNCTION_128(v68, 1, v69);
      if (!v44)
      {
        lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLSoundClassifier.Classifier and conformance MLSoundClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.Classifier);
        UpdatableSupervisedEstimator.readWithOptimizer(from:)();
        v70 = ((uint64_t (*)(uint64_t, uint64_t))v66)(v48, v64);
        OUTLINED_FUNCTION_138_1(v70, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
        outlined destroy of MLHandActionClassifier.DataSource((uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
        OUTLINED_FUNCTION_198_0(v71, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
        v72 = OUTLINED_FUNCTION_105_1();
        OUTLINED_FUNCTION_63_7(v60, 0, v73, v72);
        OUTLINED_FUNCTION_44_7();
        v74 = OUTLINED_FUNCTION_154_0();
        outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v74, v75, v76);
        swift_endAccess();
        goto LABEL_18;
      }
    }
    __break(1u);
    JUMPOUT(0x21AE708ECLL);
  }
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v5, &demangling cache variable for type metadata for MLCheckpoint?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v41 = OUTLINED_FUNCTION_49_0();
  *v42 = 0xD00000000000001DLL;
  v42[1] = 0x800000021AFF3D90;
  OUTLINED_FUNCTION_5_8(v41, (uint64_t)v42);
LABEL_18:
  OUTLINED_FUNCTION_7();
}

void SoundClassifierTrainingSessionDelegate.resumeFeatureExtraction(from:)(void (*a1)(_QWORD, _QWORD))
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD, _QWORD);
  uint64_t v64;
  void (*v65)(void);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  uint64_t v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(void);
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(void);
  void (*v150)(_QWORD, _QWORD);
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  ValueMetadata *v161;

  v150 = a1;
  v143 = type metadata accessor for CSVType();
  v142 = *(_QWORD *)(v143 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v6);
  type metadata accessor for CSVReadingOptions();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_208();
  v137 = v8;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v12);
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v14);
  v128 = type metadata accessor for MLSoundClassifier.ModelParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_208();
  v129 = v16;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Classifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_208();
  v133 = v20;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_208();
  v136 = v24;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_65_5();
  v134 = v26;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_65_5();
  v139 = v28;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v30);
  v154 = type metadata accessor for DataFrame();
  v157 = *(_QWORD *)(v154 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_208();
  v141 = v32;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_65_5();
  v125 = v34;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v35);
  v149 = (void (*)(void))((char *)&v120 - v36);
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_211();
  v152 = v38;
  v39 = OUTLINED_FUNCTION_78();
  v148 = *(_QWORD *)(v39 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_208();
  v135 = v41;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v42);
  v156 = (void (*)(uint64_t))((char *)&v120 - v43);
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_65_5();
  v138 = v45;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_65_5();
  v147 = v47;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_65_5();
  v158 = v49;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v50);
  OUTLINED_FUNCTION_12_10();
  MEMORY[0x24BDAC7A8](v51);
  v53 = (char *)&v120 - v52;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v54);
  v56 = (char *)&v120 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = OUTLINED_FUNCTION_89_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v58);
  OUTLINED_FUNCTION_14_5();
  v140 = v1;
  v59 = v1 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v59, (uint64_t)v56, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  v127 = (int *)v57;
  OUTLINED_FUNCTION_128((uint64_t)v56, 1, v57);
  if (v60)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v56, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
    __break(1u);
  }
  else
  {
    v61 = 0xEA00000000006C65;
    v153 = v4;
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v56, v4, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
    OUTLINED_FUNCTION_180_0();
    OUTLINED_FUNCTION_152_0();
    OUTLINED_FUNCTION_163_0();
    v62 = v148;
    v63 = *(void (**)(_QWORD, _QWORD))(v148 + 8);
    OUTLINED_FUNCTION_221_0(v3);
    OUTLINED_FUNCTION_250();
    OUTLINED_FUNCTION_152_0();
    v64 = v158;
    OUTLINED_FUNCTION_163_0();
    v150 = v63;
    v63(v3, v39);
    v65 = *(void (**)(void))(v62 + 16);
    OUTLINED_FUNCTION_281();
    v65();
    OUTLINED_FUNCTION_127_1();
    v151 = v2;
    v155 = v39;
    v146 = v53;
    if (v2)
    {
      OUTLINED_FUNCTION_281();
      v149 = v65;
      v65();
      v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CSVType)>);
      v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CSVType));
      v68 = *(_QWORD *)(v67 - 8);
      v69 = *(_QWORD *)(v68 + 72);
      v70 = *(unsigned __int8 *)(v68 + 80);
      v71 = (v70 + 32) & ~v70;
      v147 = v66;
      v138 = v71 + 2 * v69;
      v124 = v70 | 7;
      v72 = swift_allocObject();
      v123 = xmmword_21AFE7F70;
      *(_OWORD *)(v72 + 16) = xmmword_21AFE7F70;
      v139 = v71;
      v73 = (_QWORD *)(v72 + v71);
      v74 = v72 + v71 + *(int *)(v67 + 48);
      *v73 = 0x7365727574616566;
      v73[1] = 0xE800000000000000;
      LODWORD(v142) = *MEMORY[0x24BDF5FB0];
      OUTLINED_FUNCTION_124_1(v74, v142);
      v148 = v69;
      v75 = (_QWORD *)((char *)v73 + v69);
      v76 = (uint64_t)v73 + v69 + *(int *)(v67 + 48);
      *v75 = 0x62614C7373616C63;
      v75[1] = 0xEA00000000006C65;
      v122 = *MEMORY[0x24BDF5FC0];
      OUTLINED_FUNCTION_124_1(v76, v122);
      Dictionary.init(dictionaryLiteral:)();
      default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
      specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
      specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
      v65 = v144;
      v121 = *MEMORY[0x24BDF5FB8];
      OUTLINED_FUNCTION_124_1((uint64_t)v144, v121);
      OUTLINED_FUNCTION_145_1();
      v77 = v141;
      OUTLINED_FUNCTION_242();
      DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)();
      OUTLINED_FUNCTION_219_0(v152, v77, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v157 + 32));
      v39 = v135;
      ((void (*)(uint64_t, uint64_t, uint64_t))v149)(v135, v158, v155);
      v81 = swift_allocObject();
      *(_OWORD *)(v81 + 16) = v123;
      v82 = (_QWORD *)(v81 + v139);
      v83 = v81 + v139 + *(int *)(v67 + 48);
      *v82 = 0x7365727574616566;
      v82[1] = 0xE800000000000000;
      OUTLINED_FUNCTION_124_1(v83, v142);
      v84 = (_QWORD *)((char *)v82 + v148);
      v85 = (uint64_t)v82 + v148 + *(int *)(v67 + 48);
      *v84 = 0x62614C7373616C63;
      v84[1] = 0xEA00000000006C65;
      OUTLINED_FUNCTION_124_1(v85, v122);
      Dictionary.init(dictionaryLiteral:)();
      default argument 1 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
      specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 2 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
      v61 = v86;
      specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of default argument 3 of CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:));
      OUTLINED_FUNCTION_124_1((uint64_t)v65, v121);
      OUTLINED_FUNCTION_145_1();
      v87 = v136;
      OUTLINED_FUNCTION_242();
      DataFrame.init(contentsOfCSVFile:columns:rows:types:options:)();
      OUTLINED_FUNCTION_214_0();

      OUTLINED_FUNCTION_186_0(v87, 0);
      v89 = v87;
    }
    else
    {
      v78 = OUTLINED_FUNCTION_261();
      OUTLINED_FUNCTION_219_0(v78, v79, v80);
      ((void (*)(uint64_t, uint64_t, uint64_t))v65)(v138, v64, v39);
      v89 = v139;
      OUTLINED_FUNCTION_127_1();
      OUTLINED_FUNCTION_214_0();
      OUTLINED_FUNCTION_186_0(v89, v88);
    }
    outlined init with take of DataFrame?(v89, (uint64_t)v65);
    static SoundClassifierTrainingSessionDelegate.loadDataFrame(_:)();
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_209_0();
    v90 = v134;
    outlined init with copy of URL?((uint64_t)v65, v134, &demangling cache variable for type metadata for DataFrame?);
    OUTLINED_FUNCTION_128(v90, 1, v39);
    if (v60)
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v90, &demangling cache variable for type metadata for DataFrame?);
    }
    else
    {
      v91 = OUTLINED_FUNCTION_261();
      v156(v91);
      static SoundClassifierTrainingSessionDelegate.loadDataFrame(_:)();
      OUTLINED_FUNCTION_143_0();
      OUTLINED_FUNCTION_44_7();
      OUTLINED_FUNCTION_209_0();
    }
    v92 = v153;
    v156 = *(void (**)(uint64_t))(v61
                                          + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_labels);
    v93 = v127;
    v94 = v132;
    outlined init with copy of MLTrainingSessionParameters(v153 + v127[5], v132, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    v95 = *(_QWORD *)(v92 + v93[8]);
    v96 = *(_QWORD *)(v92 + v93[6]);
    v97 = v92 + v93[9];
    v98 = *(_QWORD *)v97;
    LODWORD(v154) = *(unsigned __int8 *)(v97 + 8);
    v99 = (int *)v128;
    v100 = v129;
    v101 = (_OWORD *)(v129 + *(int *)(v128 + 28));
    *v101 = 0u;
    v101[1] = 0u;
    OUTLINED_FUNCTION_104_2(v100 + v99[8]);
    *(_QWORD *)(v100 + v102) = v103;
    outlined init with copy of MLTrainingSessionParameters(v94, v100, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    *(_QWORD *)(v100 + v99[5]) = v95;
    *(_QWORD *)(v100 + v99[6]) = v96;
    v161 = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
    v159 = v98;
    v160 = v154;
    swift_bridgeObjectRetain();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata((uint64_t)&v159, (uint64_t)v101, &demangling cache variable for type metadata for Any?);
    outlined destroy of MLHandActionClassifier.DataSource(v94, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    outlined init with take of MLHandPoseClassifier.ModelParameters(v100, v130, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    v104 = v131;
    v105 = OUTLINED_FUNCTION_3_9();
    MLSoundClassifier.Classifier.init(labels:parameters:)(v105, v106, v107);
    v108 = OUTLINED_FUNCTION_131_1();
    OUTLINED_FUNCTION_174_0(v104);
    v109 = v61 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_classifier;
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_243(v104);
    swift_endAccess();
    v110 = v109;
    v111 = v133;
    OUTLINED_FUNCTION_244(v110);
    OUTLINED_FUNCTION_128(v111, 1, v108);
    if (!v60)
    {
      v112 = v126;
      MLSoundClassifier.Classifier.makeTransformer()(v126);
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v145, &demangling cache variable for type metadata for DataFrame?);
      (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v152, v39);
      v113 = OUTLINED_FUNCTION_210_0();
      v115 = *(void (**)(uint64_t))(v114 - 256);
      v115(v113);
      ((void (*)(char *, uint64_t))v115)(v146, v108);
      outlined destroy of MLHandActionClassifier.DataSource(v153, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
      OUTLINED_FUNCTION_198_0(v116, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
      v117 = OUTLINED_FUNCTION_105_1();
      OUTLINED_FUNCTION_63_7(v112, 0, v118, v117);
      OUTLINED_FUNCTION_44_7();
      OUTLINED_FUNCTION_175_0(v112, v119, &demangling cache variable for type metadata for MLSoundClassifier.Model?);
      swift_endAccess();
      OUTLINED_FUNCTION_117_0();
      return;
    }
  }
  __break(1u);
}

uint64_t static SoundClassifierTrainingSessionDelegate.loadDataFrame(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGs5NeverOTg5012_sSSSaySfG18j14MLComponents16lm3Vy6n4ML13pq2Vyu20GSSGIgggr_SS_AAtAIs5r68OIegnrzr_TR03_s8a80ML38SoundClassifierTrainingSessionDelegateC13loadg44FrameySay0A12MLComponents16cd4Vy04e4B013gh36zu7GSSGG07F37I00iJ0VKFZALSS_SayZ7GtXEfU_Tf3nnnpf_nTf1cn_n;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  OUTLINED_FUNCTION_8_1();
  v48 = v4;
  v49 = v5;
  v40 = v0;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<FilledColumn<Column<String>>, FilledColumn<Column<[Float]>>>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_36(v7, v32);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  v33 = *(_QWORD *)(v35 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_161();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<[Float]>>);
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_116(v11, v32);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_195_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_14_5();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  v15 = *(_QWORD *)(v14 - 8);
  v44 = v14;
  v45 = v15;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Data>);
  v41 = *(_QWORD *)(v19 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_103_2();
  DataFrame.subscript.getter();
  OUTLINED_FUNCTION_80_4();
  DataFrame.subscript.getter();
  v46 = 0;
  v47 = 0xE000000000000000;
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
  v42 = v18;
  OptionalColumnProtocol.filled(with:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v12);
  MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGs5NeverOTg5012_sSSSaySfG18j14MLComponents16lm3Vy6n4ML13pq2Vyu20GSSGIgggr_SS_AAtAIs5r68OIegnrzr_TR03_s8a80ML38SoundClassifierTrainingSessionDelegateC13loadg44FrameySay0A12MLComponents16cd4Vy04e4B013gh36zu7GSSGG07F37I00iJ0VKFZALSS_SayZ7GtXEfU_Tf3nnnpf_nTf1cn_n = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  type metadata accessor for JSONDecoder();
  v22 = (void (*)(uint64_t))MEMORY[0x24BDCB268];
  swift_allocObject();
  v46 = JSONDecoder.init()();
  lazy protocol witness table accessor for type [Float] and conformance <A> [A](&lazy protocol witness table cache variable for type [Float] and conformance <A> [A], MEMORY[0x24BEE1520], MEMORY[0x24BEE12D0]);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type JSONDecoder and conformance JSONDecoder, v22);
  v43 = v19;
  v23 = v40;
  Column.decoded<A, B>(_:using:)();
  swift_release();
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
  }
  else
  {
    v46 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<[Float]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Float]>);
    v25 = v34;
    v24 = v35;
    OptionalColumnProtocol.filled(with:)();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v3, v24);
    v26 = v44;
    v27 = v39;
    v28 = v42;
    (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v39, v42, v44);
    v29 = v37;
    v30 = v36;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v27 + *(int *)(v38 + 52), v25, v37);
    MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGs5NeverOTg5012_sSSSaySfG18j14MLComponents16lm3Vy6n4ML13pq2Vyu20GSSGIgggr_SS_AAtAIs5r68OIegnrzr_TR03_s8a80ML38SoundClassifierTrainingSessionDelegateC13loadg44FrameySay0A12MLComponents16cd4Vy04e4B013gh36zu7GSSGG07F37I00iJ0VKFZALSS_SayZ7GtXEfU_Tf3nnnpf_nTf1cn_n = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy11TabularData12FilledColumnVyAH0I0VySSGGAJyALySaySfGGGG_18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGs5NeverOTg5012_sSSSaySfG18j14MLComponents16lm3Vy6n4ML13pq2Vyu20GSSGIgggr_SS_AAtAIs5r68OIegnrzr_TR03_s8a80ML38SoundClassifierTrainingSessionDelegateC13loadg44FrameySay0A12MLComponents16cd4Vy04e4B013gh36zu7GSSGG07F37I00iJ0VKFZALSS_SayZ7GtXEfU_Tf3nnnpf_nTf1cn_n(v27);
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v27, &demangling cache variable for type metadata for Zip2Sequence<FilledColumn<Column<String>>, FilledColumn<Column<[Float]>>>);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v25, v29);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v28, v26);
  }
  OUTLINED_FUNCTION_160();
  return MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGs5NeverOTg5012_sSSSaySfG18j14MLComponents16lm3Vy6n4ML13pq2Vyu20GSSGIgggr_SS_AAtAIs5r68OIegnrzr_TR03_s8a80ML38SoundClassifierTrainingSessionDelegateC13loadg44FrameySay0A12MLComponents16cd4Vy04e4B013gh36zu7GSSGG07F37I00iJ0VKFZALSS_SayZ7GtXEfU_Tf3nnnpf_nTf1cn_n;
}

uint64_t specialized SoundClassifierTrainingSessionDelegate.populateFiles<A, B>(training:validation:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double v7;
  uint64_t result;
  uint64_t v9;

  v7 = *(double *)(a3 + *(int *)(type metadata accessor for MLSoundClassifier.PersistentParameters() + 28));
  v9 = specialized static MLSoundClassifier.filterFilesForFeatureExtractor<A>(labeledFiles:featureExtractionTimeWindowSize:)(a1, v7);
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v9);
  if (v4)
  {
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFiles) = v9;
    swift_bridgeObjectRelease();
    v9 = specialized static MLSoundClassifier.filterFilesForFeatureExtractor<A>(labeledFiles:featureExtractionTimeWindowSize:)(a2, v7);
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(&v9);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFiles) = v9;
    return swift_bridgeObjectRelease();
  }
  return result;
}

void key path getter for AnnotatedFeature.annotation : AnnotatedFeature<URL, String>(_QWORD *a1@<X8>)
{
  key path getter for AnnotatedFeature.annotation : AnnotatedFeature<MLShapedArray<Float>, String>(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>, a1);
}

void key path getter for AnnotatedFeature.annotation : AnnotatedFeature<MLShapedArray<Float>, String>(uint64_t *a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(a1);
  AnnotatedFeature.annotation.getter();
  *a2 = v3;
  a2[1] = v4;
  OUTLINED_FUNCTION_23_7();
}

void key path setter for AnnotatedFeature.annotation : AnnotatedFeature<URL, String>()
{
  key path setter for AnnotatedFeature.annotation : AnnotatedFeature<MLShapedArray<Float>, String>();
}

uint64_t specialized static MLSoundClassifier.filterFilesForFeatureExtractor<A>(labeledFiles:featureExtractionTimeWindowSize:)(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  id v19;
  id v20;
  void *v21;
  double v22;
  id v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v36 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v32 - v11;
  v38 = a1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v38);
  v13 = *(_QWORD *)(v38 + 16);
  if (v13)
  {
    v14 = a2 * 1000.0;
    v15 = *(unsigned __int8 *)(v8 + 80);
    v32 = v38;
    v33 = (v15 + 32) & ~v15;
    v16 = v38 + v33;
    v37 = MEMORY[0x24BEE4AF8];
    v17 = *(_QWORD *)(v8 + 72);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v34 = v8;
    v35 = v17;
    while (1)
    {
      v18(v12, v16, v7);
      AnnotatedFeature.feature.getter();
      v19 = objc_allocWithZone(MEMORY[0x24BDB1810]);
      v20 = @nonobjc AVAudioFile.init(forReading:)((uint64_t)v6);
      v21 = v20;
      if (v20)
      {
        v22 = (double)(uint64_t)objc_msgSend(v20, sel_length, v32) * 1000.0;
        v23 = objc_msgSend(v21, sel_fileFormat);
        objc_msgSend(v23, sel_sampleRate);
        v25 = v24;

        if (v14 > v22 / v25)
        {
          (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);

          v17 = v35;
          goto LABEL_5;
        }
        v18(v36, (uint64_t)v12, v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v26 = v37;
        }
        else
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v26 = v29;
        }
        v27 = *(_QWORD *)(v26 + 16);
        if (v27 >= *(_QWORD *)(v26 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v26 = v30;
        }
        *(_QWORD *)(v26 + 16) = v27 + 1;
        v37 = v26;
        v17 = v35;
        v28 = v26 + v33 + v27 * v35;
        v8 = v34;
        (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v28, v36, v7);

      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
LABEL_5:
      v16 += v17;
      if (!--v13)
      {
        swift_release();
        return v37;
      }
    }
  }
  swift_release();
  return MEMORY[0x24BEE4AF8];
}

Swift::Int_optional __swiftcall SoundClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  Swift::Int v1;
  Swift::Bool v2;
  Swift::Int_optional result;

  v1 = ((uint64_t (*)(uint64_t, _QWORD))((char *)&loc_21AE71D98 + dword_21AE71DEC[*(unsigned __int8 *)phase]))(1, 0);
  result.value = v1;
  result.is_nil = v2;
  return result;
}

uint64_t sub_21AE71DA8()
{
  return 0;
}

uint64_t sub_21AE71DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFiles)
                 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFiles)
                 + 16);
  result = v1 + v2;
  if (__OFADD__(v1, v2))
  {
    __break(1u);
    JUMPOUT(0x21AE71DE0);
  }
  return result;
}

Swift::tuple_Int_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SoundClassifierTrainingSessionDelegate.extractFeatures(from:)(Swift::Int from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  Swift::Int v26;
  char v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  BOOL v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Bool v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  Swift::Int v53;
  Swift::Int v54;
  uint64_t v55;
  char v56;
  Swift::tuple_Int_finished_Bool result;

  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)OUTLINED_FUNCTION_89_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_53_0();
  v10 = v3 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v10, (uint64_t)v7, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_128((uint64_t)v7, 1, (uint64_t)v8);
  if (v11)
    goto LABEL_42;
  v12 = OUTLINED_FUNCTION_189_0();
  outlined init with take of MLHandPoseClassifier.ModelParameters(v12, v13, v14);
  v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFiles);
  v17 = *(_QWORD *)(v16 + 16);
  v7 = *(char **)(v3 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFiles);
  v18 = *((_QWORD *)v7 + 2);
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v19 > from)
  {
    v20 = *(_QWORD *)(v2 + v8[6]);
    v21 = *(_QWORD *)(v2 + v8[7]);
    v22 = (uint64_t *)(v2 + v8[9]);
    v45 = *v22;
    v46 = *((unsigned __int8 *)v22 + 8);
    v23 = v3 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_sessionParameters;
    v24 = *(_QWORD *)(v23 + *(int *)(type metadata accessor for MLTrainingSessionParameters() + 20));
    v25 = __OFADD__(from, v24);
    v26 = from + v24;
    v27 = v25;
    v28 = from - v17;
    if (from >= v17)
    {
      if ((v27 & 1) == 0)
      {
        if (v19 < v26)
          v26 = v17 + v18;
        v44 = v26;
        v36 = v26 - v17;
        if (!__OFSUB__(v26, v17))
        {
          if (v36 >= v28)
          {
            if (v18 >= v28)
            {
              if ((v28 & 0x8000000000000000) == 0)
              {
                if (v18 >= v36)
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
                  OUTLINED_FUNCTION_252();
                  v38 = (uint64_t)&v7[v37];
                  *(_QWORD *)&v52 = v20;
                  *((_QWORD *)&v52 + 1) = v21;
                  v53 = v17;
                  v54 = v19;
                  v55 = v45;
                  v56 = v46;
                  type metadata accessor for MLSoundClassifier.FeatureExtractor();
                  v39 = OUTLINED_FUNCTION_9_1();
                  swift_bridgeObjectRetain();
                  v40 = swift_unknownObjectRetain();
                  OUTLINED_FUNCTION_277(v40, v38, from - v17, (2 * v36) | 1, &v52);
                  if (v39)
                  {
LABEL_25:
                    v41 = swift_bridgeObjectRelease();
                    OUTLINED_FUNCTION_153_1(v41, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
                    goto LABEL_26;
                  }
                  OUTLINED_FUNCTION_268();
                  swift_bridgeObjectRelease();
                  swift_release();
                  v17 = v44;
                  goto LABEL_29;
                }
LABEL_40:
                __break(1u);
LABEL_41:
                __break(1u);
LABEL_42:
                outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v7, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
                __break(1u);
                goto LABEL_43;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        goto LABEL_35;
      }
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if ((v27 & 1) == 0)
    {
      if (v17 >= v26)
        v17 = v26;
      if (v17 >= from)
      {
        if ((from & 0x8000000000000000) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
          OUTLINED_FUNCTION_252();
          v30 = v16 + v29;
          *(_QWORD *)&v47 = v20;
          *((_QWORD *)&v47 + 1) = v21;
          v48 = 0;
          v49 = v19;
          v50 = v45;
          v51 = v46;
          type metadata accessor for MLSoundClassifier.FeatureExtractor();
          v31 = OUTLINED_FUNCTION_9_1();
          OUTLINED_FUNCTION_189();
          v32 = swift_unknownObjectRetain();
          v33 = OUTLINED_FUNCTION_277(v32, v30, from, (2 * v17) | 1, &v47);
          if (v31)
            goto LABEL_25;
          v7 = (char *)v33;
          OUTLINED_FUNCTION_268();
          OUTLINED_FUNCTION_80();
          swift_release();
LABEL_29:
          OUTLINED_FUNCTION_44_7();
          specialized Array.append<A>(contentsOf:)();
          v43 = swift_endAccess();
          OUTLINED_FUNCTION_153_1(v43, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
          v34 = v17 - from;
          if (!__OFSUB__(v17, from))
          {
            v35 = v17 >= v19;
            goto LABEL_26;
          }
          goto LABEL_41;
        }
        goto LABEL_36;
      }
      goto LABEL_33;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  OUTLINED_FUNCTION_153_1(v15, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
  v34 = 0;
  v35 = 1;
LABEL_26:
  v42 = v35;
LABEL_43:
  result._0 = v34;
  result.finished = v42;
  return result;
}

uint64_t SoundClassifierTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[39] = a1;
  v2[40] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Classifier?);
  v2[41] = OUTLINED_FUNCTION_16();
  v2[42] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Model?);
  v2[43] = OUTLINED_FUNCTION_16();
  v2[44] = OUTLINED_FUNCTION_25();
  v3 = OUTLINED_FUNCTION_267();
  v2[45] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[46] = v4;
  v2[47] = *(_QWORD *)(v4 + 64);
  v2[48] = OUTLINED_FUNCTION_25();
  v2[49] = OUTLINED_FUNCTION_25();
  v2[50] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingTablePrinter?);
  v2[51] = OUTLINED_FUNCTION_16();
  v2[52] = OUTLINED_FUNCTION_25();
  v2[53] = OUTLINED_FUNCTION_25();
  v2[54] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  v2[55] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 568) = a1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

void SoundClassifierTrainingSessionDelegate.train(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int EnumTagSinglePayload;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  char *v66;

  v1 = *(_QWORD *)(v0 + 440);
  OUTLINED_FUNCTION_29_0();
  v2 = OUTLINED_FUNCTION_3_9();
  outlined init with copy of URL?(v2, v3, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  v4 = type metadata accessor for MLSoundClassifier.PersistentParameters();
  v5 = OUTLINED_FUNCTION_208_0(v4);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v1, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  if (v5 == 1)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  v8 = v7 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_sessionParameters;
  v9 = type metadata accessor for MLTrainingSessionParameters();
  v10 = *(_QWORD *)(v8 + *(int *)(v9 + 20));
  *(_QWORD *)(v0 + 448) = v10;
  v11 = __OFADD__(v6, v10);
  v12 = v6 + v10;
  v13 = v11;
  *(_QWORD *)(v0 + 280) = v12;
  *(_BYTE *)(v0 + 288) = v13;
  if (v11)
    goto LABEL_21;
  v14 = *(_QWORD *)(v8 + *(int *)(v9 + 28));
  *(_QWORD *)(v0 + 456) = v14;
  v15 = __OFSUB__(v14, v6);
  v16 = v14 - v6;
  v17 = v15;
  *(_QWORD *)(v0 + 296) = v16;
  *(_BYTE *)(v0 + 304) = v17;
  if (v15)
    goto LABEL_22;
  v18 = *(_QWORD *)(v0 + 432);
  v19 = *(_QWORD *)(v0 + 360);
  type metadata accessor for EventCollector();
  OUTLINED_FUNCTION_9_1();
  v20 = EventCollector.init()();
  *(_QWORD *)(v0 + 464) = v20;
  v21 = v7 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_tablePrinter;
  OUTLINED_FUNCTION_165_0();
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of URL?(v21, v18, &demangling cache variable for type metadata for TrainingTablePrinter?);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v18, 1, v19);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v18, &demangling cache variable for type metadata for TrainingTablePrinter?);
  if (EnumTagSinglePayload != 1)
    goto LABEL_13;
  v26 = *(_QWORD *)(v0 + 416);
  v25 = *(_QWORD *)(v0 + 424);
  v27 = *(_QWORD *)(v0 + 360);
  v28 = *(_QWORD *)(v0 + 320) + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFeatures;
  OUTLINED_FUNCTION_29_0();
  static MLSoundClassifier.createTablePrinter(hasValidation:)(*(_QWORD *)(*(_QWORD *)v28 + 16) != 0, v25);
  OUTLINED_FUNCTION_173_0();
  __swift_storeEnumTagSinglePayload(v29, v30, v31, v27);
  OUTLINED_FUNCTION_165_0();
  OUTLINED_FUNCTION_44_7();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v25, v21, &demangling cache variable for type metadata for TrainingTablePrinter?);
  swift_endAccess();
  outlined init with copy of URL?(v21, v26, &demangling cache variable for type metadata for TrainingTablePrinter?);
  if (__swift_getEnumTagSinglePayload(v26, 1, v27) == 1)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  TrainingTablePrinter.beginTable()();
  OUTLINED_FUNCTION_198_0(v32, type metadata accessor for TrainingTablePrinter);
LABEL_13:
  v33 = *(_QWORD *)(v0 + 408);
  v34 = *(_QWORD *)(v0 + 360);
  OUTLINED_FUNCTION_164_0(v23, v24, &demangling cache variable for type metadata for TrainingTablePrinter?);
  v35 = __swift_getEnumTagSinglePayload(v33, 1, v34);
  v36 = *(_QWORD *)(v0 + 408);
  if (v35 == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v36, &demangling cache variable for type metadata for TrainingTablePrinter?);
    _assertionFailure(_:_:file:line:flags:)();
    return;
  }
  v37 = *(_QWORD *)(v0 + 320);
  outlined init with take of MLHandPoseClassifier.ModelParameters(v36, *(_QWORD *)(v0 + 400), type metadata accessor for TrainingTablePrinter);
  v38 = (uint64_t *)(v37 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFeatures);
  OUTLINED_FUNCTION_29_0();
  v39 = *v38;
  *(_QWORD *)(v0 + 472) = *v38;
  if (*(_QWORD *)(v39 + 16))
  {
    v40 = *(_QWORD *)(v0 + 328);
    OUTLINED_FUNCTION_29_0();
    v41 = OUTLINED_FUNCTION_165_0();
    outlined init with copy of URL?(v41, v42, v43);
    v44 = OUTLINED_FUNCTION_131_1();
    if (__swift_getEnumTagSinglePayload(v40, 1, v44) != 1)
    {
      v45 = *(_QWORD *)(v0 + 400);
      v46 = *(_QWORD *)(v0 + 384);
      v47 = *(_QWORD *)(v0 + 368);
      v48 = (uint64_t *)(*(_QWORD *)(v0 + 320)
                      + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFeatures);
      OUTLINED_FUNCTION_29_0();
      v49 = *v48;
      *(_QWORD *)(v0 + 512) = v49;
      outlined init with copy of MLTrainingSessionParameters(v45, v46, type metadata accessor for TrainingTablePrinter);
      v50 = (*(unsigned __int8 *)(v47 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
      v51 = swift_allocObject();
      *(_QWORD *)(v0 + 520) = v51;
      *(_QWORD *)(v51 + 16) = v20;
      outlined init with take of MLHandPoseClassifier.ModelParameters(v46, v51 + v50, type metadata accessor for TrainingTablePrinter);
      v65 = (char *)&async function pointer to specialized MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)
          + async function pointer to specialized MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
      swift_retain();
      OUTLINED_FUNCTION_84();
      OUTLINED_FUNCTION_189();
      v52 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 528) = v52;
      *v52 = v0;
      v52[1] = SoundClassifierTrainingSessionDelegate.train(from:);
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t))v65)(*(_QWORD *)(v0 + 344), v49, v39, partial apply for closure #2 in SoundClassifierTrainingSessionDelegate.train(from:), v51);
      return;
    }
    goto LABEL_24;
  }
  v53 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_164_0(v53, v54, &demangling cache variable for type metadata for MLSoundClassifier.Classifier?);
  v55 = OUTLINED_FUNCTION_131_1();
  if (OUTLINED_FUNCTION_208_0(v55) != 1)
  {
    v56 = *(_QWORD *)(v0 + 392);
    v57 = *(_QWORD *)(v0 + 368);
    v58 = (uint64_t *)(*(_QWORD *)(v0 + 320)
                    + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFeatures);
    OUTLINED_FUNCTION_29_0();
    v59 = *v58;
    *(_QWORD *)(v0 + 480) = *v58;
    v60 = OUTLINED_FUNCTION_165_0();
    outlined init with copy of MLTrainingSessionParameters(v60, v61, type metadata accessor for TrainingTablePrinter);
    v62 = (*(unsigned __int8 *)(v57 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
    v63 = swift_allocObject();
    *(_QWORD *)(v0 + 488) = v63;
    *(_QWORD *)(v63 + 16) = v20;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v56, v63 + v62, type metadata accessor for TrainingTablePrinter);
    v66 = (char *)&async function pointer to specialized MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:)
        + async function pointer to specialized MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:);
    swift_bridgeObjectRetain();
    swift_retain();
    v64 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 496) = v64;
    *v64 = v0;
    v64[1] = SoundClassifierTrainingSessionDelegate.train(from:);
    ((void (*)(_QWORD, uint64_t, uint64_t (*)(uint64_t), uint64_t))v66)(*(_QWORD *)(v0 + 352), v59, partial apply for closure #1 in SoundClassifierTrainingSessionDelegate.train(from:), v63);
    return;
  }
LABEL_25:
  __break(1u);
}

uint64_t SoundClassifierTrainingSessionDelegate.train(from:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v1;
  v2 = v4;
  OUTLINED_FUNCTION_121_0(&v4);
  *(_QWORD *)(v2 + 504) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_15_0();
  if (!v0)
    outlined destroy of MLHandActionClassifier.DataSource(*(_QWORD *)(v2 + 336), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_157_0(v1);
  v2 = OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_271(v2, v3, &demangling cache variable for type metadata for MLSoundClassifier.Model?);
  OUTLINED_FUNCTION_259();
  OUTLINED_FUNCTION_56_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v4 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v4 + 16) = xmmword_21AFE7DA0;
  v5 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(v4 + 56) = MEMORY[0x24BEE1768];
  *(_QWORD *)(v4 + 64) = v5;
  *(_QWORD *)(v4 + 32) = 3;
  OUTLINED_FUNCTION_123_2();
  OUTLINED_FUNCTION_15_0();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 560) = v6;
  v7 = OUTLINED_FUNCTION_172(v6, (uint64_t)SoundClassifierTrainingSessionDelegate.train(from:));
  return OUTLINED_FUNCTION_112_2(v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v1;
  v2 = v4;
  OUTLINED_FUNCTION_121_0(&v4);
  *(_QWORD *)(v2 + 536) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_15_0();
  if (!v0)
    outlined destroy of MLHandActionClassifier.DataSource(*(_QWORD *)(v2 + 328), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_157_0(v1);
  v2 = OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_271(v2, v3, &demangling cache variable for type metadata for MLSoundClassifier.Model?);
  OUTLINED_FUNCTION_259();
  OUTLINED_FUNCTION_56_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v4 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v4 + 16) = xmmword_21AFE7DA0;
  v5 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(v4 + 56) = MEMORY[0x24BEE1768];
  *(_QWORD *)(v4 + 64) = v5;
  *(_QWORD *)(v4 + 32) = 3;
  OUTLINED_FUNCTION_123_2();
  OUTLINED_FUNCTION_15_0();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 560) = v6;
  v7 = OUTLINED_FUNCTION_172(v6, (uint64_t)SoundClassifierTrainingSessionDelegate.train(from:));
  return OUTLINED_FUNCTION_112_2(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 400);
  v3 = specialized _dictionaryUpCast<A, B, C, D>(_:)(*(_QWORD **)(v0 + 568));
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of MLHandActionClassifier.DataSource(v1, type metadata accessor for TrainingTablePrinter);
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_68_5();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, uint64_t, BOOL))(v0 + 8))(*(_QWORD *)(v0 + 544), v3, *(_QWORD *)(v0 + 552) >= *(_QWORD *)(v0 + 456));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_49_4();
  OUTLINED_FUNCTION_265();
  v1 = swift_release();
  OUTLINED_FUNCTION_216_0(v1, type metadata accessor for TrainingTablePrinter);
  OUTLINED_FUNCTION_198_0(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_68_5();
  return OUTLINED_FUNCTION_13(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_49_4();
  OUTLINED_FUNCTION_265();
  v1 = swift_release();
  OUTLINED_FUNCTION_216_0(v1, type metadata accessor for TrainingTablePrinter);
  OUTLINED_FUNCTION_204_0(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_13(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a1;
  v5[4] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v5[7] = v7;
  v5[8] = *(_QWORD *)(v7 - 8);
  v5[9] = OUTLINED_FUNCTION_0();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v5[10] = v8;
  v5[11] = *(_QWORD *)(v8 - 8);
  v5[12] = OUTLINED_FUNCTION_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v5[13] = v9;
  v5[14] = *(_QWORD *)(v9 - 8);
  v5[15] = OUTLINED_FUNCTION_0();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v5[16] = v10;
  v5[17] = *(_QWORD *)(v10 - 8);
  v5[18] = OUTLINED_FUNCTION_0();
  v5[19] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v5[20] = OUTLINED_FUNCTION_0();
  v5[2] = a2;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

uint64_t specialized MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v1 = v0[6];
  v2 = OUTLINED_FUNCTION_131_1();
  OUTLINED_FUNCTION_95_2(v1 + *(int *)(v2 + 20), v3, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  if (OUTLINED_FUNCTION_55_7() == 1)
  {
    OUTLINED_FUNCTION_26(v0[11]);
    v4 = (_QWORD *)swift_task_alloc();
    v0[23] = v4;
    OUTLINED_FUNCTION_206_0();
    OUTLINED_FUNCTION_217_0(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A]);
    *v4 = v0;
    v4[1] = specialized MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:);
    return FullyConnectedNetworkClassifier.fitted<A>(to:eventHandler:)();
  }
  else
  {
    OUTLINED_FUNCTION_26(v0[17]);
    v6 = (_QWORD *)swift_task_alloc();
    v0[21] = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    *v6 = v0;
    v6[1] = specialized MLSoundClassifier.Classifier.fitted<A>(to:eventHandler:);
    return LogisticRegressionClassifier.fitted<A>(to:eventHandler:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 192) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_50_6();
  v1 = *(_QWORD *)(v0 + 48);
  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 136));
  OUTLINED_FUNCTION_94_1(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  v3 = OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_114_2(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_31();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_12_16(v4);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 136));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_28_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_50_6();
  v1 = *(_QWORD *)(v0 + 48);
  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 88));
  OUTLINED_FUNCTION_94_1(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  v3 = OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_113_1(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_31();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_12_16(v4);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 88));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_28_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #2 in SoundClassifierTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  EventCollector.add(_:)();
  return TrainingTablePrinter.print(_:)(a1);
}

uint64_t specialized MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a1;
  v6[5] = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v6[8] = v9;
  v6[9] = *(_QWORD *)(v9 - 8);
  v6[10] = OUTLINED_FUNCTION_0();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifier<Float, String>);
  v6[11] = v10;
  v6[12] = *(_QWORD *)(v10 - 8);
  v6[13] = OUTLINED_FUNCTION_0();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v6[14] = v11;
  v6[15] = *(_QWORD *)(v11 - 8);
  v6[16] = OUTLINED_FUNCTION_0();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v6[17] = v12;
  v6[18] = *(_QWORD *)(v12 - 8);
  v6[19] = OUTLINED_FUNCTION_0();
  v6[20] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  v6[21] = OUTLINED_FUNCTION_0();
  v6[2] = a2;
  v6[3] = a3;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

uint64_t specialized MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v1 = v0[21];
  v2 = v0[7];
  v3 = OUTLINED_FUNCTION_131_1();
  outlined init with copy of URL?(v2 + *(int *)(v3 + 20), v1, &demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
  OUTLINED_FUNCTION_165_0();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_26(v0[12]);
    v4 = (_QWORD *)swift_task_alloc();
    v0[24] = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    *v4 = v0;
    v4[1] = specialized MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    return FullyConnectedNetworkClassifier.fitted<A, B>(to:validateOn:eventHandler:)();
  }
  else
  {
    OUTLINED_FUNCTION_26(v0[18]);
    v6 = (_QWORD *)swift_task_alloc();
    v0[22] = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [AnnotatedFeature<MLShapedArray<Float>, String>] and conformance [A], &demangling cache variable for type metadata for [AnnotatedFeature<MLShapedArray<Float>, String>]);
    *v6 = v0;
    v6[1] = specialized MLSoundClassifier.Classifier.fitted<A, B>(to:validateOn:eventHandler:);
    return LogisticRegressionClassifier.fitted<A, B>(to:validateOn:eventHandler:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 184) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_28();
  *(_QWORD *)(v1 + 200) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_50_6();
  v1 = *(_QWORD *)(v0 + 56);
  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 144));
  OUTLINED_FUNCTION_94_1(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  v3 = OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_114_2(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_31();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_12_16(v4);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 144));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_28_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_50_6();
  v1 = *(_QWORD *)(v0 + 56);
  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 96));
  OUTLINED_FUNCTION_94_1(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
  v3 = OUTLINED_FUNCTION_105_1();
  OUTLINED_FUNCTION_113_1(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_31();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_29();
  return OUTLINED_FUNCTION_12_16(v4);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 96));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_28_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t SoundClassifierTrainingSessionDelegate.buildMetrics(eventCollector:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[2] = a1;
  v2 = type metadata accessor for MetricsKey();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SoundClassifierTrainingSessionDelegate.buildMetrics(eventCollector:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  double v7;
  char v8;
  double v9;
  char v10;
  double v11;
  char v12;
  double v13;
  char v14;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  static MetricsKey.trainingAccuracy.getter();
  specialized EventCollector.getLast<A>(metric:type:)();
  v5 = v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v6 = MEMORY[0x24BEE4B00];
  if ((v5 & 1) == 0)
  {
    OUTLINED_FUNCTION_108_2();
    v7 = OUTLINED_FUNCTION_83_5();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(3, v8, v7);
    OUTLINED_FUNCTION_121_2();
  }
  OUTLINED_FUNCTION_207_0();
  static MetricsKey.validationAccuracy.getter();
  OUTLINED_FUNCTION_258();
  OUTLINED_FUNCTION_91_2();
  if ((v2 & 1) == 0)
  {
    OUTLINED_FUNCTION_108_2();
    v9 = OUTLINED_FUNCTION_83_5();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(5, v10, v9);
    OUTLINED_FUNCTION_121_2();
  }
  OUTLINED_FUNCTION_207_0();
  static MetricsKey.trainingLoss.getter();
  OUTLINED_FUNCTION_258();
  OUTLINED_FUNCTION_91_2();
  if ((v2 & 1) == 0)
  {
    OUTLINED_FUNCTION_108_2();
    v11 = OUTLINED_FUNCTION_83_5();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v12, v11);
    OUTLINED_FUNCTION_121_2();
  }
  OUTLINED_FUNCTION_207_0();
  static MetricsKey.validationLoss.getter();
  OUTLINED_FUNCTION_258();
  OUTLINED_FUNCTION_91_2();
  if ((v2 & 1) == 0)
  {
    OUTLINED_FUNCTION_108_2();
    v13 = OUTLINED_FUNCTION_83_5();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(4, v14, v13);
    OUTLINED_FUNCTION_121_2();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t SoundClassifierTrainingSessionDelegate.evaluate(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[50] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationMetrics<String>);
  v1[51] = v2;
  v1[52] = *(_QWORD *)(v2 - 8);
  v1[53] = OUTLINED_FUNCTION_0();
  type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  v1[54] = OUTLINED_FUNCTION_0();
  v1[55] = type metadata accessor for MLSoundClassifier.ModelParameters();
  v1[56] = OUTLINED_FUNCTION_16();
  v1[57] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  v1[58] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?);
  v1[59] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Model?);
  v1[60] = OUTLINED_FUNCTION_0();
  v1[61] = OUTLINED_FUNCTION_105_1();
  v1[62] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 488);
  v3 = *(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_95_2(v3, v4, &demangling cache variable for type metadata for MLSoundClassifier.Model?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(*(_QWORD *)(v0 + 480), &demangling cache variable for type metadata for MLSoundClassifier.Model?);
    OUTLINED_FUNCTION_66_5();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(0, 1);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 400);
    outlined init with take of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 496), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
    v7 = OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFeatures;
    *(_QWORD *)(v0 + 504) = OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingFeatures;
    v8 = (_QWORD *)(v6 + v7);
    OUTLINED_FUNCTION_3_9();
    OUTLINED_FUNCTION_29_0();
    *(_QWORD *)(v0 + 512) = *v8;
    v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Transformer.prediction<A, B>(from:eventHandler:)
                                                            + async function pointer to specialized Transformer.prediction<A, B>(from:eventHandler:));
    OUTLINED_FUNCTION_84();
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 520) = v9;
    *v9 = v0;
    v9[1] = SoundClassifierTrainingSessionDelegate.evaluate(from:);
    OUTLINED_FUNCTION_18();
    return v13(v10, v11, v12);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v3);
  *(_QWORD *)(v2 + 528) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1)
    *(_QWORD *)(v2 + 536) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 400);
  MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm(*(_QWORD *)(v0 + 536), v0 + 384, &demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 376) = MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm;
  v4 = OUTLINED_FUNCTION_189();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm(v4, v0 + 368, &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 360) = v5;
  *(_QWORD *)(v0 + 544) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  *(_QWORD *)(v0 + 552) = v6;
  ClassificationMetrics.init<A, B>(_:_:)();
  *(_QWORD *)(v0 + 560) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  OUTLINED_FUNCTION_130_1();
  *(_QWORD *)(v0 + 568) = type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_130_1();
  v7 = type metadata accessor for MLClassifierMetrics(0);
  *(_QWORD *)(v0 + 576) = v7;
  OUTLINED_FUNCTION_173_0();
  __swift_storeEnumTagSinglePayload(v8, v9, v10, v7);
  OUTLINED_FUNCTION_44_7();
  v11 = OUTLINED_FUNCTION_154_0();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v11, v12, v13);
  swift_endAccess();
  v14 = OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFiles;
  v63 = v2;
  v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFiles);
  v16 = &unk_255134000;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_3;
  v17 = *(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationFeatures;
  OUTLINED_FUNCTION_44_7();
  if (*(_QWORD *)(*(_QWORD *)v17 + 16))
    goto LABEL_3;
  v58 = (_QWORD *)v17;
  v59 = v7;
  v62 = v1;
  v28 = *(_QWORD *)(v0 + 464);
  v29 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_164_0(v29, v30, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  v31 = (int *)type metadata accessor for MLSoundClassifier.PersistentParameters();
  result = __swift_getEnumTagSinglePayload(v28, 1, (uint64_t)v31);
  if ((_DWORD)result != 1)
  {
    v33 = *(_QWORD *)(v0 + 456);
    v34 = *(_QWORD *)(v0 + 464);
    v35 = *(int **)(v0 + 440);
    v36 = *(_QWORD *)(v0 + 448);
    v37 = *(_QWORD *)(v0 + 432);
    outlined init with copy of MLTrainingSessionParameters(v34 + v31[5], v37, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    v38 = *(_QWORD *)(v34 + v31[8]);
    v39 = *(_QWORD *)(v34 + v31[6]);
    v40 = (uint64_t *)(v34 + v31[9]);
    v60 = *v40;
    v61 = *((_BYTE *)v40 + 8);
    v41 = (_OWORD *)(v36 + v35[7]);
    *v41 = 0u;
    v41[1] = 0u;
    OUTLINED_FUNCTION_104_2(v36 + v35[8]);
    *(_QWORD *)(v36 + v42) = v43;
    outlined init with copy of MLTrainingSessionParameters(v37, v36, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    *(_QWORD *)(v36 + v35[5]) = v38;
    *(_QWORD *)(v36 + v35[6]) = v39;
    *(_QWORD *)(v0 + 88) = &type metadata for MLSoundClassifier.ModelParameters.ModelAlgorithmType;
    *(_QWORD *)(v0 + 64) = v60;
    *(_BYTE *)(v0 + 72) = v61;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_281();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v44, v45, v46);
    outlined destroy of MLHandActionClassifier.DataSource(v37, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
    outlined init with take of MLHandPoseClassifier.ModelParameters(v36, v33, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    OUTLINED_FUNCTION_216_0(v47, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
    v48 = *(_QWORD *)(*(_QWORD *)(v63 + v14) + 16);
    v49 = *(_QWORD *)(v33 + v35[6]);
    v50 = MLSoundClassifier.ModelParameters.featureExtractionTimeWindowSize.getter();
    outlined init with copy of URL?(v33 + v35[7], v0 + 96, &demangling cache variable for type metadata for Any?);
    if (*(_QWORD *)(v0 + 120))
    {
      v51 = v62;
      if ((swift_dynamicCast() & 1) != 0)
      {
        v52 = *(_QWORD *)(v0 + 320);
        v53 = *(_BYTE *)(v0 + 328);
      }
      else
      {
        v52 = 1;
        v53 = 1;
      }
    }
    else
    {
      outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + 96, &demangling cache variable for type metadata for Any?);
      v52 = 1;
      v53 = 1;
      v51 = v62;
    }
    outlined destroy of MLHandActionClassifier.DataSource(*(_QWORD *)(v0 + 456), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters);
    *(_QWORD *)(v0 + 16) = v49;
    *(double *)(v0 + 24) = v50;
    *(_QWORD *)(v0 + 32) = 0;
    *(_QWORD *)(v0 + 40) = v48;
    *(_QWORD *)(v0 + 48) = v52;
    *(_BYTE *)(v0 + 56) = v53;
    type metadata accessor for MLSoundClassifier.FeatureExtractor();
    OUTLINED_FUNCTION_9_1();
    v54 = swift_bridgeObjectRetain();
    specialized MLSoundClassifier.FeatureExtractor.init<A>(files:options:)(v54, (_OWORD *)(v0 + 16));
    if (v51)
    {
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_176_0();
      OUTLINED_FUNCTION_198_0(v56, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_58();
      OUTLINED_FUNCTION_125_2();
      __asm { BR              X0 }
    }
    v55 = MLSoundClassifier.FeatureExtractor.extractFeatures()();
    swift_release();
    OUTLINED_FUNCTION_12_0();
    *v58 = v55;
    swift_bridgeObjectRelease();
    v7 = v59;
    v16 = (_QWORD *)&unk_255134000;
LABEL_3:
    v18 = *(_QWORD *)(v0 + 400);
    v19 = v16[12];
    *(_QWORD *)(v0 + 584) = v19;
    v20 = (uint64_t *)(v18 + v19);
    OUTLINED_FUNCTION_29_0();
    v21 = *v20;
    *(_QWORD *)(v0 + 592) = *v20;
    if (*(_QWORD *)(v21 + 16))
    {
      OUTLINED_FUNCTION_84();
      v22 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 600) = v22;
      *v22 = v0;
      v22[1] = SoundClassifierTrainingSessionDelegate.evaluate(from:);
      OUTLINED_FUNCTION_18();
      OUTLINED_FUNCTION_125_2();
      __asm { BR              X3 }
    }
    v24 = *(_QWORD *)(v0 + 472);
    v25 = *(_QWORD *)(v0 + 400);
    outlined destroy of MLHandActionClassifier.DataSource(*(_QWORD *)(v0 + 496), (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
    __swift_storeEnumTagSinglePayload(v24, 1, 1, v7);
    v26 = v25 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_3_9();
    OUTLINED_FUNCTION_44_7();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v24, v26, &demangling cache variable for type metadata for MLClassifierMetrics?);
    OUTLINED_FUNCTION_259();
    OUTLINED_FUNCTION_66_5();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_264();
    OUTLINED_FUNCTION_125_2();
    __asm { BR              X2 }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v3);
  *(_QWORD *)(v2 + 608) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1)
    *(_QWORD *)(v2 + 616) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v0[72];
  v15 = v0[62];
  v1 = v0[59];
  v2 = v0[53];
  v16 = v0[52];
  v17 = v0[51];
  MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm(v0[77], (uint64_t)(v0 + 49), &demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
  swift_bridgeObjectRelease();
  v0[44] = MLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm;
  v4 = OUTLINED_FUNCTION_52_1();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVy6CoreML13MLShapedArrayVySfGSSGG_SSs5NeverOTg503_s8d169ML38SoundClassifierTrainingSessionDelegateC13populateFiles33_6DADCD271D509E5C075FB900187437D410parametersyAA07MLSoundD0V20PersistentParametersV_tKFSS0A12MLComponents16fg4Vy04h4B013jK61VySfGSSGcfu0_32c7cfd4b680d8003eade90301c2a1b770ARSSTf3nnnpk_nTf1cn_nTm(v4, (uint64_t)(v0 + 42), &demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  OUTLINED_FUNCTION_30();
  v0[43] = v5;
  ClassificationMetrics.init<A, B>(_:_:)();
  outlined destroy of MLHandActionClassifier.DataSource(v15, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v1, v2, v17);
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_173_0();
  __swift_storeEnumTagSinglePayload(v6, v7, v8, v18);
  OUTLINED_FUNCTION_44_7();
  v9 = OUTLINED_FUNCTION_3_9();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v9, v10, v11);
  swift_endAccess();
  OUTLINED_FUNCTION_66_5();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  v12 = OUTLINED_FUNCTION_264();
  return v13(v12);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_176_0();
  OUTLINED_FUNCTION_204_0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  return OUTLINED_FUNCTION_12_16(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_50_6();
  OUTLINED_FUNCTION_176_0();
  OUTLINED_FUNCTION_204_0(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  return OUTLINED_FUNCTION_12_16(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized Transformer.prediction<A, B>(from:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v4[8] = OUTLINED_FUNCTION_105_1();
  v5 = OUTLINED_FUNCTION_0();
  v6 = OUTLINED_FUNCTION_256(v5);
  v4[10] = v6;
  v4[11] = *(_QWORD *)(v6 - 8);
  v4[12] = OUTLINED_FUNCTION_0();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
  v4[13] = v7;
  v4[14] = *(_QWORD *)(v7 - 8);
  v4[15] = OUTLINED_FUNCTION_0();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v4[16] = v8;
  v4[17] = *(_QWORD *)(v8 - 8);
  v4[18] = OUTLINED_FUNCTION_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v4[19] = v9;
  v4[20] = *(_QWORD *)(v9 - 8);
  v4[21] = OUTLINED_FUNCTION_0();
  v4[22] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v4[23] = OUTLINED_FUNCTION_0();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v4[24] = v10;
  v4[25] = *(_QWORD *)(v10 - 8);
  v4[26] = OUTLINED_FUNCTION_0();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<String>);
  v4[27] = v11;
  v4[28] = *(_QWORD *)(v11 - 8);
  v4[29] = OUTLINED_FUNCTION_16();
  v4[30] = OUTLINED_FUNCTION_25();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  v4[31] = v12;
  v4[32] = *(_QWORD *)(v12 - 8);
  v4[33] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v4[8] = type metadata accessor for MLImageClassifier.Model();
  v5 = OUTLINED_FUNCTION_0();
  v6 = OUTLINED_FUNCTION_256(v5);
  v4[10] = v6;
  v4[11] = *(_QWORD *)(v6 - 8);
  v4[12] = OUTLINED_FUNCTION_0();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
  v4[13] = v7;
  v4[14] = *(_QWORD *)(v7 - 8);
  v4[15] = OUTLINED_FUNCTION_0();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v4[16] = v8;
  v4[17] = *(_QWORD *)(v8 - 8);
  v4[18] = OUTLINED_FUNCTION_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v4[19] = v9;
  v4[20] = *(_QWORD *)(v9 - 8);
  v4[21] = OUTLINED_FUNCTION_0();
  v4[22] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v4[23] = OUTLINED_FUNCTION_0();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v4[24] = v10;
  v4[25] = *(_QWORD *)(v10 - 8);
  v4[26] = OUTLINED_FUNCTION_0();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<String>);
  v4[27] = v11;
  v4[28] = *(_QWORD *)(v11 - 8);
  v4[29] = OUTLINED_FUNCTION_16();
  v4[30] = OUTLINED_FUNCTION_25();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  v4[31] = v12;
  v4[32] = *(_QWORD *)(v12 - 8);
  v4[33] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t specialized Transformer.prediction<A, B>(from:eventHandler:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  OUTLINED_FUNCTION_110_2();
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  *(_QWORD *)(v0 + 272) = v1;
  OUTLINED_FUNCTION_190();
  v3 = v2;
  if (v1)
  {
    OUTLINED_FUNCTION_48_7();
    OUTLINED_FUNCTION_196_0();
    static Task<>.checkCancellation()();
    v6 = *(_QWORD *)(v0 + 56);
    v5 = *(_QWORD *)(v0 + 64);
    AnnotatedFeature.feature.getter();
    OUTLINED_FUNCTION_95_2(v6 + *(int *)(v5 + 20), v7, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    OUTLINED_FUNCTION_55_7();
    OUTLINED_FUNCTION_162_0();
    if (v8)
    {
      OUTLINED_FUNCTION_26(*(_QWORD *)(v0 + 136));
      v9 = swift_task_alloc();
      v10 = (_QWORD *)OUTLINED_FUNCTION_155_0(v9);
      OUTLINED_FUNCTION_11_15(v10);
      return OUTLINED_FUNCTION_76_3();
    }
    else
    {
      OUTLINED_FUNCTION_26(*(_QWORD *)(v0 + 160));
      v11 = swift_task_alloc();
      v12 = (_QWORD *)OUTLINED_FUNCTION_156_0(v11);
      OUTLINED_FUNCTION_10_17(v12);
      return OUTLINED_FUNCTION_77_4();
    }
  }
  else
  {
    OUTLINED_FUNCTION_64_6();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_38();
    return OUTLINED_FUNCTION_75_7(v3, *(uint64_t (**)(void))(v0 + 8));
  }
}

{
  OUTLINED_FUNCTION_101_3();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  OUTLINED_FUNCTION_110_2();
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  *(_QWORD *)(v0 + 272) = v1;
  OUTLINED_FUNCTION_190();
  v3 = v2;
  if (v1)
  {
    OUTLINED_FUNCTION_48_7();
    OUTLINED_FUNCTION_196_0();
    static Task<>.checkCancellation()();
    v5 = *(_QWORD *)(v0 + 56);
    AnnotatedFeature.feature.getter();
    OUTLINED_FUNCTION_95_2(v5, v6, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    OUTLINED_FUNCTION_55_7();
    OUTLINED_FUNCTION_162_0();
    if (v7)
    {
      OUTLINED_FUNCTION_26(*(_QWORD *)(v0 + 136));
      v8 = swift_task_alloc();
      v9 = (_QWORD *)OUTLINED_FUNCTION_155_0(v8);
      OUTLINED_FUNCTION_11_15(v9);
      return OUTLINED_FUNCTION_76_3();
    }
    else
    {
      OUTLINED_FUNCTION_26(*(_QWORD *)(v0 + 160));
      v10 = swift_task_alloc();
      v11 = (_QWORD *)OUTLINED_FUNCTION_156_0(v10);
      OUTLINED_FUNCTION_10_17(v11);
      return OUTLINED_FUNCTION_77_4();
    }
  }
  else
  {
    OUTLINED_FUNCTION_64_6();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_38();
    return OUTLINED_FUNCTION_75_7(v3, *(uint64_t (**)(void))(v0 + 8));
  }
}

{
  OUTLINED_FUNCTION_101_3();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_100_2();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 160));
  OUTLINED_FUNCTION_187_0();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_179_0();
  OUTLINED_FUNCTION_57_3();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_38();
  return OUTLINED_FUNCTION_12(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_110_2();
  OUTLINED_FUNCTION_62_9(*(_QWORD *)(v0 + 136));
  OUTLINED_FUNCTION_187_0();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_179_0();
  OUTLINED_FUNCTION_57_3();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_38();
  return OUTLINED_FUNCTION_12(*(uint64_t (**)(void))(v0 + 8));
}

#error "21AE747EC: call analysis failed (funcsize=119)"

#error "21AE749E0: call analysis failed (funcsize=119)"

#error "21AE74F04: call analysis failed (funcsize=118)"

#error "21AE7517C: call analysis failed (funcsize=118)"

uint64_t key path getter for AnnotatedPrediction.prediction : AnnotatedPrediction<ClassificationDistribution<String>, String>()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
  return AnnotatedPrediction.prediction.getter();
}

uint64_t key path setter for AnnotatedPrediction.prediction : AnnotatedPrediction<ClassificationDistribution<String>, String>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<String>);
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedPrediction<ClassificationDistribution<String>, String>);
  return AnnotatedPrediction.prediction.setter();
}

void key path getter for ClassificationDistribution.mostLikelyLabel : ClassificationDistribution<String>(_OWORD *a1@<X8>)
{
  __int128 v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<String>);
  ClassificationDistribution.mostLikelyLabel.getter();
  *a1 = v2;
  OUTLINED_FUNCTION_23_7();
}

Swift::Bool __swiftcall SoundClassifierTrainingSessionDelegate.shouldTransition(from:to:)(CreateML::MLPhase from, CreateML::MLPhase to)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)from == 1 && *(_BYTE *)to == 2)
    v4 = *(_BYTE *)(v2 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_featureExtractionOnly) ^ 1;
  else
    v4 = 1;
  return v4 & 1;
}

void SoundClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSURL *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  void (*v41)(uint64_t);
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t);
  uint64_t v71;
  id v72[4];

  OUTLINED_FUNCTION_8_1();
  v69 = v0;
  v70 = v1;
  v6 = v5;
  v72[3] = *(id *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Model?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.Classifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for CSVWritingOptions();
  v64 = *(_QWORD *)(v68 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_208();
  v63 = v12;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v13);
  v67 = type metadata accessor for DataFrame();
  v65 = *(_QWORD *)(v67 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  v62 = (uint64_t)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_211();
  v66 = v17;
  v71 = OUTLINED_FUNCTION_78();
  v18 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  OUTLINED_FUNCTION_50();
  v21 = v19 - v20;
  v23 = MEMORY[0x24BDAC7A8](v22);
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_226();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_169();
  v26 = *v6;
  if (v26 != 2)
  {
    if (v26 == 1)
    {
      v27 = v25;
      OUTLINED_FUNCTION_180_0();
      OUTLINED_FUNCTION_152_0();
      OUTLINED_FUNCTION_140_0();
      v28 = *(_QWORD *)(v18 + 8);
      OUTLINED_FUNCTION_194_0(v4);
      OUTLINED_FUNCTION_250();
      OUTLINED_FUNCTION_152_0();
      v61 = v27;
      OUTLINED_FUNCTION_140_0();
      OUTLINED_FUNCTION_194_0(v4);
      v29 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      URL._bridgeToObjectiveC()(v30);
      v32 = v31;
      v72[0] = 0;
      v33 = objc_msgSend(v29, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v31, 1, 0, v72);

      v34 = v72[0];
      if (v33)
      {
        v60[1] = v28;
        OUTLINED_FUNCTION_44_7();
        v35 = v34;
        v36 = OUTLINED_FUNCTION_52_1();
        v37 = v66;
        static SoundClassifierTrainingSessionDelegate.createJSONEncodedDataFrame(from:)(v36, v66);
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_5_7();
        v38 = v67;
        v39 = v70;
        DataFrameProtocol.writeCSV(to:options:)();
        v40 = OUTLINED_FUNCTION_240();
        if (v39)
        {
          v41(v40);
          (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v37, v38);
          OUTLINED_FUNCTION_200_0(v61);
        }
        else
        {
          v70 = v41;
          v41(v40);
          OUTLINED_FUNCTION_44_7();
          v56 = swift_bridgeObjectRetain();
          v57 = v62;
          static SoundClassifierTrainingSessionDelegate.createJSONEncodedDataFrame(from:)(v56, v62);
          OUTLINED_FUNCTION_123();
          v58 = v63;
          OUTLINED_FUNCTION_5_7();
          v59 = v61;
          DataFrameProtocol.writeCSV(to:options:)();
          OUTLINED_FUNCTION_276(v58);
          OUTLINED_FUNCTION_139_1(v57);
          OUTLINED_FUNCTION_139_1(v37);
          OUTLINED_FUNCTION_200_0(v59);
        }
        OUTLINED_FUNCTION_253();
      }
      else
      {
        v54 = v72[0];
        _convertNSErrorToError(_:)();

        swift_willThrow(v55);
        OUTLINED_FUNCTION_194_0(v61);
        OUTLINED_FUNCTION_194_0(v3);
      }
    }
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_215_0();
  OUTLINED_FUNCTION_152_0();
  OUTLINED_FUNCTION_140_0();
  v42 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v43 = v71;
  v42(v4, v71);
  v44 = v69;
  OUTLINED_FUNCTION_44_7();
  v45 = OUTLINED_FUNCTION_261();
  outlined init with copy of URL?(v45, v46, v47);
  v48 = OUTLINED_FUNCTION_131_1();
  OUTLINED_FUNCTION_128((uint64_t)v10, 1, v48);
  if (v49)
  {
    __break(1u);
  }
  else
  {
    v50 = v44 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_44_7();
    outlined init with copy of URL?(v50, v2, &demangling cache variable for type metadata for MLSoundClassifier.Model?);
    v51 = OUTLINED_FUNCTION_105_1();
    OUTLINED_FUNCTION_128(v2, 1, v51);
    if (!v49)
    {
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLSoundClassifier.Classifier and conformance MLSoundClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.Classifier);
      UpdatableSupervisedEstimator.writeWithOptimizer(_:to:overwrite:)();
      v52 = ((uint64_t (*)(uint64_t, uint64_t))v42)(v21, v43);
      OUTLINED_FUNCTION_153_1(v52, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Model);
      OUTLINED_FUNCTION_204_0(v53, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.Classifier);
LABEL_13:
      OUTLINED_FUNCTION_7();
      return;
    }
  }
  __break(1u);
}

void static SoundClassifierTrainingSessionDelegate.createJSONEncodedDataFrame(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, unint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_70_5(v7, v33);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_116(v10, v33);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v14 = v13;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_195_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v33 - v17;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  v42 = JSONEncoder.init()();
  v19 = *(_QWORD *)(a1 + 16);
  v43 = v18;
  OUTLINED_FUNCTION_103_2();
  OUTLINED_FUNCTION_255();
  v44 = v2;
  OUTLINED_FUNCTION_80_4();
  OUTLINED_FUNCTION_255();
  if (v19)
  {
    v34 = v3;
    v35 = a2;
    v20 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v21 = *(_QWORD *)(v12 + 72);
    v36 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
    v37 = v21;
    v33 = a1;
    swift_bridgeObjectRetain();
    v38 = v12;
    do
    {
      v36(v14, v20, v11);
      v22 = v39;
      AnnotatedFeature.feature.getter();
      lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>);
      v23 = v41;
      v24 = MLShapedArrayProtocol.scalars.getter();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v22, v23);
      v48 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      lazy protocol witness table accessor for type [Float] and conformance <A> [A](&lazy protocol witness table cache variable for type [Float] and conformance <A> [A], MEMORY[0x24BEE14F8], MEMORY[0x24BEE12A0]);
      v25 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      v27 = v26;
      OUTLINED_FUNCTION_60_0();
      static String.Encoding.utf8.getter();
      v48 = String.init(data:encoding:)();
      v49 = v28;
      Column.append(_:)();
      OUTLINED_FUNCTION_60_0();
      AnnotatedFeature.annotation.getter();
      v46 = v48;
      v47 = v49;
      Column.append(_:)();
      outlined consume of Data._Representation(v25, v27);
      OUTLINED_FUNCTION_60_0();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v14, v11);
      v20 += v37;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    v3 = v34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
  OUTLINED_FUNCTION_274();
  v29 = OUTLINED_FUNCTION_87_1();
  *(_OWORD *)(v29 + 16) = xmmword_21AFE7F70;
  Column.eraseToAnyColumn()();
  Column.eraseToAnyColumn()();
  v48 = v29;
  OUTLINED_FUNCTION_206_0();
  OUTLINED_FUNCTION_217_0(&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A]);
  DataFrame.init<A>(columns:)();
  swift_release();
  v30 = *(void (**)(uint64_t))(v3 + 8);
  v31 = OUTLINED_FUNCTION_165_0();
  v30(v31);
  v32 = OUTLINED_FUNCTION_189_0();
  v30(v32);
  OUTLINED_FUNCTION_9_5();
}

void static SoundClassifierTrainingSessionDelegate.createDataFrame(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_161();
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v8 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  OUTLINED_FUNCTION_195_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_64();
  v13 = *(_QWORD *)(a1 + 16);
  v26 = v14;
  OUTLINED_FUNCTION_103_2();
  Column.init(name:capacity:)();
  v27 = v10;
  OUTLINED_FUNCTION_80_4();
  Column.init(name:capacity:)();
  if (v13)
  {
    v23 = v2;
    v24 = v8;
    v25 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
    OUTLINED_FUNCTION_251();
    v16 = a1 + v15;
    v28 = *(_QWORD *)(v17 + 72);
    v22[1] = a1;
    OUTLINED_FUNCTION_52_1();
    v29 = v11;
    do
    {
      AnnotatedFeature.feature.getter();
      Column.append(_:)();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
      AnnotatedFeature.annotation.getter();
      v31 = v33;
      v32 = v34;
      Column.append(_:)();
      swift_bridgeObjectRelease();
      v16 += v28;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    v8 = v24;
    v11 = v29;
    v2 = v23;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
  OUTLINED_FUNCTION_274();
  v18 = OUTLINED_FUNCTION_87_1();
  *(_OWORD *)(v18 + 16) = xmmword_21AFE7F70;
  v19 = v26;
  Column.eraseToAnyColumn()();
  v20 = v30;
  v21 = v27;
  Column.eraseToAnyColumn()();
  v33 = v18;
  OUTLINED_FUNCTION_206_0();
  OUTLINED_FUNCTION_217_0(&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A]);
  DataFrame.init<A>(columns:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v21, v20);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v19, v11);
  OUTLINED_FUNCTION_9_5();
}

void SoundClassifierTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OUTLINED_FUNCTION_89_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_53_0();
  v9 = v1 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v9, (uint64_t)v6, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_128((uint64_t)v6, 1, v7);
  if (v10)
  {
    outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v6, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v11 = 0xD000000000000030;
    *(_QWORD *)(v11 + 8) = 0x800000021AFF3E40;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    OUTLINED_FUNCTION_85_2(v11, 2, 0.0);
  }
  else
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v6, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
    MLSoundClassifier.PersistentParameters.save(toSessionDirectory:)(a1);
    outlined destroy of MLHandActionClassifier.DataSource(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
  }
}

void SoundClassifierTrainingSessionDelegate.restore(from:phase:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;

  OUTLINED_FUNCTION_8_1();
  v30 = v0;
  v31 = v2;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_50();
  v8 = v6 - v7;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - v10;
  v12 = OUTLINED_FUNCTION_78();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = OUTLINED_FUNCTION_89_2();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_50();
  v20 = v18 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v30 - v22;
  v24 = *v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v31, v12);
  MLSoundClassifier.PersistentParameters.init(sessionDirectory:)((uint64_t)v15, (uint64_t)v23);
  if (!v1)
  {
    v25 = v8;
    v26 = v30 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_44_7();
    outlined init with copy of URL?(v26, (uint64_t)v11, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
    OUTLINED_FUNCTION_128((uint64_t)v11, 1, v16);
    if (v27)
    {
      OUTLINED_FUNCTION_218_0((uint64_t)v11);
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v23, v25, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
      OUTLINED_FUNCTION_159_0(v25, 0);
      OUTLINED_FUNCTION_44_7();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v25, v26, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
      swift_endAccess();
    }
    else
    {
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v11, v20, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
      v32 = v24;
      SoundClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:phase:)((uint64_t)v23, v20, &v32);
      outlined destroy of MLHandActionClassifier.DataSource(v20, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.PersistentParameters);
      v28 = OUTLINED_FUNCTION_154_0();
      outlined destroy of MLHandActionClassifier.DataSource(v28, v29);
    }
  }
  OUTLINED_FUNCTION_7();
}

void SoundClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:phase:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[10];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a2;
  type metadata accessor for MLSoundClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_151_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_212_0();
  v11 = type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v31 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLSoundClassifier.ModelParameters.ValidationData, MLSoundClassifier.ModelParameters.ValidationData));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_55_0();
  v31[9] = *a3;
  v33 = a1;
  v18 = v34;
  MLSoundClassifier.DataSource.labeledSounds()();
  if (!v18)
  {
    v31[4] = v16;
    v31[5] = v3;
    v31[6] = v15;
    v31[7] = v11;
    v31[8] = v4;
    v31[3] = v5;
    v34 = v6;
    specialized Sequence.flatMap<A>(_:)(v19);
    v20 = v32;
    swift_bridgeObjectRelease();
    v21 = OUTLINED_FUNCTION_89_2();
    v22 = OUTLINED_FUNCTION_272();
    OUTLINED_FUNCTION_123();
    MLSoundClassifier.DataSource.labeledSounds()();
    v24 = specialized Sequence.flatMap<A>(_:)(v23);
    v31[2] = 0;
    OUTLINED_FUNCTION_123();
    v25 = specialized static MLSoundClassifier.filterFilesForFeatureExtractor<A>(labeledFiles:featureExtractionTimeWindowSize:)(v24, *(double *)(v20 + *(int *)(v21 + 28)));
    OUTLINED_FUNCTION_80();
    specialized static Array<A>.== infix(_:_:)(v22, v25);
    LOBYTE(v24) = v26;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_123();
    if ((v24 & 1) != 0)
    {
      v31[1] = v21;
      outlined init with copy of MLTrainingSessionParameters(v33 + *(int *)(v21 + 20), v34, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      v27 = OUTLINED_FUNCTION_154_0();
      outlined init with copy of MLTrainingSessionParameters(v27, v28, (uint64_t (*)(_QWORD))type metadata accessor for MLSoundClassifier.ModelParameters.ValidationData);
      v29 = (char *)&loc_21AE765F8 + 4 * byte_21AFEA220[OUTLINED_FUNCTION_269()];
      __asm { BR              X10 }
    }
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v30 = 1;
    *(_OWORD *)(v30 + 8) = 0u;
    *(_OWORD *)(v30 + 24) = 0u;
    *(_QWORD *)(v30 + 40) = 0;
    OUTLINED_FUNCTION_85_2(v30, 4, 0.0);
  }
}

void sub_21AE76928()
{
  OUTLINED_FUNCTION_282();
  JUMPOUT(0x21AE76890);
}

void SoundClassifierTrainingSessionDelegate.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of MLHandActionClassifier.DataSource(v0 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLSoundClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_141_1();
  OUTLINED_FUNCTION_141_1();
  OUTLINED_FUNCTION_141_1();
  OUTLINED_FUNCTION_141_1();
  OUTLINED_FUNCTION_141_1();
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_classifier, &demangling cache variable for type metadata for MLSoundClassifier.Classifier?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_model, &demangling cache variable for type metadata for MLSoundClassifier.Model?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_parameters, &demangling cache variable for type metadata for MLSoundClassifier.ModelParameters?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_trainingMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_validationMetrics, &demangling cache variable for type metadata for MLClassifierMetrics?);
  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v0 + OBJC_IVAR____TtC8CreateML38SoundClassifierTrainingSessionDelegate_tablePrinter, &demangling cache variable for type metadata for TrainingTablePrinter?);
  OUTLINED_FUNCTION_22();
}

uint64_t SoundClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  SoundClassifierTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for SoundClassifierTrainingSessionDelegate()
{
  return type metadata accessor for SoundClassifierTrainingSessionDelegate();
}

uint64_t type metadata accessor for SoundClassifierTrainingSessionDelegate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SoundClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for SoundClassifierTrainingSessionDelegate)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for SoundClassifierTrainingSessionDelegate()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLSoundClassifier.PersistentParameters?, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.PersistentParameters);
    if (v1 <= 0x3F)
    {
      type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLSoundClassifier.Classifier?, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.Classifier);
      if (v2 <= 0x3F)
      {
        type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLSoundClassifier.Model?, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.Model);
        if (v3 <= 0x3F)
        {
          type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLSoundClassifier.ModelParameters?, (void (*)(uint64_t))type metadata accessor for MLSoundClassifier.ModelParameters);
          if (v4 <= 0x3F)
          {
            type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for MLClassifierMetrics?, (void (*)(uint64_t))type metadata accessor for MLClassifierMetrics);
            if (v5 <= 0x3F)
            {
              type metadata accessor for MLSoundClassifier.PersistentParameters?(319, (unint64_t *)&lazy cache variable for type metadata for TrainingTablePrinter?, (void (*)(uint64_t))type metadata accessor for TrainingTablePrinter);
              if (v6 <= 0x3F)
                swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for MLSoundClassifier.PersistentParameters?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance SoundClassifierTrainingSessionDelegate()
{
  SoundClassifierTrainingSessionDelegate.setUp()();
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance SoundClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
  SoundClassifierTrainingSessionDelegate.resume(from:)(a1);
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance SoundClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)SoundClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(Swift::Int a1)
{
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  _BOOL8 finished;
  Swift::tuple_Int_finished_Bool v8;

  v8 = SoundClassifierTrainingSessionDelegate.extractFeatures(from:)(a1);
  if (v3)
  {
    v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
    v5 = v1;
    finished = 0;
  }
  else
  {
    v2 = v8._0;
    v8._0 = *(_QWORD *)(v1 + 8);
    finished = v8.finished;
    v5 = v1;
  }
  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(v4, v5, v2, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance SoundClassifierTrainingSessionDelegate(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return SoundClassifierTrainingSessionDelegate.train(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance SoundClassifierTrainingSessionDelegate(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_52_0();
  if (v3)
  {
    v10 = 0;
  }
  else
  {
    v10 = a3 & 1;
    v8 = a1;
    v9 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v8, v9, v10);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return SoundClassifierTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = OUTLINED_FUNCTION_52_0();
  if (v2)
  {
    v7 = 0;
  }
  else
  {
    v7 = a2 & 1;
    v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v7);
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance SoundClassifierTrainingSessionDelegate()
{
  char v0;

  SoundClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)();
  return v0 & 1;
}

BOOL protocol witness for TrainingSessionDelegate.shouldTransition(from:to:) in conformance SoundClassifierTrainingSessionDelegate(CreateML::MLPhase a1, CreateML::MLPhase a2)
{
  return SoundClassifierTrainingSessionDelegate.shouldTransition(from:to:)(a1, a2);
}

void protocol witness for TrainingSessionCodable.save(to:) in conformance SoundClassifierTrainingSessionDelegate(uint64_t a1)
{
  SoundClassifierTrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance SoundClassifierTrainingSessionDelegate()
{
  SoundClassifierTrainingSessionDelegate.restore(from:phase:)();
}

uint64_t specialized MLSoundClassifier.FeatureExtractor.init<A>(files:options:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v11;
  uint64_t v12;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;

  v6 = v5;
  *(_QWORD *)(v6 + 72) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v6 + 80) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  v11 = a5[1];
  *(_OWORD *)(v6 + 16) = *a5;
  *(_OWORD *)(v6 + 32) = v11;
  *(_OWORD *)(v6 + 41) = *(_OWORD *)((char *)a5 + 25);
  v12 = swift_unknownObjectRetain();
  *(_QWORD *)(v6 + 64) = specialized Array.init<A>(_:)(v12, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
  if (*(double *)a5 < 0.0 || *(double *)a5 >= 1.0)
  {
    swift_release();
    _StringGuts.grow(_:)(61);
    v14._object = (void *)0x800000021AFF3D10;
    v14._countAndFlagsBits = 0xD00000000000003ALL;
    String.append(_:)(v14);
    Double.write<A>(to:)();
    v15._countAndFlagsBits = 46;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(v16 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0xE000000000000000;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_BYTE *)(v17 + 48) = 0;
    swift_willThrow(0.0);
  }
  swift_unknownObjectRelease();
  return v6;
}

uint64_t specialized MLSoundClassifier.FeatureExtractor.init<A>(files:options:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v6;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = v2;
  *(_QWORD *)(v3 + 72) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v3 + 80) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  v6 = a2[1];
  *(_OWORD *)(v3 + 16) = *a2;
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)(v3 + 41) = *(_OWORD *)((char *)a2 + 25);
  *(_QWORD *)(v3 + 64) = a1;
  if (*(double *)a2 < 0.0 || *(double *)a2 >= 1.0)
  {
    swift_bridgeObjectRetain();
    swift_release();
    _StringGuts.grow(_:)(61);
    v8._object = (void *)0x800000021AFF3D10;
    v8._countAndFlagsBits = 0xD00000000000003ALL;
    String.append(_:)(v8);
    Double.write<A>(to:)();
    v9._countAndFlagsBits = 46;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v10 + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(v10 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0xE000000000000000;
    OUTLINED_FUNCTION_52_1();
    print(_:separator:terminator:)();
    OUTLINED_FUNCTION_12_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v11 = OUTLINED_FUNCTION_49_0();
    *v12 = 0;
    v12[1] = 0xE000000000000000;
    OUTLINED_FUNCTION_5_8(v11, (uint64_t)v12);
    OUTLINED_FUNCTION_101();
  }
  return v3;
}

BOOL specialized Sequence<>.lexicographicallyPrecedes<A>(_:)()
{
  Swift::String_optional v0;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v3;
  char v5;
  Swift::String_optional v6;
  void *v7;
  _BOOL8 v8;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      v3 = String.Iterator.next()();
      if (!v3.value._object)
      {
        swift_bridgeObjectRelease();
LABEL_15:
        swift_bridgeObjectRelease();
        v8 = 0;
        goto LABEL_17;
      }
      if (countAndFlagsBits == v3.value._countAndFlagsBits && object == v3.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v8 = 1;
          goto LABEL_17;
        }
        v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v5 & 1) != 0)
          goto LABEL_15;
      }
      v6 = String.Iterator.next()();
      countAndFlagsBits = v6.value._countAndFlagsBits;
      object = v6.value._object;
    }
    while (v6.value._object);
  }
  swift_bridgeObjectRelease();
  v7 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  v8 = v7 != 0;
LABEL_17:
  swift_bridgeObjectRelease();
  return v8;
}

id @nonobjc AVAudioFile.init(forReading:)(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  double v12;
  uint64_t v13;
  id v15;
  NSURL *v16;

  v2 = v1;
  v16 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v16);
  v5 = v4;
  v15 = 0;
  v6 = objc_msgSend(v2, sel_initForReading_error_, v4, &v15);

  v7 = v15;
  if (v6)
  {
    v8 = OUTLINED_FUNCTION_78();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow(v12);
    v13 = OUTLINED_FUNCTION_78();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  }
  return v6;
}

void sub_21AE77754(_QWORD *a1@<X8>)
{
  key path getter for AnnotatedFeature.annotation : AnnotatedFeature<MLShapedArray<Float>, String>(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>, a1);
}

void sub_21AE77770()
{
  key path setter for AnnotatedFeature.annotation : AnnotatedFeature<MLShapedArray<Float>, String>();
}

uint64_t sub_21AE77794()
{
  return MEMORY[0x24BEE0D10];
}

uint64_t outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t partial apply for closure #2 in SoundClassifierTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  return partial apply for closure #2 in SoundClassifierTrainingSessionDelegate.train(from:)(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))closure #2 in SoundClassifierTrainingSessionDelegate.train(from:));
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OUTLINED_FUNCTION_267();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 24) & ~v2;
  swift_release();
  v4 = v0 + v3;
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SoundClassifierTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  return partial apply for closure #2 in SoundClassifierTrainingSessionDelegate.train(from:)(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))closure #1 in SoundClassifierTrainingSessionDelegate.train(from:));
}

uint64_t partial apply for closure #2 in SoundClassifierTrainingSessionDelegate.train(from:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_267() - 8) + 80);
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + ((v4 + 24) & ~v4));
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>)
                 - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)((char *)v6);
  *a1 = v3;
}

{
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v2 = v3;
  }
  OUTLINED_FUNCTION_251();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)();
  *a1 = v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
}

{
  specialized MutableCollection<>.sort(by:)(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  Swift::Int v19;
  char *v20;
  uint64_t v21;
  Swift::Int v22;
  void (*v23)(void);
  uint64_t v24;
  char *v25;
  char *v26;
  Swift::String v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  _BOOL4 v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  Swift::Int v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  Swift::Int v55;
  char *v56;
  uint64_t v57;
  Swift::Int v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  char *v68;
  BOOL v69;
  _QWORD *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  char v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  Swift::Int v138;
  uint64_t v139;
  Swift::Int v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  void (*v150)(char *, uint64_t);
  void (*v151)(void);
  char *v152;
  char *v153;
  uint64_t v154;
  _QWORD *v155;
  char *object;
  char *v157;
  uint64_t v158;
  Swift::Int v159;
  Swift::Int v160;
  void (*countAndFlagsBits)(char *, uint64_t, uint64_t, char *);
  char *v162;
  uint64_t v163;

  v2 = v1;
  v154 = type metadata accessor for URL();
  v148 = *(_QWORD *)(v154 - 8);
  MEMORY[0x24BDAC7A8](v154);
  v153 = (char *)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v155 = *(_QWORD **)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v142 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v157 = (char *)&v136 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v152 = (char *)&v136 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v162 = (char *)&v136 - v12;
  v13 = *((_QWORD *)a1 + 1);
  v14 = _minimumMergeRunLength(_:)(v13);
  if (v14 >= v13)
  {
    if (v13 < 0)
      goto LABEL_141;
    if (v13)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v13, 1, a1);
    return;
  }
  v138 = v14;
  specialized static Array._allocateUninitialized(_:)(v13 / 2);
  v136 = v15;
  v145 = v16;
  v137 = v13;
  if (v13 <= 0)
    goto LABEL_104;
  v17 = 0;
  v18 = (char *)MEMORY[0x24BEE4AF8];
  v146 = a1;
  v163 = v5;
  while (1)
  {
    v19 = (Swift::Int)v17;
    v20 = v17 + 1;
    v141 = v18;
    v144 = v17;
    if ((uint64_t)(v17 + 1) >= v13)
    {
      v33 = (Swift::Int)(v17 + 1);
    }
    else
    {
      v143 = v2;
      v139 = *(_QWORD *)a1;
      v21 = v139;
      v160 = v155[9];
      v22 = v160;
      v23 = (void (*)(void))v155[2];
      v23();
      v24 = v21 + v22 * v19;
      v25 = v152;
      v151 = v23;
      ((void (*)(char *, uint64_t, uint64_t))v23)(v152, v24, v5);
      v26 = v153;
      AnnotatedFeature.feature.getter();
      v27 = URL.path(percentEncoded:)(1);
      countAndFlagsBits = (void (*)(char *, uint64_t, uint64_t, char *))v27._countAndFlagsBits;
      object = (char *)v27._object;
      v28 = *(void (**)(char *, uint64_t))(v148 + 8);
      v159 = v13;
      v29 = v5;
      v30 = v154;
      v28(v26, v154);
      AnnotatedFeature.feature.getter();
      URL.path(percentEncoded:)(1);
      v150 = v28;
      v28(v26, v30);
      LODWORD(v158) = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = (void (*)(char *, uint64_t))v155[1];
      v19 = (Swift::Int)v144;
      v31(v25, v29);
      v32 = v29;
      v13 = v159;
      v149 = (char *)v31;
      v31(v162, v32);
      v33 = v19 + 2;
      if (v19 + 2 >= v13)
      {
        v2 = v143;
      }
      else
      {
        v147 = v160 * (_QWORD)v20;
        v34 = v139;
        v140 = v160 * v33;
        while (1)
        {
          object = (char *)v33;
          v35 = v163;
          v36 = v151;
          v151();
          v37 = v152;
          ((void (*)(char *, uint64_t, uint64_t))v36)(v152, v34 + v147, v35);
          v38 = v153;
          AnnotatedFeature.feature.getter();
          countAndFlagsBits = (void (*)(char *, uint64_t, uint64_t, char *))URL.path(percentEncoded:)(1)._countAndFlagsBits;
          v39 = v154;
          v40 = v150;
          v150(v38, v154);
          AnnotatedFeature.feature.getter();
          URL.path(percentEncoded:)(1);
          v40(v38, v39);
          v41 = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v42 = (void (*)(char *, uint64_t))v149;
          ((void (*)(char *, uint64_t))v149)(v37, v35);
          v42(v162, v35);
          if (((v158 ^ v41) & 1) != 0)
            break;
          v33 = (Swift::Int)(object + 1);
          v13 = v159;
          v34 += v160;
          if ((uint64_t)(object + 1) >= v159)
          {
            v33 = v159;
            v2 = v143;
            v19 = (Swift::Int)v144;
            a1 = v146;
            goto LABEL_13;
          }
        }
        v2 = v143;
        v19 = (Swift::Int)v144;
        a1 = v146;
        v33 = (Swift::Int)object;
        v13 = v159;
      }
LABEL_13:
      v43 = v141;
      v5 = v163;
      if ((v158 & 1) != 0)
      {
        if (v33 < v19)
          goto LABEL_142;
        if (v19 < v33)
        {
          v44 = 0;
          v45 = v160;
          v46 = v160 * (v33 - 1);
          v47 = v33 * v160;
          v48 = v19;
          v49 = v19 * v160;
          do
          {
            if (v48 != v33 + v44 - 1)
            {
              v143 = v2;
              v50 = v139;
              if (!v139)
                goto LABEL_148;
              v51 = v139 + v49;
              v158 = v139 + v46;
              v52 = v163;
              countAndFlagsBits = (void (*)(char *, uint64_t, uint64_t, char *))v155[4];
              countAndFlagsBits(v142, v139 + v49, v163, v43);
              if (v49 < v46 || v51 >= v50 + v47)
              {
                v54 = v158;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                v54 = v158;
                if (v49 != v46)
                  swift_arrayInitWithTakeBackToFront();
              }
              ((void (*)(uint64_t, char *, uint64_t))countAndFlagsBits)(v54, v142, v52);
              v43 = v141;
              a1 = v146;
              v2 = v143;
              v45 = v160;
            }
            ++v48;
            --v44;
            v46 -= v45;
            v47 -= v45;
            v49 += v45;
          }
          while (v48 < v33 + v44);
          v5 = v163;
          v19 = (Swift::Int)v144;
          v13 = v159;
        }
      }
    }
    if (v33 < v13)
    {
      if (__OFSUB__(v33, v19))
        goto LABEL_140;
      if (v33 - v19 < v138)
      {
        if (__OFADD__(v19, v138))
          goto LABEL_143;
        if (v19 + v138 >= v13)
          v55 = v13;
        else
          v55 = v19 + v138;
        if (v55 < v19)
        {
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        if (v33 != v55)
        {
          v143 = v2;
          v56 = (char *)v155[9];
          v147 = v155[2];
          v57 = (_QWORD)v56 * (v33 - 1);
          v149 = v56;
          v58 = v33 * (_QWORD)v56;
          v140 = v55;
          do
          {
            v59 = 0;
            object = (char *)v33;
            v150 = (void (*)(char *, uint64_t))v58;
            v151 = (void (*)(void))v57;
            while (1)
            {
              v160 = v19;
              v60 = *(_QWORD *)a1;
              v159 = v58 + v59;
              v61 = (void (*)(char *, uint64_t, uint64_t))v147;
              ((void (*)(void))v147)();
              v158 = v57 + v59;
              v62 = v57 + v59 + v60;
              v63 = v152;
              v61(v152, v62, v5);
              v64 = v153;
              AnnotatedFeature.feature.getter();
              countAndFlagsBits = (void (*)(char *, uint64_t, uint64_t, char *))URL.path(percentEncoded:)(1)._countAndFlagsBits;
              v65 = a1;
              v66 = *(void (**)(char *, uint64_t))(v148 + 8);
              v67 = v154;
              v66(v64, v154);
              AnnotatedFeature.feature.getter();
              URL.path(percentEncoded:)(1);
              v68 = v64;
              v5 = v163;
              v66(v68, v67);
              v69 = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v70 = v155;
              v71 = (void (*)(char *, uint64_t))v155[1];
              v71(v63, v5);
              v71(v162, v5);
              if (!v69)
                break;
              v72 = *(_QWORD *)v65;
              if (!*(_QWORD *)v65)
                goto LABEL_146;
              a1 = v65;
              v58 = (Swift::Int)v150;
              v57 = (uint64_t)v151;
              v73 = (char *)v151 + v72 + v59;
              v74 = (void (*)(char *, char *, uint64_t))v70[4];
              v74(v157, (char *)v150 + v72 + v59, v5);
              swift_arrayInitWithTakeFrontToBack();
              v74(v73, v157, v5);
              v59 -= (uint64_t)v149;
              v19 = v160 + 1;
              v75 = object;
              if (object == (char *)(v160 + 1))
                goto LABEL_46;
            }
            a1 = v65;
            v75 = object;
            v58 = (Swift::Int)v150;
            v57 = (uint64_t)v151;
LABEL_46:
            v33 = (Swift::Int)(v75 + 1);
            v57 += (uint64_t)v149;
            v58 += (Swift::Int)v149;
            v19 = (Swift::Int)v144;
          }
          while (v33 != v140);
          v33 = v140;
          v2 = v143;
        }
      }
    }
    if (v33 < v19)
      goto LABEL_139;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    object = (char *)v33;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v18 = v141;
    else
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v141 + 2) + 1, 1, v141);
    v78 = *((_QWORD *)v18 + 2);
    v77 = *((_QWORD *)v18 + 3);
    v79 = v78 + 1;
    if (v78 >= v77 >> 1)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v77 > 1), v78 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v79;
    v80 = v18 + 32;
    v81 = &v18[16 * v78 + 32];
    v82 = object;
    *(_QWORD *)v81 = v19;
    *((_QWORD *)v81 + 1) = v82;
    if (v78)
      break;
    v79 = 1;
LABEL_96:
    v13 = *((_QWORD *)a1 + 1);
    v17 = object;
    if ((uint64_t)object >= v13)
      goto LABEL_105;
  }
  while (1)
  {
    v83 = v79 - 1;
    if (v79 >= 4)
    {
      v88 = &v80[16 * v79];
      v89 = *((_QWORD *)v88 - 8);
      v90 = *((_QWORD *)v88 - 7);
      v94 = __OFSUB__(v90, v89);
      v91 = v90 - v89;
      if (v94)
        goto LABEL_124;
      v93 = *((_QWORD *)v88 - 6);
      v92 = *((_QWORD *)v88 - 5);
      v94 = __OFSUB__(v92, v93);
      v86 = v92 - v93;
      v87 = v94;
      if (v94)
        goto LABEL_125;
      v95 = v79 - 2;
      v96 = &v80[16 * v79 - 32];
      v98 = *(_QWORD *)v96;
      v97 = *((_QWORD *)v96 + 1);
      v94 = __OFSUB__(v97, v98);
      v99 = v97 - v98;
      if (v94)
        goto LABEL_126;
      v94 = __OFADD__(v86, v99);
      v100 = v86 + v99;
      if (v94)
        goto LABEL_128;
      if (v100 >= v91)
      {
        v118 = &v80[16 * v83];
        v120 = *(_QWORD *)v118;
        v119 = *((_QWORD *)v118 + 1);
        v94 = __OFSUB__(v119, v120);
        v121 = v119 - v120;
        if (v94)
          goto LABEL_134;
        v111 = v86 < v121;
        goto LABEL_85;
      }
    }
    else
    {
      if (v79 != 3)
      {
        v112 = *((_QWORD *)v18 + 4);
        v113 = *((_QWORD *)v18 + 5);
        v94 = __OFSUB__(v113, v112);
        v105 = v113 - v112;
        v106 = v94;
        goto LABEL_79;
      }
      v85 = *((_QWORD *)v18 + 4);
      v84 = *((_QWORD *)v18 + 5);
      v94 = __OFSUB__(v84, v85);
      v86 = v84 - v85;
      v87 = v94;
    }
    if ((v87 & 1) != 0)
      goto LABEL_127;
    v95 = v79 - 2;
    v101 = &v80[16 * v79 - 32];
    v103 = *(_QWORD *)v101;
    v102 = *((_QWORD *)v101 + 1);
    v104 = __OFSUB__(v102, v103);
    v105 = v102 - v103;
    v106 = v104;
    if (v104)
      goto LABEL_129;
    v107 = &v80[16 * v83];
    v109 = *(_QWORD *)v107;
    v108 = *((_QWORD *)v107 + 1);
    v94 = __OFSUB__(v108, v109);
    v110 = v108 - v109;
    if (v94)
      goto LABEL_131;
    if (__OFADD__(v105, v110))
      goto LABEL_133;
    if (v105 + v110 >= v86)
    {
      v111 = v86 < v110;
LABEL_85:
      if (v111)
        v83 = v95;
      goto LABEL_87;
    }
LABEL_79:
    if ((v106 & 1) != 0)
      goto LABEL_130;
    v114 = &v80[16 * v83];
    v116 = *(_QWORD *)v114;
    v115 = *((_QWORD *)v114 + 1);
    v94 = __OFSUB__(v115, v116);
    v117 = v115 - v116;
    if (v94)
      goto LABEL_132;
    if (v117 < v105)
      goto LABEL_96;
LABEL_87:
    v122 = v83 - 1;
    if (v83 - 1 >= v79)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    v123 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_147;
    a1 = v18;
    v124 = &v80[16 * v122];
    v125 = *(_QWORD *)v124;
    v126 = &v80[16 * v83];
    v127 = *((_QWORD *)v126 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)(v123 + v155[9] * *(_QWORD *)v124, v123 + v155[9] * *(_QWORD *)v126, v123 + v155[9] * v127, v145);
    if (v2)
      break;
    if (v127 < v125)
      goto LABEL_121;
    if (v83 > *((_QWORD *)a1 + 2))
      goto LABEL_122;
    *(_QWORD *)v124 = v125;
    *(_QWORD *)&v80[16 * v122 + 8] = v127;
    v128 = *((_QWORD *)a1 + 2);
    if (v83 >= v128)
      goto LABEL_123;
    v79 = v128 - 1;
    memmove(&v80[16 * v83], v126 + 16, 16 * (v128 - 1 - v83));
    v18 = a1;
    *((_QWORD *)a1 + 2) = v128 - 1;
    a1 = v146;
    v5 = v163;
    if (v128 <= 2)
      goto LABEL_96;
  }
LABEL_102:
  swift_bridgeObjectRelease();
  if (v137 >= -1)
    goto LABEL_117;
  __break(1u);
LABEL_104:
  v18 = (char *)MEMORY[0x24BEE4AF8];
  v79 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_105:
  if (v79 >= 2)
  {
    v129 = *(_QWORD *)a1;
    while (1)
    {
      v130 = v79 - 2;
      if (v79 < 2)
        break;
      if (!v129)
        goto LABEL_149;
      v131 = v18;
      v132 = *(_QWORD *)&v18[16 * v130 + 32];
      v133 = *(_QWORD *)&v18[16 * v79 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)(v129 + v155[9] * v132, v129 + v155[9] * *(_QWORD *)&v18[16 * v79 + 16], v129 + v155[9] * v133, v145);
      if (v2)
        goto LABEL_102;
      if (v133 < v132)
        goto LABEL_136;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v131 = specialized _ArrayBuffer._consumeAndCreateNew()();
      if (v130 >= *((_QWORD *)v131 + 2))
        goto LABEL_137;
      v134 = &v131[16 * v130 + 32];
      *(_QWORD *)v134 = v132;
      *((_QWORD *)v134 + 1) = v133;
      v135 = *((_QWORD *)v131 + 2);
      if (v79 > v135)
        goto LABEL_138;
      memmove(&v131[16 * v79 + 16], &v131[16 * v79 + 32], 16 * (v135 - v79));
      v18 = v131;
      *((_QWORD *)v131 + 2) = v135 - 1;
      v79 = v135 - 1;
      if (v135 <= 2)
        goto LABEL_116;
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
LABEL_116:
  swift_bridgeObjectRelease();
  if (v137 >= -1)
  {
LABEL_117:
    *(_QWORD *)(v136 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  Swift::Int *v4;
  Swift::Int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  char *v31;
  Swift::Int v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  char *v36;
  Swift::Int v37;
  uint64_t v38;
  char *v39;
  Swift::Int v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  BOOL v61;
  int v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  Swift::Int v66;
  Swift::Int v67;
  Swift::Int v68;
  uint64_t v69;
  Swift::Int v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  char *v75;
  Swift::Int v76;
  uint64_t v77;
  uint64_t v78;
  Swift::Int v79;
  uint64_t v80;
  char *v81;
  Swift::Int v82;
  Swift::Int v83;
  void (*v84)(char *, char *, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v96;
  void (*v97)(char *, uint64_t);
  Swift::Int v98;
  uint64_t v99;
  char *v100;
  void (*v101)(uint64_t, char *, uint64_t);
  Swift::Int v102;
  void (*v103)(char *, uint64_t);
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  Swift::Int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  char v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  Swift::Int v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  char *v165;
  Swift::Int v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  Swift::Int v172;
  uint64_t v173;
  uint64_t v174;
  Swift::Int v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  Swift::Int v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(uint64_t, uint64_t);
  void (*v184)(char *, uint64_t);
  char *v185;
  uint64_t v186;
  Swift::Int v187;
  char *v188;
  char *v189;
  uint64_t v190;
  Swift::Int v191;
  uint64_t v192;
  Swift::Int *v193;
  _QWORD *v194;

  OUTLINED_FUNCTION_8_1();
  v3 = v0;
  v5 = v4;
  v186 = OUTLINED_FUNCTION_78();
  v182 = *(_QWORD *)(v186 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v185 = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v194 = *(_QWORD **)(v8 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_208();
  v174 = v10;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_65_5();
  v188 = v12;
  OUTLINED_FUNCTION_29_3();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v164 - v15;
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_12_10();
  MEMORY[0x24BDAC7A8](v17);
  v178 = (char *)&v164 - v18;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_228();
  MEMORY[0x24BDAC7A8](v20);
  v171 = (char *)&v164 - v21;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_68_3(v23);
  v193 = v5;
  v24 = v5[1];
  v25 = _minimumMergeRunLength(_:)(v24);
  if (v25 >= v24)
  {
    if (v24 < 0)
      goto LABEL_156;
    if (v24)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)();
LABEL_134:
    OUTLINED_FUNCTION_7();
    return;
  }
  v26 = v25;
  specialized static Array._allocateUninitialized(_:)(v24 / 2);
  v167 = v28;
  v29 = v27;
  v168 = v24;
  if (v24 <= 0)
    goto LABEL_120;
  v166 = v26;
  v173 = v2;
  v180 = v1;
  v165 = v16;
  v176 = v8;
  v30 = 0;
  v31 = (char *)MEMORY[0x24BEE4AF8];
  v177 = v27;
  while (1)
  {
    v32 = v30;
    v33 = v30 + 1;
    v175 = v30;
    if (v30 + 1 >= v24)
    {
      v47 = v30 + 1;
    }
    else
    {
      v191 = v24;
      v34 = *v193;
      v35 = v194[9];
      v36 = (char *)v194[2];
      v37 = v30;
      v38 = v176;
      ((void (*)(char *, Swift::Int, uint64_t))v36)(v170, *v193 + v35 * v33, v176);
      v172 = v34;
      v192 = v35;
      v189 = v36;
      ((void (*)(char *, Swift::Int, uint64_t))v36)(v171, v34 + v35 * v37, v38);
      v39 = v185;
      AnnotatedFeature.feature.getter();
      v190 = OUTLINED_FUNCTION_115_2();
      v187 = v40;
      v41 = *(void (**)(char *, uint64_t))(v182 + 8);
      v42 = v186;
      v41(v39, v186);
      OUTLINED_FUNCTION_170();
      v43 = OUTLINED_FUNCTION_115_2();
      v45 = v44;
      v184 = v41;
      v41(v39, v42);
      if (v190 == v43 && v187 == v45)
        LODWORD(v190) = 0;
      else
        LODWORD(v190) = OUTLINED_FUNCTION_65_8();
      v24 = v191;
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_30();
      v48 = (void (*)(char *, uint64_t))v194[1];
      v49 = v176;
      v48(v171, v176);
      v183 = (void (*)(uint64_t, uint64_t))v48;
      v48(v170, v49);
      v32 = v175;
      v47 = v175 + 2;
      if (v175 + 2 < v24)
      {
        OUTLINED_FUNCTION_247();
        v181 = v192 * v33;
        v50 = v172;
        v179 = v192 * v47;
        v51 = v176;
        v52 = v173;
        while (1)
        {
          v187 = v47;
          v53 = v189;
          ((void (*)(uint64_t, Swift::Int, uint64_t))v189)(v52, v50 + v179, v51);
          ((void (*)(char *, Swift::Int, uint64_t))v53)(v178, v50 + v181, v51);
          v3 = v185;
          AnnotatedFeature.feature.getter();
          v54 = OUTLINED_FUNCTION_232();
          v31 = v55;
          v56 = v186;
          v57 = v184;
          v184(v3, v186);
          OUTLINED_FUNCTION_170();
          v58 = OUTLINED_FUNCTION_232();
          v60 = v59;
          v57(v3, v56);
          v61 = v54 == v58 && v31 == v60;
          v62 = v61 ? 0 : OUTLINED_FUNCTION_65_8();
          OUTLINED_FUNCTION_80();
          OUTLINED_FUNCTION_30();
          v51 = v176;
          v63 = v183;
          v183((uint64_t)v178, v176);
          v52 = v173;
          v63(v173, v51);
          v24 = v191;
          if (((v190 ^ v62) & 1) != 0)
            break;
          v47 = v187 + 1;
          v50 += v192;
          if (v187 + 1 >= v191)
          {
            v47 = v191;
            OUTLINED_FUNCTION_136_1();
            goto LABEL_24;
          }
        }
        OUTLINED_FUNCTION_136_1();
        v47 = v187;
LABEL_24:
        v32 = v175;
      }
      if ((v190 & 1) != 0)
      {
        if (v47 < v32)
          goto LABEL_157;
        if (v32 < v47)
        {
          v169 = v31;
          v64 = 0;
          v65 = v192 * (v47 - 1);
          v66 = v32;
          v67 = v47 * v192;
          v68 = v66;
          v69 = v66 * v192;
          v187 = v47;
          do
          {
            if (v68 != v47 + v64 - 1)
            {
              v70 = v172;
              if (!v172)
                goto LABEL_163;
              v71 = v3;
              v72 = v172 + v69;
              v189 = (char *)(v172 + v65);
              v73 = v176;
              v190 = v194[4];
              ((void (*)(uint64_t, Swift::Int, uint64_t))v190)(v174, v172 + v69, v176);
              if (v69 < v65 || v72 >= v70 + v67)
              {
                v75 = v189;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                v75 = v189;
                if (v69 != v65)
                  swift_arrayInitWithTakeBackToFront();
              }
              ((void (*)(char *, uint64_t, uint64_t))v190)(v75, v174, v73);
              v3 = v71;
              v47 = v187;
            }
            ++v68;
            --v64;
            v65 -= v192;
            v67 -= v192;
            v69 += v192;
          }
          while (v68 < v47 + v64);
          v31 = v169;
          v32 = v175;
          v24 = v191;
        }
      }
    }
    if (v47 < v24)
    {
      if (__OFSUB__(v47, v32))
        goto LABEL_155;
      if (v47 - v32 < v166)
      {
        if (__OFADD__(v32, v166))
          goto LABEL_158;
        if (v32 + v166 >= v24)
          v76 = v24;
        else
          v76 = v32 + v166;
        if (v76 < v32)
        {
LABEL_159:
          __break(1u);
          goto LABEL_160;
        }
        if (v47 != v76)
        {
          OUTLINED_FUNCTION_247();
          v77 = v194[9];
          v179 = v194[2];
          v78 = v77 * (v47 - 1);
          v181 = v77;
          v79 = v47 * v77;
          v80 = v176;
          v81 = v165;
          v31 = v180;
          v172 = v82;
          do
          {
            v3 = 0;
            v187 = v47;
            v183 = (void (*)(uint64_t, uint64_t))v79;
            v184 = (void (*)(char *, uint64_t))v78;
            while (1)
            {
              v83 = *v193;
              v190 = (uint64_t)&v3[v79];
              v191 = v32;
              v84 = (void (*)(char *, char *, uint64_t))v179;
              ((void (*)(char *, char *, uint64_t))v179)(v31, &v3[v79 + v83], v80);
              v192 = (uint64_t)v3;
              v189 = &v3[v78];
              v84(v81, &v3[v78 + v83], v80);
              v85 = v185;
              AnnotatedFeature.feature.getter();
              v86 = OUTLINED_FUNCTION_229();
              v87 = v80;
              v3 = v81;
              v89 = v88;
              v90 = *(void (**)(char *, uint64_t))(v182 + 8);
              v90(v85, v186);
              AnnotatedFeature.feature.getter();
              v91 = OUTLINED_FUNCTION_229();
              v93 = v92;
              v94 = OUTLINED_FUNCTION_154_0();
              ((void (*)(uint64_t))v90)(v94);
              if (v86 == v91 && v89 == v93)
                break;
              v96 = OUTLINED_FUNCTION_65_8();
              OUTLINED_FUNCTION_80();
              OUTLINED_FUNCTION_30();
              v97 = (void (*)(char *, uint64_t))v194[1];
              v97(v3, v80);
              v31 = v180;
              v97(v180, v80);
              v81 = v3;
              if ((v96 & 1) == 0)
                goto LABEL_62;
              v98 = *v193;
              v79 = (Swift::Int)v183;
              v78 = (uint64_t)v184;
              if (!*v193)
                goto LABEL_161;
              v99 = v192;
              v100 = (char *)v184 + v98 + v192;
              v101 = (void (*)(uint64_t, char *, uint64_t))v194[4];
              v101((uint64_t)v188, (char *)v183 + v98 + v192, v80);
              swift_arrayInitWithTakeFrontToBack();
              v101((uint64_t)v100, v188, v80);
              v3 = (char *)(v99 - v181);
              v32 = v191 + 1;
              v102 = v187;
              if (v187 == v191 + 1)
                goto LABEL_63;
            }
            OUTLINED_FUNCTION_63_1();
            v103 = (void (*)(char *, uint64_t))v194[1];
            v103(v3, v87);
            v31 = v180;
            v103(v180, v87);
            v80 = v87;
            v81 = v3;
LABEL_62:
            v102 = v187;
            v79 = (Swift::Int)v183;
            v78 = (uint64_t)v184;
LABEL_63:
            v47 = v102 + 1;
            v78 += v181;
            v79 += v181;
            v32 = v175;
          }
          while (v47 != v172);
          v47 = v172;
          OUTLINED_FUNCTION_136_1();
        }
      }
    }
    if (v47 < v32)
      goto LABEL_154;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v31 = OUTLINED_FUNCTION_241(0, *((_QWORD *)v31 + 2) + 1);
    v105 = *((_QWORD *)v31 + 2);
    v104 = *((_QWORD *)v31 + 3);
    v106 = v105 + 1;
    v29 = v177;
    v187 = v47;
    if (v105 >= v104 >> 1)
    {
      v156 = OUTLINED_FUNCTION_241((char *)(v104 > 1), v105 + 1);
      v29 = v177;
      v31 = v156;
    }
    *((_QWORD *)v31 + 2) = v106;
    v107 = v31 + 32;
    v108 = &v31[16 * v105 + 32];
    v109 = v187;
    *(_QWORD *)v108 = v32;
    *((_QWORD *)v108 + 1) = v109;
    if (v105)
      break;
    v106 = 1;
LABEL_113:
    v24 = v193[1];
    v30 = v187;
    if (v187 >= v24)
      goto LABEL_121;
  }
  while (1)
  {
    v110 = v106 - 1;
    if (v106 >= 4)
    {
      v115 = &v107[16 * v106];
      v116 = *((_QWORD *)v115 - 8);
      v117 = *((_QWORD *)v115 - 7);
      v121 = __OFSUB__(v117, v116);
      v118 = v117 - v116;
      if (v121)
        goto LABEL_139;
      v120 = *((_QWORD *)v115 - 6);
      v119 = *((_QWORD *)v115 - 5);
      v121 = __OFSUB__(v119, v120);
      v113 = v119 - v120;
      v114 = v121;
      if (v121)
        goto LABEL_140;
      v122 = v106 - 2;
      v123 = &v107[16 * v106 - 32];
      v125 = *(_QWORD *)v123;
      v124 = *((_QWORD *)v123 + 1);
      v121 = __OFSUB__(v124, v125);
      v126 = v124 - v125;
      if (v121)
        goto LABEL_141;
      v121 = __OFADD__(v113, v126);
      v127 = v113 + v126;
      if (v121)
        goto LABEL_143;
      if (v127 >= v118)
      {
        v145 = &v107[16 * v110];
        v147 = *(_QWORD *)v145;
        v146 = *((_QWORD *)v145 + 1);
        v121 = __OFSUB__(v146, v147);
        v148 = v146 - v147;
        if (v121)
          goto LABEL_149;
        v138 = v113 < v148;
        goto LABEL_102;
      }
    }
    else
    {
      if (v106 != 3)
      {
        v139 = *((_QWORD *)v31 + 4);
        v140 = *((_QWORD *)v31 + 5);
        v121 = __OFSUB__(v140, v139);
        v132 = v140 - v139;
        v133 = v121;
        goto LABEL_96;
      }
      v112 = *((_QWORD *)v31 + 4);
      v111 = *((_QWORD *)v31 + 5);
      v121 = __OFSUB__(v111, v112);
      v113 = v111 - v112;
      v114 = v121;
    }
    if ((v114 & 1) != 0)
      goto LABEL_142;
    v122 = v106 - 2;
    v128 = &v107[16 * v106 - 32];
    v130 = *(_QWORD *)v128;
    v129 = *((_QWORD *)v128 + 1);
    v131 = __OFSUB__(v129, v130);
    v132 = v129 - v130;
    v133 = v131;
    if (v131)
      goto LABEL_144;
    v134 = &v107[16 * v110];
    v136 = *(_QWORD *)v134;
    v135 = *((_QWORD *)v134 + 1);
    v121 = __OFSUB__(v135, v136);
    v137 = v135 - v136;
    if (v121)
      goto LABEL_146;
    if (__OFADD__(v132, v137))
      goto LABEL_148;
    if (v132 + v137 >= v113)
    {
      v138 = v113 < v137;
LABEL_102:
      if (v138)
        v110 = v122;
      goto LABEL_104;
    }
LABEL_96:
    if ((v133 & 1) != 0)
      goto LABEL_145;
    v141 = &v107[16 * v110];
    v143 = *(_QWORD *)v141;
    v142 = *((_QWORD *)v141 + 1);
    v121 = __OFSUB__(v142, v143);
    v144 = v142 - v143;
    if (v121)
      goto LABEL_147;
    if (v144 < v132)
      goto LABEL_113;
LABEL_104:
    v149 = v110 - 1;
    if (v110 - 1 >= v106)
    {
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
    if (!*v193)
      goto LABEL_162;
    v150 = v31;
    v151 = &v107[16 * v149];
    v152 = *(_QWORD *)v151;
    v153 = &v107[16 * v110];
    v154 = *((_QWORD *)v153 + 1);
    OUTLINED_FUNCTION_246();
    v3 = v0;
    if (v0)
      break;
    if (v154 < v152)
      goto LABEL_136;
    if (v110 > *((_QWORD *)v150 + 2))
      goto LABEL_137;
    *(_QWORD *)v151 = v152;
    *(_QWORD *)&v107[16 * v149 + 8] = v154;
    v155 = *((_QWORD *)v150 + 2);
    if (v110 >= v155)
      goto LABEL_138;
    v106 = v155 - 1;
    memmove(&v107[16 * v110], v153 + 16, 16 * (v155 - 1 - v110));
    *((_QWORD *)v150 + 2) = v155 - 1;
    v31 = v150;
    v29 = v177;
    if (v155 <= 2)
      goto LABEL_113;
  }
LABEL_118:
  OUTLINED_FUNCTION_80();
  if (v168 >= -1)
    goto LABEL_133;
  __break(1u);
LABEL_120:
  v31 = (char *)MEMORY[0x24BEE4AF8];
  v106 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_121:
  if (v106 >= 2)
  {
    v157 = *v193;
    while (1)
    {
      v158 = v106 - 2;
      if (v106 < 2)
        break;
      if (!v157)
        goto LABEL_164;
      v159 = *(_QWORD *)&v31[16 * v158 + 32];
      v160 = *(_QWORD *)&v31[16 * v106 + 24];
      v161 = v29;
      OUTLINED_FUNCTION_246();
      if (v0)
        goto LABEL_118;
      if (v160 < v159)
        goto LABEL_151;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v31 = specialized _ArrayBuffer._consumeAndCreateNew()();
      if (v158 >= *((_QWORD *)v31 + 2))
        goto LABEL_152;
      v162 = &v31[16 * v158 + 32];
      *(_QWORD *)v162 = v159;
      *((_QWORD *)v162 + 1) = v160;
      v163 = *((_QWORD *)v31 + 2);
      if (v106 > v163)
        goto LABEL_153;
      memmove(&v31[16 * v106 + 16], &v31[16 * v106 + 32], 16 * (v163 - v106));
      *((_QWORD *)v31 + 2) = v163 - 1;
      v106 = v163 - 1;
      v29 = v161;
      if (v163 <= 2)
        goto LABEL_132;
    }
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
    goto LABEL_159;
  }
LABEL_132:
  OUTLINED_FUNCTION_80();
  if (v168 >= -1)
  {
LABEL_133:
    *(_QWORD *)(v167 + 16) = 0;
    swift_bridgeObjectRelease();
    goto LABEL_134;
  }
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  BOOL v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void);
  _QWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t countAndFlagsBits;
  char *v54;

  v37 = a1;
  v7 = type metadata accessor for URL();
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v51 = *(_QWORD **)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v48 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v40 = (char *)&v35 - v13;
  result = MEMORY[0x24BDAC7A8](v12);
  v54 = (char *)&v35 - v15;
  v47 = a3;
  v36 = a2;
  if (a3 != a2)
  {
    v16 = v51[9];
    v38 = (void (*)(void))v51[2];
    v39 = a4;
    v17 = v16 * (v47 - 1);
    v44 = v16;
    v18 = v16 * v47;
    while (2)
    {
      v19 = 0;
      v52 = v37;
      v45 = v18;
      v46 = v17;
      do
      {
        v20 = *a4;
        v50 = v18 + v19;
        v21 = v38;
        v38();
        v49 = v17 + v19;
        v22 = v17 + v19 + v20;
        v23 = v40;
        ((void (*)(char *, uint64_t, uint64_t))v21)(v40, v22, v9);
        v24 = v41;
        AnnotatedFeature.feature.getter();
        countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
        v25 = *(void (**)(char *, uint64_t))(v42 + 8);
        v26 = v9;
        v27 = v43;
        v25(v24, v43);
        AnnotatedFeature.feature.getter();
        URL.path(percentEncoded:)(1);
        v28 = v24;
        v18 = v45;
        v29 = v27;
        v9 = v26;
        v25(v28, v29);
        v30 = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)();
        swift_bridgeObjectRelease();
        v17 = v46;
        a4 = v39;
        swift_bridgeObjectRelease();
        v31 = (void (*)(char *, uint64_t))v51[1];
        v31(v23, v9);
        result = ((uint64_t (*)(char *, uint64_t))v31)(v54, v9);
        if (!v30)
          break;
        v32 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        v33 = v32 + v17 + v19;
        v34 = (void (*)(char *, uint64_t, uint64_t))v51[4];
        v34(v48, v32 + v18 + v19, v9);
        swift_arrayInitWithTakeFrontToBack();
        result = ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v33, v48, v9);
        v19 -= v44;
        ++v52;
      }
      while (v47 != v52);
      v17 += v44;
      v18 += v44;
      if (++v47 != v36)
        continue;
      break;
    }
  }
  return result;
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t, uint64_t);
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;

  OUTLINED_FUNCTION_8_1();
  v47 = v3;
  v5 = v4;
  v7 = v6;
  v36 = v8;
  v9 = OUTLINED_FUNCTION_78();
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_38_4(v11, v0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v48 = *(_QWORD **)(v12 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_208();
  v46 = v14;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_228();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_169();
  v45 = v5;
  v35 = v7;
  if (v5 != v7)
  {
    v17 = v48[9];
    v37 = (void (*)(uint64_t, uint64_t, uint64_t))v48[2];
    v38 = v2;
    v18 = v17 * (v5 - 1);
    v42 = v17;
    v19 = v17 * v5;
    while (2)
    {
      v20 = 0;
      v49 = v36;
      v43 = v19;
      v44 = v18;
      while (1)
      {
        v21 = *v47;
        v37(v2, v19 + v20 + *v47, v12);
        v50 = v20;
        v37(v1, v18 + v20 + v21, v12);
        AnnotatedFeature.feature.getter();
        v22 = OUTLINED_FUNCTION_115_2();
        v24 = v23;
        v25 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        v25(v39, v41);
        OUTLINED_FUNCTION_170();
        v26 = v12;
        v27 = OUTLINED_FUNCTION_115_2();
        v29 = v28;
        v25(v39, v41);
        if (v22 == v27 && v24 == v29)
          break;
        v31 = OUTLINED_FUNCTION_65_8();
        OUTLINED_FUNCTION_12_0();
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_144_0();
        v29(v38, v26);
        v12 = v26;
        v2 = v38;
        v19 = v43;
        v18 = v44;
        if ((v31 & 1) != 0)
        {
          v32 = *v47;
          if (!*v47)
          {
            __break(1u);
            return;
          }
          v33 = v32 + v44 + v50;
          v34 = (void (*)(uint64_t, uint64_t, uint64_t))v48[4];
          v34(v46, v32 + v43 + v50, v12);
          OUTLINED_FUNCTION_106_2();
          v34(v33, v46, v12);
          v20 = v50 - v42;
          if (v45 != ++v49)
            continue;
        }
        goto LABEL_13;
      }
      OUTLINED_FUNCTION_63_1();
      OUTLINED_FUNCTION_144_0();
      v29(v38, v26);
      v12 = v26;
      v2 = v38;
      v19 = v43;
      v18 = v44;
LABEL_13:
      v18 += v42;
      v19 += v42;
      if (++v45 != v35)
        continue;
      break;
    }
  }
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  OUTLINED_FUNCTION_8_1();
  if (v2 != v1)
  {
    v4 = v2;
    v5 = v1;
    v6 = v0;
    v7 = *v3;
    v8 = *v3 + 16 * v2;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      v10 = *v9;
      v11 = v9[1];
      v12 = v6;
      v13 = (_QWORD *)v8;
      do
      {
        v14 = v10 == *(v13 - 2) && v11 == *(v13 - 1);
        if (v14 || (OUTLINED_FUNCTION_34_31() & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return;
        }
        v10 = *v13;
        v11 = v13[1];
        *(_OWORD *)v13 = *((_OWORD *)v13 - 1);
        *(v13 - 1) = v11;
        *(v13 - 2) = v10;
        v13 -= 2;
        ++v12;
      }
      while (v4 != v12);
      ++v4;
      v8 += 16;
      if (v4 != v5)
        continue;
      break;
    }
  }
  OUTLINED_FUNCTION_7();
}

void specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v17;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD);
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  void (*v33)(char *, uint64_t);
  void (*v34)(_QWORD);
  unint64_t v36;
  BOOL v37;
  void (*v38)(_QWORD);
  void (*v39)(_QWORD);
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  BOOL v49;
  void (*v50)(char *, uint64_t);
  unint64_t v51;
  unint64_t v52;
  unint64_t v54;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v60;
  void (*v61)(void);
  uint64_t v62;
  unint64_t v63;
  void (*v64)(_QWORD);
  unint64_t countAndFlagsBits;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;

  v8 = type metadata accessor for URL();
  v69 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v68 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v10 = MEMORY[0x24BDAC7A8](v77);
  v67 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v76 = (char *)&v60 - v13;
  v71 = v12;
  v14 = *(_QWORD *)(v12 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v15 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_78;
  v17 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_79;
  v19 = v15 / v14;
  v20 = v17 / v14;
  v66 = *(_QWORD *)(v12 + 72);
  if (v15 / v14 >= v17 / v14)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v17 / v14);
    v21 = (void (*)(_QWORD))(a4 + v20 * v14);
    v24 = v20 * v14 < 1 || a1 >= a2;
    v23 = v14;
    if (!v24)
    {
      v62 = -v14;
      v25 = v70;
      v61 = *(void (**)(void))(v71 + 16);
      v73 = a4;
      v74 = a1;
      do
      {
        v78 = a2;
        v72 = (unint64_t)v21;
        v27 = v61;
        v26 = v62;
        v75 = a3 + v62;
        v28 = v77;
        v64 = (void (*)(_QWORD))((char *)v21 + v62);
        countAndFlagsBits = a3;
        v61();
        v29 = a2 + v26;
        v30 = v67;
        v63 = v29;
        ((void (*)(char *))v27)(v67);
        v31 = v68;
        AnnotatedFeature.feature.getter();
        URL.path(percentEncoded:)(1);
        v32 = *(void (**)(char *, uint64_t))(v69 + 8);
        v32(v31, v25);
        AnnotatedFeature.feature.getter();
        URL.path(percentEncoded:)(1);
        v32(v31, v25);
        LOBYTE(v26) = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v33 = *(void (**)(char *, uint64_t))(v71 + 8);
        v33(v30, v28);
        v33(v76, v28);
        if ((v26 & 1) != 0)
        {
          v34 = (void (*)(_QWORD))v72;
          a3 = v75;
          if (countAndFlagsBits < v78 || v75 >= v78)
          {
            a2 = v63;
            swift_arrayInitWithTakeFrontToBack();
            a4 = v73;
            v36 = v74;
            v23 = v66;
          }
          else
          {
            v36 = v74;
            v23 = v66;
            a2 = v63;
            if (countAndFlagsBits != v78)
              swift_arrayInitWithTakeBackToFront();
            a4 = v73;
          }
          v21 = v34;
        }
        else
        {
          a3 = v75;
          v37 = countAndFlagsBits < v72 || v75 >= v72;
          a2 = v78;
          if (v37)
          {
            v38 = v64;
            swift_arrayInitWithTakeFrontToBack();
            v21 = v38;
            a4 = v73;
            v36 = v74;
            v23 = v66;
          }
          else
          {
            v36 = v74;
            v23 = v66;
            if (countAndFlagsBits == v72)
            {
              v21 = v64;
            }
            else
            {
              v39 = v64;
              swift_arrayInitWithTakeBackToFront();
              v21 = v39;
            }
            a4 = v73;
          }
        }
      }
      while ((unint64_t)v21 > a4 && a2 > v36);
    }
  }
  else
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v15 / v14);
    v21 = (void (*)(_QWORD))(a4 + v19 * v14);
    if (v19 * v14 >= 1 && a2 < a3)
    {
      v41 = a2;
      v64 = *(void (**)(_QWORD))(v71 + 16);
      v75 = a3;
      v72 = a4 + v19 * v14;
      v42 = v67;
      v43 = v68;
      while (1)
      {
        v73 = a4;
        v74 = a1;
        v78 = v41;
        v44 = v76;
        v45 = v77;
        v46 = (void (*)(char *, unint64_t, uint64_t))v64;
        v64(v76);
        v46(v42, a4, v45);
        AnnotatedFeature.feature.getter();
        countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
        v47 = v70;
        v48 = *(void (**)(char *, uint64_t))(v69 + 8);
        v48(v43, v70);
        AnnotatedFeature.feature.getter();
        URL.path(percentEncoded:)(1);
        v48(v43, v47);
        v49 = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v50 = *(void (**)(char *, uint64_t))(v71 + 8);
        v50(v42, v45);
        v50(v44, v45);
        if (v49)
        {
          v23 = v66;
          v51 = v78 + v66;
          a4 = v73;
          v52 = v74;
          if (v74 >= v78 && v74 < v51)
          {
            v56 = v75;
            if (v74 != v78)
              swift_arrayInitWithTakeBackToFront();
            goto LABEL_67;
          }
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v54 = v78;
          v23 = v66;
          v52 = v74;
          a4 = v73 + v66;
          if (v74 >= v73 && v74 < a4)
          {
            v56 = v75;
            if (v74 != v73)
              swift_arrayInitWithTakeBackToFront();
            v51 = v54;
            goto LABEL_67;
          }
          swift_arrayInitWithTakeFrontToBack();
          v51 = v54;
        }
        v56 = v75;
LABEL_67:
        v21 = (void (*)(_QWORD))v72;
        a1 = v52 + v23;
        v57 = a4 >= v72 || v51 >= v56;
        v41 = v51;
        if (v57)
          goto LABEL_72;
      }
    }
    v23 = v14;
  }
LABEL_72:
  v58 = (uint64_t)v21 - a4;
  if (v23 != -1 || v58 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v58 / v23);
    return;
  }
LABEL_80:
  __break(1u);
}

void specialized _merge<A>(low:mid:high:buffer:by:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  unint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v58;
  int64_t v62;
  uint64_t v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, unint64_t, uint64_t);
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;

  OUTLINED_FUNCTION_8_1();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_36(v11, v64);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  v73 = v13;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_65_5();
  v72 = v15;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_226();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_169();
  v75 = v18;
  v19 = *(_QWORD *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v20 = v7 - v9;
  if (v7 - v9 == 0x8000000000000000 && v19 == -1)
    goto LABEL_83;
  v22 = v5 - v7;
  if (v5 - v7 == 0x8000000000000000 && v19 == -1)
    goto LABEL_84;
  v67 = v5;
  v24 = v20 / v19;
  v25 = v22 / v19;
  v71 = *(_QWORD *)(v18 + 72);
  if (v20 / v19 >= v22 / v19)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v22 / v19);
    v29 = v3 + v25 * v19;
    if (v25 * v19 >= 1 && v9 < v7)
    {
      v48 = -v19;
      v65 = *(void (**)(uint64_t))(v75 + 16);
      v66 = -v19;
      v49 = v67;
      v79 = v3;
      do
      {
        v50 = v49;
        v77 = v29;
        v70 = v29 + v48;
        v65(v72);
        v81 = v7;
        v68 = v7 + v48;
        v65(v73);
        AnnotatedFeature.feature.getter();
        v51 = OUTLINED_FUNCTION_230();
        v53 = v52;
        OUTLINED_FUNCTION_254();
        OUTLINED_FUNCTION_170();
        v54 = OUTLINED_FUNCTION_230();
        v56 = v55;
        OUTLINED_FUNCTION_254();
        if (v51 == v54 && v53 == v56)
          v58 = 0;
        else
          v58 = OUTLINED_FUNCTION_65_8();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_30();
        v48 = v66;
        v49 = v50 + v66;
        OUTLINED_FUNCTION_139_1(v73);
        OUTLINED_FUNCTION_139_1(v72);
        if ((v58 & 1) != 0)
        {
          if (v50 < v7 || v49 >= v7)
          {
            v7 = v68;
            OUTLINED_FUNCTION_106_2();
          }
          else
          {
            v7 = v68;
            if (v50 != v81)
              OUTLINED_FUNCTION_107_2();
          }
          v29 = v77;
          v3 = v79;
        }
        else
        {
          if (v50 < v77 || v49 >= v77)
          {
            v29 = v70;
            OUTLINED_FUNCTION_106_2();
          }
          else
          {
            v29 = v70;
            if (v50 != v77)
              OUTLINED_FUNCTION_107_2();
          }
          v3 = v79;
        }
        v19 = v71;
      }
      while (v29 > v3 && v7 > v9);
    }
  }
  else
  {
    v26 = OUTLINED_FUNCTION_154_0();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v26, v27);
    v28 = v24 * v19;
    v29 = v3 + v24 * v19;
    if (v28 >= 1 && v7 < v67)
    {
      v74 = *(void (**)(uint64_t, unint64_t, uint64_t))(v75 + 16);
      v69 = v0;
      v76 = v29;
      while (1)
      {
        v80 = v7;
        v74(v0, v7, v12);
        v78 = v3;
        v74(v1, v3, v12);
        OUTLINED_FUNCTION_191();
        v31 = OUTLINED_FUNCTION_231();
        v33 = v32;
        OUTLINED_FUNCTION_280();
        OUTLINED_FUNCTION_191();
        v34 = OUTLINED_FUNCTION_231();
        v36 = v35;
        OUTLINED_FUNCTION_280();
        if (v31 == v34 && v33 == v36)
          break;
        v38 = OUTLINED_FUNCTION_65_8();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_30();
        v39 = *(void (**)(uint64_t))(v75 + 8);
        v40 = OUTLINED_FUNCTION_189_0();
        v39(v40);
        ((void (*)(uint64_t, uint64_t))v39)(v69, v12);
        v19 = v71;
        if ((v38 & 1) == 0)
          goto LABEL_28;
        v7 += v71;
        v3 = v78;
        if (v9 >= v80 && v9 < v7)
        {
          v42 = v67;
          v0 = v69;
          if (v9 != v80)
            OUTLINED_FUNCTION_107_2();
          goto LABEL_37;
        }
LABEL_33:
        OUTLINED_FUNCTION_106_2();
        v42 = v67;
        v0 = v69;
LABEL_37:
        v29 = v76;
        v9 += v19;
        if (v3 >= v76 || v7 >= v42)
          goto LABEL_77;
      }
      OUTLINED_FUNCTION_63_1();
      v43 = *(void (**)(uint64_t))(v75 + 8);
      v44 = OUTLINED_FUNCTION_189_0();
      v43(v44);
      ((void (*)(uint64_t, uint64_t))v43)(v69, v12);
      v19 = v71;
LABEL_28:
      v3 = v78 + v19;
      if (v9 >= v78 && v9 < v3)
      {
        v0 = v69;
        if (v9 != v78)
          OUTLINED_FUNCTION_107_2();
        v42 = v67;
        goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
LABEL_77:
  v62 = v29 - v3;
  if (v19 != -1 || v62 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v3, v62 / v19);
    OUTLINED_FUNCTION_7();
    return;
  }
LABEL_85:
  __break(1u);
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

void partial apply for specialized closure #1 in BidirectionalCollection.last(where:)(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  specialized closure #1 in BidirectionalCollection.last(where:)(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t outlined init with take of DataFrame?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [Float] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    v8 = a2;
    result = MEMORY[0x22075B938](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21AE7A264(_QWORD *a1@<X8>)
{
  key path getter for AnnotatedFeature.annotation : AnnotatedFeature<MLShapedArray<Float>, String>(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>, a1);
}

void sub_21AE7A280()
{
  key path setter for AnnotatedFeature.annotation : AnnotatedFeature<MLShapedArray<Float>, String>();
}

uint64_t OUTLINED_FUNCTION_4_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD, unint64_t, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v1 + 288);
  v3 = *(_QWORD *)(v1 + 296) + 1;
  *(_QWORD *)(v1 + 296) = v3;
  *(_QWORD *)(v1 + 304) = v0;
  return v2(*(_QWORD *)(v1 + 264), *(_QWORD *)(v1 + 32)+ ((*(unsigned __int8 *)(v1 + 344) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 344))+ *(_QWORD *)(v1 + 280) * v3, *(_QWORD *)(v1 + 248));
}

uint64_t OUTLINED_FUNCTION_5_20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v3[14];
  v4 = v3[15];
  v6 = v3[13];
  *(_QWORD *)(v0 + 16) = v1;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v0+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v2, v4, v6);
}

uint64_t OUTLINED_FUNCTION_6_20()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_9_18()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_10_17(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 240);
}

uint64_t OUTLINED_FUNCTION_11_15(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 240);
}

uint64_t OUTLINED_FUNCTION_12_16(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_13_21()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[25] + 8))(v0[26], v0[24]);
}

uint64_t OUTLINED_FUNCTION_18_11(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_19_15()
{
  return FullyConnectedNetworkClassifierModel.applied(to:eventHandler:)();
}

uint64_t OUTLINED_FUNCTION_20_11()
{
  return LogisticRegressionClassifierModel.applied(to:eventHandler:)();
}

uint64_t OUTLINED_FUNCTION_28_14(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_29_10()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[28] + 8))(v0[30], v0[27]);
}

uint64_t OUTLINED_FUNCTION_30_10()
{
  return Event.init(origin:itemCount:totalItemCount:metrics:)();
}

uint64_t OUTLINED_FUNCTION_33_10(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = 1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 4;
  return swift_willThrow(0.0);
}

uint64_t OUTLINED_FUNCTION_41_6()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t OUTLINED_FUNCTION_42_7(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_43_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?(v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 8))(v11, a11);
}

uint64_t OUTLINED_FUNCTION_48_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 256);
  *(_DWORD *)(v1 + 344) = *(_DWORD *)(v2 + 80);
  *(_QWORD *)(v1 + 280) = *(_QWORD *)(v2 + 72);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 + 296) = 0;
  *(_QWORD *)(v1 + 304) = v0;
  *(_QWORD *)(v1 + 288) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_51_8()
{
  return AnnotatedPrediction.init(prediction:annotation:)();
}

uint64_t OUTLINED_FUNCTION_53_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v2, v1, v3);
}

uint64_t OUTLINED_FUNCTION_54_4()
{
  return type metadata accessor for MetricsKey();
}

uint64_t OUTLINED_FUNCTION_55_7()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_56_5()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[37];
  v2 = v0[35];
  if (v0[56] < v1)
    v1 = v0[56];
  v0[68] = v1;
  v0[69] = v2;
  return static os_log_type_t.info.getter();
}

uint64_t OUTLINED_FUNCTION_57_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_59_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_61_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_62_9@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t OUTLINED_FUNCTION_63_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, a4);
}

uint64_t OUTLINED_FUNCTION_64_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_65_8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_66_5()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_68_5()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_69_4()
{
  void *v0;
  Swift::String v1;

  v1._countAndFlagsBits = 0xD000000000000012;
  v1._object = v0;
  String.append(_:)(v1);
}

void OUTLINED_FUNCTION_70_5(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_72_3()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 256) + 8))(v0, *(_QWORD *)(v1 + 248));
}

uint64_t OUTLINED_FUNCTION_73_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_75_7(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_76_3()
{
  return FullyConnectedNetworkClassifierModel.applied(to:eventHandler:)();
}

uint64_t OUTLINED_FUNCTION_77_4()
{
  return LogisticRegressionClassifierModel.applied(to:eventHandler:)();
}

void OUTLINED_FUNCTION_78_6()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_80_4()
{
  return 0x62614C7373616C63;
}

uint64_t OUTLINED_FUNCTION_81_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = a1;
  *(_QWORD *)(v2 - 104) = a2;
  return swift_bridgeObjectRetain();
}

double OUTLINED_FUNCTION_83_5()
{
  double v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_85_2@<X0>(uint64_t a1@<X1>, char a2@<W8>, double a3@<D0>)
{
  *(_BYTE *)(a1 + 48) = a2;
  return swift_willThrow(a3);
}

uint64_t OUTLINED_FUNCTION_87_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_89_2()
{
  return type metadata accessor for MLSoundClassifier.PersistentParameters();
}

uint64_t OUTLINED_FUNCTION_91_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void OUTLINED_FUNCTION_94_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with copy of MLTrainingSessionParameters(a1, v3, a3);
}

void OUTLINED_FUNCTION_95_2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of URL?(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_96_3()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_100_2()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 336) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_101_3()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 320) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_103_2()
{
  return 0x7365727574616566;
}

void OUTLINED_FUNCTION_104_2(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t OUTLINED_FUNCTION_105_1()
{
  return type metadata accessor for MLSoundClassifier.Model();
}

uint64_t OUTLINED_FUNCTION_106_2()
{
  return swift_arrayInitWithTakeFrontToBack();
}

uint64_t OUTLINED_FUNCTION_107_2()
{
  return swift_arrayInitWithTakeBackToFront();
}

uint64_t OUTLINED_FUNCTION_108_2()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_109_2()
{
  return AnnotatedFeature.annotation.getter();
}

uint64_t OUTLINED_FUNCTION_111_1()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_112_2(uint64_t a1)
{
  return SoundClassifierTrainingSessionDelegate.buildMetrics(eventCollector:)(a1);
}

uint64_t OUTLINED_FUNCTION_113_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3 + *(int *)(a1 + 20), v1, v2);
}

uint64_t OUTLINED_FUNCTION_114_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3 + *(int *)(a1 + 20), v1, v2);
}

uint64_t OUTLINED_FUNCTION_115_2()
{
  return URL.path(percentEncoded:)(1)._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_116_2(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_119_1()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_120_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_121_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_123_2()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t OUTLINED_FUNCTION_124_1(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_127_1()
{
  return DataFrame.init(contentsOfSFrameDirectory:columns:rows:)();
}

uint64_t OUTLINED_FUNCTION_130_1()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_131_1()
{
  return type metadata accessor for MLSoundClassifier.Classifier();
}

uint64_t OUTLINED_FUNCTION_134_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_138_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandActionClassifier.DataSource(v2, a2);
}

uint64_t OUTLINED_FUNCTION_139_1(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_140_0()
{
  return URL.appendingPathExtension(_:)();
}

uint64_t OUTLINED_FUNCTION_141_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_143_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 208) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_144_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_145_1()
{
  return CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)();
}

uint64_t OUTLINED_FUNCTION_146_1()
{
  return AnnotatedFeature.feature.getter();
}

uint64_t OUTLINED_FUNCTION_147_0()
{
  return AnnotatedFeature.feature.getter();
}

uint64_t OUTLINED_FUNCTION_152_0()
{
  return URL.appendingPathComponent(_:)();
}

void OUTLINED_FUNCTION_153_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandActionClassifier.DataSource(v2, a2);
}

uint64_t OUTLINED_FUNCTION_154_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_155_0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 328) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_156_0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 312) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_157_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t OUTLINED_FUNCTION_159_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_160()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 136) + 8))(v0, *(_QWORD *)(v1 - 120));
}

uint64_t OUTLINED_FUNCTION_163_0()
{
  return URL.appendingPathExtension(_:)();
}

void OUTLINED_FUNCTION_164_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of URL?(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_165_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_167_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_168_0()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_170()
{
  return AnnotatedFeature.feature.getter();
}

unint64_t OUTLINED_FUNCTION_171_0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = v1;
  *(_BYTE *)(v2 - 104) = v0;
  return MLSoundClassifier.ModelParameters.FeatureExtractorType.description.getter();
}

uint64_t OUTLINED_FUNCTION_172@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 464);
}

uint64_t OUTLINED_FUNCTION_174_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

void OUTLINED_FUNCTION_175_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_179_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_180_0()
{
  return 0x676E696E69617274;
}

uint64_t OUTLINED_FUNCTION_183_0()
{
  return static Task<>.checkCancellation()();
}

uint64_t OUTLINED_FUNCTION_184_0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  return v1(v0);
}

uint64_t OUTLINED_FUNCTION_186_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, *(_QWORD *)(v2 - 232));
}

uint64_t OUTLINED_FUNCTION_187_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void OUTLINED_FUNCTION_188_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandActionClassifier.DataSource(v2, a2);
}

uint64_t OUTLINED_FUNCTION_189_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_190()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_191()
{
  return AnnotatedFeature.feature.getter();
}

uint64_t OUTLINED_FUNCTION_194_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_196_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

void OUTLINED_FUNCTION_198_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandActionClassifier.DataSource(v2, a2);
}

uint64_t OUTLINED_FUNCTION_200_0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 232))(a1, *(_QWORD *)(v1 - 144));
}

uint64_t OUTLINED_FUNCTION_203_0()
{
  return Double.description.getter();
}

void OUTLINED_FUNCTION_204_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandActionClassifier.DataSource(v2, a2);
}

uint64_t OUTLINED_FUNCTION_206_0()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_208_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_209_0()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_210_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 200);
}

unint64_t OUTLINED_FUNCTION_211_0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = v0;
  *(_BYTE *)(v2 - 104) = v1;
  return MLSoundClassifier.ModelParameters.FeatureExtractorType.description.getter();
}

uint64_t OUTLINED_FUNCTION_212_0()
{
  return 0;
}

void OUTLINED_FUNCTION_213_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 176) = (char *)&a9 - v9;
}

uint64_t OUTLINED_FUNCTION_215_0()
{
  return 0x6C65646F6DLL;
}

void OUTLINED_FUNCTION_216_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandActionClassifier.DataSource(v2, a2);
}

void OUTLINED_FUNCTION_217_0(_QWORD *a1)
{
  uint64_t *v1;

  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(a1, v1);
}

void OUTLINED_FUNCTION_218_0(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, v1);
}

uint64_t OUTLINED_FUNCTION_219_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 - 232);
  *(_QWORD *)(v3 - 216) = a3;
  return a3(a1, a2, v4);
}

uint64_t OUTLINED_FUNCTION_221_0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_222()
{
  return 0x697461756C617665;
}

uint64_t OUTLINED_FUNCTION_223_0()
{
  return 0x676E696E69617274;
}

uint64_t OUTLINED_FUNCTION_229()
{
  return URL.path(percentEncoded:)(1)._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_230()
{
  return URL.path(percentEncoded:)(1)._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_231()
{
  return URL.path(percentEncoded:)(1)._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_232()
{
  return URL.path(percentEncoded:)(1)._countAndFlagsBits;
}

void OUTLINED_FUNCTION_235(void (*a1)(_QWORD, _QWORD))
{
  SoundClassifierTrainingSessionDelegate.resumeFeatureExtraction(from:)(a1);
}

unint64_t OUTLINED_FUNCTION_238()
{
  return lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
}

uint64_t OUTLINED_FUNCTION_240()
{
  uint64_t v0;

  return v0;
}

char *OUTLINED_FUNCTION_241(char *a1, int64_t a2)
{
  char *v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_243(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(a1, v1, v2);
}

void OUTLINED_FUNCTION_244(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  outlined init with copy of URL?(a1, v1, v2);
}

void OUTLINED_FUNCTION_245(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandActionClassifier.DataSource(a1, v1);
}

void OUTLINED_FUNCTION_246()
{
  specialized _merge<A>(low:mid:high:buffer:by:)();
}

void OUTLINED_FUNCTION_247()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 288) = v0;
  *(_QWORD *)(v2 - 320) = v1;
}

void OUTLINED_FUNCTION_248(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandActionClassifier.DataSource(v2, a2);
}

uint64_t OUTLINED_FUNCTION_249()
{
  return BinaryInteger.description.getter();
}

uint64_t OUTLINED_FUNCTION_250()
{
  return 0x69746164696C6176;
}

uint64_t OUTLINED_FUNCTION_253()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t OUTLINED_FUNCTION_254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_255()
{
  return Column.init(name:capacity:)();
}

uint64_t OUTLINED_FUNCTION_256(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
  return type metadata accessor for Event();
}

id OUTLINED_FUNCTION_258()
{
  return specialized EventCollector.getLast<A>(metric:type:)();
}

uint64_t OUTLINED_FUNCTION_259()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_261()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_264()
{
  return 1;
}

uint64_t OUTLINED_FUNCTION_265()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 464);
}

uint64_t OUTLINED_FUNCTION_267()
{
  return type metadata accessor for TrainingTablePrinter(0);
}

uint64_t OUTLINED_FUNCTION_268()
{
  return MLSoundClassifier.FeatureExtractor.extractFeatures()();
}

uint64_t OUTLINED_FUNCTION_269()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_271(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_272()
{
  uint64_t v0;
  double v1;

  return specialized static MLSoundClassifier.filterFilesForFeatureExtractor<A>(labeledFiles:featureExtractionTimeWindowSize:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_273()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_274()
{
  return type metadata accessor for AnyColumn();
}

uint64_t OUTLINED_FUNCTION_276(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 152))(a1, *(_QWORD *)(v1 - 168));
}

uint64_t OUTLINED_FUNCTION_277(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  return specialized MLSoundClassifier.FeatureExtractor.init<A>(files:options:)(a1, a2, a3, a4, a5);
}

uint64_t OUTLINED_FUNCTION_280()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_282()
{
  return swift_bridgeObjectRelease();
}

uint64_t MLImageClassifier.ImageAugmentationOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MLImageClassifier.ImageAugmentationOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static MLImageClassifier.ImageAugmentationOptions.blur.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLImageClassifier.ImageAugmentationOptions.flip.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLImageClassifier.ImageAugmentationOptions.exposure.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLImageClassifier.ImageAugmentationOptions.noise.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLImageClassifier.ImageAugmentationOptions.rotation.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void static MLImageClassifier.ImageAugmentationOptions.crop.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

unint64_t lazy protocol witness table accessor for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLImageClassifier.ImageAugmentationOptions, &type metadata for MLImageClassifier.ImageAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLImageClassifier.ImageAugmentationOptions, &type metadata for MLImageClassifier.ImageAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLImageClassifier.ImageAugmentationOptions, &type metadata for MLImageClassifier.ImageAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions;
  if (!lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLImageClassifier.ImageAugmentationOptions, &type metadata for MLImageClassifier.ImageAugmentationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.ImageAugmentationOptions and conformance MLImageClassifier.ImageAugmentationOptions);
  }
  return result;
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance MLImageClassifier.ImageAugmentationOptions@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return MLImageClassifier.ImageAugmentationOptions.init(rawValue:)(*a1, a2);
}

void protocol witness for SetAlgebra.union(_:) in conformance MLImageClassifier.ImageAugmentationOptions(_QWORD *a1@<X8>)
{
  specialized OptionSet.union(_:)(a1);
}

void protocol witness for SetAlgebra.intersection(_:) in conformance MLImageClassifier.ImageAugmentationOptions(_QWORD *a1@<X8>)
{
  specialized OptionSet.intersection(_:)(a1);
}

void specialized OptionSet.intersection(_:)(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_11_16(a1);
}

void protocol witness for SetAlgebra.symmetricDifference(_:) in conformance MLImageClassifier.ImageAugmentationOptions(_QWORD *a1@<X8>)
{
  specialized OptionSet.symmetricDifference(_:)(a1);
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance MLImageClassifier.ImageAugmentationOptions(_QWORD *a1, uint64_t *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance MLImageClassifier.ImageAugmentationOptions(_QWORD *a1)
{
  return specialized OptionSet<>.remove(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance MLImageClassifier.ImageAugmentationOptions(_QWORD *a1)
{
  return specialized OptionSet<>.update(with:)(*a1);
}

void protocol witness for SetAlgebra.formUnion(_:) in conformance MLImageClassifier.ImageAugmentationOptions(uint64_t *a1)
{
  specialized OptionSet<>.formUnion(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance MLImageClassifier.ImageAugmentationOptions(uint64_t *a1)
{
  return specialized OptionSet<>.formIntersection(_:)(*a1);
}

uint64_t specialized OptionSet<>.formIntersection(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

void protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance MLImageClassifier.ImageAugmentationOptions(uint64_t *a1)
{
  specialized OptionSet<>.formSymmetricDifference(_:)(*a1);
}

void protocol witness for SetAlgebra.subtracting(_:) in conformance MLImageClassifier.ImageAugmentationOptions(_QWORD *a1@<X8>)
{
  specialized SetAlgebra.subtracting(_:)(a1);
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance MLImageClassifier.ImageAugmentationOptions(uint64_t *a1)
{
  uint64_t *v1;

  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

BOOL specialized SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance MLImageClassifier.ImageAugmentationOptions(uint64_t *a1)
{
  uint64_t *v1;

  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance MLImageClassifier.ImageAugmentationOptions(uint64_t *a1)
{
  uint64_t *v1;

  return specialized SetAlgebra.isSuperset(of:)(*a1, *v1);
}

BOOL specialized SetAlgebra.isSuperset(of:)(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance MLImageClassifier.ImageAugmentationOptions()
{
  uint64_t *v0;

  return OUTLINED_FUNCTION_35_13(*v0);
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance MLImageClassifier.ImageAugmentationOptions()
{
  return SetAlgebra.init<A>(_:)();
}

void protocol witness for SetAlgebra.subtract(_:) in conformance MLImageClassifier.ImageAugmentationOptions(uint64_t *a1)
{
  specialized SetAlgebra.subtract(_:)(*a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MLImageClassifier.ImageAugmentationOptions@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = MLImageClassifier.ImageAugmentationOptions.init(rawValue:)(*a1, (_QWORD *)a2);
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLImageClassifier.ImageAugmentationOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MLImageClassifier.ImageAugmentationOptions.rawValue.getter();
  *a1 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLImageClassifier.ImageAugmentationOptions(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

ValueMetadata *type metadata accessor for MLImageClassifier.ImageAugmentationOptions()
{
  return &type metadata for MLImageClassifier.ImageAugmentationOptions;
}

uint64_t closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  void (*v93)(uint64_t, uint64_t);
  uint64_t (*v94)(uint64_t, _QWORD);
  uint64_t (*v95)(uint64_t, _QWORD);
  uint64_t (*v96)(uint64_t, _QWORD);
  uint64_t (*v97)(uint64_t, _QWORD);
  void (*v98)(uint64_t, uint64_t);
  void (*v99)(uint64_t, uint64_t);
  uint64_t (*v100)(uint64_t, _QWORD);
  uint64_t (*v101)(uint64_t, _QWORD);
  void (*v102)(char *, uint64_t);
  uint64_t v103;
  uint64_t (*v104)(uint64_t, _QWORD);
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130[3];
  char v131[8];
  char v132[8];
  char v133[8];
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139[8];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v116 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
  OUTLINED_FUNCTION_4_26(v1, (uint64_t)v133);
  OUTLINED_FUNCTION_0_31(v2);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
  OUTLINED_FUNCTION_4_26(v5, (uint64_t)v132);
  OUTLINED_FUNCTION_0_31(v6);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
  OUTLINED_FUNCTION_4_26(v9, (uint64_t)&v144);
  OUTLINED_FUNCTION_0_31(v10);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
  OUTLINED_FUNCTION_4_26(v13, (uint64_t)&v143);
  OUTLINED_FUNCTION_0_31(v14);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
  OUTLINED_FUNCTION_4_26(v17, (uint64_t)&v142);
  OUTLINED_FUNCTION_0_31(v18);
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v20);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0);
  OUTLINED_FUNCTION_4_26(v21, (uint64_t)&v140);
  OUTLINED_FUNCTION_0_31(v22);
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v24);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  OUTLINED_FUNCTION_4_26(v25, (uint64_t)v131);
  OUTLINED_FUNCTION_0_31(v26);
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v28);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  OUTLINED_FUNCTION_4_26(v29, (uint64_t)v130);
  OUTLINED_FUNCTION_0_31(v30);
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v32);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  OUTLINED_FUNCTION_4_26(v33, (uint64_t)&v141);
  OUTLINED_FUNCTION_0_31(v34);
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_49();
  v118 = v37 - v36;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  OUTLINED_FUNCTION_4_26(v38, (uint64_t)v139);
  OUTLINED_FUNCTION_0_31(v39);
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_49();
  v120 = v42 - v41;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  OUTLINED_FUNCTION_4_26(v43, (uint64_t)&v136);
  OUTLINED_FUNCTION_0_31(v44);
  MEMORY[0x24BDAC7A8](v45);
  v47 = (char *)&v106 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v48);
  v50 = (char *)&v106 - v49;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  OUTLINED_FUNCTION_4_26(v51, (uint64_t)&v134);
  OUTLINED_FUNCTION_0_31(v52);
  MEMORY[0x24BDAC7A8](v53);
  OUTLINED_FUNCTION_49();
  v56 = v55 - v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0);
  v57 = type metadata accessor for CIImage();
  v58 = type metadata accessor for ImageBlur();
  v134 = v57;
  v135 = v58;
  v136 = MEMORY[0x24BDC60E0];
  OUTLINED_FUNCTION_3_24();
  v108 = v56;
  ApplyRandomly.init<A>(probability:_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0);
  v59 = type metadata accessor for ImageFlipper();
  v134 = v57;
  v135 = v59;
  v136 = MEMORY[0x24BDC5908];
  OUTLINED_FUNCTION_3_24();
  v107 = v50;
  OUTLINED_FUNCTION_12_17();
  v106 = v47;
  OUTLINED_FUNCTION_12_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0);
  OUTLINED_FUNCTION_13_22();
  v60 = type metadata accessor for ImageExposureAdjuster();
  v134 = v57;
  v135 = v60;
  v136 = MEMORY[0x24BDC5C88];
  OUTLINED_FUNCTION_3_24();
  OUTLINED_FUNCTION_8_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0);
  OUTLINED_FUNCTION_13_22();
  v61 = type metadata accessor for RandomImageNoiseGenerator();
  v134 = v57;
  v135 = v61;
  v136 = MEMORY[0x24BDC5DF8];
  OUTLINED_FUNCTION_3_24();
  OUTLINED_FUNCTION_8_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0);
  OUTLINED_FUNCTION_13_22();
  v62 = type metadata accessor for ImageRotator();
  v134 = v57;
  v135 = v62;
  v136 = MEMORY[0x24BDC5928];
  OUTLINED_FUNCTION_3_24();
  OUTLINED_FUNCTION_8_22();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0);
  OUTLINED_FUNCTION_13_22();
  v63 = type metadata accessor for RandomImageCropper();
  v134 = v57;
  v135 = v63;
  v136 = MEMORY[0x24BDC5AF0];
  OUTLINED_FUNCTION_2_29();
  OUTLINED_FUNCTION_8_22();
  v64 = lazy protocol witness table accessor for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  v65 = v117;
  static AugmentationBuilder.buildPartialBlock<A>(first:)();
  v134 = v57;
  v135 = v65;
  v136 = v64;
  v66 = OUTLINED_FUNCTION_2_29();
  v67 = lazy protocol witness table accessor for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  v68 = v123;
  v69 = v119;
  OUTLINED_FUNCTION_6_21();
  v134 = v57;
  v135 = v68;
  v136 = v69;
  v137 = v66;
  v138 = v67;
  v70 = OUTLINED_FUNCTION_2_29();
  v71 = v126;
  OUTLINED_FUNCTION_6_21();
  v134 = v57;
  v135 = v71;
  v136 = v69;
  v137 = v70;
  v138 = v67;
  v72 = OUTLINED_FUNCTION_2_29();
  v73 = lazy protocol witness table accessor for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  v74 = v129;
  v75 = v122;
  OUTLINED_FUNCTION_6_21();
  v134 = v57;
  v135 = v74;
  v136 = v75;
  v137 = v72;
  v138 = v73;
  v76 = OUTLINED_FUNCTION_2_29();
  v77 = lazy protocol witness table accessor for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  v78 = v112;
  v79 = v130[2];
  v80 = v125;
  OUTLINED_FUNCTION_6_21();
  v134 = v57;
  v135 = v79;
  v136 = v80;
  v137 = v76;
  v138 = v77;
  v81 = OUTLINED_FUNCTION_2_29();
  v82 = lazy protocol witness table accessor for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  v83 = v114;
  v84 = v78;
  v85 = v128;
  v86 = v113;
  v87 = v109;
  OUTLINED_FUNCTION_6_21();
  v134 = v57;
  v135 = v86;
  v136 = v87;
  v137 = v81;
  v138 = v82;
  OUTLINED_FUNCTION_2_29();
  lazy protocol witness table accessor for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>(&lazy protocol witness table cache variable for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>, &demangling cache variable for type metadata for ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0>);
  v88 = v83;
  v89 = v130[1];
  v90 = v115;
  v91 = v111;
  static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  OUTLINED_FUNCTION_5_21();
  v92(v88, v90);
  OUTLINED_FUNCTION_5_21();
  v93(v84, v86);
  OUTLINED_FUNCTION_5_21();
  OUTLINED_FUNCTION_34_3(v130[0], v94);
  OUTLINED_FUNCTION_5_21();
  OUTLINED_FUNCTION_34_3(v127, v95);
  OUTLINED_FUNCTION_5_21();
  OUTLINED_FUNCTION_34_3(v124, v96);
  OUTLINED_FUNCTION_5_21();
  OUTLINED_FUNCTION_34_3(v121, v97);
  OUTLINED_FUNCTION_5_21();
  v98(v89, v91);
  OUTLINED_FUNCTION_5_21();
  v99(v85, v87);
  OUTLINED_FUNCTION_5_21();
  OUTLINED_FUNCTION_34_3(v118, v100);
  OUTLINED_FUNCTION_5_21();
  OUTLINED_FUNCTION_34_3(v120, v101);
  v102 = *(void (**)(char *, uint64_t))(v110 + 8);
  v103 = v119;
  v102(v106, v119);
  v102(v107, v103);
  OUTLINED_FUNCTION_5_21();
  return OUTLINED_FUNCTION_34_3(v108, v104);
}

uint64_t closure #1 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for ImageBlur();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized RandomNumberGenerator.next<A>(upperBound:)(0x20uLL);
  ImageBlur.init(radius:)();
  type metadata accessor for CIImage();
  static AugmentationBuilder.buildPartialBlock<A>(first:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t partial apply for closure #1 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  return closure #1 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)();
}

unint64_t type metadata accessor for CIImage()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CIImage;
  if (!lazy cache variable for type metadata for CIImage)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CIImage);
  }
  return result;
}

uint64_t closure #2 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  return closure #2 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)(MEMORY[0x24BDC58E8]);
}

uint64_t closure #3 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  return closure #2 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)(MEMORY[0x24BDC58F0]);
}

uint64_t closure #2 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = type metadata accessor for ImageFlipper.Orientation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v6 = v5 - v4;
  v7 = type metadata accessor for ImageFlipper();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_49();
  v11 = v10 - v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6, *a1, v2);
  ImageFlipper.init(orientation:)();
  type metadata accessor for CIImage();
  static AugmentationBuilder.buildPartialBlock<A>(first:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t closure #4 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for ImageExposureAdjuster();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized RandomNumberGenerator.next<A>(upperBound:)(0xBuLL);
  ImageExposureAdjuster.init(amount:)();
  type metadata accessor for CIImage();
  static AugmentationBuilder.buildPartialBlock<A>(first:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t partial apply for closure #4 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  return closure #4 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)();
}

uint64_t closure #5 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for RandomImageNoiseGenerator();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized RandomNumberGenerator.next<A>(upperBound:)(0xBuLL);
  RandomImageNoiseGenerator.init(intensity:)();
  type metadata accessor for CIImage();
  static AugmentationBuilder.buildPartialBlock<A>(first:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t partial apply for closure #5 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  return closure #5 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)();
}

uint64_t closure #6 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for ImageRotator();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized RandomNumberGenerator.next<A>(upperBound:)(0xBuLL);
  ImageRotator.init(angle:)();
  type metadata accessor for CIImage();
  static AugmentationBuilder.buildPartialBlock<A>(first:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t partial apply for closure #6 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  return closure #6 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)();
}

uint64_t closure #7 in closure #1 in static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for RandomImageCropper();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  RandomImageCropper.init(scale:aspectRatio:)();
  type metadata accessor for CIImage();
  static AugmentationBuilder.buildPartialBlock<A>(first:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t lazy protocol witness table accessor for type ApplyRandomly<<<opaque return type of static AugmentationBuilder.buildPartialBlock<A>(first:)>>.0> and conformance ApplyRandomly<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22075B938](MEMORY[0x24BDC5950], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x22075BA28](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x22075BA28](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void OUTLINED_FUNCTION_0_31(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_2_29()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t OUTLINED_FUNCTION_3_24()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t OUTLINED_FUNCTION_4_26@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_21()
{
  return static AugmentationBuilder.buildPartialBlock<A, B>(accumulated:next:)();
}

uint64_t OUTLINED_FUNCTION_8_22()
{
  return ApplyRandomly.init<A>(probability:_:)();
}

void OUTLINED_FUNCTION_11_16(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
}

uint64_t OUTLINED_FUNCTION_12_17()
{
  return ApplyRandomly.init<A>(probability:_:)();
}

uint64_t OUTLINED_FUNCTION_13_22()
{
  return 255;
}

uint64_t static _FileUtilities.prepareForWriting(to:isDirectory:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSURL *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  id v15;
  id v17;
  id v18[2];

  v18[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = OUTLINED_FUNCTION_78();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v8 = v7 - v6;
  if ((a2 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  else
    URL.deletingLastPathComponent()();
  v9 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  v18[0] = 0;
  v13 = objc_msgSend(v9, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v11, 1, 0, v18);

  if ((v13 & 1) != 0)
  {
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    v15 = v18[0];
    return v14(v8, v4);
  }
  else
  {
    v17 = v18[0];
    _convertNSErrorToError(_:)();

    OUTLINED_FUNCTION_32_8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  }
}

id static _FileUtilities.isReadableFile(at:of:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_49();
  v3 = v2 - v1;
  v4 = type metadata accessor for UTType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - v7;
  URL.pathExtension.getter();
  static UTType.data.getter();
  UTType.init(filenameExtension:conformingTo:)();
  if (__swift_getEnumTagSinglePayload(v3, 1, v4) == 1)
  {
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v3, &demangling cache variable for type metadata for UTType?);
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v8, v3, v4);
  if ((UTType.conforms(to:)() & 1) == 0)
  {
    OUTLINED_FUNCTION_19_16();
    return 0;
  }
  v9 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v10 = URL.path.getter();
  v11 = (void *)MEMORY[0x22075A8AC](v10);
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v9, sel_isReadableFileAtPath_, v11);

  OUTLINED_FUNCTION_19_16();
  return v12;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *);
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v4 = v3;
  v31 = a1;
  v32 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v29 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v11);
  v33 = (char *)&v24 - v14;
  v34 = MEMORY[0x24BEE4AF8];
  v30 = *(_QWORD *)(a3 + 16);
  if (v30)
  {
    v15 = 0;
    v25 = a3;
    v27 = v8;
    v28 = v10;
    while (v15 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v17 = *(_QWORD *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v9);
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
        goto LABEL_15;
      v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v19 = v33;
      v18(v33, v8, v9);
      v20 = v31(v19);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v9);
        swift_bridgeObjectRelease();
        return swift_release();
      }
      if ((v20 & 1) != 0)
      {
        v18(v29, v33, v9);
        v21 = v34;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v26 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v21 = v34;
        }
        v23 = *(_QWORD *)(v21 + 16);
        if (v23 >= *(_QWORD *)(v21 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v21 = v34;
        }
        *(_QWORD *)(v21 + 16) = v23 + 1;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v18)(v21 + v16 + v23 * v17, v29, v9);
        v34 = v21;
        a3 = v25;
        v4 = v26;
        v10 = v28;
      }
      else
      {
        v10 = v28;
        result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v33, v9);
      }
      ++v15;
      v8 = v27;
      if (v30 == v15)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v9);
LABEL_15:
    swift_bridgeObjectRelease();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
    return v34;
  }
  return result;
}

void static _FileUtilities.collectFilesLabeledByDirectoryName(at:type:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *@<X8>);
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  BOOL v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, unint64_t, uint64_t);
  uint64_t v85;

  OUTLINED_FUNCTION_8_1();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v7 = OUTLINED_FUNCTION_78();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_19_5();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v68 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_50();
  v15 = v13 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v68 - v17;
  static _FileUtilities.getReadableSubdirectoriesOfDirectory(at:)();
  if (v0)
  {
    swift_bridgeObjectRelease();
LABEL_53:
    OUTLINED_FUNCTION_7();
    return;
  }
  v85 = v6;
  v83 = v15;
  v74 = v18;
  v80 = v1;
  v72 = v11;
  v70 = *(_QWORD *)(v19 + 16);
  if (v70)
  {
    v20 = (uint64_t)v74;
  }
  else
  {
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
    v21 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_21AFE7DA0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v22 + v21, v85, v7);
    v19 = v22;
    v23 = *(_QWORD *)(v22 + 16);
    v20 = (uint64_t)v74;
    v70 = v23;
    if (!v23)
    {
      v73 = v19;
      v24 = 0;
LABEL_51:
      OUTLINED_FUNCTION_110_1(v20, 1);
LABEL_52:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_11_17((uint64_t)v24);
      goto LABEL_53;
    }
  }
  v24 = 0;
  v25 = 0;
  v81 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v71 = v19 + v81;
  v26 = MEMORY[0x24BEE4B00];
  v79 = v7;
  v68[1] = v4;
  v69 = v8;
  v27 = (uint64_t)v72;
  v28 = v80;
  v73 = v19;
  while (v25 < *(_QWORD *)(v19 + 16))
  {
    v29 = *(_QWORD *)(v8 + 72);
    v78 = v25;
    v82 = v29;
    v84 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
    v84(v20, v71 + v29 * v25, v7);
    OUTLINED_FUNCTION_110_1(v20, 0);
    OUTLINED_FUNCTION_12_18(v20);
    if (v30)
      goto LABEL_52;
    OUTLINED_FUNCTION_22_9(v27, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
    v85 = URL.lastPathComponent.getter();
    v32 = v31;
    static _FileUtilities.readableFiles(at:type:)();
    if (v2)
    {
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_9_19(v27, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_11_17((uint64_t)v24);
      goto LABEL_53;
    }
    v76 = 0;
    v77 = v33;
    v34 = *(_QWORD *)(v33 + 16);
    v75 = v34;
    if (v34)
    {
      v35 = v33 + v81;
      swift_bridgeObjectRetain();
      v36 = v83;
      while (1)
      {
        v84(v36, v35, v7);
        OUTLINED_FUNCTION_110_1(v36, 0);
        OUTLINED_FUNCTION_12_18(v36);
        if (v30)
        {
          OUTLINED_FUNCTION_31_13();
          v8 = v69;
          goto LABEL_36;
        }
        OUTLINED_FUNCTION_7_19(v28, v36);
        OUTLINED_FUNCTION_199();
        OUTLINED_FUNCTION_11_17((uint64_t)v24);
        swift_isUniquelyReferenced_nonNull_native();
        OUTLINED_FUNCTION_3_25();
        OUTLINED_FUNCTION_30_11();
        if (v39)
          break;
        v40 = v37;
        v41 = v38;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
        if (OUTLINED_FUNCTION_10_18())
        {
          OUTLINED_FUNCTION_17_9();
          OUTLINED_FUNCTION_120_0();
          if (!v30)
            goto LABEL_59;
          v40 = v42;
        }
        OUTLINED_FUNCTION_27_16();
        if ((v41 & 1) == 0)
        {
          OUTLINED_FUNCTION_26_14(v26 + 8 * (v40 >> 6));
          v44 = (uint64_t *)(v43 + 16 * v40);
          *v44 = v85;
          v44[1] = v32;
          *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v40) = MEMORY[0x24BEE4AF8];
          v45 = *(_QWORD *)(v26 + 16);
          v46 = v45 + 1;
          v47 = __OFADD__(v45, 1);
          swift_bridgeObjectRetain();
          if (v47)
            goto LABEL_55;
          *(_QWORD *)(v26 + 16) = v46;
        }
        swift_bridgeObjectRetain();
        v48 = *(_QWORD *)(v26 + 56);
        swift_bridgeObjectRelease();
        v49 = *(_QWORD *)(v48 + 8 * v40);
        v50 = OUTLINED_FUNCTION_20_12();
        *(_QWORD *)(v48 + 8 * v40) = v49;
        if ((v50 & 1) == 0)
        {
          OUTLINED_FUNCTION_23_12();
          v49 = v54;
          *(_QWORD *)(v48 + 8 * v40) = v54;
        }
        v51 = *(_QWORD *)(v49 + 16);
        if (v51 >= *(_QWORD *)(v49 + 24) >> 1)
        {
          OUTLINED_FUNCTION_23_12();
          v49 = v55;
          *(_QWORD *)(v48 + 8 * v40) = v55;
        }
        *(_QWORD *)(v49 + 16) = v51 + 1;
        v28 = v80;
        v52 = v49 + v81;
        v53 = v82;
        v7 = v79;
        OUTLINED_FUNCTION_7_19(v52 + v51 * v82, v80);
        OUTLINED_FUNCTION_104();
        v35 += v53;
        v24 = specialized thunk for @callee_guaranteed () -> (@owned [URL]);
        --v34;
        v36 = v83;
        if (!v34)
          goto LABEL_31;
      }
      __break(1u);
LABEL_55:
      __break(1u);
      break;
    }
    swift_bridgeObjectRetain();
    v36 = v83;
LABEL_31:
    OUTLINED_FUNCTION_110_1(v36, 1);
    OUTLINED_FUNCTION_31_13();
    v8 = v69;
    if (v75)
      goto LABEL_36;
    if (*(_QWORD *)(v26 + 16))
    {
      OUTLINED_FUNCTION_199();
      OUTLINED_FUNCTION_3_25();
      v57 = v56;
      OUTLINED_FUNCTION_104();
      if ((v57 & 1) != 0)
      {
        v28 = v80;
LABEL_36:
        v27 = (uint64_t)v72;
        OUTLINED_FUNCTION_9_19((uint64_t)v72, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
        OUTLINED_FUNCTION_104();
        v2 = v76;
        goto LABEL_37;
      }
    }
    swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_3_25();
    OUTLINED_FUNCTION_30_11();
    if (v39)
      goto LABEL_57;
    v60 = v58;
    v61 = v59;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
    if (OUTLINED_FUNCTION_10_18())
    {
      OUTLINED_FUNCTION_17_9();
      OUTLINED_FUNCTION_120_0();
      if (!v30)
        goto LABEL_59;
      v60 = v62;
    }
    if ((v61 & 1) != 0)
    {
      v63 = *(_QWORD *)(v26 + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v63 + 8 * v60) = MEMORY[0x24BEE4AF8];
    }
    else
    {
      OUTLINED_FUNCTION_26_14(v26 + 8 * (v60 >> 6));
      v65 = (uint64_t *)(v64 + 16 * v60);
      *v65 = v85;
      v65[1] = v32;
      *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v60) = MEMORY[0x24BEE4AF8];
      v66 = *(_QWORD *)(v26 + 16);
      v39 = __OFADD__(v66, 1);
      v67 = v66 + 1;
      if (v39)
        goto LABEL_58;
      *(_QWORD *)(v26 + 16) = v67;
      OUTLINED_FUNCTION_199();
    }
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_27_16();
    v27 = (uint64_t)v72;
    v7 = v79;
    OUTLINED_FUNCTION_9_19((uint64_t)v72, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    v2 = v76;
    v28 = v80;
LABEL_37:
    v25 = v78 + 1;
    v19 = v73;
    v20 = (uint64_t)v74;
    if (v78 + 1 == v70)
      goto LABEL_51;
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void static _FileUtilities.getReadableSubdirectoriesOfDirectory(at:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSURL *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t inited;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  int EnumTagSinglePayload;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  char v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  id v51;
  void *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  id v69;
  id v70[2];
  id v71[9];

  OUTLINED_FUNCTION_8_1();
  v69 = v0;
  v71[7] = *(id *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLResourceValues?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_208();
  v54 = v2;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v67 = (uint64_t)&v53 - v5;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v53 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_49();
  v11 = v10 - v9;
  v12 = OUTLINED_FUNCTION_78();
  v65 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  v53 = v13;
  MEMORY[0x24BDAC7A8](v14);
  v68 = (char *)&v53 - v15;
  v16 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v17);
  v19 = v18;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  v20 = swift_allocObject();
  v63 = xmmword_21AFE7F70;
  *(_OWORD *)(v20 + 16) = xmmword_21AFE7F70;
  v21 = (void *)*MEMORY[0x24BDBCC60];
  v22 = (void *)*MEMORY[0x24BDBCC90];
  *(_QWORD *)(v20 + 32) = *MEMORY[0x24BDBCC60];
  *(_QWORD *)(v20 + 40) = v22;
  v71[0] = 0;
  v62 = v21;
  v61 = v22;
  v23 = outlined bridged method (mnbnnnn) of @objc NSFileManager.contentsOfDirectory(at:includingPropertiesForKeys:options:)((uint64_t)v19, v20, 0, (uint64_t)v71, v16);

  v24 = v71[0];
  if (v23)
  {
    v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v24;

    v71[0] = (id)MEMORY[0x24BEE4AF8];
    v60 = *(_QWORD *)(v25 + 16);
    if (v60)
    {
      v27 = 0;
      v59 = v11;
      v66 = v7;
      v58 = v12;
      v28 = v65;
      v57 = v25;
      while (1)
      {
        if (v27 >= *(_QWORD *)(v25 + 16))
          __break(1u);
        v29 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
        v30 = *(_QWORD *)(v28 + 72);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16))(v11, v25 + v29 + v30 * v27, v12);
        OUTLINED_FUNCTION_25_8(v11, 0);
        if (__swift_getEnumTagSinglePayload(v11, 1, v12) == 1)
          goto LABEL_26;
        v55 = v29;
        v56 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
        v56(v68, v11, v12);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v63;
        v33 = v61;
        v32 = v62;
        *(_QWORD *)(inited + 32) = v62;
        *(_QWORD *)(inited + 40) = v33;
        type metadata accessor for NSURLResourceKey(0);
        lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey();
        v34 = v32;
        v35 = v33;
        v70[1] = (id)Set.init(minimumCapacity:)();
        specialized Set._Variant.insert(_:)(v70, *(id *)(inited + 32));

        specialized Set._Variant.insert(_:)(v70, *(id *)(inited + 40));
        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        v36 = v69;
        URL.resourceValues(forKeys:)();
        v69 = v36;
        if (v36)
        {

          OUTLINED_FUNCTION_101();
          v37 = OUTLINED_FUNCTION_29_11();
          OUTLINED_FUNCTION_24_11((uint64_t)v7, 1);
          v69 = 0;
        }
        else
        {
          OUTLINED_FUNCTION_101();
          v37 = OUTLINED_FUNCTION_29_11();
          OUTLINED_FUNCTION_24_11((uint64_t)v7, 0);
        }
        v38 = v67;
        outlined init with copy of URLResourceValues?((uint64_t)v7, v67);
        OUTLINED_FUNCTION_29_11();
        EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v38, 1, v37);
        v40 = v38;
        v41 = (uint64_t)v7;
        if (EnumTagSinglePayload == 1)
          break;
        v42 = URLResourceValues.isDirectory.getter();
        OUTLINED_FUNCTION_34_12();
        v41 = (uint64_t)v7;
        if (v42 == 2)
          goto LABEL_12;
        v43 = (uint64_t)v66;
        v41 = v54;
        outlined init with copy of URLResourceValues?((uint64_t)v66, v54);
        v44 = __swift_getEnumTagSinglePayload(v41, 1, v37);
        v40 = v43;
        if (v44 == 1)
          break;
        v45 = URLResourceValues.isReadable.getter();
        outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v43, &demangling cache variable for type metadata for URLResourceValues?);
        OUTLINED_FUNCTION_34_12();
        if (v45 != 2 && (v42 & 1) != 0 && (v45 & 1) != 0)
        {
          v12 = v58;
          v46 = v56;
          v56(v53, (uint64_t)v68, v58);
          v47 = (char *)v71[0];
          v48 = OUTLINED_FUNCTION_20_12();
          v7 = v66;
          if ((v48 & 1) == 0)
          {
            OUTLINED_FUNCTION_14_14();
            v47 = (char *)v71[0];
          }
          v49 = v55;
          v50 = *((_QWORD *)v47 + 2);
          if (v50 >= *((_QWORD *)v47 + 3) >> 1)
          {
            OUTLINED_FUNCTION_14_14();
            v47 = (char *)v71[0];
          }
          *((_QWORD *)v47 + 2) = v50 + 1;
          v46(&v47[v49 + v50 * v30], (uint64_t)v53, v12);
          v71[0] = v47;
          v11 = v59;
          v28 = v65;
          goto LABEL_14;
        }
LABEL_13:
        v28 = v65;
        v12 = v58;
        (*(void (**)(char *, uint64_t))(v65 + 8))(v68, v58);
        v11 = v59;
        v7 = v66;
LABEL_14:
        ++v27;
        v25 = v57;
        if (v60 == v27)
          goto LABEL_25;
      }
      outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v40, &demangling cache variable for type metadata for URLResourceValues?);
LABEL_12:
      outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v41, &demangling cache variable for type metadata for URLResourceValues?);
      goto LABEL_13;
    }
LABEL_25:
    OUTLINED_FUNCTION_25_8(v11, 1);
LABEL_26:
    OUTLINED_FUNCTION_101();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v11, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v51 = v71[0];
    v52 = (void *)_convertNSErrorToError(_:)();

    v69 = v52;
    OUTLINED_FUNCTION_32_8();
  }
  OUTLINED_FUNCTION_7();
}

void static _FileUtilities.readableFiles(at:type:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_8_1();
  v2 = v1;
  v3 = OUTLINED_FUNCTION_78();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_50();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v21 - v9;
  v11 = static _FileUtilities.getNonHiddenFilesInDirectory(at:)();
  if (!v0)
  {
    v12 = v11;
    v25 = v4;
    v13 = v11[2];
    if (v13)
    {
      v21[1] = 0;
      v22 = v2;
      v26 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v14 = v25;
      v15 = *(unsigned __int8 *)(v25 + 80);
      v21[0] = v12;
      v24 = (v15 + 32) & ~v15;
      v16 = (char *)v12 + v24;
      v17 = *(_QWORD *)(v25 + 72);
      v23 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 16);
      do
      {
        v23(v7, v16, v3);
        URL.resolvingSymlinksInPath()();
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v7, v3);
        v18 = v26;
        if ((OUTLINED_FUNCTION_20_12() & 1) == 0)
        {
          OUTLINED_FUNCTION_14_14();
          v18 = v26;
        }
        v19 = *(_QWORD *)(v18 + 16);
        if (v19 >= *(_QWORD *)(v18 + 24) >> 1)
        {
          OUTLINED_FUNCTION_14_14();
          v18 = v26;
        }
        *(_QWORD *)(v18 + 16) = v19 + 1;
        v14 = v25;
        (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(v18 + v24 + v19 * v17, v10, v3);
        v26 = v18;
        v16 += v17;
        --v13;
      }
      while (v13);
      v20 = swift_bridgeObjectRelease();
      v2 = v22;
    }
    else
    {
      v20 = swift_bridgeObjectRelease();
      v18 = MEMORY[0x24BEE4AF8];
    }
    MEMORY[0x24BDAC7A8](v20);
    v21[-2] = v2;
    specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #2 in static _FileUtilities.readableFiles(at:type:), (uint64_t)&v21[-4], v18);
  }
  OUTLINED_FUNCTION_7();
}

void specialized thunk for @callee_guaranteed () -> (@owned [URL])(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

void static _FileUtilities.collectFilesLabeledByFileName(at:type:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD *@<X8>);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  _BOOL8 v41;
  Swift::Int v42;
  unint64_t v43;
  char v44;
  Swift::Bool v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD *@<X8>);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  OUTLINED_FUNCTION_8_1();
  v2 = OUTLINED_FUNCTION_78();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_19_5();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v52 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_49();
  v10 = v9 - v8;
  static _FileUtilities.readableFiles(at:type:)();
  if (v0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v52[1] = v11;
    v52[2] = 0;
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v60 = 0;
      v53 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v13 = v11 + v53;
      v14 = *(_QWORD *)(v3 + 72);
      v62 = *(_QWORD *)(v3 + 16);
      v61 = MEMORY[0x24BEE4B00];
      v55 = v3;
      v56 = v2;
      v54 = v10;
      v59 = v14;
      while (1)
      {
        OUTLINED_FUNCTION_21_13(v10, v13);
        OUTLINED_FUNCTION_110_1(v10, 0);
        OUTLINED_FUNCTION_12_18(v10);
        if (v15)
          break;
        OUTLINED_FUNCTION_22_9((uint64_t)v6, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
        v16 = URL.lastPathComponent.getter();
        specialized Collection<>.firstIndex(of:)(46, 0xE100000000000000, v16, v17);
        if ((v19 & 1) != 0 || v18 < 0x4000)
        {
          OUTLINED_FUNCTION_9_19((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
          swift_bridgeObjectRelease();
          v51 = v59;
        }
        else
        {
          v57 = v13;
          v58 = v12;
          v20 = String.subscript.getter();
          v22 = v21;
          v24 = v23;
          v25 = (uint64_t)v6;
          v26 = v1;
          v28 = v27;
          swift_bridgeObjectRelease();
          v29 = (void (*)(_QWORD *@<X8>))MEMORY[0x22075A93C](v20, v22, v24, v28);
          v31 = v30;
          swift_bridgeObjectRelease();
          v32 = v26;
          v33 = v25;
          OUTLINED_FUNCTION_21_13(v26, v25);
          OUTLINED_FUNCTION_11_17((uint64_t)v60);
          v34 = v61;
          v35 = OUTLINED_FUNCTION_20_12();
          v63 = v34;
          v60 = v29;
          v36 = (uint64_t)v29;
          v37 = v31;
          v38 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v31);
          v40 = *(_QWORD *)(v34 + 16);
          v41 = (v39 & 1) == 0;
          v42 = v40 + v41;
          if (__OFADD__(v40, v41))
          {
            __break(1u);
LABEL_24:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return;
          }
          v43 = v38;
          v44 = v39;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [URL]>);
          v45 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v35, v42);
          v1 = v32;
          v6 = (char *)v25;
          v10 = v54;
          if (v45)
          {
            specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v60, v37);
            OUTLINED_FUNCTION_120_0();
            if (!v15)
              goto LABEL_24;
            v43 = v46;
          }
          OUTLINED_FUNCTION_27_16();
          swift_bridgeObjectRetain();
          if ((v44 & 1) == 0)
          {
            specialized _NativeDictionary._insert(at:key:value:)(v43, v60, v37, MEMORY[0x24BEE4AF8], v34);
            OUTLINED_FUNCTION_199();
          }
          v47 = *(_QWORD *)(v34 + 56);
          v61 = v63;
          swift_bridgeObjectRelease();
          v48 = (uint64_t *)(v47 + 8 * v43);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v49 = *(_QWORD *)(*v48 + 16);
          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v49);
          v50 = *v48;
          *(_QWORD *)(v50 + 16) = v49 + 1;
          v51 = v59;
          OUTLINED_FUNCTION_7_19(v50 + v53 + v49 * v59, v32);
          OUTLINED_FUNCTION_104();
          v3 = v55;
          OUTLINED_FUNCTION_9_19(v33, *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8));
          v60 = specialized thunk for @callee_guaranteed () -> (@owned [URL]);
          v13 = v57;
          v12 = v58;
        }
        v13 += v51;
        if (!--v12)
          goto LABEL_20;
      }
    }
    else
    {
      v60 = 0;
      v61 = MEMORY[0x24BEE4B00];
LABEL_20:
      OUTLINED_FUNCTION_110_1(v10, 1);
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_17((uint64_t)v60);
  }
  OUTLINED_FUNCTION_7();
}

void *static _FileUtilities.getNonHiddenFilesInDirectory(at:)()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v9[0] = 0;
  v4 = objc_msgSend(v0, sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_, v2, 0, 4, v9);

  v5 = v9[0];
  if (v4)
  {
    OUTLINED_FUNCTION_78();
    v3 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v7 = v9[0];
    _convertNSErrorToError(_:)();

    OUTLINED_FUNCTION_32_8();
  }
  return v3;
}

id outlined bridged method (mnbnnnn) of @objc NSFileManager.contentsOfDirectory(at:includingPropertiesForKeys:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa;
  id v10;

  type metadata accessor for NSURLResourceKey(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(a5, sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_, a1, isa, a3, a4);

  return v10;
}

unint64_t lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey;
  if (!lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey)
  {
    type metadata accessor for NSURLResourceKey(255);
    result = MEMORY[0x22075B938](&protocol conformance descriptor for NSURLResourceKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey);
  }
  return result;
}

uint64_t outlined init with copy of URLResourceValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLResourceValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t partial apply for closure #2 in static _FileUtilities.readableFiles(at:type:)()
{
  return (unint64_t)static _FileUtilities.isReadableFile(at:of:)() & 1;
}

unint64_t OUTLINED_FUNCTION_3_25()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v1 - 88), v0);
}

uint64_t OUTLINED_FUNCTION_7_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 96))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_9_19@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

BOOL OUTLINED_FUNCTION_10_18()
{
  Swift::Bool v0;
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_11_17(uint64_t result)
{
  return outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?(result);
}

uint64_t OUTLINED_FUNCTION_12_18(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

void OUTLINED_FUNCTION_14_14()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

unint64_t OUTLINED_FUNCTION_17_9()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v1 - 88), v0);
}

uint64_t OUTLINED_FUNCTION_19_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_20_12()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_21_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 88))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_22_9@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 96) = a3;
  return a3(a1, a2, v3);
}

void OUTLINED_FUNCTION_23_12()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_24_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_25_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_26_14(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

uint64_t OUTLINED_FUNCTION_27_16()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_29_11()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t OUTLINED_FUNCTION_31_13()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_32_8()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_34_12()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

_QWORD *initializeBufferWithCopyOfBuffer for AnyTreeClassifierModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = *(int *)(a3 + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for BaseTreeClassifierModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = *(int *)(a3 + 28);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = *(_QWORD *)v19;
    LOBYTE(v19) = v19[8];
    *(_QWORD *)v18 = v20;
    v18[8] = (char)v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AnyTreeClassifierModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AnyTreeClassifierModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = *(int *)(a3 + 28);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  LOBYTE(v17) = v17[8];
  *(_QWORD *)v16 = v18;
  v16[8] = (char)v17;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AnyTreeClassifierModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of FeatureVectorizer<Float>.Transformer((uint64_t)(a1 + 2));
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = *(int *)(a3 + 28);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  LOBYTE(v17) = v17[8];
  *(_QWORD *)v16 = v18;
  v16[8] = (char)v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AnyTreeClassifierModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  return a1;
}

_QWORD *assignWithTake for AnyTreeClassifierModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (!a1[2])
    goto LABEL_5;
  if (!v7)
  {
    outlined destroy of FeatureVectorizer<Float>.Transformer((uint64_t)(a1 + 2));
LABEL_5:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    a1[4] = a2[4];
    goto LABEL_6;
  }
  a1[2] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for BaseTreeClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = *(int *)(a3 + 28);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyTreeClassifierModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE7E1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for BaseTreeClassifierModel();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AnyTreeClassifierModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE7E23C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for BaseTreeClassifierModel();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AnyTreeClassifierModel()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AnyTreeClassifierModel;
  if (!type metadata singleton initialization cache for AnyTreeClassifierModel)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AnyTreeClassifierModel()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BaseTreeClassifierModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySSGG_SSSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_SS_TG5s7KeyPathCyAiKGTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  __int128 v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v3 = v11;
    v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<String>)
                   - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      swift_getAtKeyPath();
      v7 = v10;
      v8 = *(_QWORD *)(v11 + 16);
      if (v8 >= *(_QWORD *)(v11 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v7 = v10;
      }
      *(_QWORD *)(v11 + 16) = v8 + 1;
      *(_OWORD *)(v11 + 16 * v8 + 32) = v7;
      v5 += v6;
      --v1;
    }
    while (v1);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_SiSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_Si_TG5s7KeyPathCyAiKGTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = v13;
    v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<Int>)
                   - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      swift_getAtKeyPath();
      v8 = *(_QWORD *)(v13 + 16);
      v7 = *(_QWORD *)(v13 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v13 + 16) = v8 + 1;
      v9 = v13 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v11;
      *(_BYTE *)(v9 + 40) = v12;
      v5 += v6;
      --v1;
    }
    while (v1);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

void AnyTreeClassifierModel.applied(to:eventHandler:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v3 + 16))
  {
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    if (!v2)
    {
      v15 = a1;
      type metadata accessor for AnyTreeClassifierModel();
      v9 = BaseTreeClassifierModel.applied(features:eventHandler:)();
      MEMORY[0x24BDAC7A8](v9);
      if ((v10 & 1) != 0)
      {
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5();
        OUTLINED_FUNCTION_1_24();
        v11 = OUTLINED_FUNCTION_2_30();
        specialized AnyTreeClassifierModel.buildDataFrame<A>(_:)(v11, v12);
      }
      else
      {
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AIs5NeverOTg5();
        OUTLINED_FUNCTION_1_24();
        v13 = OUTLINED_FUNCTION_2_30();
        specialized AnyTreeClassifierModel.buildDataFrame<A>(_:)(v13, v14);
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    OUTLINED_FUNCTION_7();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t specialized AnyTreeClassifierModel.buildDataFrame<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t MLComponents26ClassificationDistributionVySiGG_SiSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_Si_TG5s7KeyPathCyAiKGTf1cn_n;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = a2;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v19 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<ClassificationDistribution<Int>>);
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2[1];
  v23 = *v2;
  v24 = v8;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0x6C696261626F7250;
  v9._object = (void *)0xEB00000000797469;
  String.append(_:)(v9);
  v23 = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<Int>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClassificationDistribution<Int>]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [ClassificationDistribution<Int>] and conformance [A], &demangling cache variable for type metadata for [ClassificationDistribution<Int>]);
  Column.init<A>(name:contents:)();
  v21 = MEMORY[0x24BEE1768];
  v22 = MEMORY[0x24BEE1778];
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  MLComponents26ClassificationDistributionVySiGG_SiSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_Si_TG5s7KeyPathCyAiKGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_SiSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_Si_TG5s7KeyPathCyAiKGTf1cn_n(a1);
  swift_release();
  v23 = MLComponents26ClassificationDistributionVySiGG_SiSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_Si_TG5s7KeyPathCyAiKGTf1cn_n;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int?]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [Int?] and conformance [A], &demangling cache variable for type metadata for [Int?]);
  Column.init<A>(name:contents:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
  type metadata accessor for AnyColumn();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21AFE7F70;
  v12 = v17;
  Column.eraseToAnyColumn()();
  v13 = v16;
  Column.eraseToAnyColumn()();
  v23 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn]);
  DataFrame.init<A>(columns:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v7, v13);
}

{
  uint64_t *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t MLComponents26ClassificationDistributionVySSGG_SSSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_SS_TG5s7KeyPathCyAiKGTf1cn_n;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = a2;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v19 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<ClassificationDistribution<String>>);
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2[1];
  v23 = *v2;
  v24 = v8;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0x6C696261626F7250;
  v9._object = (void *)0xEB00000000797469;
  String.append(_:)(v9);
  v23 = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<String>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClassificationDistribution<String>]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [ClassificationDistribution<String>] and conformance [A], &demangling cache variable for type metadata for [ClassificationDistribution<String>]);
  Column.init<A>(name:contents:)();
  v21 = MEMORY[0x24BEE0D00];
  v22 = MEMORY[0x24BEE0D10];
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  MLComponents26ClassificationDistributionVySSGG_SSSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_SS_TG5s7KeyPathCyAiKGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySSGG_SSSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_SS_TG5s7KeyPathCyAiKGTf1cn_n(a1);
  swift_release();
  v23 = MLComponents26ClassificationDistributionVySSGG_SSSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_SS_TG5s7KeyPathCyAiKGTf1cn_n;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [String?] and conformance [A], &demangling cache variable for type metadata for [String?]);
  Column.init<A>(name:contents:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
  type metadata accessor for AnyColumn();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21AFE7F70;
  v12 = v17;
  Column.eraseToAnyColumn()();
  v13 = v16;
  Column.eraseToAnyColumn()();
  v23 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn]);
  DataFrame.init<A>(columns:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v7, v13);
}

uint64_t closure #1 in AnyTreeClassifierModel.applied(to:eventHandler:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<Int>);
  return ClassificationDistribution.map<A>(_:)();
}

uint64_t closure #1 in AnyTreeClassifierModel.convertDistribution(_:labels:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Classification<Int>);
  Classification.label.getter();
  if ((v4 & 0x8000000000000000) == 0 && v4 < v2)
  {
    Classification.label.getter();
    if ((v4 & 0x8000000000000000) == 0 && v4 < v2)
    {
      Classification.probability.getter();
      return Classification.init(label:probability:)();
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Classification<Int>);
  Classification.label.getter();
  if ((v4 & 0x8000000000000000) == 0 && v4 < v2)
  {
    Classification.label.getter();
    if ((v4 & 0x8000000000000000) == 0 && v4 < v2)
    {
      swift_bridgeObjectRetain();
      Classification.probability.getter();
      return Classification.init(label:probability:)();
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t key path getter for ClassificationDistribution.mostLikelyLabel : <A>ClassificationDistribution<A>()
{
  type metadata accessor for ClassificationDistribution();
  return ClassificationDistribution.mostLikelyLabel.getter();
}

void AnyTreeClassifierModel.computeMetrics(on:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v6 = type metadata accessor for AnyColumn();
  MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for DataFrame();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyTreeClassifierModel.applied(to:eventHandler:)((uint64_t)v11);
  if (!v3)
  {
    v14[1] = a1;
    v14[3] = a2;
    v13 = *v2;
    v12 = v2[1];
    MEMORY[0x220758A1C](*v2, v12);
    MEMORY[0x220758A1C](v13, v12);
    AnyClassificationMetrics.init(_:_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t protocol witness for Transformer.applied(to:eventHandler:) in conformance AnyTreeClassifierModel(uint64_t a1)
{
  uint64_t v1;

  AnyTreeClassifierModel.applied(to:eventHandler:)(a1);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v1 + 8));
}

unint64_t lazy protocol witness table accessor for type AnyTreeClassifierModel and conformance AnyTreeClassifierModel()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnyTreeClassifierModel and conformance AnyTreeClassifierModel;
  if (!lazy protocol witness table cache variable for type AnyTreeClassifierModel and conformance AnyTreeClassifierModel)
  {
    v1 = type metadata accessor for AnyTreeClassifierModel();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for AnyTreeClassifierModel, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyTreeClassifierModel and conformance AnyTreeClassifierModel);
  }
  return result;
}

uint64_t partial apply for closure #2 in AnyTreeClassifierModel.applied(to:eventHandler:)()
{
  return closure #1 in AnyTreeClassifierModel.applied(to:eventHandler:)();
}

uint64_t partial apply for closure #1 in AnyTreeClassifierModel.applied(to:eventHandler:)()
{
  return closure #1 in AnyTreeClassifierModel.applied(to:eventHandler:)();
}

uint64_t sub_21AE7F258(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_21AE7F264()
{
  return 16;
}

__n128 sub_21AE7F270(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in AnyTreeClassifierModel.convertDistribution(_:labels:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AnyTreeClassifierModel.convertDistribution(_:labels:)(a1, *(_QWORD *)(v1 + 16));
}

{
  uint64_t v1;

  return closure #1 in AnyTreeClassifierModel.convertDistribution(_:labels:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22075B938](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_24()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_30()
{
  uint64_t v0;

  return v0;
}

void _UntypedColumn.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_0_20();
  _UntypedColumn.init<A>(_:)(a1, a2);
  OUTLINED_FUNCTION_34_9();
}

void _UntypedColumn.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  char v28;
  uint64_t v29;
  void *v30;
  void *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t AssociatedConformanceWitness;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v5 = a1;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v10);
  v11 = OUTLINED_FUNCTION_31_14();
  v12 = MEMORY[0x22075BB18](v11);
  if (!v12)
    goto LABEL_39;
  v13 = v12;
  type metadata accessor for CMLSequence();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v13;
  v60 = inited;
  *(_BYTE *)(inited + 24) = 1;
  v46 = v6;
  v47 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v5, a2);
  dispatch thunk of Sequence.makeIterator()();
  v48 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = 6;
  while (2)
  {
    v16 = v3;
    v17 = AssociatedTypeWitness;
    v18 = dispatch thunk of IteratorProtocol.next()();
    v27 = v52;
    v26 = v53;
    v28 = v54;
    if (v15 == 6)
    {
      switch((char)v54)
      {
        case 0:
          goto LABEL_7;
        case 1:
          goto LABEL_20;
        case 2:
          goto LABEL_16;
        case 3:
          MLDataValue.SequenceType.featureValue.getter();
        case 4:
          goto LABEL_14;
        case 5:
          goto LABEL_25;
        default:
          goto LABEL_10;
      }
    }
    switch((char)v54)
    {
      case 0:
        if (v15)
          goto LABEL_29;
LABEL_7:
        specialized handling<A, B>(_:_:)((uint64_t)v52, v19, v20, v21, v22, v23, v24, v25, v45, v46, v47, v48, v49, v50, AssociatedConformanceWitness, (uint64_t)v52, (uint64_t)v53, v54, v55,
          v56,
          v57,
          v58,
          v59,
          v60,
          v61,
          v62,
          v63,
          v64,
          v65,
          v66);
        if (v2)
          goto LABEL_41;
        if (!v29)
          goto LABEL_38;
        OUTLINED_FUNCTION_16_17();
        OUTLINED_FUNCTION_4_4();
        OUTLINED_FUNCTION_27_17();
        OUTLINED_FUNCTION_11_18();
        v15 = 0;
        goto LABEL_26;
      case 1:
        if (v15 != 1)
          goto LABEL_29;
LABEL_20:
        specialized handling<A, B>(_:_:)(v18, v19, v20, v21, v22, v23, v24, v25, v45, v46, v47, v48, v49, v50, AssociatedConformanceWitness, (uint64_t)v52, (uint64_t)v53, v54, v55,
          v56,
          v57,
          v58,
          v59,
          v60,
          v61,
          v62,
          v63,
          v64,
          v65,
          v66);
        if (v2)
          goto LABEL_41;
        if (!v33)
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          OUTLINED_FUNCTION_26_15();
          swift_unexpectedError();
          __break(1u);
          JUMPOUT(0x21AE7F7C8);
        }
        OUTLINED_FUNCTION_16_17();
        OUTLINED_FUNCTION_4_4();
        v15 = 1;
        v5 = OUTLINED_FUNCTION_27_17();
        v30 = v27;
        v31 = v26;
        v32 = v28;
        goto LABEL_23;
      case 2:
        if (v15 != 2)
          goto LABEL_29;
LABEL_16:
        OUTLINED_FUNCTION_16_17();
        outlined copy of MLDataValue(v27, v26, v28);
        swift_bridgeObjectRetain();
        CMLFeatureValue.__allocating_init(_:)();
        if (v2)
          goto LABEL_41;
        OUTLINED_FUNCTION_11_18();
        v15 = 2;
        goto LABEL_26;
      case 3:
        goto LABEL_29;
      case 4:
        if (v15 != 4)
          goto LABEL_29;
LABEL_14:
        v5 = MLDataValue.DictionaryType.featureValue.getter();
        v15 = 4;
        goto LABEL_26;
      case 5:
        if (v15 != 5)
        {
LABEL_29:
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          OUTLINED_FUNCTION_49_0();
          OUTLINED_FUNCTION_0_32(v34, 0xD000000000000027);
          goto LABEL_30;
        }
LABEL_25:
        v5 = MLDataValue.MultiArrayType.featureValue.getter(v18);
        v15 = 5;
        goto LABEL_26;
      default:
LABEL_10:
        if (v15 == 6)
        {
          OUTLINED_FUNCTION_16_17();
          v5 = CMLFeatureValue.__allocating_init()();
          v30 = v27;
          v31 = v26;
          v32 = 6;
LABEL_23:
          outlined consume of MLDataValue?(v30, v31, v32);
LABEL_26:
          CMLSequence.append(_:)(v5);
          if (v2)
          {
            swift_release();
LABEL_30:
            swift_release();
            OUTLINED_FUNCTION_25_9();
            (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
            v35 = OUTLINED_FUNCTION_30_12();
            v36(v35);
            goto LABEL_31;
          }
          swift_release();
          OUTLINED_FUNCTION_25_9();
          AssociatedTypeWitness = v17;
          v3 = v16;
          continue;
        }
        v37 = OUTLINED_FUNCTION_30_12();
        v38(v37);
        specialized handling<A, B>(_:_:)(*(_QWORD *)(v60 + 16));
        v41 = v47;
        v40 = v48;
        v42 = v46;
        if (v2)
        {
          swift_setDeallocating();
          CMLFeatureValue.deinit();
          OUTLINED_FUNCTION_33_11();
          (*(void (**)(uint64_t))(v42 + 8))(v41);
LABEL_31:
          type metadata accessor for _UntypedColumn();
          OUTLINED_FUNCTION_28_15();
        }
        else
        {
          v43 = v39;
          if (!v39)
            goto LABEL_40;
          swift_setDeallocating();
          CMLFeatureValue.deinit();
          OUTLINED_FUNCTION_33_11();
          OUTLINED_FUNCTION_10_19();
          v44 = OUTLINED_FUNCTION_0_20();
          *(_QWORD *)(v44 + 16) = v43;
          (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v40);
          *(_QWORD *)(v50 + 16) = v44;
        }
        OUTLINED_FUNCTION_7();
        return;
    }
  }
}

uint64_t _UntypedColumn.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_0_20();
  _UntypedColumn.init<A>(_:)(a1, a2, a3, a4);
  return v8;
}

void _UntypedColumn.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *AssociatedConformanceWitness;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v37 = a1;
  v40 = a4;
  v8 = OUTLINED_FUNCTION_36_7();
  v39 = *(_QWORD *)(v8 - 8);
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_31_14();
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_4_22();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v32 - v12;
  v14 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v11);
  AssociatedConformanceWitness = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a3;
  v35 = *(_QWORD *)(OUTLINED_FUNCTION_36_7() - 8);
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v16);
  v17 = MEMORY[0x22075BB18](0);
  if (v17)
  {
    v18 = v17;
    type metadata accessor for CMLSequence();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v18;
    v41 = inited;
    *(_BYTE *)(inited + 24) = 1;
    v33 = v14;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(AssociatedConformanceWitness, v37, a2);
    dispatch thunk of Sequence.makeIterator()();
    v34 = a2;
    AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v8) == 1)
    {
LABEL_6:
      v22 = OUTLINED_FUNCTION_37_7();
      v23(v22);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(v40 + 8))(&v42, v8);
      OUTLINED_FUNCTION_18_12();
      v26 = v25 >> v24;
      OUTLINED_FUNCTION_10_19();
      v27 = CMLColumn.__allocating_init(_:type:)(v41, v26);
      if (!v4)
      {
        v28 = v27;
        OUTLINED_FUNCTION_17_10();
        *(_QWORD *)(v36 + 16) = v28;
LABEL_11:
        OUTLINED_FUNCTION_7();
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v37, v34);
    }
    else
    {
      v20 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 32);
      while (1)
      {
        v20(v5, v13, v8);
        v21 = MLDataValueConvertible.featureValue.getter();
        CMLSequence.append(_:)(v21);
        if (v4)
          break;
        OUTLINED_FUNCTION_14_15();
        swift_release();
        dispatch thunk of IteratorProtocol.next()();
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v8) == 1)
          goto LABEL_6;
      }
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_17_10();
      OUTLINED_FUNCTION_14_15();
      v29 = OUTLINED_FUNCTION_37_7();
      v31(v29, v30);
    }
    type metadata accessor for _UntypedColumn();
    OUTLINED_FUNCTION_28_15();
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t _UntypedColumn.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v5 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  OUTLINED_FUNCTION_10_19();
  MLDataValue.featureValue.getter();
  v9 = v8;
  outlined consume of MLDataValue(v5, v6, v7);
  *(_QWORD *)(v3 + 16) = CMLColumn.__allocating_init(repeating:count:)(v9, a2);
  return v3;
}

uint64_t _UntypedColumn.__allocating_init<A>(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_0_20();
  _UntypedColumn.init<A>(repeating:count:)(a1, a2, a3);
  return v6;
}

uint64_t _UntypedColumn.init<A>(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v4 = v3;
  OUTLINED_FUNCTION_10_19();
  v8 = MLDataValueConvertible.featureValue.getter();
  v9 = CMLColumn.__allocating_init(repeating:count:)(v8, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  *(_QWORD *)(v4 + 16) = v9;
  return v4;
}

void _UntypedColumn.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  OUTLINED_FUNCTION_10_19();
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    OUTLINED_FUNCTION_6_22();
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = CMLColumn.__allocating_init(_:)(a1, a2 + 1);
    OUTLINED_FUNCTION_27_0();
  }
}

void _UntypedColumn.appending(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = CMLColumn.type.getter();
  v6 = *(_QWORD *)(a1 + 16);
  if (v5 == CMLColumn.type.getter())
  {
    OUTLINED_FUNCTION_10_19();
    swift_retain();
    swift_retain();
    v7 = CMLColumn.__allocating_init(concatenating:and:)(v4, v6);
    if (!v2)
    {
      v8 = v7;
      type metadata accessor for _UntypedColumn();
      *(_QWORD *)(OUTLINED_FUNCTION_0_20() + 16) = v8;
    }
  }
  else
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_0_32(v9, 0xD000000000000034);
  }
  OUTLINED_FUNCTION_34_9();
}

void _UntypedColumn.type.getter(_BYTE *a1@<X8>)
{
  char v2;
  unint64_t v3;

  CMLColumn.type.getter();
  OUTLINED_FUNCTION_18_12();
  *a1 = v3 >> v2;
}

void static _UntypedColumn.performRightScalar(op:a:b:)(char a1)
{
  unsigned int v1;
  uint64_t v3;

  OUTLINED_FUNCTION_12_19();
  if (v1 <= 9)
    __asm { BR              X10 }
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_0_32(v3, 0xD000000000000017);
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_15_16();
}

void static _UntypedColumn.performLeftScalar(op:a:b:)(char a1)
{
  unsigned int v1;
  uint64_t v3;

  OUTLINED_FUNCTION_12_19();
  if (v1 <= 9)
    __asm { BR              X10 }
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_0_32(v3, 0xD000000000000017);
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_15_16();
}

void _UntypedColumn.valueAtIndex(index:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 < 0 || CMLColumn.size.getter() <= a1)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 6;
  }
  else
  {
    CMLColumn.value(at:)(a1);
    MLDataValue.init(_:)();
  }
}

void _UntypedColumn.description.getter()
{
  _BYTE v0[16];

  _UntypedColumn.type.getter(v0);
  __asm { BR              X10 }
}

uint64_t sub_21AE803C8()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  _QWORD v6[2];
  uint64_t v8;
  unint64_t v9;

  v0._countAndFlagsBits = 0x656C62756F44;
  v6[0] = 0x70795465756C6156;
  v6[1] = 0xEB00000000203A65;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v1._object = (void *)0x800000021AFF3F80;
  v1._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v8 = 0x70795465756C6156;
  v9 = 0xEB00000000203A65;
  v2 = CMLColumn.size.getter();
  if (v2 >= 10)
    v3 = 10;
  else
    v3 = v2;
  if (v3 < 0)
  {
    __break(1u);
    JUMPOUT(0x21AE80788);
  }
  if (v3)
  {
    _UntypedColumn.valueAtIndex(index:)(0, (uint64_t)v6);
    __asm { BR              X9 }
  }
  if (v2 >= 11)
  {
    v4._countAndFlagsBits = 0x2E2E2E202CLL;
    v4._object = (void *)0xE500000000000000;
    String.append(_:)(v4);
  }
  OUTLINED_FUNCTION_34_13();
  return v8;
}

void _UntypedColumn.map(_:skipUndefined:outputType:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  v4 = CMLColumn.apply(transform:type:skipUndefined:)(a1, a2, 0x5060403020100uLL >> (8 * *a4), a3);
  type metadata accessor for _UntypedColumn();
  *(_QWORD *)(OUTLINED_FUNCTION_0_20() + 16) = v4;
  OUTLINED_FUNCTION_27_0();
}

uint64_t _UntypedColumn.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _UntypedColumn()
{
  return objc_opt_self();
}

void outlined consume of MLDataValue?(void *a1, id a2, char a3)
{
  if (a3 != -1)
    outlined consume of MLDataValue(a1, a2, a3);
}

unint64_t lazy protocol witness table accessor for type MLDataValue and conformance MLDataValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataValue and conformance MLDataValue;
  if (!lazy protocol witness table cache variable for type MLDataValue and conformance MLDataValue)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataValue, &type metadata for MLDataValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue and conformance MLDataValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataValue and conformance MLDataValue;
  if (!lazy protocol witness table cache variable for type MLDataValue and conformance MLDataValue)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataValue, &type metadata for MLDataValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue and conformance MLDataValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for LazyMapSequence<MLDataValue.SequenceType, String>);
    v2 = lazy protocol witness table accessor for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType();
    result = MEMORY[0x22075B938](MEMORY[0x24BEE2B38], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType;
  if (!lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataValue.SequenceType, &type metadata for MLDataValue.SequenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType;
  if (!lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataValue.SequenceType, &type metadata for MLDataValue.SequenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType;
  if (!lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataValue.SequenceType, &type metadata for MLDataValue.SequenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType;
  if (!lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataValue.SequenceType, &type metadata for MLDataValue.SequenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataValue.SequenceType and conformance MLDataValue.SequenceType);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_32@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_1_25()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_2_31()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
}

uint64_t OUTLINED_FUNCTION_4_27()
{
  return specialized handling<A, B, C, D>(_:_:_:_:)();
}

uint64_t OUTLINED_FUNCTION_5_22()
{
  return specialized handling<A, B, C, D>(_:_:_:_:)();
}

uint64_t OUTLINED_FUNCTION_6_22()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_10_19()
{
  return type metadata accessor for CMLColumn();
}

void OUTLINED_FUNCTION_11_18()
{
  void *v0;
  void *v1;
  char v2;

  outlined consume of MLDataValue?(v1, v0, v2);
}

void OUTLINED_FUNCTION_12_19()
{
  MLDataValue.featureValue.getter();
}

void OUTLINED_FUNCTION_13_23()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_14_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_16_17()
{
  return type metadata accessor for CMLFeatureValue();
}

uint64_t OUTLINED_FUNCTION_17_10()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 184) + 8))(*(_QWORD *)(v0 - 152), *(_QWORD *)(v0 - 176));
}

void OUTLINED_FUNCTION_22_10()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 3);
}

void OUTLINED_FUNCTION_23_13()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 5);
}

void OUTLINED_FUNCTION_24_12()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 4);
}

void OUTLINED_FUNCTION_25_9()
{
  void *v0;
  void *v1;
  char v2;

  outlined consume of MLDataValue?(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_26_15()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_27_17()
{
  uint64_t v0;

  return CMLFeatureValue.init(rawValue:ownsValue:)(v0, 1);
}

uint64_t OUTLINED_FUNCTION_28_15()
{
  return swift_deallocPartialClassInstance();
}

uint64_t OUTLINED_FUNCTION_30_12()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_31_14()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_33_11()
{
  return swift_deallocClassInstance();
}

void OUTLINED_FUNCTION_34_13()
{
  Swift::String v0;

  v0._countAndFlagsBits = 93;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_35_7()
{
  return 0x676E697373694DLL;
}

uint64_t OUTLINED_FUNCTION_36_7()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t OUTLINED_FUNCTION_37_7()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_39_7(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return type metadata accessor for _UntypedColumn();
}

void **assignWithCopy for MLDecisionTreeRegressor.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  char v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = *a2;
      v8 = *((_BYTE *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((_BYTE *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLDecisionTreeRegressor.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLDecisionTreeRegressor.ModelParameters.ValidationData)
    return swift_getSingletonMetadata();
  return result;
}

void *assignWithTake for MLDecisionTreeRegressor.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of MLDecisionTreeRegressor.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLDecisionTreeRegressor.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MLDecisionTreeRegressor.ModelParameters.ValidationData.table.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v1 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData(v0, v5 - v4);
  v6 = (char *)&loc_21AE80E28 + dword_21AE80F2C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21AE80E38()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_BYTE *)(v0 + 8) = v2;
}

void MLDecisionTreeRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v10 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v1 = type metadata accessor for DataFrame.Slice();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  v3 = MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for MLDecisionTreeRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLDecisionTreeRegressor.ModelParameters.ValidationData(v0, v8 - v7);
  v9 = (char *)sub_21AE810A8 + 4 * byte_21AFEA698[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AE810A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v6 = *(_BYTE *)(v4 + 16);
  v7 = *(_BYTE *)(v4 + 17);
  *(_OWORD *)(v5 - 112) = *(_OWORD *)v4;
  *(_BYTE *)(v5 - 96) = v6;
  *(_BYTE *)(v5 - 95) = v7;
  DataFrame.randomSplit(strategy:)(v0, v3, v5 - 112);
  v9 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 152);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v10(v1, v3, v8);
  DataFrame.init(_:)();
  outlined init with copy of DataFrame.Slice?(v0, v2);
  if (__swift_getEnumTagSinglePayload(v2, 1, v8) == 1)
  {
    __swift_storeEnumTagSinglePayload(*(_QWORD *)(v5 - 144), 1, 1, *(_QWORD *)(v5 - 136));
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v2, v8);
    v10(*(_QWORD *)(v5 - 168), v1, v8);
    v12 = *(_QWORD *)(v5 - 144);
    DataFrame.init(_:)();
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v11(v1, v8);
    __swift_storeEnumTagSinglePayload(v12, 0, 1, *(_QWORD *)(v5 - 136));
  }
  v11(v3, v8);
  return outlined destroy of DataFrame.Slice?(v0);
}

uint64_t *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.DataSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  return a1;
}

uint64_t destroy for MLFewShotSoundClassifier.DataSource(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL));
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.DataSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL));
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v6);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.DataSource()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLFewShotSoundClassifier.DataSource;
  if (!type metadata singleton initialization cache for MLFewShotSoundClassifier.DataSource)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.DataSource(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for URL();
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase();
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t MLFewShotSoundClassifier.DataSource.extractFeatures(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for UTType();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v8 = v7 - v6;
  v9 = type metadata accessor for MLFewShotSoundClassifier.DataSource();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_49();
  v12 = v11 - v10;
  outlined init with copy of MLFewShotSoundClassifier.DataSource(v1, v11 - v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v12, v4);
  static UTType.audio.getter();
  static _FileUtilities.readableFiles(at:type:)();
  if (v2)
  {
    OUTLINED_FUNCTION_1_26();
  }
  else
  {
    v15 = v13;
    OUTLINED_FUNCTION_1_26();
    if (*(_QWORD *)(v15 + 16))
    {
      v1 = MLFewShotSoundClassifier.DataSource.extractFeatures(with:from:)(a1, v15);
      OUTLINED_FUNCTION_0_33();
      OUTLINED_FUNCTION_106_0();
      return v1;
    }
    OUTLINED_FUNCTION_106_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v16 = 0xD00000000000002ELL;
    *(_QWORD *)(v16 + 8) = 0x800000021AFF4010;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_BYTE *)(v16 + 48) = 2;
    swift_willThrow(0.0);
  }
  OUTLINED_FUNCTION_0_33();
  return v1;
}

uint64_t outlined init with copy of MLFewShotSoundClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLFewShotSoundClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLFewShotSoundClassifier.DataSource.extractFeatures(with:from:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  Class isa;
  NSURL *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  dispatch_semaphore_t v21;
  void *v22;
  NSObject *v23;
  id v24;
  NSObject *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  id *v34;
  NSObject *v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id *v49;
  id v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  const char *v54;
  uint64_t v55;
  id v56;
  uint64_t v58;
  uint64_t v59;
  id *v60;
  id *v61;
  dispatch_semaphore_t v62;
  uint64_t v63;
  id v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD aBlock[7];
  uint64_t v72;

  v63 = a2;
  v64 = a1;
  v70 = type metadata accessor for DispatchTimeInterval();
  v68 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v67 = (uint64_t *)((char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = type metadata accessor for DispatchTime();
  v69 = *(_QWORD *)(v72 - 8);
  v3 = MEMORY[0x24BDAC7A8](v72);
  v65 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v66 = (char *)&v59 - v5;
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v11);
  v62 = dispatch_semaphore_create(0);
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.default.getter();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE5750], v6);
  v12 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  v61 = (id *)(v13 + 16);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  v60 = (id *)(v14 + 16);
  v15 = (void *)objc_opt_self();
  type metadata accessor for URL();
  isa = Array._bridgeToObjectiveC()().super.isa;
  URL._bridgeToObjectiveC()(v17);
  v19 = v18;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v13;
  v20[3] = v14;
  v21 = v62;
  v20[4] = v62;
  aBlock[4] = partial apply for closure #1 in MLFewShotSoundClassifier.DataSource.extractFeatures(with:from:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed SNKShotFeaturizationResult?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_3;
  v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v23 = v21;
  swift_release();
  v64 = v12;
  v24 = objc_msgSend(v15, sel_featurizeFiles_hallucinatorModelURL_queue_completionHandler_, isa, v19, v12, v22);
  _Block_release(v22);
  v25 = v23;
  swift_unknownObjectRelease();

  v26 = v65;
  static DispatchTime.now()();
  v28 = v67;
  v27 = v68;
  *v67 = 600;
  v29 = v70;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v27 + 104))(v28, *MEMORY[0x24BEE5420], v70);
  v30 = v66;
  DispatchTime.advanced(by:)();
  (*(void (**)(_QWORD *, uint64_t))(v27 + 8))(v28, v29);
  v31 = *(void (**)(char *, uint64_t))(v69 + 8);
  v32 = v72;
  v31(v26, v72);
  v33 = MEMORY[0x22075AD14](v30);
  v31(v30, v32);
  if ((v33 & 1) != 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v48 = 0xD00000000000001ELL;
    *(_QWORD *)(v48 + 8) = 0x800000021AFF40C0;
    *(_OWORD *)(v48 + 16) = 0u;
    *(_OWORD *)(v48 + 32) = 0u;
    *(_BYTE *)(v48 + 48) = 2;
    swift_willThrow(0.0);
    swift_release();
LABEL_23:
    swift_release();
LABEL_24:
    v56 = v64;
LABEL_27:

    return v33;
  }
  v34 = v61;
  swift_beginAccess();
  if (!*v34)
  {
    v49 = v60;
    swift_beginAccess();
    if (*v49)
    {
      v50 = *v49;
    }
    else
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v55 = 0xD000000000000029;
      *(_QWORD *)(v55 + 8) = 0x800000021AFF40E0;
      v51 = 0.0;
      *(_OWORD *)(v55 + 16) = 0u;
      *(_OWORD *)(v55 + 32) = 0u;
      *(_BYTE *)(v55 + 48) = 2;
    }
    swift_willThrow(v51);
    swift_release();
    goto LABEL_23;
  }
  v35 = v25;
  v33 = (uint64_t)*v34;
  v36 = objc_msgSend((id)v33, sel_trainingDataEmbeddings);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v38)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    v53 = 0xD000000000000036;
    v54 = "Empty training sound embeddings in retrieved features.";
LABEL_26:
    *(_QWORD *)v52 = v53;
    *(_QWORD *)(v52 + 8) = (unint64_t)(v54 - 32) | 0x8000000000000000;
    *(_OWORD *)(v52 + 16) = 0u;
    *(_OWORD *)(v52 + 32) = 0u;
    *(_BYTE *)(v52 + 48) = 2;
    swift_willThrow(0.0);
    swift_release();
    swift_release();

    v56 = v64;
    v25 = v35;
    goto LABEL_27;
  }
  v39 = objc_msgSend((id)v33, sel_trainingDataLabels);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v40 >> 62)
  {
    swift_bridgeObjectRetain();
    v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v41)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    v53 = 0xD000000000000031;
    v54 = "Empty training data labels in retrieved features.";
    goto LABEL_26;
  }
  v42 = objc_msgSend((id)v33, sel_validationDataEmbeddings);
  v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v43 >> 62)
  {
    swift_bridgeObjectRetain();
    v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v44)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    v53 = 0xD000000000000038;
    v54 = "Empty validation sound embeddings in retrieved features.";
    goto LABEL_26;
  }
  v45 = objc_msgSend((id)v33, sel_validationDataLabels);
  v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v46 >> 62)
  {
    swift_bridgeObjectRetain();
    v47 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v25 = v35;
  swift_bridgeObjectRelease();
  if (!v47)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    swift_allocError();
    *(_QWORD *)v58 = 0xD000000000000033;
    *(_QWORD *)(v58 + 8) = 0x800000021AFF4110;
    *(_OWORD *)(v58 + 16) = 0u;
    *(_OWORD *)(v58 + 32) = 0u;
    *(_BYTE *)(v58 + 48) = 2;
    swift_willThrow(0.0);
    swift_release();
    swift_release();

    goto LABEL_24;
  }

  swift_release();
  swift_release();
  return v33;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x22075B938](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x22075B938](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t sub_21AE82110()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21AE82134()
{
  uint64_t v0;

  return swift_deallocObject();
}

Swift::Int closure #1 in MLFewShotSoundClassifier.DataSource.extractFeatures(with:from:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  id v9;
  void *v10;
  id v11;

  swift_beginAccess();
  v8 = *(void **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a1;
  v9 = a1;

  swift_beginAccess();
  v10 = *(void **)(a4 + 16);
  *(_QWORD *)(a4 + 16) = a2;
  v11 = a2;

  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_21AE821FC()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in MLFewShotSoundClassifier.DataSource.extractFeatures(with:from:)(void *a1, void *a2)
{
  uint64_t v2;

  return closure #1 in MLFewShotSoundClassifier.DataSource.extractFeatures(with:from:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void thunk for @escaping @callee_guaranteed (@guaranteed SNKShotFeaturizationResult?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_0_33()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_1_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t *initializeBufferWithCopyOfBuffer for MLImageClassifier.Model(uint64_t *a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_DWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>)
                             - 8)
                 + 80);
  if ((v4 & 0x20000) != 0)
  {
    v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
    else
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MLImageClassifier.Model(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v2 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v2 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t initializeWithCopy for MLImageClassifier.Model(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v4 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for MLImageClassifier.Model(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    else
      v4 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for MLImageClassifier.Model(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v4 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for MLImageClassifier.Model(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v4 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    else
      v4 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier.Model()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE826D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier.Model()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE8271C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MLImageClassifier.Model()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLImageClassifier.Model;
  if (!type metadata singleton initialization cache for MLImageClassifier.Model)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for MLImageClassifier.Model()
{
  unint64_t v0;

  type metadata accessor for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
    v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
    v5 = type metadata accessor for Either(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  }
}

void MLImageClassifier.Model.export(metadata:featureExtractorType:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *, _QWORD);
  uint64_t v14;
  _QWORD *ML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n;
  uint64_t v16;

  OUTLINED_FUNCTION_8_1();
  v2 = v1;
  v4 = v3;
  v5 = type metadata accessor for Model();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v9 = v8 - v7;
  v10 = *(_QWORD *)(v2 + 64);
  MLImageClassifier.Model.createPipelineModel(featureExtractorType:)();
  if (!v0)
  {
    swift_bridgeObjectRetain();
    Model.modelDescription.setter();
    swift_bridgeObjectRetain();
    Model.versionString.setter();
    swift_bridgeObjectRetain();
    Model.author.setter();
    swift_bridgeObjectRetain();
    Model.license.setter();
    if (!v10)
      Dictionary.init(dictionaryLiteral:)();
    v11 = v5;
    v12 = v6;
    swift_bridgeObjectRetain();
    Model.metadata.setter();
    getOSVersion()();
    v13 = (void (*)(uint64_t *, _QWORD))Model.metadata.modify();
    specialized Dictionary._Variant.setValue(_:forKey:)();
    v13(&v16, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v9, v4, v11);
    v14 = Model.nestedModels.getter();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
    ML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay20MLModelSpecification5ModelVG_Sis5NeverOTg5051_s8CreateML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n(v14);
    swift_bridgeObjectRelease();
    specialized Sequence<>.max()(ML16CoreMLExportablePAAE6export8metadata20d14Specification5F75VAA0G8MetadataV_tKFSiAHcfu_32b63bdf5f6c975d31a36a8f37561ba444AHSiTf3nnnpk_nTf1cn_n);
    swift_bridgeObjectRelease();
    Model.specificationVersion.setter();
  }
  OUTLINED_FUNCTION_7();
}

uint64_t MLImageClassifier.Model.applied(to:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = OUTLINED_FUNCTION_0();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v5[10] = v7;
  v5[11] = *(_QWORD *)(v7 - 8);
  v5[12] = OUTLINED_FUNCTION_0();
  v5[13] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v5[14] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLImageClassifier.Model.applied(to:eventHandler:)()
{
  uint64_t *v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  outlined init with copy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(v0[6], v0[14]);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v2 = v0[14];
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[8] + 32))(v0[9], v2, v0[7]);
    v3 = (_QWORD *)swift_task_alloc();
    v0[17] = (uint64_t)v3;
    *v3 = v0;
    v3[1] = MLImageClassifier.Model.applied(to:eventHandler:);
    return FullyConnectedNetworkClassifierModel.applied(to:eventHandler:)();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[11] + 32))(v0[12], v2, v0[10]);
    v5 = (_QWORD *)swift_task_alloc();
    v0[15] = (uint64_t)v5;
    *v5 = v0;
    v5[1] = MLImageClassifier.Model.applied(to:eventHandler:);
    return LogisticRegressionClassifierModel.applied(to:eventHandler:)();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  *v2 = *v1;
  *(_QWORD *)(v3 + 128) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_79_1(*(_QWORD *)(v0 + 88));
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_19();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_4();
  *v2 = *v1;
  *(_QWORD *)(v3 + 144) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_79_1(*(_QWORD *)(v0 + 64));
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_31();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 88));
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_10();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_6_23(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_15(*(_QWORD *)(v0 + 64));
  OUTLINED_FUNCTION_19();
  swift_task_dealloc();
  OUTLINED_FUNCTION_10();
  return OUTLINED_FUNCTION_6_23(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for Transformer.applied(to:eventHandler:) in conformance MLImageClassifier.Model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for SupervisedEstimator.fitted<A, B>(to:validateOn:eventHandler:) in conformance MLImageClassifier.Classifier;
  return MLImageClassifier.Model.applied(to:eventHandler:)(a1, a2, a3, a4);
}

unint64_t lazy protocol witness table accessor for type MLImageClassifier.Model and conformance MLImageClassifier.Model()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MLImageClassifier.Model and conformance MLImageClassifier.Model;
  if (!lazy protocol witness table cache variable for type MLImageClassifier.Model and conformance MLImageClassifier.Model)
  {
    v1 = type metadata accessor for MLImageClassifier.Model();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLImageClassifier.Model, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLImageClassifier.Model and conformance MLImageClassifier.Model);
  }
  return result;
}

uint64_t associated type witness table accessor for Classifier.Label : Hashable in MLImageClassifier.Model()
{
  return MEMORY[0x24BEE0D10];
}

uint64_t outlined init with copy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLImageClassifier.Model.exportAsCompiledMLModel(featureExtractorType:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Model();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 72) = a1;
  OUTLINED_FUNCTION_18();
  return swift_task_switch();
}

uint64_t MLImageClassifier.Model.exportAsCompiledMLModel(featureExtractorType:)()
{
  uint64_t v0;
  NSString *v1;
  _QWORD *v2;

  v1 = NSFullUserName();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  MLImageClassifier.Model.export(metadata:featureExtractorType:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  type metadata accessor for MLModel();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = MLImageClassifier.Model.exportAsCompiledMLModel(featureExtractorType:);
  return static MLModel.compile(_:)(*(_QWORD *)(v0 + 48));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_79_1(*(_QWORD *)(v0 + 40));
  OUTLINED_FUNCTION_31();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 72));
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MLImageClassifier.Model.createPipelineModel(featureExtractorType:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  int EnumTagSinglePayload;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(unint64_t, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47[2];
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;

  OUTLINED_FUNCTION_8_1();
  v63 = v4;
  v55 = v5;
  v6 = type metadata accessor for ModelKind();
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_9_20(v8, v47[0]);
  v61 = type metadata accessor for FeatureDescription();
  v58 = *(_QWORD *)(v61 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v59 = v10;
  v62 = type metadata accessor for FeatureType();
  v60 = *(_QWORD *)(v62 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_15_17();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v47 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureDescription?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_11_19();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v47 - v17;
  v19 = type metadata accessor for Model();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v47 - v22;
  MLImageClassifier.Model.createFeatureExtractorModel(_:)(v63, (uint64_t)v47 - v22);
  if (v1)
    goto LABEL_5;
  v49 = v3;
  v50 = v2;
  v64 = v23;
  v53 = v20;
  v63 = v19;
  v51 = v14;
  v24 = v61;
  v25 = v62;
  MLImageClassifier.Model.createClassifierModel()();
  v52 = 0;
  v26 = Model.outputs.getter();
  specialized Collection.first.getter(v26, (uint64_t)v18);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v24) == 1)
  {
    __break(1u);
  }
  else
  {
    FeatureDescription.name.getter();
    v47[1] = v27;
    v28 = v58;
    v29 = *(void (**)(char *, uint64_t))(v58 + 8);
    v29(v18, v24);
    v30 = Model.inputs.getter();
    v31 = v50;
    specialized Collection.first.getter(v30, v50);
    swift_bridgeObjectRelease();
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v31, 1, v24);
    v48 = v0;
    if (EnumTagSinglePayload != 1)
    {
      v33 = v51;
      FeatureDescription.type.getter();
      v47[0] = (uint64_t)v29;
      v29((char *)v31, v24);
      (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v49, v33, v25);
      v34 = v59;
      FeatureDescription.init(name:type:description:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
      v35 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_21AFE7DA0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 16))(v36 + v35, v34, v24);
      Model.outputs.setter();
      Model.outputs.getter();
      v37 = v48;
      Model.inputs.setter();
      Model.init()();
      Model.specificationVersion.setter();
      Model.inputs.getter();
      Model.inputs.setter();
      Model.outputs.getter();
      Model.outputs.setter();
      Model.predictedFeatureName.getter();
      Model.predictedFeatureName.setter();
      Model.predictedProbabilitiesName.getter();
      Model.predictedProbabilitiesName.setter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
      v38 = v53;
      v39 = *(_QWORD *)(v53 + 72);
      v40 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_21AFE7F70;
      v42 = v41 + v40;
      v43 = *(void (**)(unint64_t, char *, uint64_t))(v38 + 16);
      v44 = v63;
      v43(v42, v64, v63);
      v43(v42 + v39, v37, v44);
      v45 = v54;
      PipelineClassifierConfiguration.init(models:names:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v56 + 104))(v45, *MEMORY[0x24BE63268], v57);
      Model.kind.setter();
      ((void (*)(uint64_t, uint64_t))v47[0])(v59, v61);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v51, v62);
      v46 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
      v46((uint64_t)v37, v44);
      v46((uint64_t)v64, v44);
LABEL_5:
      OUTLINED_FUNCTION_7();
      return;
    }
  }
  __break(1u);
}

void MLImageClassifier.Model.createFeatureExtractorModel(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v8 = v7 - v6;
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_53_0();
  outlined init with copy of MLImageClassifier.FeatureExtractorType(a1, v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLImageClassifier.CustomFeatureExtractor(v2, v8);
    MLImageClassifier.CustomFeatureExtractor.buildModel()(a2);
    outlined destroy of MLImageClassifier.CustomFeatureExtractor(v8);
  }
  else
  {
    MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
  }
}

void MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  OUTLINED_FUNCTION_8_1();
  v46 = v4;
  v37 = v5;
  v50 = type metadata accessor for ImageFeaturePrint();
  v6 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  OUTLINED_FUNCTION_64();
  v47 = v7;
  v8 = OUTLINED_FUNCTION_24_13();
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_9_20(v10, v34);
  v11 = type metadata accessor for UUID();
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_53_0();
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v44 = v13;
  v45 = v14;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_11_19();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_22_11();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_15_17();
  MEMORY[0x24BDAC7A8](v18);
  v43 = (char *)&v34 - v19;
  v20 = (void *)objc_opt_self();
  v21 = objc_msgSend(v20, sel_defaultManager);
  NSFileManager.createTemporaryModelDirectory()();

  if (!v22)
  {
    v35 = v2;
    v36 = v6;
    v23 = objc_msgSend(v20, sel_defaultManager);
    OUTLINED_FUNCTION_27_18();

    UUID.init()();
    v24 = UUID.uuidString.getter();
    v26 = v25;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v1, v39);
    v48 = v24;
    v49 = v26;
    v28 = v40;
    v27 = v41;
    v29 = v42;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 104))(v40, *MEMORY[0x24BDCD7A0], v42);
    lazy protocol witness table accessor for type String and conformance String();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
    swift_bridgeObjectRelease();
    v30 = v44;
    v31 = v45;
    v32 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v32(v0, v44);
    v33 = v43;
    OUTLINED_FUNCTION_7_20();
    v32(v3, v30);
    objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF648]), sel_init);
    ImageFeaturePrint.init(revision:cropAndScale:context:)();
    Transformer.export(to:)();
    OUTLINED_FUNCTION_13_24();
    (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v35, v33, v30);
    Model.init(contentsOf:)();
    $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
    v32((uint64_t)v33, v30);
  }
  OUTLINED_FUNCTION_7();
}

void MLImageClassifier.Model.createClassifierModel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  OUTLINED_FUNCTION_8_1();
  v68 = v1;
  v50 = v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
  v55 = *(_QWORD *)(v5 - 8);
  v56 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v54 = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v51 = v10;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v65 = v12;
  v13 = OUTLINED_FUNCTION_24_13();
  v60 = *(_QWORD *)(v13 - 8);
  v61 = v13;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_49();
  v17 = v16 - v15;
  v18 = type metadata accessor for UUID();
  v57 = *(_QWORD *)(v18 - 8);
  v58 = v18;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_49();
  v22 = v21 - v20;
  v23 = type metadata accessor for URL();
  v62 = *(_QWORD *)(v23 - 8);
  v63 = v23;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_22_11();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_15_17();
  MEMORY[0x24BDAC7A8](v27);
  v59 = (char *)&v47 - v28;
  v29 = (void *)objc_opt_self();
  v30 = objc_msgSend(v29, sel_defaultManager);
  NSFileManager.createTemporaryModelDirectory()();

  if (!v31)
  {
    v48 = v0;
    v49 = 0;
    v32 = objc_msgSend(v29, sel_defaultManager);
    OUTLINED_FUNCTION_27_18();

    UUID.init()();
    v33 = UUID.uuidString.getter();
    v35 = v34;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v22, v58);
    v66 = v33;
    v67 = v35;
    v37 = v60;
    v36 = v61;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v60 + 104))(v17, *MEMORY[0x24BDCD7A0], v61);
    lazy protocol witness table accessor for type String and conformance String();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v17, v36);
    swift_bridgeObjectRelease();
    v38 = v62;
    v39 = v2;
    v40 = v63;
    OUTLINED_FUNCTION_48_2(v39);
    v41 = (uint64_t)v59;
    OUTLINED_FUNCTION_7_20();
    OUTLINED_FUNCTION_48_2(v3);
    v42 = v65;
    outlined init with copy of Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(v68, v65);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v54, v42, v56);
      v43 = (unint64_t *)&lazy protocol witness table cache variable for type FullyConnectedNetworkClassifierModel<Float, String> and conformance FullyConnectedNetworkClassifierModel<A, B>;
      v44 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
      v45 = MEMORY[0x24BDC6058];
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v51, v42, v53);
      v43 = (unint64_t *)&lazy protocol witness table cache variable for type LogisticRegressionClassifierModel<Float, String> and conformance LogisticRegressionClassifierModel<A, B>;
      v44 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
      v45 = MEMORY[0x24BDC6030];
    }
    lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](v43, v44, v45);
    v46 = v49;
    Transformer.export(to:)();
    OUTLINED_FUNCTION_21_14();
    if (!v46)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v48, v41, v40);
      Model.init(contentsOf:)();
      $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
    }
    OUTLINED_FUNCTION_48_2(v41);
  }
  OUTLINED_FUNCTION_7();
}

void $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  id v6;
  void *v7;
  double v8;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v9[0] = 0;
  v4 = objc_msgSend(v0, sel_removeItemAtURL_error_, v2, v9);

  if (v4)
  {
    v5 = v9[0];
  }
  else
  {
    v6 = v9[0];
    v7 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow(v8);
  }
}

uint64_t outlined destroy of MLImageClassifier.CustomFeatureExtractor(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLImageClassifier.CustomFeatureExtractor(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_6_23(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_7_20()
{
  return URL.appendingPathExtension(_:)();
}

uint64_t OUTLINED_FUNCTION_9_20@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_13_24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 192) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_21_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_24_13()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t OUTLINED_FUNCTION_27_18()
{
  return NSFileManager.temporaryModelDirectory.getter();
}

uint64_t instantiation function for generic protocol witness table for SGD<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x22075B938](MEMORY[0x24BE6BB90]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void **assignWithCopy for MLRandomForestClassifier.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  char v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = *a2;
      v8 = *((_BYTE *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((_BYTE *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLRandomForestClassifier.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLRandomForestClassifier.ModelParameters.ValidationData)
    return swift_getSingletonMetadata();
  return result;
}

void *assignWithTake for MLRandomForestClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLRandomForestClassifier.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MLRandomForestClassifier.ModelParameters.ValidationData.asTable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v1 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLRandomForestClassifier.ModelParameters.ValidationData(v0, v5 - v4);
  v6 = (char *)&loc_21AE8422C + *((int *)qword_21AE84330 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

void sub_21AE8423C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_BYTE *)(v0 + 8) = v2;
}

void MLRandomForestClassifier.ModelParameters.ValidationData.generateDataFrames(trainingData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v10 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v1 = type metadata accessor for DataFrame.Slice();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLRandomForestClassifier.ModelParameters.ValidationData(v0, v8 - v7);
  v9 = (char *)sub_21AE844AC + 4 * byte_21AFEA798[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AE844AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v6 = *(_BYTE *)(v4 + 16);
  v7 = *(_BYTE *)(v4 + 17);
  *(_OWORD *)(v5 - 112) = *(_OWORD *)v4;
  *(_BYTE *)(v5 - 96) = v6;
  *(_BYTE *)(v5 - 95) = v7;
  DataFrame.randomSplit(strategy:)(v0, v3, v5 - 112);
  v9 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 152);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v10(v1, v3, v8);
  DataFrame.init(_:)();
  outlined init with copy of DataFrame.Slice?(v0, v2);
  if (__swift_getEnumTagSinglePayload(v2, 1, v8) == 1)
  {
    __swift_storeEnumTagSinglePayload(*(_QWORD *)(v5 - 144), 1, 1, *(_QWORD *)(v5 - 136));
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v2, v8);
    v10(*(_QWORD *)(v5 - 168), v1, v8);
    v12 = *(_QWORD *)(v5 - 144);
    DataFrame.init(_:)();
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v11(v1, v8);
    __swift_storeEnumTagSinglePayload(v12, 0, 1, *(_QWORD *)(v5 - 136));
  }
  v11(v3, v8);
  return outlined destroy of DataFrame.Slice?(v0);
}

uint64_t outlined init with copy of MLRandomForestClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLLinearRegressor.ModelParameters.validationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v1 = v0;
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v5 = v4 - v3;
  result = outlined init with copy of Any?(v1, (uint64_t)&v7);
  if (v8)
  {
    outlined init with take of Any(&v7, &v9);
    OUTLINED_FUNCTION_16_0();
    MLLinearRegressor.ModelParameters.ValidationData.asTable()();
    return outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLLinearRegressor.ModelParameters.validationData : MLLinearRegressor.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = MLLinearRegressor.ModelParameters.validationData.getter();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for MLLinearRegressor.ModelParameters.validationData : MLLinearRegressor.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1;
  id v3;
  unsigned __int8 v4;

  v1 = *(_BYTE *)(a1 + 8);
  v3 = *(id *)a1;
  v4 = v1;
  outlined copy of MLDataTable?(v3, v1);
  return MLLinearRegressor.ModelParameters.validationData.setter((uint64_t)&v3);
}

uint64_t MLLinearRegressor.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v13[4];

  v2 = v1;
  OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  v8 = *(void **)a1;
  v9 = *(unsigned __int8 *)(a1 + 8);
  v13[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v13);
  if (v9 == 255)
  {
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(_QWORD *)v7 = v8;
    *(_BYTE *)(v7 + 8) = v9 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLLinearRegressor.ModelParameters.ValidationData(v7, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v13, v2);
}

uint64_t MLLinearRegressor.ModelParameters.validation.getter()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  result = outlined init with copy of Any?(v0, (uint64_t)&v2);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    OUTLINED_FUNCTION_3_26();
    return OUTLINED_FUNCTION_16_0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of MLLinearRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void (*MLLinearRegressor.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  MLLinearRegressor.ModelParameters.validationData.getter();
  return MLLinearRegressor.ModelParameters.validationData.modify;
}

void MLLinearRegressor.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned __int8 v5;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(void **)a1;
  v5 = v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of MLDataTable?(v2, v3);
    MLLinearRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    MLLinearRegressor.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLLinearRegressor.ModelParameters.validation : MLLinearRegressor.ModelParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLLinearRegressor.ModelParameters.ValidationData(a1, (uint64_t)v4);
  return MLLinearRegressor.ModelParameters.validation.setter((uint64_t)v4);
}

uint64_t MLLinearRegressor.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v5[4];

  v5[3] = OUTLINED_FUNCTION_3_26();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLLinearRegressor.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1);
}

void (*MLLinearRegressor.ModelParameters.validation.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  void (*result)(uint64_t **, char);

  v2 = v1;
  v4 = malloc(0xA0uLL);
  *a1 = v4;
  v4[16] = v2;
  v5 = OUTLINED_FUNCTION_3_26();
  v4[17] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[18] = malloc(v6);
  v4[19] = malloc(v6);
  result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v2, (uint64_t)(v4 + 4));
  if (v4[7])
  {
    outlined init with take of Any((_OWORD *)v4 + 2, v4);
    OUTLINED_FUNCTION_16_0();
    return MLLinearRegressor.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLLinearRegressor.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v7;

  v2 = *a1;
  v3 = (void *)(*a1)[18];
  v4 = (void *)(*a1)[19];
  v5 = (*a1)[17];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of MLLinearRegressor.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 8));
    outlined destroy of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v5;
    v7 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v7);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 12));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t outlined init with copy of MLLinearRegressor.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLLinearRegressor.ModelParameters.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t MLLinearRegressor.ModelParameters.maxIterations.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*MLLinearRegressor.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLinearRegressor.ModelParameters.l1Penalty.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void MLLinearRegressor.ModelParameters.l1Penalty.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*MLLinearRegressor.ModelParameters.l1Penalty.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLinearRegressor.ModelParameters.l2Penalty.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void MLLinearRegressor.ModelParameters.l2Penalty.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLLinearRegressor.ModelParameters.l2Penalty.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLinearRegressor.ModelParameters.stepSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void MLLinearRegressor.ModelParameters.stepSize.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*MLLinearRegressor.ModelParameters.stepSize.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLLinearRegressor.ModelParameters.convergenceThreshold.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void MLLinearRegressor.ModelParameters.convergenceThreshold.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
}

uint64_t (*MLLinearRegressor.ModelParameters.convergenceThreshold.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLinearRegressor.ModelParameters.featureRescaling.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t MLLinearRegressor.ModelParameters.featureRescaling.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = result;
  return result;
}

uint64_t (*MLLinearRegressor.ModelParameters.featureRescaling.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLLinearRegressor.ModelParameters.init(validation:maxIterations:l1Penalty:l2Penalty:stepSize:convergenceThreshold:featureRescaling:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v23[4];

  v16 = OUTLINED_FUNCTION_3_26();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_49();
  v20 = v19 - v18;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 32) = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(double *)(a4 + 56) = a7;
  *(double *)(a4 + 64) = a8;
  *(_BYTE *)(a4 + 72) = a3;
  outlined init with copy of MLLinearRegressor.ModelParameters.ValidationData(a1, v19 - v18);
  v23[3] = v16;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
  outlined init with take of MLLinearRegressor.ModelParameters.ValidationData(v20, (uint64_t)boxed_opaque_existential_0);
  OUTLINED_FUNCTION_17_0((uint64_t)v23);
  return outlined destroy of MLLinearRegressor.ModelParameters.ValidationData(a1);
}

uint64_t MLLinearRegressor.ModelParameters.init(validationData:maxIterations:l1Penalty:l2Penalty:stepSize:convergenceThreshold:featureRescaling:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v8;
  char v9;
  uint64_t v11;
  char v12;

  v8 = *a1;
  v9 = *((_BYTE *)a1 + 8);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 32) = a2;
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(double *)(a4 + 56) = a7;
  *(double *)(a4 + 64) = a8;
  *(_BYTE *)(a4 + 72) = a3;
  v11 = v8;
  v12 = v9;
  return MLLinearRegressor.ModelParameters.validationData.setter((uint64_t)&v11);
}

unint64_t MLLinearRegressor.ModelParameters.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;

  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 10;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_4_17(0x6C616E655020314CLL);
  OUTLINED_FUNCTION_1_15();
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_2_21(v3, v4, v5, v6, v7, v8, v9, v10, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_4_17(0x6C616E655020324CLL);
  OUTLINED_FUNCTION_1_15();
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_2_21(v11, v12, v13, v14, v15, v16, v17, v18, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_12_0();
  v19._countAndFlagsBits = 0x7A69532070657453;
  v19._object = (void *)0xEB00000000203A65;
  String.append(_:)(v19);
  OUTLINED_FUNCTION_1_15();
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_2_21(v20, v21, v22, v23, v24, v25, v26, v27, 0, (void *)0xE000000000000000);
  OUTLINED_FUNCTION_12_0();
  _StringGuts.grow(_:)(26);
  v28._countAndFlagsBits = 0xD000000000000017;
  v28._object = (void *)0x800000021AFF3340;
  String.append(_:)(v28);
  OUTLINED_FUNCTION_1_15();
  OUTLINED_FUNCTION_0_21();
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 72))
    v30 = 1702195828;
  else
    v30 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 72))
    v31 = 0xE400000000000000;
  else
    v31 = 0xE500000000000000;
  v32 = v31;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_21();
  v33._countAndFlagsBits = 0xD000000000000013;
  v33._object = (void *)0x800000021AFF3360;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

unint64_t MLLinearRegressor.ModelParameters.playgroundDescription.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = MLLinearRegressor.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21AE851B0()
{
  return MLLinearRegressor.ModelParameters.validation.getter();
}

uint64_t initializeWithCopy for MLLinearRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for MLLinearRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for MLLinearRegressor.ModelParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLinearRegressor.ModelParameters(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 73))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLLinearRegressor.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLLinearRegressor.ModelParameters()
{
  return &type metadata for MLLinearRegressor.ModelParameters;
}

uint64_t OUTLINED_FUNCTION_3_26()
{
  return type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
}

void static MLSoundClassifier.VGGishFeatureExtractor.buildSoundAnalysisPreprocessingSpec()(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  _QWORD v31[2];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  char *v36;
  void (*v37)(uint64_t);
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = OUTLINED_FUNCTION_10_20();
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v43 = v4;
  v5 = OUTLINED_FUNCTION_14_16();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = v5;
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v10 = v9 - v8;
  type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v41 = type metadata accessor for FeatureDescription();
  v12 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_208();
  v42 = v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v31 - v15;
  Model.init()();
  Model.specificationVersion.setter();
  OUTLINED_FUNCTION_27_2();
  v40 = v17;
  Model.predictedFeatureName.setter();
  OUTLINED_FUNCTION_27_2();
  v31[1] = a1;
  Model.modelDescription.setter();
  FeatureDescription.init()();
  FeatureDescription.name.setter();
  OUTLINED_FUNCTION_27_2();
  FeatureDescription.featureDescription.setter();
  v38 = *MEMORY[0x24BE624E0];
  v37 = *(void (**)(uint64_t))(v6 + 104);
  v33 = v7;
  v37(v10);
  OUTLINED_FUNCTION_15_18();
  v35 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v35(v10, v7);
  v36 = v16;
  FeatureDescription.type.setter();
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  v18 = *(unsigned __int8 *)(v12 + 80);
  v39 = v12;
  v19 = (v18 + 32) & ~v18;
  v20 = OUTLINED_FUNCTION_12_20();
  v32 = xmmword_21AFE7DA0;
  *(_OWORD *)(v20 + 16) = xmmword_21AFE7DA0;
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 16);
  v22 = v41;
  v21(v20 + v19, v16, v41);
  Model.inputs.setter();
  v23 = v42;
  FeatureDescription.init()();
  FeatureDescription.name.setter();
  v24 = v33;
  ((void (*)(uint64_t, _QWORD, uint64_t))v37)(v10, v38, v33);
  OUTLINED_FUNCTION_15_18();
  v35(v10, v24);
  FeatureDescription.type.setter();
  v25 = OUTLINED_FUNCTION_12_20();
  *(_OWORD *)(v25 + 16) = v32;
  v21(v25 + v19, v23, v22);
  v26 = Model.outputs.setter();
  v27 = v43;
  MEMORY[0x22075A144](v26);
  v28 = *MEMORY[0x24BE62BE0];
  v29 = type metadata accessor for SoundAnalysisPreprocessorKind();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v27, v28, v29);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 104))(v27, *MEMORY[0x24BE63258], v45);
  Model.kind.setter();
  v30 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v30((uint64_t)v23, v22);
  v30((uint64_t)v36, v22);
  OUTLINED_FUNCTION_7();
}

void static MLSoundClassifier.VGGishFeatureExtractor.buildFeatureEmbeddingNeuralNetworkSpec(outputName:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  Swift::String v76;
  Swift::String v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t);
  unsigned int v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;

  v112 = a2;
  v113 = a1;
  v115 = a3;
  v3 = OUTLINED_FUNCTION_10_20();
  v4 = *(_QWORD *)(v3 - 8);
  v110 = v3;
  v111 = v4;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_208();
  v106 = v6;
  MEMORY[0x24BDAC7A8](v7);
  v109 = (char *)&v88 - v8;
  v9 = type metadata accessor for NeuralNetwork();
  v104 = *(_QWORD *)(v9 - 8);
  v105 = v9;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v103 = v11;
  v12 = OUTLINED_FUNCTION_14_16();
  v107 = *(_QWORD *)(v12 - 8);
  v108 = (_QWORD *)v12;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v114 = v14;
  type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_49();
  v18 = v17 - v16;
  v19 = type metadata accessor for FeatureDescription();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v88 - v24;
  v26 = type metadata accessor for URL();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v88 - v31;
  OUTLINED_FUNCTION_27_2();
  v33 = v118;
  static BundleUtilities.getMLModelURL(at:)(v34, v35, (uint64_t)v32);
  if (v33)
    goto LABEL_15;
  v98 = v18;
  v36 = v114;
  v99 = v22;
  v101 = v25;
  v102 = v20;
  v100 = v19;
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v29, v32, v26);
  v37 = v115;
  Model.init(contentsOf:)();
  v118 = 0;
  v89 = v32;
  v90 = v27;
  v91 = v26;
  Model.specificationVersion.setter();
  swift_bridgeObjectRetain();
  Model.predictedFeatureName.setter();
  OUTLINED_FUNCTION_27_2();
  Model.modelDescription.setter();
  v38 = v101;
  FeatureDescription.init()();
  v88 = (unint64_t)"Feature embedding for VGGish";
  FeatureDescription.name.setter();
  v97 = *MEMORY[0x24BE624E0];
  v39 = v107;
  v96 = *(void (**)(uint64_t))(v107 + 104);
  v40 = v108;
  v96(v36);
  OUTLINED_FUNCTION_8_23();
  v107 = *(_QWORD *)(v39 + 8);
  ((void (*)(uint64_t, _QWORD *))v107)(v36, v40);
  FeatureDescription.type.setter();
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  v41 = v102;
  v42 = *(unsigned __int8 *)(v102 + 80);
  v43 = (v42 + 32) & ~v42;
  v94 = v43 + *(_QWORD *)(v102 + 72);
  v93 = v42 | 7;
  v44 = swift_allocObject();
  v92 = xmmword_21AFE7DA0;
  *(_OWORD *)(v44 + 16) = xmmword_21AFE7DA0;
  v45 = *(void (**)(uint64_t, char *, uint64_t))(v41 + 16);
  v46 = v38;
  v47 = v100;
  v45(v44 + v43, v46, v100);
  Model.inputs.setter();
  v48 = v99;
  FeatureDescription.init()();
  swift_bridgeObjectRetain();
  FeatureDescription.name.setter();
  ((void (*)(uint64_t, _QWORD, _QWORD *))v96)(v36, v97, v40);
  OUTLINED_FUNCTION_8_23();
  ((void (*)(uint64_t, _QWORD *))v107)(v36, v40);
  FeatureDescription.type.setter();
  v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = v92;
  v50 = v49 + v43;
  v51 = v48;
  v45(v50, v48, v47);
  Model.outputs.setter();
  v52 = v109;
  v53 = v37;
  Model.kind.getter();
  v55 = v110;
  v54 = v111;
  v56 = (*(uint64_t (**)(_QWORD *, uint64_t))(v111 + 88))(v52, v110);
  if ((_DWORD)v56 != *MEMORY[0x24BE63218])
  {
    OUTLINED_FUNCTION_11_20();
    v116 = 0;
    v117 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    OUTLINED_FUNCTION_27_2();
    String.append(_:)(v76);
    Model.kind.getter();
    _print_unlocked<A, B>(_:_:)();
    OUTLINED_FUNCTION_11_20();
    v77._countAndFlagsBits = 0x64616574736E6920;
    v77._object = (void *)0xE90000000000002ELL;
    String.append(_:)(v77);
    v78 = v116;
    v79 = v117;
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v80 = swift_allocError();
    *(_QWORD *)v81 = v78;
    *(_QWORD *)(v81 + 8) = v79;
    *(_OWORD *)(v81 + 16) = 0u;
    *(_OWORD *)(v81 + 32) = 0u;
    *(_BYTE *)(v81 + 48) = 2;
    v118 = v80;
    swift_willThrow(0.0);
    v82 = *(void (**)(char *, uint64_t))(v102 + 8);
    v82(v51, v47);
    v82(v101, v47);
    v83 = type metadata accessor for Model();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 8))(v53, v83);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v89, v91);
    goto LABEL_15;
  }
  v57 = v56;
  (*(void (**)(_QWORD *, uint64_t))(v54 + 96))(v52, v55);
  v58 = v103;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v104 + 32))(v103, v52, v105);
  v59 = v58;
  NeuralNetwork.layers.modify();
  v60 = OUTLINED_FUNCTION_5_23();
  *v52 = v58;
  if ((v60 & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v59 = v84;
    *v52 = v84;
  }
  if (*(_QWORD *)(v59 + 16))
  {
    type metadata accessor for NeuralNetwork.Layer();
    NeuralNetwork.Layer.inputNames.modify();
    v61 = OUTLINED_FUNCTION_6_24();
    *v40 = v52;
    if ((v61 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    __break(1u);
  }
  specialized _ArrayBuffer._consumeAndCreateNew()();
  v52 = v85;
  *v40 = v85;
LABEL_7:
  if (v52[2])
  {
    v62 = v88 | 0x8000000000000000;
    v52[4] = 0xD000000000000011;
    v52[5] = v62;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_21();
    OUTLINED_FUNCTION_13_25();
    v63 = v58;
    v40 = *(_QWORD **)(NeuralNetwork.layers.getter() + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    NeuralNetwork.layers.modify();
    v64 = OUTLINED_FUNCTION_5_23();
    *v52 = v58;
    if ((v64 & 1) != 0)
    {
      if (v40)
        goto LABEL_10;
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
  }
  else
  {
    __break(1u);
  }
  specialized _ArrayBuffer._consumeAndCreateNew()();
  v63 = v86;
  *v52 = v86;
  if (!v40)
    goto LABEL_20;
LABEL_10:
  if ((unint64_t)v40 <= *(_QWORD *)(v63 + 16))
  {
    NeuralNetwork.Layer.outputNames.modify();
    v65 = OUTLINED_FUNCTION_6_24();
    *v40 = v52;
    if ((v65 & 1) != 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  specialized _ArrayBuffer._consumeAndCreateNew()();
  v52 = v87;
  *v40 = v87;
LABEL_12:
  v66 = v100;
  v67 = v106;
  v68 = v102;
  v69 = v101;
  if (v52[2])
  {
    v70 = v57;
    v71 = v112;
    v52[4] = v113;
    v52[5] = v71;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_21();
    OUTLINED_FUNCTION_13_25();
    v72 = v103;
    v73 = v104;
    v74 = v105;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 16))(v67, v103, v105);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 104))(v67, v70, v110);
    Model.kind.setter();
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
    v75 = *(void (**)(char *, uint64_t))(v68 + 8);
    v75(v99, v66);
    v75(v69, v66);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v89, v91);
LABEL_15:
    OUTLINED_FUNCTION_7();
    return;
  }
  __break(1u);
}

void static MLSoundClassifier.VGGishFeatureExtractor.buildCoreMLSpec(outputName:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v6 = OUTLINED_FUNCTION_10_20();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  v10 = v9 - v8;
  v35 = type metadata accessor for Model();
  v11 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_208();
  v33 = (char *)v12;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v29 - v14;
  Model.init()();
  Model.specificationVersion.setter();
  swift_bridgeObjectRetain();
  Model.predictedFeatureName.setter();
  OUTLINED_FUNCTION_27_2();
  Model.modelDescription.setter();
  v16 = v34;
  static MLSoundClassifier.VGGishFeatureExtractor.buildSoundAnalysisPreprocessingSpec()((uint64_t)v15);
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, v35);
  }
  else
  {
    v34 = v15;
    v30 = v10;
    v31 = v7;
    v32 = v6;
    static MLSoundClassifier.VGGishFeatureExtractor.buildFeatureEmbeddingNeuralNetworkSpec(outputName:)(a1, a2, (uint64_t)v33);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
    v17 = v11;
    v18 = *(_QWORD *)(v11 + 72);
    v19 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_21AFE7F70;
    v21 = v20 + v19;
    v22 = *(void (**)(unint64_t, char *, uint64_t))(v11 + 16);
    v23 = v34;
    v24 = v35;
    v22(v21, v34, v35);
    v25 = v21 + v18;
    v26 = (uint64_t)v33;
    v22(v25, v33, v24);
    v27 = v30;
    PipelineClassifierConfiguration.init(models:names:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v31 + 104))(v27, *MEMORY[0x24BE63268], v32);
    Model.kind.setter();
    Model.inputs.getter();
    Model.inputs.setter();
    Model.outputs.getter();
    Model.outputs.setter();
    v28 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v28(v26, v24);
    v28((uint64_t)v23, v24);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t OUTLINED_FUNCTION_5_23()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_6_24()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_8_23()
{
  return static FeatureType.shapedArray(dataType:shape:optional:)();
}

uint64_t OUTLINED_FUNCTION_9_21()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 152, 0);
}

uint64_t OUTLINED_FUNCTION_10_20()
{
  return type metadata accessor for ModelKind();
}

uint64_t OUTLINED_FUNCTION_11_20()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_12_20()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_13_25()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 120, 0);
}

uint64_t OUTLINED_FUNCTION_14_16()
{
  return type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
}

uint64_t OUTLINED_FUNCTION_15_18()
{
  return static FeatureType.shapedArray(dataType:shape:optional:)();
}

uint64_t *initializeBufferWithCopyOfBuffer for MLLinearRegressor.PersistentParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DataFrame();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v9, 1, v7))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v7);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *(uint64_t *)((char *)a1 + v15) = *(uint64_t *)((char *)a2 + v15);
    v19 = a3[8];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *((_QWORD *)v21 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v22)
    {
      *((_QWORD *)v20 + 3) = v22;
      (**(void (***)(char *, char *, uint64_t))(v22 - 8))(v20, v21, v22);
    }
    else
    {
      v23 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_OWORD *)v20 + 1) = v23;
    }
    v24 = *((_OWORD *)v21 + 3);
    *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
    *((_OWORD *)v20 + 3) = v24;
    *((_QWORD *)v20 + 8) = *((_QWORD *)v21 + 8);
    v20[72] = v21[72];
  }
  return a1;
}

uint64_t destroy for MLLinearRegressor.PersistentParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;

  v4 = type metadata accessor for DataFrame();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v4))
    v5(v6, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = a1 + *(int *)(a2 + 32);
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

char *initializeWithCopy for MLLinearRegressor.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v6 = type metadata accessor for DataFrame();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = &a1[v12];
  v15 = &a2[v12];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  v17 = a3[8];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *((_QWORD *)v19 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20)
  {
    *((_QWORD *)v18 + 3) = v20;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v20 - 8))((uint64_t)v18, (uint64_t)v19, v20);
  }
  else
  {
    v21 = *((_OWORD *)v19 + 1);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v21;
  }
  v22 = *((_OWORD *)v19 + 3);
  *((_OWORD *)v18 + 2) = *((_OWORD *)v19 + 2);
  *((_OWORD *)v18 + 3) = v22;
  *((_QWORD *)v18 + 8) = *((_QWORD *)v19 + 8);
  v18[72] = v19[72];
  return a1;
}

char *assignWithCopy for MLLinearRegressor.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;

  v6 = type metadata accessor for DataFrame();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v9], 1, v6);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[8];
  v19 = (uint64_t)&a1[v18];
  v20 = &a2[v18];
  v21 = *((_QWORD *)v20 + 3);
  if (!*(_QWORD *)&a1[v18 + 24])
  {
    if (v21)
    {
      *(_QWORD *)(v19 + 24) = v21;
      (**(void (***)(uint64_t, uint64_t))(v21 - 8))(v19, (uint64_t)v20);
      goto LABEL_14;
    }
LABEL_13:
    v22 = *((_OWORD *)v20 + 1);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 16) = v22;
    goto LABEL_14;
  }
  if (!v21)
  {
    __swift_destroy_boxed_opaque_existential_0(v19);
    goto LABEL_13;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v19, (uint64_t *)v20);
LABEL_14:
  *(_QWORD *)(v19 + 32) = *((_QWORD *)v20 + 4);
  *(_QWORD *)(v19 + 40) = *((_QWORD *)v20 + 5);
  *(_QWORD *)(v19 + 48) = *((_QWORD *)v20 + 6);
  *(_QWORD *)(v19 + 56) = *((_QWORD *)v20 + 7);
  *(_QWORD *)(v19 + 64) = *((_QWORD *)v20 + 8);
  *(_BYTE *)(v19 + 72) = v20[72];
  return a1;
}

char *assignWithTake for MLLinearRegressor.PersistentParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;

  v6 = type metadata accessor for DataFrame();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v9], 1, v6);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v6);
  if (EnumTagSinglePayload)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = &a1[v20];
  if (*(_QWORD *)&a1[v20 + 24])
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&a1[v20]);
  v22 = *(_OWORD *)&a2[v20 + 16];
  *(_OWORD *)v21 = *(_OWORD *)&a2[v20];
  *((_OWORD *)v21 + 1) = v22;
  *((_QWORD *)v21 + 4) = *(_QWORD *)&a2[v20 + 32];
  *(_OWORD *)(v21 + 40) = *(_OWORD *)&a2[v20 + 40];
  *(_OWORD *)(v21 + 56) = *(_OWORD *)&a2[v20 + 56];
  v21[72] = a2[v20 + 72];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLinearRegressor.PersistentParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE86960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v6 = OUTLINED_FUNCTION_21_3();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v9;
    v8 = v4 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  v11 = *(_QWORD *)(v4 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for MLLinearRegressor.PersistentParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AE86A08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = OUTLINED_FUNCTION_21_3();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
    return __swift_storeEnumTagSinglePayload(v10, v4, v4, v9);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = v5 + *(int *)(a4 + 20);
    return __swift_storeEnumTagSinglePayload(v10, v4, v4, v9);
  }
  *(_QWORD *)(v5 + *(int *)(a4 + 24) + 8) = (v4 - 1);
  return result;
}

uint64_t type metadata accessor for MLLinearRegressor.PersistentParameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLLinearRegressor.PersistentParameters;
  if (!type metadata singleton initialization cache for MLLinearRegressor.PersistentParameters)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for MLLinearRegressor.PersistentParameters()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for DataFrame();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DataFrame?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML17MLLinearRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML17ij13V20Persistentl48V16sessionDirectoryAE10Foundation3URLV_tKcfcAC05k5F0V14md3O07c5M00M5E17VcAMmcfu_AmPcfu0_AOXMtTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v4 = type metadata accessor for DataFrame();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DataFrame?(a1, (uint64_t)v10);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {
    v11 = type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
    v12 = a2;
    v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
    v14 = type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 = a2;
    v13 = 0;
    v11 = v14;
  }
  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v11);
}

uint64_t MLLinearRegressor.PersistentParameters.init(sessionDirectory:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  Class isa;
  id v54;
  id v55;
  char v56;
  char *v57;
  void (*v58)(uint64_t, uint64_t);
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *boxed_opaque_existential_0;
  char *v78;
  void *v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, _QWORD, _QWORD);
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  char v125[8];
  uint64_t v126;

  v120 = a1;
  v126 = *MEMORY[0x24BDAC8D0];
  v108 = type metadata accessor for CSVType();
  v107 = *(_QWORD *)(v108 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v4);
  type metadata accessor for CSVReadingOptions();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_211();
  v105 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLLinearRegressor.ModelParameters.ValidationData?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v113 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v12);
  v13 = type metadata accessor for DataFrame();
  v106 = *(_QWORD *)(v13 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v16);
  v115 = type metadata accessor for MLLinearRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v20);
  v21 = type metadata accessor for URL();
  v117 = *(_QWORD *)(v21 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v93 - v25;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v93 - v28;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v93 - v31;
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v93 - v34;
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v93 - v37;
  v39 = type metadata accessor for MLLinearRegressor.PersistentParameters();
  v40 = *(int *)(v39 + 20);
  v119 = a2;
  v116 = a2 + v40;
  v111 = v13;
  __swift_storeEnumTagSinglePayload(a2 + v40, 1, 1, v13);
  v41 = v120;
  URL.appendingPathComponent(_:)();
  v42 = v118;
  v43 = Data.init(contentsOf:options:)();
  v118 = v42;
  if (v42)
  {
    v45 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
    v45((uint64_t)v41, v21);
    v45((uint64_t)v38, v21);
    v46 = v116;
    return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v46, &demangling cache variable for type metadata for DataFrame?);
  }
  v97 = v29;
  v96 = v26;
  v98 = v32;
  v99 = v35;
  v104 = v39;
  v47 = v117;
  v48 = *(void (**)(char *, uint64_t))(v117 + 8);
  v49 = v43;
  v50 = v44;
  v48(v38, v21);
  v51 = (void *)objc_opt_self();
  v52 = v21;
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v123 = 0;
  v54 = objc_msgSend(v51, sel_propertyListWithData_options_format_error_, isa, 0, 0, &v123);

  v55 = (id)v123;
  if (!v54)
  {
    v79 = v55;
    _convertNSErrorToError(_:)();

    swift_willThrow(v80);
    outlined consume of Data._Representation(v49, v50);
    v48(v120, v52);
LABEL_24:
    v46 = v116;
    OUTLINED_FUNCTION_28_8();
    return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v46, &demangling cache variable for type metadata for DataFrame?);
  }
  v100 = v49;
  v101 = v50;
  v103 = (void (*)(uint64_t, uint64_t))v48;
  v102 = v52;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v125, (uint64_t)&v123);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v56 = OUTLINED_FUNCTION_0_18();
  v57 = v120;
  if ((v56 & 1) == 0)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_18_0(v81, 0xD000000000000037);
    OUTLINED_FUNCTION_3_14();
    v103((uint64_t)v57, v102);
    OUTLINED_FUNCTION_19_4();
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_9_10(0x746567726174, 0xE600000000000000, &v123);
  v58 = v103;
  if (!v124)
  {
    v82 = OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_27_11(v82, &demangling cache variable for type metadata for Any?);
    v46 = v116;
LABEL_26:
    OUTLINED_FUNCTION_28_8();
LABEL_33:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_18_0(v84, 0xD000000000000034);
    OUTLINED_FUNCTION_3_14();
    v58((uint64_t)v57, v102);
    OUTLINED_FUNCTION_19_4();
    return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v46, &demangling cache variable for type metadata for DataFrame?);
  }
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_28_8();
  if ((v59 & 1) == 0)
  {
    OUTLINED_FUNCTION_106_0();
    v46 = v116;
    goto LABEL_33;
  }
  v60 = v121;
  v61 = v122;
  OUTLINED_FUNCTION_9_10(0xD000000000000010, 0x800000021AFF2390, &v123);
  if (!v124)
    goto LABEL_29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
  {
LABEL_31:
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_106_0();
    goto LABEL_32;
  }
  v94 = v60;
  v62 = v121;
  OUTLINED_FUNCTION_9_10(0x617265744978616DLL, 0xED0000736E6F6974, &v123);
  if (!v124)
  {
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    OUTLINED_FUNCTION_60_0();
    v83 = OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_27_11(v83, &demangling cache variable for type metadata for Any?);
LABEL_32:
    v46 = v116;
    v58 = v103;
    goto LABEL_33;
  }
  v95 = v62;
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
  {
LABEL_30:
    OUTLINED_FUNCTION_5_14();
    goto LABEL_31;
  }
  v63 = v121;
  OUTLINED_FUNCTION_9_10(0x746C616E6550316CLL, 0xE900000000000079, &v123);
  if (!v124)
    goto LABEL_35;
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
  {
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_106_0();
    goto LABEL_37;
  }
  v64 = v121;
  OUTLINED_FUNCTION_9_10(0x746C616E6550326CLL, 0xE900000000000079, &v123);
  if (!v124)
  {
LABEL_35:
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_60_0();
    v86 = OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_27_11(v86, &demangling cache variable for type metadata for Any?);
LABEL_37:
    v57 = v120;
    goto LABEL_32;
  }
  v65 = OUTLINED_FUNCTION_0_18();
  v57 = v120;
  if ((v65 & 1) == 0)
    goto LABEL_30;
  v66 = v121;
  OUTLINED_FUNCTION_9_10(0x657A695370657473, 0xE800000000000000, &v123);
  if (!v124)
    goto LABEL_28;
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
    goto LABEL_30;
  v67 = v121;
  OUTLINED_FUNCTION_9_10(0xD000000000000014, 0x800000021AFF2EE0, &v123);
  if (!v124)
    goto LABEL_28;
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
  {
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_60_0();
LABEL_42:
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  v68 = v121;
  OUTLINED_FUNCTION_9_10(0xD000000000000010, 0x800000021AFF2F00, &v123);
  OUTLINED_FUNCTION_106_0();
  if (!v124)
  {
    OUTLINED_FUNCTION_5_14();
    v87 = OUTLINED_FUNCTION_60_0();
    OUTLINED_FUNCTION_27_11(v87, &demangling cache variable for type metadata for Any?);
LABEL_43:
    v57 = v120;
    v46 = v116;
    v58 = v103;
    goto LABEL_26;
  }
  if ((OUTLINED_FUNCTION_0_18() & 1) == 0)
  {
    OUTLINED_FUNCTION_5_14();
    goto LABEL_42;
  }
  v69 = v121;
  v70 = v104;
  v71 = v119;
  v72 = (_QWORD *)(v119 + *(int *)(v104 + 24));
  *v72 = v94;
  v72[1] = v61;
  *(_QWORD *)(v71 + *(int *)(v70 + 28)) = v95;
  v73 = v110;
  *v110 = 0;
  v73[1] = 0;
  *((_WORD *)v73 + 8) = 256;
  v74 = v115;
  swift_storeEnumTagMultiPayload();
  v75 = (_QWORD *)(v71 + *(int *)(v70 + 32));
  *(_OWORD *)v75 = 0u;
  *((_OWORD *)v75 + 1) = 0u;
  v75[4] = 10;
  *(_OWORD *)(v75 + 5) = xmmword_21AFE9550;
  *(_OWORD *)(v75 + 7) = xmmword_21AFE9560;
  *((_BYTE *)v75 + 72) = 1;
  v76 = v109;
  outlined init with copy of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)v73, v109);
  v124 = v74;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v123);
  outlined init with take of MLLinearRegressor.ModelParameters.ValidationData(v76, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)&v123, (uint64_t)v75, &demangling cache variable for type metadata for Any?);
  outlined destroy of MLLinearRegressor.ModelParameters.ValidationData((uint64_t)v73);
  v75[4] = v63;
  v75[5] = v64;
  v75[6] = v66;
  v75[7] = v67;
  v75[8] = v68;
  v110 = v75;
  *((_BYTE *)v75 + 72) = v69;
  v78 = v99;
  URL.appendingPathComponent(_:)();
  OUTLINED_FUNCTION_6_12();
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v97, v78, v102);
  OUTLINED_FUNCTION_16_11();
  v118 = 0;
  v88 = OUTLINED_FUNCTION_32_6();
  OUTLINED_FUNCTION_24_5(v88, v89);
  OUTLINED_FUNCTION_10_11((uint64_t)v96, (uint64_t)&v122);
  OUTLINED_FUNCTION_16_11();
  OUTLINED_FUNCTION_23_6(v114, 0);
  v90 = v116;
  outlined assign with take of Any?(v114, v116, &demangling cache variable for type metadata for DataFrame?);
  v91 = v113;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML17MLLinearRegressorV15ModelParametersV010ValidationD0OTg503_s8g4ML17ij13V20Persistentl48V16sessionDirectoryAE10Foundation3URLV_tKcfcAC05k5F0V14md3O07c5M00M5E17VcAMmcfu_AmPcfu0_AOXMtTf1ncn_n(v90, v113);
  if (__swift_getEnumTagSinglePayload(v91, 1, v115) == 1)
  {
    swift_storeEnumTagMultiPayload();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v113, &demangling cache variable for type metadata for MLLinearRegressor.ModelParameters.ValidationData?);
  }
  else
  {
    outlined init with take of MLLinearRegressor.ModelParameters.ValidationData(v113, v112);
  }
  v124 = v115;
  v92 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v123);
  outlined init with take of MLLinearRegressor.ModelParameters.ValidationData(v112, (uint64_t)v92);
  outlined assign with take of Any?((uint64_t)&v123, (uint64_t)v110, &demangling cache variable for type metadata for Any?);
  OUTLINED_FUNCTION_3_14();
  OUTLINED_FUNCTION_13_14();
  OUTLINED_FUNCTION_14_9((uint64_t)&v122);
  OUTLINED_FUNCTION_14_9((uint64_t)&v123);
  return OUTLINED_FUNCTION_19_4();
}

uint64_t outlined destroy of MLLinearRegressor.ModelParameters(uint64_t a1)
{
  destroy for MLBoostedTreeRegressor.ModelParameters(a1);
  return a1;
}

uint64_t MLLinearRegressor.PersistentParameters.save(toSessionDirectory:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  Class isa;
  id v27;
  id v28;
  void (*v29)(_QWORD);
  uint64_t v30;
  void (*v31)(uint64_t);
  void *v33;
  double v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  uint64_t v53;
  uint64_t v54;
  id v55[55];

  v53 = a1;
  v2 = v1;
  v55[53] = *(id *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v46 = v4;
  v5 = type metadata accessor for CSVWritingOptions();
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  v45 = v7;
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_211();
  v48 = v9;
  v54 = type metadata accessor for URL();
  v51 = *(_QWORD *)(v54 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  v44 = v11;
  MEMORY[0x24BDAC7A8](v12);
  v47 = (char *)&v44 - v13;
  MEMORY[0x24BDAC7A8](v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F60;
  *(_QWORD *)(inited + 32) = 0x746567726174;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v16 = (int *)type metadata accessor for MLLinearRegressor.PersistentParameters();
  v17 = (_QWORD *)(v2 + v16[6]);
  v18 = v17[1];
  v19 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = *v17;
  *(_QWORD *)(inited + 56) = v18;
  *(_QWORD *)(inited + 72) = v19;
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x800000021AFF2390;
  v20 = *(_QWORD *)(v2 + v16[7]);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(_QWORD *)(inited + 96) = v20;
  *(_QWORD *)(inited + 120) = v21;
  strcpy((char *)(inited + 128), "maxIterations");
  *(_WORD *)(inited + 142) = -4864;
  v22 = v2 + v16[8];
  v23 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 144) = *(_QWORD *)(v22 + 32);
  *(_QWORD *)(inited + 168) = v23;
  *(_QWORD *)(inited + 176) = 0x746C616E6550316CLL;
  *(_QWORD *)(inited + 184) = 0xE900000000000079;
  v24 = MEMORY[0x24BEE13C8];
  *(_QWORD *)(inited + 192) = *(_QWORD *)(v22 + 40);
  *(_QWORD *)(inited + 216) = v24;
  *(_QWORD *)(inited + 224) = 0x746C616E6550326CLL;
  *(_QWORD *)(inited + 232) = 0xE900000000000079;
  *(_QWORD *)(inited + 240) = *(_QWORD *)(v22 + 48);
  *(_QWORD *)(inited + 264) = v24;
  *(_QWORD *)(inited + 272) = 0x657A695370657473;
  *(_QWORD *)(inited + 280) = 0xE800000000000000;
  *(_QWORD *)(inited + 288) = *(_QWORD *)(v22 + 56);
  *(_QWORD *)(inited + 312) = v24;
  *(_QWORD *)(inited + 320) = 0xD000000000000014;
  *(_QWORD *)(inited + 328) = 0x800000021AFF2EE0;
  *(_QWORD *)(inited + 336) = *(_QWORD *)(v22 + 64);
  *(_QWORD *)(inited + 360) = v24;
  *(_QWORD *)(inited + 368) = 0xD000000000000010;
  *(_QWORD *)(inited + 376) = 0x800000021AFF2F00;
  LOBYTE(v22) = *(_BYTE *)(v22 + 72);
  *(_QWORD *)(inited + 408) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 384) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_10();
  Dictionary.init(dictionaryLiteral:)();
  v25 = (void *)objc_opt_self();
  OUTLINED_FUNCTION_31_10();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v55[0] = 0;
  v27 = objc_msgSend(v25, sel_dataWithPropertyList_format_options_error_, isa, 200, 0, v55, v44, v45, v46);

  v28 = v55[0];
  if (v27)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    URL.appendingPathComponent(_:)();
    v29 = v52;
    Data.write(to:options:)();
    if (v29)
    {
      v30 = OUTLINED_FUNCTION_29_7();
      v31(v30);
      return OUTLINED_FUNCTION_9_4();
    }
    else
    {
      v35 = OUTLINED_FUNCTION_29_7();
      v52 = v36;
      v36(v35);
      URL.appendingPathComponent(_:)();
      OUTLINED_FUNCTION_8_5();
      v37 = v48;
      OUTLINED_FUNCTION_2_19();
      v51 = type metadata accessor for DataFrame();
      DataFrameProtocol.writeCSV(to:options:)();
      v49 = *(_QWORD *)(v49 + 8);
      ((void (*)(uint64_t, uint64_t))v49)(v37, v50);
      v38 = OUTLINED_FUNCTION_29_7();
      v39 = (void (*)(uint64_t, uint64_t))v52;
      v52(v38);
      v40 = v2 + v16[5];
      v41 = v46;
      outlined init with copy of DataFrame?(v40, v46);
      if (__swift_getEnumTagSinglePayload(v41, 1, v51) == 1)
      {
        OUTLINED_FUNCTION_9_4();
        return outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v41, &demangling cache variable for type metadata for DataFrame?);
      }
      else
      {
        v42 = v44;
        OUTLINED_FUNCTION_6_12();
        OUTLINED_FUNCTION_8_5();
        v43 = v45;
        OUTLINED_FUNCTION_2_19();
        DataFrameProtocol.writeCSV(to:options:)();
        OUTLINED_FUNCTION_9_4();
        ((void (*)(uint64_t, uint64_t))v49)(v43, v50);
        v39(v42, v54);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v41);
      }
    }
  }
  else
  {
    v33 = v28;
    _convertNSErrorToError(_:)();

    return swift_willThrow(v34);
  }
}

void MLRegressorMetrics.init(maximumError:rootMeanSquaredError:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 0;
}

unint64_t MLRegressorMetrics.description.getter()
{
  uint64_t v0;
  unint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;

  v1 = 0xD000000000000038;
  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
  {
    v2 = *(double *)v0;
    if (*(double *)v0 >= 0.0)
    {
      v3 = *(double *)(v0 + 8);
      if (v3 >= 0.0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v4 = OUTLINED_FUNCTION_0_22();
        *(_OWORD *)(v4 + 16) = xmmword_21AFE7DA0;
        v5 = MEMORY[0x24BEE13C8];
        v6 = MEMORY[0x24BEE1448];
        *(_QWORD *)(v4 + 56) = MEMORY[0x24BEE13C8];
        *(_QWORD *)(v4 + 64) = v6;
        *(double *)(v4 + 32) = v2;
        v7 = OUTLINED_FUNCTION_1_27();
        v8 = OUTLINED_FUNCTION_0_22();
        *(_OWORD *)(v8 + 16) = xmmword_21AFE7DA0;
        *(_QWORD *)(v8 + 56) = v5;
        *(_QWORD *)(v8 + 64) = v6;
        *(double *)(v8 + 32) = v3;
        v9 = OUTLINED_FUNCTION_1_27();
        v11 = v10;
        swift_bridgeObjectRetain();
        v12._countAndFlagsBits = v9;
        v12._object = v11;
        String.append(_:)(v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v7;
      }
    }
  }
  return v1;
}

BOOL MLRegressorMetrics.isValid.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 16) & 1) == 0;
}

id MLRegressorMetrics.error.getter()
{
  uint64_t v0;
  id v1;
  id v2;

  if (*(_BYTE *)(v0 + 16) != 1)
    return 0;
  v1 = *(id *)v0;
  v2 = *(id *)v0;
  return v1;
}

double MLRegressorMetrics.maximumError.getter()
{
  _BYTE *v0;
  double result;

  result = -1.0;
  if ((v0[16] & 1) == 0)
    return *(double *)v0;
  return result;
}

double MLRegressorMetrics.rootMeanSquaredError.getter()
{
  uint64_t v0;
  double result;

  result = -1.0;
  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
    return *(double *)(v0 + 8);
  return result;
}

unint64_t MLRegressorMetrics.debugDescription.getter()
{
  uint64_t v0;
  double v1;
  double v2;
  char v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;

  v2 = *(double *)v0;
  v1 = *(double *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  if ((v3 & 1) != 0)
  {
    v4 = *(id *)&v2;
  }
  else if (v2 >= 0.0 && v1 >= 0.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v5 = OUTLINED_FUNCTION_0_22();
    v6 = MEMORY[0x24BEE13C8];
    *(_OWORD *)(v5 + 16) = xmmword_21AFE7DA0;
    v7 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v5 + 56) = v6;
    *(_QWORD *)(v5 + 64) = v7;
    *(double *)(v5 + 32) = v2;
    v8 = String.init(format:_:)();
    v9 = OUTLINED_FUNCTION_0_22();
    *(_OWORD *)(v9 + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(v9 + 56) = v6;
    *(_QWORD *)(v9 + 64) = v7;
    *(double *)(v9 + 32) = v1;
    v10 = OUTLINED_FUNCTION_1_27();
    v12 = v11;
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Result<_RegressorMetrics, Error>(*(id *)&v2, *(uint64_t *)&v1, 0);
    return v8;
  }
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)&v2, *(uint64_t *)&v1, v3);
  return 0xD000000000000038;
}

unint64_t MLRegressorMetrics.playgroundDescription.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;

  v2 = MLRegressorMetrics.description.getter();
  v4 = v3;
  v5 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  @nonobjc NSAttributedString.init(string:attributes:)(v2, v4, 0);
  v7 = v6;
  result = type metadata accessor for NSAttributedString();
  a1[3] = result;
  *a1 = v7;
  return result;
}

void destroy for MLRegressorMetrics(uint64_t a1)
{
  outlined consume of Result<_RegressorMetrics, Error>(*(id *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for MLRegressorMetrics(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MLRegressorMetrics(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Result<_RegressorMetrics, Error>(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Result<_RegressorMetrics, Error>(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MLRegressorMetrics(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of Result<_RegressorMetrics, Error>(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRegressorMetrics(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLRegressorMetrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLRegressorMetrics()
{
  return &type metadata for MLRegressorMetrics;
}

void *type metadata accessor for _RegressorMetrics()
{
  return &unk_24DE21358;
}

uint64_t OUTLINED_FUNCTION_1_27()
{
  return String.init(format:_:)();
}

uint64_t LabelEncoder<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v13 = a2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
  v8 = type metadata accessor for Array();
  v10 = a6;
  MEMORY[0x22075B938](MEMORY[0x24BEE12A0], v8, &v10);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> LabelEncoder<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return LabelEncoder<>.encode(to:)(a1, *v5, a3, *(_QWORD *)(a2 + 16), a5, *(_QWORD *)(a3 - 8));
}

uint64_t LabelEncoder<>.init(from:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[4];

  v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v4)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v11, v11[3]);
    v8 = type metadata accessor for Array();
    v10 = a4;
    MEMORY[0x22075B938](MEMORY[0x24BEE12D0], v8, &v10);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    MEMORY[0x22075B938](MEMORY[0x24BEE12C8], v8);
    Set.init<A>(_:)();
    v7 = SortedSet.init(_:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v7;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> LabelEncoder<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;

  result = LabelEncoder<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8));
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }
  return result;
}

uint64_t type metadata accessor for LabelEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LabelEncoder);
}

unint64_t MLSoundClassifier.ModelParameters.ClassifierType.description.getter()
{
  return 0xD000000000000012;
}

uint64_t static MLSoundClassifier.ModelParameters.ClassifierType.== infix(_:_:)()
{
  return 1;
}

void MLSoundClassifier.ModelParameters.ClassifierType.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int MLSoundClassifier.ModelParameters.ClassifierType.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLSoundClassifier.ModelParameters.ClassifierType()
{
  return MLSoundClassifier.ModelParameters.ClassifierType.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLSoundClassifier.ModelParameters.ClassifierType()
{
  MLSoundClassifier.ModelParameters.ClassifierType.hash(into:)();
}

unint64_t lazy protocol witness table accessor for type MLSoundClassifier.ModelParameters.ClassifierType and conformance MLSoundClassifier.ModelParameters.ClassifierType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLSoundClassifier.ModelParameters.ClassifierType and conformance MLSoundClassifier.ModelParameters.ClassifierType;
  if (!lazy protocol witness table cache variable for type MLSoundClassifier.ModelParameters.ClassifierType and conformance MLSoundClassifier.ModelParameters.ClassifierType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLSoundClassifier.ModelParameters.ClassifierType, &type metadata for MLSoundClassifier.ModelParameters.ClassifierType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLSoundClassifier.ModelParameters.ClassifierType and conformance MLSoundClassifier.ModelParameters.ClassifierType);
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLSoundClassifier.ModelParameters.ClassifierType()
{
  MLSoundClassifier.ModelParameters.ClassifierType.description.getter();
  return 0xD000000000000012;
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.ModelParameters.ClassifierType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21AE88978 + 4 * byte_21AFEAA40[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21AE88998 + 4 * byte_21AFEAA45[v4]))();
}

_BYTE *sub_21AE88978(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21AE88998(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21AE889A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21AE889A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21AE889B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21AE889B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.ModelParameters.ClassifierType()
{
  return &type metadata for MLSoundClassifier.ModelParameters.ClassifierType;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = type metadata accessor for FeatureDescription();
  v3 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v15 = v1;
    v17 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v7 = v17;
    v8 = (char *)(a1 + 56);
    do
    {
      v9 = *((_QWORD *)v8 - 3);
      v10 = *((_QWORD *)v8 - 2);
      v11 = *((_QWORD *)v8 - 1);
      v12 = *v8;
      swift_bridgeObjectRetain();
      outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v11, v12);
      ColumnDescriptor.featureDescription.getter(v9, v10, v11, v12);
      swift_bridgeObjectRelease();
      outlined consume of ColumnDescriptor.ColumnTypeDescriptor(v11, v12);
      v17 = v7;
      v13 = *(_QWORD *)(v7 + 16);
      if (v13 >= *(_QWORD *)(v7 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v7 = v17;
      }
      v8 += 32;
      *(_QWORD *)(v7 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v13, v5, v16);
      --v6;
    }
    while (v6);
  }
  return v7;
}

void TreeRegressorModel.export(internalMetadata:)(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  void *v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v72 = a1;
  v3 = type metadata accessor for ModelKind();
  v71 = *(_QWORD *)(v3 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v70 = v5;
  OUTLINED_FUNCTION_118();
  v68 = type metadata accessor for FeatureType();
  v66 = *(_QWORD *)(v68 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v67 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v65 = v9;
  OUTLINED_FUNCTION_118();
  v10 = type metadata accessor for Model();
  v73 = *(_QWORD *)(v10 - 8);
  v74 = v10;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_208();
  v69 = v12;
  MEMORY[0x24BDAC7A8](v13);
  v76 = (char *)&v61 - v14;
  OUTLINED_FUNCTION_118();
  v15 = type metadata accessor for URL.DirectoryHint();
  v78 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)&v79 = v15;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_64();
  v77 = v17;
  OUTLINED_FUNCTION_118();
  v18 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for URL();
  v80 = *(_QWORD *)(v82 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_208();
  v75 = v23;
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v61 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v61 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v81 = (char *)&v61 - v31;
  v32 = v1[2];
  if (!v32)
    goto LABEL_9;
  v33 = specialized FeatureVectorizer.Transformer.exportEncoders()(v1[2], v1[3], v1[4]);
  if (v2)
    return;
  v61 = v32;
  v64 = v33;
  v63 = v1;
  v62 = v3;
  v34 = (void *)objc_opt_self();
  v35 = objc_msgSend(v34, sel_defaultManager);
  NSFileManager.createTemporaryModelDirectory()();
  if (v36)
  {
    OUTLINED_FUNCTION_2_32();

    return;
  }

  v37 = objc_msgSend(v34, sel_defaultManager);
  NSFileManager.temporaryModelDirectory.getter();

  UUID.init()();
  v38 = UUID.uuidString.getter();
  v40 = v39;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v83 = v38;
  v84 = v40;
  v42 = v77;
  v41 = v78;
  v43 = v79;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v78 + 104))(v77, *MEMORY[0x24BDCD7A0], v79);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
  swift_bridgeObjectRelease();
  v44 = v80;
  v45 = *(void (**)(char *, uint64_t))(v80 + 8);
  v46 = v82;
  OUTLINED_FUNCTION_3_27((uint64_t)v27);
  v47 = v81;
  URL.appendingPathExtension(_:)();
  OUTLINED_FUNCTION_3_27((uint64_t)v30);
  type metadata accessor for TreeRegressorModel();
  BaseTreeRegressorModel.export(to:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v75, v47, v46);
  v48 = v76;
  Model.init(contentsOf:)();
  v49 = v65;
  specialized BidirectionalCollection.last.getter(v64, v65);
  v50 = v74;
  if (__swift_getEnumTagSinglePayload(v49, 1, v74) == 1)
  {
    __break(1u);
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  Model.outputs.getter();
  v80 = *(_QWORD *)(v73 + 8);
  ((void (*)(uint64_t, uint64_t))v80)(v49, v50);
  Model.inputs.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  type metadata accessor for FeatureDescription();
  v51 = swift_allocObject();
  v79 = xmmword_21AFE7DA0;
  *(_OWORD *)(v51 + 16) = xmmword_21AFE7DA0;
  swift_bridgeObjectRetain();
  v52 = v67;
  FeatureType.DoubleParameters.init(optional:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v66 + 104))(v52, *MEMORY[0x24BE62570], v68);
  FeatureDescription.init(name:type:description:)();
  Model.outputs.setter();
  swift_bridgeObjectRetain();
  Model.predictedFeatureName.setter();
  Dictionary.init(dictionaryLiteral:)();
  Model.metadata.setter();
  v53 = v69;
  Model.init()();
  Model.specificationVersion.setter();
  v54 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n(v54);
  swift_bridgeObjectRelease();
  Model.inputs.setter();
  Model.outputs.getter();
  Model.outputs.setter();
  swift_bridgeObjectRetain();
  Model.predictedFeatureName.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
  v55 = v73;
  v56 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
  v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = v79;
  v58 = v74;
  (*(void (**)(unint64_t, char *, uint64_t))(v55 + 16))(v57 + v56, v48, v74);
  v83 = v64;
  specialized Array.append<A>(contentsOf:)(v57);
  v59 = v70;
  PipelineRegressorConfiguration.init(models:names:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v71 + 104))(v59, *MEMORY[0x24BE63250], v62);
  Model.kind.setter();
  ((void (*)(char *, uint64_t))v80)(v48, v58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v72, v53, v58);
  v60 = v81;
  $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
  v45(v60, v82);
}

uint64_t OUTLINED_FUNCTION_2_32()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_3_27(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t TreeClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_42_7(v3);
  DataFrame.init()();
  v4 = OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_42_7(v4);
  v5 = OUTLINED_FUNCTION_26_16();
  OUTLINED_FUNCTION_42_7(v5);
  v6 = OUTLINED_FUNCTION_63_8();
  OUTLINED_FUNCTION_42_7(v6);
  v7 = v1 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics;
  type metadata accessor for AnyClassificationMetrics();
  OUTLINED_FUNCTION_57_0(v7);
  OUTLINED_FUNCTION_57_0(v1 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics);
  outlined init with take of MLHandPoseClassifier.ModelParameters(a1, v1 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

uint64_t TreeClassifierTrainingSessionDelegate.init(trainingData:validationData:targetColumn:featureColumns:configuration:sessionParameters:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t result;
  uint64_t v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  _QWORD *v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  OUTLINED_FUNCTION_8_1();
  v130 = v2;
  v131 = v3;
  v118 = v4;
  v119 = v1;
  v5 = v0;
  v122 = v7;
  v123 = v6;
  v121 = v8;
  v10 = v9;
  v124 = v11;
  v129 = v12;
  v116 = (_QWORD *)*v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v104 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_64();
  v105 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  v114 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = OUTLINED_FUNCTION_56_6();
  v111 = *(_QWORD *)(v113 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_208();
  v103 = v20;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_211();
  v110 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_64();
  v109 = v24;
  v25 = OUTLINED_FUNCTION_62_8();
  v125 = *(_QWORD *)(v25 - 8);
  v126 = v25;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_64();
  v120 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_64();
  v107 = v29;
  v30 = OUTLINED_FUNCTION_93();
  v31 = *(_QWORD **)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_50();
  v34 = v32 - v33;
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_211();
  v106 = v36;
  OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_50();
  v40 = v38 - v39;
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_211();
  v115 = v42;
  v108 = (char *)v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  v117 = (int *)v43;
  __swift_storeEnumTagSinglePayload((uint64_t)v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters, 1, 1, v43);
  DataFrame.init()();
  OUTLINED_FUNCTION_75_8((uint64_t)v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationData);
  v44 = (uint64_t)v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_classifier;
  v45 = OUTLINED_FUNCTION_26_16();
  __swift_storeEnumTagSinglePayload(v44, 1, 1, v45);
  v46 = (uint64_t)v5 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model;
  v47 = OUTLINED_FUNCTION_63_8();
  __swift_storeEnumTagSinglePayload(v46, 1, 1, v47);
  v48 = (uint64_t)v5 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics;
  v49 = type metadata accessor for AnyClassificationMetrics();
  v50 = v48;
  v51 = v118;
  __swift_storeEnumTagSinglePayload(v50, 1, 1, v49);
  v52 = v49;
  v53 = v129;
  __swift_storeEnumTagSinglePayload((uint64_t)v5 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics, 1, 1, v52);
  v112 = v10;
  v54 = v10;
  v55 = (uint64_t)v121;
  v56 = v119;
  static _FeatureUtilities.selectFeaturesFromTrainingData(trainingData:targetColumn:featureColumns:)(v53, v54, v121, v51);
  v119 = v56;
  if (v56)
  {
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_30();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v122, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_34_14();
    OUTLINED_FUNCTION_84_0(v124);
    v58 = (void (*)(uint64_t, uint64_t))v31[1];
    v58(v53, v30);
    outlined destroy of URL?((uint64_t)v5 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    v58((uint64_t)v5 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingData, v30);
    OUTLINED_FUNCTION_84_0((uint64_t)v5 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationData);
    outlined destroy of URL?((uint64_t)v5 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_classifier, &demangling cache variable for type metadata for AnyTreeClassifier?);
    outlined destroy of URL?((uint64_t)v5 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
    OUTLINED_FUNCTION_84_0((uint64_t)v5 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics);
    OUTLINED_FUNCTION_84_0((uint64_t)v5 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics);
    swift_deallocPartialClassInstance();
    return (uint64_t)v5;
  }
  v99 = v34;
  v102 = v45;
  v101 = v57;
  OUTLINED_FUNCTION_30();
  v59 = v106;
  v100 = (void (*)(uint64_t, uint64_t, uint64_t))v31[2];
  v100(v106, v53, v30);
  v60 = v107;
  outlined init with copy of URL?(v124, v107, &demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 16))(v120, v123, v126);
  v61 = v117;
  v62 = v40 + v117[5];
  OUTLINED_FUNCTION_75_8(v62);
  v116 = v31;
  v63 = (void (*)(uint64_t, uint64_t, uint64_t))v31[4];
  v118 = v30;
  v63(v40, v59, v30);
  OUTLINED_FUNCTION_31_2();
  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v60, v62, &demangling cache variable for type metadata for DataFrame?);
  v64 = (uint64_t *)(v40 + v61[6]);
  v65 = v112;
  *v64 = v112;
  v64[1] = v55;
  *(_QWORD *)(v40 + v61[7]) = v101;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 32))(v40 + v61[8], v120, v126);
  v66 = v115;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v40, v115, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  v67 = v109;
  outlined init with copy of MLTrainingSessionParameters(v66, v109, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  OUTLINED_FUNCTION_173_0();
  __swift_storeEnumTagSinglePayload(v68, v69, v70, (uint64_t)v61);
  OUTLINED_FUNCTION_1_28();
  OUTLINED_FUNCTION_50_7(v67, v71, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  swift_endAccess();
  v72 = v122;
  outlined init with copy of MLTrainingSessionParameters(v122, (uint64_t)v5 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  v73 = v110;
  MEMORY[0x220758A1C](v65, v55);
  AnyColumn.wrappedElementType.getter();
  v74 = v73;
  v75 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
  v75(v74, v113);
  v76 = v65;
  if (OUTLINED_FUNCTION_27_10())
  {
    v77 = v55;
    DataFrame.subscript.getter();
    specialized Set.init<A>(_:)();
    v79 = v78;
    v80 = *(_QWORD *)(v66 + v117[7]);
    OUTLINED_FUNCTION_195();
    OUTLINED_FUNCTION_82_3();
    v81 = (uint64_t)v114;
    AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v79, v65, v77, v80, v65);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v72, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_34_14();
    outlined destroy of URL?(v124, &demangling cache variable for type metadata for DataFrame?);
    ((void (*)(uint64_t, uint64_t))v116[1])(v129, v118);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v66, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    OUTLINED_FUNCTION_54_5(v81);
    OUTLINED_FUNCTION_1_28();
    v83 = v81;
LABEL_7:
    OUTLINED_FUNCTION_50_7(v83, v82, &demangling cache variable for type metadata for AnyTreeClassifier?);
    swift_endAccess();
    return (uint64_t)v5;
  }
  v84 = v75;
  v85 = v100;
  v86 = v129;
  v87 = v117;
  v88 = OUTLINED_FUNCTION_27_10();
  v89 = (uint64_t)v114;
  if (v88)
  {
    v90 = (uint64_t)v121;
    DataFrame.subscript.getter();
    specialized Set.init<A>(_:)();
    v92 = v91;
    v93 = v115;
    v94 = *(_QWORD *)(v115 + v87[7]);
    OUTLINED_FUNCTION_195();
    OUTLINED_FUNCTION_82_3();
    AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v92, v76, v90, v94, v86);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v122, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_34_14();
    outlined destroy of URL?(v124, &demangling cache variable for type metadata for DataFrame?);
    ((void (*)(uint64_t, uint64_t))v116[1])(v86, v118);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v93, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    OUTLINED_FUNCTION_54_5(v89);
    OUTLINED_FUNCTION_1_28();
    v83 = v89;
    goto LABEL_7;
  }
  v85(v99, v86, v118);
  v127 = 0;
  v128 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v127 = 0xD000000000000023;
  v128 = 0x800000021AFF4580;
  v96 = v103;
  MEMORY[0x220758A1C](v76, v121);
  OUTLINED_FUNCTION_123();
  AnyColumn.wrappedElementType.getter();
  v84(v96, v113);
  v97._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v97);
  OUTLINED_FUNCTION_123();
  v98._countAndFlagsBits = 46;
  v98._object = (void *)0xE100000000000000;
  String.append(_:)(v98);
  result = OUTLINED_FUNCTION_57_4();
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TreeClassifierTrainingSessionDelegate.setUp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  OUTLINED_FUNCTION_8_1();
  v5 = type metadata accessor for BaseTreeClassifierModel();
  v85 = *(_QWORD *)(v5 - 8);
  v86 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v84 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  v83 = (uint64_t *)((char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v81 = v11;
  v12 = OUTLINED_FUNCTION_62_8();
  v90 = *(_QWORD *)(v12 - 8);
  v91 = v12;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_208();
  v89 = v14;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_211();
  v93 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_64();
  v82 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_208();
  v87 = v20;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_211();
  v88 = v22;
  v23 = OUTLINED_FUNCTION_56_6();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v25);
  v26 = (int *)OUTLINED_FUNCTION_27_19();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_54_0();
  v28 = v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v28, v2, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v29 = OUTLINED_FUNCTION_94_2();
  v31 = OUTLINED_FUNCTION_128(v29, v30, (uint64_t)v26);
  if (v32)
  {
    OUTLINED_FUNCTION_93_1(v31, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    __break(1u);
    goto LABEL_11;
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters(v2, v4, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  v33 = v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingData;
  OUTLINED_FUNCTION_4_28();
  v34 = OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_9_19(v33, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24));
  OUTLINED_FUNCTION_7_21();
  v35 = v4 + v26[5];
  v36 = v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationData;
  OUTLINED_FUNCTION_4_28();
  outlined assign with copy of DataFrame?(v35, v36);
  OUTLINED_FUNCTION_7_21();
  v37 = v26[6];
  v92 = v0;
  v38 = (uint64_t *)(v4 + v37);
  v39 = *(_QWORD *)(v4 + v37);
  v40 = *(_QWORD *)(v4 + v37 + 8);
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_199();
  MEMORY[0x220758A1C](v39, v40);
  OUTLINED_FUNCTION_7_21();
  swift_bridgeObjectRelease();
  AnyColumn.wrappedElementType.getter();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v3, v23);
  if (OUTLINED_FUNCTION_27_10())
  {
    v41 = *v38;
    v42 = v38[1];
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_31_2();
    v43 = v82;
    OUTLINED_FUNCTION_38_7();
    OUTLINED_FUNCTION_7_21();
    OUTLINED_FUNCTION_12_0();
    specialized Set.init<A>(_:)();
    v45 = v44;
    v46 = *(_QWORD *)(v4 + v26[7]);
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_199();
    OUTLINED_FUNCTION_80_5();
    v47 = v88;
    AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v45, v41, v42, v46, v43);
    v48 = OUTLINED_FUNCTION_26_16();
    OUTLINED_FUNCTION_174_0(v47);
    v49 = v92;
    OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_50_7(v47, v50, &demangling cache variable for type metadata for AnyTreeClassifier?);
    OUTLINED_FUNCTION_7_21();
    v51 = v49;
    goto LABEL_6;
  }
  if (OUTLINED_FUNCTION_27_10())
  {
    v52 = *v38;
    v53 = v38[1];
    OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_31_2();
    v54 = v81;
    OUTLINED_FUNCTION_38_7();
    OUTLINED_FUNCTION_7_21();
    OUTLINED_FUNCTION_12_0();
    specialized Set.init<A>(_:)();
    v56 = v55;
    v57 = *(_QWORD *)(v4 + v26[7]);
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_199();
    OUTLINED_FUNCTION_80_5();
    v58 = v88;
    AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(v56, v52, v53, v57, v54);
    v48 = OUTLINED_FUNCTION_26_16();
    OUTLINED_FUNCTION_174_0(v58);
    v51 = v92;
    OUTLINED_FUNCTION_1_28();
    OUTLINED_FUNCTION_50_7(v58, v59, &demangling cache variable for type metadata for AnyTreeClassifier?);
    OUTLINED_FUNCTION_7_21();
LABEL_6:
    v60 = v26[8];
    v88 = v4;
    v61 = v4 + v60;
    v62 = v89;
    v63 = v90;
    v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16);
    v65 = v91;
    v64(v89, v61, v91);
    v66 = v51 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_classifier;
    OUTLINED_FUNCTION_4_28();
    OUTLINED_FUNCTION_26_16();
    OUTLINED_FUNCTION_128(v66, 1, v48);
    if (!v32)
    {
      v64(v93, v62, v65);
      BaseTreeClassifier.configuration.setter();
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v65);
      OUTLINED_FUNCTION_7_21();
      v67 = v87;
      outlined init with copy of URL?(v66, v87, &demangling cache variable for type metadata for AnyTreeClassifier?);
      OUTLINED_FUNCTION_128(v67, 1, v48);
      if (!v32)
      {
        v69 = *(_QWORD *)v67;
        v68 = *(_QWORD *)(v67 + 8);
        v70 = *(_QWORD *)(v67 + 24);
        v71 = *(_BYTE *)(v67 + 32);
        v72 = v67;
        OUTLINED_FUNCTION_199();
        BaseTreeClassifier.makeTransformer(classCount:featureCount:)();
        if (!v1)
        {
          v73 = v83;
          *v83 = v69;
          v73[1] = v68;
          v74 = OUTLINED_FUNCTION_63_8();
          v73[3] = 0;
          v73[4] = 0;
          v73[2] = 0;
          OUTLINED_FUNCTION_9_19((uint64_t)v73 + *(int *)(v74 + 24), *(uint64_t (**)(uint64_t, uint64_t))(v85 + 32));
          v75 = (char *)v73 + *(int *)(v74 + 28);
          *(_QWORD *)v75 = v70;
          v75[8] = v71;
          OUTLINED_FUNCTION_31_2();
          outlined destroy of MLHandPoseClassifier.ModelParameters(v88, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
          outlined destroy of MLHandPoseClassifier.ModelParameters(v72, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
          OUTLINED_FUNCTION_173_0();
          __swift_storeEnumTagSinglePayload(v76, v77, v78, v74);
          OUTLINED_FUNCTION_1_28();
          OUTLINED_FUNCTION_50_7((uint64_t)v73, v79, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
          OUTLINED_FUNCTION_7_21();
          OUTLINED_FUNCTION_7();
          return;
        }
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
LABEL_13:
      swift_bridgeObjectRelease();
      swift_unexpectedError();
      __break(1u);
      goto LABEL_14;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
LABEL_14:
  OUTLINED_FUNCTION_57_4();
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TreeClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[5];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_8_1();
  v40 = v2;
  v47 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_208();
  v39[1] = v6;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_211();
  v39[3] = v8;
  OUTLINED_FUNCTION_62_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v44 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_208();
  v39[2] = v12;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v13);
  v39[4] = (char *)v39 - v14;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_211();
  v45 = v16;
  v17 = OUTLINED_FUNCTION_56_6();
  v42 = *(_QWORD *)(v17 - 8);
  v43 = v17;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_64();
  v41 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for MLCheckpoint();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_64();
  v46 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_49();
  v29 = v28 - v27;
  v30 = OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_54_0();
  v32 = v1 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v32, v29, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_128(v29, 1, v30);
  if (v33)
  {
    outlined destroy of URL?(v29, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    __break(1u);
    JUMPOUT(0x21AE8A87CLL);
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters(v29, v3, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  specialized BidirectionalCollection.last.getter(v47, (uint64_t)v22);
  v34 = OUTLINED_FUNCTION_94_2();
  v36 = OUTLINED_FUNCTION_128(v34, v35, v23);
  if (!v33)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v22, v46, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_91_0();
    __asm { BR              X10 }
  }
  OUTLINED_FUNCTION_93_1(v36, &demangling cache variable for type metadata for MLCheckpoint?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_18_0(v37, 0xD00000000000001DLL);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v3, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  OUTLINED_FUNCTION_7();
}

Swift::Int_optional __swiftcall TreeClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  uint64_t v1;
  int v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Bool v5;
  Swift::Int_optional result;

  v2 = *(unsigned __int8 *)phase;
  if (v2 == 2)
  {
    v4 = v1 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_sessionParameters;
    v3 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for MLTrainingSessionParameters() + 28));
  }
  else
  {
    v3 = 0;
  }
  v5 = v2 != 2;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

uint64_t TreeClassifierTrainingSessionDelegate.train(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[19] = a1;
  v2[20] = v1;
  v3 = type metadata accessor for MetricsKey();
  v2[21] = v3;
  v2[22] = *(_QWORD *)(v3 - 8);
  v2[23] = OUTLINED_FUNCTION_0();
  v4 = OUTLINED_FUNCTION_93();
  v2[24] = v4;
  v2[25] = *(_QWORD *)(v4 - 8);
  v2[26] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifier?);
  v2[27] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v2[28] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  v2[29] = OUTLINED_FUNCTION_0();
  return OUTLINED_FUNCTION_1();
}

void TreeClassifierTrainingSessionDelegate.train(from:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void);

  v2 = *(_QWORD *)(v0 + 160);
  v3 = OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model;
  *(_QWORD *)(v0 + 240) = OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model;
  v4 = v2 + v3;
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_73_5();
  v5 = type metadata accessor for AnyTreeClassifierModel();
  *(_QWORD *)(v0 + 248) = v5;
  OUTLINED_FUNCTION_60_6(v5, v6, v5);
  if (v4 == 1)
  {
    __break(1u);
    goto LABEL_23;
  }
  v7 = *(_QWORD *)(v0 + 160) + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_73_5();
  v8 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  OUTLINED_FUNCTION_60_6(v8, v9, v8);
  if ((_DWORD)v7 == 1)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 160) + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_sessionParameters;
  v12 = type metadata accessor for MLTrainingSessionParameters();
  v13 = *(_QWORD *)(v11 + *(int *)(v12 + 20));
  v14 = __OFADD__(v10, v13);
  *(_QWORD *)(v0 + 136) = v10 + v13;
  *(_BYTE *)(v0 + 144) = v14;
  if (__OFADD__(v10, v13))
    goto LABEL_24;
  v15 = *(_QWORD *)(v11 + *(int *)(v12 + 28));
  *(_QWORD *)(v0 + 256) = v15;
  v16 = __OFSUB__(v15, v10);
  v17 = v15 - v10;
  if (v16)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v13 >= v17)
    v18 = v17;
  else
    v18 = v13;
  *(_QWORD *)(v0 + 264) = v18;
  type metadata accessor for EventCollector();
  swift_allocObject();
  *(_QWORD *)(v0 + 272) = EventCollector.init()();
  if (v18 < 0)
    goto LABEL_26;
  if (v18)
  {
    v19 = *(_QWORD *)(v0 + 160);
    v20 = OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingData;
    *(_QWORD *)(v0 + 280) = OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_classifier;
    *(_QWORD *)(v0 + 288) = v20;
    v21 = v19 + v20;
    OUTLINED_FUNCTION_29_0();
    OUTLINED_FUNCTION_29_0();
    *(_QWORD *)(v0 + 296) = 0;
    if (*(_QWORD *)(v0 + 264))
    {
      v22 = OUTLINED_FUNCTION_103_3();
      OUTLINED_FUNCTION_101_4(v22, v23, &demangling cache variable for type metadata for AnyTreeClassifier?);
      v24 = type metadata accessor for AnyTreeClassifier();
      if (__swift_getEnumTagSinglePayload(v0 + 88, 1, v24) != 1)
      {
        OUTLINED_FUNCTION_18_13();
        OUTLINED_FUNCTION_44_7();
        if (__swift_getEnumTagSinglePayload((uint64_t)&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?, 1, v21) != 1)
        {
          v25 = *(_QWORD *)(v0 + 272);
          swift_retain();
          v26 = (_QWORD *)swift_task_alloc();
          OUTLINED_FUNCTION_98_2(v26, (uint64_t)TreeClassifierTrainingSessionDelegate.train(from:));
          OUTLINED_FUNCTION_13_26(v28, v27, (uint64_t)partial apply for closure #1 in TreeClassifierTrainingSessionDelegate.train(from:), v25);
          return;
        }
        goto LABEL_29;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      return;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_72_4();
  specialized EventCollector.getLast<A>(metric:type:)();
  OUTLINED_FUNCTION_37_8();
  if ((v1 & 1) == 0)
  {
    v29 = OUTLINED_FUNCTION_108_2();
    OUTLINED_FUNCTION_44_9(v29);
    OUTLINED_FUNCTION_121_2();
  }
  OUTLINED_FUNCTION_58_5();
  specialized EventCollector.getLast<A>(metric:type:)();
  v31 = v30;
  OUTLINED_FUNCTION_3_27((uint64_t)&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  if ((v31 & 1) == 0)
  {
    v32 = OUTLINED_FUNCTION_108_2();
    OUTLINED_FUNCTION_43_8(v32);
    OUTLINED_FUNCTION_121_2();
  }
  OUTLINED_FUNCTION_17_11();
  OUTLINED_FUNCTION_85_3();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  v33 = OUTLINED_FUNCTION_66_6();
  OUTLINED_FUNCTION_14_17(v33, v34, v35, v36);
}

uint64_t TreeClassifierTrainingSessionDelegate.train(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = v2[26];
    v3 = v2[27];
    v7 = v2 + 24;
    v5 = v2[24];
    v6 = v7[1];
    swift_endAccess();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v3, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = v3[37] + 1;
  if (v5 == v3[33])
  {
    OUTLINED_FUNCTION_72_4();
    specialized EventCollector.getLast<A>(metric:type:)();
    OUTLINED_FUNCTION_37_8();
    if ((v4 & 1) == 0)
    {
      v6 = OUTLINED_FUNCTION_108_2();
      OUTLINED_FUNCTION_44_9(v6);
      OUTLINED_FUNCTION_121_2();
    }
    OUTLINED_FUNCTION_58_5();
    specialized EventCollector.getLast<A>(metric:type:)();
    v8 = v7;
    OUTLINED_FUNCTION_3_27(v2);
    if ((v8 & 1) == 0)
    {
      v9 = OUTLINED_FUNCTION_108_2();
      OUTLINED_FUNCTION_43_8(v9);
      OUTLINED_FUNCTION_121_2();
    }
    OUTLINED_FUNCTION_17_11();
    OUTLINED_FUNCTION_85_3();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    v10 = OUTLINED_FUNCTION_66_6();
    return OUTLINED_FUNCTION_14_17(v10, v11, v12, v13);
  }
  else
  {
    v3[37] = v5;
    v15 = OUTLINED_FUNCTION_103_3();
    OUTLINED_FUNCTION_101_4(v15, v16, &demangling cache variable for type metadata for AnyTreeClassifier?);
    v17 = type metadata accessor for AnyTreeClassifier();
    result = __swift_getEnumTagSinglePayload(v1, 1, v17);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      OUTLINED_FUNCTION_18_13();
      OUTLINED_FUNCTION_44_7();
      result = __swift_getEnumTagSinglePayload(v2, 1, v0);
      if ((_DWORD)result != 1)
      {
        v18 = v3[34];
        swift_retain();
        v19 = (_QWORD *)swift_task_alloc();
        OUTLINED_FUNCTION_98_2(v19, (uint64_t)TreeClassifierTrainingSessionDelegate.train(from:));
        return OUTLINED_FUNCTION_13_26(v21, v20, (uint64_t)partial apply for closure #1 in TreeClassifierTrainingSessionDelegate.train(from:), v18);
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  swift_endAccess();
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifier);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_65();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TreeClassifierTrainingSessionDelegate.evaluate(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[26] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  v1[27] = OUTLINED_FUNCTION_0();
  type metadata accessor for AnyColumn();
  v1[28] = OUTLINED_FUNCTION_25();
  v1[29] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyClassificationMetrics?);
  v1[30] = OUTLINED_FUNCTION_0();
  v2 = OUTLINED_FUNCTION_93();
  v1[31] = v2;
  v1[32] = *(_QWORD *)(v2 - 8);
  v1[33] = OUTLINED_FUNCTION_25();
  v1[34] = OUTLINED_FUNCTION_25();
  v1[35] = OUTLINED_FUNCTION_25();
  v1[36] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  v1[37] = OUTLINED_FUNCTION_0();
  v1[38] = type metadata accessor for AnyTreeClassifierModel();
  v1[39] = OUTLINED_FUNCTION_0();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t EnumTagSinglePayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 208) + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_29_0();
  outlined init with copy of URL?(v3, v1, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
  if (__swift_getEnumTagSinglePayload(v1, 1, v2) == 1)
  {
    outlined destroy of URL?(*(_QWORD *)(v0 + 296), &demangling cache variable for type metadata for AnyTreeClassifierModel?);
LABEL_5:
    v46 = 0;
LABEL_6:
    swift_task_dealloc();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v46, 1);
  }
  v4 = *(_QWORD *)(v0 + 208);
  outlined init with take of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 312), (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
  v5 = v4 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  v6 = type metadata accessor for PersistentParametersForTreeBasedMethods();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v5, 1, v6);
  if ((_DWORD)EnumTagSinglePayload)
  {
    OUTLINED_FUNCTION_203(EnumTagSinglePayload, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 208) + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingData;
  OUTLINED_FUNCTION_29_0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_70_6(v9);
  if (!v6)
  {
    v44 = *(_QWORD *)(v0 + 248);
    v18 = *(_QWORD *)(v0 + 240);
    v42 = *(_QWORD *)(v0 + 216);
    v19 = *(_QWORD *)(v0 + 208);
    v47 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 256) + 8);
    ((void (*)(_QWORD))v47)(*(_QWORD *)(v0 + 280));
    v20 = OUTLINED_FUNCTION_53_9();
    MEMORY[0x220758A1C](v20);
    OUTLINED_FUNCTION_44_7();
    v21 = OUTLINED_FUNCTION_53_9();
    MEMORY[0x220758A1C](v21);
    swift_endAccess();
    AnyClassificationMetrics.init(_:_:)();
    type metadata accessor for AnyClassificationMetrics();
    OUTLINED_FUNCTION_159_0(v18, 0);
    v22 = v19 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics;
    OUTLINED_FUNCTION_44_7();
    outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v18, v22, &demangling cache variable for type metadata for AnyClassificationMetrics?);
    swift_endAccess();
    v23 = v19 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationData;
    OUTLINED_FUNCTION_29_0();
    OUTLINED_FUNCTION_101_4(v23, v24, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v42, 1, v44) == 1)
    {
      v25 = *(_QWORD *)(v0 + 288);
      v27 = *(_QWORD *)(v0 + 240);
      v26 = *(_QWORD *)(v0 + 248);
      v29 = *(_QWORD *)(v0 + 208);
      v28 = *(_QWORD *)(v0 + 216);
      OUTLINED_FUNCTION_123();
      v30 = v47(v25, v26);
      OUTLINED_FUNCTION_203(v30, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
      outlined destroy of URL?(v28, &demangling cache variable for type metadata for DataFrame?);
      v46 = 1;
      OUTLINED_FUNCTION_159_0(v27, 1);
      v31 = v29 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics;
      OUTLINED_FUNCTION_44_7();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v27, v31, &demangling cache variable for type metadata for AnyClassificationMetrics?);
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 264);
      v32 = *(_QWORD *)(v0 + 272);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 32))(v32, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 248));
      OUTLINED_FUNCTION_70_6(v33);
      if (v32)
      {
        v14 = (uint64_t *)(v0 + 288);
        v34 = *(_QWORD *)(v0 + 272);
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_3_27(v34);
        v16 = v47;
        goto LABEL_9;
      }
      v41 = *(_QWORD *)(v0 + 288);
      v43 = *(_QWORD *)(v0 + 312);
      v35 = *(_QWORD *)(v0 + 264);
      v39 = *(_QWORD *)(v0 + 272);
      v40 = *(_QWORD *)(v0 + 240);
      v45 = *(_QWORD *)(v0 + 208);
      v36 = OUTLINED_FUNCTION_53_9();
      MEMORY[0x220758A1C](v36);
      v37 = OUTLINED_FUNCTION_53_9();
      MEMORY[0x220758A1C](v37);
      OUTLINED_FUNCTION_123();
      AnyClassificationMetrics.init(_:_:)();
      OUTLINED_FUNCTION_3_27(v35);
      OUTLINED_FUNCTION_3_27(v39);
      OUTLINED_FUNCTION_3_27(v41);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v43, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
      v46 = 1;
      OUTLINED_FUNCTION_159_0(v40, 0);
      v38 = v45 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics;
      OUTLINED_FUNCTION_44_7();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v40, v38, &demangling cache variable for type metadata for AnyClassificationMetrics?);
    }
    swift_endAccess();
    goto LABEL_6;
  }
  v14 = (uint64_t *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 256);
  OUTLINED_FUNCTION_123();
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
LABEL_9:
  v17 = v16(*v14, *(_QWORD *)(v0 + 248));
  OUTLINED_FUNCTION_203(v17, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
  swift_task_dealloc();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TreeClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  OUTLINED_FUNCTION_8_1();
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifier?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyTreeClassifierModel?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_54_0();
  v7 = OUTLINED_FUNCTION_63_8();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_53_0();
  v9 = *v4;
  v10 = v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v10, v2, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
  OUTLINED_FUNCTION_128(v2, 1, v7);
  if (!v11)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for AnyTreeClassifierModel);
    OUTLINED_FUNCTION_91_0();
    __asm { BR              X9 }
  }
  outlined destroy of URL?(v2, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
  return 0;
}

void TreeClassifierTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  v6 = OUTLINED_FUNCTION_27_19();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_53_0();
  v8 = v1 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v8, v2, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v9 = OUTLINED_FUNCTION_94_2();
  v11 = OUTLINED_FUNCTION_128(v9, v10, v6);
  if (v12)
  {
    OUTLINED_FUNCTION_93_1(v11, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v13 = 0xD000000000000031;
    *(_QWORD *)(v13 + 8) = 0x800000021AFF4540;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_BYTE *)(v13 + 48) = 2;
    swift_willThrow(0.0);
  }
  else
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    PersistentParametersForTreeBasedMethods.save(toSessionDirectory:)(a1);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v3, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
  }
}

void TreeClassifierTrainingSessionDelegate.restore(from:phase:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_8_1();
  v32 = v0;
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v31 - v9;
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_49();
  v15 = (char *)(v14 - v13);
  v16 = OUTLINED_FUNCTION_33_12();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_50();
  v20 = v18 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v31 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v3, v11);
  PersistentParametersForTreeBasedMethods.init(sessionDirectory:)(v15, (uint64_t)v23);
  if (!v1)
  {
    v24 = v32 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters;
    OUTLINED_FUNCTION_44_7();
    outlined init with copy of URL?(v24, (uint64_t)v10, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
    v25 = OUTLINED_FUNCTION_94_2();
    OUTLINED_FUNCTION_128(v25, v26, v16);
    if (v27)
    {
      outlined destroy of URL?((uint64_t)v10, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v23, v7, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
      OUTLINED_FUNCTION_173_0();
      __swift_storeEnumTagSinglePayload(v28, v29, v30, v16);
      OUTLINED_FUNCTION_1_28();
      outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v7, v24, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
      OUTLINED_FUNCTION_7_21();
    }
    else
    {
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v10, v20, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
      TreeClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v23, v20);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v20, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
      outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for PersistentParametersForTreeBasedMethods);
    }
  }
  OUTLINED_FUNCTION_7();
}

uint64_t TreeClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24[6];
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (int *)OUTLINED_FUNCTION_33_12();
  v5 = v4[6];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  v10 = v6 == *v8 && v7 == v9;
  if (v10 || (OUTLINED_FUNCTION_97_2(), (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v11 = swift_bridgeObjectRetain();
    specialized Set.init<A>(_:)(v11);
    v9 = *(_QWORD *)(a2 + v4[7]);
    v12 = OUTLINED_FUNCTION_31_2();
    specialized Set.init<A>(_:)(v12);
    v13 = OUTLINED_FUNCTION_97_2();
    specialized static Set.== infix(_:_:)(v13, v14);
    v16 = v15;
    OUTLINED_FUNCTION_123();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      static BoostedTreeConfiguration.firstIncompatibility(_:_:)(a1 + v4[8], v24);
      result = outlined init with take of (name: String, originalValue: String, newValue: String)?((uint64_t)v24, (uint64_t)&v25);
      v18 = v26;
      if (!v26)
        return result;
      v19 = v25;
      v6 = v27;
      v7 = v28;
      v9 = v29;
      a2 = v30;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v20 = v19;
    }
    else
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v6 = OUTLINED_FUNCTION_36_8();
      v7 = v22;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_31_2();
      OUTLINED_FUNCTION_36_8();
      a2 = v23;
      OUTLINED_FUNCTION_12_0();
      String.init<A>(_:)();
      OUTLINED_FUNCTION_238();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v20 = 0xD000000000000011;
      v18 = 0x800000021AFF4520;
    }
  }
  else
  {
    OUTLINED_FUNCTION_195();
    OUTLINED_FUNCTION_31_2();
    String.init<A>(_:)();
    OUTLINED_FUNCTION_238();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v20 = 0x6320746567726154;
    v18 = 0xED00006E6D756C6FLL;
  }
  *(_QWORD *)(v20 + 8) = v18;
  *(_QWORD *)(v20 + 16) = v6;
  *(_QWORD *)(v20 + 24) = v7;
  *(_QWORD *)(v20 + 32) = v9;
  *(_QWORD *)(v20 + 40) = a2;
  *(_BYTE *)(v20 + 48) = 3;
  return swift_willThrow(v21);
}

void specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  unint64_t j;
  uint64_t v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v3 = 0;
  v4 = *(_QWORD *)(a1 + 56);
  v34 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & v4;
  v35 = (unint64_t)(v5 + 63) >> 6;
  v8 = a2 + 56;
  if ((v6 & v4) == 0)
    goto LABEL_8;
LABEL_7:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v36 = v3;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v19 = a1;
    v20 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v22 = *v20;
    v21 = v20[1];
    Hasher.init(_seed:)();
    OUTLINED_FUNCTION_195();
    String.hash(into:)();
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(a2 + 32);
    v25 = v23 & ~v24;
    if (((*(_QWORD *)(v8 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
      goto LABEL_45;
    v26 = *(_QWORD *)(a2 + 48);
    v27 = (_QWORD *)(v26 + 16 * v25);
    v28 = *v27 == v22 && v27[1] == v21;
    if (!v28 && (OUTLINED_FUNCTION_74_5() & 1) == 0)
    {
      v29 = ~v24;
      for (j = v25 + 1; ; j = v31 + 1)
      {
        v31 = j & v29;
        if (((*(_QWORD *)(v8 + (((j & v29) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v29)) & 1) == 0)
          break;
        v32 = (_QWORD *)(v26 + 16 * v31);
        v33 = *v32 == v22 && v32[1] == v21;
        if (v33 || (OUTLINED_FUNCTION_74_5() & 1) != 0)
          goto LABEL_34;
      }
LABEL_45:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    a1 = v19;
    v3 = v36;
    if (v7)
      goto LABEL_7;
LABEL_8:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v11 >= v35)
      return;
    v12 = *(_QWORD *)(v34 + 8 * v11);
    v13 = v3 + 1;
    if (!v12)
    {
      OUTLINED_FUNCTION_90_1();
      if (v14 == v15)
        return;
      OUTLINED_FUNCTION_88_3();
      if (!v12)
      {
        OUTLINED_FUNCTION_90_1();
        if (v14 == v15)
          return;
        OUTLINED_FUNCTION_88_3();
        if (!v12)
        {
          OUTLINED_FUNCTION_90_1();
          if (v14 == v15)
            return;
          OUTLINED_FUNCTION_88_3();
          if (!v12)
            break;
        }
      }
    }
LABEL_27:
    v7 = (v12 - 1) & v12;
    v36 = v13;
  }
  v17 = v16 + 4;
  if (v17 >= v35)
    return;
  v12 = *(_QWORD *)(v34 + 8 * v17);
  if (v12)
  {
    v13 = v17;
    goto LABEL_27;
  }
  while (!__OFADD__(v17, 1))
  {
    OUTLINED_FUNCTION_90_1();
    if (v14 == v15)
      return;
    OUTLINED_FUNCTION_88_3();
    v17 = v18 + 1;
    if (v12)
      goto LABEL_27;
  }
LABEL_48:
  __break(1u);
}

void TreeClassifierTrainingSessionDelegate.deinit()
{
  uint64_t v0;
  uint64_t v1;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for PersistentParametersForTreeBasedMethods?);
  v1 = OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_11_1(v1);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationData, &demangling cache variable for type metadata for DataFrame?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_classifier, &demangling cache variable for type metadata for AnyTreeClassifier?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_model, &demangling cache variable for type metadata for AnyTreeClassifierModel?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_trainingMetrics, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML37TreeClassifierTrainingSessionDelegate_validationMetrics, &demangling cache variable for type metadata for AnyClassificationMetrics?);
  OUTLINED_FUNCTION_22();
}

uint64_t TreeClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  TreeClassifierTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TreeClassifierTrainingSessionDelegate()
{
  return type metadata accessor for TreeClassifierTrainingSessionDelegate();
}

uint64_t type metadata accessor for TreeClassifierTrainingSessionDelegate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TreeClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for TreeClassifierTrainingSessionDelegate)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for TreeClassifierTrainingSessionDelegate()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for PersistentParametersForTreeBasedMethods?, (void (*)(uint64_t))type metadata accessor for PersistentParametersForTreeBasedMethods);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DataFrame();
      if (v2 <= 0x3F)
      {
        type metadata accessor for MLSoundClassifier.PersistentParameters?(319, (unint64_t *)&lazy cache variable for type metadata for DataFrame?, (void (*)(uint64_t))MEMORY[0x24BDF5DF0]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for AnyTreeClassifier?, (void (*)(uint64_t))type metadata accessor for AnyTreeClassifier);
          if (v4 <= 0x3F)
          {
            type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for AnyTreeClassifierModel?, (void (*)(uint64_t))type metadata accessor for AnyTreeClassifierModel);
            if (v5 <= 0x3F)
            {
              type metadata accessor for MLSoundClassifier.PersistentParameters?(319, &lazy cache variable for type metadata for AnyClassificationMetrics?, (void (*)(uint64_t))type metadata accessor for AnyClassificationMetrics);
              if (v6 <= 0x3F)
                swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance TreeClassifierTrainingSessionDelegate()
{
  TreeClassifierTrainingSessionDelegate.setUp()();
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance TreeClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
  TreeClassifierTrainingSessionDelegate.resume(from:)(a1);
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance TreeClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)TreeClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance TreeClassifierTrainingSessionDelegate(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for TrainingSessionDelegate.train(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return TreeClassifierTrainingSessionDelegate.train(from:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance TreeClassifierTrainingSessionDelegate()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance SoundClassifierTrainingSessionDelegate;
  return TreeClassifierTrainingSessionDelegate.evaluate(from:)();
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance TreeClassifierTrainingSessionDelegate()
{
  return TreeClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)() & 1;
}

void protocol witness for TrainingSessionCodable.save(to:) in conformance TreeClassifierTrainingSessionDelegate(uint64_t a1)
{
  TreeClassifierTrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance TreeClassifierTrainingSessionDelegate()
{
  TreeClassifierTrainingSessionDelegate.restore(from:phase:)();
}

unint64_t lazy protocol witness table accessor for type AnyTreeClassifier and conformance AnyTreeClassifier()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnyTreeClassifier and conformance AnyTreeClassifier;
  if (!lazy protocol witness table cache variable for type AnyTreeClassifier and conformance AnyTreeClassifier)
  {
    v1 = type metadata accessor for AnyTreeClassifier();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for AnyTreeClassifier, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyTreeClassifier and conformance AnyTreeClassifier);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnyTreeClassifier and conformance AnyTreeClassifier;
  if (!lazy protocol witness table cache variable for type AnyTreeClassifier and conformance AnyTreeClassifier)
  {
    v1 = type metadata accessor for AnyTreeClassifier();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for AnyTreeClassifier, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyTreeClassifier and conformance AnyTreeClassifier);
  }
  return result;
}

uint64_t outlined assign with copy of DataFrame?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x22075B938](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x22075B938](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t outlined init with take of (name: String, originalValue: String, newValue: String)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, originalValue: String, newValue: String)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_28()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_4_28()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_7_21()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_13_26(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyTreeClassifier.update(_:with:eventHandler:)(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_14_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_17_11()
{
  _QWORD *v0;

  return specialized _dictionaryUpCast<A, B, C, D>(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_18_13()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[25] + 16))(v0[26], v0[20] + v0[36], v0[24]);
}

uint64_t OUTLINED_FUNCTION_26_16()
{
  return type metadata accessor for AnyTreeClassifier();
}

uint64_t OUTLINED_FUNCTION_27_19()
{
  return type metadata accessor for PersistentParametersForTreeBasedMethods();
}

uint64_t OUTLINED_FUNCTION_33_12()
{
  return type metadata accessor for PersistentParametersForTreeBasedMethods();
}

uint64_t OUTLINED_FUNCTION_34_14()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 128) + 8))(*(_QWORD *)(v0 - 144), *(_QWORD *)(v0 - 120));
}

uint64_t OUTLINED_FUNCTION_35_8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_36_8()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_37_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_38_7()
{
  return DataFrame.subscript.getter();
}

unint64_t OUTLINED_FUNCTION_43_8(char a1)
{
  double v1;

  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, a1, v1);
}

unint64_t OUTLINED_FUNCTION_44_9(char a1)
{
  double v1;

  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(3, a1, v1);
}

uint64_t OUTLINED_FUNCTION_49_5()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_50_7(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_54_5(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, *(_QWORD *)(v1 - 312));
}

uint64_t OUTLINED_FUNCTION_56_6()
{
  return type metadata accessor for AnyColumn();
}

uint64_t OUTLINED_FUNCTION_57_4()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_58_5()
{
  return static MetricsKey.trainingLoss.getter();
}

void OUTLINED_FUNCTION_60_6(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;

  __swift_getEnumTagSinglePayload(v3, 1, a3);
  outlined destroy of URL?(v3, v4);
}

uint64_t OUTLINED_FUNCTION_63_8()
{
  return type metadata accessor for AnyTreeClassifierModel();
}

void OUTLINED_FUNCTION_65_9()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  outlined assign with take of MLTrainingSession<MLImageClassifier>.Metadata(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_66_6()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 264);
}

void OUTLINED_FUNCTION_70_6(uint64_t a1@<X8>)
{
  AnyTreeClassifierModel.applied(to:eventHandler:)(a1);
}

uint64_t OUTLINED_FUNCTION_72_4()
{
  return static MetricsKey.trainingAccuracy.getter();
}

void OUTLINED_FUNCTION_73_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  outlined init with copy of URL?(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_74_5()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_75_8(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_80_5()
{
  return BoostedTreeConfiguration.init()();
}

uint64_t OUTLINED_FUNCTION_82_3()
{
  return BoostedTreeConfiguration.init()();
}

uint64_t OUTLINED_FUNCTION_85_3()
{
  return swift_release();
}

void OUTLINED_FUNCTION_93_1(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_94_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_97_2()
{
  uint64_t v0;

  return v0;
}

_QWORD *OUTLINED_FUNCTION_98_2@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 304) = result;
  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_99_3()
{
  return BoostedTreeConfiguration.init()();
}

void OUTLINED_FUNCTION_101_4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of URL?(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_103_3()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160) + *(_QWORD *)(v0 + 280);
}

void CMLModel.initialize(options:)()
{
  OUTLINED_FUNCTION_4_29();
}

void sub_21AE8C888(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    OUTLINED_FUNCTION_1_29();
    *(_QWORD *)(OUTLINED_FUNCTION_18_14() + 16) = v1;
    OUTLINED_FUNCTION_16_17();
    v3 = OUTLINED_FUNCTION_15_19();
    OUTLINED_FUNCTION_24_14(v3);
    if (v2)
    {
      swift_release();
    }
    else
    {
      OUTLINED_FUNCTION_11_21(0x21u);
      OUTLINED_FUNCTION_10_21(0xEu);
      OUTLINED_FUNCTION_184();
      swift_release();
      OUTLINED_FUNCTION_12_21();
      OUTLINED_FUNCTION_17_12();
    }
    OUTLINED_FUNCTION_15_16();
  }
  else
  {
    __break(1u);
  }
}

void CMLModel.addMetadata(_:)()
{
  OUTLINED_FUNCTION_4_29();
}

void sub_21AE8C938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    OUTLINED_FUNCTION_1_29();
    *(_QWORD *)(OUTLINED_FUNCTION_18_14() + 16) = v1;
    OUTLINED_FUNCTION_16_17();
    v3 = OUTLINED_FUNCTION_15_19();
    OUTLINED_FUNCTION_24_14(v3);
    if (v2)
    {
      swift_release();
    }
    else
    {
      OUTLINED_FUNCTION_11_21(0x20u);
      OUTLINED_FUNCTION_184();
      OUTLINED_FUNCTION_10_21(7u);
      swift_release();
      OUTLINED_FUNCTION_12_21();
      OUTLINED_FUNCTION_17_12();
    }
    OUTLINED_FUNCTION_15_16();
  }
  else
  {
    __break(1u);
  }
}

void CMLModel.save(to:)()
{
  OUTLINED_FUNCTION_4_29();
}

uint64_t sub_21AE8C9E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
  {
    OUTLINED_FUNCTION_1_29();
    *(_QWORD *)(OUTLINED_FUNCTION_18_14() + 16) = v1;
    URL.path.getter();
    v2 = OUTLINED_FUNCTION_16_17();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_21_15();
    if (!v2)
    {
      v4 = v3;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_12(8u, v4);
      OUTLINED_FUNCTION_184();
      OUTLINED_FUNCTION_9_22(6u);
      swift_release();
      OUTLINED_FUNCTION_12_21();
      return OUTLINED_FUNCTION_17_12();
    }
  }
  else
  {
    __break(1u);
  }
  result = OUTLINED_FUNCTION_6_25();
  __break(1u);
  return result;
}

uint64_t CMLModel.export(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[6];

  v21[5] = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x22075BB9C](0);
  if (!v11)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = v11;
  type metadata accessor for CMLParameters();
  *(_QWORD *)(swift_initStackObject() + 16) = v12;
  outlined init with copy of URL?(a1, (uint64_t)v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    outlined destroy of URL?((uint64_t)v6);
    OUTLINED_FUNCTION_16_17();
    OUTLINED_FUNCTION_21_15();
    if (!v2)
    {
      CMLParameters.add(key:featureValue:)(0x1Bu, v13);
      goto LABEL_7;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    URL.path.getter();
    v14 = OUTLINED_FUNCTION_16_17();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_21_15();
    if (!v14)
    {
      v16 = v15;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_12(0x1Bu, v16);
      OUTLINED_FUNCTION_7_22();
LABEL_7:
      swift_release();
      v17 = OUTLINED_FUNCTION_9_22(8u);
      specialized handling<A, B>(_:_:)(v17[2]);
      v19 = v18;
      if (v18)
      {
        swift_release();
        OUTLINED_FUNCTION_12_21();
        tc_v1_release();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = v19;
        return result;
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  result = OUTLINED_FUNCTION_6_25();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CMLModel.compile()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[16] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v1[17] = OUTLINED_FUNCTION_0();
  v2 = type metadata accessor for UUID();
  v1[18] = v2;
  v1[19] = *(_QWORD *)(v2 - 8);
  v1[20] = OUTLINED_FUNCTION_0();
  v3 = type metadata accessor for URL();
  v1[21] = v3;
  v1[22] = *(_QWORD *)(v3 - 8);
  v1[23] = OUTLINED_FUNCTION_25();
  v1[24] = OUTLINED_FUNCTION_25();
  v1[25] = OUTLINED_FUNCTION_25();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  *(_QWORD *)(v0 + 208) = v1;
  NSFileManager.createTemporaryModelDirectory()();
  if (v2)
  {

    OUTLINED_FUNCTION_19_17();
    swift_task_dealloc();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 184);
    v23 = *(_QWORD *)(v0 + 176);
    v4 = *(_QWORD *)(v0 + 160);
    v6 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 152);
    v24 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 136);
    NSFileManager.temporaryModelDirectory.getter();
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    URL.appendingPathExtension(_:)();
    v7 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    *(_QWORD *)(v0 + 216) = v7;
    v7(v3, v24);
    v8 = OUTLINED_FUNCTION_13_27();
    v9(v8);
    __swift_storeEnumTagSinglePayload(v25, 0, 1, v24);
    CMLModel.export(to:)(v25);
    v10 = *(_QWORD *)(v0 + 136);
    swift_release();
    outlined destroy of URL?(v10);
    *(_QWORD *)(v0 + 224) = Data.init(contentsOf:options:)();
    *(_QWORD *)(v0 + 232) = v11;
    type metadata accessor for MLModelAsset();
    v13 = OUTLINED_FUNCTION_13_27();
    outlined copy of Data._Representation(v13, v14);
    v15 = OUTLINED_FUNCTION_13_27();
    v17 = @nonobjc MLModelAsset.__allocating_init(specification:)(v15, v16);
    *(_QWORD *)(v0 + 240) = v17;
    v18 = v17;
    v19 = (void *)objc_opt_self();
    v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFD8]), sel_init);
    *(_QWORD *)(v0 + 248) = v20;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = CMLModel.compile();
    v21 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
    v22 = (_QWORD *)(v0 + 80);
    v22[1] = 0x40000000;
    v22[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned MLModel?, @unowned NSError?) -> () with result type MLModel;
    v22[3] = &block_descriptor_4;
    v22[4] = v21;
    objc_msgSend(v19, sel_loadModelAsset_configuration_completionHandler_, v18, v20, v22);
    return swift_continuation_await();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 256) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 240);
  v2 = *(void **)(v0 + 248);
  v3 = *(void **)(v0 + 208);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
  v6 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 168);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));

  v8 = *(_QWORD *)(v0 + 120);
  $defer #1 () in CMLModel.compile()(v3);

  v4(v6, v7);
  v4(v5, v7);
  OUTLINED_FUNCTION_10();
  swift_task_dealloc();
  OUTLINED_FUNCTION_17();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t CMLModel.compile()(double a1)
{
  uint64_t v1;
  void *v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = *(void **)(v1 + 248);
  v3 = *(_QWORD *)(v1 + 232);
  v4 = *(void **)(v1 + 240);
  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 216);
  v5 = *(_QWORD *)(v1 + 224);
  v7 = *(void **)(v1 + 208);
  v11 = *(_QWORD *)(v1 + 200);
  v8 = *(_QWORD *)(v1 + 192);
  v9 = *(_QWORD *)(v1 + 168);
  swift_willThrow(a1);
  outlined consume of Data._Representation(v5, v3);

  $defer #1 () in CMLModel.compile()(v7);
  v6(v8, v9);
  v6(v11, v9);
  OUTLINED_FUNCTION_19_17();
  OUTLINED_FUNCTION_10();
  swift_task_dealloc();
  OUTLINED_FUNCTION_17();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void $defer #1 () in CMLModel.compile()(void *a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  double v7;
  id v8;
  NSURL *v9;

  v9 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v9);
  v3 = v2;
  v8 = 0;
  LODWORD(a1) = objc_msgSend(a1, sel_removeItemAtURL_error_, v2, &v8);

  if ((_DWORD)a1)
  {
    v4 = v8;
  }
  else
  {
    v5 = v8;
    v6 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow(v7);
  }
}

uint64_t OUTLINED_FUNCTION_1_29()
{
  return type metadata accessor for CMLParameters();
}

void OUTLINED_FUNCTION_4_29()
{
  JUMPOUT(0x22075BB9CLL);
}

uint64_t OUTLINED_FUNCTION_6_25()
{
  return swift_unexpectedError();
}

uint64_t OUTLINED_FUNCTION_7_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

_QWORD *OUTLINED_FUNCTION_9_22(unsigned __int8 a1)
{
  uint64_t v1;

  return CMLModel.callFunction(name:arguments:)(a1, v1);
}

_QWORD *OUTLINED_FUNCTION_10_21(unsigned __int8 a1)
{
  uint64_t v1;

  return CMLModel.callFunction(name:arguments:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_11_21(unsigned __int8 a1)
{
  uint64_t v1;

  return CMLParameters.add(key:featureValue:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_12_21()
{
  return swift_setDeallocating();
}

uint64_t OUTLINED_FUNCTION_13_27()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_15_19()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_17_12()
{
  return tc_v1_release();
}

uint64_t OUTLINED_FUNCTION_18_14()
{
  return swift_initStackObject();
}

uint64_t OUTLINED_FUNCTION_19_17()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_21_15()
{
  CMLFeatureValue.__allocating_init(_:)();
}

uint64_t OUTLINED_FUNCTION_22_12(unsigned __int8 a1, uint64_t a2)
{
  return CMLParameters.add(key:featureValue:)(a1, a2);
}

void OUTLINED_FUNCTION_24_14(uint64_t a1)
{
  CMLFeatureValue.__allocating_init(_:)(a1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypG_8CreateML11MLDataValueO_AItsAE_pTg5020_sSS3key_x5valuetSg8d4ML11fg5OAFs5c136_pIgnrrzo_SSAA_xABtAF_AFtsAG_pIegnrzr_lTRyp_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l18SDySSxGGKclufcAA11ef34OAGSgKXEfU_AJ_AJti1_J22SgV8U_yp_Tg5Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int v29;
  _OWORD v30[2];
  _QWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  _QWORD v35[2];
  _OWORD v36[2];
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  __int128 v42;
  _OWORD v43[2];
  _QWORD v44[2];
  _BYTE v45[32];
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  unint64_t v53;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (uint64_t *)MEMORY[0x24BEE4AF8];
  if (!v1)
    return (uint64_t)v2;
  v3 = a1;
  v52 = (uint64_t *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  result = specialized Dictionary.startIndex.getter(v3);
  if ((result & 0x8000000000000000) == 0)
  {
    v6 = result;
    if (result < 1 << *(_BYTE *)(v3 + 32))
    {
      v7 = v5;
      v8 = v3 + 64;
      v20 = v3;
      v21 = MEMORY[0x24BEE4AD8] + 8;
      v22 = v3 + 64;
      while ((*(_QWORD *)(v8 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
      {
        if (v7 != *(_DWORD *)(v3 + 36))
          goto LABEL_25;
        v53 = v6 >> 6;
        v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v9;
        v10 = v9[1];
        outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v6, (uint64_t)v45);
        v44[0] = v11;
        v44[1] = v10;
        *(_QWORD *)&v42 = v11;
        *((_QWORD *)&v42 + 1) = v10;
        outlined init with copy of Any((uint64_t)v45, (uint64_t)v43);
        v40 = v42;
        v41[0] = v43[0];
        v41[1] = v43[1];
        swift_bridgeObjectRetain_n();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v44, &demangling cache variable for type metadata for (key: String, value: Any));
        v12 = v40;
        outlined init with copy of Any((uint64_t)v41, (uint64_t)v37);
        v38 = v12;
        outlined init with take of Any(v37, &v39);
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)&v38, (uint64_t)&v32, &demangling cache variable for type metadata for (key: String, value: Any)?);
        v13 = v33;
        v28 = v1;
        v29 = v7;
        if (v33)
        {
          v14 = v32;
          v35[0] = v32;
          v35[1] = v33;
          outlined init with take of Any(v34, v36);
          v32 = v14;
          v33 = v13;
          outlined init with copy of Any((uint64_t)v36, (uint64_t)v34);
          v46 = v14;
          v47 = v13;
          v48 = 2;
          outlined init with copy of Any((uint64_t)v36, (uint64_t)v30);
          v31[3] = v21;
          v31[0] = swift_allocObject();
          outlined init with take of Any(v30, (_OWORD *)(v31[0] + 16));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          MLDataValue.init(fromAny:)((uint64_t)v31, (uint64_t)&v49);
          if (v23)
          {
            swift_bridgeObjectRelease();
            v2 = &demangling cache variable for type metadata for (key: String, value: Any);
            outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v35, &demangling cache variable for type metadata for (key: String, value: Any));
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
            outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v38, &demangling cache variable for type metadata for (key: String, value: Any)?);
            outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v40, &demangling cache variable for type metadata for (key: String, value: Any));
            swift_release();
            return (uint64_t)v2;
          }
          outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v35, &demangling cache variable for type metadata for (key: String, value: Any));
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
          v26 = v47;
          v27 = v46;
          v15 = v48;
          v24 = v50;
          v25 = v49;
          v16 = v51;
          v3 = v20;
        }
        else
        {
          swift_bridgeObjectRetain();
          outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v32, &demangling cache variable for type metadata for (key: String, value: Any)?);
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v46 = 0;
          v47 = 0;
          v16 = 6;
          v48 = 6;
          v49 = 0;
          v50 = 0;
          v15 = 6;
          v51 = 6;
        }
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v38, &demangling cache variable for type metadata for (key: String, value: Any)?);
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v40, &demangling cache variable for type metadata for (key: String, value: Any));
        v2 = v52;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1);
          v2 = v52;
        }
        v18 = v2[2];
        v17 = v2[3];
        if (v18 >= v17 >> 1)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1);
          v2 = v52;
        }
        v2[2] = v18 + 1;
        v19 = (char *)&v2[6 * v18];
        *((_QWORD *)v19 + 4) = v27;
        *((_QWORD *)v19 + 5) = v26;
        v19[48] = v15;
        *((_QWORD *)v19 + 7) = v25;
        *((_QWORD *)v19 + 8) = v24;
        v19[72] = v16;
        if ((uint64_t)v6 >= -(-1 << *(_BYTE *)(v3 + 32)))
          goto LABEL_26;
        v8 = v22;
        if ((*(_QWORD *)(v22 + 8 * v53) & (1 << v6)) == 0)
          goto LABEL_27;
        if (v29 != *(_DWORD *)(v3 + 36))
          goto LABEL_28;
        result = _HashTable.occupiedBucket(after:)();
        v1 = v28 - 1;
        if (v28 == 1)
          return (uint64_t)v2;
        v6 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v7 = *(_DWORD *)(v3 + 36);
          if (result < 1 << *(_BYTE *)(v3 + 32))
            continue;
        }
        goto LABEL_29;
      }
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypSgG_8CreateML11MLDataValueO_AJtsAE_pTg5022_sSS3key_xSg5valuetSg8d4ML11fg5OAGs5c138_pIgnrrzo_SSAA_AbCtAG_AGtsAH_pIegnrzr_lTRyp_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l20SDySSxSgGGKclufcAA11ef33OAHSgKXEfU_AK_AKtI31_AG5valuetsW8U_yp_Tg5Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  _BYTE v28[32];
  _QWORD v29[2];
  uint64_t v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  _OWORD v34[2];
  _QWORD v35[2];
  _BYTE v36[32];
  _QWORD v37[2];
  char v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;
  unint64_t v42;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v5 = a1;
  v41 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  result = specialized Dictionary.startIndex.getter(v5);
  if ((result & 0x8000000000000000) == 0)
  {
    v8 = result;
    if (result < 1 << *(_BYTE *)(v5 + 32))
    {
      v9 = v5 + 64;
      v22 = v5 + 64;
      v23 = v5;
      while ((*(_QWORD *)(v9 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
      {
        if (v7 != *(_DWORD *)(v5 + 36))
          goto LABEL_22;
        v42 = v8 >> 6;
        v27 = v7;
        v10 = *(_QWORD *)(v5 + 56);
        v11 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v8);
        v12 = *v11;
        v13 = v11[1];
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v10 + 32 * v8, (uint64_t)v36, &demangling cache variable for type metadata for Any?);
        v35[0] = v12;
        v35[1] = v13;
        *(_QWORD *)&v33 = v12;
        *((_QWORD *)&v33 + 1) = v13;
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v36, (uint64_t)v34, &demangling cache variable for type metadata for Any?);
        v31 = v33;
        v32[0] = v34[0];
        v32[1] = v34[1];
        swift_bridgeObjectRetain_n();
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v35, &demangling cache variable for type metadata for (key: String, value: Any?));
        v4 = *((_QWORD *)&v31 + 1);
        v14 = v31;
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v32, (uint64_t)v28, &demangling cache variable for type metadata for Any?);
        v29[0] = v14;
        v29[1] = v4;
        outlined init with take of Any?((uint64_t)v28, (uint64_t)&v30);
        swift_bridgeObjectRetain();
        specialized closure #1 in closure #1 in MLUntypedColumn.init<A>(_:)((uint64_t)v37, (uint64_t)v39, (uint64_t)v29);
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v29, &demangling cache variable for type metadata for (key: String, value: Any?)?);
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v31, &demangling cache variable for type metadata for (key: String, value: Any?));
        if (v2)
        {
          swift_release();
          return v4;
        }
        v15 = v37[0];
        v16 = v37[1];
        v17 = v38;
        v18 = v39[0];
        v26 = v39[1];
        v25 = v40;
        v4 = v41;
        result = swift_isUniquelyReferenced_nonNull_native();
        v24 = v3;
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
          v4 = v41;
        }
        v20 = *(_QWORD *)(v4 + 16);
        v19 = *(_QWORD *)(v4 + 24);
        if (v20 >= v19 >> 1)
        {
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1);
          v4 = v41;
        }
        *(_QWORD *)(v4 + 16) = v20 + 1;
        v21 = v4 + 48 * v20;
        *(_QWORD *)(v21 + 32) = v15;
        *(_QWORD *)(v21 + 40) = v16;
        *(_BYTE *)(v21 + 48) = v17;
        *(_QWORD *)(v21 + 56) = v18;
        *(_QWORD *)(v21 + 64) = v26;
        *(_BYTE *)(v21 + 72) = v25;
        v5 = v23;
        if ((uint64_t)v8 >= -(-1 << *(_BYTE *)(v23 + 32)))
          goto LABEL_23;
        v9 = v22;
        if ((*(_QWORD *)(v22 + 8 * v42) & (1 << v8)) == 0)
          goto LABEL_24;
        if (v27 != *(_DWORD *)(v23 + 36))
          goto LABEL_25;
        result = _HashTable.occupiedBucket(after:)();
        --v3;
        if (v24 == 1)
          return v4;
        v8 = result;
        v2 = 0;
        if ((result & 0x8000000000000000) == 0)
        {
          v7 = *(_DWORD *)(v23 + 36);
          if (result < 1 << *(_BYTE *)(v23 + 32))
            continue;
        }
        goto LABEL_26;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_8CreateML11MLDataValueO_AItsAE_pTg5020_sSS3key_x5valuetSg8d4ML11fg5OAFs5c136_pIgnrrzo_SSAA_xABtAF_AFtsAG_pIegnrzr_lTRSS_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l18SDySSxGGKclufcAA11ef34OAGSgKXEfU_AJ_AJti1_J22SgV8U_SS_TG5Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  __int128 v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  int v28;
  _QWORD v29[4];
  __int128 v30;
  char v31;
  __int128 v32;
  char v33;
  uint64_t v34;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v5 = a1;
  v34 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  v4 = v34;
  result = specialized Dictionary.startIndex.getter(v5);
  if ((result & 0x8000000000000000) == 0)
  {
    v8 = result;
    if (result < 1 << *(_BYTE *)(v5 + 32))
    {
      v9 = v5 + 64;
      v26 = v5 + 64;
      while ((*(_QWORD *)(v9 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
      {
        if (v7 != *(_DWORD *)(v5 + 36))
          goto LABEL_20;
        v28 = v7;
        v10 = v5;
        v11 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v8);
        v12 = *v11;
        v13 = v11[1];
        v14 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v8);
        v15 = *v14;
        v16 = v14[1];
        *(_QWORD *)&v30 = v12;
        *((_QWORD *)&v30 + 1) = v13;
        v31 = 2;
        v29[3] = MEMORY[0x24BEE0D00];
        v29[0] = v15;
        v29[1] = v16;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        MLDataValue.init(fromAny:)((uint64_t)v29, (uint64_t)&v32);
        if (v2)
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_release();
          swift_bridgeObjectRelease();
          return v4;
        }
        v27 = v3;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        result = swift_bridgeObjectRelease();
        v17 = v30;
        v18 = v31;
        v19 = v32;
        v20 = v33;
        v34 = v4;
        v22 = *(_QWORD *)(v4 + 16);
        v21 = *(_QWORD *)(v4 + 24);
        if (v22 >= v21 >> 1)
        {
          v24 = v32;
          v25 = v30;
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1);
          v19 = v24;
          v17 = v25;
          v4 = v34;
        }
        *(_QWORD *)(v4 + 16) = v22 + 1;
        v23 = v4 + 48 * v22;
        *(_OWORD *)(v23 + 32) = v17;
        *(_BYTE *)(v23 + 48) = v18;
        *(_OWORD *)(v23 + 56) = v19;
        *(_BYTE *)(v23 + 72) = v20;
        if ((uint64_t)v8 >= -(-1 << *(_BYTE *)(v10 + 32)))
          goto LABEL_21;
        v9 = v26;
        if ((*(_QWORD *)(v26 + 8 * (v8 >> 6)) & (1 << v8)) == 0)
          goto LABEL_22;
        v5 = v10;
        if (v28 != *(_DWORD *)(v10 + 36))
          goto LABEL_23;
        result = _HashTable.occupiedBucket(after:)();
        v3 = v27 - 1;
        if (v27 == 1)
          return v4;
        v8 = result;
        v2 = 0;
        if ((result & 0x8000000000000000) == 0)
        {
          v7 = *(_DWORD *)(v10 + 36);
          if (result < 1 << *(_BYTE *)(v10 + 32))
            continue;
        }
        goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSfG_8CreateML11MLDataValueO_AItsAE_pTg5020_sSS3key_x5valuetSg8d4ML11fg5OAFs5c136_pIgnrrzo_SSAA_xABtAF_AFtsAG_pIegnrzr_lTRSf_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l18SDySSxGGKclufcAA11ef34OAGSgKXEfU_AJ_AJti1_J22SgV8U_Sf_TG5Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  __int128 v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int64_t v24;
  int v25;
  _DWORD v26[6];
  uint64_t v27;
  __int128 v28;
  char v29;
  __int128 v30;
  char v31;
  uint64_t v32;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v5 = a1;
  v32 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  v4 = v32;
  result = specialized Dictionary.startIndex.getter(v5);
  if ((result & 0x8000000000000000) == 0)
  {
    v8 = result;
    if (result < 1 << *(_BYTE *)(v5 + 32))
    {
      v9 = v5 + 64;
      v23 = v5 + 64;
      while ((*(_QWORD *)(v9 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
      {
        if (v7 != *(_DWORD *)(v5 + 36))
          goto LABEL_20;
        v25 = v7;
        v10 = v5;
        v11 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v8);
        v12 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v8);
        v13 = v11[1];
        *(_QWORD *)&v28 = *v11;
        *((_QWORD *)&v28 + 1) = v13;
        v29 = 2;
        v27 = MEMORY[0x24BEE14E8];
        v26[0] = v12;
        swift_bridgeObjectRetain_n();
        MLDataValue.init(fromAny:)((uint64_t)v26, (uint64_t)&v30);
        if (v2)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          return v4;
        }
        v24 = v3;
        result = swift_bridgeObjectRelease_n();
        v14 = v28;
        v15 = v29;
        v16 = v30;
        v17 = v31;
        v32 = v4;
        v19 = *(_QWORD *)(v4 + 16);
        v18 = *(_QWORD *)(v4 + 24);
        if (v19 >= v18 >> 1)
        {
          v21 = v30;
          v22 = v28;
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1);
          v16 = v21;
          v14 = v22;
          v4 = v32;
        }
        *(_QWORD *)(v4 + 16) = v19 + 1;
        v20 = v4 + 48 * v19;
        *(_OWORD *)(v20 + 32) = v14;
        *(_BYTE *)(v20 + 48) = v15;
        *(_OWORD *)(v20 + 56) = v16;
        *(_BYTE *)(v20 + 72) = v17;
        if ((uint64_t)v8 >= -(-1 << *(_BYTE *)(v10 + 32)))
          goto LABEL_21;
        v9 = v23;
        if ((*(_QWORD *)(v23 + 8 * (v8 >> 6)) & (1 << v8)) == 0)
          goto LABEL_22;
        v5 = v10;
        if (v25 != *(_DWORD *)(v10 + 36))
          goto LABEL_23;
        result = _HashTable.occupiedBucket(after:)();
        v3 = v24 - 1;
        if (v24 == 1)
          return v4;
        v8 = result;
        v2 = 0;
        if ((result & 0x8000000000000000) == 0)
        {
          v7 = *(_DWORD *)(v10 + 36);
          if (result < 1 << *(_BYTE *)(v10 + 32))
            continue;
        }
        goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSdG_8CreateML11MLDataValueO_AItsAE_pTg5020_sSS3key_x5valuetSg8d4ML11fg5OAFs5c136_pIgnrrzo_SSAA_xABtAF_AFtsAG_pIegnrzr_lTRSd_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l18SDySSxGGKclufcAA11ef34OAGSgKXEfU_AJ_AJti1_J22SgV8U_Sd_TG5Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  __int128 v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int64_t v24;
  int v25;
  _QWORD v26[4];
  __int128 v27;
  char v28;
  __int128 v29;
  char v30;
  uint64_t v31;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v5 = a1;
  v31 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  v4 = v31;
  result = specialized Dictionary.startIndex.getter(v5);
  if ((result & 0x8000000000000000) == 0)
  {
    v8 = result;
    if (result < 1 << *(_BYTE *)(v5 + 32))
    {
      v9 = v5 + 64;
      v23 = v5 + 64;
      while ((*(_QWORD *)(v9 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
      {
        if (v7 != *(_DWORD *)(v5 + 36))
          goto LABEL_20;
        v25 = v7;
        v10 = v5;
        v11 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v8);
        v12 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v8);
        v13 = v11[1];
        *(_QWORD *)&v27 = *v11;
        *((_QWORD *)&v27 + 1) = v13;
        v28 = 2;
        v26[3] = MEMORY[0x24BEE13C8];
        v26[0] = v12;
        swift_bridgeObjectRetain_n();
        MLDataValue.init(fromAny:)((uint64_t)v26, (uint64_t)&v29);
        if (v2)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          return v4;
        }
        v24 = v3;
        result = swift_bridgeObjectRelease_n();
        v14 = v27;
        v15 = v28;
        v16 = v29;
        v17 = v30;
        v31 = v4;
        v19 = *(_QWORD *)(v4 + 16);
        v18 = *(_QWORD *)(v4 + 24);
        if (v19 >= v18 >> 1)
        {
          v21 = v29;
          v22 = v27;
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1);
          v16 = v21;
          v14 = v22;
          v4 = v31;
        }
        *(_QWORD *)(v4 + 16) = v19 + 1;
        v20 = v4 + 48 * v19;
        *(_OWORD *)(v20 + 32) = v14;
        *(_BYTE *)(v20 + 48) = v15;
        *(_OWORD *)(v20 + 56) = v16;
        *(_BYTE *)(v20 + 72) = v17;
        if ((uint64_t)v8 >= -(-1 << *(_BYTE *)(v10 + 32)))
          goto LABEL_21;
        v9 = v23;
        if ((*(_QWORD *)(v23 + 8 * (v8 >> 6)) & (1 << v8)) == 0)
          goto LABEL_22;
        v5 = v10;
        if (v25 != *(_DWORD *)(v10 + 36))
          goto LABEL_23;
        result = _HashTable.occupiedBucket(after:)();
        v3 = v24 - 1;
        if (v24 == 1)
          return v4;
        v8 = result;
        v2 = 0;
        if ((result & 0x8000000000000000) == 0)
        {
          v7 = *(_DWORD *)(v10 + 36);
          if (result < 1 << *(_BYTE *)(v10 + 32))
            continue;
        }
        goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSiG_8CreateML11MLDataValueO_AItsAE_pTg5020_sSS3key_x5valuetSg8d4ML11fg5OAFs5c136_pIgnrrzo_SSAA_xABtAF_AFtsAG_pIegnrzr_lTRSi_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l18SDySSxGGKclufcAA11ef34OAGSgKXEfU_AJ_AJti1_J22SgV8U_Si_TG5Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  __int128 v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int64_t v24;
  int v25;
  _QWORD v26[4];
  __int128 v27;
  char v28;
  __int128 v29;
  char v30;
  uint64_t v31;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v5 = a1;
  v31 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  v4 = v31;
  result = specialized Dictionary.startIndex.getter(v5);
  if ((result & 0x8000000000000000) == 0)
  {
    v8 = result;
    if (result < 1 << *(_BYTE *)(v5 + 32))
    {
      v9 = v5 + 64;
      v23 = v5 + 64;
      while ((*(_QWORD *)(v9 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
      {
        if (v7 != *(_DWORD *)(v5 + 36))
          goto LABEL_20;
        v25 = v7;
        v10 = v5;
        v11 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v8);
        v12 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v8);
        v13 = v11[1];
        *(_QWORD *)&v27 = *v11;
        *((_QWORD *)&v27 + 1) = v13;
        v28 = 2;
        v26[3] = MEMORY[0x24BEE1768];
        v26[0] = v12;
        swift_bridgeObjectRetain_n();
        MLDataValue.init(fromAny:)((uint64_t)v26, (uint64_t)&v29);
        if (v2)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          return v4;
        }
        v24 = v3;
        result = swift_bridgeObjectRelease_n();
        v14 = v27;
        v15 = v28;
        v16 = v29;
        v17 = v30;
        v31 = v4;
        v19 = *(_QWORD *)(v4 + 16);
        v18 = *(_QWORD *)(v4 + 24);
        if (v19 >= v18 >> 1)
        {
          v21 = v29;
          v22 = v27;
          result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1);
          v16 = v21;
          v14 = v22;
          v4 = v31;
        }
        *(_QWORD *)(v4 + 16) = v19 + 1;
        v20 = v4 + 48 * v19;
        *(_OWORD *)(v20 + 32) = v14;
        *(_BYTE *)(v20 + 48) = v15;
        *(_OWORD *)(v20 + 56) = v16;
        *(_BYTE *)(v20 + 72) = v17;
        if ((uint64_t)v8 >= -(-1 << *(_BYTE *)(v10 + 32)))
          goto LABEL_21;
        v9 = v23;
        if ((*(_QWORD *)(v23 + 8 * (v8 >> 6)) & (1 << v8)) == 0)
          goto LABEL_22;
        v5 = v10;
        if (v25 != *(_DWORD *)(v10 + 36))
          goto LABEL_23;
        result = _HashTable.occupiedBucket(after:)();
        v3 = v24 - 1;
        if (v24 == 1)
          return v4;
        v8 = result;
        v2 = 0;
        if ((result & 0x8000000000000000) == 0)
        {
          v7 = *(_DWORD *)(v10 + 36);
          if (result < 1 << *(_BYTE *)(v10 + 32))
            continue;
        }
        goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SiSgs5NeverOTg5059_s11TabularData0B5FrameV8CreateMLEyAcD11MLDataTableVcfcSiSgR5XEfU_0K2ML0O6ColumnVySiGTf1cn_n(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v16[2];
  id v17;
  char v18;
  uint64_t v19;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v4)
  {
    outlined consume of Result<_DataTable, Error>(a3, a4 & 1);
    return;
  }
  v7 = a1;
  v19 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (a2 >= v7 && (v4 & 0x8000000000000000) == 0)
  {
    v8 = v19;
    v9 = a4;
    while (a2 != v7)
    {
      if ((v9 & 1) != 0)
      {
        v10 = 0;
        v11 = 1;
      }
      else
      {
        outlined copy of Result<_DataTable, Error>(a3, 0);
        _UntypedColumn.valueAtIndex(index:)(v7, (uint64_t)v16);
        outlined consume of Result<_DataTable, Error>(a3, 0);
        v10 = *(void **)v16;
        if (v18)
        {
          outlined consume of MLDataValue(*(void **)v16, v17, v18);
          v10 = 0;
          v11 = 1;
        }
        else
        {
          v11 = 0;
        }
        v9 = a4;
      }
      v19 = v8;
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v9 = a4;
        v8 = v19;
      }
      *(_QWORD *)(v8 + 16) = v13 + 1;
      v14 = v8 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v10;
      *(_BYTE *)(v14 + 40) = v11;
      if (a2 == ++v7)
      {
        outlined consume of Result<_DataTable, Error>(a3, v9 & 1);
        return;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_20:
  __break(1u);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SdSgs5NeverOTg567_s11TabularData0B5FrameV8CreateMLEyAcD11MLDataTableVcfcSdSgSiXEfU0_0K2ML0O6ColumnVySdGTf1cn_n(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v16[2];
  id v17;
  char v18;
  uint64_t v19;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v4)
  {
    outlined consume of Result<_DataTable, Error>(a3, a4 & 1);
    return;
  }
  v7 = a1;
  v19 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (a2 >= v7 && (v4 & 0x8000000000000000) == 0)
  {
    v8 = v19;
    v9 = a4;
    while (a2 != v7)
    {
      if ((v9 & 1) != 0)
      {
        v10 = 0;
        v11 = 1;
      }
      else
      {
        outlined copy of Result<_DataTable, Error>(a3, 0);
        _UntypedColumn.valueAtIndex(index:)(v7, (uint64_t)v16);
        outlined consume of Result<_DataTable, Error>(a3, 0);
        v10 = *(void **)v16;
        if (v18 == 1)
        {
          v11 = 0;
        }
        else
        {
          outlined consume of MLDataValue(*(void **)v16, v17, v18);
          v10 = 0;
          v11 = 1;
        }
        v9 = a4;
      }
      v19 = v8;
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v9 = a4;
        v8 = v19;
      }
      *(_QWORD *)(v8 + 16) = v13 + 1;
      v14 = v8 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v10;
      *(_BYTE *)(v14 + 40) = v11;
      if (a2 == ++v7)
      {
        outlined consume of Result<_DataTable, Error>(a3, v9 & 1);
        return;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_20:
  __break(1u);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSSgs5NeverOTg567_s11TabularData0B5FrameV8CreateMLEyAcD11MLDataTableVcfcSSSgSiXEfU1_0K2ML0O6ColumnVySSGTf1cn_n(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  void *v15;
  id v16;
  char v17;
  uint64_t v18;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v4)
  {
    outlined consume of Result<_DataTable, Error>(a3, a4 & 1);
    return;
  }
  v7 = a1;
  v18 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if (a2 >= v7 && (v4 & 0x8000000000000000) == 0)
  {
    v8 = v18;
    v9 = a4;
    while (a2 != v7)
    {
      if ((v9 & 1) != 0)
      {
        v10 = 0;
        v11 = 0;
      }
      else
      {
        outlined copy of Result<_DataTable, Error>(a3, 0);
        _UntypedColumn.valueAtIndex(index:)(v7, (uint64_t)&v15);
        outlined consume of Result<_DataTable, Error>(a3, 0);
        v10 = v15;
        v11 = v16;
        if (v17 != 2)
        {
          outlined consume of MLDataValue(v15, v16, v17);
          v10 = 0;
          v11 = 0;
        }
        v9 = a4;
      }
      v18 = v8;
      v12 = *(_QWORD *)(v8 + 16);
      if (v12 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v9 = a4;
        v8 = v18;
      }
      *(_QWORD *)(v8 + 16) = v12 + 1;
      v13 = v8 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v11;
      if (a2 == ++v7)
      {
        outlined consume of Result<_DataTable, Error>(a3, v9 & 1);
        return;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Say8CreateML11MLDataValueOGSgs5NeverOTg5025_s11TabularData0B5FrameV8d9MLEyAcD11f17TableVcfcSayAD0F5G12OGSgSiXEfU2_AG0F6ColumnVyAI12SequenceTypeVGTf1cn_n(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  id v36;
  char v37;
  uint64_t v38;

  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (!v7)
  {
    outlined consume of Result<_DataTable, Error>(a3, a4 & 1);
    return MEMORY[0x24BEE4AF8];
  }
  v38 = MEMORY[0x24BEE4AF8];
  v4 = &v38;
  v30 = a2 - a1;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  v9 = v30;
  if (v30 < 0)
    goto LABEL_33;
  v10 = 0;
  v11 = v38;
  v13 = a1;
  v12 = a2;
  v14 = a1;
  v15 = a4;
  do
  {
    if (v10 == v9)
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      JUMPOUT(0x21AE8F290);
    }
    if ((v15 & 1) != 0)
    {
      v16 = 0;
      goto LABEL_19;
    }
    v32 = v10;
    v33 = v11;
    outlined copy of Result<_DataTable, Error>(a3, 0);
    _UntypedColumn.valueAtIndex(index:)(v14, (uint64_t)&v35);
    outlined consume of Result<_DataTable, Error>(a3, 0);
    v4 = v35;
    v6 = v36;
    if (v37 != 3)
    {
      outlined consume of MLDataValue(v35, v36, v37);
      v16 = 0;
      v15 = a4;
      v13 = a1;
      v12 = a2;
      v9 = v30;
      goto LABEL_18;
    }
    outlined copy of MLDataValue(v35, v36, 3);
    v17 = CMLSequence.size.getter();
    if (CMLSequence.size.getter() < 0)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v18 = CMLSequence.size.getter();
    if (v17 < 0 || v18 < v17)
      goto LABEL_31;
    if (v17)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLDataValue>);
      v34 = v17;
      v19 = (_QWORD *)swift_allocObject();
      v20 = _swift_stdlib_malloc_size(v19);
      v19[2] = v34;
      v19[3] = 2 * ((uint64_t)(v20 - 32) / 24);
      outlined copy of MLDataValue(v4, v6, 3);
      if (CMLSequence.size.getter())
      {
        swift_retain();
        CMLSequence.value(at:)(0);
        if (!v5)
        {
          outlined consume of MLDataValue(v4, v6, 3);
          v21 = (char *)&loc_21AE8ECEC + dword_21AE8F4C4[CMLFeatureValue.type.getter()];
          __asm { BR              X9 }
        }
        outlined consume of MLDataValue(v4, v6, 3);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x21AE8F364);
      }
LABEL_34:
      outlined consume of MLDataValue(v4, v6, 3);
      __break(1u);
      JUMPOUT(0x21AE8F2BCLL);
    }
    v31 = MEMORY[0x24BEE4AF8];
    outlined consume of MLDataValue(v4, v6, 3);
    outlined consume of MLDataValue(v4, v6, 3);
    v15 = a4;
    v13 = a1;
    v12 = a2;
    v9 = v30;
    v16 = v31;
LABEL_18:
    v10 = v32;
    v11 = v33;
LABEL_19:
    v38 = v11;
    v23 = *(_QWORD *)(v11 + 16);
    v22 = *(_QWORD *)(v11 + 24);
    if (v23 >= v22 >> 1)
    {
      v24 = v16;
      v25 = v10;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v16 = v24;
      v10 = v25;
      v9 = v30;
      v13 = a1;
      v12 = a2;
      v15 = a4;
      v11 = v38;
    }
    *(_QWORD *)(v11 + 16) = v23 + 1;
    *(_QWORD *)(v11 + 8 * v23 + 32) = v16;
    if (v12 < v13)
      goto LABEL_28;
    if (v14 >= v12)
      goto LABEL_29;
    ++v10;
    ++v14;
  }
  while (v10 != v9);
  outlined consume of Result<_DataTable, Error>(a3, v15 & 1);
  return v11;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Say8CreateML11MLDataValueO3key_AI5valuetGSgs5NeverOTg5025_s11TabularData0B5FrameV8d9MLEyAcD11f17TableVcfcSayAD0F5G26O3key_AH5valuetGSgSiXEfU3_AG0F6ColumnVyAI14DictionaryTypeVGTf1cn_n(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  id v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_23;
  v5 = a4;
  v6 = a3;
  if (!v4)
  {
    outlined consume of Result<_DataTable, Error>(a3, a4 & 1);
    return;
  }
  v7 = a2;
  v8 = a1;
  v29 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (v7 < v8 || v4 < 0)
    goto LABEL_24;
  v9 = v29;
  v22 = v6;
  v21 = v5;
  v23 = v7;
  while (v7 != v8)
  {
    if ((v5 & 1) != 0)
      goto LABEL_13;
    outlined copy of Result<_DataTable, Error>(v6, 0);
    _UntypedColumn.valueAtIndex(index:)(v8, (uint64_t)&v25);
    outlined consume of Result<_DataTable, Error>(v6, 0);
    v10 = v25;
    v11 = v26;
    if (v27 != 4)
    {
      outlined consume of MLDataValue(v25, v26, v27);
LABEL_13:
      v13 = 0;
      goto LABEL_16;
    }
    v12 = v25[2];
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: MLDataValue, value: MLDataValue)>);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v12;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 48);
      outlined copy of MLDataValue(v10, v11, 4);
      swift_bridgeObjectRetain();
      specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v25, (uint64_t)(v13 + 4), v12, (uint64_t)v10);
      v24 = v15;
      v16 = (uint64_t)v26;
      v17 = v27;
      v18 = v28;
      swift_bridgeObjectRelease();
      outlined consume of [MLDataValue : MLDataValue].Index._Variant(v16, v17, v18);
      if (v24 != v12)
        goto LABEL_22;
      outlined consume of MLDataValue(v10, v11, 4);
      outlined consume of MLDataValue(v10, v11, 4);
      v6 = v22;
      v5 = v21;
    }
    else
    {
      outlined consume of MLDataValue(v25, v26, 4);
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v7 = v23;
LABEL_16:
    v29 = v9;
    v20 = *(_QWORD *)(v9 + 16);
    v19 = *(_QWORD *)(v9 + 24);
    if (v20 >= v19 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      v9 = v29;
    }
    *(_QWORD *)(v9 + 16) = v20 + 1;
    *(_QWORD *)(v9 + 8 * v20 + 32) = v13;
    if (v7 == ++v8)
    {
      outlined consume of Result<_DataTable, Error>(v6, v5 & 1);
      return;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So12MLMultiArrayCSgs5NeverOTg5059_s11TabularData0B5FrameV8CreateMLEyAcD11MLDataTableVcfcSo12dE11CSgSiXEfU4_0M2ML0Q6ColumnVyAM0Q5ValueO05MultiE4TypeVGTf1cn_n(uint64_t result, uint64_t a2, void *a3, char a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  int v10[2];
  id v11;
  char v12;
  uint64_t v13;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_14;
  if (v4)
  {
    v8 = result;
    v13 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (a2 < v8 || v4 < 0)
      goto LABEL_15;
    while (a2 != v8)
    {
      if ((a4 & 1) == 0)
      {
        outlined copy of Result<_DataTable, Error>(a3, 0);
        _UntypedColumn.valueAtIndex(index:)(v8, (uint64_t)v10);
        outlined consume of Result<_DataTable, Error>(a3, 0);
        if (v12 != 5)
          outlined consume of MLDataValue(*(void **)v10, v11, v12);
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized ContiguousArray._endMutation()();
      if (a2 == ++v8)
      {
        v9 = v13;
        outlined consume of Result<_DataTable, Error>(a3, a4 & 1);
        return v9;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  outlined consume of Result<_DataTable, Error>(a3, a4 & 1);
  return MEMORY[0x24BEE4AF8];
}

void MLDataTable.init(_:convertArraysToShapedArrays:)(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(_QWORD, _QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  Swift::String v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD, _QWORD, _QWORD);
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  char v56;
  void *v57;

  v48 = OUTLINED_FUNCTION_123_1();
  v4 = *(_QWORD *)(v48 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_208();
  v46 = v6;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_211();
  v47 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  v10 = MEMORY[0x22075BC08](0);
  if (v10)
  {
    v11 = v10;
    type metadata accessor for CMLTable();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v11;
    type metadata accessor for _DataTable();
    OUTLINED_FUNCTION_47_9();
    v55 = _DataTable.init(impl:)(v12);
    v56 = 0;
    v13 = DataFrame.columns.getter();
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v15 = v4;
      v16 = v13 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      v44 = *(_QWORD *)(v4 + 72);
      v17 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 16);
      v45 = a1 & 1;
      v42 = v2;
      v18 = v47;
      v19 = v48;
      v41 = v15;
      v43 = v17;
      do
      {
        v17(v2, v16, v19);
        OUTLINED_FUNCTION_106_3(v2, 0);
        if (__swift_getEnumTagSinglePayload(v2, 1, v19) == 1)
          goto LABEL_21;
        v20 = v15;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v18, v2, v19);
        v17(v46, v18, v19);
        MLUntypedColumn.init(_:convertArraysToShapedArrays:)(v46, v45, (uint64_t)&v53);
        if (v52)
        {
          v39 = type metadata accessor for DataFrame();
          OUTLINED_FUNCTION_79_5(v39);
          (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v48);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_110_3();
          goto LABEL_23;
        }
        v49 = v14;
        v51 = v53;
        v21 = v54;
        v22 = AnyColumn.name.getter();
        v57 = v23;
        MLDataTable.willMutate()();
        v24 = v55;
        v50 = v21;
        if ((v56 & 1) != 0)
        {
          v53 = v55;
          outlined copy of Result<_DataTable, Error>(v55, 1);
          v25 = v24;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          v26 = _getErrorEmbeddedNSError<A>(_:)();
          if (v26)
          {
            v27 = (_QWORD *)v26;
            OUTLINED_FUNCTION_103_4();
          }
          else
          {
            v27 = (_QWORD *)OUTLINED_FUNCTION_49_0();
            *v35 = v53;
          }
          v17 = v43;
          v34 = v49;
          v52 = 0;
          OUTLINED_FUNCTION_103_4();
          v2 = v42;
        }
        else
        {
          if ((v21 & 1) == 0)
          {
            v32 = v51;
            v33 = v51[2];
            OUTLINED_FUNCTION_12_3(v55);
            OUTLINED_FUNCTION_12_3(v51);
            swift_retain();
            CMLTable.addColumn(name:_:)(v22, (uint64_t)v57, v33);
            v52 = 0;
            OUTLINED_FUNCTION_102(v51);
            swift_release();
            OUTLINED_FUNCTION_102(v24);
            v17 = v43;
            v34 = v49;
            if ((v56 & 1) == 0)
            {
              v36 = v55;
              OUTLINED_FUNCTION_12_3(v55);
              _DataTable.columnNamesDidChange()();
              OUTLINED_FUNCTION_102(v36);
            }
            v15 = v41;
            v18 = v47;
            v19 = v48;
            v2 = v42;
            goto LABEL_15;
          }
          v53 = 0;
          v54 = 0xE000000000000000;
          swift_retain();
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          v53 = (_QWORD *)0xD000000000000021;
          v54 = 0x800000021AFF4670;
          v28._countAndFlagsBits = v22;
          v28._object = v57;
          String.append(_:)(v28);
          OUTLINED_FUNCTION_152(39);
          v29 = v53;
          v30 = v54;
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          v27 = (_QWORD *)OUTLINED_FUNCTION_49_0();
          *v31 = v29;
          v31[1] = v30;
          OUTLINED_FUNCTION_1_5((uint64_t)v27, (uint64_t)v31);
          outlined consume of Result<_DataTable, Error>(v24, 0);
          v52 = 0;
          v17 = v43;
          v34 = v49;
        }
        OUTLINED_FUNCTION_110_3();
        v55 = v27;
        v56 = 1;
        v18 = v47;
        v19 = v48;
        v15 = v20;
        v32 = v51;
LABEL_15:
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_12_7(v18, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
        outlined consume of Result<_DataTable, Error>(v32, v50);
        v16 += v44;
        v14 = v34 - 1;
      }
      while (v14);
    }
    OUTLINED_FUNCTION_106_3(v2, 1);
LABEL_21:
    v37 = type metadata accessor for DataFrame();
    OUTLINED_FUNCTION_79_5(v37);
    swift_bridgeObjectRelease();
    v38 = v56;
    *(_QWORD *)a2 = v55;
    *(_BYTE *)(a2 + 8) = v38;
LABEL_23:
    OUTLINED_FUNCTION_7();
  }
  else
  {
    __break(1u);
  }
}

uint64_t DataFrame.randomSplit(strategy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = v3;
  v38 = a1;
  v39 = a2;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame.Slice, DataFrame.Slice));
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  v36 = v7;
  OUTLINED_FUNCTION_29_3();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v34 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v34 - v12;
  v14 = type metadata accessor for DataFrame.Rows();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_49();
  v18 = v17 - v16;
  v19 = *(double *)a3;
  v20 = *(unsigned __int8 *)(a3 + 17);
  v37 = v4;
  DataFrame.rows.getter();
  v21 = DataFrame.Rows.count.getter();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
  if (v20 == 1)
  {
    if (v21 >= 50)
      goto LABEL_6;
LABEL_5:
    v22 = type metadata accessor for DataFrame.Slice();
    __swift_storeEnumTagSinglePayload(v38, 1, 1, v22);
    return specialized DataFrameProtocol.subscript.getter(0, v39);
  }
  if (v19 == 0.0)
    goto LABEL_5;
LABEL_6:
  v24 = v35;
  v25 = (uint64_t)&v13[*(int *)(v35 + 48)];
  type metadata accessor for DataFrame();
  DataFrameProtocol.randomSplit(by:seed:)();
  v26 = (uint64_t)&v11[*(int *)(v24 + 48)];
  v27 = type metadata accessor for DataFrame.Slice();
  v28 = *(_QWORD *)(v27 - 8);
  OUTLINED_FUNCTION_69_5((uint64_t)v11, (uint64_t)v13);
  OUTLINED_FUNCTION_69_5(v26, v25);
  v29 = v38;
  OUTLINED_FUNCTION_69_5(v38, (uint64_t)v11);
  __swift_storeEnumTagSinglePayload(v29, 0, 1, v27);
  v30 = *(int *)(v24 + 48);
  v31 = v36;
  v32 = v36 + v30;
  OUTLINED_FUNCTION_69_5(v36, (uint64_t)v13);
  OUTLINED_FUNCTION_69_5(v32, v25);
  OUTLINED_FUNCTION_69_5(v39, v32);
  v33 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v33(v31, v27);
  return ((uint64_t (*)(uint64_t, uint64_t))v33)(v26, v27);
}

uint64_t DataFrame.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  unint64_t v39;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_64();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[(MLDataValue, MLDataValue)]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[MLDataValue]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_68_3(v11);
  v12 = *(void **)a1;
  v13 = *(_BYTE *)(a1 + 8);
  DataFrame.init()();
  if ((v13 & 1) != 0)
  {
    outlined copy of Result<_DataTable, Error>(v12, 1);
    v14 = MEMORY[0x22075BB18](0);
    if (!v14)
    {
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_20;
    }
    v15 = v14;
    outlined consume of Result<_DataTable, Error>(v12, 1);
    type metadata accessor for CMLSequence();
    v16 = OUTLINED_FUNCTION_9_1();
    *(_QWORD *)(v16 + 16) = v15;
    *(_BYTE *)(v16 + 24) = 1;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v12, 0);
    _DataTable.columnNames.getter(&v38);
    outlined consume of Result<_DataTable, Error>(v12, 0);
  }
  v38 = v12;
  LOBYTE(v39) = v13;
  MLDataTable.columnTypes.getter();
  v18 = v17;
  swift_retain_n();
  v19 = OUTLINED_FUNCTION_109_3();
  OUTLINED_FUNCTION_5_1(v19);
  v21 = v20;
  OUTLINED_FUNCTION_13_7();
  if (v21)
  {
    v22 = 0;
    while (1)
    {
      CMLSequence.value(at:)(v22);
      v23 = CMLFeatureValue.stringValue()();
      if (v24)
        break;
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_149();
      v25 = OUTLINED_FUNCTION_109_3();
      OUTLINED_FUNCTION_5_1(v25);
      v27 = v26;
      OUTLINED_FUNCTION_13_7();
      if (v22 >= v27)
      {
        __break(1u);
        JUMPOUT(0x21AE907B8);
      }
      if (*(_QWORD *)(v18 + 16))
      {
        swift_bridgeObjectRetain();
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v23._countAndFlagsBits, (uint64_t)v23._object);
        if ((v29 & 1) != 0)
        {
          v30 = *(unsigned __int8 *)(*(_QWORD *)(v18 + 56) + v28);
          swift_bridgeObjectRelease();
          __asm { BR              X8 }
        }
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ++v22;
      OUTLINED_FUNCTION_149();
      v31 = OUTLINED_FUNCTION_109_3();
      OUTLINED_FUNCTION_5_1(v31);
      v33 = v32;
      OUTLINED_FUNCTION_13_7();
      if (v22 == v33)
        goto LABEL_16;
    }
LABEL_20:
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_4_2();
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    OUTLINED_FUNCTION_59_8();
    OUTLINED_FUNCTION_74_6();
    v38 = (void *)(v35 + 3);
    v39 = 0x800000021AFF1560;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 46;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x21AE90AECLL);
  }
LABEL_16:
  OUTLINED_FUNCTION_13_7();
  outlined consume of Result<_DataTable, Error>(v12, v13);
  OUTLINED_FUNCTION_13_7();
  return swift_bridgeObjectRelease();
}

uint64_t MLUntypedColumn.init(_:convertArraysToShapedArrays:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, _QWORD);
  uint64_t *v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  uint64_t v112;
  char v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, _QWORD);
  uint64_t v125;
  float v126;
  int v127;
  double v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t);
  uint64_t result;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  MLMultiArray v186;
  unint64_t v187;
  char v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  __n128 *v202;
  MLMultiArray v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  __n128 *v213;
  MLMultiArray v214;
  uint64_t v215;
  uint64_t (*v216)(uint64_t, _QWORD);
  uint64_t *v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t (*v230)(uint64_t, uint64_t);
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  __n128 *v238;
  MLMultiArray v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  void (*v249)(__int128 *__return_ptr, uint64_t);
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t (*v255)(uint64_t);
  uint64_t v256;
  int v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  void (*v275)(unint64_t *, _QWORD);
  id *v276;
  id v277;
  id v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void (*v284)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  MLMultiArray v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  MLMultiArray v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  MLMultiArray v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  Swift::String v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  char v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int64_t v401;
  unint64_t v403;
  int v404;
  unint64_t v405;
  uint64_t v406;
  double v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char v415;
  uint64_t v416;
  _QWORD v417[2];
  char v418;
  uint64_t v419;
  uint64_t v420;
  char v421;
  _OWORD v422[2];
  uint64_t v423;
  _BYTE v424[32];
  _OWORD v425[2];
  uint64_t v426;
  uint64_t v427;
  _BYTE v428[72];
  _QWORD v429[9];
  unint64_t v430;
  unint64_t v431;
  _BYTE v432[32];
  _QWORD v433[2];
  char v434;
  _QWORD v435[2];
  char v436;
  uint64_t v437;
  unint64_t v438;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_208();
  v344 = v7;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_211();
  v342 = v9;
  v343 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Int32>>);
  v325 = *(_QWORD *)(v343 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v341 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  v340 = v13;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_211();
  v337 = v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Double>>);
  v338 = *(_QWORD *)(v16 - 8);
  v339 = v16;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_64();
  v336 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_208();
  v335 = v20;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_211();
  v332 = v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLShapedArray<Float>>);
  v333 = *(_QWORD *)(v23 - 8);
  v334 = v23;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_64();
  v331 = v25;
  v350 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<MLMultiArray>);
  v330 = *(_QWORD *)(v350 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_64();
  v349 = v27;
  v346 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[AnyHashable : Any?]>)
                   - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_64();
  v345 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_64();
  v326 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Any?]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_64();
  v347 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : String]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_64();
  v348 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Float]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_64();
  v351 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Double]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_64();
  v352 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String : Int]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_64();
  v353 = v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_64();
  v354 = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Any?]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_64();
  v355 = v45;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_64();
  v356 = v47;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Double>);
  v363 = *(_QWORD *)(v48 - 8);
  v364 = v48;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v49);
  OUTLINED_FUNCTION_208();
  v329 = v50;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v51);
  OUTLINED_FUNCTION_65_5();
  v361 = v52;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v53);
  OUTLINED_FUNCTION_211();
  v362 = v54;
  v366 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  v357 = *(_QWORD *)(v366 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v56);
  OUTLINED_FUNCTION_211();
  v365 = v57;
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v369 = *(_QWORD *)(v58 - 8);
  v370 = v58;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v59);
  OUTLINED_FUNCTION_208();
  v328 = v60;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v61);
  OUTLINED_FUNCTION_65_5();
  v367 = v62;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v63);
  OUTLINED_FUNCTION_211();
  v368 = v64;
  v372 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  v358 = *(_QWORD *)(v372 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v65);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v66);
  OUTLINED_FUNCTION_211();
  v371 = v67;
  v383 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int32]>);
  v359 = *(_QWORD *)(v383 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v68);
  OUTLINED_FUNCTION_64();
  v382 = v69;
  v376 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Int32>);
  v380 = *(_QWORD *)(v376 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v70);
  OUTLINED_FUNCTION_208();
  v327 = v71;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v72);
  OUTLINED_FUNCTION_65_5();
  v377 = v73;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v74);
  OUTLINED_FUNCTION_211();
  v378 = v75;
  v375 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  v360 = *(_QWORD *)(v375 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v76);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v77);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v78);
  OUTLINED_FUNCTION_211();
  v374 = v79;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v80);
  OUTLINED_FUNCTION_208();
  v387 = v81;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v82);
  OUTLINED_FUNCTION_211();
  v386 = v83;
  v393 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Date>);
  v388 = *(_QWORD *)(v393 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v84);
  OUTLINED_FUNCTION_64();
  v391 = v85;
  v397 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v384 = *(_QWORD *)(v397 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v86);
  OUTLINED_FUNCTION_64();
  v396 = v87;
  v385 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>)
                   - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v88);
  OUTLINED_FUNCTION_55_0();
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Float>);
  v90 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  OUTLINED_FUNCTION_49();
  v93 = v92 - v91;
  v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v399 = *(_QWORD *)(v94 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v95);
  OUTLINED_FUNCTION_49();
  v98 = v97 - v96;
  v99 = a1;
  v100 = AnyColumn.wrappedElementType.getter();
  if (swift_dynamicCastMetatype())
  {
    OUTLINED_FUNCTION_24_15();
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>, MEMORY[0x24BDF5FA0]);
    v102 = v101;
    v103 = v98;
    v104 = dispatch thunk of Collection.count.getter();
    v405 = v98;
    if (!v104)
    {
LABEL_24:
      v134 = a3;
      (*(void (**)(unint64_t, uint64_t))(v399 + 8))(v405, v94);
      OUTLINED_FUNCTION_26_17();
      MEMORY[0x24BDAC7A8](v135);
      OUTLINED_FUNCTION_1_30();
      _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
      OUTLINED_FUNCTION_28_16();
      OUTLINED_FUNCTION_123_1();
      v136 = OUTLINED_FUNCTION_120_3();
LABEL_25:
      result = v137(v136);
LABEL_125:
      *(_QWORD *)v134 = v103;
      *(_BYTE *)(v134 + 8) = v98;
      return result;
    }
    v105 = v104;
    v429[0] = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_4_30();
    v106 = v429[0];
    LOBYTE(v98) = v102;
    dispatch thunk of Collection.startIndex.getter();
    if ((v105 & 0x8000000000000000) == 0)
    {
      do
      {
        OUTLINED_FUNCTION_82_4();
        v107 = (uint64_t (*)(uint64_t, _QWORD))OUTLINED_FUNCTION_117_1();
        v109 = *v108;
        v110 = *((unsigned __int8 *)v108 + 8);
        OUTLINED_FUNCTION_81_8(v107);
        v111 = v110 == 0;
        if (v110)
          v112 = 0;
        else
          v112 = v109;
        if (v111)
          v113 = 0;
        else
          v113 = 6;
        v429[0] = v106;
        v114 = *(_QWORD *)(v106 + 16);
        if (v114 >= *(_QWORD *)(v106 + 24) >> 1)
        {
          OUTLINED_FUNCTION_17_13();
          v106 = v429[0];
        }
        *(_QWORD *)(v106 + 16) = v114 + 1;
        v115 = v106 + 24 * v114;
        *(_QWORD *)(v115 + 32) = v112;
        *(_QWORD *)(v115 + 40) = 0;
        *(_BYTE *)(v115 + 48) = v113;
        v103 = v405;
        dispatch thunk of Collection.formIndex(after:)();
        --v105;
      }
      while (v105);
      goto LABEL_24;
    }
    __break(1u);
LABEL_146:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (OUTLINED_FUNCTION_33_13())
    {
      OUTLINED_FUNCTION_36_9();
      v3 = v403;
      specialized MLUntypedColumn.init<A>(_:)(v356, (uint64_t)&v430);
      goto LABEL_149;
    }
LABEL_152:
    v140 = v403;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
    if (OUTLINED_FUNCTION_33_13())
    {
      v247 = v355;
      OUTLINED_FUNCTION_12_22();
      v248 = &demangling cache variable for type metadata for Column<[Any?]>;
      v249 = (void (*)(__int128 *__return_ptr, uint64_t))specialized closure #1 in MLUntypedColumn.init<A>(_:);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      if (!OUTLINED_FUNCTION_16_18())
        goto LABEL_164;
      v247 = v354;
      OUTLINED_FUNCTION_12_22();
      v248 = &demangling cache variable for type metadata for Column<[Any]>;
      v249 = (void (*)(__int128 *__return_ptr, uint64_t))specialized closure #1 in MLUntypedColumn.init<A>(_:);
    }
    v251 = v403;
    specialized MLUntypedColumn.init<A>(_:)(v247, v248, (uint64_t)closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply, v249, (uint64_t)&v430);
    goto LABEL_159;
  }
  v116 = v100;
  v103 = v93;
  v412 = v90;
  v406 = v4;
  v117 = v396;
  v98 = v397;
  v118 = v116;
  if (swift_dynamicCastMetatype())
  {
    LOBYTE(v98) = v93;
    OUTLINED_FUNCTION_24_15();
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<Float> and conformance Column<A>, &demangling cache variable for type metadata for Column<Float>, MEMORY[0x24BDF5FA0]);
    v120 = v119;
    v121 = dispatch thunk of Collection.count.getter();
    v122 = MEMORY[0x24BEE4AF8];
    if (v121)
    {
      v123 = v121;
      v429[0] = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_4_30();
      v122 = v429[0];
      dispatch thunk of Collection.startIndex.getter();
      if (v123 < 0)
      {
        __break(1u);
        goto LABEL_152;
      }
      do
      {
        OUTLINED_FUNCTION_82_4();
        v124 = (uint64_t (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
        v126 = *(float *)v125;
        v127 = *(unsigned __int8 *)(v125 + 4);
        OUTLINED_FUNCTION_81_8(v124);
        if (v127)
          v128 = 0.0;
        else
          v128 = v126;
        v429[0] = v122;
        v129 = v120;
        v131 = *(_QWORD *)(v122 + 16);
        v130 = *(_QWORD *)(v122 + 24);
        if (v131 >= v130 >> 1)
        {
          OUTLINED_FUNCTION_52_7(v130);
          v407 = v133;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v128 = v407;
          v122 = v429[0];
        }
        *(_QWORD *)(v122 + 16) = v131 + 1;
        v132 = v122 + 24 * v131;
        *(double *)(v132 + 32) = v128;
        *(_QWORD *)(v132 + 40) = 0;
        OUTLINED_FUNCTION_105_2(v132);
        v103 = v93;
        OUTLINED_FUNCTION_108_3();
        --v123;
        v120 = v129;
      }
      while (v123);
      OUTLINED_FUNCTION_92_1();
    }
    v139 = OUTLINED_FUNCTION_12_7(v93, *(uint64_t (**)(uint64_t, uint64_t))(v412 + 8));
    v430 = v122;
    MEMORY[0x24BDAC7A8](v139);
    OUTLINED_FUNCTION_1_30();
    goto LABEL_123;
  }
  v103 = v118;
  v140 = v99;
  if (swift_dynamicCastMetatype())
  {
    v117 = v406;
    OUTLINED_FUNCTION_29_12();
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<Double> and conformance Column<A>, &demangling cache variable for type metadata for Column<Double>, MEMORY[0x24BDF5FA0]);
    v103 = v406;
    v141 = dispatch thunk of Collection.count.getter();
    v142 = MEMORY[0x24BEE4AF8];
    if (v141)
    {
      v143 = v141;
      v429[0] = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_4_30();
      v142 = v429[0];
      v103 = v406;
      dispatch thunk of Collection.startIndex.getter();
      if (v143 < 0)
      {
        __break(1u);
        goto LABEL_31;
      }
      do
      {
        v216 = (uint64_t (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
        v218 = *v217;
        v219 = *((unsigned __int8 *)v217 + 8);
        OUTLINED_FUNCTION_81_8(v216);
        if (v219)
          v220 = 0;
        else
          v220 = v218;
        v429[0] = v142;
        v222 = *(_QWORD *)(v142 + 16);
        v221 = *(_QWORD *)(v142 + 24);
        v98 = v222 + 1;
        if (v222 >= v221 >> 1)
        {
          OUTLINED_FUNCTION_68_6(v221);
          v414 = v215;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v220 = v414;
          v142 = v429[0];
        }
        *(_QWORD *)(v142 + 16) = v98;
        v223 = v142 + 24 * v222;
        *(_QWORD *)(v223 + 32) = v220;
        *(_QWORD *)(v223 + 40) = 0;
        OUTLINED_FUNCTION_105_2(v223);
        v103 = v406;
        OUTLINED_FUNCTION_108_3();
        --v143;
      }
      while (v143);
      OUTLINED_FUNCTION_92_1();
    }
    v224 = OUTLINED_FUNCTION_12_7(v406, *(uint64_t (**)(uint64_t, uint64_t))(v385 + 8));
    v430 = v142;
    MEMORY[0x24BDAC7A8](v224);
    OUTLINED_FUNCTION_1_30();
    goto LABEL_123;
  }
LABEL_31:
  if (swift_dynamicCastMetatype())
  {
    v144 = v117;
    OUTLINED_FUNCTION_29_12();
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>, MEMORY[0x24BDF5FA0]);
    v103 = v117;
    v145 = dispatch thunk of Collection.count.getter();
    if (v145)
    {
      v146 = v145;
      v429[0] = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_4_30();
      v147 = v429[0];
      dispatch thunk of Collection.startIndex.getter();
      if (v146 < 0)
        goto LABEL_163;
      do
      {
        dispatch thunk of Collection.subscript.read();
        v149 = *v148;
        v150 = v148[1];
        OUTLINED_FUNCTION_199();
        OUTLINED_FUNCTION_41_7();
        if (v150)
          v151 = v149;
        else
          v151 = 0;
        v429[0] = v147;
        v152 = v98;
        v154 = *(_QWORD *)(v147 + 16);
        v153 = *(_QWORD *)(v147 + 24);
        if (v154 >= v153 >> 1)
        {
          OUTLINED_FUNCTION_52_7(v153);
          v408 = v156;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v151 = v408;
          v147 = v429[0];
        }
        *(_QWORD *)(v147 + 16) = v154 + 1;
        v155 = v147 + 24 * v154;
        *(_QWORD *)(v155 + 32) = v151;
        *(_QWORD *)(v155 + 40) = v150;
        OUTLINED_FUNCTION_105_2(v155);
        v103 = v144;
        dispatch thunk of Collection.formIndex(after:)();
        --v146;
        v98 = v152;
      }
      while (v146);
      v134 = a3;
    }
    else
    {
      v134 = a3;
    }
    OUTLINED_FUNCTION_22_13(*(uint64_t (**)(uint64_t, uint64_t))(v384 + 8));
    OUTLINED_FUNCTION_26_17();
    MEMORY[0x24BDAC7A8](v171);
    OUTLINED_FUNCTION_1_30();
    goto LABEL_56;
  }
  v98 = type metadata accessor for Date();
  if (OUTLINED_FUNCTION_33_13())
  {
    v157 = v391;
    v413 = v98;
    OUTLINED_FUNCTION_36_9();
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<Date> and conformance Column<A>, &demangling cache variable for type metadata for Column<Date>, MEMORY[0x24BDF5FA0]);
    OUTLINED_FUNCTION_119_2();
    LOBYTE(v98) = v393;
    v158 = OUTLINED_FUNCTION_46_6();
    if (v158)
    {
      v159 = v158;
      v429[0] = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_4_30();
      OUTLINED_FUNCTION_30_13();
      if (v159 < 0)
      {
LABEL_167:
        __break(1u);
        goto LABEL_168;
      }
      do
      {
        v160 = OUTLINED_FUNCTION_19_18();
        v162 = OUTLINED_FUNCTION_116_3(v160, v161);
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v162, v386, &demangling cache variable for type metadata for Date?);
        OUTLINED_FUNCTION_63_9();
        outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v386, v387, &demangling cache variable for type metadata for Date?);
        v163 = OUTLINED_FUNCTION_84_3();
        v164 = v413;
        if (__swift_getEnumTagSinglePayload(v163, v165, v413) == 1)
        {
          outlined destroy of FeatureMatrixBuilder<Float>(v387, &demangling cache variable for type metadata for Date?);
          v166 = 6;
          v167 = 0;
        }
        else
        {
          Date.timeIntervalSince1970.getter();
          v167 = v168;
          OUTLINED_FUNCTION_86_5(v387, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v413 - 8) + 8));
          v166 = 1;
        }
        outlined destroy of FeatureMatrixBuilder<Float>(v386, &demangling cache variable for type metadata for Date?);
        if ((OUTLINED_FUNCTION_42_8() & 1) == 0)
        {
          OUTLINED_FUNCTION_13_28();
          v164 = v429[0];
        }
        OUTLINED_FUNCTION_73_6();
        if (v169)
        {
          OUTLINED_FUNCTION_17_13();
          v164 = v429[0];
        }
        *(_QWORD *)(v164 + 16) = v157;
        v170 = v164 + 24 * v386;
        *(_QWORD *)(v170 + 32) = v167;
        *(_QWORD *)(v170 + 40) = 0;
        *(_BYTE *)(v170 + 48) = v166;
        v157 = v391;
        v103 = v391;
        LOBYTE(v98) = v393;
        OUTLINED_FUNCTION_56_7();
        --v159;
      }
      while (v159);
      OUTLINED_FUNCTION_92_1();
    }
    else
    {
      v172 = v388;
    }
    OUTLINED_FUNCTION_22_13(*(uint64_t (**)(uint64_t, uint64_t))(v172 + 8));
    OUTLINED_FUNCTION_26_17();
    MEMORY[0x24BDAC7A8](v196);
    OUTLINED_FUNCTION_1_30();
    goto LABEL_123;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  if (!swift_dynamicCastMetatype())
  {
    v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32]);
    if (!OUTLINED_FUNCTION_62_10(v197))
    {
      v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      v106 = a3;
      if (OUTLINED_FUNCTION_62_10(v208))
      {
        if ((a2 & 1) == 0)
        {
          OUTLINED_FUNCTION_29_12();
          v240 = OUTLINED_FUNCTION_89_3();
          specialized MLUntypedColumn.init<A>(_:)(v240, v241);
          goto LABEL_149;
        }
        OUTLINED_FUNCTION_29_12();
        lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[Float]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Float]>, MEMORY[0x24BDF5FA0]);
        OUTLINED_FUNCTION_119_2();
        LOBYTE(v98) = v372;
        v209 = OUTLINED_FUNCTION_46_6();
        if (v209)
        {
          v210 = v209;
          v429[0] = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_4_30();
          OUTLINED_FUNCTION_30_13();
          if (v210 < 0)
          {
            __break(1u);
            goto LABEL_179;
          }
          do
          {
            OUTLINED_FUNCTION_19_18();
            v212 = *v211;
            OUTLINED_FUNCTION_189();
            OUTLINED_FUNCTION_41_7();
            if (v212)
            {
              v430 = v212;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
              v213 = (__n128 *)OUTLINED_FUNCTION_47_9();
              OUTLINED_FUNCTION_53_11(v213);
              lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata((unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float], MEMORY[0x24BEE12C8]);
              OUTLINED_FUNCTION_189();
              OUTLINED_FUNCTION_127_2();
              OUTLINED_FUNCTION_100_3();
              OUTLINED_FUNCTION_216(v367, v368, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v369 + 16));
              lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, MEMORY[0x24BDBFCD0]);
              v214.super.isa = (Class)OUTLINED_FUNCTION_57_5();
              OUTLINED_FUNCTION_55_8(v214);
              OUTLINED_FUNCTION_22_13(*(uint64_t (**)(uint64_t, uint64_t))(v369 + 8));
              OUTLINED_FUNCTION_80();
            }
            if ((OUTLINED_FUNCTION_42_8() & 1) == 0)
              OUTLINED_FUNCTION_13_28();
            OUTLINED_FUNCTION_73_6();
            if (v169)
              OUTLINED_FUNCTION_17_13();
            OUTLINED_FUNCTION_44_10();
            LOBYTE(v98) = v372;
            v103 = v371;
            OUTLINED_FUNCTION_56_7();
            --v210;
          }
          while (v210);
          OUTLINED_FUNCTION_92_1();
        }
        OUTLINED_FUNCTION_22_13(*(uint64_t (**)(uint64_t, uint64_t))(v358 + 8));
        OUTLINED_FUNCTION_26_17();
        MEMORY[0x24BDAC7A8](v242);
        OUTLINED_FUNCTION_1_30();
        goto LABEL_123;
      }
      v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      if (!OUTLINED_FUNCTION_62_10(v233))
        goto LABEL_146;
      if ((a2 & 1) == 0)
      {
        OUTLINED_FUNCTION_29_12();
        v243 = OUTLINED_FUNCTION_89_3();
        specialized MLUntypedColumn.init<A>(_:)(v243, v244);
LABEL_149:
        if (!v3)
        {
          v245 = OUTLINED_FUNCTION_123_1();
          result = OUTLINED_FUNCTION_51_9(v245);
          v103 = v430;
          LOBYTE(v98) = v431;
          v134 = v106;
          goto LABEL_125;
        }
        goto LABEL_127;
      }
      OUTLINED_FUNCTION_29_12();
      lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[Double]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Double]>, MEMORY[0x24BDF5FA0]);
      OUTLINED_FUNCTION_119_2();
      LOBYTE(v98) = v366;
      v234 = OUTLINED_FUNCTION_46_6();
      if (v234)
      {
        v235 = v234;
        v429[0] = MEMORY[0x24BEE4AF8];
        OUTLINED_FUNCTION_4_30();
        OUTLINED_FUNCTION_30_13();
        if (v235 < 0)
        {
          __break(1u);
          goto LABEL_183;
        }
        do
        {
          OUTLINED_FUNCTION_19_18();
          v237 = *v236;
          OUTLINED_FUNCTION_189();
          OUTLINED_FUNCTION_41_7();
          if (v237)
          {
            v430 = v237;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
            v238 = (__n128 *)OUTLINED_FUNCTION_47_9();
            OUTLINED_FUNCTION_53_11(v238);
            lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type [Double] and conformance [A], &demangling cache variable for type metadata for [Double], MEMORY[0x24BEE12C8]);
            OUTLINED_FUNCTION_189();
            OUTLINED_FUNCTION_127_2();
            OUTLINED_FUNCTION_100_3();
            OUTLINED_FUNCTION_216(v361, v362, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v363 + 16));
            lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>, MEMORY[0x24BDBFCD0]);
            v239.super.isa = (Class)OUTLINED_FUNCTION_57_5();
            OUTLINED_FUNCTION_55_8(v239);
            OUTLINED_FUNCTION_22_13(*(uint64_t (**)(uint64_t, uint64_t))(v363 + 8));
            OUTLINED_FUNCTION_80();
          }
          if ((OUTLINED_FUNCTION_42_8() & 1) == 0)
            OUTLINED_FUNCTION_13_28();
          OUTLINED_FUNCTION_73_6();
          if (v169)
            OUTLINED_FUNCTION_17_13();
          OUTLINED_FUNCTION_44_10();
          LOBYTE(v98) = v366;
          v103 = v365;
          OUTLINED_FUNCTION_56_7();
          --v235;
        }
        while (v235);
        v134 = a3;
        v246 = v357;
      }
      else
      {
        v134 = a3;
        v246 = v357;
      }
      OUTLINED_FUNCTION_22_13(*(uint64_t (**)(uint64_t, uint64_t))(v246 + 8));
      OUTLINED_FUNCTION_26_17();
      MEMORY[0x24BDAC7A8](v250);
      OUTLINED_FUNCTION_1_30();
LABEL_56:
      _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
      OUTLINED_FUNCTION_28_16();
      OUTLINED_FUNCTION_123_1();
      v136 = OUTLINED_FUNCTION_121_3();
      goto LABEL_25;
    }
    if ((a2 & 1) != 0)
    {
      OUTLINED_FUNCTION_29_12();
      lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[Int32]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Int32]>, MEMORY[0x24BDF5FA0]);
      OUTLINED_FUNCTION_119_2();
      LOBYTE(v98) = v383;
      v198 = OUTLINED_FUNCTION_46_6();
      if (v198)
      {
        v199 = v198;
        v429[0] = MEMORY[0x24BEE4AF8];
        OUTLINED_FUNCTION_4_30();
        OUTLINED_FUNCTION_30_13();
        if (v199 < 0)
        {
          __break(1u);
          goto LABEL_176;
        }
        do
        {
          OUTLINED_FUNCTION_19_18();
          v201 = *v200;
          OUTLINED_FUNCTION_189();
          OUTLINED_FUNCTION_41_7();
          if (v201)
          {
            v430 = v201;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
            v202 = (__n128 *)OUTLINED_FUNCTION_47_9();
            OUTLINED_FUNCTION_53_11(v202);
            lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type [Int32] and conformance [A], &demangling cache variable for type metadata for [Int32], MEMORY[0x24BEE12C8]);
            OUTLINED_FUNCTION_189();
            OUTLINED_FUNCTION_127_2();
            OUTLINED_FUNCTION_100_3();
            OUTLINED_FUNCTION_216(v377, v378, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v380 + 16));
            lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, MEMORY[0x24BDBFCD0]);
            v203.super.isa = (Class)OUTLINED_FUNCTION_57_5();
            OUTLINED_FUNCTION_55_8(v203);
            OUTLINED_FUNCTION_22_13(*(uint64_t (**)(uint64_t, uint64_t))(v380 + 8));
            OUTLINED_FUNCTION_80();
          }
          if ((OUTLINED_FUNCTION_42_8() & 1) == 0)
            OUTLINED_FUNCTION_13_28();
          OUTLINED_FUNCTION_73_6();
          if (v169)
            OUTLINED_FUNCTION_17_13();
          OUTLINED_FUNCTION_44_10();
          LOBYTE(v98) = v383;
          v103 = v382;
          OUTLINED_FUNCTION_56_7();
          --v199;
        }
        while (v199);
        OUTLINED_FUNCTION_92_1();
      }
      OUTLINED_FUNCTION_22_13(*(uint64_t (**)(uint64_t, uint64_t))(v359 + 8));
      OUTLINED_FUNCTION_26_17();
      MEMORY[0x24BDAC7A8](v232);
      OUTLINED_FUNCTION_1_30();
      goto LABEL_123;
    }
LABEL_126:
    OUTLINED_FUNCTION_36_9();
    v226 = OUTLINED_FUNCTION_89_3();
    specialized MLUntypedColumn.init<A>(_:)(v226, v227);
    v134 = a3;
    if (!v3)
    {
      v231 = OUTLINED_FUNCTION_123_1();
      result = OUTLINED_FUNCTION_51_9(v231);
      v103 = v430;
      LOBYTE(v98) = v431;
      goto LABEL_125;
    }
LABEL_127:
    OUTLINED_FUNCTION_123_1();
    v228 = OUTLINED_FUNCTION_121_3();
    return v230(v228, v229);
  }
  if ((a2 & 1) == 0)
    goto LABEL_126;
  v173 = v374;
  OUTLINED_FUNCTION_36_9();
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[Int]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Int]>, MEMORY[0x24BDF5FA0]);
  v103 = v374;
  LOBYTE(v98) = v375;
  v174 = OUTLINED_FUNCTION_46_6();
  v175 = MEMORY[0x24BEE4AF8];
  if (!v174)
  {
LABEL_101:
    v204 = OUTLINED_FUNCTION_47_2(v173, *(uint64_t (**)(uint64_t, uint64_t))(v360 + 8));
    v430 = v175;
    MEMORY[0x24BDAC7A8](v204);
    OUTLINED_FUNCTION_1_30();
LABEL_123:
    _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
    OUTLINED_FUNCTION_28_16();
    v225 = OUTLINED_FUNCTION_123_1();
    result = OUTLINED_FUNCTION_51_9(v225);
LABEL_124:
    v134 = a3;
    goto LABEL_125;
  }
  v429[0] = MEMORY[0x24BEE4AF8];
  v398 = v174;
  OUTLINED_FUNCTION_11_22();
  dispatch thunk of Collection.startIndex.getter();
  v176 = v398;
  if (v398 < 0)
  {
    __break(1u);
    goto LABEL_173;
  }
  v177 = 0;
  v178 = v376;
  v390 = v140;
  while (1)
  {
    v409 = v177;
    if (v177 == v176)
    {
      __break(1u);
      goto LABEL_167;
    }
    OUTLINED_FUNCTION_93_2();
    v180 = *v179;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_41_7();
    if (!v180)
    {
      v187 = 0;
      v188 = 6;
      goto LABEL_72;
    }
    v181 = *(_QWORD *)(v180 + 16);
    v400 = v180;
    v182 = MEMORY[0x24BEE4AF8];
    if (v181)
      break;
LABEL_70:
    v430 = v182;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v185 = OUTLINED_FUNCTION_47_9();
    *(_OWORD *)(v185 + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(v185 + 32) = v181;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32]);
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type [Int32] and conformance [A], &demangling cache variable for type metadata for [Int32], MEMORY[0x24BEE12C8]);
    MLShapedArray.init<A>(scalars:shape:)();
    OUTLINED_FUNCTION_100_3();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v380 + 16))(v377, v378, v178);
    lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, MEMORY[0x24BDBFCD0]);
    v186.super.isa = (Class)MLMultiArray.init<A>(_:)();
    OUTLINED_FUNCTION_55_8(v186);
    OUTLINED_FUNCTION_12_7(v378, *(uint64_t (**)(uint64_t, uint64_t))(v380 + 8));
    swift_bridgeObjectRelease();
    v187 = v430;
    v188 = 5;
LABEL_72:
    v175 = v429[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_13_28();
      v175 = v429[0];
    }
    v189 = v409;
    v98 = *(_QWORD *)(v175 + 16);
    v190 = *(_QWORD *)(v175 + 24);
    if (v98 >= v190 >> 1)
    {
      OUTLINED_FUNCTION_68_6(v190);
      OUTLINED_FUNCTION_17_13();
      v189 = v409;
      v175 = v429[0];
    }
    *(_QWORD *)(v175 + 16) = v98 + 1;
    v191 = v175 + 24 * v98;
    *(_QWORD *)(v191 + 32) = v187;
    *(_QWORD *)(v191 + 40) = 0;
    *(_BYTE *)(v191 + 48) = v188;
    v173 = v374;
    LOBYTE(v98) = v375;
    v103 = v374;
    v192 = v189 + 1;
    dispatch thunk of Collection.formIndex(after:)();
    v177 = v192;
    v176 = v398;
    v111 = v192 == v398;
    v140 = v390;
    if (v111)
      goto LABEL_101;
  }
  v430 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v183 = *(_QWORD *)(v180 + 32);
  if (v183 != (int)v183)
  {
LABEL_102:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v205 = OUTLINED_FUNCTION_49_0();
    *v206 = 0xD00000000000001FLL;
    v206[1] = 0x800000021AFF45F0;
    OUTLINED_FUNCTION_1_5(v205, (uint64_t)v206);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v207 = OUTLINED_FUNCTION_123_1();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v207 - 8) + 8))(v390, v207);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v360 + 8))(v374, v375);
  }
  v182 = v430;
  v184 = *(_QWORD *)(v430 + 16);
  if (v184 >= *(_QWORD *)(v430 + 24) >> 1)
  {
    OUTLINED_FUNCTION_125_3();
    v182 = v430;
  }
  *(_QWORD *)(v182 + 16) = v184 + 1;
  *(_DWORD *)(v182 + 4 * v184 + 32) = v183;
  v140 = v181 - 1;
  if (v181 == 1)
  {
LABEL_69:
    v178 = v376;
    goto LABEL_70;
  }
  v193 = 0;
  v194 = v184 + 9;
  while (v193 + 1 < v181)
  {
    v195 = *(_QWORD *)(v400 + 40 + 8 * v193);
    if (v195 != (int)v195)
      goto LABEL_102;
    v430 = v182;
    if (v194 - 8 >= *(_QWORD *)(v182 + 24) >> 1)
    {
      OUTLINED_FUNCTION_125_3();
      v182 = v430;
    }
    *(_QWORD *)(v182 + 16) = v194 - 7;
    *(_DWORD *)(v182 + 4 * v194++) = v195;
    if (v140 == ++v193)
      goto LABEL_69;
  }
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Int]);
  if (OUTLINED_FUNCTION_16_18())
  {
    v253 = v353;
    OUTLINED_FUNCTION_12_22();
    v254 = &demangling cache variable for type metadata for Column<[String : Int]>;
    v255 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSiG_8CreateML11MLDataValueO_AItsAE_pTg5020_sSS3key_x5valuetSg8d4ML11fg5OAFs5c136_pIgnrrzo_SSAA_xABtAF_AFtsAG_pIegnrzr_lTRSi_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l18SDySSxGGKclufcAA11ef34OAGSgKXEfU_AJ_AJti1_J22SgV8U_Si_TG5Tf3nnnpf_nTf1cn_n;
    goto LABEL_181;
  }
LABEL_168:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
  if (OUTLINED_FUNCTION_16_18())
  {
    v253 = v352;
    OUTLINED_FUNCTION_12_22();
    v254 = &demangling cache variable for type metadata for Column<[String : Double]>;
    v255 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSdG_8CreateML11MLDataValueO_AItsAE_pTg5020_sSS3key_x5valuetSg8d4ML11fg5OAFs5c136_pIgnrrzo_SSAA_xABtAF_AFtsAG_pIegnrzr_lTRSd_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l18SDySSxGGKclufcAA11ef34OAGSgKXEfU_AJ_AJti1_J22SgV8U_Sd_TG5Tf3nnnpf_nTf1cn_n;
    goto LABEL_181;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Float]);
  if (OUTLINED_FUNCTION_16_18())
  {
    v253 = v351;
    OUTLINED_FUNCTION_12_22();
    v254 = &demangling cache variable for type metadata for Column<[String : Float]>;
    v255 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSfG_8CreateML11MLDataValueO_AItsAE_pTg5020_sSS3key_x5valuetSg8d4ML11fg5OAFs5c136_pIgnrrzo_SSAA_xABtAF_AFtsAG_pIegnrzr_lTRSf_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l18SDySSxGGKclufcAA11ef34OAGSgKXEfU_AJ_AJti1_J22SgV8U_Sf_TG5Tf3nnnpf_nTf1cn_n;
    goto LABEL_181;
  }
LABEL_173:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  if (OUTLINED_FUNCTION_16_18())
  {
    v253 = v348;
    OUTLINED_FUNCTION_12_22();
    v254 = &demangling cache variable for type metadata for Column<[String : String]>;
    v255 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_8CreateML11MLDataValueO_AItsAE_pTg5020_sSS3key_x5valuetSg8d4ML11fg5OAFs5c136_pIgnrrzo_SSAA_xABtAF_AFtsAG_pIegnrzr_lTRSS_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l18SDySSxGGKclufcAA11ef34OAGSgKXEfU_AJ_AJti1_J22SgV8U_SS_TG5Tf3nnnpf_nTf1cn_n;
    goto LABEL_181;
  }
LABEL_176:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any?]);
  if (OUTLINED_FUNCTION_16_18())
  {
    v253 = v347;
    OUTLINED_FUNCTION_12_22();
    v254 = &demangling cache variable for type metadata for Column<[String : Any?]>;
    v255 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypSgG_8CreateML11MLDataValueO_AJtsAE_pTg5022_sSS3key_xSg5valuetSg8d4ML11fg5OAGs5c138_pIgnrrzo_SSAA_AbCtAG_AGtsAH_pIegnrzr_lTRyp_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l20SDySSxSgGGKclufcAA11ef33OAHSgKXEfU_AK_AKtI31_AG5valuetsW8U_yp_Tg5Tf3nnnpf_nTf1cn_n;
    goto LABEL_181;
  }
LABEL_179:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  if (!OUTLINED_FUNCTION_16_18())
  {
LABEL_183:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any?]);
    if (OUTLINED_FUNCTION_16_18())
    {
      OUTLINED_FUNCTION_24_15();
      lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[AnyHashable : Any?]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[AnyHashable : Any?]>, MEMORY[0x24BDF5FA0]);
      v103 = v345;
      v379 = dispatch thunk of Collection.count.getter();
      if (v379)
      {
        v438 = MEMORY[0x24BEE4AF8];
        OUTLINED_FUNCTION_11_22();
        dispatch thunk of Collection.startIndex.getter();
        if ((v379 & 0x8000000000000000) == 0)
        {
          v381 = 0;
          while (v381 != v379)
          {
            dispatch thunk of Collection.subscript.read();
            OUTLINED_FUNCTION_95_3();
            OUTLINED_FUNCTION_41_7();
            if (v345)
            {
              v401 = *(_QWORD *)(v345 + 16);
              if (v401)
              {
                v437 = MEMORY[0x24BEE4AF8];
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v401, 0);
                v256 = specialized Dictionary.startIndex.getter(v345);
                v404 = v257;
                if (v256 < 0 || (v258 = v256, v256 >= 1 << *(_BYTE *)(v345 + 32)))
                {
LABEL_272:
                  __break(1u);
                }
                else
                {
                  v410 = v345 + 64;
                  while ((*(_QWORD *)(v410 + 8 * (v258 >> 6)) & (1 << v258)) != 0)
                  {
                    if (*(_DWORD *)(v345 + 36) != v404)
                      goto LABEL_274;
                    outlined init with copy of AnyHashable(*(_QWORD *)(v345 + 48) + 40 * v258, (uint64_t)&v430);
                    OUTLINED_FUNCTION_60_7(*(_QWORD *)(v345 + 56) + 32 * v258, (uint64_t)v432);
                    outlined init with copy of AnyHashable((uint64_t)&v430, (uint64_t)v429);
                    OUTLINED_FUNCTION_60_7((uint64_t)v432, (uint64_t)&v429[5]);
                    memcpy(v428, v429, sizeof(v428));
                    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v430, &demangling cache variable for type metadata for (key: AnyHashable, value: Any?));
                    outlined init with copy of AnyHashable((uint64_t)v428, (uint64_t)v422);
                    OUTLINED_FUNCTION_60_7((uint64_t)&v428[40], (uint64_t)v424);
                    v425[0] = v422[0];
                    v425[1] = v422[1];
                    v426 = v423;
                    outlined init with take of Any?((uint64_t)v424, (uint64_t)&v427);
                    closure #1 in closure #10 in MLUntypedColumn.init(_:convertArraysToShapedArrays:)((uint64_t)v433, (uint64_t)v435, (uint64_t)v425);
                    if (v140)
                    {
                      outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v425, &demangling cache variable for type metadata for (key: AnyHashable, value: Any?)?);
                      outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v428, &demangling cache variable for type metadata for (key: AnyHashable, value: Any?));
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_release();
                      v282 = OUTLINED_FUNCTION_123_1();
                      OUTLINED_FUNCTION_50_8(v282);
                      return OUTLINED_FUNCTION_86_5(v345, *(uint64_t (**)(uint64_t, uint64_t))(v346 + 8));
                    }
                    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v425, &demangling cache variable for type metadata for (key: AnyHashable, value: Any?)?);
                    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v428, &demangling cache variable for type metadata for (key: AnyHashable, value: Any?));
                    v259 = v433[0];
                    v395 = v433[1];
                    v394 = v434;
                    v260 = v435[0];
                    v392 = v435[1];
                    v389 = v436;
                    v261 = v437;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v261 + 16) + 1, 1);
                      v261 = v437;
                    }
                    v262 = *(char **)(v261 + 16);
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v262);
                    v417[0] = v259;
                    v417[1] = v395;
                    v418 = v394;
                    v419 = v260;
                    v420 = v392;
                    v421 = v389;
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)((uint64_t)v262, (uint64_t)v417);
                    MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v263);
                    if ((uint64_t)v258 >= -(-1 << *(_BYTE *)(v345 + 32)))
                      goto LABEL_275;
                    if ((*(_QWORD *)(v410 + 8 * (v258 >> 6)) & (1 << v258)) == 0)
                      goto LABEL_276;
                    if (*(_DWORD *)(v345 + 36) != v404)
                      goto LABEL_277;
                    v264 = _HashTable.occupiedBucket(after:)();
                    if (!--v401)
                    {
                      v266 = v437;
                      goto LABEL_208;
                    }
                    v258 = v264;
                    if ((v264 & 0x8000000000000000) == 0)
                    {
                      v404 = *(_DWORD *)(v345 + 36);
                      if (v264 < 1 << *(_BYTE *)(v345 + 32))
                        continue;
                    }
                    goto LABEL_272;
                  }
                }
                __break(1u);
LABEL_274:
                __break(1u);
LABEL_275:
                __break(1u);
LABEL_276:
                __break(1u);
LABEL_277:
                __break(1u);
                break;
              }
              v266 = MEMORY[0x24BEE4AF8];
LABEL_208:
              if (*(_QWORD *)(v266 + 16))
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, MLDataValue>);
                v267 = OUTLINED_FUNCTION_96_4();
              }
              else
              {
                v267 = MEMORY[0x24BEE4B00];
              }
              v430 = v267;
              v268 = swift_bridgeObjectRetain();
              specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v268, 1, &v430);
              if (v140)
                goto LABEL_284;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v411 = v430;
              v265 = 4;
            }
            else
            {
              v411 = 0;
              v265 = 6;
            }
            v415 = v265;
            v98 = v438;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_17_13();
              v98 = v438;
            }
            v269 = *(_QWORD *)(v98 + 16);
            if (v269 >= *(_QWORD *)(v98 + 24) >> 1)
            {
              OUTLINED_FUNCTION_17_13();
              v98 = v438;
            }
            *(_QWORD *)(v98 + 16) = v269 + 1;
            v270 = v98 + 24 * v269;
            *(_QWORD *)(v270 + 32) = v411;
            *(_QWORD *)(v270 + 40) = 0;
            *(_BYTE *)(v270 + 48) = v415;
            v103 = v345;
            dispatch thunk of Collection.formIndex(after:)();
            if (++v381 == v379)
              goto LABEL_231;
          }
          __break(1u);
        }
        __break(1u);
        goto LABEL_280;
      }
      v98 = MEMORY[0x24BEE4AF8];
LABEL_231:
      v283 = OUTLINED_FUNCTION_86_5(v345, *(uint64_t (**)(uint64_t, uint64_t))(v346 + 8));
      v430 = v98;
      MEMORY[0x24BDAC7A8](v283);
      OUTLINED_FUNCTION_1_30();
      v284 = (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply;
    }
    else
    {
      type metadata accessor for MLMultiArray();
      if (swift_dynamicCastMetatype())
      {
        LOBYTE(v98) = v349;
        OUTLINED_FUNCTION_24_15();
        lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<MLMultiArray> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLMultiArray>, MEMORY[0x24BDF5FA0]);
        v103 = v349;
        v272 = OUTLINED_FUNCTION_128_0(v350, v271);
        v273 = MEMORY[0x24BEE4AF8];
        if (v272)
        {
          v274 = v272;
          v429[0] = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_4_30();
          v273 = v429[0];
          OUTLINED_FUNCTION_113_2();
          if (v274 < 0)
          {
LABEL_280:
            __break(1u);
            goto LABEL_281;
          }
          do
          {
            OUTLINED_FUNCTION_82_4();
            v275 = (void (*)(unint64_t *, _QWORD))OUTLINED_FUNCTION_93_2();
            v277 = *v276;
            v278 = *v276;
            v275(&v430, 0);
            if (v277)
            {
              MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v278);
              v98 = v430;
            }
            else
            {
              v98 = 0;
            }
            v429[0] = v273;
            v280 = *(_QWORD *)(v273 + 16);
            v279 = *(_QWORD *)(v273 + 24);
            if (v280 >= v279 >> 1)
            {
              OUTLINED_FUNCTION_68_6(v279);
              OUTLINED_FUNCTION_17_13();
              v273 = v429[0];
            }
            *(_QWORD *)(v273 + 16) = v280 + 1;
            v281 = v273 + 24 * v280;
            *(_QWORD *)(v281 + 32) = v98;
            *(_QWORD *)(v281 + 40) = 0;
            OUTLINED_FUNCTION_105_2(v281);
            v103 = v349;
            OUTLINED_FUNCTION_118_1();
            --v274;
          }
          while (v274);
        }
        v285 = (*(uint64_t (**)(unint64_t, uint64_t))(v330 + 8))(v349, v350);
        v430 = v273;
        MEMORY[0x24BDAC7A8](v285);
        OUTLINED_FUNCTION_1_30();
        v284 = (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply;
      }
      else if (swift_dynamicCastMetatype())
      {
        LOBYTE(v98) = v331;
        OUTLINED_FUNCTION_24_15();
        lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<MLShapedArray<Float>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Float>>, MEMORY[0x24BDF5FA0]);
        v103 = v331;
        v287 = OUTLINED_FUNCTION_128_0(v334, v286);
        v288 = MEMORY[0x24BEE4AF8];
        if (v287)
        {
          v289 = v287;
          v429[0] = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_4_30();
          OUTLINED_FUNCTION_113_2();
          if (v289 < 0)
          {
LABEL_281:
            __break(1u);
            goto LABEL_282;
          }
          do
          {
            OUTLINED_FUNCTION_82_4();
            v290 = OUTLINED_FUNCTION_93_2();
            v292 = OUTLINED_FUNCTION_116_3(v290, v291);
            OUTLINED_FUNCTION_60_7(v292, v332);
            OUTLINED_FUNCTION_63_9();
            OUTLINED_FUNCTION_60_7(v332, v335);
            v293 = OUTLINED_FUNCTION_84_3();
            if (__swift_getEnumTagSinglePayload(v293, v294, v370) == 1)
            {
              outlined destroy of FeatureMatrixBuilder<Float>(v335, &demangling cache variable for type metadata for MLShapedArray<Float>?);
              LOBYTE(v98) = 6;
            }
            else
            {
              v288 = v328;
              OUTLINED_FUNCTION_216(v328, v335, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v369 + 32));
              OUTLINED_FUNCTION_216(v368, v328, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v369 + 16));
              lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, MEMORY[0x24BDBFCD0]);
              v295.super.isa = (Class)OUTLINED_FUNCTION_75_9();
              OUTLINED_FUNCTION_55_8(v295);
              OUTLINED_FUNCTION_47_2(v328, *(uint64_t (**)(uint64_t, uint64_t))(v369 + 8));
              LOBYTE(v98) = 5;
            }
            outlined destroy of FeatureMatrixBuilder<Float>(v332, &demangling cache variable for type metadata for MLShapedArray<Float>?);
            if ((OUTLINED_FUNCTION_42_8() & 1) == 0)
            {
              OUTLINED_FUNCTION_13_28();
              v288 = v429[0];
            }
            if (*(_QWORD *)(v288 + 16) >= *(_QWORD *)(v288 + 24) >> 1)
            {
              OUTLINED_FUNCTION_17_13();
              v288 = v429[0];
            }
            OUTLINED_FUNCTION_66_7();
            v103 = v331;
            OUTLINED_FUNCTION_118_1();
            --v289;
          }
          while (v289);
        }
        (*(void (**)(unint64_t, uint64_t))(v333 + 8))(v331, v334);
        OUTLINED_FUNCTION_26_17();
        MEMORY[0x24BDAC7A8](v296);
        OUTLINED_FUNCTION_1_30();
        v284 = (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply;
      }
      else if (swift_dynamicCastMetatype())
      {
        LOBYTE(v98) = v336;
        OUTLINED_FUNCTION_24_15();
        lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<MLShapedArray<Double>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Double>>, MEMORY[0x24BDF5FA0]);
        v103 = v336;
        v298 = OUTLINED_FUNCTION_128_0(v339, v297);
        v299 = MEMORY[0x24BEE4AF8];
        if (v298)
        {
          v300 = v298;
          v429[0] = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_4_30();
          OUTLINED_FUNCTION_113_2();
          if (v300 < 0)
          {
LABEL_282:
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            result = OUTLINED_FUNCTION_99_4();
            __break(1u);
            return result;
          }
          do
          {
            OUTLINED_FUNCTION_82_4();
            v301 = OUTLINED_FUNCTION_93_2();
            v303 = OUTLINED_FUNCTION_116_3(v301, v302);
            OUTLINED_FUNCTION_60_7(v303, v337);
            OUTLINED_FUNCTION_63_9();
            OUTLINED_FUNCTION_60_7(v337, v340);
            v304 = OUTLINED_FUNCTION_84_3();
            if (__swift_getEnumTagSinglePayload(v304, v305, v364) == 1)
            {
              outlined destroy of FeatureMatrixBuilder<Float>(v340, &demangling cache variable for type metadata for MLShapedArray<Double>?);
              LOBYTE(v98) = 6;
            }
            else
            {
              v299 = v329;
              OUTLINED_FUNCTION_216(v329, v340, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v363 + 32));
              OUTLINED_FUNCTION_216(v362, v329, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v363 + 16));
              lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Double> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Double>, MEMORY[0x24BDBFCD0]);
              v306.super.isa = (Class)OUTLINED_FUNCTION_75_9();
              OUTLINED_FUNCTION_55_8(v306);
              OUTLINED_FUNCTION_47_2(v329, *(uint64_t (**)(uint64_t, uint64_t))(v363 + 8));
              LOBYTE(v98) = 5;
            }
            outlined destroy of FeatureMatrixBuilder<Float>(v337, &demangling cache variable for type metadata for MLShapedArray<Double>?);
            if ((OUTLINED_FUNCTION_42_8() & 1) == 0)
            {
              OUTLINED_FUNCTION_13_28();
              v299 = v429[0];
            }
            if (*(_QWORD *)(v299 + 16) >= *(_QWORD *)(v299 + 24) >> 1)
            {
              OUTLINED_FUNCTION_17_13();
              v299 = v429[0];
            }
            OUTLINED_FUNCTION_66_7();
            v103 = v336;
            OUTLINED_FUNCTION_118_1();
            --v300;
          }
          while (v300);
        }
        (*(void (**)(unint64_t, uint64_t))(v338 + 8))(v336, v339);
        OUTLINED_FUNCTION_26_17();
        MEMORY[0x24BDAC7A8](v307);
        OUTLINED_FUNCTION_1_30();
        v284 = (void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply;
      }
      else
      {
        if (!swift_dynamicCastMetatype())
        {
          static String._createEmpty(withInitialCapacity:)(25);
          swift_bridgeObjectRelease();
          v430 = 0xD000000000000016;
          v431 = 0x800000021AFF45B0;
          AnyColumn.wrappedElementType.getter();
          v322._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v322);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_152(46);
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          v323 = OUTLINED_FUNCTION_49_0();
          *v324 = 0xD000000000000016;
          v324[1] = 0x800000021AFF45B0;
          OUTLINED_FUNCTION_1_5(v323, (uint64_t)v324);
          goto LABEL_160;
        }
        LOBYTE(v98) = v341;
        OUTLINED_FUNCTION_24_15();
        lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<MLShapedArray<Int32>> and conformance Column<A>, &demangling cache variable for type metadata for Column<MLShapedArray<Int32>>, MEMORY[0x24BDF5FA0]);
        v308 = dispatch thunk of Collection.count.getter();
        v103 = MEMORY[0x24BEE4AF8];
        if (v308)
        {
          v309 = v308;
          v429[0] = MEMORY[0x24BEE4AF8];
          OUTLINED_FUNCTION_4_30();
          dispatch thunk of Collection.startIndex.getter();
          if (v309 < 0)
            goto LABEL_283;
          do
          {
            OUTLINED_FUNCTION_82_4();
            v310 = dispatch thunk of Collection.subscript.read();
            v312 = OUTLINED_FUNCTION_116_3(v310, v311);
            outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v312, v342, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
            OUTLINED_FUNCTION_63_9();
            outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v342, v344, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
            v313 = OUTLINED_FUNCTION_84_3();
            if (__swift_getEnumTagSinglePayload(v313, v314, v376) == 1)
            {
              outlined destroy of FeatureMatrixBuilder<Float>(v344, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
              v416 = 0;
              v315 = 6;
            }
            else
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v380 + 32))(v327, v344, v376);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v380 + 16))(v378, v327, v376);
              lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type MLShapedArray<Int32> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Int32>, MEMORY[0x24BDBFCD0]);
              v316.super.isa = (Class)MLMultiArray.init<A>(_:)();
              OUTLINED_FUNCTION_55_8(v316);
              v416 = v430;
              (*(void (**)(uint64_t, uint64_t))(v380 + 8))(v327, v376);
              v315 = 5;
            }
            outlined destroy of FeatureMatrixBuilder<Float>(v342, &demangling cache variable for type metadata for MLShapedArray<Int32>?);
            v317 = v429[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_13_28();
              v317 = v429[0];
            }
            v98 = *(_QWORD *)(v317 + 16);
            v318 = *(_QWORD *)(v317 + 24);
            if (v98 >= v318 >> 1)
            {
              OUTLINED_FUNCTION_68_6(v318);
              OUTLINED_FUNCTION_17_13();
            }
            v319 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v98, v416, 0, v315);
            MLBoostedTreeRegressor.ModelParameters.maxDepth.modify(v319);
            dispatch thunk of Collection.formIndex(after:)();
            --v309;
          }
          while (v309);
          v103 = v429[0];
        }
        v320 = (*(uint64_t (**)(uint64_t, uint64_t))(v325 + 8))(v341, v343);
        v430 = v103;
        MEMORY[0x24BDAC7A8](v320);
        OUTLINED_FUNCTION_1_30();
        v284 = (void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:);
      }
    }
    _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5(v284);
    OUTLINED_FUNCTION_28_16();
    v321 = OUTLINED_FUNCTION_123_1();
    result = OUTLINED_FUNCTION_50_8(v321);
    goto LABEL_124;
  }
  v253 = v326;
  OUTLINED_FUNCTION_12_22();
  v254 = &demangling cache variable for type metadata for Column<[String : Any]>;
  v255 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypG_8CreateML11MLDataValueO_AItsAE_pTg5020_sSS3key_x5valuetSg8d4ML11fg5OAFs5c136_pIgnrrzo_SSAA_xABtAF_AFtsAG_pIegnrzr_lTRyp_TG503_s8c39ML15MLUntypedColumnVyAC11TabularData0D0l18SDySSxGGKclufcAA11ef34OAGSgKXEfU_AJ_AJti1_J22SgV8U_yp_Tg5Tf3nnnpf_nTf1cn_n;
LABEL_181:
  v251 = v140;
  specialized MLUntypedColumn.init<A>(_:)(v253, v254, (uint64_t)closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply, v255, (uint64_t)&v430);
LABEL_159:
  if (!v251)
  {
    v252 = OUTLINED_FUNCTION_123_1();
    result = OUTLINED_FUNCTION_50_8(v252);
    v103 = v430;
    LOBYTE(v98) = v431;
    goto LABEL_124;
  }
LABEL_160:
  OUTLINED_FUNCTION_123_1();
  v228 = OUTLINED_FUNCTION_120_3();
  return v230(v228, v229);
}

uint64_t specialized DataFrameProtocol.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t result;
  _QWORD v12[2];

  v12[1] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DefaultIndices<DataFrame.Rows>);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DataFrame.Rows();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DataFrame();
  dispatch thunk of DataFrameProtocol.rows.getter();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v5, v9, v6);
  lazy protocol witness table accessor for type DataFrame.Rows and conformance DataFrame.Rows();
  dispatch thunk of Collection.startIndex.getter();
  v10 = &v5[*(int *)(v3 + 40)];
  dispatch thunk of Collection.endIndex.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (*(_QWORD *)v10 < a1)
  {
    __break(1u);
  }
  else
  {
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v5, &demangling cache variable for type metadata for DefaultIndices<DataFrame.Rows>);
    return dispatch thunk of DataFrameProtocol.subscript.getter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DataFrame.Rows and conformance DataFrame.Rows()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DataFrame.Rows and conformance DataFrame.Rows;
  if (!lazy protocol witness table cache variable for type DataFrame.Rows and conformance DataFrame.Rows)
  {
    v1 = type metadata accessor for DataFrame.Rows();
    result = MEMORY[0x22075B938](MEMORY[0x24BDF5D20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataFrame.Rows and conformance DataFrame.Rows);
  }
  return result;
}

uint64_t specialized MLUntypedColumn.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, _QWORD);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  uint64_t v39[4];
  uint64_t v40;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Int]>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[Int]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Int]>, MEMORY[0x24BDF5FA0]);
  result = dispatch thunk of Collection.count.getter();
  v8 = MEMORY[0x24BEE4AF8];
  if (!result)
  {
LABEL_21:
    v39[0] = v8;
    MEMORY[0x24BDAC7A8](result);
    ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
    v29 = v28;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    *(_QWORD *)a2 = ML14_UntypedColumnC_s5Error_pTgm5;
    *(_BYTE *)(a2 + 8) = v29 & 1;
    return result;
  }
  v9 = result;
  v40 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v35 = v40;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v9 < 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v31 = a2;
  v32 = v9;
  v10 = 0;
  v33 = v6;
  v34 = a1;
  while (1)
  {
    if (v10 == v9)
    {
      __break(1u);
      goto LABEL_23;
    }
    v11 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    v13 = *v12;
    swift_bridgeObjectRetain();
    v11(v39, 0);
    if (v13)
      break;
    v22 = 0;
    v23 = 6;
LABEL_16:
    v24 = v35;
    v40 = v35;
    v25 = *(_QWORD *)(v35 + 16);
    v9 = v32;
    if (v25 >= *(_QWORD *)(v35 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v24 = v40;
    }
    ++v10;
    *(_QWORD *)(v24 + 16) = v25 + 1;
    v35 = v24;
    v26 = v24 + 24 * v25;
    *(_QWORD *)(v26 + 32) = v22;
    *(_QWORD *)(v26 + 40) = 0;
    *(_BYTE *)(v26 + 48) = v23;
    v6 = v33;
    a1 = v34;
    result = dispatch thunk of Collection.formIndex(after:)();
    if (v10 == v32)
    {
      a2 = v31;
      v8 = v35;
      goto LABEL_21;
    }
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    v16 = MEMORY[0x24BEE4AF8];
LABEL_15:
    specialized MLDataValue.SequenceType.init<A>(_:)(v16, v39);
    swift_bridgeObjectRelease();
    v22 = v39[0];
    v23 = 3;
    goto LABEL_16;
  }
  v38 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v15 = 0;
  v16 = v38;
  while (1)
  {
    v17 = *(_QWORD *)(v13 + 8 * v15 + 32);
    v39[3] = MEMORY[0x24BEE1768];
    v39[0] = v17;
    MLDataValue.init(fromAny:)((uint64_t)v39, (uint64_t)&v36);
    if (v3)
      break;
    v18 = v36;
    v19 = v37;
    v38 = v16;
    v20 = *(_QWORD *)(v16 + 16);
    if (v20 >= *(_QWORD *)(v16 + 24) >> 1)
    {
      v30 = v36;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v18 = v30;
      v16 = v38;
    }
    ++v15;
    *(_QWORD *)(v16 + 16) = v20 + 1;
    v21 = v16 + 24 * v20;
    *(_OWORD *)(v21 + 32) = v18;
    *(_BYTE *)(v21 + 48) = v19;
    if (v14 == v15)
      goto LABEL_15;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v34);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, _QWORD);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  uint64_t v39[4];
  uint64_t v40;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Float]>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[Float]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Float]>, MEMORY[0x24BDF5FA0]);
  result = dispatch thunk of Collection.count.getter();
  v8 = MEMORY[0x24BEE4AF8];
  if (!result)
  {
LABEL_21:
    v39[0] = v8;
    MEMORY[0x24BDAC7A8](result);
    ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
    v29 = v28;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    *(_QWORD *)a2 = ML14_UntypedColumnC_s5Error_pTgm5;
    *(_BYTE *)(a2 + 8) = v29 & 1;
    return result;
  }
  v9 = result;
  v40 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v35 = v40;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v9 < 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v31 = a2;
  v32 = v9;
  v10 = 0;
  v33 = v6;
  v34 = a1;
  while (1)
  {
    if (v10 == v9)
    {
      __break(1u);
      goto LABEL_23;
    }
    v11 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    v13 = *v12;
    swift_bridgeObjectRetain();
    v11(v39, 0);
    if (v13)
      break;
    v22 = 0;
    v23 = 6;
LABEL_16:
    v24 = v35;
    v40 = v35;
    v25 = *(_QWORD *)(v35 + 16);
    v9 = v32;
    if (v25 >= *(_QWORD *)(v35 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v24 = v40;
    }
    ++v10;
    *(_QWORD *)(v24 + 16) = v25 + 1;
    v35 = v24;
    v26 = v24 + 24 * v25;
    *(_QWORD *)(v26 + 32) = v22;
    *(_QWORD *)(v26 + 40) = 0;
    *(_BYTE *)(v26 + 48) = v23;
    v6 = v33;
    a1 = v34;
    result = dispatch thunk of Collection.formIndex(after:)();
    if (v10 == v32)
    {
      a2 = v31;
      v8 = v35;
      goto LABEL_21;
    }
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    v16 = MEMORY[0x24BEE4AF8];
LABEL_15:
    specialized MLDataValue.SequenceType.init<A>(_:)(v16, v39);
    swift_bridgeObjectRelease();
    v22 = v39[0];
    v23 = 3;
    goto LABEL_16;
  }
  v38 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v15 = 0;
  v16 = v38;
  while (1)
  {
    v17 = *(_DWORD *)(v13 + 4 * v15 + 32);
    v39[3] = MEMORY[0x24BEE14E8];
    LODWORD(v39[0]) = v17;
    MLDataValue.init(fromAny:)((uint64_t)v39, (uint64_t)&v36);
    if (v3)
      break;
    v18 = v36;
    v19 = v37;
    v38 = v16;
    v20 = *(_QWORD *)(v16 + 16);
    if (v20 >= *(_QWORD *)(v16 + 24) >> 1)
    {
      v30 = v36;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v18 = v30;
      v16 = v38;
    }
    ++v15;
    *(_QWORD *)(v16 + 16) = v20 + 1;
    v21 = v16 + 24 * v20;
    *(_OWORD *)(v21 + 32) = v18;
    *(_BYTE *)(v21 + 48) = v19;
    if (v14 == v15)
      goto LABEL_15;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v34);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, _QWORD);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  uint64_t v39[4];
  uint64_t v40;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[Double]>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[Double]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[Double]>, MEMORY[0x24BDF5FA0]);
  result = dispatch thunk of Collection.count.getter();
  v8 = MEMORY[0x24BEE4AF8];
  if (!result)
  {
LABEL_21:
    v39[0] = v8;
    MEMORY[0x24BDAC7A8](result);
    ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
    v29 = v28;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    *(_QWORD *)a2 = ML14_UntypedColumnC_s5Error_pTgm5;
    *(_BYTE *)(a2 + 8) = v29 & 1;
    return result;
  }
  v9 = result;
  v40 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v35 = v40;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v9 < 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v31 = a2;
  v32 = v9;
  v10 = 0;
  v33 = v6;
  v34 = a1;
  while (1)
  {
    if (v10 == v9)
    {
      __break(1u);
      goto LABEL_23;
    }
    v11 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    v13 = *v12;
    swift_bridgeObjectRetain();
    v11(v39, 0);
    if (v13)
      break;
    v22 = 0;
    v23 = 6;
LABEL_16:
    v24 = v35;
    v40 = v35;
    v25 = *(_QWORD *)(v35 + 16);
    v9 = v32;
    if (v25 >= *(_QWORD *)(v35 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v24 = v40;
    }
    ++v10;
    *(_QWORD *)(v24 + 16) = v25 + 1;
    v35 = v24;
    v26 = v24 + 24 * v25;
    *(_QWORD *)(v26 + 32) = v22;
    *(_QWORD *)(v26 + 40) = 0;
    *(_BYTE *)(v26 + 48) = v23;
    v6 = v33;
    a1 = v34;
    result = dispatch thunk of Collection.formIndex(after:)();
    if (v10 == v32)
    {
      a2 = v31;
      v8 = v35;
      goto LABEL_21;
    }
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    v16 = MEMORY[0x24BEE4AF8];
LABEL_15:
    specialized MLDataValue.SequenceType.init<A>(_:)(v16, v39);
    swift_bridgeObjectRelease();
    v22 = v39[0];
    v23 = 3;
    goto LABEL_16;
  }
  v38 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v15 = 0;
  v16 = v38;
  while (1)
  {
    v17 = *(_QWORD *)(v13 + 8 * v15 + 32);
    v39[3] = MEMORY[0x24BEE13C8];
    v39[0] = v17;
    MLDataValue.init(fromAny:)((uint64_t)v39, (uint64_t)&v36);
    if (v3)
      break;
    v18 = v36;
    v19 = v37;
    v38 = v16;
    v20 = *(_QWORD *)(v16 + 16);
    if (v20 >= *(_QWORD *)(v16 + 24) >> 1)
    {
      v30 = v36;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v18 = v30;
      v16 = v38;
    }
    ++v15;
    *(_QWORD *)(v16 + 16) = v20 + 1;
    v21 = v16 + 24 * v20;
    *(_OWORD *)(v21 + 32) = v18;
    *(_BYTE *)(v21 + 48) = v19;
    if (v14 == v15)
      goto LABEL_15;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v34);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, _QWORD);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40[4];
  uint64_t v41;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<[String]>);
  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(&lazy protocol witness table cache variable for type Column<[String]> and conformance Column<A>, &demangling cache variable for type metadata for Column<[String]>, MEMORY[0x24BDF5FA0]);
  result = dispatch thunk of Collection.count.getter();
  v8 = MEMORY[0x24BEE4AF8];
  if (!result)
  {
LABEL_21:
    v40[0] = v8;
    MEMORY[0x24BDAC7A8](result);
    ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
    v30 = v29;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    *(_QWORD *)a2 = ML14_UntypedColumnC_s5Error_pTgm5;
    *(_BYTE *)(a2 + 8) = v30 & 1;
    return result;
  }
  v9 = result;
  v41 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v36 = v41;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v9 < 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v32 = a2;
  v33 = v9;
  v10 = 0;
  v34 = v6;
  v35 = a1;
  while (1)
  {
    if (v10 == v9)
    {
      __break(1u);
      goto LABEL_23;
    }
    v11 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
    v13 = *v12;
    swift_bridgeObjectRetain();
    v11(v40, 0);
    if (v13)
      break;
    v23 = 0;
    v24 = 6;
LABEL_16:
    v25 = v36;
    v41 = v36;
    v26 = *(_QWORD *)(v36 + 16);
    v9 = v33;
    if (v26 >= *(_QWORD *)(v36 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v25 = v41;
    }
    ++v10;
    *(_QWORD *)(v25 + 16) = v26 + 1;
    v36 = v25;
    v27 = v25 + 24 * v26;
    *(_QWORD *)(v27 + 32) = v23;
    *(_QWORD *)(v27 + 40) = 0;
    *(_BYTE *)(v27 + 48) = v24;
    v6 = v34;
    a1 = v35;
    result = dispatch thunk of Collection.formIndex(after:)();
    if (v10 == v33)
    {
      a2 = v32;
      v8 = v36;
      goto LABEL_21;
    }
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    v15 = MEMORY[0x24BEE4AF8];
LABEL_15:
    specialized MLDataValue.SequenceType.init<A>(_:)(v15, v40);
    swift_bridgeObjectRelease();
    v23 = v40[0];
    v24 = 3;
    goto LABEL_16;
  }
  v39 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v15 = v39;
  v16 = (uint64_t *)(v13 + 40);
  while (1)
  {
    v17 = *(v16 - 1);
    v18 = *v16;
    v40[3] = MEMORY[0x24BEE0D00];
    v40[0] = v17;
    v40[1] = v18;
    swift_bridgeObjectRetain_n();
    MLDataValue.init(fromAny:)((uint64_t)v40, (uint64_t)&v37);
    if (v3)
      break;
    swift_bridgeObjectRelease();
    v19 = v37;
    v20 = v38;
    v39 = v15;
    v21 = *(_QWORD *)(v15 + 16);
    if (v21 >= *(_QWORD *)(v15 + 24) >> 1)
    {
      v31 = v37;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v19 = v31;
      v15 = v39;
    }
    v16 += 2;
    *(_QWORD *)(v15 + 16) = v21 + 1;
    v22 = v15 + 24 * v21;
    *(_OWORD *)(v22 + 32) = v19;
    *(_BYTE *)(v22 + 48) = v20;
    if (!--v14)
      goto LABEL_15;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v35);
}

void specialized MLUntypedColumn.init<A>(_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, void (*a4)(__int128 *__return_ptr, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  void (*v5)(_QWORD, _QWORD);
  void (*v6)(_QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *__return_ptr, uint64_t *);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v23;
  char v24;
  __int128 v25;
  _QWORD v29[4];
  __int128 v30;
  char v31;
  uint64_t v32;

  v6 = v5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_102_1(v8, v9, MEMORY[0x24BDF5FA0]);
  v11 = v10;
  v12 = dispatch thunk of Collection.count.getter();
  v13 = MEMORY[0x24BEE4AF8];
  if (!v12)
  {
LABEL_7:
    v29[0] = v13;
    v21 = (void (*)(uint64_t *__return_ptr, uint64_t *))MEMORY[0x24BDAC7A8](a3);
    ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5(v21);
    v24 = v23;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_76_4();
    *(_QWORD *)a5 = ML14_UntypedColumnC_s5Error_pTgm5;
    *(_BYTE *)(a5 + 8) = v24 & 1;
LABEL_9:
    OUTLINED_FUNCTION_7();
    return;
  }
  v14 = v12;
  v32 = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_11_22();
  v13 = v32;
  dispatch thunk of Collection.startIndex.getter();
  if ((v14 & 0x8000000000000000) == 0)
  {
    while (1)
    {
      OUTLINED_FUNCTION_117_1();
      OUTLINED_FUNCTION_95_3();
      v5(v29, 0);
      v5 = v6;
      a4(&v30, a1);
      if (v6)
        break;
      v15 = v11;
      v16 = a1;
      OUTLINED_FUNCTION_30();
      v17 = v30;
      v18 = v31;
      v32 = v13;
      v19 = *(_QWORD *)(v13 + 16);
      if (v19 >= *(_QWORD *)(v13 + 24) >> 1)
      {
        v25 = v30;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v17 = v25;
        v13 = v32;
      }
      *(_QWORD *)(v13 + 16) = v19 + 1;
      v20 = v13 + 24 * v19;
      *(_OWORD *)(v20 + 32) = v17;
      *(_BYTE *)(v20 + 48) = v18;
      a1 = v16;
      v11 = v15;
      dispatch thunk of Collection.formIndex(after:)();
      --v14;
      v6 = 0;
      if (!v14)
        goto LABEL_7;
    }
    swift_release();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_76_4();
    goto LABEL_9;
  }
  __break(1u);
}

void specialized MLUntypedColumn.init<A>(_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t (*a4)(uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, _QWORD);
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *__return_ptr, uint64_t *);
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v26;
  char v27;
  uint64_t v31;
  _QWORD v32[4];
  uint64_t v33;

  v6 = v5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_102_1(v8, v9, MEMORY[0x24BDF5FA0]);
  v10 = dispatch thunk of Collection.count.getter();
  v11 = MEMORY[0x24BEE4AF8];
  if (!v10)
  {
LABEL_14:
    v32[0] = v11;
    v24 = (void (*)(uint64_t *__return_ptr, uint64_t *))MEMORY[0x24BDAC7A8](a3);
    ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5(v24);
    v27 = v26;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_86_5(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8));
    *(_QWORD *)a5 = ML14_UntypedColumnC_s5Error_pTgm5;
    *(_BYTE *)(a5 + 8) = v27 & 1;
    goto LABEL_16;
  }
  v12 = v10;
  v33 = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_11_22();
  v11 = v33;
  dispatch thunk of Collection.startIndex.getter();
  if (v12 < 0)
  {
    __break(1u);
    OUTLINED_FUNCTION_99_4();
    __break(1u);
    return;
  }
  v31 = a1;
  while (1)
  {
    v13 = v8;
    v14 = (void (*)(_QWORD *, _QWORD))OUTLINED_FUNCTION_117_1();
    v16 = *v15;
    OUTLINED_FUNCTION_199();
    v14(v32, 0);
    if (v16)
      break;
    v19 = 0;
    v20 = 6;
LABEL_11:
    v33 = v11;
    v22 = *(_QWORD *)(v11 + 16);
    if (v22 >= *(_QWORD *)(v11 + 24) >> 1)
    {
      OUTLINED_FUNCTION_17_13();
      v11 = v33;
    }
    *(_QWORD *)(v11 + 16) = v22 + 1;
    v23 = v11 + 24 * v22;
    *(_QWORD *)(v23 + 32) = v19;
    *(_QWORD *)(v23 + 40) = 0;
    *(_BYTE *)(v23 + 48) = v20;
    a1 = v31;
    v8 = v13;
    dispatch thunk of Collection.formIndex(after:)();
    if (!--v12)
      goto LABEL_14;
  }
  v17 = a4(v16);
  if (!v6)
  {
    if (*(_QWORD *)(v17 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, MLDataValue>);
      v18 = OUTLINED_FUNCTION_96_4();
    }
    else
    {
      v18 = MEMORY[0x24BEE4B00];
    }
    v32[0] = v18;
    v21 = OUTLINED_FUNCTION_189();
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v21, 1, v32);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_80();
    v19 = v32[0];
    v20 = 4;
    goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
LABEL_16:
  OUTLINED_FUNCTION_7();
}

void closure #1 in closure #10 in MLUntypedColumn.init(_:convertArraysToShapedArrays:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  __int128 *v7;
  _BYTE v8[32];
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _BYTE v17[40];

  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a3, (uint64_t)&v10, &demangling cache variable for type metadata for (key: AnyHashable, value: Any?)?);
  if (!*((_QWORD *)&v11 + 1))
  {
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v10, &demangling cache variable for type metadata for (key: AnyHashable, value: Any?)?);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 6;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
LABEL_8:
    *(_BYTE *)(a2 + 16) = 6;
    return;
  }
  v15[0] = v10;
  v15[1] = v11;
  v16 = v12;
  outlined init with take of Any?((uint64_t)&v13, (uint64_t)v17);
  outlined init with copy of AnyHashable((uint64_t)v15, (uint64_t)&v10);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v17, (uint64_t)&v13, &demangling cache variable for type metadata for Any?);
  if (!v14)
  {
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v13, &demangling cache variable for type metadata for Any?);
    outlined destroy of AnyHashable((uint64_t)&v10);
    outlined init with copy of AnyHashable((uint64_t)v15, (uint64_t)&v10);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v17, (uint64_t)&v13, &demangling cache variable for type metadata for Any?);
    AnyHashable.base.getter();
    outlined destroy of AnyHashable((uint64_t)&v10);
    MLDataValue.init(fromAny:)((uint64_t)v9, a1);
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v15, &demangling cache variable for type metadata for (key: AnyHashable, value: Any?));
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v13, &demangling cache variable for type metadata for Any?);
    if (v3)
      return;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    goto LABEL_8;
  }
  outlined init with take of Any(&v13, v9);
  outlined destroy of AnyHashable((uint64_t)&v10);
  outlined init with copy of AnyHashable((uint64_t)v15, (uint64_t)&v10);
  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v17, (uint64_t)&v13, &demangling cache variable for type metadata for Any?);
  AnyHashable.base.getter();
  outlined destroy of AnyHashable((uint64_t)&v10);
  MLDataValue.init(fromAny:)((uint64_t)v8, a1);
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v15, &demangling cache variable for type metadata for (key: AnyHashable, value: Any?));
    v6 = &demangling cache variable for type metadata for Any?;
    v7 = &v13;
  }
  else
  {
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v13, &demangling cache variable for type metadata for Any?);
    outlined init with copy of Any((uint64_t)v9, (uint64_t)&v10);
    MLDataValue.init(fromAny:)((uint64_t)&v10, a2);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
    v6 = &demangling cache variable for type metadata for (key: AnyHashable, value: Any?);
    v7 = v15;
  }
  outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v7, v6);
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[4];
  uint64_t v15[4];
  _QWORD v16[2];
  char v17;
  uint64_t v18;

  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 16);
    v5 = MEMORY[0x24BEE4AF8];
    if (v4)
    {
      v18 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v6 = v3 + 32;
      v13 = MEMORY[0x24BEE4AD8] + 8;
      while (1)
      {
        outlined init with copy of Any(v6, (uint64_t)v15);
        v14[3] = v13;
        v14[0] = swift_allocObject();
        outlined init with copy of Any((uint64_t)v15, v14[0] + 16);
        MLDataValue.init(fromAny:)((uint64_t)v14, (uint64_t)v16);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
        if (v2)
          return swift_release();
        v7 = v16[0];
        v8 = v16[1];
        v9 = v17;
        v5 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v5 = v18;
        }
        v10 = *(_QWORD *)(v5 + 16);
        if (v10 >= *(_QWORD *)(v5 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v5 = v18;
        }
        *(_QWORD *)(v5 + 16) = v10 + 1;
        v11 = v5 + 24 * v10;
        *(_QWORD *)(v11 + 32) = v7;
        *(_QWORD *)(v11 + 40) = v8;
        *(_BYTE *)(v11 + 48) = v9;
        v6 += 32;
        if (!--v4)
          goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      result = specialized MLDataValue.SequenceType.init<A>(_:)(v5, v15);
      *(_QWORD *)a2 = v15[0];
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 3;
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 6;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17[4];
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  if (!result)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 6;
    return result;
  }
  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
  {
LABEL_13:
    result = specialized MLDataValue.SequenceType.init<A>(_:)(v5, v17);
    *(_QWORD *)a2 = v17[0];
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 3;
    return result;
  }
  v21 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v6 = v3 + 32;
  v13 = MEMORY[0x24BEE4AD8] + 8;
  while (1)
  {
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v6, (uint64_t)v17, &demangling cache variable for type metadata for Any?);
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v17, (uint64_t)&v14, &demangling cache variable for type metadata for Any?);
    if (!v15)
    {
      outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v14, &demangling cache variable for type metadata for Any?);
      v8 = 0;
      v7 = 0;
      v18 = 0;
      v19 = 0;
      v9 = 6;
      goto LABEL_8;
    }
    outlined init with take of Any(&v14, v16);
    v15 = v13;
    *(_QWORD *)&v14 = swift_allocObject();
    outlined init with copy of Any((uint64_t)v16, v14 + 16);
    MLDataValue.init(fromAny:)((uint64_t)&v14, (uint64_t)&v18);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
    if (v2)
      break;
    v7 = v18;
    v8 = v19;
    v9 = v20;
LABEL_8:
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v17, &demangling cache variable for type metadata for Any?);
    v5 = v21;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v5 = v21;
    }
    v10 = *(_QWORD *)(v5 + 16);
    if (v10 >= *(_QWORD *)(v5 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v5 = v21;
    }
    *(_QWORD *)(v5 + 16) = v10 + 1;
    v11 = v5 + 24 * v10;
    *(_QWORD *)(v11 + 32) = v7;
    *(_QWORD *)(v11 + 40) = v8;
    *(_BYTE *)(v11 + 48) = v9;
    v6 += 32;
    if (!--v4)
      goto LABEL_13;
  }
  outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v17, &demangling cache variable for type metadata for Any?);
  return swift_release();
}

uint64_t specialized MLDataValue.SequenceType.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = MEMORY[0x22075BB18](0);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x21AE94EF4);
  }
  v4 = v3;
  type metadata accessor for CMLSequence();
  v5 = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v5 + 16) = v4;
  *(_BYTE *)(v5 + 24) = 1;
  if (*(_QWORD *)(a1 + 16))
    __asm { BR              X8 }
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

void specialized closure #1 in closure #1 in MLUntypedColumn.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[2];
  _BYTE v16[32];

  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a3, (uint64_t)&v11, &demangling cache variable for type metadata for (key: String, value: Any?)?);
  v6 = v12;
  if (v12)
  {
    v7 = v11;
    v15[0] = v11;
    v15[1] = v12;
    outlined init with take of Any?((uint64_t)&v13, (uint64_t)v16);
    v11 = v7;
    v12 = v6;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v16, (uint64_t)&v13, &demangling cache variable for type metadata for Any?);
    if (v14)
    {
      outlined init with take of Any(&v13, v10);
      v11 = v7;
      v12 = v6;
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v16, (uint64_t)&v13, &demangling cache variable for type metadata for Any?);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = 2;
      v9[3] = MEMORY[0x24BEE4AD8] + 8;
      v9[0] = swift_allocObject();
      outlined init with copy of Any((uint64_t)v10, v9[0] + 16);
      swift_bridgeObjectRetain();
      MLDataValue.init(fromAny:)((uint64_t)v9, a2);
      if (v3)
        swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
      outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v15, &demangling cache variable for type metadata for (key: String, value: Any?));
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v13, &demangling cache variable for type metadata for Any?);
      v11 = v7;
      v12 = v6;
      outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>((uint64_t)v16, (uint64_t)&v13, &demangling cache variable for type metadata for Any?);
      outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v15, &demangling cache variable for type metadata for (key: String, value: Any?));
      v8 = v12;
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = 2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 6;
    }
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v13, &demangling cache variable for type metadata for Any?);
  }
  else
  {
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)&v11, &demangling cache variable for type metadata for (key: String, value: Any?)?);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 6;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 6;
  }
}

char *specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(char *result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if ((uint64_t)(result + 1) > (uint64_t)(v2 >> 1))
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), (int64_t)(result + 1), 1);
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  int v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  char v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  double v28;
  id v29;
  Swift::String v30;
  void *v32;
  void *v33;
  char v34;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    return;
  }
  v5 = 0;
  v6 = (char *)(a1 + 72);
  while (1)
  {
    if (v5 >= *(_QWORD *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    v7 = *(v6 - 24);
    v8 = *v6;
    v10 = (void *)*((_QWORD *)v6 - 2);
    v9 = (void *)*((_QWORD *)v6 - 1);
    v11 = (void *)*((_QWORD *)v6 - 5);
    v12 = (void *)*((_QWORD *)v6 - 4);
    outlined copy of MLDataValue(v11, v12, *(v6 - 24));
    outlined copy of MLDataValue(v10, v9, v8);
    if (v7 == 255)
      goto LABEL_18;
    v32 = v10;
    v33 = v9;
    v34 = v8;
    v13 = (_QWORD *)*a3;
    v15 = OUTLINED_FUNCTION_87_2();
    v16 = v13[2];
    v17 = (v14 & 1) == 0;
    if (__OFADD__(v16, v17))
      goto LABEL_21;
    v18 = v14;
    if (v13[3] < v16 + v17)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLDataValue, MLDataValue>);
      _NativeDictionary.copy()();
      if ((v18 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    v22 = v21[6] + 24 * v15;
    *(_QWORD *)v22 = v11;
    *(_QWORD *)(v22 + 8) = v12;
    *(_BYTE *)(v22 + 16) = v7;
    v23 = v21[7] + 24 * v15;
    *(_QWORD *)v23 = v32;
    *(_QWORD *)(v23 + 8) = v33;
    *(_BYTE *)(v23 + 16) = v34;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_22;
    ++v5;
    v21[2] = v26;
    v6 += 48;
    a2 = 1;
    if (v4 == v5)
      goto LABEL_18;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  v19 = OUTLINED_FUNCTION_87_2();
  if ((v18 & 1) != (v20 & 1))
    goto LABEL_23;
  v15 = v19;
  if ((v18 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v27 = (void *)OUTLINED_FUNCTION_49_0();
  swift_willThrow(v28);
  v29 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    OUTLINED_FUNCTION_30();
    outlined consume of MLDataValue(v32, v33, v34);
    outlined consume of MLDataValue(v11, v12, v7);
    OUTLINED_FUNCTION_30();

    return;
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v30._object = (void *)0x800000021AFF4630;
  v30._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v30);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_152(39);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_21AE956F4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocObject();
}

void _s8CreateML8CMLTableC6column4nameAA9CMLColumnCSS_tKFAGSPys4Int8VGKXEfU_TA_0(uint64_t a1)
{
  OUTLINED_FUNCTION_70_7(a1);
}

void OUTLINED_FUNCTION_2_33(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  a1[2] = v2;
  outlined consume of Result<_DataTable, Error>(v1, 0);
  outlined copy of Result<_DataTable, Error>(a1, 0);
  _UntypedColumn.type.getter((_BYTE *)(v3 - 112));
}

void OUTLINED_FUNCTION_3_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 1;
  outlined consume of Result<_DataTable, Error>(*(id *)(v4 - 344), *(_DWORD *)(v4 - 180));
}

void OUTLINED_FUNCTION_4_30()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_5_24()
{
  void *v0;

  outlined copy of Result<_DataTable, Error>(v0, 0);
  outlined copy of Result<_DataTable, Error>(v0, 0);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_7_23()
{
  void *v0;
  double v1;

  outlined copy of Result<_DataTable, Error>(v0, 1);
  outlined copy of Result<_DataTable, Error>(v0, 1);
  return swift_willThrow(v1);
}

uint64_t OUTLINED_FUNCTION_8_24()
{
  void *v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v0, 0);
  outlined copy of Result<_DataTable, Error>(v1, 0);
  return CMLColumn.size.getter();
}

void OUTLINED_FUNCTION_9_23()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)(v0 - 344), *(_DWORD *)(v0 - 180));
}

void OUTLINED_FUNCTION_11_22()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_12_22()
{
  return AnyColumn.assumingType<A>(_:)();
}

void OUTLINED_FUNCTION_13_28()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_14_18(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;

  *(_QWORD *)(v4 - 112) = a1;
  *(_QWORD *)(v4 - 104) = (v1 - 32) | 0x8000000000000000;
  v5._countAndFlagsBits = v3;
  v5._object = v2;
  String.append(_:)(v5);
}

uint64_t OUTLINED_FUNCTION_16_18()
{
  return swift_dynamicCastMetatype();
}

void OUTLINED_FUNCTION_17_13()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_18_15()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0;
  *(_QWORD *)(v0 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
}

uint64_t OUTLINED_FUNCTION_19_18()
{
  return dispatch thunk of Collection.subscript.read();
}

_QWORD *OUTLINED_FUNCTION_20_13(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return specialized String.withCString<A>(_:)(a1, v1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_22_13@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_23_14()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_24_15()
{
  return AnyColumn.assumingType<A>(_:)();
}

void OUTLINED_FUNCTION_26_17()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 232) = v0;
}

void OUTLINED_FUNCTION_27_20()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_28_16()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_29_12()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_30_13()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t OUTLINED_FUNCTION_33_13()
{
  return swift_dynamicCastMetatype();
}

uint64_t OUTLINED_FUNCTION_35_9()
{
  return Column.init<A>(name:contents:)();
}

uint64_t OUTLINED_FUNCTION_36_9()
{
  return AnyColumn.assumingType<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_41_7()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 232, 0);
}

uint64_t OUTLINED_FUNCTION_42_8()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_43_9()
{
  Swift::String v0;

  v0._countAndFlagsBits = 34;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_44_10()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 16) = v4;
  v6 = v3 + 24 * v1;
  *(_QWORD *)(v6 + 32) = v5;
  *(_QWORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 48) = v2;
  return v0 + 840;
}

uint64_t OUTLINED_FUNCTION_46_6()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t OUTLINED_FUNCTION_47_9()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_50_8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_51_9(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

BOOL OUTLINED_FUNCTION_52_7@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

__n128 OUTLINED_FUNCTION_53_11(__n128 *a1)
{
  __n128 *v1;
  uint64_t v2;
  __n128 result;

  result = v1[39];
  a1[1] = result;
  a1[2].n128_u64[0] = *(_QWORD *)(v2 + 16);
  return result;
}

uint64_t OUTLINED_FUNCTION_54_6()
{
  return DataFrame.append<A>(column:)();
}

CreateML::MLDataValue::MultiArrayType OUTLINED_FUNCTION_55_8(MLMultiArray a1)
{
  return MLDataValue.MultiArrayType.init(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_56_7()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t OUTLINED_FUNCTION_57_5()
{
  return MLMultiArray.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_59_8()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_60_7(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_62_10(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 640) = a1;
  return swift_dynamicCastMetatype();
}

uint64_t OUTLINED_FUNCTION_63_9()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 232, 0);
}

uint64_t OUTLINED_FUNCTION_65_10()
{
  return DataFrame.append<A>(column:)();
}

uint64_t OUTLINED_FUNCTION_66_7()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 16) = v4;
  v5 = v3 + 24 * v2;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v0 + 624);
  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = v1;
  return v0 + 840;
}

uint64_t OUTLINED_FUNCTION_67_6()
{
  uint64_t v0;

  return v0;
}

BOOL OUTLINED_FUNCTION_68_6@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_69_5(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void OUTLINED_FUNCTION_70_7(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CMLTable.column(name:)(a1, v1);
}

unint64_t OUTLINED_FUNCTION_72_5()
{
  return lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
}

uint64_t OUTLINED_FUNCTION_75_9()
{
  return MLMultiArray.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_76_4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_79_5(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(*(_QWORD *)(v1 - 232), a1);
}

uint64_t OUTLINED_FUNCTION_80_6()
{
  return Column.init<A>(name:contents:)();
}

uint64_t OUTLINED_FUNCTION_81_8@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;

  return a1(v1 - 232, 0);
}

uint64_t OUTLINED_FUNCTION_82_4()
{
  uint64_t v0;

  return v0 - 232;
}

void OUTLINED_FUNCTION_83_6()
{
  uint64_t v0;

  *(_DWORD *)(v0 - 180) = 0;
}

uint64_t OUTLINED_FUNCTION_84_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_86_5@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_87_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_89_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_93_2()
{
  return dispatch thunk of Collection.subscript.read();
}

id OUTLINED_FUNCTION_94_3()
{
  void *v0;
  void *v1;

  return outlined copy of MLDataValue(v0, v1, 2);
}

uint64_t OUTLINED_FUNCTION_95_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_96_4()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t OUTLINED_FUNCTION_99_4()
{
  return swift_unexpectedError();
}

unint64_t OUTLINED_FUNCTION_100_3()
{
  return type metadata accessor for MLMultiArray();
}

uint64_t OUTLINED_FUNCTION_101_5()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_102_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t *v4;

  lazy protocol witness table accessor for type MLTrainingSession<MLImageClassifier>.Metadata and conformance MLTrainingSession<A>.Metadata(v3, v4, a3);
}

void OUTLINED_FUNCTION_103_4()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 1);
}

uint64_t OUTLINED_FUNCTION_105_2@<X0>(uint64_t a1@<X8>)
{
  char v1;
  uint64_t v2;

  *(_BYTE *)(a1 + 48) = v1;
  return v2 + 840;
}

uint64_t OUTLINED_FUNCTION_106_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_108_3()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t OUTLINED_FUNCTION_109_3()
{
  return CMLSequence.size.getter();
}

void OUTLINED_FUNCTION_110_3()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)(v0 - 104), *(_BYTE *)(v0 - 96));
}

uint64_t OUTLINED_FUNCTION_111_2()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_112_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_113_2()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t OUTLINED_FUNCTION_116_3(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_117_1()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t OUTLINED_FUNCTION_118_1()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t OUTLINED_FUNCTION_120_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_121_3()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_125_3()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_127_2()
{
  return MLShapedArray.init<A>(scalars:shape:)();
}

uint64_t OUTLINED_FUNCTION_128_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 640) = a2;
  return dispatch thunk of Collection.count.getter();
}

uint64_t MLDataColumn.dropDuplicates()(uint64_t a1)
{
  return MLDataColumn.dropDuplicates()(a1, specialized handling<A, B>(_:_:));
}

uint64_t Array<A>.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x24BDAC7A8](a1);
  OUTLINED_FUNCTION_91_1();
  v6 = *(id *)v5;
  if ((*(_BYTE *)(v5 + 8) & 1) != 0)
  {
    outlined consume of Result<_DataTable, Error>(*(id *)v5, 1);
    OUTLINED_FUNCTION_36_10();
    return static Array._allocateUninitialized(_:)();
  }
  v7 = Array.init()();
  v16 = v7;
  v8 = OUTLINED_FUNCTION_36_10();
  v11 = type metadata accessor for MLDataColumn(v8, v9, a3, v10);
  result = MLDataColumn.count.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    v13 = result;
    if (result)
    {
      v14 = 0;
      do
      {
        v15 = v14 + 1;
        MLDataColumn.subscript.getter(v14, v11, v3);
        OUTLINED_FUNCTION_36_10();
        type metadata accessor for Array();
        Array.append(_:)();
        v14 = v15;
      }
      while (v13 != v15);
      OUTLINED_FUNCTION_102(v6);
      return v16;
    }
    else
    {
      OUTLINED_FUNCTION_102(v6);
    }
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t MLDataColumn.dropMissing()(uint64_t a1)
{
  return MLDataColumn.dropDuplicates()(a1, specialized handling<A, B>(_:_:));
}

uint64_t MLDataColumn.count.getter()
{
  uint64_t v0;
  void *v2;
  uint64_t v3;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return -1;
  v2 = *(void **)v0;
  OUTLINED_FUNCTION_12_3(*(void **)v0);
  v3 = CMLColumn.size.getter();
  outlined consume of Result<_DataTable, Error>(v2, 0);
  return v3;
}

void MLDataColumn.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_28_17();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_8_25(v9, v10);
  MLUntypedColumn.init<A>(repeating:count:)(v4, a2, a3, (uint64_t)&v10);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, a3);
  OUTLINED_FUNCTION_26_18();
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLDataColumn.init(from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

void MLDataColumn.element(at:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  char v5;
  void *v7;
  __int128 v8;
  char v9;

  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    v4 = 0uLL;
    v5 = 6;
  }
  else
  {
    v7 = *(void **)v2;
    OUTLINED_FUNCTION_12_3(v7);
    _UntypedColumn.valueAtIndex(index:)(a1, (uint64_t)&v8);
    OUTLINED_FUNCTION_102(v7);
    v4 = v8;
    v5 = v9;
  }
  v8 = v4;
  v9 = v5;
  (*(void (**)(__int128 *))(*(_QWORD *)(a2 + 24) + 16))(&v8);
  OUTLINED_FUNCTION_12_23();
}

void MLDataColumn.init<A>(column:type:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(void **)a1;
  v4 = *(_BYTE *)(a1 + 8);
  MLDataColumn.map<A>(to:)();
  outlined consume of Result<_DataTable, Error>(v3, v4);
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v6;
}

void MLDataColumn.map<A>(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_14();
  MLUntypedColumn.map<A>(to:)(v0, v1, v2);
  OUTLINED_FUNCTION_23_7();
}

BOOL MLDataColumn.isEmpty.getter()
{
  return MLDataColumn.count.getter() < 1;
}

id MLDataColumn.error.getter()
{
  uint64_t v0;
  id v1;

  if (*(_BYTE *)(v0 + 8) != 1)
    return 0;
  v1 = *(id *)v0;
  outlined copy of Result<_DataTable, Error>(*(id *)v0, 1);
  return v1;
}

BOOL MLDataColumn.isValid.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 8) & 1) == 0;
}

void MLDataColumn.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_28_17();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_8_25(v7, v8);
  MLUntypedColumn.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, a3);
  OUTLINED_FUNCTION_26_18();
  OUTLINED_FUNCTION_8_0();
}

void MLDataColumn.init(repeating:count:)(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  __int128 v6;
  char v7;

  v5 = *((_BYTE *)a1 + 16);
  v6 = *a1;
  v7 = v5;
  type metadata accessor for _UntypedColumn();
  OUTLINED_FUNCTION_0_20();
  *(_QWORD *)a3 = _UntypedColumn.init(repeating:count:)((uint64_t)&v6, a2);
  *(_BYTE *)(a3 + 8) = 0;
  OUTLINED_FUNCTION_12_23();
}

double MLDataColumn.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v2 = OUTLINED_FUNCTION_49_0();
  *(_QWORD *)v3 = 0xD00000000000001DLL;
  *(_QWORD *)(v3 + 8) = 0x800000021AFF46A0;
  result = 0.0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_BYTE *)(v3 + 48) = 1;
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

void MLDataColumn.append(contentsOf:)()
{
  void **v0;
  uint64_t v1;
  void **v2;
  void *v3;
  char v4;
  id v5;
  void *v6;
  void *v7;

  OUTLINED_FUNCTION_31_15();
  v2 = v0;
  v3 = *v0;
  if (((_BYTE)v2[1] & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = *(id *)v1;
    if ((*(_BYTE *)(v1 + 8) & 1) != 0)
    {
      v4 = 1;
      outlined copy of Result<_DataTable, Error>(*(id *)v1, 1);
      OUTLINED_FUNCTION_102(v3);
      v3 = v5;
    }
    else
    {
      outlined copy of Result<_DataTable, Error>(*(id *)v1, 0);
      OUTLINED_FUNCTION_12_3(v3);
      _UntypedColumn.appending(contentsOf:)((uint64_t)v5);
      v7 = v6;
      outlined consume of Result<_DataTable, Error>(v5, 0);
      outlined consume of Result<_DataTable, Error>(v3, 0);
      OUTLINED_FUNCTION_102(v3);
      v3 = v7;
      v4 = 0;
    }
  }
  *v2 = v3;
  *((_BYTE *)v2 + 8) = v4;
  OUTLINED_FUNCTION_4_31();
}

void MLDataColumn.subscript.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  OUTLINED_FUNCTION_2_34();
  OUTLINED_FUNCTION_12_15(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  OUTLINED_FUNCTION_12_23();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  OUTLINED_FUNCTION_2_34();
  OUTLINED_FUNCTION_12_15(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  OUTLINED_FUNCTION_12_23();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  OUTLINED_FUNCTION_41_8();
  MLUntypedColumn.subscript.getter(v0, v1, (uint64_t)&v12);
  OUTLINED_FUNCTION_34_15(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  OUTLINED_FUNCTION_46_7();
}

{
  if (MLDataColumn.count.getter() < 0)
  {
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    MLDataColumn.subscript.getter();
    OUTLINED_FUNCTION_19_19();
  }
}

uint64_t MLDataColumn.map<A>(skipUndefined:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  void *v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t *v21;
  char v22;
  uint64_t v23;

  v13 = *(void **)v6;
  v14 = *(_BYTE *)(v6 + 8);
  v15 = (_QWORD *)swift_allocObject();
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_QWORD *)(a3 + 24);
  v15[2] = v16;
  v15[3] = a4;
  v15[4] = v17;
  v15[5] = a5;
  v15[6] = a1;
  v15[7] = a2;
  if ((v14 & 1) != 0)
  {
    v23 = (uint64_t)v13;
    outlined copy of Result<_DataTable, Error>(v13, 1);
    swift_retain();
    outlined copy of Result<_DataTable, Error>(v13, 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v18 = _getErrorEmbeddedNSError<A>(_:)();
    if (v18)
    {
      v19 = v18;
      outlined consume of Result<_DataTable, Error>(v13, 1);
    }
    else
    {
      v19 = swift_allocError();
      *v21 = v23;
    }
    v22 = 1;
    outlined consume of Result<_DataTable, Error>(v13, 1);
    result = swift_release();
  }
  else
  {
    swift_retain();
    outlined copy of Result<_DataTable, Error>(v13, 0);
    closure #2 in MLDataColumn.map<A>(skipUndefined:_:)((uint64_t)partial apply for closure #1 in MLDataColumn.map<A>(skipUndefined:_:), (uint64_t)v15, a4, a5, &v23);
    outlined consume of Result<_DataTable, Error>(v13, 0);
    result = swift_release();
    v22 = 0;
    v19 = v23;
  }
  *(_QWORD *)a6 = v19;
  *(_BYTE *)(a6 + 8) = v22;
  return result;
}

uint64_t closure #1 in MLDataColumn.map<A>(skipUndefined:_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *);

  v25 = a7;
  v26 = a3;
  v23 = a6;
  v27 = a2;
  v24 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v24 - 8);
  v10 = MEMORY[0x24BDAC7A8](v24);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v22 - v18;
  if ((CMLFeatureValue.isUndefined.getter() & 1) != 0)
    __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, a4);
  else
    static MLDataValueConvertible.makeInstance(featureValue:)(a4, v23, (uint64_t)v19);
  v27(v19);
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v24);
    type metadata accessor for CMLFeatureValue();
    v20 = CMLFeatureValue.__allocating_init()();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, a5);
    v20 = MLDataValueConvertible.featureValue.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a5);
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  return v20;
}

void closure #2 in MLDataColumn.map<A>(skipUndefined:_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X6>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 8))(&v9, a3, a4);
  _UntypedColumn.map(_:skipUndefined:outputType:)(a1, a2, 0, &v9);
  *a5 = v8;
}

uint64_t MLDataColumn.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return MLDataColumn.map<A>(_:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in MLDataColumn.map<A>(_:), a6);
}

{
  return MLDataColumn.map<A>(_:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in MLDataColumn.map<A>(_:), a6);
}

uint64_t closure #1 in MLDataColumn.map<A>(_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v7 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  result = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, a4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    a2(v9);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(v9, a4);
  }
  return result;
}

uint64_t MLDataColumn.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  _QWORD *v14;
  uint64_t v15;

  OUTLINED_FUNCTION_41_8();
  v14 = (_QWORD *)swift_allocObject();
  v15 = *(_QWORD *)(a3 + 24);
  v14[2] = *(_QWORD *)(a3 + 16);
  v14[3] = a4;
  v14[4] = v15;
  v14[5] = a5;
  v14[6] = a1;
  v14[7] = a2;
  swift_retain();
  MLDataColumn.map<A>(skipUndefined:_:)(a6, (uint64_t)v14, a3, a4, a5, a7);
  return swift_release();
}

uint64_t closure #1 in MLDataColumn.map<A>(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v10 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)&v15 - v11, a1);
  result = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, a3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    a2(v12);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(v12, a3);
    return __swift_storeEnumTagSinglePayload(a5, 0, 1, a4);
  }
  return result;
}

void MLDataColumn.mapMissing<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_30_14();
  MLDataColumn.map<A>(skipUndefined:_:)(v0, v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_23_7();
}

void MLDataColumn.fillMissing(with:)()
{
  void *v0;
  char v1;
  id v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  OUTLINED_FUNCTION_25_10();
  if ((v1 & 1) != 0)
  {
    v5 = v0;
    v2 = v0;
    OUTLINED_FUNCTION_14_19();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      OUTLINED_FUNCTION_0_34();
    }
    else
    {
      OUTLINED_FUNCTION_49_0();
      *v3 = v5;
    }
    OUTLINED_FUNCTION_0_34();
  }
  else
  {
    v4 = v0;
    OUTLINED_FUNCTION_12_3(v0);
    closure #1 in MLDataColumn.fillMissing(with:)((uint64_t *)&v4, (uint64_t *)&v5);
    OUTLINED_FUNCTION_102(v0);
  }
  OUTLINED_FUNCTION_32_9();
}

void closure #1 in MLDataColumn.fillMissing(with:)(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = MLDataValueConvertible.featureValue.getter();
  specialized handling<A, B, C>(_:_:_:)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 16), *(_QWORD *)(v5 + 16));
  if (v2)
  {
    swift_release();
  }
  else
  {
    v7 = v6;
    if (v6)
    {
      type metadata accessor for CMLColumn();
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = v7;
      type metadata accessor for _UntypedColumn();
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v8;
      swift_release();
      *a2 = v9;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t MLDataColumn.prefix(_:)(uint64_t a1, uint64_t a2)
{
  return MLDataColumn.prefix(_:)(a1, a2, specialized handling<A, B, C>(_:_:_:));
}

uint64_t MLDataColumn.suffix(_:)(uint64_t a1, uint64_t a2)
{
  return MLDataColumn.prefix(_:)(a1, a2, specialized handling<A, B, C>(_:_:_:));
}

#error "21AE96BB0: call analysis failed (funcsize=67)"

#error "21AE96D10: call analysis failed (funcsize=53)"

uint64_t MLDataColumn.copy()(uint64_t a1)
{
  return MLDataColumn.dropDuplicates()(a1, specialized handling<A, B>(_:_:));
}

#error "21AE96DA0: call analysis failed (funcsize=48)"

void MLDataColumn.materialize()(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  double v4;
  uint64_t v5;

  v3 = *(id *)v1;
  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
  {
    outlined copy of Result<_DataTable, Error>(*(id *)v1, 1);
    swift_willThrow(v4);
  }
  else
  {
    OUTLINED_FUNCTION_35_10();
    CMLColumn.materialize()();
    outlined consume of Result<_DataTable, Error>(v3, 0);
    if (!v5)
    {
      *(_QWORD *)a1 = v3;
      *(_BYTE *)(a1 + 8) = 0;
      OUTLINED_FUNCTION_35_10();
    }
  }
}

void MLDataColumn.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  char v14;

  v7 = *(_QWORD *)(a2 + 16);
  OUTLINED_FUNCTION_36_10();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v13 - v10;
  v12 = *((_BYTE *)v3 + 8);
  v13 = *v3;
  v14 = v12;
  MLDataColumn.element(at:)(a1, a2);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v7) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(a2 + 24) + 24))(v7);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a3, v11, v7);
  }
  OUTLINED_FUNCTION_8_0();
}

void MLDataColumn<>.init<A>(column:)(uint64_t a1)
{
  MLDataColumn<>.init<A>(column:)(a1);
}

{
  MLDataColumn<>.init<A>(column:)(a1);
}

{
  MLDataColumn<>.init<A>(column:)(a1);
}

{
  MLDataColumn<>.init<A>(column:)(a1);
}

{
  MLDataColumn<>.init<A>(column:)(a1);
}

{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v1 = *(_BYTE *)(a1 + 8);
  v10 = *(_QWORD *)a1;
  LOBYTE(v11) = v1;
  MLDataColumn.init<A>(column:type:)((uint64_t)&v10, (uint64_t)&v12);
  OUTLINED_FUNCTION_34_15(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  OUTLINED_FUNCTION_46_7();
}

void MLDataColumn<>.sum()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_31_15();
  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
  {
    OUTLINED_FUNCTION_43_10();
    CMLColumn.sum()();
    if (v1)
    {
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_102(v2);
    }
    else
    {
      v4 = v3;
      if ((CMLFeatureValue.isInt64.getter() & 1) != 0)
      {
        specialized handling<A, B>(_:_:)(*(_QWORD *)(v4 + 16));
        OUTLINED_FUNCTION_4_2();
        OUTLINED_FUNCTION_102(v2);
      }
      else
      {
        outlined consume of Result<_DataTable, Error>(v2, 0);
        OUTLINED_FUNCTION_4_2();
      }
    }
  }
  OUTLINED_FUNCTION_4_31();
}

{
  MLDataColumn<>.std()((void (*)(id))CMLColumn.sum());
}

void MLDataColumn<>.min()()
{
  MLDataColumn<>.min()();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(id);
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_31_15();
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
  {
    v4 = OUTLINED_FUNCTION_13_29(v3);
    if (v2)
    {
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_102(v0);
    }
    else
    {
      v5 = v4;
      if ((CMLFeatureValue.isInt64.getter() & 1) != 0)
      {
        specialized handling<A, B>(_:_:)(*(_QWORD *)(v5 + 16));
        swift_release();
        outlined consume of Result<_DataTable, Error>(v0, 0);
      }
      else
      {
        OUTLINED_FUNCTION_102(v0);
        swift_release();
      }
    }
  }
  OUTLINED_FUNCTION_4_31();
}

{
  MLDataColumn<>.min()((uint64_t (*)(id))CMLColumn.min());
}

void MLDataColumn<>.max()()
{
  MLDataColumn<>.min()();
}

{
  MLDataColumn<>.min()((uint64_t (*)(id))CMLColumn.max());
}

void MLDataColumn<>.std()()
{
  MLDataColumn<>.std()((void (*)(id))CMLColumn.stdev());
}

{
  MLDataColumn<>.std()((void (*)(id))CMLColumn.stdev());
}

void MLDataColumn<>.mean()()
{
  MLDataColumn<>.std()((void (*)(id))CMLColumn.mean());
}

{
  MLDataColumn<>.std()((void (*)(id))CMLColumn.mean());
}

void MLDataColumn<>.min()(uint64_t (*a1)(id))
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  if ((*(_BYTE *)(v2 + 8) & 1) == 0)
  {
    OUTLINED_FUNCTION_13_29(a1);
    if (v3)
    {
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_102(v1);
    }
    else if ((OUTLINED_FUNCTION_44_11() & 1) != 0)
    {
      OUTLINED_FUNCTION_40_8();
      OUTLINED_FUNCTION_4_2();
      outlined consume of Result<_DataTable, Error>(v1, 0);
    }
    else
    {
      outlined consume of Result<_DataTable, Error>(v1, 0);
      OUTLINED_FUNCTION_4_2();
    }
  }
  OUTLINED_FUNCTION_17_14();
}

void MLDataColumn<>.std()(void (*a1)(id))
{
  uint64_t v1;
  id v3;

  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
  {
    v3 = outlined copy of Result<_DataTable, Error>(*(id *)v1, 0);
    a1(v3);
    if ((OUTLINED_FUNCTION_44_11() & 1) != 0)
    {
      OUTLINED_FUNCTION_40_8();
      OUTLINED_FUNCTION_4_2();
      OUTLINED_FUNCTION_6_26();
    }
    else
    {
      OUTLINED_FUNCTION_6_26();
      OUTLINED_FUNCTION_4_2();
    }
  }
  OUTLINED_FUNCTION_17_14();
}

uint64_t MLDataColumn<>.stdev()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = 0;
  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
  {
    OUTLINED_FUNCTION_43_10();
    CMLColumn.stdev()();
    if (v1)
    {
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_102(v2);
    }
    else
    {
      if ((OUTLINED_FUNCTION_44_11() & 1) != 0)
      {
        OUTLINED_FUNCTION_40_8();
        v5 = v4;
        OUTLINED_FUNCTION_4_2();
        outlined consume of Result<_DataTable, Error>(v2, 0);
        return v5;
      }
      outlined consume of Result<_DataTable, Error>(v2, 0);
      OUTLINED_FUNCTION_4_2();
    }
    return 0;
  }
  return result;
}

void MLDataColumn<>.init<A>(column:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  MLDataColumn<>.init<A>(column:)(a1, &demangling cache variable for type metadata for [Int], &lazy protocol witness table cache variable for type [Int] and conformance <A> [A], (uint64_t)&protocol witness table for Int, a2);
}

{
  MLDataColumn<>.init<A>(column:)(a1, &demangling cache variable for type metadata for [Double], &lazy protocol witness table cache variable for type [Double] and conformance <A> [A], (uint64_t)&protocol witness table for Double, a2);
}

{
  MLDataColumn<>.init<A>(column:)(a1, &demangling cache variable for type metadata for [String], (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A], (uint64_t)&protocol witness table for String, a2);
}

void MLDataColumn<>.init<A>(column:)(uint64_t *a1@<X0>, uint64_t *a2@<X3>, unint64_t *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  v9 = *((_BYTE *)a1 + 8);
  v11 = *a1;
  v12 = v9;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  lazy protocol witness table accessor for type [Int] and conformance <A> [A](a3, a2, a4);
  MLDataColumn.init<A>(column:type:)((uint64_t)&v11, (uint64_t)&v13);
  v10 = v14;
  *(_QWORD *)a5 = v13;
  *(_BYTE *)(a5 + 8) = v10;
  OUTLINED_FUNCTION_19_19();
}

uint64_t MLDataColumn.customMirror.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;

  v4 = type metadata accessor for Mirror.AncestorRepresentation();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_91_1();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = *((_BYTE *)v1 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(v11 + 32) = 0x746E756F63;
  *(_QWORD *)(v11 + 40) = 0xE500000000000000;
  v18 = v9;
  v19 = v10;
  v12 = MLDataColumn.count.getter();
  v13 = MEMORY[0x24BEE1768];
  *(_QWORD *)(v11 + 48) = v12;
  *(_QWORD *)(v11 + 72) = v13;
  *(_QWORD *)(v11 + 80) = 1701869940;
  *(_QWORD *)(v11 + 88) = 0xE400000000000000;
  v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v11 + 120) = swift_getMetatypeMetadata();
  *(_QWORD *)(v11 + 96) = v14;
  v18 = a1;
  v15 = *MEMORY[0x24BEE4370];
  v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v8, v15, v16);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v2, *MEMORY[0x24BEE43B8], v4);
  swift_getMetatypeMetadata();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t MLDataColumn.description.getter(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  MEMORY[0x24BDAC7A8](a1);
  v2 = *(void **)v1;
  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
  {
    v16 = 0;
    v17 = 0xE000000000000000;
    v14 = (uint64_t)v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    return v16;
  }
  v16 = 91;
  v17 = 0xE100000000000000;
  v14 = (uint64_t)v2;
  LOBYTE(v15) = 0;
  OUTLINED_FUNCTION_12_3(v2);
  result = MLDataColumn.count.getter();
  if (result >= 10)
    v4 = 10;
  else
    v4 = result;
  if ((v4 & 0x8000000000000000) == 0)
  {
    v13 = result;
    if (v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (i)
        {
          v6._countAndFlagsBits = 8236;
          v6._object = (void *)0xE200000000000000;
          String.append(_:)(v6);
        }
        _UntypedColumn.type.getter(&v14);
        if (v14 == 2)
        {
          OUTLINED_FUNCTION_15_20();
          v7._countAndFlagsBits = OUTLINED_FUNCTION_39_8();
          v14 = 34;
          v15 = 0xE100000000000000;
          String.append(_:)(v7);
          OUTLINED_FUNCTION_80();
          swift_bridgeObjectRetain();
          v8._countAndFlagsBits = 34;
          v8._object = (void *)0xE100000000000000;
          String.append(_:)(v8);
          OUTLINED_FUNCTION_80();
          v9 = v14;
          v10 = v15;
        }
        else
        {
          OUTLINED_FUNCTION_15_20();
          v9 = OUTLINED_FUNCTION_39_8();
        }
        String.append(_:)(*(Swift::String *)&v9);
        OUTLINED_FUNCTION_80();
      }
    }
    if (v13 >= 11)
    {
      v11._countAndFlagsBits = 0x2E2E2E202CLL;
      v11._object = (void *)0xE500000000000000;
      String.append(_:)(v11);
    }
    v12._countAndFlagsBits = 93;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    OUTLINED_FUNCTION_102(v2);
    return v16;
  }
  __break(1u);
  return result;
}

uint64_t MLDataColumn.debugDescription.getter(uint64_t a1)
{
  return OUTLINED_FUNCTION_18_16(a1);
}

void MLDataColumn.playgroundDescription.getter(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v3 = OUTLINED_FUNCTION_18_16(a1);
  v5 = v4;
  v6 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  @nonobjc NSAttributedString.init(string:attributes:)(v3, v5, 0);
  v8 = v7;
  a2[3] = type metadata accessor for NSAttributedString();
  *a2 = v8;
  OUTLINED_FUNCTION_46_7();
}

uint64_t type metadata accessor for MLDataColumn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLDataColumn);
}

uint64_t sub_21AE97A64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLDataColumn.map<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in MLDataColumn.map<A>(_:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in MLDataColumn.map<A>(_:));
}

{
  return partial apply for closure #1 in MLDataColumn.map<A>(_:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in MLDataColumn.map<A>(_:));
}

uint64_t partial apply for closure #1 in MLDataColumn.map<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3;
    result = MEMORY[0x22075B938](&protocol conformance descriptor for <A> [A], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata instantiation function for MLDataColumn()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t partial apply for closure #1 in MLDataColumn.map<A>(skipUndefined:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in MLDataColumn.map<A>(skipUndefined:_:)(a1, *(void (**)(char *))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void OUTLINED_FUNCTION_0_34()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 1);
}

void OUTLINED_FUNCTION_2_34()
{
  MLUntypedColumn.subscript.getter();
}

void OUTLINED_FUNCTION_6_26()
{
  void *v0;

  outlined consume of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_7_24()
{
  return swift_unexpectedError();
}

uint64_t OUTLINED_FUNCTION_8_25@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 16))((char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
}

void OUTLINED_FUNCTION_10_22(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(a1 + 16) = v1;
  outlined consume of Result<_DataTable, Error>(v2, 0);
}

uint64_t OUTLINED_FUNCTION_13_29(uint64_t (*a1)(id))
{
  id *v1;
  id v3;

  v3 = outlined copy of Result<_DataTable, Error>(*v1, 0);
  return a1(v3);
}

id OUTLINED_FUNCTION_14_19()
{
  void *v0;

  return outlined copy of Result<_DataTable, Error>(v0, 1);
}

void OUTLINED_FUNCTION_15_20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 112) = v0;
  *(_BYTE *)(v4 - 104) = 0;
  MLDataColumn.subscript.getter(v3, v1, v2);
}

uint64_t OUTLINED_FUNCTION_16_19(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return type metadata accessor for _UntypedColumn();
}

uint64_t OUTLINED_FUNCTION_18_16(uint64_t a1)
{
  return MLDataColumn.description.getter(a1);
}

uint64_t OUTLINED_FUNCTION_21_16()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

id OUTLINED_FUNCTION_22_14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  return v10;
}

void OUTLINED_FUNCTION_26_18()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 - 72);
  *(_QWORD *)v0 = *(_QWORD *)(v1 - 80);
  *(_BYTE *)(v0 + 8) = v2;
}

void OUTLINED_FUNCTION_27_21(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *a2 = a10;
}

void OUTLINED_FUNCTION_32_9()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_QWORD *)v0 = v2;
  *(_BYTE *)(v0 + 8) = v1;
}

void OUTLINED_FUNCTION_34_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  *(_QWORD *)v12 = a11;
  *(_BYTE *)(v12 + 8) = a12;
}

id OUTLINED_FUNCTION_35_10()
{
  void *v0;

  return outlined copy of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_36_10()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_39_8()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_40_8()
{
  specialized handling<A, B>(_:_:)();
}

id OUTLINED_FUNCTION_43_10()
{
  id *v0;

  return outlined copy of Result<_DataTable, Error>(*v0, 0);
}

uint64_t OUTLINED_FUNCTION_44_11()
{
  return CMLFeatureValue.isDouble.getter();
}

uint64_t OUTLINED_FUNCTION_45_6()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0[2] + 16);
  outlined copy of Result<_DataTable, Error>(v0, 0);
  return v1;
}

void specialized Sequence.allSatisfy(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *, _QWORD);
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  _BYTE v37[32];
  _BYTE v38[32];
  _BYTE v39[32];
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_8_1();
  v3 = v2;
  v4 = type metadata accessor for AnyColumn();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_53_0();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>.Iterator);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_31_4();
  outlined init with copy of URL?(v3, (uint64_t)v9, &demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
  v41 = v5;
  v12 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v13 = v1;
  v12(v0, v9, v4);
  lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn(&lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn, MEMORY[0x24BDF6058]);
  OUTLINED_FUNCTION_104_3();
  v12(v0, &v9[*(int *)(v6 + 52)], v4);
  v34 = v1 + *(int *)(v10 + 52);
  v32 = v0;
  OUTLINED_FUNCTION_104_3();
  v31 = *(int *)(v10 + 56);
  *(_BYTE *)(v1 + v31) = 0;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<AnyColumn>);
  v14 = (_QWORD *)(v1 + *(int *)(v33 + 36));
  lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn((unint64_t *)&lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn, MEMORY[0x24BDF6060]);
  v29 = &v40;
  v30 = v1;
  v28 = v14;
  v15 = v32;
  while (1)
  {
    v16 = *v14;
    v17 = OUTLINED_FUNCTION_103_5();
    if (v16 == v36[0])
      break;
    v18 = (void (*)(_QWORD *, _QWORD))OUTLINED_FUNCTION_109_4();
    outlined init with copy of URL?(v19, (uint64_t)v37, &demangling cache variable for type metadata for Any?);
    v18(v36, 0);
    v20 = *(void (**)(uint64_t))(v41 + 16);
    v21 = OUTLINED_FUNCTION_120_4();
    v20(v21);
    OUTLINED_FUNCTION_67_7();
    OUTLINED_FUNCTION_119_3();
    OUTLINED_FUNCTION_70_8((uint64_t)v37, (uint64_t)v38);
    v22 = v34;
    v23 = *(_QWORD *)(v34 + *(int *)(v33 + 36));
    OUTLINED_FUNCTION_103_5();
    if (v23 == v35)
    {
      outlined destroy of URL?((uint64_t)v38, &demangling cache variable for type metadata for Any?);
      v13 = v30;
      break;
    }
    v24 = (void (*)(uint64_t *, _QWORD))OUTLINED_FUNCTION_109_4();
    outlined init with copy of URL?(v25, (uint64_t)v36, &demangling cache variable for type metadata for Any?);
    v24(&v35, 0);
    ((void (*)(uint64_t, uint64_t, uint64_t))v20)(v15, v22, v4);
    OUTLINED_FUNCTION_67_7();
    OUTLINED_FUNCTION_119_3();
    OUTLINED_FUNCTION_70_8((uint64_t)v36, (uint64_t)v37);
    OUTLINED_FUNCTION_70_8((uint64_t)v38, (uint64_t)v39);
    v26 = (uint64_t)v29;
    OUTLINED_FUNCTION_70_8((uint64_t)v37, (uint64_t)v29);
    LOBYTE(v26) = closure #1 in HandPoseClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v39, v26);
    outlined destroy of URL?((uint64_t)v39, &demangling cache variable for type metadata for (Any?, Any?));
    if ((v26 & 1) != 0)
    {
      v13 = v30;
      v14 = v28;
      if ((*(_BYTE *)(v30 + v31) & 1) == 0)
        continue;
    }
    goto LABEL_9;
  }
  *(_BYTE *)(v13 + v31) = 1;
LABEL_9:
  OUTLINED_FUNCTION_123_3(v17, &demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>.Iterator);
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, _QWORD);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t *, _QWORD);
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  _BYTE v29[32];
  _BYTE v30[32];
  _BYTE v31[32];
  _BYTE v32[40];
  uint64_t v33;

  OUTLINED_FUNCTION_8_1();
  v4 = v3;
  v5 = type metadata accessor for AnyColumn();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_53_0();
  v7 = OUTLINED_FUNCTION_64_13();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_161();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>.Iterator);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_134_3(v4, v1);
  v33 = v6;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v12 = v2;
  v11(v0, v1, v5);
  _s11TabularData9AnyColumnVACSTAAWlTm_0(&lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn);
  OUTLINED_FUNCTION_104_3();
  v11(v0, v1 + *(int *)(v7 + 52), v5);
  v26 = v2 + *(int *)(v9 + 52);
  OUTLINED_FUNCTION_104_3();
  v24 = *(int *)(v9 + 56);
  *(_BYTE *)(v2 + v24) = 0;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<AnyColumn>);
  v13 = (_QWORD *)(v2 + *(int *)(v25 + 36));
  _s11TabularData9AnyColumnVACSTAAWlTm_0(&lazy protocol witness table cache variable for type AnyColumn and conformance AnyColumn);
  v23 = v13;
  while (1)
  {
    v14 = *v13;
    v15 = OUTLINED_FUNCTION_103_5();
    if (v14 == v28[0])
      break;
    v16 = (void (*)(_QWORD *, _QWORD))OUTLINED_FUNCTION_109_4();
    OUTLINED_FUNCTION_109_8(v17, (uint64_t)v29);
    v16(v28, 0);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
    v18(v0, v12, v5);
    OUTLINED_FUNCTION_67_7();
    OUTLINED_FUNCTION_119_3();
    OUTLINED_FUNCTION_70_8((uint64_t)v29, (uint64_t)v30);
    v19 = *(_QWORD *)(v26 + *(int *)(v25 + 36));
    OUTLINED_FUNCTION_103_5();
    if (v19 == v27)
    {
      outlined destroy of URL?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
      v12 = v2;
      break;
    }
    v20 = (void (*)(uint64_t *, _QWORD))OUTLINED_FUNCTION_109_4();
    OUTLINED_FUNCTION_109_8(v21, (uint64_t)v28);
    v20(&v27, 0);
    v18(v0, v26, v5);
    OUTLINED_FUNCTION_67_7();
    OUTLINED_FUNCTION_119_3();
    OUTLINED_FUNCTION_70_8((uint64_t)v28, (uint64_t)v29);
    OUTLINED_FUNCTION_70_8((uint64_t)v30, (uint64_t)v31);
    OUTLINED_FUNCTION_70_8((uint64_t)v29, (uint64_t)v32);
    v22 = closure #1 in HandPoseClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)((uint64_t)v31, (uint64_t)v32);
    outlined destroy of URL?((uint64_t)v31, &demangling cache variable for type metadata for (Any?, Any?));
    if ((v22 & 1) != 0)
    {
      v12 = v2;
      v13 = v23;
      if ((*(_BYTE *)(v2 + v24) & 1) == 0)
        continue;
    }
    goto LABEL_9;
  }
  *(_BYTE *)(v12 + v24) = 1;
LABEL_9:
  OUTLINED_FUNCTION_123_3(v15, &demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>.Iterator);
  OUTLINED_FUNCTION_7();
}

uint64_t (*HandPoseClassifierTrainingSessionDelegate.sourceTable.modify())()
{
  swift_beginAccess();
  return HandPoseClassifierTrainingSessionDelegate.sourceTable.modify;
}

uint64_t HandPoseClassifierTrainingSessionDelegate.init(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters;
  v4 = OUTLINED_FUNCTION_20_14();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  OUTLINED_FUNCTION_100_4(OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTable);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceValidationRowCount) = 0;
  OUTLINED_FUNCTION_57_6(v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingFeatures);
  OUTLINED_FUNCTION_57_6(v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_validationFeatures);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_model) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_classLabels) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_metricsAttributesDictionary) = MEMORY[0x24BEE4B00];
  outlined init with take of MLHandPoseClassifier.ModelParameters(a1, v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  return v1;
}

char *HandPoseClassifierTrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  void **v69;
  void *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  void *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  uint64_t (*v99)();
  char v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(_QWORD);
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t (*v151)();
  unsigned __int8 v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  OUTLINED_FUNCTION_8_1();
  v158 = v3;
  v159 = v4;
  v146 = v1;
  v147 = v5;
  v7 = v6;
  v155 = v8;
  v128 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v132 = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  OUTLINED_FUNCTION_4_26(v11, (uint64_t)&v155);
  v131 = v12;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v130 = v14;
  v15 = type metadata accessor for AnyColumn();
  OUTLINED_FUNCTION_4_26(v15, (uint64_t)&v156);
  v136 = v16;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_208();
  v129 = v18;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_211();
  v135 = v20;
  v21 = OUTLINED_FUNCTION_95_4();
  OUTLINED_FUNCTION_4_26(v21, (uint64_t)&v157);
  v141 = v22;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_208();
  v134 = v24;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_211();
  v140 = v26;
  v27 = (int *)OUTLINED_FUNCTION_20_14();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_55_0();
  v145 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v125 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_208();
  v139 = v33;
  OUTLINED_FUNCTION_29_3();
  v35 = MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v125 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v125 - v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_62_11(v41, v125);
  v150 = &v0[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters];
  __swift_storeEnumTagSinglePayload((uint64_t)&v0[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters], 1, 1, (uint64_t)v27);
  OUTLINED_FUNCTION_100_4(OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTable);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTrainingRowCount] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceValidationRowCount] = 0;
  v142 = (uint64_t)&v0[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingFeatures];
  OUTLINED_FUNCTION_64_7((uint64_t)&v0[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingFeatures]);
  v137 = (uint64_t)&v0[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_validationFeatures];
  OUTLINED_FUNCTION_64_7((uint64_t)&v0[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_validationFeatures]);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_model] = 0;
  v133 = OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_classLabels;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_classLabels] = 0;
  v148 = v0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_metricsAttributesDictionary] = MEMORY[0x24BEE4B00];
  v42 = v155;
  outlined init with copy of MLTrainingSessionParameters(v155, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
  v143 = v7;
  outlined init with copy of MLTrainingSessionParameters(v7, (uint64_t)v31, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  v43 = v27[6];
  v44 = v27[7];
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v39, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v31, v2 + v27[5], type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  v45 = v145;
  *(_QWORD *)(v2 + v43) = *(_QWORD *)&v31[*(int *)(v145 + 20)];
  *(_QWORD *)(v2 + v44) = *(_QWORD *)&v31[*(int *)(v45 + 24)];
  v46 = v42;
  *(_QWORD *)(v2 + v27[8]) = *(_QWORD *)&v31[*(int *)(v45 + 28)];
  v47 = v149;
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v31, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  v48 = v144;
  outlined init with take of MLHandPoseClassifier.ModelParameters(v2, v144, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
  v145 = (uint64_t)v27;
  __swift_storeEnumTagSinglePayload(v48, 0, 1, (uint64_t)v27);
  v49 = (uint64_t)v150;
  OUTLINED_FUNCTION_44_7();
  outlined assign with take of MLHandPoseClassifier.PersistentParameters?(v48, v49);
  OUTLINED_FUNCTION_25_11();
  outlined init with copy of MLTrainingSessionParameters(v46, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v50 = *(char **)v37;
    v51 = v37[8];
    v47 = *((_QWORD *)v37 + 3);
    v141 = *((_QWORD *)v37 + 2);
    v52 = *((_QWORD *)v37 + 5);
    v144 = *((_QWORD *)v37 + 4);
    v53 = *((_QWORD *)v37 + 6);
    v37 = (char *)*((_QWORD *)v37 + 7);
    v54 = v142;
    OUTLINED_FUNCTION_44_7();
    v55 = *(void **)v54;
    *(_QWORD *)v54 = v50;
    *(_BYTE *)(v54 + 8) = v51;
    outlined copy of Result<_DataTable, Error>(v50, v51);
    OUTLINED_FUNCTION_108_4(v55);
    OUTLINED_FUNCTION_44_7();
    v56 = v146;
    static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(v54, v53, v37);
    if (v56)
    {
      OUTLINED_FUNCTION_25_11();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_80();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_16_20();
      v59 = 0;
      v50 = v148;
      goto LABEL_29;
    }
    OUTLINED_FUNCTION_25_11();
    v57 = v142;
    OUTLINED_FUNCTION_44_7();
    static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(v57, v141, v47, v53, (uint64_t)v37, v144, v52);
    OUTLINED_FUNCTION_25_11();
    OUTLINED_FUNCTION_104();
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_10_3();
    v95 = v142;
    v96 = OUTLINED_FUNCTION_44_7();
    OUTLINED_FUNCTION_45_7(v98, v96, v97, *(_QWORD *)v95, *(_BYTE *)(v95 + 8));
    v99 = v151;
    v100 = v152;
    OUTLINED_FUNCTION_25_11();
    specialized MLDataColumn.dropDuplicates()(v99, v100, (uint64_t)&v153);
    OUTLINED_FUNCTION_118_2(v99);
    v101 = OUTLINED_FUNCTION_117_2();
    OUTLINED_FUNCTION_16_20();
    goto LABEL_16;
  }
  v60 = v146;
  v99 = type metadata accessor for MLHandPoseClassifier.DataSource;
  OUTLINED_FUNCTION_92((uint64_t)v37);
  v61 = v139;
  outlined init with copy of MLTrainingSessionParameters(v46, v139, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
    v63 = (uint64_t *)(v61 + v62[12]);
    v65 = *v63;
    v64 = v63[1];
    v126 = v65;
    v144 = v64;
    v66 = (uint64_t *)(v61 + v62[16]);
    v68 = *v66;
    v67 = (char *)v66[1];
    v125 = v68;
    v127 = v67;
    v69 = (void **)(v61 + v62[20]);
    v71 = (char *)*v69;
    v70 = v69[1];
    v72 = v140;
    v73 = v138;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v141 + 32))(v140, v61, v138);
    v74 = v135;
    v75 = OUTLINED_FUNCTION_120_4();
    MEMORY[0x220758A1C](v75);
    v76 = AnyColumn.wrappedElementType.getter();
    OUTLINED_FUNCTION_34_3(v74, *(uint64_t (**)(uint64_t, _QWORD))(v136 + 8));
    if (v76 == MEMORY[0x24BEE0D00])
    {
      OUTLINED_FUNCTION_120_4();
      DataFrame.subscript.getter();
      v87 = v129;
      Column<A>.parseAsJSONArrays()(v129);
      v79 = v70;
      if (v60)
      {
        OUTLINED_FUNCTION_80();
        OUTLINED_FUNCTION_50_9();
        v88 = OUTLINED_FUNCTION_88_4();
        OUTLINED_FUNCTION_65_11(v88, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
        OUTLINED_FUNCTION_37_9(v89, type metadata accessor for MLHandPoseClassifier.ModelParameters);
        OUTLINED_FUNCTION_58_0(v90, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
        OUTLINED_FUNCTION_27_22();
        (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v72, v138);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_27_22();
      swift_bridgeObjectRetain();
      v113 = v87;
      v50 = v71;
      MEMORY[0x220758A28](v113, v71, v70);
      v77 = v141;
      v78 = v138;
    }
    else
    {
      v50 = v71;
      v77 = v141;
      v78 = v73;
      v79 = v70;
    }
    v80 = v140;
    v81 = v78;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v134, v140, v78);
    MLDataTable.init(_:convertArraysToShapedArrays:)(0, (uint64_t)&v153);
    if (!v60)
    {
      v91 = v153;
      v92 = v154;
      v47 = v142;
      OUTLINED_FUNCTION_44_7();
      v93 = *(void **)v47;
      v94 = *(_BYTE *)(v47 + 8);
      *(_QWORD *)v47 = v91;
      *(_BYTE *)(v47 + 8) = v92;
      outlined consume of Result<_DataTable, Error>(v93, v94);
      OUTLINED_FUNCTION_44_7();
      static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(v47, (uint64_t)v50, v79);
      swift_endAccess();
      OUTLINED_FUNCTION_44_7();
      v37 = v127;
      OUTLINED_FUNCTION_96_5(v47, v126, v144, (uint64_t)v50, (uint64_t)v79, v125);
      OUTLINED_FUNCTION_25_11();
      OUTLINED_FUNCTION_80();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_30();
      v122 = OUTLINED_FUNCTION_44_7();
      OUTLINED_FUNCTION_45_7(v124, v122, v123, *(_QWORD *)v47, *(_BYTE *)(v47 + 8));
      v99 = v151;
      v51 = v152;
      OUTLINED_FUNCTION_25_11();
      specialized MLDataColumn.dropDuplicates()(v99, v51, (uint64_t)&v153);
      OUTLINED_FUNCTION_98(v99);
      v101 = OUTLINED_FUNCTION_117_2();
      OUTLINED_FUNCTION_34_3(v140, *(uint64_t (**)(uint64_t, _QWORD))(v141 + 8));
LABEL_16:
      OUTLINED_FUNCTION_55_9();
      v86 = (void **)v137;
      goto LABEL_17;
    }
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_50_9();
    v82 = OUTLINED_FUNCTION_88_4();
    OUTLINED_FUNCTION_65_11(v82, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_37_9(v83, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    OUTLINED_FUNCTION_58_0(v84, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v80, v81);
LABEL_23:
    v50 = v148;
    goto LABEL_31;
  }
  outlined destroy of MLHandPoseClassifier.ModelParameters(v61, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
  static _ImageUtilities.getDataSourceSynopsisForHandPoseClassifier(from:)(v46);
  v86 = (void **)v137;
  if (v60)
  {
    v59 = 0;
    v50 = v148;
    goto LABEL_29;
  }
  v50 = (char *)v58;
  v51 = v85;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v101 = ((uint64_t (*)(uint64_t))specialized _copyCollectionToContiguousArray<A>(_:))(v51);
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_55_9();
LABEL_17:
  *(_QWORD *)&v50[v51] = v101;
  swift_bridgeObjectRelease();
  v102 = (uint64_t)v150;
  if (OUTLINED_FUNCTION_102_2((uint64_t)v150))
    goto LABEL_26;
  outlined init with copy of MLTrainingSessionParameters(v102 + *(int *)(v47 + 20), (uint64_t)v99, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v103 = *(void **)v99;
      v104 = *((_BYTE *)v99 + 8);
      v105 = *((_QWORD *)v99 + 3);
      v106 = *((_QWORD *)v99 + 4);
      v149 = *((_QWORD *)v99 + 2);
      v150 = (char *)v106;
      v108 = *((_QWORD *)v99 + 6);
      v107 = (void *)*((_QWORD *)v99 + 7);
      OUTLINED_FUNCTION_44_7();
      v109 = *v86;
      v110 = *(_BYTE *)(v137 + 8);
      *(_QWORD *)v137 = v103;
      *(_BYTE *)(v137 + 8) = v104;
      outlined copy of Result<_DataTable, Error>(v103, v104);
      v111 = v110;
      v112 = v137;
      outlined consume of Result<_DataTable, Error>(v109, v111);
      OUTLINED_FUNCTION_44_7();
      static MLHandPoseClassifier.reformatKeypointsDataTable(table:featureColumn:)(v112, v108, v107);
      OUTLINED_FUNCTION_98_3();
      OUTLINED_FUNCTION_44_7();
      OUTLINED_FUNCTION_96_5(v112, v149, v105, v108, (uint64_t)v107, (uint64_t)v150);
      OUTLINED_FUNCTION_98_3();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_16_20();
      v37 = v147;
      v50 = v148;
      v51 = v133;
      goto LABEL_26;
    }
    v114 = (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource;
  }
  else
  {
    v114 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData;
  }
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v99, v114);
LABEL_26:
  outlined init with copy of MLTrainingSessionParameters((uint64_t)v37, (uint64_t)&v50[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sessionParameters], (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  if (!*(_QWORD *)&v50[v51])
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v58 = OUTLINED_FUNCTION_18_0(v118, 0xD00000000000003DLL);
    v59 = 1;
LABEL_29:
    OUTLINED_FUNCTION_77_5(v58, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    OUTLINED_FUNCTION_37_9(v119, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    OUTLINED_FUNCTION_58_0(v120, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    if (v59)
      goto LABEL_30;
LABEL_31:
    outlined destroy of URL?((uint64_t)&v50[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters], &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
    outlined consume of MLDataTable?(*(void **)&v50[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTable], v50[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTable + 8]);
    OUTLINED_FUNCTION_66_8(OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingFeatures);
    OUTLINED_FUNCTION_66_8(OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_validationFeatures);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for HandPoseClassifierTrainingSessionDelegate();
    swift_deallocPartialClassInstance();
    return v50;
  }
  OUTLINED_FUNCTION_128_1();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_93_3();
  v115 = OUTLINED_FUNCTION_38_8();
  OUTLINED_FUNCTION_77_5((uint64_t)v115, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_37_9(v116, type metadata accessor for MLHandPoseClassifier.ModelParameters);
  OUTLINED_FUNCTION_58_0(v117, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
  *(_QWORD *)&v50[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_model] = v115;
LABEL_30:
  swift_release();
  return v50;
}

void HandPoseClassifierTrainingSessionDelegate.populateSourceTable(parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unsigned __int8 v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  unsigned __int8 v9;
  char v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  void *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned __int8 v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  char v24;
  void *v25;

  v2 = v0;
  OUTLINED_FUNCTION_20_14();
  MLHandPoseClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)((uint64_t *)&v19, (uint64_t *)&v21);
  if (!v1)
  {
    v3 = v19;
    v4 = v20;
    v5 = v21;
    v6 = v22;
    if (v20 == 255)
    {
      if (v22 != 255)
      {
        v13 = v0 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTable;
        OUTLINED_FUNCTION_44_7();
        v25 = *(void **)v13;
        *(_QWORD *)v13 = v5;
        v14 = *(_BYTE *)(v13 + 8);
        *(_BYTE *)(v13 + 8) = v6;
        OUTLINED_FUNCTION_29_13(v5);
        outlined consume of MLDataTable?(v25, v14);
        *(_QWORD *)(v0 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
LABEL_11:
        v23 = v5;
        v18 = OUTLINED_FUNCTION_113_3();
        OUTLINED_FUNCTION_64_0();
        OUTLINED_FUNCTION_130_2();
LABEL_14:
        *(_QWORD *)(v2 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceValidationRowCount) = v18;
        return;
      }
      *(_QWORD *)(v0 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTrainingRowCount) = 0;
    }
    else
    {
      LODWORD(v25) = v20 & 1;
      v7 = v0 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTable;
      if (v22 == 255)
      {
        OUTLINED_FUNCTION_44_7();
        v15 = *(void **)v7;
        *(_QWORD *)v7 = v3;
        v16 = *(_BYTE *)(v7 + 8);
        *(_BYTE *)(v7 + 8) = v4;
        OUTLINED_FUNCTION_122_2();
        OUTLINED_FUNCTION_29_13(v3);
        outlined consume of MLDataTable?(v15, v16);
      }
      else
      {
        OUTLINED_FUNCTION_44_7();
        v8 = *(void **)v7;
        *(_QWORD *)v7 = v3;
        v9 = *(_BYTE *)(v7 + 8);
        v10 = (char)v25;
        *(_BYTE *)(v7 + 8) = (_BYTE)v25;
        outlined copy of Result<_DataTable, Error>(v3, v10);
        OUTLINED_FUNCTION_122_2();
        outlined copy of MLDataTable?(v5, v6);
        outlined consume of MLDataTable?(v8, v9);
        v11 = HandPoseClassifierTrainingSessionDelegate.sourceTable.modify();
        if (*(unsigned __int8 *)(v12 + 8) != 255)
        {
          v23 = v5;
          v24 = v6 & 1;
          MLDataTable.append(contentsOf:)();
        }
        ((void (*)(void **, _QWORD))v11)(&v19, 0);
        OUTLINED_FUNCTION_64_0();
        OUTLINED_FUNCTION_130_2();
        OUTLINED_FUNCTION_29_13(v3);
      }
      v23 = v3;
      v17 = OUTLINED_FUNCTION_113_3();
      OUTLINED_FUNCTION_64_0();
      *(_QWORD *)(v2 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTrainingRowCount) = v17;
      if (v6 != 255)
        goto LABEL_11;
    }
    OUTLINED_FUNCTION_64_0();
    v18 = 0;
    goto LABEL_14;
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandPoseClassifierTrainingSessionDelegate.setUp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_20_14();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_44_7();
  v5 = OUTLINED_FUNCTION_68_7();
  OUTLINED_FUNCTION_107_3(v5, v6);
  v7 = OUTLINED_FUNCTION_102_2((uint64_t)v3);
  if ((_DWORD)v7 == 1)
  {
    OUTLINED_FUNCTION_93_1(v7, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
    __break(1u);
  }
  else
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v3, v0, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
    HandPoseClassifierTrainingSessionDelegate.populateSourceTable(parameters:)();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v0, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandPoseClassifierTrainingSessionDelegate.resume(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[8];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_8_1();
  v37 = v2;
  v41 = v4;
  OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_208();
  v36[1] = v6;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_65_5();
  v36[2] = v8;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_65_5();
  v36[4] = v10;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_211();
  v36[7] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_208();
  v36[6] = v14;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v36 - v16;
  v18 = type metadata accessor for MLCheckpoint();
  v36[5] = *(_QWORD *)(v18 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_208();
  v42 = v20;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_65_5();
  v36[3] = v22;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_65_5();
  v38 = v24;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_211();
  v40 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = OUTLINED_FUNCTION_20_14();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_55_0();
  v39 = v1;
  v32 = v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_107_3(v32, (uint64_t)v29);
  if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30) == 1)
  {
    outlined destroy of URL?((uint64_t)v29, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
    __break(1u);
    JUMPOUT(0x21AE99E60);
  }
  outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v29, v3, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
  specialized BidirectionalCollection.last.getter(v41, (uint64_t)v17);
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18) != 1)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v17, v40, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v36[0] = *(int *)(v18 + 20);
    OUTLINED_FUNCTION_91_0();
    __asm { BR              X10 }
  }
  outlined destroy of URL?((uint64_t)v17, &demangling cache variable for type metadata for MLCheckpoint?);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_41_9();
  OUTLINED_FUNCTION_18_0(v33, v34);
  outlined destroy of MLHandPoseClassifier.ModelParameters(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
  OUTLINED_FUNCTION_7();
}

Swift::Int_optional __swiftcall HandPoseClassifierTrainingSessionDelegate.itemCount(phase:)(CreateML::MLPhase phase)
{
  Swift::Int_optional result;

  __asm { BR              X10 }
  return result;
}

uint64_t sub_21AE99EFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTable;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v1 + 8) == 255)
    return 0;
  else
    return MLDataTable.size.getter();
}

Swift::tuple_Int_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandPoseClassifierTrainingSessionDelegate.extractFeatures(from:)(Swift::Int from)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumTagSinglePayload;
  Swift::Int v15;
  _BOOL8 v16;
  uint64_t v17;
  int v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  uint64_t v30;
  id v31;
  int v32;
  uint64_t v33;
  id v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  unsigned __int8 v45;
  id v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::tuple_Int_finished_Bool result;

  OUTLINED_FUNCTION_8_1();
  v49 = v3;
  v50 = v4;
  v5 = v1;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_44_7();
  v11 = OUTLINED_FUNCTION_120_4();
  outlined init with copy of URL?(v11, v12, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  v13 = OUTLINED_FUNCTION_20_14();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v13);
  outlined destroy of URL?((uint64_t)v10, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  if (EnumTagSinglePayload == 1)
  {
    __break(1u);
    goto LABEL_28;
  }
  v17 = v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTable;
  OUTLINED_FUNCTION_44_7();
  v18 = *(unsigned __int8 *)(v17 + 8);
  if (v18 != 255)
  {
    v44 = *(id *)v17;
    v19 = v44;
    v45 = v18 & 1;
    outlined copy of Result<_DataTable, Error>(v44, v18 & 1);
    v15 = MLDataTable.size.getter();
    if (v16 < 1)
    {
LABEL_12:
      OUTLINED_FUNCTION_32_10();
      goto LABEL_13;
    }
    v20 = OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTrainingRowCount;
    v21 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTrainingRowCount);
    v22 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceValidationRowCount);
    v23 = v21 + v22;
    if (!__OFADD__(v21, v22))
    {
      if (v23 <= v7)
      {
        OUTLINED_FUNCTION_32_10();
        v15 = 0;
        goto LABEL_15;
      }
      v43 = OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceValidationRowCount;
      v24 = v5 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sessionParameters;
      v15 = type metadata accessor for MLTrainingSessionParameters();
      v25 = *(_QWORD *)(v24 + *(int *)(v15 + 20));
      v26 = __OFADD__(v7, v25);
      v27 = v7 + v25;
      v28 = v26;
      if (v21 <= v7)
      {
        if ((v28 & 1) != 0)
        {
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      else
      {
        v23 = v21;
        if ((v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_12;
        }
      }
      v48 = v2;
      v42 = v20;
      if (v23 >= v27)
        v30 = v27;
      else
        v30 = v23;
      if (v30 >= v7)
      {
        v46 = v19;
        v47 = v18 & 1;
        MLDataTable.subscript.getter(&v44, v7, v30);
        v31 = v44;
        v32 = v45;
        type metadata accessor for MLHandPoseClassifier.FeatureExtractor();
        v46 = v31;
        v47 = v32;
        v33 = v48;
        static MLHandPoseClassifier.FeatureExtractor.extractFeatures(from:startingSessionId:)((uint64_t *)&v46, v7, &v44);
        v48 = v33;
        if (v33)
        {
          OUTLINED_FUNCTION_32_10();
          OUTLINED_FUNCTION_108_4(v31);
          goto LABEL_16;
        }
        v40 = v31;
        v41 = v32;
        v34 = v44;
        v35 = v45;
        v46 = v44;
        v47 = v45;
        OUTLINED_FUNCTION_44_7();
        MLDataTable.append(contentsOf:)();
        swift_endAccess();
        OUTLINED_FUNCTION_32_10();
        outlined consume of Result<_DataTable, Error>(v40, v41);
        outlined consume of Result<_DataTable, Error>(v34, v35);
        v15 = v30 - v7;
        if (!__OFSUB__(v30, v7))
        {
          v36 = *(_QWORD *)(v5 + v42);
          v37 = *(_QWORD *)(v5 + v43);
          v26 = __OFADD__(v36, v37);
          v38 = v36 + v37;
          if (!v26)
          {
            v29 = v30 == v38;
            goto LABEL_16;
          }
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_13:
  v15 = 1;
LABEL_15:
  v29 = 1;
LABEL_16:
  LOBYTE(v16) = v29;
LABEL_33:
  result.finished = v16;
  result._0 = v15;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandPoseClassifierTrainingSessionDelegate.transitionTo(phase:)(CreateML::MLPhase phase)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  void *v20;
  char v21;

  v2 = v1;
  v3 = (_BYTE *)phase;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_5();
  if (*v3 != 2)
    return;
  v5 = v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  OUTLINED_FUNCTION_107_3(v5, v1);
  v6 = OUTLINED_FUNCTION_20_14();
  LODWORD(v5) = __swift_getEnumTagSinglePayload(v1, 1, v6);
  outlined destroy of URL?(v1, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  if ((_DWORD)v5 == 1)
  {
    __break(1u);
    return;
  }
  v7 = v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingFeatures;
  OUTLINED_FUNCTION_44_7();
  v8 = *(void **)v7;
  LOBYTE(v7) = *(_BYTE *)(v7 + 8);
  OUTLINED_FUNCTION_29_13(v8);
  OUTLINED_FUNCTION_44_12();
  specialized MLDataTable.subscript.getter((char)v8, v7, v9, v10);
  OUTLINED_FUNCTION_98(v8);
  specialized MLDataColumn.dropDuplicates()(v18, v19, (uint64_t)&v20);
  OUTLINED_FUNCTION_118_2(v18);
  v11 = specialized Array<A>.init(_:)(v20, v21);
  v12 = OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_classLabels;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_classLabels) = v11;
  OUTLINED_FUNCTION_132_0();
  if (!*(_QWORD *)(v2 + v12))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v17 = 0xD00000000000002ELL;
LABEL_10:
    OUTLINED_FUNCTION_18_0(v16, v17);
    return;
  }
  OUTLINED_FUNCTION_128_1();
  OUTLINED_FUNCTION_15_1();
  swift_bridgeObjectRetain_n();
  v13 = MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
  v14 = OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_model;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_model) = v13;
  swift_release();
  if (!*(_QWORD *)(v2 + v14))
  {
    OUTLINED_FUNCTION_12_0();
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v17 = 0xD00000000000003CLL;
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_3_1();
  MLHandActionClassifier.GraphCNN.loadPretrainedCoreMLModel()();
  if (!v15)
    MLHandActionClassifier.GraphCNN.initDevice()();
  OUTLINED_FUNCTION_12_0();
  swift_release();
}

Swift::tuple_Int_metrics_OpaquePointer_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandPoseClassifierTrainingSessionDelegate.train(from:)(Swift::Int from)
{
  char **v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  void *v29;
  Swift::Int v30;
  Swift::Int v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char **v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v68;
  uint64_t v69;
  double v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, _QWORD);
  double v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, _QWORD);
  double v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  Swift::Int v91;
  Swift::Int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  double v102;
  char v103;
  uint64_t v104;
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool result;

  v4 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_4_26(v4, (uint64_t)&v104);
  v89 = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v88 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v97 = v9;
  v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  v93 = *(_QWORD *)(v94 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_62_11(v11, v85);
  v12 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_64();
  v96 = v14;
  v15 = (int *)OUTLINED_FUNCTION_20_14();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_31_4();
  v20 = (int *)type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_50();
  v24 = (char *)(v22 - v23);
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_211();
  v98 = v26;
  v27 = (uint64_t)v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sessionParameters;
  v28 = type metadata accessor for MLTrainingSessionParameters();
  v31 = *(_QWORD *)(v27 + *(int *)(v28 + 20));
  if (__OFADD__(from, v31))
  {
    __break(1u);
    goto LABEL_40;
  }
  v32 = *(_QWORD *)(v27 + *(int *)(v28 + 28));
  if (__OFSUB__(v32, from))
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v92 = from;
  v90 = v32;
  v91 = from + v31;
  if (v31 >= v32 - from)
    v33 = v32 - from;
  else
    v33 = v31;
  v34 = (uint64_t)v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v34, v2, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  if (!__swift_getEnumTagSinglePayload(v2, 1, (uint64_t)v15))
  {
    v87 = v33;
    outlined init with copy of MLTrainingSessionParameters(v2, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
    outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
    outlined init with copy of MLTrainingSessionParameters((uint64_t)&v18[v15[5]], (uint64_t)v24, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    v37 = *(_QWORD *)&v18[v15[7]];
    v38 = *(_QWORD *)&v18[v15[8]];
    *(_QWORD *)&v24[v20[5]] = *(_QWORD *)&v18[v15[6]];
    *(_QWORD *)&v24[v20[6]] = v37;
    *(_QWORD *)&v24[v20[7]] = v38;
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
    v39 = v98;
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v24, v98, type metadata accessor for MLHandPoseClassifier.ModelParameters);
    v40 = *(uint64_t *)((char *)v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_model);
    if (!v40
      || (v41 = v1,
          (v42 = *(char **)((char *)v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_classLabels)) == 0))
    {
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_187();
      OUTLINED_FUNCTION_18_0(v56, v55 + 42);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v39, type metadata accessor for MLHandPoseClassifier.ModelParameters);
      goto LABEL_13;
    }
    v43 = *(_QWORD *)(v39 + v20[7]);
    v44 = *(_QWORD *)(v39 + v20[5]);
    v45 = *(_QWORD *)(v39 + v20[6]);
    v46 = v96;
    *v96 = 0;
    v46[1] = 0;
    *((_WORD *)v46 + 8) = 256;
    v47 = v42;
    type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)((char *)v46 + v12[5]) = v44;
    *(_QWORD *)((char *)v46 + v12[6]) = v45;
    *(_QWORD *)((char *)v46 + v12[7]) = 1;
    *(_QWORD *)((char *)v46 + v12[8]) = v43;
    v48 = v12[10];
    v49 = (uint64_t)v46;
    *(_QWORD *)((char *)v46 + v48) = 0x403E000000000000;
    v1 = (char **)((char *)v41 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingFeatures);
    OUTLINED_FUNCTION_44_7();
    v24 = *v1;
    LOBYTE(v1) = *((_BYTE *)v1 + 8);
    *(_QWORD *)&v100 = v24;
    BYTE8(v100) = (_BYTE)v1;
    v50 = (uint64_t)v41 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_validationFeatures;
    OUTLINED_FUNCTION_44_7();
    v51 = *(void **)v50;
    v52 = *(_BYTE *)(v50 + 8);
    v102 = *(double *)&v51;
    v103 = v52;
    swift_retain();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_29_13(v24);
    outlined copy of Result<_DataTable, Error>(v51, v52);
    v53 = v95;
    static MLHandActionClassifier.prepareDataset(classLabels:trainingFeatures:validationFeatures:parameters:)(v99, v97, v47, (uint64_t)&v100, (uint64_t)&v102);
    if (v53)
    {
      OUTLINED_FUNCTION_106_0();
      swift_release();
      outlined consume of Result<_DataTable, Error>(v51, v52);
      OUTLINED_FUNCTION_98(v24);
      outlined destroy of MLHandPoseClassifier.ModelParameters(v49, type metadata accessor for MLHandActionClassifier.ModelParameters);
      OUTLINED_FUNCTION_37_9(v54, type metadata accessor for MLHandPoseClassifier.ModelParameters);
      v28 = swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    v86 = v47;
    v95 = v40;
    outlined consume of Result<_DataTable, Error>(v51, v52);
    OUTLINED_FUNCTION_98(v24);
    v57 = v87;
    if (v87 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v58 = v97;
    v59 = v92;
    if (v87)
    {
      v60 = 0;
      v61 = OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_metricsAttributesDictionary;
      while (v57 != v60)
      {
        v30 = v59 + v60;
        if (__OFADD__(v59, v60))
          goto LABEL_42;
        ++v60;
        *(char **)((char *)v41 + v61) = (char *)MLHandActionClassifier.GraphCNN.iterateTraining(trainingData:validationData:epochCount:)(v99, v58, v30);
        v28 = OUTLINED_FUNCTION_132_0();
        v57 = v87;
        if (v87 == v60)
          goto LABEL_20;
      }
      goto LABEL_41;
    }
LABEL_20:
    OUTLINED_FUNCTION_36_11();
    v62 = OUTLINED_FUNCTION_223_0();
    OUTLINED_FUNCTION_87_3(v62, 0xED000073736F6C5FLL, v63);
    v64 = OUTLINED_FUNCTION_123();
    if (v101)
    {
      if ((OUTLINED_FUNCTION_10_23() & 1) != 0)
      {
        v65 = v102;
        v66 = MEMORY[0x24BEE4B00];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v100 = v66;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, isUniquelyReferenced_nonNull_native, v65);
        v68 = (_QWORD *)v100;
        OUTLINED_FUNCTION_27_16();
LABEL_25:
        OUTLINED_FUNCTION_36_11();
        OUTLINED_FUNCTION_87_3(0x69746164696C6176, 0xEF73736F6C5F6E6FLL, &v100);
        v69 = OUTLINED_FUNCTION_123();
        if (v101)
        {
          if ((OUTLINED_FUNCTION_10_23() & 1) != 0)
          {
            OUTLINED_FUNCTION_111_3();
            v70 = OUTLINED_FUNCTION_48_8();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(4, v71, v70);
            v68 = (_QWORD *)v100;
            OUTLINED_FUNCTION_27_16();
          }
        }
        else
        {
          OUTLINED_FUNCTION_74_7(v69, &demangling cache variable for type metadata for Any?);
        }
        OUTLINED_FUNCTION_36_11();
        OUTLINED_FUNCTION_87_3(0xD000000000000012, 0x800000021AFF16D0, &v100);
        v72 = OUTLINED_FUNCTION_123();
        if (v101)
        {
          type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
          if ((OUTLINED_FUNCTION_10_23() & 1) != 0)
          {
            v73 = v88;
            OUTLINED_FUNCTION_125_4();
            static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v73, v86[2]);
            OUTLINED_FUNCTION_106_4();
            OUTLINED_FUNCTION_34_3(v73, v74);
            OUTLINED_FUNCTION_111_3();
            v75 = OUTLINED_FUNCTION_48_8();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(3, v76, v75);
            OUTLINED_FUNCTION_124_2();
            OUTLINED_FUNCTION_27_16();
          }
        }
        else
        {
          OUTLINED_FUNCTION_74_7(v72, &demangling cache variable for type metadata for Any?);
        }
        OUTLINED_FUNCTION_36_11();
        OUTLINED_FUNCTION_87_3(0xD000000000000014, 0x800000021AFF1720, &v100);
        OUTLINED_FUNCTION_123();
        if (v101)
        {
          type metadata accessor for _MetricUtilities.ConfusionMatrixMeter();
          if ((OUTLINED_FUNCTION_10_23() & 1) != 0)
          {
            v77 = v88;
            OUTLINED_FUNCTION_125_4();
            v78 = v86[2];
            swift_bridgeObjectRelease();
            static _MetricUtilities.top1Accuracy(confusionMatrix:classCount:)(v77, v78);
            OUTLINED_FUNCTION_106_4();
            OUTLINED_FUNCTION_34_3(v77, v79);
            OUTLINED_FUNCTION_111_3();
            v80 = OUTLINED_FUNCTION_48_8();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(5, v81, v80);
            OUTLINED_FUNCTION_124_2();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v82 = OUTLINED_FUNCTION_50_9();
          OUTLINED_FUNCTION_74_7(v82, &demangling cache variable for type metadata for Any?);
        }
        LOBYTE(v1) = v91 >= v90;
        v24 = (char *)specialized _dictionaryUpCast<A, B, C, D>(_:)(v68);
        OUTLINED_FUNCTION_12_0();
        v83 = swift_release();
        OUTLINED_FUNCTION_93_1(v83, &demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>?);
        OUTLINED_FUNCTION_40_9();
        outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v96, type metadata accessor for MLHandActionClassifier.ModelParameters);
        OUTLINED_FUNCTION_77_5(v84, type metadata accessor for MLHandPoseClassifier.ModelParameters);
        v28 = v87;
        goto LABEL_13;
      }
    }
    else
    {
      OUTLINED_FUNCTION_74_7(v64, &demangling cache variable for type metadata for Any?);
    }
    v68 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_25;
  }
  outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_187();
  v28 = OUTLINED_FUNCTION_18_0(v36, v35 + 20);
LABEL_13:
  LOBYTE(v30) = v1 & 1;
  v29 = v24;
LABEL_44:
  result.finished = v30;
  result.metrics._rawValue = v29;
  result._0 = v28;
  return result;
}

Swift::tuple_Int_finished_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandPoseClassifierTrainingSessionDelegate.evaluate(from:)(Swift::Int from)
{
  Swift::Int v1;
  Swift::Bool v2;
  Swift::tuple_Int_finished_Bool result;

  v1 = 1;
  v2 = 1;
  result._0 = v1;
  result.finished = v2;
  return result;
}

void HandPoseClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  id v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  _BYTE v64[7];
  uint64_t v65;
  unint64_t v66;
  char v67;
  _BYTE v68[7];
  void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  _BYTE v75[7];
  uint64_t v76;
  uint64_t v77;
  char v78;
  _BYTE v79[7];
  char v80;
  _BYTE v81[7];
  _BYTE v82[7];
  _BYTE v83[7];
  id v84;
  char v85;

  OUTLINED_FUNCTION_8_1();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v7 = OUTLINED_FUNCTION_78();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_50();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v30 - v14;
  v16 = *v4;
  if (v16 == 2)
  {
    if (*(_QWORD *)(v2 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_model))
    {
      OUTLINED_FUNCTION_3_1();
      specialized _ModelCheckpoint<>.save(to:)();
      swift_release();
    }
  }
  else if (v16 == 1)
  {
    v32 = v12;
    v33 = v13;
    v17 = v2 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingFeatures;
    OUTLINED_FUNCTION_44_7();
    v18 = *(_BYTE *)(v17 + 8);
    v56 = *(id *)v17;
    LOBYTE(v57) = v18;
    outlined copy of Result<_DataTable, Error>(v56, v18);
    OUTLINED_FUNCTION_180_0();
    v34 = v6;
    URL.appendingPathComponent(_:)();
    MLDataTable.write(to:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
    OUTLINED_FUNCTION_92_2();
    if (!v1)
    {
      v19 = v2 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_validationFeatures;
      OUTLINED_FUNCTION_44_7();
      v20 = *(_BYTE *)(v19 + 8);
      v84 = *(id *)v19;
      v85 = v20;
      outlined copy of Result<_DataTable, Error>(v84, v20);
      OUTLINED_FUNCTION_51_10();
      OUTLINED_FUNCTION_152_0();
      MLDataTable.write(to:)();
      v31 = v19;
      OUTLINED_FUNCTION_91_3();
      OUTLINED_FUNCTION_89_4();
      v21 = v33;
      OUTLINED_FUNCTION_180_0();
      URL.appendingPathComponent(_:)();
      v80 = 1;
      LOBYTE(v56) = 1;
      *(_DWORD *)((char *)&v56 + 1) = *(_DWORD *)v83;
      HIDWORD(v56) = *(_DWORD *)&v83[3];
      v57 = 44;
      v58 = 0xE100000000000000;
      v59 = 0;
      v60 = 0xE000000000000000;
      v61 = 92;
      v62 = 0xE100000000000000;
      v63 = 1;
      *(_DWORD *)v64 = *(_DWORD *)v82;
      *(_DWORD *)&v64[3] = *(_DWORD *)&v82[3];
      v65 = 34;
      v66 = 0xE100000000000000;
      v67 = 1;
      *(_DWORD *)v68 = *(_DWORD *)v81;
      *(_DWORD *)&v68[3] = *(_DWORD *)&v81[3];
      v69 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      v70 = 10;
      v71 = 0xE100000000000000;
      v72 = 0;
      v73 = 0;
      v74 = 1;
      *(_DWORD *)v75 = *(_DWORD *)v79;
      *(_DWORD *)&v75[3] = *(_DWORD *)&v79[3];
      v76 = 0;
      MLDataTable.init(contentsOf:options:)(v21, &v56, (uint64_t)&v77);
      v22 = v78;
      v23 = *(id *)v17;
      v24 = *(_BYTE *)(v17 + 8);
      *(_QWORD *)v17 = v77;
      *(_BYTE *)(v17 + 8) = v22;
      outlined consume of Result<_DataTable, Error>(v23, v24);
      v25 = v32;
      OUTLINED_FUNCTION_51_10();
      URL.appendingPathComponent(_:)();
      v55 = 1;
      v35 = 1;
      v36 = 44;
      v37 = 0xE100000000000000;
      v38 = 0;
      v39 = 0xE000000000000000;
      v40 = 92;
      v41 = 0xE100000000000000;
      v42 = 1;
      v43 = 34;
      v44 = 0xE100000000000000;
      v45 = 1;
      v46 = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
      v47 = 10;
      v49 = 0;
      v50 = 0;
      v48 = 0xE100000000000000;
      v51 = 1;
      v52 = 0;
      MLDataTable.init(contentsOf:options:)(v25, &v35, (uint64_t)&v53);
      v26 = v54;
      v27 = v31;
      v28 = *(void **)v31;
      v29 = *(_BYTE *)(v31 + 8);
      *(_QWORD *)v31 = v53;
      *(_BYTE *)(v27 + 8) = v26;
      outlined consume of Result<_DataTable, Error>(v28, v29);
    }
  }
  OUTLINED_FUNCTION_7();
}

void HandPoseClassifierTrainingSessionDelegate.save(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t EnumTagSinglePayload;
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OUTLINED_FUNCTION_20_14();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_53_0();
  v9 = v1 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_44_7();
  outlined init with copy of URL?(v9, (uint64_t)v6, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_93_1(EnumTagSinglePayload, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v11 = 0xD000000000000030;
    *(_QWORD *)(v11 + 8) = 0x800000021AFF3E40;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    OUTLINED_FUNCTION_85_2(v11, 2, 0.0);
  }
  else
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v6, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
    MLHandPoseClassifier.PersistentParameters.save(toSessionDirectory:)(a1);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
  }
}

void HandPoseClassifierTrainingSessionDelegate.restore(from:phase:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  OUTLINED_FUNCTION_8_1();
  v24 = v0;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_50();
  v8 = v6 - v7;
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_127_3();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - v11;
  v13 = OUTLINED_FUNCTION_78();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_5();
  v25 = OUTLINED_FUNCTION_20_14();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_50();
  v18 = v16 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char **)((char *)&v24 - v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v0, v4, v13);
  MLHandPoseClassifier.PersistentParameters.init(sessionDirectory:)(v0, v21);
  if (!v1)
  {
    v22 = v8;
    v23 = (uint64_t)&v24[OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters];
    OUTLINED_FUNCTION_44_7();
    outlined init with copy of URL?(v23, (uint64_t)v12, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v25) == 1)
    {
      outlined destroy of URL?((uint64_t)v12, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v21, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
      __swift_storeEnumTagSinglePayload(v2, 0, 1, v25);
      outlined init with take of (key: URL, value: CIImage)?(v2, v22, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
      OUTLINED_FUNCTION_44_7();
      outlined assign with take of MLHandPoseClassifier.PersistentParameters?(v22, v23);
      swift_endAccess();
    }
    else
    {
      outlined init with take of MLHandPoseClassifier.ModelParameters((uint64_t)v12, v18, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.PersistentParameters);
      HandPoseClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)();
      OUTLINED_FUNCTION_92(v18);
      OUTLINED_FUNCTION_92((uint64_t)v21);
    }
  }
  OUTLINED_FUNCTION_7();
}

void HandPoseClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void *v56;
  char v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  char v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  char v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  void *v117;
  void *v118;
  void (*v119)(uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  char v151;
  id v152;
  unsigned __int8 v153;
  uint64_t v154;
  void *v155;

  OUTLINED_FUNCTION_8_1();
  v4 = v3;
  v6 = v5;
  v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<AnyColumn, AnyColumn>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v146 = v8;
  v9 = OUTLINED_FUNCTION_95_4();
  v154 = *(_QWORD *)(v9 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  v147 = v11;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_211();
  v149 = v13;
  type metadata accessor for MLHandPoseClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_208();
  v148 = v15;
  OUTLINED_FUNCTION_29_3();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v133 - v18;
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_127_3();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v133 - v21;
  OUTLINED_FUNCTION_20_14();
  OUTLINED_FUNCTION_69_6();
  if (!v24)
  {
    v44 = OUTLINED_FUNCTION_137_1(v23);
    v45 = OUTLINED_FUNCTION_249();
    v47 = v46;
    v152 = v2;
    OUTLINED_FUNCTION_249();
    OUTLINED_FUNCTION_60_8();
    OUTLINED_FUNCTION_49_0();
    v49 = 2.28757194e199;
    *(_OWORD *)v48 = xmmword_21AFEAD20;
LABEL_11:
    *(_QWORD *)(v48 + 16) = v45;
    *(_QWORD *)(v48 + 24) = v47;
    *(_QWORD *)(v48 + 32) = v44;
    *(_QWORD *)(v48 + 40) = &v152;
    OUTLINED_FUNCTION_85_2(v48, 3, v49);
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_69_6();
  if (!v24)
  {
    v44 = OUTLINED_FUNCTION_137_1(v25);
    v45 = OUTLINED_FUNCTION_249();
    v47 = v50;
    v152 = v2;
    OUTLINED_FUNCTION_249();
    OUTLINED_FUNCTION_60_8();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_187();
    v52 = "Maximum Iterations";
LABEL_10:
    *(_QWORD *)v48 = v51;
    *(_QWORD *)(v48 + 8) = (unint64_t)(v52 - 32) | 0x8000000000000000;
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_69_6();
  if (!v24)
  {
    v44 = OUTLINED_FUNCTION_137_1(v34);
    v45 = OUTLINED_FUNCTION_249();
    v47 = v53;
    v152 = v2;
    OUTLINED_FUNCTION_249();
    OUTLINED_FUNCTION_60_8();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_187();
    v51 = v54 + 2;
    v52 = "Augmentation options";
    goto LABEL_10;
  }
  MLHandPoseClassifier.DataSource.imagesWithAnnotations()(v26, v27, v28, v29, v30, v31, v32, v33, v133, v134, v135, v136, v137, (uint64_t)v138, (uint64_t)v139, v140, (uint64_t)v141, (uint64_t)v142, v143,
    v9);
  if (!v0)
  {
    v43 = v152;
    HIDWORD(v143) = v153;
    MLHandPoseClassifier.DataSource.imagesWithAnnotations()(v35, v36, v37, v38, v39, v40, v41, v42, v133, v134, v135, v136, v137, (uint64_t)v138, (uint64_t)v139, v140, (uint64_t)v141, (uint64_t)v142, v143,
      v144);
    v141 = v43;
    v142 = v152;
    v152 = v43;
    v55 = v153;
    v153 = BYTE4(v143);
    if (MLDataTable.size.getter() >= 1)
    {
      v152 = v142;
      v153 = v55;
      if (MLDataTable.size.getter() >= 1)
      {
        v56 = v141;
        v152 = v141;
        v57 = BYTE4(v143);
        v153 = BYTE4(v143);
        v58 = HandPoseClassifierTrainingSessionDelegate.pathsByLabel(for:)((uint64_t)&v152);
        v59 = v142;
        v152 = v142;
        v153 = v55;
        v60 = HandPoseClassifierTrainingSessionDelegate.pathsByLabel(for:)((uint64_t)&v152);
        specialized static Dictionary<>.== infix(_:_:)(v58, v60);
        v62 = v61;
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_30();
        if ((v62 & 1) != 0)
        {
          outlined consume of Result<_DataTable, Error>(v56, v57);
          v63 = v59;
          v64 = v55;
        }
        else
        {
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          v108 = OUTLINED_FUNCTION_49_0();
          OUTLINED_FUNCTION_5_25(v108, v109);
          outlined consume of Result<_DataTable, Error>(v59, v55);
          v63 = v56;
          v64 = v57;
        }
LABEL_9:
        outlined consume of Result<_DataTable, Error>(v63, v64);
        goto LABEL_12;
      }
    }
    outlined init with copy of MLTrainingSessionParameters(v6, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    if (OUTLINED_FUNCTION_84_4() == 3)
    {
      HIDWORD(v140) = v55;
      v65 = *(void **)v22;
      v66 = v22[8];
      v67 = (void *)*((_QWORD *)v22 + 3);
      v135 = *((_QWORD *)v22 + 2);
      v137 = *((_QWORD *)v22 + 4);
      v138 = (void *)*((_QWORD *)v22 + 5);
      v139 = v65;
      swift_bridgeObjectRelease();
      outlined init with copy of MLTrainingSessionParameters(v4, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
      if (OUTLINED_FUNCTION_84_4() == 3)
      {
        v155 = v67;
        v136 = 0;
        v68 = *(void **)v1;
        v69 = *(_BYTE *)(v1 + 8);
        v70 = *(void **)(v1 + 24);
        v149 = *(_QWORD *)(v1 + 16);
        v71 = *(_QWORD *)(v1 + 32);
        v72 = *(void **)(v1 + 40);
        swift_bridgeObjectRelease();
        v73 = v139;
        v150 = v139;
        v151 = v66;
        OUTLINED_FUNCTION_29_13(v139);
        v74 = (uint64_t)v138;
        MLDataTable.subscript.getter(v137, v138, (uint64_t)&v152);
        OUTLINED_FUNCTION_104();
        v75 = v73;
        v76 = v66;
        OUTLINED_FUNCTION_7_25(v75, v66, v77, v78, v79, v80, v81, v82, v133, v134, v135, v136, v137, (uint64_t)v138, (uint64_t)v139, v140, (uint64_t)v141, (uint64_t)v142, v143,
          v144,
          v145,
          v146,
          v147,
          v148);
        OUTLINED_FUNCTION_83_7();
        MLDataTable.subscript.getter(v71, v72, v83);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_7_25(v68, v69, v84, v85, v86, v87, v88, v89, v133, v134, v135, v136, v137, (uint64_t)v138, (uint64_t)v139, v140, (uint64_t)v141, (uint64_t)v142, v143,
          v144,
          v145,
          v146,
          v147,
          v148);
        v91 = specialized static Array<A>.== infix(_:_:)(v74, v90);
        OUTLINED_FUNCTION_104();
        OUTLINED_FUNCTION_30();
        if ((v91 & 1) != 0)
        {
          v92 = v139;
          v150 = v139;
          v151 = v66;
          outlined copy of Result<_DataTable, Error>(v139, v66);
          MLDataTable.subscript.getter(v135, v155, (uint64_t)&v152);
          OUTLINED_FUNCTION_106_0();
          OUTLINED_FUNCTION_7_25(v92, v66, v93, v94, v95, v96, v97, v98, v133, v134, v135, v136, v137, (uint64_t)v138, (uint64_t)v139, v140, (uint64_t)v141, (uint64_t)v142, v143,
            v144,
            v145,
            v146,
            v147,
            v148);
          OUTLINED_FUNCTION_83_7();
          MLDataTable.subscript.getter(v149, v70, v99);
          OUTLINED_FUNCTION_123();
          OUTLINED_FUNCTION_7_25(v68, v69, v100, v101, v102, v103, v104, v105, v133, v134, v135, v136, v137, (uint64_t)v138, (uint64_t)v139, v140, (uint64_t)v141, (uint64_t)v142, v143,
            v144,
            v145,
            v146,
            v147,
            v148);
          v107 = specialized static Array<A>.== infix(_:_:)(v66, v106);
          OUTLINED_FUNCTION_104();
          OUTLINED_FUNCTION_123();
          if ((v107 & 1) != 0)
          {
            OUTLINED_FUNCTION_56_8(v141, SBYTE4(v143));
            outlined consume of Result<_DataTable, Error>(v68, v69);
            outlined consume of Result<_DataTable, Error>(v139, v76);
            goto LABEL_12;
          }
        }
        else
        {
          OUTLINED_FUNCTION_123();
          swift_bridgeObjectRelease();
        }
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        v131 = OUTLINED_FUNCTION_49_0();
        OUTLINED_FUNCTION_5_25(v131, v132);
        outlined consume of Result<_DataTable, Error>(v68, v69);
        OUTLINED_FUNCTION_56_8(v139, v76);
        v63 = v141;
        v64 = BYTE4(v143);
        goto LABEL_9;
      }
      OUTLINED_FUNCTION_98(v139);
      OUTLINED_FUNCTION_88_4();
      OUTLINED_FUNCTION_104();
      v55 = HIDWORD(v140);
    }
    else
    {
      v1 = (uint64_t)v22;
    }
    OUTLINED_FUNCTION_82_5(v1);
    v110 = OUTLINED_FUNCTION_68_7();
    outlined init with copy of MLTrainingSessionParameters(v110, v111, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
    if (OUTLINED_FUNCTION_84_4() == 5)
    {
      HIDWORD(v140) = v55;
      v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
      v113 = (uint64_t *)&v19[*(int *)(v112 + 48)];
      v114 = *v113;
      v115 = v113[1];
      v116 = &v19[*(int *)(v112 + 64)];
      v118 = *(void **)v116;
      v117 = (void *)*((_QWORD *)v116 + 1);
      v137 = v114;
      v138 = v118;
      v139 = v117;
      swift_bridgeObjectRelease();
      v119 = *(void (**)(uint64_t))(v154 + 32);
      v120 = OUTLINED_FUNCTION_68_7();
      v121 = v144;
      v119(v120);
      v122 = v4;
      v123 = v148;
      OUTLINED_FUNCTION_97_3(v122, v124, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
      if (OUTLINED_FUNCTION_84_4() == 5)
      {
        v125 = (uint64_t *)(v123 + *(int *)(v112 + 48));
        v127 = *v125;
        v126 = v125[1];
        v133 = v127;
        v134 = v126;
        v135 = v115;
        v136 = 0;
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, uint64_t, uint64_t))v119)(v147, v123, v121);
        MEMORY[0x220758A1C](v138, v139);
        OUTLINED_FUNCTION_12_0();
        OUTLINED_FUNCTION_135();
      }
      v129 = OUTLINED_FUNCTION_68_7();
      v130(v129);
      OUTLINED_FUNCTION_56_8(v141, SBYTE4(v143));
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_104();
      v128 = v123;
    }
    else
    {
      OUTLINED_FUNCTION_108_4(v141);
      outlined consume of Result<_DataTable, Error>(v142, v55);
      v128 = (uint64_t)v19;
    }
    outlined destroy of MLHandPoseClassifier.ModelParameters(v128, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
  }
LABEL_12:
  OUTLINED_FUNCTION_7();
}

uint64_t closure #1 in HandPoseClassifierTrainingSessionDelegate.verifyThatParametersAreCompatible(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[40];
  _BYTE v31[24];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  outlined init with copy of URL?(a1, (uint64_t)v31, &demangling cache variable for type metadata for Any?);
  if (v32)
  {
    if ((OUTLINED_FUNCTION_136_2() & 1) == 0)
    {
      v41 = 0;
      v39 = 0u;
      v40 = 0u;
    }
  }
  else
  {
    OUTLINED_FUNCTION_131_2(v3, &demangling cache variable for type metadata for Any?, v4, v5, v6, v7, v8, v9, v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1));
    v39 = 0u;
    v40 = 0u;
    v41 = 0;
  }
  outlined init with copy of URL?(a2, (uint64_t)v31, &demangling cache variable for type metadata for Any?);
  if (v32)
  {
    if ((OUTLINED_FUNCTION_136_2() & 1) == 0)
    {
      v38 = 0;
      v36 = 0u;
      v37 = 0u;
    }
  }
  else
  {
    OUTLINED_FUNCTION_131_2(v10, &demangling cache variable for type metadata for Any?, v11, v12, v13, v14, v15, v16, v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1));
    v36 = 0u;
    v37 = 0u;
    v38 = 0;
  }
  outlined init with copy of URL?((uint64_t)&v39, (uint64_t)v31, &demangling cache variable for type metadata for AnyHashable?);
  outlined init with copy of URL?((uint64_t)&v36, (uint64_t)&v33, &demangling cache variable for type metadata for AnyHashable?);
  if (v32)
  {
    outlined init with copy of URL?((uint64_t)v31, (uint64_t)v30, &demangling cache variable for type metadata for AnyHashable?);
    if (*((_QWORD *)&v34 + 1))
    {
      v27 = v33;
      v28 = v34;
      v29 = v35;
      v24 = MEMORY[0x22075AE88](v30, &v27);
      outlined destroy of AnyHashable((uint64_t)&v27);
      v17 = outlined destroy of AnyHashable((uint64_t)v30);
      v25 = &demangling cache variable for type metadata for AnyHashable?;
    }
    else
    {
      v17 = outlined destroy of AnyHashable((uint64_t)v30);
      v24 = 0;
      v25 = (uint64_t *)&demangling cache variable for type metadata for (AnyHashable?, AnyHashable?);
    }
  }
  else
  {
    if (*((_QWORD *)&v34 + 1))
      v25 = (uint64_t *)&demangling cache variable for type metadata for (AnyHashable?, AnyHashable?);
    else
      v25 = &demangling cache variable for type metadata for AnyHashable?;
    if (*((_QWORD *)&v34 + 1))
      v24 = 0;
    else
      v24 = -1;
  }
  OUTLINED_FUNCTION_131_2(v17, v25, v18, v19, v20, v21, v22, v23, v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1));
  outlined destroy of URL?((uint64_t)&v36, &demangling cache variable for type metadata for AnyHashable?);
  outlined destroy of URL?((uint64_t)&v39, &demangling cache variable for type metadata for AnyHashable?);
  return v24 & 1;
}

uint64_t HandPoseClassifierTrainingSessionDelegate.pathsByLabel(for:)(uint64_t a1)
{
  void *v1;
  char v2;
  void *v3;
  char v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *@<X8>);
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  char v28;
  uint64_t v29;
  _BOOL8 v30;
  Swift::Int v31;
  unint64_t v32;
  char v33;
  Swift::Bool v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char v49;
  uint64_t result;
  void (*v51)(_QWORD *@<X8>);
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  char v57;
  void *v58;
  char v59;
  void *v60;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(a1 + 8);
  v58 = v1;
  v59 = v2;
  outlined copy of Result<_DataTable, Error>(v1, v2);
  MLDataTable.subscript.getter(0x7461506F65646976, (void *)0xE900000000000068, (uint64_t)&v55);
  v3 = v55;
  v4 = (char)v56;
  if ((v56 & 1) != 0
    || (OUTLINED_FUNCTION_121_4(),
        _UntypedColumn.type.getter(&v58),
        outlined consume of Result<_DataTable, Error>(v3, 0),
        v58 != 2))
  {
    outlined consume of Result<_DataTable, Error>(v3, v4);
    v48 = v1;
    v49 = v2;
LABEL_31:
    outlined consume of Result<_DataTable, Error>(v48, v49);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    return Dictionary.init(dictionaryLiteral:)();
  }
  OUTLINED_FUNCTION_58_6();
  v58 = v1;
  v59 = v2;
  outlined copy of Result<_DataTable, Error>(v1, v2);
  v5 = OUTLINED_FUNCTION_44_12();
  MLDataTable.subscript.getter(v5, v6, v7);
  v8 = v55;
  if ((v56 & 1) != 0
    || (outlined copy of Result<_DataTable, Error>(v55, 0),
        _UntypedColumn.type.getter(&v58),
        outlined consume of Result<_DataTable, Error>(v8, 0),
        v58 != 2))
  {
    OUTLINED_FUNCTION_115_3();
    OUTLINED_FUNCTION_58_6();
    v48 = v3;
    v49 = 0;
    goto LABEL_31;
  }
  v53 = v8;
  OUTLINED_FUNCTION_58_6();
  OUTLINED_FUNCTION_121_4();
  v9 = CMLColumn.size.getter();
  OUTLINED_FUNCTION_102(v3);
  if (v9 < 0)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v60 = v3;
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = (_QWORD *)MEMORY[0x24BEE4B00];
    v51 = specialized thunk for @callee_guaranteed () -> (@owned [URL]);
    v52 = v9;
    while (v9 != v11)
    {
      v13 = outlined copy of Result<_DataTable, Error>(v8, 0);
      OUTLINED_FUNCTION_116_4((uint64_t)v13, v14, v15, v16, v17);
      v18 = v55;
      v19 = (unint64_t)v56;
      if (v57 != 2)
      {
        outlined consume of MLDataValue(v55, v56, v57);
        v18 = 0;
        v19 = 0xE000000000000000;
      }
      OUTLINED_FUNCTION_102(v8);
      v20 = outlined copy of Result<_DataTable, Error>(v60, 0);
      OUTLINED_FUNCTION_116_4((uint64_t)v20, v21, v22, v23, v24);
      v25 = (unint64_t)v56;
      if (v57 == 2)
      {
        v54 = v55;
      }
      else
      {
        outlined consume of MLDataValue(v55, v56, v57);
        v54 = 0;
        v25 = 0xE000000000000000;
      }
      OUTLINED_FUNCTION_102(v60);
      outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v10);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v55 = v12;
      v27 = OUTLINED_FUNCTION_75_10();
      v29 = v12[2];
      v30 = (v28 & 1) == 0;
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
        goto LABEL_36;
      v32 = v27;
      v33 = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
      v34 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v31);
      v12 = v55;
      if (v34)
      {
        v35 = OUTLINED_FUNCTION_75_10();
        if ((v33 & 1) != (v36 & 1))
          goto LABEL_39;
        v32 = v35;
      }
      OUTLINED_FUNCTION_27_16();
      if ((v33 & 1) == 0)
      {
        v12[(v32 >> 6) + 8] |= 1 << v32;
        v37 = (_QWORD *)(v12[6] + 16 * v32);
        *v37 = v18;
        v37[1] = v19;
        *(_QWORD *)(v12[7] + 8 * v32) = MEMORY[0x24BEE4AF8];
        v38 = v12[2];
        v39 = v38 + 1;
        v40 = __OFADD__(v38, 1);
        swift_bridgeObjectRetain();
        if (v40)
          goto LABEL_37;
        v12[2] = v39;
      }
      swift_bridgeObjectRetain();
      v41 = v12[7];
      OUTLINED_FUNCTION_106_0();
      v42 = *(_QWORD *)(v41 + 8 * v32);
      v43 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v41 + 8 * v32) = v42;
      if ((v43 & 1) == 0)
      {
        OUTLINED_FUNCTION_101_6();
        v42 = v46;
        *(_QWORD *)(v41 + 8 * v32) = v46;
      }
      v44 = *(_QWORD *)(v42 + 16);
      if (v44 >= *(_QWORD *)(v42 + 24) >> 1)
      {
        OUTLINED_FUNCTION_101_6();
        v42 = v47;
        *(_QWORD *)(v41 + 8 * v32) = v47;
      }
      ++v11;
      *(_QWORD *)(v42 + 16) = v44 + 1;
      v45 = v42 + 16 * v44;
      *(_QWORD *)(v45 + 32) = v54;
      *(_QWORD *)(v45 + 40) = v25;
      swift_bridgeObjectRelease();
      v10 = specialized thunk for @callee_guaranteed () -> (@owned [URL]);
      v9 = v52;
      v8 = v53;
      if (v52 == v11)
        goto LABEL_34;
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v51 = 0;
  v12 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_34:
  OUTLINED_FUNCTION_102(v60);
  OUTLINED_FUNCTION_102(v8);
  outlined consume of (@escaping @callee_guaranteed @Sendable (@in_guaranteed Event) -> ())?((uint64_t)v51);
  return (uint64_t)v12;
}

uint64_t HandPoseClassifierTrainingSessionDelegate.deinit()
{
  uint64_t v0;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v0 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sessionParameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined destroy of URL?(v0 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingParameters, &demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  outlined consume of MLDataTable?(*(void **)(v0 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTable), *(_BYTE *)(v0 + OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_sourceTable + 8));
  OUTLINED_FUNCTION_72_6(OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_trainingFeatures);
  OUTLINED_FUNCTION_72_6(OBJC_IVAR____TtC8CreateML41HandPoseClassifierTrainingSessionDelegate_validationFeatures);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t HandPoseClassifierTrainingSessionDelegate.__deallocating_deinit()
{
  HandPoseClassifierTrainingSessionDelegate.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HandPoseClassifierTrainingSessionDelegate()
{
  return type metadata accessor for HandPoseClassifierTrainingSessionDelegate();
}

uint64_t type metadata accessor for HandPoseClassifierTrainingSessionDelegate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HandPoseClassifierTrainingSessionDelegate;
  if (!type metadata singleton initialization cache for HandPoseClassifierTrainingSessionDelegate)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for HandPoseClassifierTrainingSessionDelegate()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for MLTrainingSessionParameters();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MLHandPoseClassifier.PersistentParameters?();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void type metadata accessor for MLHandPoseClassifier.PersistentParameters?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?)
  {
    type metadata accessor for MLHandPoseClassifier.PersistentParameters();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  }
}

void protocol witness for TrainingSessionDelegate.setUp() in conformance HandPoseClassifierTrainingSessionDelegate()
{
  HandPoseClassifierTrainingSessionDelegate.setUp()();
}

void protocol witness for TrainingSessionDelegate.resume(from:) in conformance HandPoseClassifierTrainingSessionDelegate(Swift::OpaquePointer a1)
{
  HandPoseClassifierTrainingSessionDelegate.resume(from:)(a1);
}

unint64_t protocol witness for TrainingSessionDelegate.itemCount(phase:) in conformance HandPoseClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  return (unint64_t)HandPoseClassifierTrainingSessionDelegate.itemCount(phase:)(a1);
}

void protocol witness for TrainingSessionDelegate.transitionTo(phase:) in conformance HandPoseClassifierTrainingSessionDelegate(CreateML::MLPhase a1)
{
  HandPoseClassifierTrainingSessionDelegate.transitionTo(phase:)(a1);
}

uint64_t protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance HandPoseClassifierTrainingSessionDelegate(Swift::Int a1)
{
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  _BOOL8 finished;
  Swift::tuple_Int_finished_Bool v8;

  v8 = HandPoseClassifierTrainingSessionDelegate.extractFeatures(from:)(a1);
  if (v3)
  {
    v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
    v5 = v1;
    finished = 0;
  }
  else
  {
    v2 = v8._0;
    v8._0 = *(_QWORD *)(v1 + 8);
    finished = v8.finished;
    v5 = v1;
  }
  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(v4, v5, v2, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance HandPoseClassifierTrainingSessionDelegate(Swift::Int a1)
{
  Swift::Int *v1;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 finished;
  Swift::Int v6;
  void *rawValue;
  Swift::tuple_Int_metrics_OpaquePointer_finished_Bool v9;

  v9 = HandPoseClassifierTrainingSessionDelegate.train(from:)(a1);
  if (v4)
  {
    v9._0 = v1[1];
    v9.metrics._rawValue = v1;
    finished = 0;
  }
  else
  {
    v6 = v9._0;
    rawValue = v9.metrics._rawValue;
    v9._0 = v1[1];
    finished = v9.finished;
    v9.metrics._rawValue = v1;
    *(_QWORD *)&v9.finished = v6;
    v3 = (uint64_t)rawValue;
  }
  return protocol witness for TrainingSessionDelegate.train(from:) in conformance HandPoseClassifierTrainingSessionDelegate((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9._0, (uint64_t)v9.metrics._rawValue, *(uint64_t *)&v9.finished, v3, finished);
}

uint64_t protocol witness for TrainingSessionDelegate.evaluate(from:) in conformance HandPoseClassifierTrainingSessionDelegate()
{
  uint64_t v0;

  return protocol witness for TrainingSessionDelegate.extractFeatures(from:) in conformance SoundClassifierTrainingSessionDelegate(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8), v0, 1, 1);
}

uint64_t protocol witness for TrainingSessionDelegate.saveCheckpoint(to:phase:iteration:) in conformance HandPoseClassifierTrainingSessionDelegate()
{
  char v0;

  HandPoseClassifierTrainingSessionDelegate.saveCheckpoint(to:phase:iteration:)();
  return v0 & 1;
}

void protocol witness for TrainingSessionCodable.save(to:) in conformance HandPoseClassifierTrainingSessionDelegate(uint64_t a1)
{
  HandPoseClassifierTrainingSessionDelegate.save(to:)(a1);
}

void protocol witness for TrainingSessionCodable.restore(from:phase:) in conformance HandPoseClassifierTrainingSessionDelegate()
{
  HandPoseClassifierTrainingSessionDelegate.restore(from:phase:)();
}

uint64_t protocol witness for TrainingSessionDelegate.train(from:) in conformance HandPoseClassifierTrainingSessionDelegate(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a1(a3, a4, a5);
}

void lazy protocol witness table accessor for type AnyColumn and conformance AnyColumn(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = type metadata accessor for AnyColumn();
    atomic_store(MEMORY[0x22075B938](a2, v4), a1);
  }
  OUTLINED_FUNCTION_22();
}

uint64_t outlined assign with take of MLHandPoseClassifier.PersistentParameters?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandPoseClassifier.PersistentParameters?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_5_25(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = 1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 4;
  return swift_willThrow(0.0);
}

void OUTLINED_FUNCTION_7_25(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  outlined consume of Result<_DataTable, Error>(a1, a2);
  v25 = *(_BYTE *)(v24 - 96);
  *(_QWORD *)(v24 - 120) = *(_QWORD *)(v24 - 104);
  *(_BYTE *)(v24 - 112) = v25;
  Array<A>.init(_:)(v24 - 120, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
}

uint64_t OUTLINED_FUNCTION_10_23()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_16_20()
{
  char v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v1, v0);
}

uint64_t OUTLINED_FUNCTION_20_14()
{
  return type metadata accessor for MLHandPoseClassifier.PersistentParameters();
}

uint64_t OUTLINED_FUNCTION_25_11()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_27_22()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 336) + 8))(v0, *(_QWORD *)(v1 - 328));
}

id OUTLINED_FUNCTION_29_13(void *a1)
{
  char v1;

  return outlined copy of Result<_DataTable, Error>(a1, v1);
}

void OUTLINED_FUNCTION_32_10()
{
  unsigned __int8 v0;
  void *v1;

  outlined consume of MLDataTable?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_36_11()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_37_9(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 224), a2);
}

_QWORD *OUTLINED_FUNCTION_38_8()
{
  return MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
}

uint64_t OUTLINED_FUNCTION_40_9()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 264) + 8))(*(_QWORD *)(v0 - 216), *(_QWORD *)(v0 - 256));
}

uint64_t OUTLINED_FUNCTION_44_12()
{
  return 0x6C6562616CLL;
}

void OUTLINED_FUNCTION_45_7(double a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v5;

  specialized MLDataTable.subscript.getter(a4, a5, v5 - 136, a1);
}

double OUTLINED_FUNCTION_48_8()
{
  uint64_t v0;
  uint64_t v1;
  double v2;

  *(_QWORD *)(v1 - 208) = v0;
  return v2;
}

uint64_t OUTLINED_FUNCTION_49_6()
{
  return 0x636E657265666E69;
}

uint64_t OUTLINED_FUNCTION_50_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_51_10()
{
  return 0x69746164696C6176;
}

void OUTLINED_FUNCTION_56_8(void *a1, char a2)
{
  uint64_t v2;

  outlined consume of Result<_DataTable, Error>(a1, a2);
  outlined consume of Result<_DataTable, Error>(*(id *)(v2 - 184), *(_DWORD *)(v2 - 196));
}

uint64_t OUTLINED_FUNCTION_57_6@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return static MLHandPoseClassifier.buildFeatureTable(features:labels:sessionIds:imageFiles:)(v1, v1, v1, v1, a1);
}

void OUTLINED_FUNCTION_58_6()
{
  char v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v1, v0);
}

unint64_t OUTLINED_FUNCTION_60_8()
{
  return lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
}

uint64_t OUTLINED_FUNCTION_61_7()
{
  return 0x697461756C617665;
}

void OUTLINED_FUNCTION_62_11(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 216) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_64_7@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return static MLHandPoseClassifier.buildFeatureTable(features:labels:sessionIds:imageFiles:)(v1, v1, v1, v1, a1);
}

void OUTLINED_FUNCTION_65_11(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v2 - 192), a2);
}

void OUTLINED_FUNCTION_66_8(uint64_t a1@<X8>)
{
  uint64_t v1;

  outlined consume of Result<_DataTable, Error>(*(id *)(v1 + a1), *(_BYTE *)(v1 + a1 + 8));
}

uint64_t OUTLINED_FUNCTION_67_7()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t OUTLINED_FUNCTION_68_7()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_70_8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of (key: URL, value: CIImage)?(a1, a2, v2);
}

void OUTLINED_FUNCTION_72_6(uint64_t a1@<X8>)
{
  uint64_t v1;

  outlined consume of Result<_DataTable, Error>(*(id *)(v1 + a1), *(_BYTE *)(v1 + a1 + 8));
}

void OUTLINED_FUNCTION_74_7(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(v2 - 208, a2);
}

unint64_t OUTLINED_FUNCTION_75_10()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0, v1);
}

void OUTLINED_FUNCTION_77_5(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, a2);
}

void OUTLINED_FUNCTION_82_5(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandPoseClassifier.ModelParameters(a1, v1);
}

id OUTLINED_FUNCTION_83_7()
{
  char v0;
  void *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = v1;
  *(_BYTE *)(v2 - 112) = v0;
  return outlined copy of Result<_DataTable, Error>(v1, v0);
}

uint64_t OUTLINED_FUNCTION_84_4()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_87_3(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  specialized Dictionary.subscript.getter(a1, a2, v3, a3);
}

uint64_t OUTLINED_FUNCTION_88_4()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_89_4()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)(v0 - 152), *(_BYTE *)(v0 - 144));
}

uint64_t OUTLINED_FUNCTION_91_3()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

void OUTLINED_FUNCTION_92_2()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 208), *(_BYTE *)(v0 + 216));
}

uint64_t OUTLINED_FUNCTION_93_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_95_4()
{
  return type metadata accessor for DataFrame();
}

void OUTLINED_FUNCTION_96_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(a1, a2, a3, a4, a5, a6, v6);
}

void OUTLINED_FUNCTION_97_3(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with copy of MLTrainingSessionParameters(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_98_3()
{
  return swift_endAccess();
}

void OUTLINED_FUNCTION_99_5(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  MLDataTable.init(contentsOf:options:)(a1, a2, a3);
}

void OUTLINED_FUNCTION_100_4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + a1;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = -1;
}

void OUTLINED_FUNCTION_101_6()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_102_2(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_103_5()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_104_3()
{
  return dispatch thunk of Sequence.makeIterator()();
}

void OUTLINED_FUNCTION_107_3(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of URL?(a1, a2, v2);
}

void OUTLINED_FUNCTION_108_4(void *a1)
{
  char v1;

  outlined consume of Result<_DataTable, Error>(a1, v1);
}

uint64_t OUTLINED_FUNCTION_109_4()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t OUTLINED_FUNCTION_110_4()
{
  return 0x6974636172747865;
}

uint64_t OUTLINED_FUNCTION_111_3()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_113_3()
{
  return MLDataTable.size.getter();
}

void OUTLINED_FUNCTION_115_3()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

void OUTLINED_FUNCTION_116_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  _UntypedColumn.valueAtIndex(index:)(v5, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_117_2()
{
  uint64_t v0;

  return specialized Array<A>.init(_:)(*(void **)(v0 - 112), *(_BYTE *)(v0 - 104));
}

void OUTLINED_FUNCTION_118_2(void *a1)
{
  char v1;

  outlined consume of Result<_DataTable, Error>(a1, v1);
}

uint64_t OUTLINED_FUNCTION_119_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_120_4()
{
  uint64_t v0;

  return v0;
}

id OUTLINED_FUNCTION_121_4()
{
  void *v0;

  return outlined copy of Result<_DataTable, Error>(v0, 0);
}

id OUTLINED_FUNCTION_122_2()
{
  unsigned __int8 v0;
  void *v1;

  return outlined copy of MLDataTable?(v1, v0);
}

void OUTLINED_FUNCTION_123_3(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of URL?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_124_2()
{
  return swift_release();
}

void OUTLINED_FUNCTION_125_4()
{
  _MetricUtilities.ConfusionMatrixMeter.value(normalized:)();
}

uint64_t OUTLINED_FUNCTION_128_1()
{
  return type metadata accessor for MLHandActionClassifier.GraphCNN(0);
}

void OUTLINED_FUNCTION_130_2()
{
  unsigned __int8 v0;
  void *v1;

  outlined consume of MLDataTable?(v1, v0);
}

void OUTLINED_FUNCTION_131_2(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  outlined destroy of URL?((uint64_t)va, a2);
}

uint64_t OUTLINED_FUNCTION_132_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_135()
{
  JUMPOUT(0x220758A1CLL);
}

uint64_t OUTLINED_FUNCTION_136_2()
{
  return swift_dynamicCast();
}

unint64_t OUTLINED_FUNCTION_137_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return lazy protocol witness table accessor for type Int and conformance Int();
}

void static _TextUtilities.getTextLabels(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  os_log_type_t v80;
  Swift::String v81;
  Swift::String v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t inited;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  char v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  void *v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  void (*v118)(uint64_t, unint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  int v121;
  __int128 v122;
  unint64_t v123;
  unint64_t v124;
  void *v125;

  v94 = a1;
  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v115 = v4;
  v106 = type metadata accessor for UTType();
  v107 = *(_QWORD *)(v106 - 8);
  MEMORY[0x24BDAC7A8](v106);
  OUTLINED_FUNCTION_64();
  v116 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v92 - v10;
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v92 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v92 - v20;
  type metadata accessor for MLTextClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLTextClassifier.DataSource(a2, (uint64_t)v24);
  v25 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v25(v21, v24, v12);
  v26 = v125;
  static _FileUtilities.getReadableSubdirectoriesOfDirectory(at:)();
  if (v26)
  {
    OUTLINED_FUNCTION_5_26((uint64_t)v21, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    return;
  }
  v125 = 0;
  v117 = v25;
  v112 = v15;
  v113 = v8;
  v104 = v11;
  v93 = v21;
  v99 = *(_QWORD *)(v27 + 16);
  if (v99)
  {
    v28 = v107;
    v29 = (uint64_t)v104;
    v30 = (uint64_t)v113;
    v31 = (uint64_t)v112;
  }
  else
  {
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
    v32 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_21AFE7DA0;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 16))(v33 + v32, v93, v12);
    v27 = v33;
    v28 = v107;
    v30 = (uint64_t)v113;
    v31 = (uint64_t)v112;
    v99 = *(_QWORD *)(v33 + 16);
    if (!v99)
    {
      v103 = v33;
      v101 = MEMORY[0x24BEE4AF8];
      v102 = MEMORY[0x24BEE4AF8];
      v29 = (uint64_t)v104;
LABEL_41:
      v73 = v13;
      OUTLINED_FUNCTION_25_8(v29, 1);
LABEL_42:
      OUTLINED_FUNCTION_50_9();
      v86 = v94;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
      *(_QWORD *)(inited + 32) = 1954047348;
      *(_QWORD *)(inited + 40) = 0xE400000000000000;
      v123 = v101;
      MEMORY[0x24BDAC7A8](inited);
      *(&v92 - 2) = (uint64_t)&v123;
      _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
      v88 = OUTLINED_FUNCTION_6_27();
      *(_QWORD *)(inited + 48) = v18;
      *(_BYTE *)(inited + 56) = v13 & 1;
      *(_QWORD *)(inited + 64) = 0x6C6562616CLL;
      *(_QWORD *)(inited + 72) = 0xE500000000000000;
      v123 = v102;
      MEMORY[0x24BDAC7A8](v88);
      *(&v92 - 2) = (uint64_t)&v123;
      _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
      OUTLINED_FUNCTION_6_27();
      *(_QWORD *)(inited + 80) = v18;
      *(_BYTE *)(inited + 88) = v13 & 1;
      v89 = Dictionary.init(dictionaryLiteral:)();
      v90 = v125;
      specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v89, (uint64_t)&v123);
      if (!v90)
      {
        v91 = v124;
        *(_QWORD *)v86 = v123;
        *(_BYTE *)(v86 + 8) = v91;
      }
      OUTLINED_FUNCTION_5_26((uint64_t)v93, *(uint64_t (**)(uint64_t, uint64_t))(v73 + 8));
      return;
    }
    v29 = (uint64_t)v104;
  }
  v34 = 0;
  v95 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v100 = v27 + v95;
  v111 = 0x800000021AFF49B0;
  v122 = xmmword_21AFE7DA0;
  v101 = MEMORY[0x24BEE4AF8];
  v102 = MEMORY[0x24BEE4AF8];
  v98 = v18;
  v103 = v27;
  while (v34 < *(_QWORD *)(v27 + 16))
  {
    v35 = *(_QWORD *)(v13 + 72);
    v108 = v34;
    v118 = *(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16);
    v119 = v35;
    v118(v29, v100 + v35 * v34, v12);
    OUTLINED_FUNCTION_25_8(v29, 0);
    if (__swift_getEnumTagSinglePayload(v29, 1, v12) == 1)
    {
      v73 = v13;
      goto LABEL_42;
    }
    OUTLINED_FUNCTION_11_23((uint64_t)v18, v29);
    v105 = URL.lastPathComponent.getter();
    v110 = v36;
    static UTType.text.getter();
    v37 = v125;
    static _FileUtilities.readableFiles(at:type:)();
    v39 = v37;
    if (v37)
    {
      OUTLINED_FUNCTION_25_12(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_221_0((uint64_t)v18);
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_50_9();
LABEL_39:
      OUTLINED_FUNCTION_221_0((uint64_t)v93);
      return;
    }
    v40 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8);
    v120 = v38;
    OUTLINED_FUNCTION_25_12(v40);
    v41 = *(_QWORD *)(v120 + 16);
    if (v41)
    {
      v109 = 0;
      v42 = 0;
      v114 = v41;
      v97 = v41 - 1;
      v43 = v120 + v95;
      v96 = v120 + v95;
      do
      {
        v28 = v43 + v119 * v42;
        v44 = v42;
        v125 = 0;
        while (1)
        {
          if (v44 >= *(_QWORD *)(v120 + 16))
          {
            __break(1u);
            goto LABEL_46;
          }
          v118(v30, v28, v12);
          OUTLINED_FUNCTION_25_8(v30, 0);
          if (__swift_getEnumTagSinglePayload(v30, 1, v12) == 1)
          {
            swift_bridgeObjectRelease();
            v18 = v98;
            OUTLINED_FUNCTION_20_15();
            goto LABEL_32;
          }
          OUTLINED_FUNCTION_11_23(v31, v30);
          static String.Encoding.utf8.getter();
          v45 = v125;
          v46 = String.init(contentsOf:encoding:)();
          v39 = v45;
          if (!v45)
            break;
          v125 = 0;
          ++v44;

          v123 = 0;
          v124 = 0xE000000000000000;
          _StringGuts.grow(_:)(34);
          OUTLINED_FUNCTION_23_15();
          v123 = 0xD00000000000001FLL;
          v124 = v111;
          v48._countAndFlagsBits = URL.path.getter();
          String.append(_:)(v48);
          swift_bridgeObjectRelease();
          v49._countAndFlagsBits = 46;
          v49._object = (void *)0xE100000000000000;
          String.append(_:)(v49);
          v50 = v123;
          v51 = v124;
          v121 = static os_log_type_t.info.getter();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
          v52 = OUTLINED_FUNCTION_9_1();
          *(_OWORD *)(v52 + 16) = v122;
          v53 = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v52 + 56) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v52 + 32) = v50;
          *(_QWORD *)(v52 + 40) = v51;
          swift_bridgeObjectRetain();
          print(_:separator:terminator:)();
          swift_bridgeObjectRelease();
          type metadata accessor for OS_os_log();
          v54 = (void *)static OS_os_log.default.getter();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          v55 = v13;
          v56 = v12;
          v57 = OUTLINED_FUNCTION_9_1();
          *(_OWORD *)(v57 + 16) = v122;
          *(_QWORD *)(v57 + 56) = v53;
          *(_QWORD *)(v57 + 64) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v57 + 32) = v50;
          *(_QWORD *)(v57 + 40) = v51;
          swift_bridgeObjectRetain();
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();

          v12 = v56;
          v13 = v55;
          v31 = (uint64_t)v112;
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_5_26(v31, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
          v28 += v119;
          v30 = (uint64_t)v113;
          if (v114 == v44)
          {
            v39 = v125;
            OUTLINED_FUNCTION_20_15();
            goto LABEL_31;
          }
        }
        v58 = v46;
        v59 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_4_32();
          v101 = v67;
        }
        v28 = v107;
        v60 = *(_QWORD *)(v101 + 16);
        if (v60 >= *(_QWORD *)(v101 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v101 = v68;
        }
        v61 = v101;
        *(_QWORD *)(v101 + 16) = v60 + 1;
        v62 = v61 + 16 * v60;
        *(_QWORD *)(v62 + 32) = v58;
        *(_QWORD *)(v62 + 40) = v59;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_4_32();
          v102 = v69;
        }
        v31 = (uint64_t)v112;
        v63 = *(_QWORD *)(v102 + 16);
        if (v63 >= *(_QWORD *)(v102 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v102 = v70;
        }
        v42 = v44 + 1;
        v64 = v102;
        *(_QWORD *)(v102 + 16) = v63 + 1;
        v65 = v64 + 16 * v63;
        v66 = v110;
        *(_QWORD *)(v65 + 32) = v105;
        *(_QWORD *)(v65 + 40) = v66;
        OUTLINED_FUNCTION_5_26(v31, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
        v109 = 1;
        v30 = (uint64_t)v113;
        v43 = v96;
      }
      while (v97 != v44);
    }
    else
    {
      v109 = 0;
    }
LABEL_31:
    OUTLINED_FUNCTION_25_8(v30, 1);
    swift_bridgeObjectRelease();
    v125 = v39;
    v18 = v98;
LABEL_32:
    if ((v109 & 1) == 0)
    {
      v92 = v13;
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_50_9();
      OUTLINED_FUNCTION_9_24();
      OUTLINED_FUNCTION_23_15();
      v123 = 0xD000000000000019;
      v124 = 0x800000021AFF4990;
      v74 = v105;
      v75._countAndFlagsBits = v105;
      v76 = v110;
      v75._object = v110;
      String.append(_:)(v75);
      OUTLINED_FUNCTION_32_2();
      v77 = (uint64_t)v18;
      v78 = v123;
      v79 = (void *)v124;
      v80 = static os_log_type_t.error.getter();
      v81._countAndFlagsBits = v78;
      v81._object = v79;
      log(_:type:)(v81, v80);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_9_24();
      OUTLINED_FUNCTION_23_15();
      v123 = 0xD000000000000019;
      v124 = 0x800000021AFF4990;
      v82._countAndFlagsBits = v74;
      v82._object = v76;
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_32_2();
      v83 = v123;
      v84 = v124;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v85 = v83;
      *(_QWORD *)(v85 + 8) = v84;
      *(_OWORD *)(v85 + 16) = 0u;
      *(_OWORD *)(v85 + 32) = 0u;
      *(_BYTE *)(v85 + 48) = 0;
      swift_willThrow(0.0);
      OUTLINED_FUNCTION_221_0(v77);
      goto LABEL_39;
    }
    v71 = v108 + 1;
    OUTLINED_FUNCTION_5_26((uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    OUTLINED_FUNCTION_50_9();
    v34 = v71;
    v72 = v71 == v99;
    v29 = (uint64_t)v104;
    v27 = v103;
    if (v72)
      goto LABEL_41;
  }
LABEL_46:
  __break(1u);
}

uint64_t static _TextUtilities.getTextLabeledDictionary(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id isUniquelyReferenced_nonNull_native;
  void *v11;
  id v12;
  unint64_t v13;
  _QWORD *v14;
  id *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  Swift::Bool v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  char v84;
  char v85;
  unint64_t v86;
  Swift::Bool v87;
  unint64_t v88;
  char v89;
  _QWORD *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t result;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  id v106;
  id v107;
  void *v108;
  id v109;
  char v110;
  int v111;
  int v112;

  static _TextUtilities.getTextLabels(from:)((uint64_t)&v107, a1);
  v7 = v1;
  if (v1)
    return (uint64_t)v2;
  v8 = v3;
  v9 = v4;
  isUniquelyReferenced_nonNull_native = v5;
  v11 = v6;
  v12 = v107;
  v13 = v108;
  v109 = v107;
  v110 = (char)v108;
  outlined copy of Result<_DataTable, Error>(v107, (char)v108);
  MLDataTable.subscript.getter(v8, v9, (uint64_t)&v107);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_17_15();
  v14 = v107;
  LOBYTE(v9) = (_BYTE)v108;
  v109 = v12;
  v110 = v13;
  outlined copy of Result<_DataTable, Error>(v12, v13);
  MLDataTable.subscript.getter((uint64_t)isUniquelyReferenced_nonNull_native, v11, (uint64_t)&v107);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_17_15();
  if ((v9 & 1) == 0)
  {
    v106 = v107;
    v112 = v108;
    v15 = (id *)v14[2];
    OUTLINED_FUNCTION_26_19();
    v16 = CMLColumn.size.getter();
    OUTLINED_FUNCTION_102(v14);
    if ((v16 & 0x8000000000000000) == 0)
    {
      v111 = v13;
      v99 = v12;
      if (v16)
      {
        v19 = 0;
        v2 = (_QWORD *)MEMORY[0x24BEE4B00];
        v104 = v16;
        v105 = v14;
        while (v16 != v19)
        {
          v20 = OUTLINED_FUNCTION_26_19();
          OUTLINED_FUNCTION_2_35((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27, (uint64_t)v99);
          outlined consume of Result<_DataTable, Error>(v14, 0);
          isUniquelyReferenced_nonNull_native = v107;
          v28 = v108;
          OUTLINED_FUNCTION_12_24();
          if (!v29)
            goto LABEL_53;
          if (v2[2] && (v30 = OUTLINED_FUNCTION_10_24(), (v31 & 1) != 0))
          {
            v32 = *(_QWORD **)(v2[7] + 8 * v30);
            swift_bridgeObjectRetain();
            outlined consume of MLDataValue(isUniquelyReferenced_nonNull_native, v28, 2);
            v33 = swift_retain();
            OUTLINED_FUNCTION_2_35(v33, v34, v35, v36, v37, v38, v39, v40, v100);
            OUTLINED_FUNCTION_102(v14);
            v7 = (uint64_t)v107;
            v41 = (uint64_t)v108;
            OUTLINED_FUNCTION_12_24();
            if (!v29)
              goto LABEL_59;
            if ((v112 & 1) != 0)
              goto LABEL_58;
            v44 = outlined copy of Result<_DataTable, Error>(v106, 0);
            OUTLINED_FUNCTION_22_15((uint64_t)v44, v45, v46, v47, v48, v49, v50, v51, v101);
            OUTLINED_FUNCTION_102(v106);
            v13 = (unint64_t)v107;
            v15 = (id *)v108;
            OUTLINED_FUNCTION_12_24();
            if (!v29)
              goto LABEL_57;
            swift_bridgeObjectRetain();
            v103 = v41;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_24_16();
              v32 = v96;
            }
            v53 = v32[2];
            if (v53 >= v32[3] >> 1)
            {
              OUTLINED_FUNCTION_24_16();
              v32 = v97;
            }
            v32[2] = v53 + 1;
            v54 = &v32[2 * v53];
            v54[4] = v13;
            v54[5] = v15;
            outlined consume of MLDataValue((void *)v13, v15, 2);
            isUniquelyReferenced_nonNull_native = (id)swift_isUniquelyReferenced_nonNull_native();
            v107 = v2;
            v55 = v7;
            v15 = (id *)v2;
            specialized __RawDictionaryStorage.find<A>(_:)(v7, v103);
            OUTLINED_FUNCTION_16_21();
            if (v57)
              goto LABEL_51;
            v13 = v56;
            v7 = v17;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
            v15 = &v107;
            v58 = _NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)isUniquelyReferenced_nonNull_native, (Swift::Int)v2);
            v14 = v105;
            isUniquelyReferenced_nonNull_native = (id)v103;
            if (v58)
            {
              v15 = (id *)v107;
              v59 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v103);
              if ((v7 & 1) != (v60 & 1))
                goto LABEL_61;
              v13 = v59;
            }
            v2 = v107;
            if ((v7 & 1) != 0)
            {
              OUTLINED_FUNCTION_19_20();
              v15[v13] = v32;
            }
            else
            {
              OUTLINED_FUNCTION_1_31();
              *v94 = v55;
              v94[1] = v103;
              OUTLINED_FUNCTION_21_17();
              if (v57)
                goto LABEL_52;
              v2[2] = v95;
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
            v92 = (void *)v55;
            v93 = (void *)v103;
          }
          else
          {
            outlined consume of MLDataValue(isUniquelyReferenced_nonNull_native, v28, 2);
            v61 = swift_retain();
            OUTLINED_FUNCTION_2_35(v61, v62, v63, v64, v65, v66, v67, v68, v100);
            outlined consume of Result<_DataTable, Error>(v14, 0);
            isUniquelyReferenced_nonNull_native = v107;
            v69 = (uint64_t)v108;
            OUTLINED_FUNCTION_12_24();
            if (!v29)
              goto LABEL_54;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
            v72 = OUTLINED_FUNCTION_9_1();
            *(_OWORD *)(v72 + 16) = xmmword_21AFE7DA0;
            if ((v112 & 1) != 0)
              goto LABEL_56;
            v73 = (_QWORD *)v72;
            v15 = (id *)v106;
            v74 = outlined copy of Result<_DataTable, Error>(v106, 0);
            OUTLINED_FUNCTION_22_15((uint64_t)v74, v75, v76, v77, v78, v79, v80, v81, v102);
            OUTLINED_FUNCTION_102(v106);
            OUTLINED_FUNCTION_12_24();
            if (!v29)
              goto LABEL_55;
            v73[4] = v82;
            v73[5] = v83;
            v85 = swift_isUniquelyReferenced_nonNull_native();
            v107 = v2;
            OUTLINED_FUNCTION_10_24();
            OUTLINED_FUNCTION_16_21();
            if (v57)
              goto LABEL_49;
            v13 = v86;
            v7 = v17;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
            v15 = &v107;
            v87 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v85, (Swift::Int)v2);
            v14 = v105;
            if (v87)
            {
              v15 = (id *)v107;
              v88 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)isUniquelyReferenced_nonNull_native, v69);
              if ((v7 & 1) != (v89 & 1))
                goto LABEL_61;
              v13 = v88;
            }
            v2 = v107;
            if ((v7 & 1) != 0)
            {
              OUTLINED_FUNCTION_19_20();
              v15[v13] = v73;
            }
            else
            {
              OUTLINED_FUNCTION_1_31();
              *v90 = isUniquelyReferenced_nonNull_native;
              v90[1] = v69;
              OUTLINED_FUNCTION_21_17();
              if (v57)
                goto LABEL_50;
              v2[2] = v91;
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
            v92 = isUniquelyReferenced_nonNull_native;
            v93 = (void *)v69;
          }
          outlined consume of MLDataValue(v92, v93, 2);
          ++v19;
          v16 = v104;
          if (v104 == v19)
            goto LABEL_46;
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        OUTLINED_FUNCTION_13_30(isUniquelyReferenced_nonNull_native, v17, v18);
        __break(1u);
LABEL_54:
        OUTLINED_FUNCTION_13_30(isUniquelyReferenced_nonNull_native, v70, v71);
        __break(1u);
LABEL_55:
        outlined consume of MLDataValue(v82, v83, v84);
LABEL_56:
        __break(1u);
LABEL_57:
        outlined consume of MLDataValue((void *)v13, v15, v52);
LABEL_58:
        __break(1u);
LABEL_59:
        OUTLINED_FUNCTION_13_30((void *)v7, v42, v43);
        __break(1u);
        goto LABEL_60;
      }
      v2 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_46:
      outlined consume of Result<_DataTable, Error>(v99, v111);
      OUTLINED_FUNCTION_102(v14);
      outlined consume of Result<_DataTable, Error>(v106, v112);
      return (uint64_t)v2;
    }
  }
LABEL_60:
  __break(1u);
LABEL_61:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of MLTextClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLTextClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_1_31()
{
  uint64_t v0;
  unint64_t v1;

  *(_QWORD *)(v0 + 8 * (v1 >> 6) + 64) |= 1 << v1;
}

void OUTLINED_FUNCTION_2_35(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _UntypedColumn.valueAtIndex(index:)(v9, (uint64_t)va);
}

void OUTLINED_FUNCTION_4_32()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_5_26@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_6_27()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_9_24()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 200) = 0;
  *(_QWORD *)(v1 - 192) = v0;
  _StringGuts.grow(_:)(29);
}

unint64_t OUTLINED_FUNCTION_10_24()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_11_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 264))(a1, a2, v2);
}

void OUTLINED_FUNCTION_13_30(void *a1, uint64_t a2, char a3)
{
  void *v3;

  outlined consume of MLDataValue(a1, v3, a3);
}

void OUTLINED_FUNCTION_17_15()
{
  void *v0;
  char v1;

  outlined consume of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_19_20()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_21_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * v2) = v1;
}

void OUTLINED_FUNCTION_22_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _UntypedColumn.valueAtIndex(index:)(v9, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_23_15()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_24_16()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_25_12@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

id OUTLINED_FUNCTION_26_19()
{
  void *v0;

  return outlined copy of Result<_DataTable, Error>(v0, 0);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML23MLBoostedTreeClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML23ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for DataFrame();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)v10, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {
    v11 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
    v12 = a2;
    v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
    v14 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 = a2;
    v13 = 0;
    v11 = v14;
  }
  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v11);
}

uint64_t MLBoostedTreeClassifier.ModelParameters.validationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v1 = v0;
  OUTLINED_FUNCTION_4_33();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v5 = v4 - v3;
  result = outlined init with copy of Any?(v1, (uint64_t)&v7, &demangling cache variable for type metadata for Any?);
  if (v8)
  {
    outlined init with take of Any(&v7, &v9);
    OUTLINED_FUNCTION_16_0();
    MLBoostedTreeClassifier.ModelParameters.ValidationData.asTable()();
    return outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLBoostedTreeClassifier.ModelParameters.validationData : MLBoostedTreeClassifier.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = MLBoostedTreeClassifier.ModelParameters.validationData.getter();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

void key path setter for MLBoostedTreeClassifier.ModelParameters.validationData : MLBoostedTreeClassifier.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1;
  id v2;
  unsigned __int8 v3;

  v1 = *(_BYTE *)(a1 + 8);
  v2 = *(id *)a1;
  v3 = v1;
  outlined copy of MLDataTable?(v2, v1);
  MLBoostedTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v2);
}

void MLBoostedTreeClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v12[4];

  v2 = v1;
  OUTLINED_FUNCTION_4_33();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  v8 = *(void **)a1;
  v9 = *(unsigned __int8 *)(a1 + 8);
  v12[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v12);
  if (v9 == 255)
  {
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(_QWORD *)v7 = v8;
    *(_BYTE *)(v7 + 8) = v9 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLBoostedTreeClassifier.ModelParameters.ValidationData(v7, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v12, v2);
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLBoostedTreeClassifier.ModelParameters.validation.getter()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  result = outlined init with copy of Any?(v0, (uint64_t)&v2, &demangling cache variable for type metadata for Any?);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    OUTLINED_FUNCTION_4_33();
    return OUTLINED_FUNCTION_16_0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined init with take of MLBoostedTreeClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void (*MLBoostedTreeClassifier.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  MLBoostedTreeClassifier.ModelParameters.validationData.getter();
  return MLBoostedTreeClassifier.ModelParameters.validationData.modify;
}

void MLBoostedTreeClassifier.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned __int8 v5;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(void **)a1;
  v5 = v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of MLDataTable?(v2, v3);
    MLBoostedTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    MLBoostedTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLBoostedTreeClassifier.ModelParameters.validation : MLBoostedTreeClassifier.ModelParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData(a1, (uint64_t)v4);
  return MLBoostedTreeClassifier.ModelParameters.validation.setter((uint64_t)v4);
}

uint64_t MLBoostedTreeClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v5[4];

  v5[3] = OUTLINED_FUNCTION_4_33();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLBoostedTreeClassifier.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1);
}

void (*MLBoostedTreeClassifier.ModelParameters.validation.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  void (*result)(uint64_t **, char);

  v2 = v1;
  v4 = malloc(0xA0uLL);
  *a1 = v4;
  v4[16] = v2;
  v5 = OUTLINED_FUNCTION_4_33();
  v4[17] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[18] = malloc(v6);
  v4[19] = malloc(v6);
  result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v2, (uint64_t)(v4 + 4), &demangling cache variable for type metadata for Any?);
  if (v4[7])
  {
    outlined init with take of Any((_OWORD *)v4 + 2, v4);
    OUTLINED_FUNCTION_16_0();
    return MLBoostedTreeClassifier.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLBoostedTreeClassifier.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v7;

  v2 = *a1;
  v3 = (void *)(*a1)[18];
  v4 = (void *)(*a1)[19];
  v5 = (*a1)[17];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 8));
    outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v5;
    v7 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLBoostedTreeClassifier.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v7);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 12));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t MLBoostedTreeClassifier.ModelParameters.maxDepth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t MLBoostedTreeClassifier.ModelParameters.maxDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*MLBoostedTreeClassifier.ModelParameters.maxDepth.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeClassifier.ModelParameters.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t MLBoostedTreeClassifier.ModelParameters.maxIterations.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*MLBoostedTreeClassifier.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeClassifier.ModelParameters.minLossReduction.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void MLBoostedTreeClassifier.ModelParameters.minLossReduction.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLBoostedTreeClassifier.ModelParameters.minLossReduction.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeClassifier.ModelParameters.minChildWeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void MLBoostedTreeClassifier.ModelParameters.minChildWeight.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*MLBoostedTreeClassifier.ModelParameters.minChildWeight.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeClassifier.ModelParameters.randomSeed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t MLBoostedTreeClassifier.ModelParameters.randomSeed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*MLBoostedTreeClassifier.ModelParameters.randomSeed.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeClassifier.ModelParameters.stepSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

void MLBoostedTreeClassifier.ModelParameters.stepSize.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 72) = a1;
}

uint64_t (*MLBoostedTreeClassifier.ModelParameters.stepSize.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeClassifier.ModelParameters.earlyStoppingRounds.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t MLBoostedTreeClassifier.ModelParameters.earlyStoppingRounds.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = result;
  *(_BYTE *)(v2 + 88) = a2 & 1;
  return result;
}

uint64_t (*MLBoostedTreeClassifier.ModelParameters.earlyStoppingRounds.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeClassifier.ModelParameters.rowSubsample.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

void MLBoostedTreeClassifier.ModelParameters.rowSubsample.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 96) = a1;
}

uint64_t (*MLBoostedTreeClassifier.ModelParameters.rowSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLBoostedTreeClassifier.ModelParameters.columnSubsample.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 104);
}

void MLBoostedTreeClassifier.ModelParameters.columnSubsample.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 104) = a1;
}

uint64_t (*MLBoostedTreeClassifier.ModelParameters.columnSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLBoostedTreeClassifier.ModelParameters.init(validation:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:stepSize:earlyStoppingRounds:rowSubsample:columnSubsample:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>, double a12@<D4>)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v31[4];

  v24 = OUTLINED_FUNCTION_4_33();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_49();
  v28 = v27 - v26;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_QWORD *)(a7 + 32) = a2;
  *(_QWORD *)(a7 + 40) = a3;
  *(double *)(a7 + 48) = a8;
  *(double *)(a7 + 56) = a9;
  *(_QWORD *)(a7 + 64) = a4;
  *(double *)(a7 + 72) = a10;
  *(_QWORD *)(a7 + 80) = a5;
  *(_BYTE *)(a7 + 88) = a6 & 1;
  *(double *)(a7 + 96) = a11;
  *(double *)(a7 + 104) = a12;
  outlined init with copy of MLBoostedTreeClassifier.ModelParameters.ValidationData(a1, v27 - v26);
  v31[3] = v24;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v31);
  outlined init with take of MLBoostedTreeClassifier.ModelParameters.ValidationData(v28, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v31, a7);
  return outlined destroy of MLBoostedTreeClassifier.ModelParameters.ValidationData(a1);
}

void MLBoostedTreeClassifier.ModelParameters.init(validationData:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:stepSize:earlyStoppingRounds:rowSubsample:columnSubsample:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>, double a12@<D4>)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  v12 = *a1;
  v13 = *((_BYTE *)a1 + 8);
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_QWORD *)(a7 + 32) = a2;
  *(_QWORD *)(a7 + 40) = a3;
  *(double *)(a7 + 48) = a8;
  *(double *)(a7 + 56) = a9;
  *(_QWORD *)(a7 + 64) = a4;
  *(double *)(a7 + 72) = a10;
  *(_QWORD *)(a7 + 80) = a5;
  *(_BYTE *)(a7 + 88) = a6 & 1;
  *(double *)(a7 + 96) = a11;
  *(double *)(a7 + 104) = a12;
  v14 = v12;
  v15 = v13;
  MLBoostedTreeClassifier.ModelParameters.validationData.setter((uint64_t)&v14);
}

void MLBoostedTreeClassifier.ModelParameters.init(configuration:validation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v22;
  uint64_t v23[4];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLBoostedTreeClassifier.ModelParameters.ValidationData?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  v9 = v8 - v7;
  v10 = OUTLINED_FUNCTION_4_33();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_49();
  v14 = v13 - v12;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 32) = BoostedTreeConfiguration.maximumDepth.getter();
  *(_QWORD *)(a3 + 40) = BoostedTreeConfiguration.maximumIterations.getter();
  BoostedTreeConfiguration.minimumLossReduction.getter();
  *(_QWORD *)(a3 + 48) = v15;
  BoostedTreeConfiguration.minimumChildWeight.getter();
  *(_QWORD *)(a3 + 56) = v16;
  *(_QWORD *)(a3 + 64) = BoostedTreeConfiguration.randomSeed.getter();
  BoostedTreeConfiguration.learningRate.getter();
  *(_QWORD *)(a3 + 72) = v17;
  *(_QWORD *)(a3 + 80) = BoostedTreeConfiguration.earlyStoppingIterationCount.getter();
  *(_BYTE *)(a3 + 88) = v18 & 1;
  BoostedTreeConfiguration.rowSubsample.getter();
  *(_QWORD *)(a3 + 96) = v19;
  BoostedTreeConfiguration.columnSubsample.getter();
  *(_QWORD *)(a3 + 104) = v20;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML23MLBoostedTreeClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML23ijk3V15lm75V13configuration10validationAE0A12MLComponents07BoostedD13ConfigurationV_11c7Data0N5e12VSgtcfcAE010N21N0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(a2, v9);
  if (__swift_getEnumTagSinglePayload(v9, 1, v10) == 1)
  {
    swift_storeEnumTagMultiPayload();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v9, &demangling cache variable for type metadata for MLBoostedTreeClassifier.ModelParameters.ValidationData?);
  }
  else
  {
    outlined init with take of MLBoostedTreeClassifier.ModelParameters.ValidationData(v9, v14);
  }
  v23[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
  outlined init with take of MLBoostedTreeClassifier.ModelParameters.ValidationData(v14, (uint64_t)boxed_opaque_existential_0);
  OUTLINED_FUNCTION_17_0((uint64_t)v23);
  outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(a2, &demangling cache variable for type metadata for DataFrame?);
  v22 = type metadata accessor for BoostedTreeConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a1, v22);
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLBoostedTreeClassifier.ModelParameters.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  OUTLINED_FUNCTION_15_0();
  v1._countAndFlagsBits = 10;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v57._countAndFlagsBits = OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_13_0(v57);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_0_1();
  v2._countAndFlagsBits = 0xD000000000000010;
  v2._object = (void *)0x800000021AFF13A0;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(23);
  OUTLINED_FUNCTION_14_0();
  v58._countAndFlagsBits = 0xD000000000000014;
  v58._object = (void *)0x800000021AFF13C0;
  OUTLINED_FUNCTION_13_0(v58);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_0(v3, v4, v5, v6, v7, v8, v9, v10, v46, v51, 0xD000000000000010, (void *)0x800000021AFF13A0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_6_0((uint64_t)"Min Child Weight: ");
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_0(v11, v12, v13, v14, v15, v16, v17, v18, v47, v52, v56._countAndFlagsBits, v56._object);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v56, "Random Seed: ");
  HIWORD(v56._object) = -4864;
  v59._countAndFlagsBits = OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_13_0(v59);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_0(v19, v20, v21, v22, v23, v24, v25, v26, v48, v53, v56._countAndFlagsBits, v56._object);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9_0();
  v27._countAndFlagsBits = 0x7A69532070657453;
  v27._object = (void *)0xEB00000000203A65;
  String.append(_:)(v27);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_0(v28, v29, v30, v31, v32, v33, v34, v35, v49, v54, v56._countAndFlagsBits, v56._object);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(18);
  OUTLINED_FUNCTION_14_0();
  v36._countAndFlagsBits = 0x7362755320776F52;
  v36._object = (void *)0xEF203A656C706D61;
  String.append(_:)(v36);
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_5_0(v37, v38, v39, v40, v41, v42, v43, v44, v50, v55, v56._countAndFlagsBits, v56._object);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_6_0((uint64_t)"Column Subsample: ");
  OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_0_1();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  return 0x747065442078614DLL;
}

uint64_t MLBoostedTreeClassifier.ModelParameters.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MLBoostedTreeClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21AE9ECB8()
{
  return MLBoostedTreeClassifier.ModelParameters.validation.getter();
}

ValueMetadata *type metadata accessor for MLBoostedTreeClassifier.ModelParameters()
{
  return &type metadata for MLBoostedTreeClassifier.ModelParameters;
}

uint64_t OUTLINED_FUNCTION_4_33()
{
  return type metadata accessor for MLBoostedTreeClassifier.ModelParameters.ValidationData();
}

uint64_t specialized RandomAccessCollection<>.indices.getter()
{
  return specialized RandomAccessCollection<>.indices.getter(CMLDictionary.size.getter);
}

{
  uint64_t result;

  result = CMLSequence.size.getter();
  if ((result & 0x8000000000000000) == 0)
    return 0;
  __break(1u);
  return result;
}

{
  uint64_t result;

  result = OUTLINED_FUNCTION_21_5();
  if ((result & 0x8000000000000000) == 0)
    return OUTLINED_FUNCTION_7_4();
  __break(1u);
  return result;
}

void specialized RandomAccessCollection<>.indices.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_retain();
  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v0);
  v2 = v1;
  OUTLINED_FUNCTION_4_2();
  if (v2 < 0)
    __break(1u);
  else
    OUTLINED_FUNCTION_22();
}

uint64_t specialized RandomAccessCollection<>.indices.getter(uint64_t (*a1)(void))
{
  uint64_t result;

  result = a1();
  if ((result & 0x8000000000000000) == 0)
    return OUTLINED_FUNCTION_7_4();
  __break(1u);
  return result;
}

void CMLSequence.subscript.getter(uint64_t a1)
{
  CMLSequence.value(at:)(a1);
  OUTLINED_FUNCTION_56_9();
}

void specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2)
{
  specialized RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, CMLDictionary.size.getter);
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
  }
  else
  {
    v3 = OUTLINED_FUNCTION_21_5();
    if ((v2 & 0x8000000000000000) == 0 && v3 >= v2)
    {
      OUTLINED_FUNCTION_56_9();
      return;
    }
  }
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_36_12();
    v3 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v3);
    v5 = v4;
    OUTLINED_FUNCTION_4_2();
    if ((v2 & 0x8000000000000000) == 0 && v5 >= v2)
    {
      OUTLINED_FUNCTION_125();
      return;
    }
  }
  __break(1u);
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = result + a2;
  if (__OFADD__(result, a2))
  {
    __break(1u);
  }
  else
  {
    result = CMLSequence.size.getter();
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
      return v2;
  }
  __break(1u);
  return result;
}

void specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
  }
  else
  {
    v4 = a3();
    if ((v3 & 0x8000000000000000) == 0 && v4 >= v3)
    {
      OUTLINED_FUNCTION_22();
      return;
    }
  }
  __break(1u);
}

void specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))specialized RandomAccessCollection<>.distance(from:to:), CMLDictionary.size.getter);
}

void specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  specialized RandomAccessCollection<>.distance(from:to:)();
  if (a2 >= 1)
  {
    if ((v4 & 0x8000000000000000) == 0 && v4 < a2)
      return;
LABEL_10:
    v6 = __OFADD__(a1, a2);
    v7 = a1 + a2;
    if (v6)
    {
      __break(1u);
    }
    else
    {
      v8 = CMLSequence.size.getter();
      if ((v7 & 0x8000000000000000) == 0 && v8 >= v7)
        return;
    }
    __break(1u);
    return;
  }
  if (v4 > 0 || v4 <= a2)
    goto LABEL_10;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v7;

  result = specialized RandomAccessCollection<>.distance(from:to:)();
  if (a2 < 1)
  {
    if (result <= 0 && result > a2)
      return 0;
  }
  else if ((result & 0x8000000000000000) == 0 && result < a2)
  {
    return 0;
  }
  v7 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    result = OUTLINED_FUNCTION_21_5();
    if ((v5 & 0x8000000000000000) == 0 && result >= v5)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_retain();
  v6 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v6);
  v8 = v7;
  result = OUTLINED_FUNCTION_4_2();
  if (a1 < 0 || v8 < a1)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_3_1();
  v10 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v10);
  v12 = v11;
  result = OUTLINED_FUNCTION_4_2();
  if (a3 < 0 || v12 < a3)
    goto LABEL_19;
  v13 = a3 - a1;
  if (a2 < 1)
  {
    if (v13 <= 0 && v13 > a2)
      return 0;
  }
  else if ((v13 & 0x8000000000000000) == 0 && v13 < a2)
  {
    return 0;
  }
  v16 = __OFADD__(a1, a2);
  v14 = a1 + a2;
  if (v16)
    goto LABEL_20;
  OUTLINED_FUNCTION_3_1();
  v17 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v17);
  v19 = v18;
  result = OUTLINED_FUNCTION_4_2();
  if ((v14 & 0x8000000000000000) == 0 && v19 >= v14)
    return v14;
LABEL_21:
  __break(1u);
  return result;
}

void specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t (*a5)(void))
{
  uint64_t v8;

  v8 = a4(a1, a3);
  if (a2 >= 1)
  {
    if ((v8 & 0x8000000000000000) == 0 && v8 < (unint64_t)a2)
      return;
LABEL_10:
    specialized RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a5);
    return;
  }
  if (v8 > 0 || v8 <= a2)
    goto LABEL_10;
}

void specialized RandomAccessCollection<>.index(before:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    v2 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v2);
    v4 = v3;
    OUTLINED_FUNCTION_4_2();
    if ((v1 & 0x8000000000000000) == 0 && v1 < v4)
    {
      OUTLINED_FUNCTION_125();
      return;
    }
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    v2 = OUTLINED_FUNCTION_21_5();
    if ((v1 & 0x8000000000000000) == 0 && v1 < v2)
    {
      OUTLINED_FUNCTION_56_9();
      return;
    }
  }
  __break(1u);
}

{
  specialized RandomAccessCollection<>.index(before:)(a1, CMLDictionary.size.getter);
}

uint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t result)
{
  uint64_t v1;

  v1 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    result = CMLSequence.size.getter();
    if ((v1 & 0x8000000000000000) == 0 && v1 < result)
      return v1;
  }
  __break(1u);
  return result;
}

void specialized RandomAccessCollection<>.index(before:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    v3 = a2();
    if ((v2 & 0x8000000000000000) == 0 && v2 < v3)
    {
      OUTLINED_FUNCTION_22();
      return;
    }
  }
  __break(1u);
}

uint64_t specialized Collection<>.subscript.getter(uint64_t a1, uint64_t a2)
{
  return specialized Collection<>.subscript.getter(a1, a2, CMLDictionary.size.getter);
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  char v17;
  __n128 v18;
  char v19;
  _BYTE v20[24];
  __int128 v21;
  char v22;
  __int128 v23;
  char v24;
  _BYTE v25[24];
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  char v31;

  result = specialized Dictionary.startIndex.getter(a2);
  if ((v8 & 1) != 0)
    goto LABEL_17;
  v9 = v7;
  v10 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v10 != (_DWORD)v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  v11 = result;
  v12 = 1 << *(_BYTE *)(a2 + 32);
  if (v12 < result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v21 = *(_OWORD *)a1;
  v22 = *(_BYTE *)(a1 + 16);
  v23 = v21;
  v24 = v22;
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v23, (uint64_t)v25);
  result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v25, (uint64_t)&v26);
  if ((v28 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v27 != (_DWORD)v10)
    goto LABEL_13;
  if (v26 < v11)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = OUTLINED_FUNCTION_53_12();
  v19 = v13;
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v18, (uint64_t)v20);
  result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v20, (uint64_t)&v29);
  if ((v31 & 1) == 0)
  {
    v14 = v29;
    v15 = v30;
    outlined consume of [MLDataValue : MLDataValue].Index._Variant(v11, v9, 0);
    result = outlined consume of [MLDataValue : MLDataValue].Index._Variant(v12, v10, 0);
    if ((_DWORD)v10 == v15)
    {
      if (v12 >= v14)
      {
        *(_QWORD *)(a3 + 48) = a2;
        *(_OWORD *)a3 = v21;
        *(_BYTE *)(a3 + 16) = v22;
        *(_OWORD *)(a3 + 24) = v16;
        *(_BYTE *)(a3 + 40) = v17;
        swift_bridgeObjectRetain();
        return outlined retain of Range<MLDataValue.DictionaryType.Index>(a1);
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;

  result = CMLSequence.size.getter();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= a2)
  {
    a4[1] = a2;
    a4[2] = a3;
    *a4 = a1;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  OUTLINED_FUNCTION_36_12();
  v8 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v8);
  v10 = v9;
  result = OUTLINED_FUNCTION_4_2();
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v10 >= a2)
  {
    a4[1] = a2;
    a4[2] = a3;
    *a4 = a1;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;

  result = OUTLINED_FUNCTION_21_5();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= a2)
  {
    *(_QWORD *)(a5 + 8) = a2;
    *(_QWORD *)(a5 + 16) = a3;
    *(_BYTE *)(a5 + 24) = a4 & 1;
    *(_QWORD *)a5 = a1;
    return (uint64_t)outlined copy of Result<_DataTable, Error>(a3, a4 & 1);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_36_12();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_46_8();
  v12 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v12);
  v14 = v13;
  OUTLINED_FUNCTION_3_1();
  v15 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v15);
  v17 = v16;
  result = OUTLINED_FUNCTION_4_2();
  if (v17 < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_3_1();
  v19 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v19);
  v21 = v20;
  OUTLINED_FUNCTION_123();
  swift_release();
  result = swift_release_n();
  if (v14 < 0 || v21 < v14)
    goto LABEL_8;
  if (a1 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v14 >= a2)
  {
    a6[2] = a3;
    a6[3] = a4;
    a6[4] = a5;
    *a6 = a1;
    a6[1] = a2;
    swift_retain();
    OUTLINED_FUNCTION_23_3();
    return swift_retain();
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result;

  result = a3();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= a2)
  {
    OUTLINED_FUNCTION_3_1();
    return a1;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < a3 || a4 < a2)
    __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(__int128 *a1, __int128 *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _BYTE v9[24];
  __int128 v10;
  char v11;
  _BYTE v12[24];
  __int128 v13;
  char v14;
  _BYTE v15[24];
  __int128 v16;
  char v17;
  _BYTE v18[24];
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  int v29;
  char v30;

  v16 = *a1;
  v17 = *((_BYTE *)a1 + 16);
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v16, (uint64_t)v18);
  result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v18, (uint64_t)&v19);
  if ((v21 & 1) != 0)
    goto LABEL_14;
  v4 = v19;
  v5 = v20;
  v13 = *a2;
  v14 = *((_BYTE *)a2 + 16);
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v13, (uint64_t)v15);
  result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v15, (uint64_t)&v22);
  if ((v24 & 1) != 0)
    goto LABEL_14;
  if (v5 != v23)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v4 < v22)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v10 = *(__int128 *)((char *)a2 + 24);
  v11 = *((_BYTE *)a2 + 40);
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v10, (uint64_t)v12);
  result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v12, (uint64_t)&v25);
  if ((v27 & 1) != 0)
    goto LABEL_15;
  v6 = v25;
  v7 = v26;
  OUTLINED_FUNCTION_53_12();
  outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)&v8, (uint64_t)v9);
  result = outlined init with take of [MLDataValue : MLDataValue].Index._Variant((uint64_t)v9, (uint64_t)&v28);
  if ((v30 & 1) != 0)
    goto LABEL_15;
  if (v7 != v29)
    goto LABEL_12;
  if (v6 < v28)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

void specialized Collection.underestimatedCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  CMLDictionary.size.getter();
  v0 = OUTLINED_FUNCTION_7_4();
  specialized RandomAccessCollection<>.distance(from:to:)(v0, v1);
}

{
  CMLSequence.size.getter();
  specialized RandomAccessCollection<>.distance(from:to:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_36_12();
  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v0);
  v2 = v1;
  OUTLINED_FUNCTION_3_1();
  v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v3);
  v5 = v4;
  OUTLINED_FUNCTION_4_2();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    v6 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v6);
    v8 = v7;
    swift_release_n();
    if ((v2 & 0x8000000000000000) == 0 && v8 >= v2)
    {
      OUTLINED_FUNCTION_125();
      return;
    }
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_retain();
  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v0);
  v2 = v1;
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_3_1();
  v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v3);
  v5 = v4;
  OUTLINED_FUNCTION_4_2();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    v6 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v6);
    v8 = v7;
    OUTLINED_FUNCTION_4_2();
    if ((v2 & 0x8000000000000000) == 0 && v8 >= v2)
    {
      OUTLINED_FUNCTION_125();
      return;
    }
  }
  __break(1u);
}

{
  uint64_t v0;

  v0 = CMLSequence.size.getter();
  specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
}

uint64_t specialized Collection.underestimatedCount.getter()
{
  MLDataTable.size.getter();
  return specialized RandomAccessCollection<>.distance(from:to:)();
}

void specialized Collection._copyToContiguousArray()()
{
  uint64_t v0;

  specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_22();
}

void specialized Collection._copyToContiguousArray()(uint64_t a1)
{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_22();
}

{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_22();
}

{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_22();
}

{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_22();
}

void specialized Collection._copyToContiguousArray()(void *a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2 & 1);
  outlined consume of Result<_DataTable, Error>(a1, v3);
  OUTLINED_FUNCTION_125();
}

void specialized Collection._copyToContiguousArray()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3);
  OUTLINED_FUNCTION_217();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_125();
}

uint64_t specialized Collection._copyToContiguousArray()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  v2 = v1;
  swift_release();
  return v2;
}

void specialized Sequence._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, a4, a5 & 1);
}

void Array<A>.featureValue.getter()
{
  OUTLINED_FUNCTION_16_17();
  Array<A>.featureSequence.getter();
}

void sub_21AE9FBE8(uint64_t a1)
{
  CMLFeatureValue.__allocating_init(_:)(a1);
  OUTLINED_FUNCTION_27_0();
}

uint64_t MLDataValue.SequenceType.description.getter()
{
  return MLDataValue.SequenceType.description.getter();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  OUTLINED_FUNCTION_122();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<MLDataValue.SequenceType, String>);
  lazy protocol witness table accessor for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>((uint64_t)&lazy protocol witness table cache variable for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>);
  v0 = BidirectionalCollection<>.joined(separator:)();
  v2 = v1;
  OUTLINED_FUNCTION_217();
  v3._countAndFlagsBits = v0;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23_3();
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  OUTLINED_FUNCTION_123();
  return 91;
}

void MLDataValue.SequenceType.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_3();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_5();
  swift_getAssociatedTypeWitness();
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_17_3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_43_11();
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_4_22();
  v2 = MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_43_11();
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_17_3();
}

void MLDataValue.SequenceType.init()()
{
  OUTLINED_FUNCTION_17_3();
}

void sub_21AE9FF18(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  if (a1)
  {
    OUTLINED_FUNCTION_22_0();
    v3 = OUTLINED_FUNCTION_4_4();
    *(_QWORD *)(v3 + 16) = a1;
    *v1 = OUTLINED_FUNCTION_7_11(v3);
    OUTLINED_FUNCTION_22();
  }
  else
  {
    __break(1u);
  }
}

uint64_t MLDataValue.SequenceType.startIndex.getter()
{
  return 0;
}

void MLDataValue.SequenceType.endIndex.getter()
{
  CMLSequence.size.getter();
  OUTLINED_FUNCTION_22();
}

void MLDataValue.SequenceType.subscript.getter(uint64_t a1)
{
  OUTLINED_FUNCTION_51_0();
  CMLSequence.value(at:)(a1);
  OUTLINED_FUNCTION_81();
  MLDataValue.init(_:)();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance MLDataValue.SequenceType@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a2 = result;
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance MLDataValue.SequenceType(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    result = (uint64_t *)CMLSequence.size.getter();
    if ((v1 & 0x8000000000000000) == 0 && v1 < (uint64_t)result)
    {
      *v2 = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance MLDataValue.SequenceType@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for BidirectionalCollection.distance(from:to:) in conformance MLDataValue.SequenceType()
{
  specialized RandomAccessCollection<>.distance(from:to:)();
}

void protocol witness for Collection.endIndex.getter in conformance MLDataValue.SequenceType(_QWORD *a1@<X8>)
{
  uint64_t v2;

  MLDataValue.SequenceType.endIndex.getter();
  *a1 = v2;
  OUTLINED_FUNCTION_22();
}

void protocol witness for Collection.subscript.read in conformance MLDataValue.SequenceType(uint64_t a1, uint64_t *a2)
{
  MLDataValue.SequenceType.subscript.getter(*a2);
  OUTLINED_FUNCTION_22();
}

void protocol witness for Collection.subscript.read in conformance MLDataValue.SequenceType(uint64_t a1)
{
  outlined consume of MLDataValue(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataValue.SequenceType@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return specialized Collection<>.subscript.getter(*a1, a1[1], *v2, a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance MLDataValue.SequenceType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized RandomAccessCollection<>.indices.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance MLDataValue.SequenceType()
{
  return specialized Collection.isEmpty.getter();
}

void protocol witness for Collection.count.getter in conformance MLDataValue.SequenceType()
{
  specialized Collection.count.getter();
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance MLDataValue.SequenceType(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;

  specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2);
  *(_QWORD *)a3 = v4;
  *(_BYTE *)(a3 + 8) = v5 & 1;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataValue.SequenceType(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;

  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1], *v2);
}

{
  _QWORD *v2;

  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1], *v2);
}

void protocol witness for Collection.index(after:) in conformance MLDataValue.SequenceType(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  specialized RandomAccessCollection<>.index(after:)(*a1);
  *a2 = v3;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance MLDataValue.SequenceType(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = CMLSequence.size.getter();
  if (v2 < 0 || v2 >= result)
    __break(1u);
  else
    *a1 = v2 + 1;
  return result;
}

void protocol witness for Sequence.underestimatedCount.getter in conformance MLDataValue.SequenceType()
{
  specialized Collection.underestimatedCount.getter();
}

void protocol witness for Sequence._copyToContiguousArray() in conformance MLDataValue.SequenceType()
{
  uint64_t *v0;

  specialized Collection._copyToContiguousArray()(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataValue.SequenceType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

void MLDataValue.SequenceType.init(arrayLiteral:)()
{
  OUTLINED_FUNCTION_17_3();
}

uint64_t sub_21AEA04AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;

  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x21AEA0640);
  }
  OUTLINED_FUNCTION_22_0();
  v3 = OUTLINED_FUNCTION_4_4();
  *(_QWORD *)(v3 + 16) = a1;
  OUTLINED_FUNCTION_7_11(v3);
  if (*(_QWORD *)(v1 + 16))
    __asm { BR              X8 }
  result = swift_bridgeObjectRelease();
  *v5 = v3;
  return result;
}

uint64_t static MLDataValue.SequenceType.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  _QWORD v19[2];
  char v20;
  void *v21;
  void *v22;
  char v23;

  OUTLINED_FUNCTION_122();
  CMLSequence.size.getter();
  OUTLINED_FUNCTION_42_9();
  v1 = v0;
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_7_4();
  specialized RandomAccessCollection<>.distance(from:to:)();
  v3 = v2;
  OUTLINED_FUNCTION_81();
  if (v1 != v3)
  {
    v11 = 0;
    return v11 & 1;
  }
  OUTLINED_FUNCTION_122();
  CMLSequence.size.getter();
  OUTLINED_FUNCTION_42_9();
  v5 = v4;
  OUTLINED_FUNCTION_217();
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (v5)
    {
      v6 = 0;
      v14 = v5 - 1;
      v15 = v5;
      while (v5 != v6)
      {
        OUTLINED_FUNCTION_46_8();
        CMLSequence.value(at:)(v6);
        OUTLINED_FUNCTION_217();
        OUTLINED_FUNCTION_40_10();
        OUTLINED_FUNCTION_217();
        v7 = v21;
        v8 = v22;
        v9 = v23;
        v19[0] = v21;
        v19[1] = v22;
        v20 = v23;
        OUTLINED_FUNCTION_46_8();
        CMLSequence.value(at:)(v6);
        OUTLINED_FUNCTION_81();
        OUTLINED_FUNCTION_40_10();
        OUTLINED_FUNCTION_81();
        static MLDataValue.== infix(_:_:)((uint64_t)v19);
        v11 = v10;
        outlined consume of MLDataValue(v16, v17, v18);
        outlined consume of MLDataValue(v7, v8, v9);
        if ((v11 & 1) != 0)
        {
          v5 = v15;
          if (v14 != v6++)
            continue;
        }
        return v11 & 1;
      }
      __break(1u);
      goto LABEL_14;
    }
    v11 = 1;
    return v11 & 1;
  }
LABEL_14:
  __break(1u);
  result = OUTLINED_FUNCTION_119();
  __break(1u);
  return result;
}

void closure #1 in MLDataValue.SequenceType.description.getter(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  MLDataValue.description.getter();
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_46_7();
}

uint64_t MLDataValue.SequenceType.debugDescription.getter()
{
  return MLDataValue.SequenceType.description.getter();
}

void closure #1 in MLDataValue.SequenceType.debugDescription.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  outlined copy of MLDataValue(*(id *)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
  *a2 = String.init<A>(reflecting:)();
  a2[1] = v3;
  OUTLINED_FUNCTION_46_7();
}

void protocol witness for BidirectionalCollection.index(before:) in conformance CMLSequence(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  specialized RandomAccessCollection<>.index(before:)(*a1, CMLSequence.size.getter);
  *a2 = v3;
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance CMLSequence(uint64_t *a1)
{
  uint64_t v2;

  specialized RandomAccessCollection<>.index(before:)(*a1, CMLSequence.size.getter);
  *a1 = v2;
}

void protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance CMLSequence(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, CMLSequence.size.getter);
  *a3 = v4;
}

void protocol witness for BidirectionalCollection.distance(from:to:) in conformance CMLSequence(uint64_t *a1, uint64_t *a2)
{
  specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

void protocol witness for Collection.endIndex.getter in conformance CMLSequence(_QWORD *a1@<X8>)
{
  *a1 = CMLSequence.endIndex.getter();
  OUTLINED_FUNCTION_22();
}

void protocol witness for Collection.subscript.read in conformance CMLSequence(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  CMLSequence.subscript.getter(*a2);
  *a1 = v3;
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for Collection.subscript.read in conformance CMLSequence()
{
  return swift_release();
}

uint64_t protocol witness for Collection.subscript.getter in conformance CMLSequence@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = specialized Collection<>.subscript.getter(*a1, a1[1], CMLSequence.size.getter);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance CMLSequence@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized RandomAccessCollection<>.indices.getter(CMLSequence.size.getter);
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance CMLSequence()
{
  return specialized Collection.isEmpty.getter();
}

void protocol witness for Collection.count.getter in conformance CMLSequence()
{
  specialized Collection.count.getter();
  OUTLINED_FUNCTION_22();
}

void protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance CMLSequence(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;

  specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, (uint64_t (*)(uint64_t, uint64_t))specialized RandomAccessCollection<>.distance(from:to:), CMLSequence.size.getter);
  *(_QWORD *)a4 = v5;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  OUTLINED_FUNCTION_22();
}

void protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance CMLSequence(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OUTLINED_FUNCTION_45_8(a1);
  specialized Collection._failEarlyRangeCheck(_:bounds:)(v1, v2, v3);
  OUTLINED_FUNCTION_22();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OUTLINED_FUNCTION_45_8(a1);
  specialized Collection._failEarlyRangeCheck(_:bounds:)(v1, v2, v3);
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance CMLSequence(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1]);
}

void protocol witness for Collection.index(after:) in conformance CMLSequence(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  specialized RandomAccessCollection<>.index(after:)(*a1);
  *a2 = v3;
  OUTLINED_FUNCTION_22();
}

void protocol witness for Collection.formIndex(after:) in conformance CMLSequence(uint64_t *a1)
{
  uint64_t v2;

  specialized RandomAccessCollection<>.index(after:)(*a1);
  *a1 = v2;
  OUTLINED_FUNCTION_22();
}

void protocol witness for Sequence.underestimatedCount.getter in conformance CMLSequence()
{
  specialized Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CMLSequence()
{
  return specialized Collection._copyToContiguousArray()();
}

void protocol witness for Sequence._copyContents(initializing:) in conformance CMLSequence()
{
  specialized Sequence._copyContents(initializing:)();
  OUTLINED_FUNCTION_22();
}

void MLDataValue.SequenceType.init(from:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  int v5;

  v4 = *(void **)a1;
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 != 3)
  {
    outlined consume of MLDataValue(v4, *(id *)(a1 + 8), v5);
    v4 = 0;
  }
  *a2 = v4;
  OUTLINED_FUNCTION_22();
}

uint64_t MLDataValue.SequenceType.dataValue.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 3;
  return swift_retain();
}

void MLDataValue.SequenceType.init(from:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  specialized handling<A, B>(_:_:)(*(_QWORD *)(a1 + 16));
  v4 = v3;
  if (v3)
  {
    OUTLINED_FUNCTION_22_0();
    v5 = OUTLINED_FUNCTION_4_4();
    *(_QWORD *)(v5 + 16) = v4;
    OUTLINED_FUNCTION_7_11(v5);
    OUTLINED_FUNCTION_4_2();
    *a2 = v5;
    OUTLINED_FUNCTION_46_7();
  }
  else
  {
    __break(1u);
  }
}

void MLDataValue.SequenceType.featureValue.getter()
{
  OUTLINED_FUNCTION_17_3();
}

uint64_t sub_21AEA0DF8(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x21AEA100CLL);
  }
  OUTLINED_FUNCTION_22_0();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a1;
  OUTLINED_FUNCTION_7_11(inited);
  OUTLINED_FUNCTION_51_0();
  if (OUTLINED_FUNCTION_28_2())
  {
    OUTLINED_FUNCTION_51_0();
    CMLSequence.value(at:)(0);
    OUTLINED_FUNCTION_81();
    OUTLINED_FUNCTION_40_10();
    OUTLINED_FUNCTION_51_0();
    v3 = OUTLINED_FUNCTION_28_2();
    OUTLINED_FUNCTION_81();
    if (v3 > 0)
      __asm { BR              X8 }
    __break(1u);
    JUMPOUT(0x21AEA0FCCLL);
  }
  OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_16_17();
  v4 = OUTLINED_FUNCTION_122();
  CMLFeatureValue.__allocating_init(_:)(v4);
  v6 = v5;
  swift_setDeallocating();
  CMLFeatureValue.deinit();
  swift_deallocClassInstance();
  return v6;
}

void Array<A>.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void **, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  char v40;
  uint64_t v41;

  OUTLINED_FUNCTION_20_3();
  v35 = v0;
  v2 = v1;
  v4 = v3;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v37 = (uint64_t)&v29 - v8;
  v34 = *(_QWORD *)(v2 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v33 = (uint64_t)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v32 = (uint64_t)&v29 - v11;
  v13 = *(void **)v4;
  v12 = *(_QWORD *)(v4 + 8);
  v14 = *(unsigned __int8 *)(v4 + 16);
  if (v14 != 3)
  {
    outlined consume of MLDataValue(*(void **)v4, *(id *)(v4 + 8), v14);
LABEL_12:
    OUTLINED_FUNCTION_9_5();
    return;
  }
  v41 = Array.init()();
  OUTLINED_FUNCTION_51_11();
  if (!OUTLINED_FUNCTION_60_9())
  {
    OUTLINED_FUNCTION_38_9();
    OUTLINED_FUNCTION_38_9();
    goto LABEL_12;
  }
  v30 = v5;
  v31 = v12;
  v29 = v6;
  v15 = 0;
  v16 = 0;
  while (1)
  {
    OUTLINED_FUNCTION_51_11();
    CMLSequence.value(at:)(v15);
    OUTLINED_FUNCTION_184();
    if (v16)
      break;
    OUTLINED_FUNCTION_40_10();
    v18 = v38;
    v17 = v39;
    v19 = v40;
    OUTLINED_FUNCTION_51_11();
    v20 = OUTLINED_FUNCTION_60_9();
    OUTLINED_FUNCTION_184();
    if (v15 >= v20)
    {
      __break(1u);
      break;
    }
    v38 = v18;
    v39 = v17;
    v40 = v19;
    v21 = v35;
    v22 = *(void (**)(void **, uint64_t, uint64_t))(v35 + 16);
    outlined copy of MLDataValue(v18, v17, v19);
    v22(&v38, v2, v21);
    v23 = v37;
    if (__swift_getEnumTagSinglePayload(v37, 1, v2) == 1)
    {
      OUTLINED_FUNCTION_33_14();
      OUTLINED_FUNCTION_39_9();
      OUTLINED_FUNCTION_184();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v23, v30);
      goto LABEL_12;
    }
    ++v15;
    v24 = v34;
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
    v36 = 0;
    v26 = v13;
    v27 = v32;
    OUTLINED_FUNCTION_44_13(v32, v23, v25);
    OUTLINED_FUNCTION_44_13(v33, v27, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16));
    type metadata accessor for Array();
    Array.append(_:)();
    OUTLINED_FUNCTION_33_14();
    v28 = v27;
    v13 = v26;
    v16 = v36;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v28, v2);
    if (v15 == OUTLINED_FUNCTION_60_9())
    {
      OUTLINED_FUNCTION_184();
      OUTLINED_FUNCTION_39_9();
      goto LABEL_12;
    }
  }
  OUTLINED_FUNCTION_119();
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_20_3();
  v25 = v0;
  v2 = v1;
  v4 = v3;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v22 - v8;
  v10 = *(_QWORD *)(v2 - 8);
  v11 = MEMORY[0x24BDAC7A8](v7);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v22 - v14;
  specialized handling<A, B>(_:_:)(*(_QWORD *)(v4 + 16));
  v17 = v16;
  v23 = v6;
  v24 = v5;
  if (v16)
  {
    OUTLINED_FUNCTION_22_0();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v17;
    OUTLINED_FUNCTION_7_11(inited);
    v26 = Array.init()();
    swift_retain();
    if (CMLSequence.size.getter())
    {
      v22 = v4;
      v19 = 0;
      while (1)
      {
        CMLSequence.value(at:)(v19);
        swift_retain();
        specialized RandomAccessCollection<>.index(after:)(v19);
        v19 = v20;
        OUTLINED_FUNCTION_79();
        static MLDataValueConvertible.makeInstance(featureValue:)(v2, v25, (uint64_t)v9);
        OUTLINED_FUNCTION_12_18((uint64_t)v9);
        if (v21)
          break;
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v9, v2);
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v2);
        type metadata accessor for Array();
        Array.append(_:)();
        OUTLINED_FUNCTION_217();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v2);
        if (v19 == CMLSequence.size.getter())
        {
          swift_release();
          OUTLINED_FUNCTION_79();
          goto LABEL_8;
        }
      }
      swift_release_n();
      swift_release();
      OUTLINED_FUNCTION_217();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
    }
    else
    {
      OUTLINED_FUNCTION_81();
      OUTLINED_FUNCTION_79();
LABEL_8:
      OUTLINED_FUNCTION_79();
    }
    OUTLINED_FUNCTION_9_5();
  }
  else
  {
    __break(1u);
    OUTLINED_FUNCTION_120();
    __break(1u);
  }
}

void Array<A>.dataValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)&v12 = a1;
  v5 = type metadata accessor for Array();
  v6 = MEMORY[0x22075B938](MEMORY[0x24BEE12C8], v5);
  MEMORY[0x22075AA08](&v10, v5, v6);
  v14 = v10;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = type metadata accessor for LazySequence();
  MEMORY[0x22075B938](MEMORY[0x24BEE25B0], v8);
  LazySequenceProtocol.map<A>(_:)();
  OUTLINED_FUNCTION_184();
  swift_bridgeObjectRelease();
  v10 = v12;
  v11 = v13;
  v9 = type metadata accessor for LazyMapSequence();
  MEMORY[0x22075B938](MEMORY[0x24BEE2B40], v9);
  MLDataValue.SequenceType.init<A>(_:)();
}

void Array<A>.featureSequence.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_20_3();
  v1 = MEMORY[0x24BDAC7A8](v0);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_17_3();
}

void sub_21AEA1710(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (a1)
  {
    OUTLINED_FUNCTION_22_0();
    v3 = OUTLINED_FUNCTION_4_4();
    *(_QWORD *)(v3 + 16) = a1;
    OUTLINED_FUNCTION_7_11(v3);
    OUTLINED_FUNCTION_23_3();
    *(_QWORD *)(v1 - 88) = Array.startIndex.getter();
    OUTLINED_FUNCTION_49_7();
  }
  __break(1u);
  JUMPOUT(0x21AEA186CLL);
}

void Array<A>.featureColumn.getter()
{
  Array<A>.featureSequence.getter();
}

void sub_21AEA18AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v13 + 8))(&a13, v14, v13);
  v16 = 0x5060403020100uLL >> (8 * a13);
  type metadata accessor for CMLColumn();
  CMLColumn.__allocating_init(_:type:)(a1, v16);
  OUTLINED_FUNCTION_27_0();
}

void protocol witness for MLDataValueConvertible.init(from:) in conformance <A> [A](_QWORD *a1@<X8>)
{
  uint64_t v2;

  Array<A>.init(from:)();
  *a1 = v2;
}

uint64_t protocol witness for MLDataValueConvertible.init() in conformance <A> [A]@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Array.init()();
  *a1 = result;
  return result;
}

void protocol witness for MLDataValueConvertible.dataValue.getter in conformance <A> [A](uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  Array<A>.dataValue.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

void protocol witness for FeatureValueConvertible.init(from:) in conformance <A> [A](_QWORD *a1@<X8>)
{
  uint64_t v2;

  Array<A>.init(from:)();
  *a1 = v2;
}

void protocol witness for FeatureValueConvertible.featureValue.getter in conformance <A> [A]()
{
  Array<A>.featureValue.getter();
}

void protocol witness for CMLColumnConvertible.featureColumn.getter in conformance <A> [A]()
{
  Array<A>.featureColumn.getter();
}

uint64_t sub_21AEA19E0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in Array<A>.dataValue.getter()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 24) + 32))(*(_QWORD *)(v0 + 16));
  OUTLINED_FUNCTION_22();
}

void associated type witness table accessor for Collection.Indices : RandomAccessCollection in MLDataValue.SequenceType()
{
  _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

void associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in MLDataValue.SequenceType()
{
  lazy protocol witness table accessor for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataValue.SequenceType> and conformance <> Slice<A>);
}

void lazy protocol witness table accessor for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;

  if (!OUTLINED_FUNCTION_41_10(a1))
  {
    v5 = v4;
    v6 = v3;
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(v2);
    v8 = v6();
    atomic_store(MEMORY[0x22075B938](v5, v7, &v8), v1);
  }
  OUTLINED_FUNCTION_27_0();
}

void associated type witness table accessor for Collection.Indices : BidirectionalCollection in MLDataValue.SequenceType()
{
  _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

void associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in MLDataValue.SequenceType()
{
  lazy protocol witness table accessor for type LazyMapSequence<MLDataValue.SequenceType, String> and conformance <> LazyMapSequence<A, B>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataValue.SequenceType> and conformance <> Slice<A>);
}

void associated type witness table accessor for Collection.Indices : Collection in MLDataValue.SequenceType()
{
  _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0((uint64_t)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

void _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  if (!OUTLINED_FUNCTION_41_10(a1))
  {
    v3 = v2;
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v5 = lazy protocol witness table accessor for type Int and conformance Int();
    v6[0] = MEMORY[0x24BEE17A8];
    v6[1] = v5;
    atomic_store(MEMORY[0x22075B938](v3, v4, v6), v1);
  }
  OUTLINED_FUNCTION_27_0();
}

void associated type witness table accessor for Collection.SubSequence : Collection in MLDataValue.SequenceType()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataValue.SequenceType> and conformance Slice<A>);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataValue.SequenceType()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type IndexingIterator<MLDataValue.SequenceType> and conformance IndexingIterator<A>);
}

uint64_t instantiation function for generic protocol witness table for <A> [A](uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x22075B938](&protocol conformance descriptor for <A> [A], a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in CMLSequence()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type IndexingIterator<CMLSequence> and conformance IndexingIterator<A>);
}

void base witness table accessor for Sequence in CMLSequence()
{
  lazy protocol witness table accessor for type CMLSequence and conformance CMLSequence((uint64_t)&lazy protocol witness table cache variable for type CMLSequence and conformance CMLSequence);
}

void associated type witness table accessor for Collection.SubSequence : Collection in CMLSequence()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<CMLSequence> and conformance Slice<A>);
}

void lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>(uint64_t a1)
{
  uint64_t *v1;

  if (!OUTLINED_FUNCTION_41_10(a1))
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(v1);
    OUTLINED_FUNCTION_62();
  }
  OUTLINED_FUNCTION_22();
}

void base witness table accessor for Collection in CMLSequence()
{
  lazy protocol witness table accessor for type CMLSequence and conformance CMLSequence((uint64_t)&lazy protocol witness table cache variable for type CMLSequence and conformance CMLSequence);
}

unint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CMLSequence()
{
  return lazy protocol witness table accessor for type Slice<CMLSequence> and conformance <> Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<CMLSequence> and conformance <> Slice<A>);
}

unint64_t lazy protocol witness table accessor for type Slice<CMLSequence> and conformance <> Slice<A>(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = OUTLINED_FUNCTION_41_10(a1);
  if (!result)
  {
    v5 = v4;
    v6 = v3;
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<CMLSequence>);
    lazy protocol witness table accessor for type CMLSequence and conformance CMLSequence(v6);
    v9 = v8;
    result = MEMORY[0x22075B938](v5, v7, &v9);
    atomic_store(result, v1);
  }
  return result;
}

void base witness table accessor for BidirectionalCollection in CMLSequence()
{
  lazy protocol witness table accessor for type CMLSequence and conformance CMLSequence((uint64_t)&lazy protocol witness table cache variable for type CMLSequence and conformance CMLSequence);
}

unint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in CMLSequence()
{
  return lazy protocol witness table accessor for type Slice<CMLSequence> and conformance <> Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<CMLSequence> and conformance <> Slice<A>);
}

void lazy protocol witness table accessor for type CMLSequence and conformance CMLSequence(uint64_t a1)
{
  if (!OUTLINED_FUNCTION_41_10(a1))
  {
    type metadata accessor for CMLSequence();
    OUTLINED_FUNCTION_62();
  }
  OUTLINED_FUNCTION_22();
}

uint64_t outlined retain of Range<MLDataValue.DictionaryType.Index>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  outlined copy of [A : B].Index._Variant<A, B>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined copy of [A : B].Index._Variant<A, B>(v2, v3, v4);
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_29()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_4_34()
{
  uint64_t v0;

  return CMLFeatureValue.init(rawValue:ownsValue:)(v0, 1);
}

uint64_t OUTLINED_FUNCTION_21_18()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_23_16()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_24_17()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_25_13()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_33_14()
{
  void *v0;
  char v1;
  void *v2;

  outlined consume of MLDataValue(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_36_12()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_38_9()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v1, v0, 3);
}

void OUTLINED_FUNCTION_39_9()
{
  void *v0;
  uint64_t v1;

  outlined consume of MLDataValue(v0, *(id *)(v1 - 176), 3);
}

void OUTLINED_FUNCTION_40_10()
{
  MLDataValue.init(_:)();
}

uint64_t OUTLINED_FUNCTION_41_10(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void OUTLINED_FUNCTION_42_9()
{
  specialized RandomAccessCollection<>.distance(from:to:)();
}

uint64_t OUTLINED_FUNCTION_43_11()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t OUTLINED_FUNCTION_44_13@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_45_8(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_46_8()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_47_10@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

void OUTLINED_FUNCTION_49_7()
{
  JUMPOUT(0x22075AB10);
}

uint64_t OUTLINED_FUNCTION_51_11()
{
  return swift_retain();
}

__n128 OUTLINED_FUNCTION_53_12()
{
  uint64_t v0;

  return *(__n128 *)(v0 + 24);
}

void OUTLINED_FUNCTION_54_7(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t OUTLINED_FUNCTION_55_10()
{
  return CMLFeatureValue.__allocating_init()();
}

uint64_t OUTLINED_FUNCTION_60_9()
{
  return CMLSequence.size.getter();
}

_QWORD *initializeBufferWithCopyOfBuffer for MLLogisticRegressionClassifier.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = *(int *)(a3 + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for BaseLogisticRegressionClassifierModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = *(int *)(a3 + 28);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = *(_QWORD *)v19;
    LOBYTE(v19) = v19[8];
    *(_QWORD *)v18 = v20;
    v18[8] = (char)v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MLLogisticRegressionClassifier.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MLLogisticRegressionClassifier.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = *(int *)(a3 + 28);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  LOBYTE(v17) = v17[8];
  *(_QWORD *)v16 = v18;
  v16[8] = (char)v17;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MLLogisticRegressionClassifier.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of FeatureVectorizer<Double>.Transformer((uint64_t)(a1 + 2));
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = *(int *)(a3 + 28);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  LOBYTE(v17) = v17[8];
  *(_QWORD *)v16 = v18;
  v16[8] = (char)v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of FeatureVectorizer<Double>.Transformer(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for MLLogisticRegressionClassifier.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  return a1;
}

_QWORD *assignWithTake for MLLogisticRegressionClassifier.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (!a1[2])
    goto LABEL_5;
  if (!v7)
  {
    outlined destroy of FeatureVectorizer<Double>.Transformer((uint64_t)(a1 + 2));
LABEL_5:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    a1[4] = a2[4];
    goto LABEL_6;
  }
  a1[2] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = *(int *)(a3 + 28);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLogisticRegressionClassifier.Model()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEA2608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for BaseLogisticRegressionClassifierModel();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MLLogisticRegressionClassifier.Model()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEA2688(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for BaseLogisticRegressionClassifierModel();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MLLogisticRegressionClassifier.Model()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLLogisticRegressionClassifier.Model;
  if (!type metadata singleton initialization cache for MLLogisticRegressionClassifier.Model)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MLLogisticRegressionClassifier.Model()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BaseLogisticRegressionClassifierModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void MLLogisticRegressionClassifier.Model.computeMetrics(on:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v6 = type metadata accessor for AnyColumn();
  v7 = MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for DataFrame();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)((uint64_t)v11);
  if (!v3)
  {
    v14[1] = a1;
    v14[3] = a2;
    v13 = *v2;
    v12 = v2[1];
    MEMORY[0x220758A1C](*v2, v12);
    MEMORY[0x220758A1C](v13, v12);
    AnyClassificationMetrics.init(_:_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  OUTLINED_FUNCTION_7();
}

void MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v3 + 16))
  {
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    if (!v2)
    {
      v15 = a1;
      type metadata accessor for MLLogisticRegressionClassifier.Model();
      v9 = BaseLogisticRegressionClassifierModel.applied(features:eventHandler:)();
      MEMORY[0x24BDAC7A8](v9);
      if ((v10 & 1) != 0)
      {
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AHySSGs5NeverOTg5();
        OUTLINED_FUNCTION_1_24();
        v11 = OUTLINED_FUNCTION_2_30();
        specialized MLLogisticRegressionClassifier.Model.buildDataFrame<A>(_:)(v11, v12);
      }
      else
      {
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_AIs5NeverOTg5();
        OUTLINED_FUNCTION_1_24();
        v13 = OUTLINED_FUNCTION_2_30();
        specialized MLLogisticRegressionClassifier.Model.buildDataFrame<A>(_:)(v13, v14);
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    OUTLINED_FUNCTION_7();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t specialized MLLogisticRegressionClassifier.Model.buildDataFrame<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t MLComponents26ClassificationDistributionVySiGG_SiSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_Si_TG5s7KeyPathCyAiKGTf1cn_n;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = a2;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v19 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<ClassificationDistribution<Int>>);
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2[1];
  v23 = *v2;
  v24 = v8;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0x6C696261626F7250;
  v9._object = (void *)0xEB00000000797469;
  String.append(_:)(v9);
  v23 = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<Int>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClassificationDistribution<Int>]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [ClassificationDistribution<Int>] and conformance [A], &demangling cache variable for type metadata for [ClassificationDistribution<Int>]);
  Column.init<A>(name:contents:)();
  v21 = MEMORY[0x24BEE1768];
  v22 = MEMORY[0x24BEE1778];
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  MLComponents26ClassificationDistributionVySiGG_SiSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_Si_TG5s7KeyPathCyAiKGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySiGG_SiSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_Si_TG5s7KeyPathCyAiKGTf1cn_n(a1);
  swift_release();
  v23 = MLComponents26ClassificationDistributionVySiGG_SiSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_Si_TG5s7KeyPathCyAiKGTf1cn_n;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int?]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [Int?] and conformance [A], &demangling cache variable for type metadata for [Int?]);
  Column.init<A>(name:contents:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
  type metadata accessor for AnyColumn();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21AFE7F70;
  v12 = v17;
  Column.eraseToAnyColumn()();
  v13 = v16;
  Column.eraseToAnyColumn()();
  v23 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn]);
  DataFrame.init<A>(columns:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v7, v13);
}

{
  uint64_t *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t MLComponents26ClassificationDistributionVySSGG_SSSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_SS_TG5s7KeyPathCyAiKGTf1cn_n;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = a2;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  v19 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<ClassificationDistribution<String>>);
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2[1];
  v23 = *v2;
  v24 = v8;
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0x6C696261626F7250;
  v9._object = (void *)0xEB00000000797469;
  String.append(_:)(v9);
  v23 = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClassificationDistribution<String>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ClassificationDistribution<String>]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [ClassificationDistribution<String>] and conformance [A], &demangling cache variable for type metadata for [ClassificationDistribution<String>]);
  Column.init<A>(name:contents:)();
  v21 = MEMORY[0x24BEE0D00];
  v22 = MEMORY[0x24BEE0D10];
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  MLComponents26ClassificationDistributionVySSGG_SSSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_SS_TG5s7KeyPathCyAiKGTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents26ClassificationDistributionVySSGG_SSSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_SS_TG5s7KeyPathCyAiKGTf1cn_n(a1);
  swift_release();
  v23 = MLComponents26ClassificationDistributionVySSGG_SSSgs5NeverOTg503_s8d81ML22AnyTreeClassifierModelV14buildDataFramey07TabularH00hI0VSay0A12MLComponents26fG26VyxGGSHRzlFxSgAKcfu_SS_TG5s7KeyPathCyAiKGTf1cn_n;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [String?] and conformance [A], &demangling cache variable for type metadata for [String?]);
  Column.init<A>(name:contents:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
  type metadata accessor for AnyColumn();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21AFE7F70;
  v12 = v17;
  Column.eraseToAnyColumn()();
  v13 = v16;
  Column.eraseToAnyColumn()();
  v23 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
  lazy protocol witness table accessor for type [ClassificationDistribution<Int>] and conformance [A](&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn]);
  DataFrame.init<A>(columns:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v7, v13);
}

uint64_t closure #1 in MLLogisticRegressionClassifier.Model.convertDistribution(_:labels:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Classification<Int>);
  Classification.label.getter();
  if ((v4 & 0x8000000000000000) == 0 && v4 < v2)
  {
    Classification.label.getter();
    if ((v4 & 0x8000000000000000) == 0 && v4 < v2)
    {
      Classification.probability.getter();
      return Classification.init(label:probability:)();
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Classification<Int>);
  Classification.label.getter();
  if ((v4 & 0x8000000000000000) == 0 && v4 < v2)
  {
    Classification.label.getter();
    if ((v4 & 0x8000000000000000) == 0 && v4 < v2)
    {
      swift_bridgeObjectRetain();
      Classification.probability.getter();
      return Classification.init(label:probability:)();
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Transformer.applied(to:eventHandler:) in conformance MLLogisticRegressionClassifier.Model(uint64_t a1)
{
  uint64_t v1;

  MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)(a1);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v1 + 8));
}

unint64_t lazy protocol witness table accessor for type MLLogisticRegressionClassifier.Model and conformance MLLogisticRegressionClassifier.Model()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MLLogisticRegressionClassifier.Model and conformance MLLogisticRegressionClassifier.Model;
  if (!lazy protocol witness table cache variable for type MLLogisticRegressionClassifier.Model and conformance MLLogisticRegressionClassifier.Model)
  {
    v1 = type metadata accessor for MLLogisticRegressionClassifier.Model();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLLogisticRegressionClassifier.Model, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLLogisticRegressionClassifier.Model and conformance MLLogisticRegressionClassifier.Model);
  }
  return result;
}

uint64_t partial apply for closure #2 in MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)()
{
  return closure #1 in AnyTreeClassifierModel.applied(to:eventHandler:)();
}

uint64_t partial apply for closure #1 in MLLogisticRegressionClassifier.Model.applied(to:eventHandler:)()
{
  return closure #1 in AnyTreeClassifierModel.applied(to:eventHandler:)();
}

uint64_t sub_21AEA3390()
{
  return 16;
}

__n128 sub_21AEA339C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in MLLogisticRegressionClassifier.Model.convertDistribution(_:labels:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in MLLogisticRegressionClassifier.Model.convertDistribution(_:labels:)(a1, *(_QWORD *)(v1 + 16));
}

{
  uint64_t v1;

  return closure #1 in MLLogisticRegressionClassifier.Model.convertDistribution(_:labels:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t destroy for ClassificationMetricsContainer()
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for ClassificationMetricsContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ClassificationMetricsContainer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ClassificationMetricsContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ClassificationMetricsContainer()
{
  return &type metadata for ClassificationMetricsContainer;
}

uint64_t initializeBufferWithCopyOfBuffer for MLLogisticRegressionClassifier.Classifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2 + 4;
    v10 = a2[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10)
    {
      *(_QWORD *)(a1 + 56) = v10;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8))(a1 + 32, (uint64_t)(a2 + 4), v10);
    }
    else
    {
      v12 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *v9;
      *(_OWORD *)(a1 + 48) = v12;
    }
    v13 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v13;
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    v14 = *((_BYTE *)a2 + 112);
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_BYTE *)(a1 + 112) = v14;
    v15 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v15;
    v16 = a2[17];
    v17 = *(int *)(a3 + 36);
    v18 = a1 + v17;
    v19 = (uint64_t)a2 + v17;
    *(_QWORD *)(a1 + 136) = v16;
    v20 = type metadata accessor for BaseLogisticRegressionClassifier();
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21(v18, v19, v20);
  }
  return a1;
}

uint64_t destroy for MLLogisticRegressionClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
    __swift_destroy_boxed_opaque_existential_0(a1 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for BaseLogisticRegressionClassifier();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for MLLogisticRegressionClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = (_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v9 - 8))(a1 + 32, v8, v9);
  }
  else
  {
    v10 = v8[1];
    *(_OWORD *)(a1 + 32) = *v8;
    *(_OWORD *)(a1 + 48) = v10;
  }
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v12 = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = v12;
  v13 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v13;
  v14 = *(_QWORD *)(a2 + 136);
  v15 = *(int *)(a3 + 36);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)(a1 + 136) = v14;
  v18 = type metadata accessor for BaseLogisticRegressionClassifier();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for MLLogisticRegressionClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 56) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 32, a2 + 32);
      goto LABEL_8;
    }
LABEL_7:
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_0(a1 + 32);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
LABEL_8:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v8 = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 36);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for BaseLogisticRegressionClassifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for MLLogisticRegressionClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x49uLL);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for BaseLogisticRegressionClassifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for MLLogisticRegressionClassifier.Classifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 56))
    __swift_destroy_boxed_opaque_existential_0(a1 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v9 = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  swift_bridgeObjectRelease();
  v11 = *(int *)(a3 + 36);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for BaseLogisticRegressionClassifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLogisticRegressionClassifier.Classifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEA3AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_23_17();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MLLogisticRegressionClassifier.Classifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEA3B6C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = OUTLINED_FUNCTION_23_17();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MLLogisticRegressionClassifier.Classifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLLogisticRegressionClassifier.Classifier;
  if (!type metadata singleton initialization cache for MLLogisticRegressionClassifier.Classifier)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MLLogisticRegressionClassifier.Classifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BaseLogisticRegressionClassifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void associated type witness table accessor for SupervisedTabularEstimator.Transformer : TabularTransformer in MLLogisticRegressionClassifier.Classifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLLogisticRegressionClassifier.Model and conformance MLLogisticRegressionClassifier.Model, (void (*)(uint64_t))type metadata accessor for MLLogisticRegressionClassifier.Model);
}

void MLLogisticRegressionClassifier.Classifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _BYTE v34[80];

  OUTLINED_FUNCTION_8_1();
  v32 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v31 = v10;
  v12 = v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Double, Int>.Configuration);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_50();
  v17 = v15 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v29 - v19;
  *(_QWORD *)v12 = v9;
  *(_QWORD *)(v12 + 8) = v7;
  *(_QWORD *)(v12 + 16) = v5;
  v30 = v12 + 24;
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v3, v12 + 24);
  *(_QWORD *)(v12 + 120) = v5;
  *(_QWORD *)(v12 + 128) = 0xD000000000000013;
  *(_QWORD *)(v12 + 136) = 0x800000021AFF21B0;
  v33 = v3;
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters(v3, (uint64_t)v34);
  lazy protocol witness table accessor for type Double and conformance Double();
  OUTLINED_FUNCTION_31_2();
  LogisticRegressionClassifier.Configuration.init()();
  LogisticRegressionClassifier.Configuration.maximumIterations.setter();
  LogisticRegressionClassifier.Configuration.l1Penalty.setter();
  LogisticRegressionClassifier.Configuration.l2Penalty.setter();
  LogisticRegressionClassifier.Configuration.stepSize.setter();
  LogisticRegressionClassifier.Configuration.convergenceThreshold.setter();
  outlined destroy of MLLogisticRegressionClassifier.ModelParameters((uint64_t)v34);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v17, v20, v13);
  OUTLINED_FUNCTION_12_25();
  BaseLogisticRegressionClassifier.init(configuration:)();
  v21 = v32;
  v22 = static Labels.collected(from:_:)(v31, v32);
  if (v0)
  {
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters((uint64_t)v33);
    outlined destroy of FeatureMatrixBuilder<Float>(v21, &demangling cache variable for type metadata for AnyColumn?);
    v24 = OUTLINED_FUNCTION_123_1();
    OUTLINED_FUNCTION_42_3(v24);
    OUTLINED_FUNCTION_6_28();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters(v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = type metadata accessor for BaseLogisticRegressionClassifier();
    OUTLINED_FUNCTION_25_14(*(_QWORD *)(v25 - 8));
  }
  else
  {
    v26 = v22;
    v27 = v23;
    outlined destroy of MLLogisticRegressionClassifier.ModelParameters((uint64_t)v33);
    outlined destroy of FeatureMatrixBuilder<Float>(v21, &demangling cache variable for type metadata for AnyColumn?);
    v28 = OUTLINED_FUNCTION_123_1();
    OUTLINED_FUNCTION_42_3(v28);
    OUTLINED_FUNCTION_6_28();
    *(_QWORD *)(v12 + 104) = v26;
    *(_BYTE *)(v12 + 112) = v27 & 1;
  }
  OUTLINED_FUNCTION_7();
}

void MLLogisticRegressionClassifier.Classifier.fitted(to:validateOn:eventHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ML16ColumnDescriptorVsAE_pTg5;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD v71[4];
  uint64_t v72;

  OUTLINED_FUNCTION_8_1();
  v2 = v0;
  v64 = v3;
  v65 = v4;
  v68 = v5;
  v7 = v6;
  v60 = v8;
  v9 = OUTLINED_FUNCTION_24_18();
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_208();
  v61 = v11;
  MEMORY[0x24BDAC7A8](v12);
  v57 = (char *)&v51 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_64();
  v67 = v15;
  v66 = type metadata accessor for DataFrame();
  v63 = *(_QWORD *)(v66 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_64();
  v62 = v17;
  v18 = OUTLINED_FUNCTION_123_1();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_49();
  v22 = v21 - v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_50();
  v27 = v25 - v26;
  MEMORY[0x24BDAC7A8](v28);
  v69 = v2;
  v70 = v7;
  v29 = v2[2];
  v71[2] = v7;
  OUTLINED_FUNCTION_31_2();
  ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)closure #1 in FeatureVectorizer.fitted(to:)partial apply, (uint64_t)v71, v29);
  swift_bridgeObjectRelease();
  if (!v1)
  {
    v55 = v23;
    v56 = v22;
    v72 = v18;
    v53 = v27;
    v54 = v24;
    OUTLINED_FUNCTION_18_17();
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    v51 = (unint64_t)"raining samples.";
    v31 = v69;
    v32 = v69[13];
    v52 = *((unsigned __int8 *)v69 + 112);
    v33 = v56;
    MEMORY[0x220758A1C](*v69, v69[1]);
    v34 = v33;
    v35 = Labels.encodeAnnotations(_:)(v33, v32, v52);
    v36 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v36(v34, v72);
    v37 = v67;
    outlined init with copy of DataFrame?(v68, v67);
    v38 = v66;
    if (__swift_getEnumTagSinglePayload(v37, 1, v66) == 1)
    {
      v70 = ML16ColumnDescriptorVsAE_pTg5;
      outlined destroy of FeatureMatrixBuilder<Float>(v37, &demangling cache variable for type metadata for DataFrame?);
      OUTLINED_FUNCTION_12_25();
      v39 = v61;
      BaseLogisticRegressionClassifier.fitted(features:annotations:classCount:eventHandler:)();
      OUTLINED_FUNCTION_11_24();
      OUTLINED_FUNCTION_106_0();
LABEL_7:
      v46 = *v31;
      v45 = v31[1];
      v47 = OUTLINED_FUNCTION_35_6();
      v48 = v60;
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))((char *)v60 + *(int *)(v47 + 24), v39, v59);
      v49 = v31[13];
      v50 = *((_BYTE *)v31 + 112);
      *v48 = v46;
      v48[1] = v45;
      v48[2] = v70;
      v48[3] = 0xD000000000000013;
      v48[4] = v51 | 0x8000000000000000;
      OUTLINED_FUNCTION_20_16(v49, v50);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    v68 = v35;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 32))(v62, v37, v38);
    OUTLINED_FUNCTION_18_17();
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    v70 = ML16ColumnDescriptorVsAE_pTg5;
    v40 = v69;
    v41 = v69[13];
    v67 = 0;
    v42 = *((_BYTE *)v69 + 112);
    v43 = v56;
    MEMORY[0x220758A1C](*v69, v69[1]);
    Labels.encodeAnnotations(_:)(v43, v41, v42);
    v36(v43, v72);
    v31 = v40;
    OUTLINED_FUNCTION_12_25();
    v39 = v57;
    v44 = v67;
    BaseLogisticRegressionClassifier.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:classCount:eventHandler:)();
    if (!v44)
    {
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_106_0();
      OUTLINED_FUNCTION_8_26();
      OUTLINED_FUNCTION_15_21();
      OUTLINED_FUNCTION_27_23();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_26_2();
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_106_0();
    OUTLINED_FUNCTION_8_26();
    OUTLINED_FUNCTION_15_21();
    OUTLINED_FUNCTION_27_23();
  }
LABEL_8:
  OUTLINED_FUNCTION_7();
}

void MLLogisticRegressionClassifier.Classifier.init(labels:annotationColumnName:featureColumnNames:)(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[4];

  v32 = a4;
  v33 = a1;
  v34 = a2;
  v9 = OUTLINED_FUNCTION_23_17();
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v35 = v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Double, Int>.Configuration);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_50();
  v16 = v14 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v32 - v18;
  v20 = type metadata accessor for MLLogisticRegressionClassifier.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_50();
  v24 = v22 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v32 - v26;
  v28 = v32;
  *(_QWORD *)a6 = a3;
  *(_QWORD *)(a6 + 8) = v28;
  *(_QWORD *)(a6 + 16) = a5;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  *((_WORD *)v27 + 8) = 256;
  swift_storeEnumTagMultiPayload();
  *(_OWORD *)(a6 + 32) = 0u;
  *(_QWORD *)(a6 + 24) = 10;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = xmmword_21AFE9550;
  *(_OWORD *)(a6 + 80) = xmmword_21AFE9560;
  *(_BYTE *)(a6 + 96) = 1;
  outlined init with copy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v27, v24);
  v38[3] = v20;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v38);
  outlined init with take of MLLogisticRegressionClassifier.ModelParameters.ValidationData(v24, (uint64_t)boxed_opaque_existential_0);
  swift_bridgeObjectRetain();
  outlined assign with take of Any?((uint64_t)v38, a6 + 32);
  outlined destroy of MLLogisticRegressionClassifier.ModelParameters.ValidationData((uint64_t)v27);
  *(_QWORD *)(a6 + 104) = v33;
  *(_BYTE *)(a6 + 112) = v34 & 1;
  *(_QWORD *)(a6 + 120) = a5;
  *(_QWORD *)(a6 + 128) = 0xD000000000000013;
  *(_QWORD *)(a6 + 136) = 0x800000021AFF21B0;
  lazy protocol witness table accessor for type Double and conformance Double();
  LogisticRegressionClassifier.Configuration.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v16, v19, v12);
  v30 = v35;
  BaseLogisticRegressionClassifier.init(configuration:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  v31 = type metadata accessor for MLLogisticRegressionClassifier.Classifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(a6 + *(int *)(v31 + 36), v30, v37);
  OUTLINED_FUNCTION_9_5();
}

uint64_t MLLogisticRegressionClassifier.Classifier.annotationColumnID.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<String, Int>);
  swift_bridgeObjectRetain();
  return ColumnID.init(_:_:)();
}

uint64_t MLLogisticRegressionClassifier.Classifier.annotationColumnID.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Either<String, Int>>);
  v5 = ColumnID.name.getter();
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  result = swift_bridgeObjectRelease();
  *v2 = v5;
  v2[1] = v7;
  return result;
}

void (*protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance MLLogisticRegressionClassifier.Classifier(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Either<String, Int>>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  MLLogisticRegressionClassifier.Classifier.annotationColumnID.getter();
  return protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance MLLogisticRegressionClassifier.Classifier;
}

void protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance MLLogisticRegressionClassifier.Classifier(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    MLLogisticRegressionClassifier.Classifier.annotationColumnID.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    MLLogisticRegressionClassifier.Classifier.annotationColumnID.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance MLLogisticRegressionClassifier.Classifier()
{
  uint64_t v0;

  MLLogisticRegressionClassifier.Classifier.fitted(to:validateOn:eventHandler:)();
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance MLLogisticRegressionClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  return MLLogisticRegressionClassifier.Classifier.encode(_:to:)(a1, a2);
}

uint64_t MLLogisticRegressionClassifier.Classifier.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  __swift_mutable_project_boxed_opaque_existential_1(a2, *(_QWORD *)(a2 + 24));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer?);
  lazy protocol witness table accessor for type FeatureVectorizer<Double>.Transformer? and conformance <A> A?();
  result = dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  if (!v2)
  {
    OUTLINED_FUNCTION_35_6();
    __swift_mutable_project_boxed_opaque_existential_1(a2, *(_QWORD *)(a2 + 24));
    OUTLINED_FUNCTION_24_18();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type BaseLogisticRegressionClassifierModel and conformance BaseLogisticRegressionClassifierModel, (void (*)(uint64_t))MEMORY[0x24BDC6078]);
    return dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  }
  return result;
}

void protocol witness for SupervisedTabularEstimator.decode(from:) in conformance MLLogisticRegressionClassifier.Classifier()
{
  MLLogisticRegressionClassifier.Classifier.decode(from:)();
}

void base witness table accessor for SupervisedTabularEstimator in MLLogisticRegressionClassifier.Classifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLLogisticRegressionClassifier.Classifier and conformance MLLogisticRegressionClassifier.Classifier, (void (*)(uint64_t))type metadata accessor for MLLogisticRegressionClassifier.Classifier);
}

void MLLogisticRegressionClassifier.Classifier.decode(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  OUTLINED_FUNCTION_8_1();
  v15 = v0;
  v3 = v2;
  v19 = v4;
  v5 = OUTLINED_FUNCTION_24_18();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v9 = v8 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
  __swift_mutable_project_boxed_opaque_existential_1(v3, *(_QWORD *)(v3 + 24));
  lazy protocol witness table accessor for type FeatureVectorizer<Double>.Transformer and conformance FeatureVectorizer<A>.Transformer(&lazy protocol witness table cache variable for type FeatureVectorizer<Double>.Transformer and conformance FeatureVectorizer<A>.Transformer);
  dispatch thunk of EstimatorDecoder.decode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1(v3, *(_QWORD *)(v3 + 24));
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type BaseLogisticRegressionClassifierModel and conformance BaseLogisticRegressionClassifierModel, (void (*)(uint64_t))MEMORY[0x24BDC6078]);
    dispatch thunk of EstimatorDecoder.decode<A>(_:)();
    v11 = *v0;
    v10 = v0[1];
    v12 = OUTLINED_FUNCTION_35_6();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(&v19[*(int *)(v12 + 24)], v9, v5);
    v13 = v15[13];
    v14 = *((_BYTE *)v15 + 112);
    *(_QWORD *)v19 = v11;
    *((_QWORD *)v19 + 1) = v10;
    *((_QWORD *)v19 + 2) = v16;
    *((_QWORD *)v19 + 3) = v17;
    *((_QWORD *)v19 + 4) = v18;
    OUTLINED_FUNCTION_20_16(v13, v14);
    swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_7();
}

void MLLogisticRegressionClassifier.Classifier.makeTransformer()(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v13;

  v3 = type metadata accessor for BaseLogisticRegressionClassifierModel();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  v9 = *v1;
  v8 = v1[1];
  v10 = v1[13];
  v11 = *((_BYTE *)v1 + 112);
  type metadata accessor for MLLogisticRegressionClassifier.Classifier();
  OUTLINED_FUNCTION_31_2();
  BaseLogisticRegressionClassifier.makeTransformer(classCount:)();
  *(_QWORD *)a1 = v9;
  *((_QWORD *)a1 + 1) = v8;
  v12 = type metadata accessor for MLLogisticRegressionClassifier.Model();
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 2) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&a1[*(int *)(v12 + 24)], v7, v3);
  v13 = &a1[*(int *)(v12 + 28)];
  *(_QWORD *)v13 = v10;
  v13[8] = v11;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_9_5();
}

void MLLogisticRegressionClassifier.Classifier.update(_:with:eventHandler:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t ML16ColumnDescriptorVsAE_pTg5;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;

  OUTLINED_FUNCTION_8_1();
  v35 = v2;
  v33 = v3;
  v5 = v4;
  v7 = v6;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  v34 = *(_QWORD *)(v36 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v40 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v13 = v12 - v11;
  v14 = OUTLINED_FUNCTION_123_1();
  v37 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_208();
  v32 = v16;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v31 - v19;
  ML16ColumnDescriptorVsAE_pTg5 = v7[2];
  v39 = v0;
  if (!ML16ColumnDescriptorVsAE_pTg5)
  {
    v27 = v0[2];
    MEMORY[0x24BDAC7A8](v18);
    v31[-2] = v5;
    swift_bridgeObjectRetain();
    ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)partial apply for closure #1 in FeatureVectorizer.fitted(to:), (uint64_t)&v31[-4], v27);
    OUTLINED_FUNCTION_101();
    if (v1)
    {
LABEL_10:
      OUTLINED_FUNCTION_7();
      return;
    }
    outlined consume of FeatureVectorizer<Float>.Transformer?(v7[2]);
    v7[2] = ML16ColumnDescriptorVsAE_pTg5;
    v7[3] = 0xD000000000000013;
    v7[4] = 0x800000021AFF21B0;
  }
  v22 = OUTLINED_FUNCTION_35_6();
  v23 = (char *)v7 + *(int *)(v22 + 28);
  v24 = *(_QWORD *)v23;
  if (*(_QWORD *)(*(_QWORD *)v23 + 16))
  {
    v25 = v23[8];
    if (ML16ColumnDescriptorVsAE_pTg5)
      goto LABEL_4;
    goto LABEL_12;
  }
  v31[1] = v22;
  MEMORY[0x220758A1C](*v39, v39[1]);
  __swift_storeEnumTagSinglePayload(v13, 1, 1, v38);
  v28 = static Labels.collected(from:_:)((uint64_t)v20, v13);
  if (v1)
  {
    outlined destroy of FeatureMatrixBuilder<Float>(v13, &demangling cache variable for type metadata for AnyColumn?);
    OUTLINED_FUNCTION_9_25();
    goto LABEL_10;
  }
  v24 = v28;
  v30 = v29;
  outlined destroy of FeatureMatrixBuilder<Float>(v13, &demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_9_25();
  swift_bridgeObjectRelease();
  *(_QWORD *)v23 = v24;
  v23[8] = v30 & 1;
  v25 = v30;
  if (v7[2])
  {
LABEL_4:
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    if (!v1)
    {
      v26 = v32;
      MEMORY[0x220758A1C](*v39, v39[1]);
      Labels.encodeAnnotations(_:)(v26, v24, v25 & 1);
      OUTLINED_FUNCTION_25_14(v37);
      OUTLINED_FUNCTION_12_25();
      BaseLogisticRegressionClassifier.update(_:features:annotations:eventHandler:)();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v40, v36);
      swift_bridgeObjectRelease();
    }
    goto LABEL_10;
  }
LABEL_12:
  __break(1u);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.update(_:with:eventHandler:) in conformance MLLogisticRegressionClassifier.Classifier()
{
  uint64_t v0;

  MLLogisticRegressionClassifier.Classifier.update(_:with:eventHandler:)();
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.encodeWithOptimizer(_:to:) in conformance MLLogisticRegressionClassifier.Classifier(uint64_t a1, uint64_t a2)
{
  return protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance MLLogisticRegressionClassifier.Classifier(a1, a2);
}

void protocol witness for UpdatableSupervisedTabularEstimator.decodeWithOptimizer(from:) in conformance MLLogisticRegressionClassifier.Classifier()
{
  protocol witness for SupervisedTabularEstimator.decode(from:) in conformance MLLogisticRegressionClassifier.Classifier();
}

unint64_t lazy protocol witness table accessor for type FeatureVectorizer<Double>.Transformer? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type FeatureVectorizer<Double>.Transformer? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type FeatureVectorizer<Double>.Transformer? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer?);
    lazy protocol witness table accessor for type FeatureVectorizer<Double>.Transformer and conformance FeatureVectorizer<A>.Transformer(&lazy protocol witness table cache variable for type FeatureVectorizer<Double>.Transformer and conformance FeatureVectorizer<A>.Transformer);
    v3 = v2;
    result = MEMORY[0x22075B938](MEMORY[0x24BEE4AA8], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeatureVectorizer<Double>.Transformer? and conformance <A> A?);
  }
  return result;
}

void lazy protocol witness table accessor for type FeatureVectorizer<Double>.Transformer and conformance FeatureVectorizer<A>.Transformer(_QWORD *a1)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FeatureVectorizer<Double>.Transformer);
    OUTLINED_FUNCTION_62();
  }
  OUTLINED_FUNCTION_22();
}

uint64_t OUTLINED_FUNCTION_6_28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 72) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_8_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 248) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_9_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_11_24()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 248) + 8))(v0, *(_QWORD *)(v1 - 240));
}

uint64_t OUTLINED_FUNCTION_12_25()
{
  return type metadata accessor for MLLogisticRegressionClassifier.Classifier();
}

uint64_t OUTLINED_FUNCTION_15_21()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 176) + 8))(*(_QWORD *)(v1 - 184), v0);
}

uint64_t OUTLINED_FUNCTION_20_16@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;

  *(_QWORD *)v2 = a1;
  *(_BYTE *)(v2 + 8) = a2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_23_17()
{
  return type metadata accessor for BaseLogisticRegressionClassifier();
}

uint64_t OUTLINED_FUNCTION_24_18()
{
  return type metadata accessor for BaseLogisticRegressionClassifierModel();
}

uint64_t OUTLINED_FUNCTION_25_14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_27_23()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(*(_QWORD *)(v2 - 72), v1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_18CreateMLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v23 = a2;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v10 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v24 = a3;
    v19 = v3;
    v27 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v14 = v27;
    v15 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v16 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v21 = v16;
    do
    {
      v20(v9, v15, v6);
      v25 = v23;
      v26 = v24;
      swift_bridgeObjectRetain();
      AnnotatedFeature.init(feature:annotation:)();
      v27 = v14;
      v17 = *(_QWORD *)(v14 + 16);
      if (v17 >= *(_QWORD *)(v14 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v14 = v27;
      }
      *(_QWORD *)(v14 + 16) = v17 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v17, v12, v22);
      v15 += v21;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v14;
}

void specialized Array.append<A>(contentsOf:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  OUTLINED_FUNCTION_23_18();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_0_35() || v4 > *(_QWORD *)(v2 + 24) >> 1)
  {
    OUTLINED_FUNCTION_22_16();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v6;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_20_17();
  if (v7 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)();
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_123();
    *v1 = v2;
    OUTLINED_FUNCTION_164();
    return;
  }
  OUTLINED_FUNCTION_17_16();
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_23_18();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_0_35() || v4 > *(_QWORD *)(v2 + 24) >> 1)
  {
    OUTLINED_FUNCTION_22_16();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v6;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  if ((*(_QWORD *)(v2 + 24) >> 1) - *(_QWORD *)(v2 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<MLShapedArray<Float>, String>);
  OUTLINED_FUNCTION_2_36();
  specialized UnsafeMutablePointer.initialize(from:count:)(v0 + v7, v3);
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_123();
    *v1 = v2;
    OUTLINED_FUNCTION_164();
    return;
  }
  OUTLINED_FUNCTION_17_16();
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:), (void (*)(_QWORD))MEMORY[0x24BE62DF0]);
}

{
  specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:), (void (*)(_QWORD))MEMORY[0x24BE62918]);
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_0_35() || v7 + v5 > *(_QWORD *)(v6 + 24) >> 1)
  {
    OUTLINED_FUNCTION_22_16();
    v6 = a2();
  }
  if (!*(_QWORD *)(v3 + 16))
  {
    if (!v5)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_20_17();
  if (v11 != v12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  a3(v3 + 32, v5, v6 + 8 * v10 + 32);
  if (!v5)
  {
LABEL_11:
    OUTLINED_FUNCTION_123();
    *v4 = v6;
    OUTLINED_FUNCTION_8_0();
    return;
  }
  OUTLINED_FUNCTION_17_16();
  if (!v12)
  {
    *(_QWORD *)(v6 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t, uint64_t, uint64_t), void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 16);
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_0_35() || v8 + v6 > *(_QWORD *)(v7 + 24) >> 1)
  {
    OUTLINED_FUNCTION_22_16();
    v7 = a2();
  }
  if (!*(_QWORD *)(v4 + 16))
  {
    if (!v6)
      goto LABEL_11;
    goto LABEL_13;
  }
  v12 = *(_QWORD *)(v7 + 16);
  v13 = (*(_QWORD *)(v7 + 24) >> 1) - v12;
  a4(0);
  if (v13 < v6)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_2_36();
  a3(v4 + v16, v6, v15 + v14 * v12);
  if (!v6)
  {
LABEL_11:
    OUTLINED_FUNCTION_123();
    *v5 = v7;
    return;
  }
  OUTLINED_FUNCTION_17_16();
  if (!v18)
  {
    *(_QWORD *)(v7 + 16) = v17;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t static MLSoundClassifier.FeatureExtractor.extractFeatures(from:options:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  _OWORD v9[2];

  v3 = a2[1];
  v8 = *a2;
  v9[0] = v3;
  *(_OWORD *)((char *)v9 + 9) = *(__int128 *)((char *)a2 + 25);
  v4 = swift_bridgeObjectRetain();
  v5 = specialized Sequence.flatMap<A>(_:)(v4);
  OUTLINED_FUNCTION_123();
  v6 = OUTLINED_FUNCTION_9_1();
  specialized MLSoundClassifier.FeatureExtractor.init<A>(files:options:)(v5, &v8);
  if (!v2)
  {
    v6 = MLSoundClassifier.FeatureExtractor.extractFeatures()();
    swift_release();
  }
  return v6;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  id v21;
  double v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  Swift::Int v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void *v51;
  id v52;
  double v53;
  uint64_t result;
  _QWORD v55[2];
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  id v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  char *v67;
  _OWORD v68[2];
  uint64_t v69;
  char v70;
  uint64_t v71;

  v4 = v3;
  v71 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v67 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v59 = (char *)v55 - v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v55 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *((_QWORD *)a2 + 4);
  v19 = *((_BYTE *)a2 + 40);
  v20 = a2[1];
  v66 = *a2;
  v68[0] = v66;
  v68[1] = v20;
  v69 = v18;
  v70 = v19;
  v58 = v2;
  v21 = static MLSoundClassifier.FeatureExtractor.getFeaturePrintRequest(options:)((uint64_t)v68);
  HIDWORD(v22) = DWORD1(v66);
  *(float *)&v22 = *(double *)&v66;
  v60 = v21;
  objc_msgSend(v21, sel_setOverlapFactor_, v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLShapedArray<Float>]);
  lazy protocol witness table accessor for type URL and conformance URL();
  v23 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v24 = *(_QWORD *)(a1 + 16);
  v55[1] = a1;
  if (v24)
  {
    v25 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v61 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)&v66 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRetain();
    v56 = v17;
    v57 = v14;
    while (1)
    {
      v26 = (void (*)(char *, char *, uint64_t))v66;
      ((void (*)(char *, uint64_t, uint64_t))v66)(v17, v25, v7);
      OUTLINED_FUNCTION_106_3((uint64_t)v17, 0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v7) == 1)
        break;
      v64 = v25;
      v65 = v24;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v17, v7);
      v27 = (uint64_t)v59;
      v26(v59, v14, v7);
      v28 = objc_allocWithZone(MEMORY[0x24BDE9AC8]);
      v29 = @nonobjc SNAudioFileAnalyzer.init(url:)(v27);
      if (v4)
      {
        OUTLINED_FUNCTION_18_18();
        OUTLINED_FUNCTION_8_27();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_2_32();
        return (uint64_t)v23;
      }
      v30 = v29;
      v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9B60]), sel_init);
      *(_QWORD *)&v68[0] = 0;
      if ((objc_msgSend(v30, sel_addRequest_withObserver_error_, v60, v31, v68) & 1) == 0)
      {
        v51 = v30;
        v52 = *(id *)&v68[0];
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_2_32();
        _convertNSErrorToError(_:)();

        swift_willThrow(v53);
        OUTLINED_FUNCTION_18_18();

        OUTLINED_FUNCTION_8_27();
        return (uint64_t)v23;
      }
      v32 = v8;
      v63 = 0;
      v33 = *(id *)&v68[0];
      v62 = v30;
      objc_msgSend(v30, sel_analyze);
      v34 = v7;
      ((void (*)(char *, char *, uint64_t))v66)(v67, v14, v7);
      v35 = static MLSoundClassifier.FeatureExtractor.convertResultsToShapedArrays(resultsCollector:options:)();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v68[0] = v23;
      specialized __RawDictionaryStorage.find<A>(_:)();
      v39 = v23[2];
      v40 = (v38 & 1) == 0;
      v41 = v39 + v40;
      if (__OFADD__(v39, v40))
      {
        __break(1u);
LABEL_23:
        __break(1u);
      }
      v42 = v37;
      v43 = v38;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<URL, [MLShapedArray<Float>]>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v41))
      {
        specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v43 & 1) != (v45 & 1))
        {
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        v42 = v44;
      }
      v23 = *(_QWORD **)&v68[0];
      if ((v43 & 1) != 0)
      {
        v46 = *(_QWORD *)(*(_QWORD *)&v68[0] + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v46 + 8 * v42) = v35;
        v7 = v34;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)&v68[0] + 8 * (v42 >> 6) + 64) |= 1 << v42;
        v7 = v34;
        ((void (*)(unint64_t, char *, uint64_t))v66)(v23[6] + v42 * v61, v67, v34);
        *(_QWORD *)(v23[7] + 8 * v42) = v35;
        v47 = v23[2];
        v48 = __OFADD__(v47, 1);
        v49 = v47 + 1;
        if (v48)
          goto LABEL_23;
        v23[2] = v49;
      }
      swift_bridgeObjectRelease();
      v8 = v32;
      v50 = *(void (**)(char *, uint64_t))(v32 + 8);
      v50(v67, v7);

      v14 = v57;
      v50(v57, v7);
      v25 = v64 + v61;
      v24 = v65 - 1;
      v4 = v63;
      v17 = v56;
      if (v65 == 1)
        goto LABEL_17;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_17:
    OUTLINED_FUNCTION_106_3((uint64_t)v17, 1);
  }
  OUTLINED_FUNCTION_18_18();
  OUTLINED_FUNCTION_2_32();
  return (uint64_t)v23;
}

uint64_t MLSoundClassifier.FeatureExtractor.extractFeatures()()
{
  double *v0;
  double *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  os_log_type_t v19;
  Swift::String v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  int isUniquelyReferenced_nonNull_bridgeObject;
  id v43;
  double v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  void *v73;
  id v74;
  char *v75;
  uint64_t v77;
  uint64_t result;
  uint64_t i;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[2];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double *v115;
  uint64_t v116;
  uint64_t aBlock;
  unint64_t v118;
  uint64_t (*v119)(uint64_t);
  void *v120;
  void (*v121)();
  char *v122;
  unint64_t v123;

  v1 = v0;
  v2 = *(_QWORD *)v0;
  v3 = type metadata accessor for URL();
  v107 = *(_QWORD *)(v3 - 8);
  v108 = v3;
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v106 = v4;
  v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v96 = *(_QWORD *)(v109 - 8);
  MEMORY[0x24BDAC7A8](v109);
  OUTLINED_FUNCTION_101_0();
  v105 = v5;
  v101 = v6;
  MEMORY[0x24BDAC7A8](v7);
  v95 = (char *)v86 - v8;
  v113 = type metadata accessor for Date();
  v104 = *(_QWORD *)(v113 - 8);
  MEMORY[0x24BDAC7A8](v113);
  OUTLINED_FUNCTION_64();
  v103 = v9;
  v102 = type metadata accessor for _TablePrinter(0);
  v94 = *(_QWORD *)(v102 - 8);
  MEMORY[0x24BDAC7A8](v102);
  OUTLINED_FUNCTION_101_0();
  v93 = v10;
  v100 = v11;
  MEMORY[0x24BDAC7A8](v12);
  v99 = (_QWORD *)((char *)v86 - v13);
  v14 = *((_QWORD *)v0 + 8);
  v111 = objc_msgSend((id)objc_opt_self(), sel_progressWithTotalUnitCount_, *(_QWORD *)(v14 + 16));
  aBlock = 0;
  v118 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  aBlock = 0x69737365636F7250;
  v118 = 0xEB0000000020676ELL;
  v87 = v14;
  v123 = *(_QWORD *)(v14 + 16);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  OUTLINED_FUNCTION_123();
  v16._countAndFlagsBits = 0x73656C696620;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17 = aBlock;
  v18 = (void *)v118;
  v19 = static os_log_type_t.info.getter();
  v20._countAndFlagsBits = v17;
  v20._object = v18;
  log(_:type:)(v20, v19);
  swift_bridgeObjectRelease();
  v110 = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v110 + 16) = 0;
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1710]), sel_init);
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for NSOperationQueue);
  v22 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFF8);
  v23[2] = 8;
  aBlock = v22;
  v23[4] = v21;
  v23[5] = v21;
  v23[6] = v21;
  v23[7] = v21;
  v23[8] = v21;
  v23[9] = v21;
  v23[10] = v21;
  v23[11] = v21;
  v24 = v21;
  specialized Array._endMutation()();
  v123 = aBlock;
  v25 = OUTLINED_FUNCTION_9_1();
  v26 = v1[2];
  v27 = *((_QWORD *)v1 + 3);
  v28 = *((_QWORD *)v1 + 5);
  v114 = *((_QWORD *)v1 + 4);
  v115 = v1;
  aBlock = *(_QWORD *)&v26;
  v118 = v27;
  v29 = OUTLINED_FUNCTION_19_21(v114);
  v116 = v2;
  v30 = static MLSoundClassifier.FeatureExtractor.getFeaturePrintRequest(options:)(v29);
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for SNCreateFeaturePrintRequest);
  v31 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFF8);
  v32[2] = 8;
  aBlock = v31;
  v32[4] = v30;
  v32[5] = v30;
  v32[6] = v30;
  v32[7] = v30;
  v32[8] = v30;
  v32[9] = v30;
  v32[10] = v30;
  v32[11] = v30;
  v33 = v30;
  specialized Array._endMutation()();
  v34 = aBlock;
  v98 = v25;
  *(_QWORD *)(v25 + 16) = aBlock;
  v35 = v25 + 16;
  v36 = 4;
  v37 = v123;
  do
  {
    objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1710]), sel_init);
    if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
      || (v37 & 0x8000000000000000) != 0
      || (v37 & 0x4000000000000000) != 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()(v37);
    }
    v38 = v36 - 4;
    if ((unint64_t)(v36 - 4) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    OUTLINED_FUNCTION_25_15(v37 & 0xFFFFFFFFFFFFFF8);
    specialized Array._endMutation()();
    v37 = v123;
    if ((v123 & 0xC000000000000001) != 0)
    {
      v39 = (id)MEMORY[0x22075AF48](v36 - 4, v123);
    }
    else
    {
      if (v38 >= *(_QWORD *)((v123 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_45;
      v39 = *(id *)(v123 + 8 * v36);
    }
    v40 = v39;
    objc_msgSend(v39, sel_setMaxConcurrentOperationCount_, 1);

    aBlock = *(_QWORD *)&v26;
    v118 = v27;
    v41 = OUTLINED_FUNCTION_19_21(v114);
    static MLSoundClassifier.FeatureExtractor.getFeaturePrintRequest(options:)(v41);
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *(_QWORD *)v35 = v34;
    if (!isUniquelyReferenced_nonNull_bridgeObject
      || (v34 & 0x8000000000000000) != 0
      || (v34 & 0x4000000000000000) != 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()(v34);
    }
    if (v38 >= *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_46;
    OUTLINED_FUNCTION_25_15(v34 & 0xFFFFFFFFFFFFFF8);
    specialized Array._endMutation()();
    v34 = *(_QWORD *)v35;
    if ((*(_QWORD *)v35 & 0xC000000000000001) != 0)
    {
      v43 = (id)MEMORY[0x22075AF48](v36 - 4, *(_QWORD *)v35);
    }
    else
    {
      if (v38 >= *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_47;
      v43 = *(id *)(v34 + 8 * v36);
    }
    v45 = v43;
    *(float *)&v44 = v26;
    objc_msgSend(v43, sel_setOverlapFactor_, v44);

    ++v36;
  }
  while (v36 != 12);
  v46 = v102;
  v47 = v99;
  v48 = (char *)v99 + *(int *)(v102 + 20);
  Date.init()();
  *v47 = v28;
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v49 = OS_os_log.init(subsystem:category:)();
  v50 = *(int *)(v46 + 24);
  *(_QWORD *)((char *)v47 + v50) = v49;
  v51 = (_QWORD *)((char *)v47 + *(int *)(v46 + 28));
  *v51 = 0x73656C6946;
  v51[1] = 0xE500000000000000;
  v52 = v103;
  Date.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v104 + 40))(v48, v52, v113);
  _TablePrinter.beginTable()();
  _TablePrinter.printRow(currentFileIndex:)(0);
  v53 = OUTLINED_FUNCTION_9_1();
  v97 = v53;
  *(_QWORD *)(v53 + 16) = MEMORY[0x24BEE4AF8];
  v54 = *(_QWORD *)(v87 + 16);
  if (v54)
  {
    v86[0] = v50;
    v86[1] = v53 + 16;
    v104 = *((_QWORD *)v115 + 10);
    v55 = *(unsigned __int8 *)(v96 + 80);
    v91 = ~v55;
    v35 = v87 + ((v55 + 32) & ~v55);
    v103 = *(_QWORD *)(v96 + 72);
    v114 = *(_QWORD *)(v96 + 16);
    v90 = v100 + 7;
    v92 = v55;
    v89 = v55 + 8;
    v88 = v101 + 7;
    swift_bridgeObjectRetain();
    v113 = 0;
    v56 = v112;
    v57 = (uint64_t)v95;
    do
    {
      OUTLINED_FUNCTION_24_19(v57, v35);
      v58 = v106;
      v59 = AnnotatedFeature.feature.getter();
      MEMORY[0x24BDAC7A8](v59);
      v86[-2] = v115;
      v86[-1] = v58;
      v60 = specialized NSLocking.withLock<A>(_:)((void (*)(uint64_t *__return_ptr, id))partial apply for closure #1 in MLSoundClassifier.FeatureExtractor.isProcessed(url:));
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v58, v108);
      if ((v60 & 1) != 0)
      {
        OUTLINED_FUNCTION_9_26();
      }
      else
      {
        v61 = v113 % 8;
        v112 = v56;
        v101 = v54;
        v102 = v113 % 8;
        if ((v123 & 0xC000000000000001) != 0)
        {
          v62 = (char *)MEMORY[0x22075AF48]();
        }
        else
        {
          if ((v61 & 0x8000000000000000) != 0)
            goto LABEL_48;
          if (v61 >= *(_QWORD *)((v123 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_49;
          v62 = (char *)*(id *)(v123 + 8 * v61 + 32);
        }
        v100 = v62;
        v63 = v93;
        outlined init with copy of _TablePrinter((uint64_t)v99, v93);
        OUTLINED_FUNCTION_24_19(v105, v57);
        v64 = (*(unsigned __int8 *)(v94 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
        v65 = (unint64_t)&v90[v64] & 0xFFFFFFFFFFFFFFF8;
        v66 = (v65 + 15) & 0xFFFFFFFFFFFFFFF8;
        v67 = (v89 + v66) & v91;
        v68 = (v88 + v67) & 0xFFFFFFFFFFFFFFF8;
        v69 = (char *)swift_allocObject();
        v70 = v97;
        *((_QWORD *)v69 + 2) = v115;
        *((_QWORD *)v69 + 3) = v70;
        v71 = v111;
        *((_QWORD *)v69 + 4) = v110;
        *((_QWORD *)v69 + 5) = v71;
        v72 = (uint64_t)&v69[v64];
        v57 = (uint64_t)v95;
        outlined init with take of _TablePrinter(v63, v72);
        *(_QWORD *)&v69[v65] = v98;
        *(_QWORD *)&v69[v66] = v102;
        (*(void (**)(char *, uint64_t, uint64_t))(v96 + 32))(&v69[v67], v105, v109);
        *(_QWORD *)&v69[v68] = v116;
        v121 = partial apply for closure #1 in MLSoundClassifier.FeatureExtractor.extractFeatures();
        v122 = v69;
        aBlock = MEMORY[0x24BDAC760];
        v118 = 1107296256;
        v119 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        v120 = &block_descriptor_5;
        v73 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_retain();
        v74 = v111;
        swift_retain();
        swift_release();
        v75 = v100;
        objc_msgSend(v100, sel_addOperationWithBlock_, v73);
        _Block_release(v73);

        OUTLINED_FUNCTION_9_26();
        if (__OFADD__(v113++, 1))
          goto LABEL_50;
        v56 = v112;
        v54 = v101;
      }
      v35 += v103;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
  }
  v35 = v123;
  if (!(v123 >> 62))
  {
    v77 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = OUTLINED_FUNCTION_23_3();
    if (v77)
      goto LABEL_37;
LABEL_43:
    OUTLINED_FUNCTION_123();
    v82 = (uint64_t)v99;
    static os_log_type_t.info.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v83 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v83 + 16) = xmmword_21AFE7DA0;
    v84 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v83 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v83 + 64) = v84;
    *(_QWORD *)(v83 + 32) = 3;
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    outlined destroy of _TablePrinter(v82);
    swift_beginAccess();
    v85 = *(_QWORD *)(v97 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    OUTLINED_FUNCTION_123();
    swift_release();
    swift_release();
    return v85;
  }
LABEL_51:
  OUTLINED_FUNCTION_23_3();
  result = _CocoaArrayWrapper.endIndex.getter();
  v77 = result;
  if (!result)
    goto LABEL_43;
LABEL_37:
  if (v77 >= 1)
  {
    for (i = 0; i != v77; ++i)
    {
      if ((v35 & 0xC000000000000001) != 0)
        v80 = (id)MEMORY[0x22075AF48](i, v35);
      else
        v80 = *(id *)(v35 + 8 * i + 32);
      v81 = v80;
      objc_msgSend(v80, sel_waitUntilAllOperationsAreFinished);

    }
    goto LABEL_43;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int64_t v33;
  uint64_t result;
  uint64_t v35;
  int64_t v36;
  _QWORD v37[5];

  specialized _NativeDictionary.makeIterator()(v37, a1);
  v1 = v37[0];
  v2 = v37[3];
  v3 = v37[4];
  v35 = v37[1];
  v36 = (unint64_t)(v37[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    goto LABEL_3;
LABEL_2:
  v5 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  v6 = v5 | (v2 << 6);
  while (1)
  {
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain_n();
    v13 = swift_bridgeObjectRetain();
    MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_18CreateMLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n(v13, v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n
                    + 16);
    v16 = *(_QWORD *)(v4 + 16);
    if (__OFADD__(v16, v15))
      break;
    if (!swift_isUniquelyReferenced_nonNull_native() || v16 + v15 > *(_QWORD *)(v4 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v17;
    }
    if (*(_QWORD *)(MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n
                   + 16))
    {
      v18 = *(_QWORD *)(v4 + 16);
      v19 = (*(_QWORD *)(v4 + 24) >> 1) - v18;
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
      if (v19 < v15)
        goto LABEL_40;
      v21 = *(_QWORD *)(v20 - 8);
      v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v23 = *(_QWORD *)(v21 + 72);
      v24 = v4 + v22 + v23 * v18;
      v25 = MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n
          + v22;
      v26 = v23 * v15;
      v27 = v24 + v26;
      v28 = v25 + v26;
      if (v25 < v27 && v24 < v28)
        goto LABEL_43;
      swift_arrayInitWithCopy();
      if (v15)
      {
        v30 = *(_QWORD *)(v4 + 16);
        v31 = __OFADD__(v30, v15);
        v32 = v30 + v15;
        if (v31)
          goto LABEL_41;
        *(_QWORD *)(v4 + 16) = v32;
      }
    }
    else if (v15)
    {
      goto LABEL_39;
    }
    swift_bridgeObjectRelease();
    if (v3)
      goto LABEL_2;
LABEL_3:
    v7 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_42;
    if (v7 >= v36)
      goto LABEL_37;
    v8 = *(_QWORD *)(v35 + 8 * v7);
    if (!v8)
    {
      v9 = v2 + 2;
      if (v2 + 2 >= v36)
        goto LABEL_37;
      v8 = *(_QWORD *)(v35 + 8 * v9);
      if (v8)
        goto LABEL_12;
      v9 = v2 + 3;
      if (v2 + 3 >= v36)
        goto LABEL_37;
      v8 = *(_QWORD *)(v35 + 8 * v9);
      if (v8)
        goto LABEL_12;
      v9 = v2 + 4;
      if (v2 + 4 >= v36)
        goto LABEL_37;
      v8 = *(_QWORD *)(v35 + 8 * v9);
      if (v8)
      {
LABEL_12:
        v7 = v9;
      }
      else
      {
        v7 = v2 + 5;
        if (v2 + 5 >= v36)
          goto LABEL_37;
        v8 = *(_QWORD *)(v35 + 8 * v7);
        if (!v8)
        {
          v33 = v2 + 6;
          while (v33 < v36)
          {
            v8 = *(_QWORD *)(v35 + 8 * v33++);
            if (v8)
            {
              v7 = v33 - 1;
              goto LABEL_13;
            }
          }
LABEL_37:
          swift_release();
          return v4;
        }
      }
    }
LABEL_13:
    v3 = (v8 - 1) & v8;
    v6 = __clz(__rbit64(v8)) + (v7 << 6);
    v2 = v7;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD v40[5];
  uint64_t v41;

  specialized _NativeDictionary.makeIterator()(v40, a1);
  v1 = v40[0];
  v34 = v40[1];
  v2 = v40[3];
  v3 = v40[4];
  v36 = (unint64_t)(v40[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  v4 = MEMORY[0x24BEE4AF8];
  v35 = v1;
  if (!v3)
    goto LABEL_3;
LABEL_2:
  v5 = __clz(__rbit64(v3));
  v6 = (v3 - 1) & v3;
  v7 = v5 | (v2 << 6);
  while (1)
  {
    v39 = v6;
    v12 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v7);
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v37 = v2;
      v38 = v4;
      v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v7);
      v15 = *v14;
      v16 = v14[1];
      v41 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v17 = v41;
      v18 = (uint64_t *)(v12 + 40);
      do
      {
        v19 = *(v18 - 1);
        v20 = *v18;
        v41 = v17;
        v22 = *(_QWORD *)(v17 + 16);
        v21 = *(_QWORD *)(v17 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v22 >= v21 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v17 = v41;
        }
        v18 += 2;
        *(_QWORD *)(v17 + 16) = v22 + 1;
        v23 = (_QWORD *)(v17 + 32 * v22);
        v23[4] = v19;
        v23[5] = v20;
        v23[6] = v15;
        v23[7] = v16;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v1 = v35;
      v2 = v37;
      v4 = v38;
    }
    else
    {
      v17 = MEMORY[0x24BEE4AF8];
    }
    v24 = *(_QWORD *)(v17 + 16);
    v25 = *(_QWORD *)(v4 + 16);
    if (__OFADD__(v25, v24))
      break;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0 || v25 + v24 > *(_QWORD *)(v4 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v26;
    }
    if (*(_QWORD *)(v17 + 16))
    {
      v27 = *(_QWORD *)(v4 + 16);
      if ((*(_QWORD *)(v4 + 24) >> 1) - v27 < v24)
        goto LABEL_46;
      v28 = v4 + 32 * v27 + 32;
      if (v17 + 32 < v28 + 32 * v24 && v28 < v17 + 32 + 32 * v24)
        goto LABEL_49;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (predicted: String, label: String));
      swift_arrayInitWithCopy();
      if (v24)
      {
        v30 = *(_QWORD *)(v4 + 16);
        v31 = __OFADD__(v30, v24);
        v32 = v30 + v24;
        if (v31)
          goto LABEL_47;
        *(_QWORD *)(v4 + 16) = v32;
      }
    }
    else if (v24)
    {
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
    v3 = v39;
    if (v39)
      goto LABEL_2;
LABEL_3:
    v8 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_48;
    if (v8 >= v36)
      goto LABEL_43;
    v9 = *(_QWORD *)(v34 + 8 * v8);
    v10 = v2 + 1;
    if (!v9)
    {
      v10 = v2 + 2;
      if (v2 + 2 >= v36)
        goto LABEL_43;
      v9 = *(_QWORD *)(v34 + 8 * v10);
      if (!v9)
      {
        v10 = v2 + 3;
        if (v2 + 3 >= v36)
          goto LABEL_43;
        v9 = *(_QWORD *)(v34 + 8 * v10);
        if (!v9)
        {
          v10 = v2 + 4;
          if (v2 + 4 >= v36)
            goto LABEL_43;
          v9 = *(_QWORD *)(v34 + 8 * v10);
          if (!v9)
          {
            v10 = v2 + 5;
            if (v2 + 5 >= v36)
              goto LABEL_43;
            v9 = *(_QWORD *)(v34 + 8 * v10);
            if (!v9)
            {
              v11 = v2 + 6;
              while (v11 < v36)
              {
                v9 = *(_QWORD *)(v34 + 8 * v11++);
                if (v9)
                {
                  v10 = v11 - 1;
                  goto LABEL_18;
                }
              }
LABEL_43:
              swift_release();
              return v4;
            }
          }
        }
      }
    }
LABEL_18:
    v6 = (v9 - 1) & v9;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
    v2 = v10;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  uint64_t result;
  uint64_t v34;
  int64_t v35;
  _QWORD v36[5];

  specialized _NativeDictionary.makeIterator()(v36, a1);
  v1 = v36[0];
  v2 = v36[3];
  v3 = v36[4];
  v34 = v36[1];
  v35 = (unint64_t)(v36[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    goto LABEL_3;
LABEL_2:
  v5 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  v6 = v5 | (v2 << 6);
  while (1)
  {
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain_n();
    v13 = swift_bridgeObjectRetain();
    MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_18CreateMLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n(v13, v11, v12);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_3();
    v15 = *(_QWORD *)(MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n
                    + 16);
    v16 = *(_QWORD *)(v4 + 16);
    if (__OFADD__(v16, v15))
      break;
    if (!swift_isUniquelyReferenced_nonNull_native() || v16 + v15 > *(_QWORD *)(v4 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v17;
    }
    if (*(_QWORD *)(MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n
                   + 16))
    {
      v18 = *(_QWORD *)(v4 + 16);
      v19 = (*(_QWORD *)(v4 + 24) >> 1) - v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
      if (v19 < v15)
        goto LABEL_40;
      OUTLINED_FUNCTION_212();
      v22 = *(_QWORD *)(v21 + 72);
      v23 = v4 + v20 + v22 * v18;
      v24 = MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n
          + v20;
      v25 = v22 * v15;
      v26 = v23 + v25;
      v27 = v24 + v25;
      if (v24 < v26 && v23 < v27)
        goto LABEL_43;
      swift_arrayInitWithCopy();
      if (v15)
      {
        v29 = *(_QWORD *)(v4 + 16);
        v30 = __OFADD__(v29, v15);
        v31 = v29 + v15;
        if (v30)
          goto LABEL_41;
        *(_QWORD *)(v4 + 16) = v31;
      }
    }
    else if (v15)
    {
      goto LABEL_39;
    }
    OUTLINED_FUNCTION_104();
    if (v3)
      goto LABEL_2;
LABEL_3:
    v7 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_42;
    if (v7 >= v35)
      goto LABEL_37;
    v8 = *(_QWORD *)(v34 + 8 * v7);
    if (!v8)
    {
      v9 = v2 + 2;
      if (v2 + 2 >= v35)
        goto LABEL_37;
      v8 = *(_QWORD *)(v34 + 8 * v9);
      if (v8)
        goto LABEL_12;
      v9 = v2 + 3;
      if (v2 + 3 >= v35)
        goto LABEL_37;
      v8 = *(_QWORD *)(v34 + 8 * v9);
      if (v8)
        goto LABEL_12;
      v9 = v2 + 4;
      if (v2 + 4 >= v35)
        goto LABEL_37;
      v8 = *(_QWORD *)(v34 + 8 * v9);
      if (v8)
      {
LABEL_12:
        v7 = v9;
      }
      else
      {
        v7 = v2 + 5;
        if (v2 + 5 >= v35)
          goto LABEL_37;
        v8 = *(_QWORD *)(v34 + 8 * v7);
        if (!v8)
        {
          v32 = v2 + 6;
          while (v32 < v35)
          {
            v8 = *(_QWORD *)(v34 + 8 * v32++);
            if (v8)
            {
              v7 = v32 - 1;
              goto LABEL_13;
            }
          }
LABEL_37:
          OUTLINED_FUNCTION_4_2();
          return v4;
        }
      }
    }
LABEL_13:
    v3 = (v8 - 1) & v8;
    v6 = __clz(__rbit64(v8)) + (v7 << 6);
    v2 = v7;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  _QWORD v32[5];
  uint64_t v33;

  specialized _NativeDictionary.makeIterator()(v32, a1);
  v1 = v32[0];
  v33 = v32[1];
  v2 = v32[3];
  v3 = v32[4];
  v4 = (unint64_t)(v32[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  v5 = MEMORY[0x24BEE4AF8];
  if (!v3)
    goto LABEL_3;
LABEL_2:
  v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  v7 = v6 | (v2 << 6);
  while (1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v7);
    v13 = *(_QWORD *)(v12 + 16);
    v14 = *(_QWORD *)(v5 + 16);
    if (__OFADD__(v14, v13))
      break;
    swift_bridgeObjectRetain();
    if (!swift_isUniquelyReferenced_nonNull_native() || v14 + v13 > *(_QWORD *)(v5 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v5 = v15;
    }
    if (*(_QWORD *)(v12 + 16))
    {
      v16 = *(_QWORD *)(v5 + 16);
      v17 = (*(_QWORD *)(v5 + 24) >> 1) - v16;
      v18 = type metadata accessor for URL();
      if (v17 < v13)
        goto LABEL_39;
      v19 = *(_QWORD *)(v18 - 8);
      v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
      v21 = *(_QWORD *)(v19 + 72);
      v22 = v5 + v20 + v21 * v16;
      v23 = v12 + v20;
      v24 = v21 * v13;
      v25 = v22 + v24;
      v26 = v23 + v24;
      if (v23 < v25 && v22 < v26)
        goto LABEL_42;
      swift_arrayInitWithCopy();
      if (v13)
      {
        v28 = *(_QWORD *)(v5 + 16);
        v29 = __OFADD__(v28, v13);
        v30 = v28 + v13;
        if (v29)
          goto LABEL_40;
        *(_QWORD *)(v5 + 16) = v30;
      }
    }
    else if (v13)
    {
      goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    if (v3)
      goto LABEL_2;
LABEL_3:
    v8 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_41;
    if (v8 >= v4)
      goto LABEL_36;
    v9 = *(_QWORD *)(v33 + 8 * v8);
    v10 = v2 + 1;
    if (!v9)
    {
      v10 = v2 + 2;
      if (v2 + 2 >= v4)
        goto LABEL_36;
      v9 = *(_QWORD *)(v33 + 8 * v10);
      if (!v9)
      {
        v10 = v2 + 3;
        if (v2 + 3 >= v4)
          goto LABEL_36;
        v9 = *(_QWORD *)(v33 + 8 * v10);
        if (!v9)
        {
          v10 = v2 + 4;
          if (v2 + 4 >= v4)
            goto LABEL_36;
          v9 = *(_QWORD *)(v33 + 8 * v10);
          if (!v9)
          {
            v10 = v2 + 5;
            if (v2 + 5 >= v4)
              goto LABEL_36;
            v9 = *(_QWORD *)(v33 + 8 * v10);
            if (!v9)
            {
              v11 = v2 + 6;
              while (v11 < v4)
              {
                v9 = *(_QWORD *)(v33 + 8 * v11++);
                if (v9)
                {
                  v10 = v11 - 1;
                  goto LABEL_18;
                }
              }
LABEL_36:
              swift_release();
              return v5;
            }
          }
        }
      }
    }
LABEL_18:
    v3 = (v9 - 1) & v9;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
    v2 = v10;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  uint64_t result;
  uint64_t v34;
  int64_t v35;
  _QWORD v36[5];

  specialized _NativeDictionary.makeIterator()(v36, a1);
  v1 = v36[0];
  v2 = v36[3];
  v3 = v36[4];
  v34 = v36[1];
  v35 = (unint64_t)(v36[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    goto LABEL_3;
LABEL_2:
  v5 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  v6 = v5 | (v2 << 6);
  while (1)
  {
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain_n();
    v13 = swift_bridgeObjectRetain();
    MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_18CreateMLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n(v13, v11, v12);
    OUTLINED_FUNCTION_80();
    OUTLINED_FUNCTION_10_3();
    v15 = *(_QWORD *)(MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n
                    + 16);
    v16 = *(_QWORD *)(v4 + 16);
    if (__OFADD__(v16, v15))
      break;
    if (!swift_isUniquelyReferenced_nonNull_native() || v16 + v15 > *(_QWORD *)(v4 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v17;
    }
    if (*(_QWORD *)(MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n
                   + 16))
    {
      v18 = *(_QWORD *)(v4 + 16);
      v19 = (*(_QWORD *)(v4 + 24) >> 1) - v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
      if (v19 < v15)
        goto LABEL_40;
      OUTLINED_FUNCTION_251();
      v22 = *(_QWORD *)(v21 + 72);
      v23 = v4 + v20 + v22 * v18;
      v24 = MLComponents16AnnotatedFeatureVyAHSSGs5NeverOTg503_s8f24ML17MLSoundClassifierV16i143ExtractorC12filesByLabel7optionsAESDySSSay10Foundation3URLVGG_AE13ConfigurationVtKc33_EF88DE97863F019753745A6AAFDAF1B0LlfcSay0A12MLComponents09H29E0VyAJSSGGSS_AKtXEfU_AsJXEfU_SSTf1cn_n
          + v20;
      v25 = v22 * v15;
      v26 = v23 + v25;
      v27 = v24 + v25;
      if (v24 < v26 && v23 < v27)
        goto LABEL_43;
      swift_arrayInitWithCopy();
      if (v15)
      {
        v29 = *(_QWORD *)(v4 + 16);
        v30 = __OFADD__(v29, v15);
        v31 = v29 + v15;
        if (v30)
          goto LABEL_41;
        *(_QWORD *)(v4 + 16) = v31;
      }
    }
    else if (v15)
    {
      goto LABEL_39;
    }
    swift_bridgeObjectRelease();
    if (v3)
      goto LABEL_2;
LABEL_3:
    v7 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_42;
    if (v7 >= v35)
      goto LABEL_37;
    v8 = *(_QWORD *)(v34 + 8 * v7);
    if (!v8)
    {
      v9 = v2 + 2;
      if (v2 + 2 >= v35)
        goto LABEL_37;
      v8 = *(_QWORD *)(v34 + 8 * v9);
      if (v8)
        goto LABEL_12;
      v9 = v2 + 3;
      if (v2 + 3 >= v35)
        goto LABEL_37;
      v8 = *(_QWORD *)(v34 + 8 * v9);
      if (v8)
        goto LABEL_12;
      v9 = v2 + 4;
      if (v2 + 4 >= v35)
        goto LABEL_37;
      v8 = *(_QWORD *)(v34 + 8 * v9);
      if (v8)
      {
LABEL_12:
        v7 = v9;
      }
      else
      {
        v7 = v2 + 5;
        if (v2 + 5 >= v35)
          goto LABEL_37;
        v8 = *(_QWORD *)(v34 + 8 * v7);
        if (!v8)
        {
          v32 = v2 + 6;
          while (v32 < v35)
          {
            v8 = *(_QWORD *)(v34 + 8 * v32++);
            if (v8)
            {
              v7 = v32 - 1;
              goto LABEL_13;
            }
          }
LABEL_37:
          swift_release();
          return v4;
        }
      }
    }
LABEL_13:
    v3 = (v8 - 1) & v8;
    v6 = __clz(__rbit64(v8)) + (v7 << 6);
    v2 = v7;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id static MLSoundClassifier.FeatureExtractor.getFeaturePrintRequest(options:)(uint64_t a1)
{
  int v1;
  id v2;
  Swift::Double v3;
  id v5;
  CMTime v6;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 == 255)
  {
    v2 = objc_allocWithZone(MEMORY[0x24BDE9B00]);
    return objc_msgSend(v2, sel_init);
  }
  v3 = *(double *)(a1 + 8);
  v2 = objc_allocWithZone(MEMORY[0x24BDE9B00]);
  if ((v1 & 1) == 0)
    return objc_msgSend(v2, sel_init);
  v5 = objc_msgSend(v2, sel_initWithFeaturePrintType_, 3);
  v6 = CMTime.init(seconds:preferredTimescale:)(v3, 16000);
  objc_msgSend(v5, sel_setWindowDuration_, &v6);
  return v5;
}

void trainWork #1 (_:annotatedFeature:) in MLSoundClassifier.FeatureExtractor.extractFeatures()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  swift_getObjectType();
  specialized trainWork #1 (_:annotatedFeature:) in MLSoundClassifier.FeatureExtractor.extractFeatures()(a1, a2, a3, a4, a5, a6, a7, a8);
}

void closure #1 in trainWork #1 (_:annotatedFeature:) in MLSoundClassifier.FeatureExtractor.extractFeatures()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  char *v26;
  id v27;
  double v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39[4];

  v35 = a8;
  v36 = a4;
  v32 = a7;
  v33 = a6;
  v34 = a2;
  v39[3] = *(id *)MEMORY[0x24BDAC8D0];
  v12 = type metadata accessor for URL();
  v37 = *(_QWORD *)(v12 - 8);
  v38 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v29 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v29 - v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  AnnotatedFeature.feature.getter();
  v19 = objc_allocWithZone(MEMORY[0x24BDE9AC8]);
  v20 = @nonobjc SNAudioFileAnalyzer.init(url:)((uint64_t)v18);
  if (!v8)
  {
    v21 = v20;
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9B60]), sel_init);
    v39[0] = 0;
    if ((objc_msgSend(v21, sel_addRequest_withObserver_error_, v34, v22, v39) & 1) != 0)
    {
      v23 = v39[0];
      v31 = v21;
      objc_msgSend(v21, sel_analyze);
      v34 = *(_QWORD *)(a3 + 32);
      v30 = v22;
      static MLSoundClassifier.FeatureExtractor.convertResultsToShapedArrays(resultsCollector:options:)();
      v35 = *(id *)(a3 + 80);
      v24 = objc_msgSend(v35, sel_lock);
      MEMORY[0x24BDAC7A8](v24);
      *(&v29 - 2) = a1;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay6CoreML13MLShapedArrayVySfGG_18CreateMLComponents16AnnotatedFeatureVyAISSGs5NeverOTg5();
      v29 = 0;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      specialized Array.append<A>(contentsOf:)();
      swift_endAccess();
      AnnotatedFeature.feature.getter();
      swift_beginAccess();
      specialized Set._Variant.insert(_:)();
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v38);
      swift_beginAccess();
      if (__OFADD__(*a5, 1))
      {
        __break(1u);
      }
      else
      {
        ++*a5;
        v25 = v33;
        v26 = (char *)objc_msgSend(v33, sel_completedUnitCount);
        if (!__OFADD__(v26, 1))
        {
          objc_msgSend(v25, sel_setCompletedUnitCount_, v26 + 1);
          swift_beginAccess();
          if (!__OFADD__(*a5, v34))
          {
            _TablePrinter.printRow(currentFileIndex:)(*a5 + v34);
            objc_msgSend(v35, sel_unlock);

            return;
          }
LABEL_9:
          __break(1u);
        }
      }
      __break(1u);
      goto LABEL_9;
    }
    v27 = v39[0];
    _convertNSErrorToError(_:)();

    swift_willThrow(v28);
  }
  swift_unexpectedError();
  __break(1u);
}

uint64_t static MLSoundClassifier.FeatureExtractor.convertResultsToShapedArrays(resultsCollector:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  id v21;
  _BYTE v22[32];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v20 - v5;
  v7 = OUTLINED_FUNCTION_14_20();
  v8 = MEMORY[0x24BEE4AD8] + 8;
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRelease();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  v10 = v9;
  v11 = OUTLINED_FUNCTION_14_20();
  v20[2] = v8;
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v20[1] = v12;
    v14 = v12 + 32;
    do
    {
      outlined init with copy of Any(v14, (uint64_t)v22);
      type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for SNFeaturePrint);
      swift_dynamicCast();
      v15 = v21;
      v16 = objc_msgSend(v21, sel_featureVector);
      static MLSoundClassifier.FeatureExtractor.convertVector(_:)(v16, (uint64_t)v6);

      OUTLINED_FUNCTION_10_25(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      v17 = *(_QWORD *)(v10 + 16);
      if (v17 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v10 = v18;
      }
      *(_QWORD *)(v10 + 16) = v17 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v10+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v17, v4, v0);

      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
      v14 += 32;
      --v13;
    }
    while (v13);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t closure #1 in closure #1 in trainWork #1 (_:annotatedFeature:) in MLSoundClassifier.FeatureExtractor.extractFeatures()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  AnnotatedFeature.annotation.getter();
  v6[0] = v6[2];
  v6[1] = v6[3];
  return AnnotatedFeature.init(feature:annotation:)();
}

void closure #1 in MLSoundClassifier.FeatureExtractor.extractFeatures()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v17;
  id v18;
  void *v19;

  swift_beginAccess();
  v17 = *(_QWORD *)(a6 + 16);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a7, (v17 & 0xC000000000000001) == 0, v17);
  if ((v17 & 0xC000000000000001) != 0)
    v18 = (id)MEMORY[0x22075AF48](a7, v17);
  else
    v18 = *(id *)(v17 + 8 * a7 + 32);
  v19 = v18;
  swift_endAccess();
  trainWork #1 (_:annotatedFeature:) in MLSoundClassifier.FeatureExtractor.extractFeatures()((uint64_t)v19, a8, a1, a2, a3, a4, a5, a9);

}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t closure #1 in MLSoundClassifier.FeatureExtractor.isProcessed(url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 72);
  swift_bridgeObjectRetain();
  LOBYTE(a2) = specialized Set.contains(_:)(a2, v6);
  result = swift_bridgeObjectRelease();
  *a3 = a2 & 1;
  return result;
}

void static MLSoundClassifier.FeatureExtractor.convertVector(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = a1;
  MLShapedArray.init(_:)();
  v7 = *(_QWORD *)(OUTLINED_FUNCTION_16_22() + 16);
  swift_bridgeObjectRelease();
  if (v7 != 2)
    goto LABEL_6;
  v8 = OUTLINED_FUNCTION_16_22();
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = *(_QWORD *)(v8 + 32);
    swift_bridgeObjectRelease();
    if (v9 != 1)
    {
LABEL_6:
      OUTLINED_FUNCTION_8_0();
      return;
    }
    lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type MLShapedArray<Float> and conformance MLShapedArray<A>, &demangling cache variable for type metadata for MLShapedArray<Float>, MEMORY[0x24BDBFCD0]);
    MLShapedArrayProtocol.scalars.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_21AFE7DA0;
    v11 = OUTLINED_FUNCTION_16_22();
    if (*(_QWORD *)(v11 + 16) >= 2uLL)
    {
      v12 = *(_QWORD *)(v11 + 40);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v10 + 32) = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float], MEMORY[0x24BEE12C8]);
      MLShapedArray.init<A>(scalars:shape:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
      OUTLINED_FUNCTION_10_25(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t MLSoundClassifier.FeatureExtractor.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t MLSoundClassifier.FeatureExtractor.__deallocating_deinit()
{
  MLSoundClassifier.FeatureExtractor.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MLSoundClassifier.FeatureExtractor()
{
  return objc_opt_self();
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for MLSoundClassifier.FeatureExtractor.Configuration(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 40);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = (v3 ^ 0xFF) - 1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLSoundClassifier.FeatureExtractor.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.FeatureExtractor.Configuration()
{
  return &type metadata for MLSoundClassifier.FeatureExtractor.Configuration;
}

id @nonobjc SNAudioFileAnalyzer.init(url:)(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  double v12;
  uint64_t v13;
  id v15;
  NSURL *v16;

  v2 = v1;
  v16 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v16);
  v5 = v4;
  v15 = 0;
  v6 = objc_msgSend(v2, sel_initWithURL_error_, v4, &v15);

  v7 = v15;
  if (v6)
  {
    v8 = type metadata accessor for URL();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow(v12);
    v13 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  }
  return v6;
}

uint64_t sub_21AEA7738()
{
  return swift_deallocObject();
}

uint64_t sub_21AEA7748()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = OUTLINED_FUNCTION_11_25();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = OUTLINED_FUNCTION_11_25();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0, v1, v2, v3);
}

{
  OUTLINED_FUNCTION_11_25();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_11_25();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_11_25();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_11_25();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_11_25();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t partial apply for closure #1 in MLSoundClassifier.FeatureExtractor.isProcessed(url:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in MLSoundClassifier.FeatureExtractor.isProcessed(url:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t outlined init with copy of _TablePrinter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _TablePrinter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21AEA782C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for _TablePrinter(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  swift_release();
  swift_release();

  v8 = v0 + v3;
  v9 = v0 + v3 + *(int *)(v1 + 20);
  v10 = type metadata accessor for Date();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);

  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t outlined init with take of _TablePrinter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _TablePrinter(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in MLSoundClassifier.FeatureExtractor.extractFeatures()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for _TablePrinter(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + v4 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  closure #1 in MLSoundClassifier.FeatureExtractor.extractFeatures()(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v4), v0 + v6, *(void **)(v0 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t outlined destroy of _TablePrinter(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _TablePrinter(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_23_3();
    _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_123();
  }
  JUMPOUT(0x22075AF54);
}

void specialized trainWork #1 (_:annotatedFeature:) in MLSoundClassifier.FeatureExtractor.extractFeatures()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v14;
  _QWORD *v15;
  void *v16;

  v14 = a4 + 16;
  v15 = (_QWORD *)(a5 + 16);
  v16 = (void *)MEMORY[0x22075B47C]();
  closure #1 in trainWork #1 (_:annotatedFeature:) in MLSoundClassifier.FeatureExtractor.extractFeatures()(a2, a1, a3, v14, v15, a6, a7, a8);
  objc_autoreleasePoolPop(v16);
}

uint64_t partial apply for closure #1 in closure #1 in trainWork #1 (_:annotatedFeature:) in MLSoundClassifier.FeatureExtractor.extractFeatures()(uint64_t a1)
{
  return closure #1 in closure #1 in trainWork #1 (_:annotatedFeature:) in MLSoundClassifier.FeatureExtractor.extractFeatures()(a1);
}

uint64_t OUTLINED_FUNCTION_0_35()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_8_27()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_9_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_10_25@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v2, v3, v1);
}

uint64_t OUTLINED_FUNCTION_11_25()
{
  return 0;
}

id OUTLINED_FUNCTION_14_20()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, (SEL)(v0 + 1480));
}

uint64_t OUTLINED_FUNCTION_16_22()
{
  return MLShapedArray.shape.getter();
}

void OUTLINED_FUNCTION_18_18()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_19_21@<X0>(uint64_t a1@<X8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 144) = a1;
  *(_QWORD *)(v4 - 136) = v2;
  *(_QWORD *)(v4 - 128) = v3;
  *(_BYTE *)(v4 - 120) = v1;
  return v4 - 160;
}

uint64_t OUTLINED_FUNCTION_24_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 184))(a1, a2, v2);
}

void OUTLINED_FUNCTION_25_15(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v3 = *(void **)(a1 + 8 * v2);
  *(_QWORD *)(a1 + 8 * v2) = v1;

}

uint64_t MLHandPoseClassifier.ModelParameters.init(validation:batchSize:maximumIterations:augmentationOptions:algorithm:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = *a4;
  outlined init with take of MLHandActionClassifier.ModelParameters.ValidationData(a1, a5, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
  result = OUTLINED_FUNCTION_4_35();
  *(_QWORD *)(a5 + v10) = a2;
  *(_QWORD *)(a5 + *(int *)(result + 24)) = a3;
  *(_QWORD *)(a5 + *(int *)(result + 28)) = v8;
  return result;
}

uint64_t type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandPoseClassifier.ModelParameters.ValidationData);
}

uint64_t type metadata accessor for MLHandPoseClassifier.ModelParameters(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLHandPoseClassifier.ModelParameters);
}

void MLHandPoseClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int EnumCaseMultiPayload;
  int v23;
  id v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;

  v6 = type metadata accessor for MLHandPoseClassifier.DataSource();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MLHandPoseClassifier.DataSource.imagesWithAnnotations()(v10, v13, v14, v15, v16, v17, v18, v19, (uint64_t)v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57,
    (uint64_t)v58);
  if (!v3)
  {
    v47 = a1;
    v58 = a2;
    v20 = v48;
    v21 = v49;
    outlined init with copy of MLHandPoseClassifier.ModelParameters.ValidationData(v2, (uint64_t)v12);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v23 = swift_getEnumCaseMultiPayload();
        if (v23 == 5)
        {
          OUTLINED_FUNCTION_1_14();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          OUTLINED_FUNCTION_4_13();
          OUTLINED_FUNCTION_4_13();
          OUTLINED_FUNCTION_4_13();
          v36 = type metadata accessor for DataFrame();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v12, v36);
          goto LABEL_14;
        }
        if (v23 == 3)
        {
          OUTLINED_FUNCTION_1_14();
          outlined consume of Result<_DataTable, Error>(*(id *)v12, v12[8]);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_14:
          v37 = v47;
          *v47 = 0;
          *((_BYTE *)v37 + 8) = -1;
          v35 = v58;
          *v58 = 0;
          goto LABEL_15;
        }
        v38 = outlined init with take of MLHandActionClassifier.ModelParameters.ValidationData((uint64_t)v12, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
        MLHandPoseClassifier.DataSource.imagesWithAnnotations()(v38, v39, v40, v41, v42, v43, v44, v45, (uint64_t)v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57,
          (uint64_t)v58);
        outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for MLHandPoseClassifier.DataSource);
        v46 = v47;
        v28 = v48;
        v29 = v49;
        *v47 = v20;
        *((_BYTE *)v46 + 8) = v21;
LABEL_9:
        v32 = v58;
        *v58 = v28;
        *((_BYTE *)v32 + 8) = v29;
        return;
      }
      OUTLINED_FUNCTION_10_10();
      if (v33)
      {
        v34 = v47;
        *v47 = v20;
        *((_BYTE *)v34 + 8) = v21;
        v35 = v58;
        *v58 = 0;
LABEL_15:
        *((_BYTE *)v35 + 8) = -1;
        return;
      }
    }
    else
    {
      v24 = *(id *)v12;
      v25 = *((_QWORD *)v12 + 1);
      v26 = v12[16];
      v27 = v12[17];
      if (OUTLINED_FUNCTION_10_10() >= 1)
      {
        v51 = v20;
        LOBYTE(v52) = v21;
        v48 = (uint64_t)v24;
        v49 = v25;
        LOBYTE(v50) = v26;
        BYTE1(v50) = v27;
        MLDataTable.randomSplitBySequence(strategy:by:on:)((uint64_t)&v55, (uint64_t)&v53, (uint64_t)&v48, (void *)0x7461506567616D69, (void *)0xE900000000000068, (void *)0x6C6562616CLL, (void *)0xE500000000000000);
        OUTLINED_FUNCTION_1_14();
        v28 = v55;
        v29 = v56;
        v30 = v54;
        v31 = v47;
        *v47 = v53;
        *((_BYTE *)v31 + 8) = v30;
        goto LABEL_9;
      }
    }
    OUTLINED_FUNCTION_1_14();
    goto LABEL_14;
  }
}

uint64_t MLHandPoseClassifier.ModelParameters.validation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MLHandPoseClassifier.ModelParameters.ValidationData(v1, a1);
}

uint64_t MLHandPoseClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of MLHandPoseClassifier.ModelParameters.ValidationData(a1, v1);
}

uint64_t (*MLHandPoseClassifier.ModelParameters.validation.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandPoseClassifier.ModelParameters.batchSize.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4_35();
  return *(_QWORD *)(v0 + v1);
}

void MLHandPoseClassifier.ModelParameters.batchSize.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_4_35();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLHandPoseClassifier.ModelParameters.batchSize.modify())(_QWORD)
{
  OUTLINED_FUNCTION_4_35();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandPoseClassifier.ModelParameters.maximumIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for MLHandPoseClassifier.ModelParameters(0) + 24));
}

void MLHandPoseClassifier.ModelParameters.maximumIterations.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(type metadata accessor for MLHandPoseClassifier.ModelParameters(0) + 24)) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLHandPoseClassifier.ModelParameters.maximumIterations.modify())(_QWORD)
{
  type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandPoseClassifier.ModelParameters.augmentationOptions.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for MLHandPoseClassifier.ModelParameters(0) + 28));
  OUTLINED_FUNCTION_22();
}

void MLHandPoseClassifier.ModelParameters.augmentationOptions.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)(v1 + *(int *)(type metadata accessor for MLHandPoseClassifier.ModelParameters(0) + 28)) = v2;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLHandPoseClassifier.ModelParameters.augmentationOptions.modify())(_QWORD)
{
  type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t (*MLHandPoseClassifier.ModelParameters.algorithm.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandPoseClassifier.ModelParameters.ModelAlgorithmType.hash(into:)()
{
  Hasher._combine(_:)(0);
  OUTLINED_FUNCTION_22();
}

uint64_t static MLHandPoseClassifier.ModelParameters.ModelAlgorithmType.== infix(_:_:)()
{
  return 1;
}

Swift::Int MLHandPoseClassifier.ModelParameters.ModelAlgorithmType.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLHandPoseClassifier.ModelParameters.ModelAlgorithmType()
{
  return MLHandPoseClassifier.ModelParameters.ModelAlgorithmType.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLHandPoseClassifier.ModelParameters.ModelAlgorithmType()
{
  MLHandPoseClassifier.ModelParameters.ModelAlgorithmType.hash(into:)();
}

unint64_t MLHandPoseClassifier.ModelParameters.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v10;
  unint64_t v11;
  unint64_t v12;

  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v11 = 0xD000000000000014;
  v12 = 0x800000021AFF2DC0;
  v1 = type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
  v2._countAndFlagsBits = OUTLINED_FUNCTION_7_26();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28_7();
  strcpy((char *)&v10, "Batch Size: ");
  BYTE5(v10._object) = 0;
  HIWORD(v10._object) = -5120;
  v3._countAndFlagsBits = OUTLINED_FUNCTION_7_26();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28_7();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v0 + *(int *)(v1 + 28));
  v10._countAndFlagsBits = 0xD000000000000016;
  v10._object = (void *)0x800000021AFF2E20;
  if (v4 == 1)
    v5 = 0xD000000000000011;
  else
    v5 = 0;
  if (v4 == 1)
    v6 = 0x800000021AFF2E60;
  else
    v6 = 0xE000000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28_7();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x800000021AFF2E40;
  String.append(_:)(v8);
  return v11;
}

uint64_t outlined init with copy of MLHandPoseClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of MLHandPoseClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void MLHandPoseClassifier.ModelParameters.playgroundDescription.getter(unint64_t *a1@<X8>)
{
  unint64_t v2;
  unint64_t v3;

  v2 = MLHandPoseClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_22();
}

unint64_t lazy protocol witness table accessor for type MLHandPoseClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandPoseClassifier.ModelParameters.ModelAlgorithmType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLHandPoseClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandPoseClassifier.ModelParameters.ModelAlgorithmType;
  if (!lazy protocol witness table cache variable for type MLHandPoseClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandPoseClassifier.ModelParameters.ModelAlgorithmType)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLHandPoseClassifier.ModelParameters.ModelAlgorithmType, &type metadata for MLHandPoseClassifier.ModelParameters.ModelAlgorithmType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLHandPoseClassifier.ModelParameters.ModelAlgorithmType and conformance MLHandPoseClassifier.ModelParameters.ModelAlgorithmType);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandPoseClassifier.ModelParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandPoseClassifier.DataSource();
      v8 = (char *)&loc_21AEA85EC + 4 * byte_21AFEB5C0[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    v10 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for MLHandPoseClassifier.ModelParameters(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
        v4 = type metadata accessor for URL();
        v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
        v5(a1, v4);
        v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v5(a1 + *(int *)(v6 + 48), v4);
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 1:
      case 2:
        v3 = type metadata accessor for URL();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 4:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 5:
        v7 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 6:
        v8 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        swift_bridgeObjectRelease();
LABEL_10:
        result = swift_bridgeObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

char *initializeWithCopy for MLHandPoseClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v6 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    v7 = (char *)&loc_21AEA8B5C + 4 * byte_21AFEB5CE[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithCopy for MLHandPoseClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    v6 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandPoseClassifier.DataSource();
      v7 = (char *)&loc_21AEA8EE0 + 4 * byte_21AFEB5D5[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *initializeWithTake for MLHandPoseClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v8 = type metadata accessor for URL();
        v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
        v9(a1, a2, v8);
        v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v9(&a1[v10[12]], &a2[v10[12]], v8);
        *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
        *(_OWORD *)&a1[v10[20]] = *(_OWORD *)&a2[v10[20]];
        goto LABEL_9;
      case 1u:
      case 2u:
        v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        goto LABEL_9;
      case 5u:
        v12 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v13[12]] = *(_OWORD *)&a2[v13[12]];
        *(_OWORD *)&a1[v13[16]] = *(_OWORD *)&a2[v13[16]];
        *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
        goto LABEL_9;
      case 6u:
        v14 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&a1[*(int *)(v15 + 48)] = *(_OWORD *)&a2[*(int *)(v15 + 48)];
        *(_OWORD *)&a1[*(int *)(v15 + 64)] = *(_OWORD *)&a2[*(int *)(v15 + 64)];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v16 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for MLHandPoseClassifier.ModelParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    v6 = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for MLHandPoseClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v8 = type metadata accessor for URL();
          v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
          v9(a1, a2, v8);
          v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v9(&a1[v10[12]], &a2[v10[12]], v8);
          *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
          *(_OWORD *)&a1[v10[20]] = *(_OWORD *)&a2[v10[20]];
          goto LABEL_10;
        case 1u:
        case 2u:
          v11 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
          goto LABEL_10;
        case 5u:
          v12 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
          v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&a1[v13[12]] = *(_OWORD *)&a2[v13[12]];
          *(_OWORD *)&a1[v13[16]] = *(_OWORD *)&a2[v13[16]];
          *(_OWORD *)&a1[v13[20]] = *(_OWORD *)&a2[v13[20]];
          goto LABEL_10;
        case 6u:
          v14 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
          v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          *(_OWORD *)&a1[*(int *)(v15 + 48)] = *(_OWORD *)&a2[*(int *)(v15 + 48)];
          *(_OWORD *)&a1[*(int *)(v15 + 64)] = *(_OWORD *)&a2[*(int *)(v15 + 64)];
LABEL_10:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v16 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHandPoseClassifier.ModelParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEA975C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_6_29();
  return __swift_getEnumTagSinglePayload(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for MLHandPoseClassifier.ModelParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEA9790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_6_29();
  return __swift_storeEnumTagSinglePayload(v1, v0, v0, v2);
}

uint64_t type metadata completion function for MLHandPoseClassifier.ModelParameters()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLHandPoseClassifier.ModelParameters.ModelAlgorithmType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21AEA9884 + 4 * byte_21AFEB5EA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21AEA98A4 + 4 * byte_21AFEB5EF[v4]))();
}

_BYTE *sub_21AEA9884(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21AEA98A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21AEA98AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21AEA98B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21AEA98BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21AEA98C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MLHandPoseClassifier.ModelParameters.ModelAlgorithmType()
{
  return &type metadata for MLHandPoseClassifier.ModelParameters.ModelAlgorithmType;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHandPoseClassifier.ModelParameters.ValidationData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandPoseClassifier.DataSource();
      v7 = (char *)&loc_21AEA9958 + 4 * byte_21AFEB5F4[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for MLHandPoseClassifier.ModelParameters.ValidationData(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    result = swift_getEnumCaseMultiPayload();
    switch((int)result)
    {
      case 0:
        v4 = type metadata accessor for URL();
        v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
        v5(a1, v4);
        v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v5(a1 + *(int *)(v6 + 48), v4);
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 1:
      case 2:
        v3 = type metadata accessor for URL();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      case 3:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 4:
        outlined consume of Result<_DataTable, Error>(*(id *)a1, *(_BYTE *)(a1 + 8));
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 5:
        v7 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      case 6:
        v8 = type metadata accessor for DataFrame();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        swift_bridgeObjectRelease();
LABEL_10:
        result = swift_bridgeObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

void *initializeWithCopy for MLHandPoseClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  char *v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for MLHandPoseClassifier.DataSource();
    v6 = (char *)&loc_21AEA9E88 + 4 * byte_21AFEB602[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for MLHandPoseClassifier.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  char *v6;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandPoseClassifier.DataSource();
      v6 = (char *)&loc_21AEAA1E0 + 4 * byte_21AFEB609[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for MLHandPoseClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for MLHandPoseClassifier.DataSource();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for URL();
        v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
        v8(a1, a2, v7);
        v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
        v8(&a1[v9[12]], &a2[v9[12]], v7);
        *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
        *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
        goto LABEL_9;
      case 1u:
      case 2u:
        v10 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        goto LABEL_9;
      case 5u:
        v11 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
        *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
        *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
        goto LABEL_9;
      case 6u:
        v13 = type metadata accessor for DataFrame();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
        *(_OWORD *)&a1[*(int *)(v14 + 48)] = *(_OWORD *)&a2[*(int *)(v14 + 48)];
        *(_OWORD *)&a1[*(int *)(v14 + 64)] = *(_OWORD *)&a2[*(int *)(v14 + 64)];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for MLHandPoseClassifier.ModelParameters.ValidationData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)a1, type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for MLHandPoseClassifier.DataSource();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v7 = type metadata accessor for URL();
          v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
          v8(a1, a2, v7);
          v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, imageColumn: String, labelColumn: String));
          v8(&a1[v9[12]], &a2[v9[12]], v7);
          *(_OWORD *)&a1[v9[16]] = *(_OWORD *)&a2[v9[16]];
          *(_OWORD *)&a1[v9[20]] = *(_OWORD *)&a2[v9[20]];
          goto LABEL_10;
        case 1u:
        case 2u:
          v10 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
          goto LABEL_10;
        case 5u:
          v11 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
          v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
          *(_OWORD *)&a1[v12[12]] = *(_OWORD *)&a2[v12[12]];
          *(_OWORD *)&a1[v12[16]] = *(_OWORD *)&a2[v12[16]];
          *(_OWORD *)&a1[v12[20]] = *(_OWORD *)&a2[v12[20]];
          goto LABEL_10;
        case 6u:
          v13 = type metadata accessor for DataFrame();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
          v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, imageColumn: String, labelColumn: String));
          *(_OWORD *)&a1[*(int *)(v14 + 48)] = *(_OWORD *)&a2[*(int *)(v14 + 48)];
          *(_OWORD *)&a1[*(int *)(v14 + 64)] = *(_OWORD *)&a2[*(int *)(v14 + 64)];
LABEL_10:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
          break;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLHandPoseClassifier.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MLHandPoseClassifier.DataSource();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4_35()
{
  return type metadata accessor for MLHandPoseClassifier.ModelParameters(0);
}

uint64_t OUTLINED_FUNCTION_6_29()
{
  return type metadata accessor for MLHandPoseClassifier.ModelParameters.ValidationData(0);
}

uint64_t OUTLINED_FUNCTION_7_26()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void MLTrainingSessionParameters.init(sessionDirectory:reportInterval:checkpointInterval:iterations:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = (int *)OUTLINED_FUNCTION_224();
  v11 = v10[5];
  *(_QWORD *)(a5 + v11) = 5;
  v12 = v10[6];
  *(_QWORD *)(a5 + v12) = 10;
  v13 = v10[7];
  *(_QWORD *)(a5 + v13) = 1000;
  outlined init with copy of URL?(a1, a5);
  if (a3 < a2)
    a2 = a3;
  outlined destroy of URL?(a1, &demangling cache variable for type metadata for URL?);
  *(_QWORD *)(a5 + v11) = a2;
  *(_QWORD *)(a5 + v12) = a3;
  *(_QWORD *)(a5 + v13) = a4;
}

uint64_t type metadata accessor for MLTrainingSessionParameters()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLTrainingSessionParameters;
  if (!type metadata singleton initialization cache for MLTrainingSessionParameters)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    type metadata accessor for MLCheckpoint();
    OUTLINED_FUNCTION_24_20();
    _s8CreateML27MLTrainingSessionParametersVWOcTm_1(v6 + *(_QWORD *)(v5 + 72) * v4, a2, v7);
    v8 = OUTLINED_FUNCTION_42_10();
  }
  else
  {
    type metadata accessor for MLCheckpoint();
    v8 = OUTLINED_FUNCTION_12_26();
  }
  return OUTLINED_FUNCTION_16_6(v8, v9, v10, v11);
}

{
  return specialized BidirectionalCollection.last.getter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE62918], a2);
}

{
  return specialized BidirectionalCollection.last.getter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE62DF0], a2);
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = OUTLINED_FUNCTION_38_10(a1, a2);
    OUTLINED_FUNCTION_24_20();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a3, v7 + *(_QWORD *)(v8 + 72) * v5, v6);
    v9 = OUTLINED_FUNCTION_42_10();
  }
  else
  {
    OUTLINED_FUNCTION_38_10(a1, a2);
    v9 = OUTLINED_FUNCTION_12_26();
  }
  return OUTLINED_FUNCTION_16_6(v9, v10, v11, v12);
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    return *(_QWORD *)(a1 + 8 * v1 + 24);
  else
    return 0;
}

uint64_t MLTrainingSessionParameters.sessionDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of URL?(v1, a1);
}

uint64_t MLTrainingSessionParameters.reportInterval.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_224() + 20));
}

void MLTrainingSessionParameters.reportInterval.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_224() + 20)) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLTrainingSessionParameters.reportInterval.modify())(_QWORD)
{
  OUTLINED_FUNCTION_224();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLTrainingSessionParameters.checkpointInterval.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_224() + 24));
}

void MLTrainingSessionParameters.checkpointInterval.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_224() + 24)) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLTrainingSessionParameters.checkpointInterval.modify())(_QWORD)
{
  OUTLINED_FUNCTION_224();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLTrainingSessionParameters.iterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_224() + 28));
}

void MLTrainingSessionParameters.iterations.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_224() + 28)) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLTrainingSessionParameters.iterations.modify())(_QWORD)
{
  OUTLINED_FUNCTION_224();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLTrainingSession.parameters.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  _s8CreateML27MLTrainingSessionParametersVWOcTm_1(v1 + direct field offset for MLTrainingSession.parameters, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
}

uint64_t MLTrainingSession.date.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_29_0();
  v0 = type metadata accessor for Date();
  return OUTLINED_FUNCTION_40_3(v0);
}

void MLTrainingSession.phase.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_21_19();
  OUTLINED_FUNCTION_29_0();
  *a1 = *(_BYTE *)(v1
                 + *(int *)(type metadata accessor for MLTrainingSession.Metadata(0, *(_QWORD *)(v2 + 80), v4, v5) + 28));
  OUTLINED_FUNCTION_13_12();
}

uint64_t type metadata accessor for MLTrainingSession.Metadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLTrainingSession.Metadata);
}

void key path setter for MLTrainingSession.phase : <A>MLTrainingSession<A>(char *a1)
{
  char v1;

  v1 = *a1;
  MLTrainingSession.phase.setter(&v1);
}

void MLTrainingSession.phase.setter(char *a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *a1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 112);
  OUTLINED_FUNCTION_34_16();
  *(_BYTE *)(v4 + *(int *)(type metadata accessor for MLTrainingSession.Metadata(0, *(_QWORD *)(v2 + 80), v5, v6) + 28)) = v3;
  OUTLINED_FUNCTION_13_12();
}

void MLTrainingSession.iteration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_6_30();
  type metadata accessor for MLTrainingSession.Metadata(0, *(_QWORD *)(v0 + 80), v1, v2);
  OUTLINED_FUNCTION_13_12();
}

void MLTrainingSession.iteration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_21_19();
  OUTLINED_FUNCTION_34_16();
  *(_QWORD *)(v1
            + *(int *)(type metadata accessor for MLTrainingSession.Metadata(0, *(_QWORD *)(v2 + 80), v4, v5) + 32)) = a1;
  OUTLINED_FUNCTION_13_12();
}

void MLTrainingSession.checkpoints.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = OUTLINED_FUNCTION_6_30();
  OUTLINED_FUNCTION_36_13(v0, v1, v2, v3);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_13_12();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLTrainingSession.save()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *boxed_opaque_existential_0;
  void (*v26)(uint64_t *, char *, uint64_t);
  void (*v27)(uint64_t *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[4];

  OUTLINED_FUNCTION_8_1();
  v3 = v0;
  v7 = OUTLINED_FUNCTION_39_10(v4, *(_QWORD *)(*(_QWORD *)v0 + 80), v5, v6);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v8);
  v45 = (char *)&v41 - v9;
  v10 = type metadata accessor for CodingUserInfoKey();
  v11 = OUTLINED_FUNCTION_44_14(v10);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_38_4(v12, v41);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = OUTLINED_FUNCTION_78();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_19_5();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v41 - v22;
  v48 = v3;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_1(v3 + direct field offset for MLTrainingSession.parameters, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined init with take of URL?((uint64_t)v18, (uint64_t)v15);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v19) == 1)
  {
    outlined destroy of URL?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v15, v19);
    URL.appendingPathComponent(_:)();
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    v42 = v2;
    if (one-time initialization token for sessionDirectory != -1)
      swift_once();
    v24 = __swift_project_value_buffer(v10, (uint64_t)static CodingUserInfoKey.sessionDirectory);
    (*((void (**)(uint64_t, uint64_t, uint64_t))v43 + 2))(v44, v24, v10);
    v50[3] = v19;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v50);
    v41 = v20;
    v26 = *(void (**)(uint64_t *, char *, uint64_t))(v20 + 16);
    v43 = v23;
    v26(boxed_opaque_existential_0, v23, v19);
    v27 = (void (*)(uint64_t *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify();
    specialized Dictionary.subscript.setter((uint64_t)v50);
    v27(&v49, 0);
    v28 = v48;
    v29 = v48 + *(_QWORD *)(*(_QWORD *)v48 + 112);
    OUTLINED_FUNCTION_44_7();
    v30 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v29, v47);
    MEMORY[0x22075B938](&protocol conformance descriptor for MLTrainingSession<A>.Metadata, v30);
    v32 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v1)
    {
      swift_release();
      OUTLINED_FUNCTION_19_22();
      v33 = v43;
      v39 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v39(v42, v19);
      v39((uint64_t)v33, v19);
    }
    else
    {
      v34 = v31;
      OUTLINED_FUNCTION_19_22();
      Data.write(to:options:)();
      v35 = (_QWORD *)(v28 + direct field offset for MLTrainingSession.delegate);
      v36 = *(_QWORD *)(v28 + direct field offset for MLTrainingSession.delegate + 24);
      v37 = v35[4];
      __swift_project_boxed_opaque_existential_1(v35, v36);
      v38 = v43;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v37 + 8) + 8))(v43, v36);
      outlined consume of Data._Representation(v32, v34);
      OUTLINED_FUNCTION_221();
      v40 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v40(v42, v19);
      v40((uint64_t)v38, v19);
    }
  }
  OUTLINED_FUNCTION_7();
}

uint64_t MLTrainingSession.Metadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  char v11;

  v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6573616870 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6F69746172657469 && a2 == 0xE90000000000006ELL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x4C52556C65646F6DLL && a2 == 0xE800000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x7461447475706E69 && a2 == 0xEC0000004C525561;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0x696F706B63656863 && a2 == 0xEB0000000073746ELL)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v11 & 1) != 0)
              return 5;
            else
              return 6;
          }
        }
      }
    }
  }
}

uint64_t MLTrainingSession.Metadata.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t MLTrainingSession.Metadata.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21AEAB670 + 4 * byte_21AFEB790[a1]))(1702125924, 0xE400000000000000);
}

uint64_t sub_21AEAB670()
{
  return 0x6573616870;
}

uint64_t sub_21AEAB684()
{
  return 0x6F69746172657469;
}

uint64_t sub_21AEAB6A0()
{
  return 0x4C52556C65646F6DLL;
}

uint64_t sub_21AEAB6B8()
{
  return 0x7461447475706E69;
}

uint64_t sub_21AEAB6D8()
{
  return 0x696F706B63656863;
}

void MLTrainingSession.Metadata.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_8_1();
  v15 = v2;
  v16 = v1;
  v3 = v0;
  v5 = v4;
  v8 = type metadata accessor for MLTrainingSession.Metadata.CodingKeys(255, *(_QWORD *)(v2 + 16), v6, v7);
  MEMORY[0x22075B938](&protocol conformance descriptor for MLTrainingSession<A>.Metadata.CodingKeys, v8);
  v9 = type metadata accessor for KeyedEncodingContainer();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - v11;
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_37_10();
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  v13 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
    OUTLINED_FUNCTION_32_11();
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_78();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    OUTLINED_FUNCTION_11_26();
    OUTLINED_FUNCTION_11_26();
    v17 = *(_QWORD *)(v3 + *(int *)(v15 + 44));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLCheckpoint]);
    lazy protocol witness table accessor for type [MLCheckpoint] and conformance <A> [A](&lazy protocol witness table cache variable for type [MLCheckpoint] and conformance <A> [A], &lazy protocol witness table cache variable for type MLCheckpoint and conformance MLCheckpoint, (uint64_t)&protocol conformance descriptor for MLCheckpoint, MEMORY[0x24BEE12A0]);
    OUTLINED_FUNCTION_32_11();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  OUTLINED_FUNCTION_7();
}

void MLTrainingSession.Metadata.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;

  OUTLINED_FUNCTION_8_1();
  v70 = v12;
  v14 = v13;
  v16 = v15;
  v55 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_208();
  v56 = v19;
  MEMORY[0x24BDAC7A8](v20);
  v60 = (char *)&v55 - v21;
  v65 = OUTLINED_FUNCTION_37_10();
  v22 = OUTLINED_FUNCTION_44_14(v65);
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_64();
  v64 = v23;
  v26 = type metadata accessor for MLTrainingSession.Metadata.CodingKeys(255, v14, v24, v25);
  v69 = MEMORY[0x22075B938](&protocol conformance descriptor for MLTrainingSession<A>.Metadata.CodingKeys, v26);
  v27 = type metadata accessor for KeyedDecodingContainer();
  v28 = *(_QWORD *)(v27 - 8);
  v61 = v27;
  v62 = v28;
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v55 - v30;
  v34 = (int *)type metadata accessor for MLTrainingSession.Metadata(0, v14, v32, v33);
  v67 = *((_QWORD *)v34 - 1);
  OUTLINED_FUNCTION_4_22();
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v55 - v36;
  Date.init()();
  v58 = v34[7];
  v37[v58] = 0;
  v57 = v34[8];
  *(_QWORD *)&v37[v57] = 0;
  v38 = (uint64_t)&v37[v34[9]];
  OUTLINED_FUNCTION_78();
  OUTLINED_FUNCTION_57_0(v38);
  v39 = (uint64_t)&v37[v34[10]];
  OUTLINED_FUNCTION_57_0(v39);
  v66 = v34;
  v40 = v34[11];
  v71 = v37;
  *(_QWORD *)&v37[v40] = MEMORY[0x24BEE4AF8];
  v41 = v16[3];
  v68 = v16;
  __swift_project_boxed_opaque_existential_1(v16, v41);
  v63 = v31;
  v42 = v70;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v42)
  {
    v45 = v67;
    v46 = v66;
    v47 = v71;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v68);
    (*(void (**)(char *, int *))(v45 + 8))(v47, v46);
  }
  else
  {
    v69 = v40;
    v70 = v39;
    v43 = v59;
    v44 = (uint64_t)v60;
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    OUTLINED_FUNCTION_33_15();
    v48 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 40))(v71, v64, v65);
    lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
    OUTLINED_FUNCTION_33_15();
    v48[v58] = a12;
    *(_QWORD *)&v48[v57] = KeyedDecodingContainer.decode(_:forKey:)();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    OUTLINED_FUNCTION_45_9();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of URL?(v44, v38);
    v49 = v56;
    OUTLINED_FUNCTION_45_9();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of URL?(v49, v70);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLCheckpoint]);
    lazy protocol witness table accessor for type [MLCheckpoint] and conformance <A> [A](&lazy protocol witness table cache variable for type [MLCheckpoint] and conformance <A> [A], &lazy protocol witness table cache variable for type MLCheckpoint and conformance MLCheckpoint, (uint64_t)&protocol conformance descriptor for MLCheckpoint, MEMORY[0x24BEE12D0]);
    OUTLINED_FUNCTION_33_15();
    v50 = v71;
    OUTLINED_FUNCTION_29_14(*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8));
    v51 = v72;
    v52 = v69;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v50[v52] = v51;
    v53 = v66;
    v54 = v67;
    (*(void (**)(uint64_t, char *, int *))(v67 + 16))(v55, v50, v66);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v68);
    (*(void (**)(char *, int *))(v54 + 8))(v50, v53);
  }
  OUTLINED_FUNCTION_7();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLTrainingSession<A>.Metadata.CodingKeys(char *a1, char *a2)
{
  return static MLCheckpoint.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLTrainingSession<A>.Metadata.CodingKeys()
{
  unsigned __int8 *v0;

  return MLCheckpoint.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MLTrainingSession<A>.Metadata.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  CMLFeatureValueType.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLTrainingSession<A>.Metadata.CodingKeys()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  CMLFeatureValueType.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MLTrainingSession<A>.Metadata.CodingKeys()
{
  unsigned __int8 *v0;

  return MLTrainingSession.Metadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MLTrainingSession<A>.Metadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = MLTrainingSession.Metadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MLTrainingSession<A>.Metadata.CodingKeys()
{
  return Metadata.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MLTrainingSession<A>.Metadata.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MLTrainingSession.Metadata.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLTrainingSession<A>.Metadata.CodingKeys(uint64_t a1)
{
  MEMORY[0x22075B938](&protocol conformance descriptor for MLTrainingSession<A>.Metadata.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLTrainingSession<A>.Metadata.CodingKeys(uint64_t a1)
{
  MEMORY[0x22075B938](&protocol conformance descriptor for MLTrainingSession<A>.Metadata.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance MLTrainingSession<A>.Metadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  _BYTE vars8[7];

  MLTrainingSession.Metadata.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, *(__int16 *)&vars8[4], vars8[6]);
}

void protocol witness for Encodable.encode(to:) in conformance MLTrainingSession<A>.Metadata()
{
  MLTrainingSession.Metadata.encode(to:)();
}

void MLTrainingSession.removeCheckpoints(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(char *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSURL *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  id v29;
  unint64_t v30;
  id v31;
  void *v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *);
  uint64_t v51;
  uint64_t v52;
  id v53[5];

  OUTLINED_FUNCTION_8_1();
  v50 = v3;
  v51 = v4;
  v53[4] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_19_5();
  MEMORY[0x24BDAC7A8](v7);
  v44 = (uint64_t)&v40 - v8;
  v9 = OUTLINED_FUNCTION_26_20();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_208();
  v49 = v11;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v40 - v13;
  v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  v15 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  v16 = OUTLINED_FUNCTION_44_7();
  v52 = OUTLINED_FUNCTION_39_10(v16, *(_QWORD *)(v5 + 80), v17, v18);
  v19 = *(int *)(v52 + 44);
  v48 = *(_QWORD *)(*(_QWORD *)(v15 + v19) + 16);
  if (v48)
  {
    v41 = v9;
    v42 = v2;
    v45 = v1;
    v43 = v0;
    v20 = 0;
    v21 = MEMORY[0x24BEE4AF8];
    v46 = v15;
    do
    {
      v22 = *(_QWORD *)(v15 + *(int *)(v52 + 44));
      if (v20 >= *(_QWORD *)(v22 + 16))
        __break(1u);
      v23 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v24 = *(_QWORD *)(v10 + 72);
      OUTLINED_FUNCTION_35_11(v22 + v23 + v24 * v20, (uint64_t)v14);
      if ((v50(v14) & 1) != 0)
      {
        URL._bridgeToObjectiveC()(v25);
        v27 = v26;
        v53[0] = 0;
        v28 = objc_msgSend(v47, sel_removeItemAtURL_error_, v26, v53);

        if (v28)
        {
          v29 = v53[0];
        }
        else
        {
          v31 = v53[0];
          v32 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow(v33);
          v45 = 0;
        }
      }
      else
      {
        OUTLINED_FUNCTION_35_11((uint64_t)v14, v49);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_41_11();
          v21 = v34;
        }
        v30 = *(_QWORD *)(v21 + 16);
        if (v30 >= *(_QWORD *)(v21 + 24) >> 1)
        {
          OUTLINED_FUNCTION_41_11();
          v21 = v35;
        }
        *(_QWORD *)(v21 + 16) = v30 + 1;
        outlined init with take of MLCheckpoint(v49, v21 + v23 + v30 * v24);
        v15 = v46;
      }
      ++v20;
      outlined destroy of MLCheckpoint((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    }
    while (v48 != v20);
    v19 = *(int *)(v52 + 44);
    v2 = v42;
    v9 = v41;
  }
  else
  {
    v21 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v15 + v19) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = v44;
  specialized BidirectionalCollection.last.getter(v21, v44);
  if (__swift_getEnumTagSinglePayload(v36, 1, v9) == 1)
  {
    outlined destroy of URL?(v36, &demangling cache variable for type metadata for MLCheckpoint?);
    swift_bridgeObjectRelease();
  }
  else
  {
    v37 = *(_BYTE *)(v36 + *(int *)(v9 + 20));
    outlined destroy of MLCheckpoint(v36, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    specialized BidirectionalCollection.last.getter(v21, v2);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v2, 1, v9) == 1)
    {
      outlined destroy of URL?(v2, &demangling cache variable for type metadata for MLCheckpoint?);
    }
    else
    {
      v38 = *(_QWORD *)(v2 + *(int *)(v9 + 24));
      outlined destroy of MLCheckpoint(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
      v39 = v52;
      *(_BYTE *)(v15 + *(int *)(v52 + 28)) = v37;
      *(_QWORD *)(v15 + *(int *)(v39 + 32)) = v38;
    }
  }
  MLTrainingSession.save()();

  OUTLINED_FUNCTION_7();
}

void MLTrainingSession.reuseExtractedFeatures(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  int *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  NSURL *v58;
  void *v59;
  void *v60;
  NSURL *v61;
  void *v62;
  void *v63;
  unsigned __int8 v64;
  id v65;
  unint64_t v66;
  uint64_t v67;
  id v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  double v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int *v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  id v88[9];

  OUTLINED_FUNCTION_8_1();
  v82 = v1;
  v84 = v2;
  v88[7] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *v0;
  v4 = OUTLINED_FUNCTION_37_10();
  v78 = *(_QWORD *)(v4 - 8);
  v79 = v4;
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v87 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_38_4(v7, v74);
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_64();
  v81 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLCheckpoint?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_64();
  v80 = v11;
  v12 = OUTLINED_FUNCTION_26_20();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v74 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v74 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v74 - v23;
  v25 = *(_QWORD *)(v3 + 112);
  v83 = v0;
  v26 = (uint64_t)v0 + v25;
  v27 = OUTLINED_FUNCTION_44_7();
  v30 = OUTLINED_FUNCTION_39_10(v27, *(_QWORD *)(v3 + 80), v28, v29);
  if (*(_QWORD *)(*(_QWORD *)(v26 + *(int *)(v30 + 44)) + 16))
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v32 = 0xD000000000000047;
    v33 = "This session already contains checkpoints. Please create a new session.";
LABEL_8:
    *(_QWORD *)v31 = v32;
    *(_QWORD *)(v31 + 8) = (unint64_t)(v33 - 32) | 0x8000000000000000;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_OWORD *)(v31 + 32) = 0u;
    *(_BYTE *)(v31 + 48) = 0;
    swift_willThrow(0.0);
    goto LABEL_9;
  }
  v34 = (int *)v30;
  v77 = v24;
  v75 = v16;
  v76 = v19;
  v86 = (int *)v12;
  v74 = v26;
  v35 = (char *)v84 + *(_QWORD *)(*(_QWORD *)v84 + 112);
  OUTLINED_FUNCTION_44_7();
  v84 = v34;
  v36 = *(_QWORD **)&v35[v34[11]];
  v88[0] = v36;
  v37 = v36[2];
  if (v37)
  {
    v38 = (char *)v36 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    OUTLINED_FUNCTION_31_2();
    if (v37 <= v36[2])
    {
      OUTLINED_FUNCTION_35_11((uint64_t)&v38[*(_QWORD *)(v13 + 72) * (v37 - 1)], (uint64_t)v22);
      __asm { BR              X9 }
    }
    __break(1u);
  }
  v39 = OUTLINED_FUNCTION_31_2();
  v40 = v87;
  v41 = v85;
  v42 = v83;
  v44 = v80;
  v43 = v81;
  MEMORY[0x24BDAC7A8](v39);
  *(&v74 - 2) = (uint64_t)v88;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5Tm((_QWORD *(*)(_QWORD *__return_ptr, uint64_t *))partial apply for specialized closure #1 in BidirectionalCollection.last(where:), 0, v45 & 1, (void (*)(_QWORD))type metadata accessor for MLCheckpoint, v44);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v44, 1, (uint64_t)v86) == 1)
  {
    outlined destroy of URL?((uint64_t)v44, &demangling cache variable for type metadata for MLCheckpoint?);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    v32 = 0xD000000000000029;
    v33 = "Session is missing a features checkpoint.";
    goto LABEL_8;
  }
  v83 = (_QWORD *)v13;
  v46 = (uint64_t)v44;
  v47 = (uint64_t)v77;
  outlined init with take of MLCheckpoint(v46, (uint64_t)v77);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_1((uint64_t)v42 + direct field offset for MLTrainingSession.parameters, v43, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  outlined init with take of URL?(v43, v41);
  v48 = OUTLINED_FUNCTION_78();
  if (__swift_getEnumTagSinglePayload(v41, 1, v48) == 1)
  {
    __break(1u);
    JUMPOUT(0x21AEACA5CLL);
  }
  v49 = v86;
  v50 = *(_QWORD *)(v47 + v86[6]);
  v87 = *(_QWORD *)(v47 + v86[8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(v51 + 56) = MEMORY[0x24BEE0D00];
  v52 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v51 + 32) = 0x6974636172747865;
  *(_QWORD *)(v51 + 40) = 0xEA0000000000676ELL;
  v53 = MEMORY[0x24BEE17F0];
  *(_QWORD *)(v51 + 96) = MEMORY[0x24BEE1768];
  *(_QWORD *)(v51 + 104) = v53;
  *(_QWORD *)(v51 + 64) = v52;
  *(_QWORD *)(v51 + 72) = v50;
  OUTLINED_FUNCTION_31_2();
  String.init(format:_:)();
  v54 = (uint64_t)v75;
  v55 = v85;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v54 + v49[5]) = 1;
  *(_QWORD *)(v54 + v49[6]) = v50;
  Date.init()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v55, v48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 32))(v54 + v49[7], v40, v79);
  *(_QWORD *)(v54 + v49[8]) = v87;
  v56 = (uint64_t)v76;
  outlined init with take of MLCheckpoint(v54, (uint64_t)v76);
  v57 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v58);
  v60 = v59;
  URL._bridgeToObjectiveC()(v61);
  v63 = v62;
  v88[0] = 0;
  v64 = objc_msgSend(v57, sel_copyItemAtURL_toURL_error_, v60, v62, v88);

  v65 = v88[0];
  if ((v64 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLCheckpoint>);
    v66 = (*((unsigned __int8 *)v83 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v83 + 80);
    v67 = swift_allocObject();
    *(_OWORD *)(v67 + 16) = xmmword_21AFE7DA0;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_1(v56, v67 + v66, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v68 = v65;
    outlined destroy of MLCheckpoint(v47, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    v69 = v84;
    v70 = v74;
    *(_QWORD *)(v74 + v84[11]) = v67;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v70 + v69[7]) = 1;
    v71 = *(_QWORD *)(v56 + v49[6]);
    outlined destroy of MLCheckpoint(v56, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    *(_QWORD *)(v70 + v69[8]) = v71;
  }
  else
  {
    v72 = v88[0];
    _convertNSErrorToError(_:)();

    swift_willThrow(v73);
    outlined destroy of MLCheckpoint(v56, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    outlined destroy of MLCheckpoint(v47, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
  }
LABEL_9:
  OUTLINED_FUNCTION_7();
}

uint64_t MLTrainingSession.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  outlined destroy of MLCheckpoint(v0 + direct field offset for MLTrainingSession.parameters, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  v1 = __swift_destroy_boxed_opaque_existential_0(v0 + direct field offset for MLTrainingSession.delegate);
  v5 = OUTLINED_FUNCTION_36_13(v1, v2, v3, v4);
  OUTLINED_FUNCTION_11_1(v5);
  return v0;
}

uint64_t MLTrainingSession.__deallocating_deinit()
{
  MLTrainingSession.deinit();
  return swift_deallocClassInstance();
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t isUniquelyReferenced_nonNull_native;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    *v1 = a1(isUniquelyReferenced_nonNull_native, *(_QWORD *)(v3 + 16) + 1, 1, v3);
  OUTLINED_FUNCTION_125();
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

void _s8CreateML27MLTrainingSessionParametersVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  OUTLINED_FUNCTION_40_3(v3);
  OUTLINED_FUNCTION_22();
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t outlined init with take of MLCheckpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLCheckpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5@<X0>(_QWORD *(*a1)(_QWORD *__return_ptr, uint64_t *)@<X0>, uint64_t a2@<X2>, char a3@<W3>, _QWORD *a4@<X8>)
{
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5Tm(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for MLCheckpoint, a4);
}

_QWORD *_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_18CreateMLComponents5EventVTg5@<X0>(_QWORD *(*a1)(_QWORD *__return_ptr, uint64_t *)@<X0>, uint64_t a2@<X2>, char a3@<W3>, _QWORD *a4@<X8>)
{
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5Tm(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BDC60B0], a4);
}

_QWORD *_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5Si_8CreateML12MLCheckpointVTg5Tm@<X0>(_QWORD *(*a1)(_QWORD *__return_ptr, uint64_t *)@<X0>, uint64_t a2@<X2>, char a3@<W3>, void (*a4)(_QWORD)@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((a3 & 1) != 0)
  {
    a4(0);
    v9 = OUTLINED_FUNCTION_12_26();
    return (_QWORD *)__swift_storeEnumTagSinglePayload(v9, v10, v11, v12);
  }
  else
  {
    v14 = a2;
    result = a1(a5, &v14);
    if (!v5)
    {
      v13 = ((uint64_t (*)(_QWORD))a4)(0);
      return (_QWORD *)__swift_storeEnumTagSinglePayload((uint64_t)a5, 0, 1, v13);
    }
  }
  return result;
}

void specialized closure #1 in BidirectionalCollection.last(where:)(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  specialized closure #1 in BidirectionalCollection.last(where:)(*a1, *a2, a3);
}

void outlined destroy of MLCheckpoint(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_38_10(a1, a2);
  OUTLINED_FUNCTION_11_1(v2);
  OUTLINED_FUNCTION_22();
}

void sub_21AEACDF8(_BYTE *a1@<X8>)
{
  MLTrainingSession.phase.getter(a1);
  OUTLINED_FUNCTION_22();
}

_QWORD *sub_21AEACE1C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_21AEACE28(_QWORD *a1@<X8>)
{
  uint64_t v2;

  MLTrainingSession.iteration.getter();
  *a1 = v2;
  OUTLINED_FUNCTION_22();
}

void sub_21AEACE4C(uint64_t *a1)
{
  MLTrainingSession.iteration.setter(*a1);
  OUTLINED_FUNCTION_22();
}

uint64_t *initializeBufferWithCopyOfBuffer for MLTrainingSessionParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    v10 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

char *initializeWithCopy for MLTrainingSessionParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithCopy for MLTrainingSessionParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *initializeWithTake for MLTrainingSessionParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for MLTrainingSessionParameters(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  v11 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLTrainingSessionParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEAD30C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MLTrainingSessionParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEAD350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

void type metadata completion function for MLTrainingSessionParameters()
{
  unint64_t v0;

  type metadata accessor for URL?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for URL?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
  }
}

uint64_t type metadata completion function for MLTrainingSession(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = type metadata accessor for MLTrainingSessionParameters();
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for MLTrainingSession.Metadata(319, *(_QWORD *)(a1 + 80), v3, v4);
    if (v6 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MLTrainingSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLTrainingSession);
}

uint64_t method lookup function for MLTrainingSession()
{
  return swift_lookUpClassMethod();
}

void type metadata completion function for MLTrainingSession.Metadata()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for MLTrainingSession.Metadata(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v9 = a3[9];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
    v15 = a3[10];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v15, 1, v12))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v16, v17, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v12);
    }
    *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MLTrainingSession.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 36);
  v6 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 40);
  if (!__swift_getEnumTagSinglePayload(v7, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v7, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MLTrainingSession.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  v13 = a3[10];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (__swift_getEnumTagSinglePayload(a2 + v13, 1, v11))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v14, v15, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v11);
  }
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MLTrainingSession.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v7 = a3[9];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (EnumTagSinglePayload)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v8, v9, v10);
LABEL_7:
  v15 = a3[10];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = __swift_getEnumTagSinglePayload(a1 + v15, 1, v10);
  v19 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v10);
  if (!v18)
  {
    v20 = *(_QWORD *)(v10 - 8);
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 24))(v16, v17, v10);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v16, v10);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v16, v17, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v10);
LABEL_13:
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MLTrainingSession.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  v13 = a3[10];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (__swift_getEnumTagSinglePayload(a2 + v13, 1, v11))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v14, v15, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v11);
  }
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t assignWithTake for MLTrainingSession.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v11);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11);
  if (EnumTagSinglePayload)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v14 = *(_QWORD *)(v11 - 8);
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v14 + 40))(v9, v10, v11);
LABEL_7:
  v16 = a3[10];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = __swift_getEnumTagSinglePayload(a1 + v16, 1, v11);
  v20 = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v11);
  if (!v19)
  {
    v21 = *(_QWORD *)(v11 - 8);
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 40))(v17, v18, v11);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v17, v11);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v17, v18, v11);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v11);
LABEL_13:
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLTrainingSession.Metadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEADEF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v6 = OUTLINED_FUNCTION_25_16();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v9;
    v8 = v4 + *(int *)(a3 + 36);
    return __swift_getEnumTagSinglePayload(v8, v3, v7);
  }
  v11 = *(_QWORD *)(v4 + *(int *)(a3 + 44));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for MLTrainingSession.Metadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AEADF9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = OUTLINED_FUNCTION_25_16();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
LABEL_5:
    OUTLINED_FUNCTION_16_6(v10, v4, v4, v9);
    return;
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
  {
    v9 = v11;
    v10 = v5 + *(int *)(a4 + 36);
    goto LABEL_5;
  }
  *(_QWORD *)(v5 + *(int *)(a4 + 44)) = (v4 - 1);
  OUTLINED_FUNCTION_125();
}

uint64_t type metadata accessor for MLTrainingSession.Metadata.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLTrainingSession.Metadata.CodingKeys);
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [MLCheckpoint] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MLCheckpoint]);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(a2, (uint64_t (*)(uint64_t))type metadata accessor for MLCheckpoint, a3);
    v11 = v10;
    result = MEMORY[0x22075B938](a4, v9, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata instantiation function for MLTrainingSession.Metadata.CodingKeys()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t storeEnumTagSinglePayload for MLTrainingSession.Metadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21AEAE14C + 4 * byte_21AFEB79B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_21AEAE180 + 4 * byte_21AFEB796[v4]))();
}

uint64_t sub_21AEAE180(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AEAE188(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AEAE190);
  return result;
}

uint64_t sub_21AEAE19C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AEAE1A4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_21AEAE1A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AEAE1B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in MLTrainingSession<A>.Metadata.CodingKeys()
{
  JUMPOUT(0x22075B938);
}

void base witness table accessor for CustomDebugStringConvertible in MLTrainingSession<A>.Metadata.CodingKeys()
{
  JUMPOUT(0x22075B938);
}

void base witness table accessor for CustomStringConvertible in MLTrainingSession<A>.Metadata.CodingKeys()
{
  JUMPOUT(0x22075B938);
}

uint64_t OUTLINED_FUNCTION_6_30()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_11_26()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_12_26()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_19_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_21_19()
{
  uint64_t v0;

  return v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
}

uint64_t OUTLINED_FUNCTION_25_16()
{
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_26_20()
{
  return type metadata accessor for MLCheckpoint();
}

uint64_t OUTLINED_FUNCTION_29_14@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_30_15()
{
  return 8;
}

uint64_t OUTLINED_FUNCTION_32_11()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_33_15()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_34_16()
{
  return swift_beginAccess();
}

void OUTLINED_FUNCTION_35_11(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  _s8CreateML27MLTrainingSessionParametersVWOcTm_1(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_36_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for MLTrainingSession.Metadata(0, *(_QWORD *)(v4 + 80), a3, a4);
}

uint64_t OUTLINED_FUNCTION_37_10()
{
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_38_10(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

uint64_t OUTLINED_FUNCTION_39_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for MLTrainingSession.Metadata(0, a2, a3, a4);
}

void OUTLINED_FUNCTION_41_11()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_42_10()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_44_14(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 192) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_45_9()
{
  uint64_t v0;

  return v0;
}

void MLTextClassifier.write(to:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v5[4];
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 64);
  v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v5[2] = *(_OWORD *)(a2 + 32);
  v5[3] = v4;
  v6 = v2;
  NLModel.write(to:defaultName:metadata:)(a1, 0x73616C4374786554, 0xEE00726569666973, (uint64_t *)v5);
  OUTLINED_FUNCTION_0_36();
}

void MLTextClassifier.write(toFile:metadata:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  v3 = *(_QWORD *)(a3 + 64);
  v4 = *(_OWORD *)(a3 + 16);
  v6[0] = *(_OWORD *)a3;
  v6[1] = v4;
  v5 = *(_OWORD *)(a3 + 48);
  v6[2] = *(_OWORD *)(a3 + 32);
  v6[3] = v5;
  v7 = v3;
  NLModel.write(toFile:defaultName:metadata:)(a1, a2, 0x73616C4374786554, (void *)0xEE00726569666973, (uint64_t *)v6);
  OUTLINED_FUNCTION_0_36();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVySo7CIImageCSSGG_AJs5NeverOTg503_s8d87ML17MLImageClassifierV10evaluation2onAA19MLClassifierMetricsVx_tKSlRz0A12MLComponents16fg5VySo7h5CSSG7B59RtzlFAlMcfu_32ebed8ba5c9417264c39088de476e42ecAmLTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v7 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>)
                   - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      swift_getKeyPath();
      swift_getAtKeyPath();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 += v6;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVySo7CIImageCSSGG_SSs5NeverOTg503_s8d87ML17MLImageClassifierV10evaluation2onAA19MLClassifierMetricsVx_tKSlRz0A12MLComponents16fg5VySo7h5CSSG7B63RtzlFSSAMcfu0_33_7eec49b2e7313abe927b434220475ef8AMSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>)
                   - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      swift_getKeyPath();
      swift_getAtKeyPath();
      swift_release();
      v2 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v12;
      }
      v7 = *(_QWORD *)(v2 + 16);
      if (v7 >= *(_QWORD *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v2 = v12;
      }
      *(_QWORD *)(v2 + 16) = v7 + 1;
      v8 = v2 + 16 * v7;
      *(_QWORD *)(v8 + 32) = v10;
      *(_QWORD *)(v8 + 40) = v11;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void static MLImageClassifier._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLImageClassifier._defaultSessionParameters);
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_22();
}

id MLImageClassifier.model.getter()
{
  id *v0;

  return *v0;
}

void key path setter for MLImageClassifier.model : MLImageClassifier(id *a1)
{
  MLImageClassifier.model.setter(*a1);
}

void MLImageClassifier.model.setter(void *a1)
{
  id *v1;

  *v1 = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t MLImageClassifier.model.modify(void **a1)
{
  void **v1;
  void *v2;
  id v3;

  v2 = *v1;
  *a1 = *v1;
  a1[1] = v1;
  v3 = v2;
  return OUTLINED_FUNCTION_261();
}

void MLImageClassifier.model.modify(uint64_t a1, char a2)
{
  void **v2;
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)a1;
  v2 = *(void ***)(a1 + 8);
  v4 = *v2;
  if ((a2 & 1) != 0)
  {
    v5 = v3;

    *v2 = v5;
  }
  else
  {

    *v2 = v3;
  }
}

uint64_t MLImageClassifier.modelParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MLImageClassifier.ModelParameters((__int128 *)(v1 + 8), a1);
}

void MLImageClassifier.trainingMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_57_7();
  OUTLINED_FUNCTION_97(v0 + *(int *)(v1 + 24), v2, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

uint64_t type metadata accessor for MLImageClassifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLImageClassifier;
  if (!type metadata singleton initialization cache for MLImageClassifier)
    return swift_getSingletonMetadata();
  return result;
}

void MLImageClassifier.validationMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_57_7();
  OUTLINED_FUNCTION_97(v0 + *(int *)(v1 + 28), v2, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

void MLImageClassifier.init(trainingData:parameters:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  uint64_t __src[12];

  v6 = OUTLINED_FUNCTION_82_6();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_49();
  v10 = v9 - v8;
  v12 = v2 + *(int *)(v11 + 24);
  MLClassifierMetrics.init()(v11, v13, v14, v15, v16, v17, v18, v19, __src[0], __src[1], __src[2], __src[3], __src[4], __src[5], __src[6], __src[7], __src[8], __src[9], __src[10],
    __src[11]);
  v20 = (_QWORD *)(v2 + *(int *)(v6 + 28));
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v21, 0xD0000000000000C0);
  *v20 = v22;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload();
  v23 = static _ImageUtilities.getImageURLsAndLabels(from:)(a1);
  if (v3)
  {
    outlined destroy of MLImageClassifier.ModelParameters((uint64_t)a2);
    outlined destroy of MLHandPoseClassifier.ModelParameters(a1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.DataSource);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v12, type metadata accessor for MLClassifierMetrics);
    v26 = OUTLINED_FUNCTION_261();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v26, v27);
  }
  else
  {
    v24 = v23;
    outlined init with copy of MLImageClassifier.ModelParameters(a2, (uint64_t)__src);
    v25 = OUTLINED_FUNCTION_83_8();
    *(_QWORD *)(v25 + 16) = v24;
    memcpy((void *)(v25 + 24), __src, 0x50uLL);
    specialized blockAwait<A>(_:)();
    swift_release();
    outlined destroy of MLImageClassifier.ModelParameters((uint64_t)a2);
    outlined destroy of MLHandPoseClassifier.ModelParameters(a1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.DataSource);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v12, type metadata accessor for MLClassifierMetrics);
    outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v20, type metadata accessor for MLClassifierMetrics);
    outlined init with take of TreeRegressorModel(v10, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD);
  uint64_t __src[12];

  v6 = OUTLINED_FUNCTION_82_6();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_49();
  v9 = v2 + *(int *)(v8 + 24);
  MLClassifierMetrics.init()(v8, v10, v11, v12, v13, v14, v15, v16, __src[0], __src[1], __src[2], __src[3], __src[4], __src[5], __src[6], __src[7], __src[8], __src[9], __src[10],
    __src[11]);
  v17 = (_QWORD *)(v2 + *(int *)(v6 + 28));
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_44_2(v18, 0xD0000000000000C0);
  *v17 = v19;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MLImageClassifier.ModelParameters(a2, (uint64_t)__src);
  v20 = OUTLINED_FUNCTION_83_8();
  *(_QWORD *)(v20 + 16) = a1;
  memcpy((void *)(v20 + 24), __src, 0x50uLL);
  specialized blockAwait<A>(_:)();
  outlined destroy of MLImageClassifier.ModelParameters((uint64_t)a2);
  swift_release();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v9, type metadata accessor for MLClassifierMetrics);
  outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v17, type metadata accessor for MLClassifierMetrics);
  if (!v3)
  {
    v21 = OUTLINED_FUNCTION_261();
    outlined init with take of TreeRegressorModel(v21, v22, v23);
  }
}

uint64_t closure #1 in MLImageClassifier.init(trainingData:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  return swift_task_switch();
}

{
  _QWORD *v3;

  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in MLImageClassifier.init(trainingData:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_54_8();
  OUTLINED_FUNCTION_66_9();
  v1 = OUTLINED_FUNCTION_31_2();
  specialized Set.init<A>(_:)(v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v2;
  v3 = OUTLINED_FUNCTION_53_13(v2);
  return OUTLINED_FUNCTION_38_11(v3, v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_37_11();
  if (!v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_54_8();
  OUTLINED_FUNCTION_66_9();
  v1 = OUTLINED_FUNCTION_31_2();
  specialized Set.init<A>(_:)(v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v2;
  v3 = OUTLINED_FUNCTION_53_13(v2);
  return OUTLINED_FUNCTION_38_11(v3, v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_37_11();
  if (!v0)
    return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v1 + 8));
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLImageClassifier.init(trainingData:parameters:classNames:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[27] = a3;
  v4[28] = a4;
  v4[25] = a1;
  v4[26] = a2;
  OUTLINED_FUNCTION_68_8();
  v4[29] = OUTLINED_FUNCTION_4_36();
  v4[30] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_67_8();
  v4[31] = OUTLINED_FUNCTION_4_36();
  v4[32] = OUTLINED_FUNCTION_25();
  v5 = OUTLINED_FUNCTION_4_12();
  v4[33] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[34] = v6;
  v4[35] = *(_QWORD *)(v6 + 64);
  v4[36] = OUTLINED_FUNCTION_5_27();
  v4[37] = OUTLINED_FUNCTION_25();
  type metadata accessor for MLImageClassifier.FeatureExtractorType(0);
  v4[38] = OUTLINED_FUNCTION_4_36();
  v4[39] = OUTLINED_FUNCTION_25();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>);
  v4[40] = v7;
  v4[41] = *(_QWORD *)(v7 - 8);
  v4[42] = OUTLINED_FUNCTION_0();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifier<Float, String>.Configuration);
  v4[43] = v8;
  v4[44] = *(_QWORD *)(v8 - 8);
  v4[45] = OUTLINED_FUNCTION_5_27();
  v4[46] = OUTLINED_FUNCTION_25();
  type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  v4[47] = OUTLINED_FUNCTION_4_36();
  v4[48] = OUTLINED_FUNCTION_25();
  type metadata accessor for MLImageClassifier.Classifier();
  v4[49] = OUTLINED_FUNCTION_4_36();
  v4[50] = OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLImageClassifier.init(trainingData:parameters:classNames:)()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(__int128 **)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = OUTLINED_FUNCTION_57_7();
  *(_QWORD *)(v0 + 408) = v3;
  *(_DWORD *)(v0 + 584) = *(_DWORD *)(v3 + 24);
  MLClassifierMetrics.init()(v3, v4, v5, v6, v7, v8, v9, v10, v26, v27, v28, v30, v32, v34, v35, v37, v39, v41, v42,
    v43);
  v11 = *(int *)(v3 + 28);
  *(_DWORD *)(v0 + 588) = v11;
  v12 = (_QWORD *)(v2 + v11);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  OUTLINED_FUNCTION_44_2(v13, 0xD0000000000000C0);
  *v12 = v14;
  type metadata accessor for MLClassifierMetrics.Contents(0);
  swift_storeEnumTagMultiPayload();
  v15 = (__int128 *)(v2 + 8);
  outlined init with copy of MLImageClassifier.ModelParameters(v1, v2 + 8);
  MLImageClassifier.ModelParameters.validate()();
  if (v16)
  {
    v17 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 208);
    outlined destroy of MLImageClassifier.ModelParameters(*(_QWORD *)(v0 + 216));
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_24_21();
    OUTLINED_FUNCTION_11_27(v18);
    OUTLINED_FUNCTION_11_27(v17);
    swift_task_dealloc();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_28_18();
    OUTLINED_FUNCTION_34_17();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 384);
    v36 = *(_QWORD *)(v0 + 392);
    v38 = *(_QWORD *)(v0 + 400);
    v22 = *(_QWORD *)(v0 + 360);
    v21 = *(_QWORD *)(v0 + 368);
    v24 = *(_QWORD *)(v0 + 344);
    v23 = *(_QWORD *)(v0 + 352);
    v29 = *(_QWORD *)(v0 + 336);
    v31 = *(_QWORD *)(v0 + 328);
    v33 = *(_QWORD *)(v0 + 320);
    v40 = *(_QWORD *)(v0 + 312);
    outlined init with copy of MLImageClassifier.ModelParameters(v15, v0 + 16);
    swift_bridgeObjectRetain();
    MLImageClassifier.ModelParameters.algorithm.getter(v20);
    lazy protocol witness table accessor for type Float and conformance Float();
    LogisticRegressionClassifier.Configuration.init()();
    LogisticRegressionClassifier.Configuration.maximumIterations.setter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v21, v24);
    LogisticRegressionClassifier.init(labels:configuration:)();
    outlined destroy of MLImageClassifier.ModelParameters(v0 + 16);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v36, v29, v33);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>);
    swift_storeEnumTagMultiPayload();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v20, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    outlined init with take of TreeRegressorModel(v36, v38, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
    MLImageClassifier.ModelParameters.algorithm.getter(v20);
    outlined init with take of TreeRegressorModel(v20, v40, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v25;
    *v25 = v0;
    v25[1] = MLImageClassifier.init(trainingData:parameters:classNames:);
    return MLImageClassifier.FeatureExtractor.init(type:)(v0 + 96, *(_QWORD *)(v0 + 312));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_121_0(v2);
  *(_QWORD *)(v0 + 424) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30();
  }
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_63_10();
  *(_QWORD *)(v0 + 456) = v2;
  *(_QWORD *)(v0 + 464) = v1;
  OUTLINED_FUNCTION_73_7();
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30();
  }
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 456) + 16);
  swift_bridgeObjectRelease();
  static MLImageClassifier.reportAnalytics(trainingExampleCount:classCount:parameters:)(v1);
  v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MLImageClassifier.FeatureExtractor.extractFeatures<A>(from:)
                                       + async function pointer to specialized MLImageClassifier.FeatureExtractor.extractFeatures<A>(from:));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 472) = v2;
  *v2 = v0;
  v2[1] = MLImageClassifier.init(trainingData:parameters:classNames:);
  v3 = OUTLINED_FUNCTION_62_12(*(_QWORD *)(v0 + 456));
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_63_10();
  *(_QWORD *)(v0 + 480) = v2;
  *(_QWORD *)(v0 + 488) = v1;
  OUTLINED_FUNCTION_73_7();
  if (v1)
  {
    OUTLINED_FUNCTION_72_7();
    OUTLINED_FUNCTION_30();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t);

  v1 = *(_QWORD *)(v0[55] + 16);
  v0[62] = v1;
  if (v1)
  {
    v2 = (_QWORD *)OUTLINED_FUNCTION_13_31();
    v0[65] = v2;
    *v2 = v0;
    v2[1] = MLImageClassifier.init(trainingData:parameters:classNames:);
    v3 = OUTLINED_FUNCTION_62_12(v0[55]);
    return v6(v3);
  }
  else
  {
    v5 = (_QWORD *)OUTLINED_FUNCTION_13_31();
    v0[63] = v5;
    *v5 = v0;
    v5[1] = MLImageClassifier.init(trainingData:parameters:classNames:);
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v6)(v0[32], v0[60], 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_121_0(v2);
  *(_QWORD *)(v0 + 512) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_72_7();
    OUTLINED_FUNCTION_30();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  OUTLINED_FUNCTION_47_11();
  outlined init with take of TreeRegressorModel(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  MLImageClassifier.ModelParameters.algorithm.getter(v0);
  OUTLINED_FUNCTION_76_5(v4, v5, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 560) = v6;
  *v6 = v1;
  v6[1] = MLImageClassifier.init(trainingData:parameters:classNames:);
  v7 = OUTLINED_FUNCTION_62_12(*(_QWORD *)(v1 + 304));
  return OUTLINED_FUNCTION_39_11(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD);

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v4);
  v2[66] = v0;
  v2[67] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_70();
  }
  else
  {
    v6 = (_QWORD *)OUTLINED_FUNCTION_13_31();
    v2[68] = v6;
    *v6 = v3;
    v6[1] = MLImageClassifier.init(trainingData:parameters:classNames:);
    return v7(v2[31], v2[60], v0, 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_36_14();
  OUTLINED_FUNCTION_121_0(v2);
  *(_QWORD *)(v0 + 552) = v1;
  swift_task_dealloc();
  if (v1)
    OUTLINED_FUNCTION_72_7();
  else
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  OUTLINED_FUNCTION_47_11();
  outlined init with take of TreeRegressorModel(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  MLImageClassifier.ModelParameters.algorithm.getter(v0);
  OUTLINED_FUNCTION_76_5(v4, v5, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 560) = v6;
  *v6 = v1;
  v6[1] = MLImageClassifier.init(trainingData:parameters:classNames:);
  v7 = OUTLINED_FUNCTION_62_12(*(_QWORD *)(v1 + 304));
  return OUTLINED_FUNCTION_39_11(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v3);
  *(_QWORD *)(v2 + 568) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30();
  }
  else
  {
    *(_QWORD *)(v2 + 576) = v0;
  }
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_8_28();
  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD **)(v0 + 200);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 304), type metadata accessor for MLImageClassifier.FeatureExtractorType);
  *v4 = v1;
  specialized MLImageClassifier.evaluation<A>(on:)(v3);
  v5 = *(_QWORD *)(v0 + 432);
  if (v2)
  {
    v6 = *(_QWORD *)(v0 + 216);
    swift_bridgeObjectRelease();
    v7 = outlined destroy of MLImageClassifier.ModelParameters(v6);
    OUTLINED_FUNCTION_77_5(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    v8 = OUTLINED_FUNCTION_77_6();
    OUTLINED_FUNCTION_58_0(v8, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
    OUTLINED_FUNCTION_30();

    OUTLINED_FUNCTION_24_21();
    OUTLINED_FUNCTION_11_27(v0 + 96);
    OUTLINED_FUNCTION_11_27(v5);
    v9 = OUTLINED_FUNCTION_74_8();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v9, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
    OUTLINED_FUNCTION_2_37();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_38();
    OUTLINED_FUNCTION_120_2();
    OUTLINED_FUNCTION_68_5();
    OUTLINED_FUNCTION_28_18();
    OUTLINED_FUNCTION_34_17();
    return OUTLINED_FUNCTION_1_32(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 496);
    v12 = *(int *)(v0 + 584);
    v13 = *(_QWORD *)(v0 + 240);
    v14 = *(_QWORD *)(v0 + 200);
    OUTLINED_FUNCTION_30();
    outlined assign with take of MLClassifierMetrics(v13, v14 + v12);
    if (v11)
    {
      specialized MLImageClassifier.evaluation<A>(on:)(*(_QWORD *)(v0 + 440));
      v18 = *(_QWORD *)(v0 + 232);
      v19 = *(_QWORD *)(v0 + 200) + *(int *)(v0 + 588);
      v20 = outlined destroy of MLImageClassifier.ModelParameters(*(_QWORD *)(v0 + 216));
      OUTLINED_FUNCTION_58_0(v20, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      v21 = OUTLINED_FUNCTION_77_6();
      OUTLINED_FUNCTION_44_15(v21, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
      OUTLINED_FUNCTION_30();
      outlined assign with take of MLClassifierMetrics(v18, v19);
    }
    else
    {
      v15 = *(_QWORD *)(v0 + 216);
      swift_bridgeObjectRelease();
      v16 = outlined destroy of MLImageClassifier.ModelParameters(v15);
      OUTLINED_FUNCTION_44_15(v16, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      v17 = OUTLINED_FUNCTION_77_6();
      OUTLINED_FUNCTION_203(v17, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
    }
    OUTLINED_FUNCTION_2_37();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_38();
    OUTLINED_FUNCTION_120_2();
    OUTLINED_FUNCTION_68_5();
    OUTLINED_FUNCTION_28_18();
    OUTLINED_FUNCTION_34_17();
    return OUTLINED_FUNCTION_1_32(*(uint64_t (**)(void))(v0 + 8));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_8_28();
  v2 = OUTLINED_FUNCTION_43_12();
  OUTLINED_FUNCTION_203(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
  OUTLINED_FUNCTION_3_30();
  OUTLINED_FUNCTION_11_27(v1);
  OUTLINED_FUNCTION_11_27(v0);
  OUTLINED_FUNCTION_0_37();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_28_18();
  OUTLINED_FUNCTION_34_17();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_9();
  return OUTLINED_FUNCTION_1_32(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_8_28();
  v2 = *(_QWORD *)(v1 + 432);
  v3 = OUTLINED_FUNCTION_32_12();
  OUTLINED_FUNCTION_58_0(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  v4 = OUTLINED_FUNCTION_45_10();
  OUTLINED_FUNCTION_44_15(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_3_30();
  OUTLINED_FUNCTION_11_27(v0);
  OUTLINED_FUNCTION_11_27(v2);
  OUTLINED_FUNCTION_0_37();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_28_18();
  OUTLINED_FUNCTION_34_17();
  v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_9();
  return OUTLINED_FUNCTION_1_32(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_8_28();
  v2 = *(_QWORD *)(v1 + 456);
  v3 = OUTLINED_FUNCTION_32_12();
  OUTLINED_FUNCTION_58_0(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  v4 = OUTLINED_FUNCTION_45_10();
  OUTLINED_FUNCTION_44_15(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_3_30();
  OUTLINED_FUNCTION_11_27(v0);
  OUTLINED_FUNCTION_11_27(v2);
  OUTLINED_FUNCTION_0_37();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_28_18();
  OUTLINED_FUNCTION_34_17();
  v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_9();
  return OUTLINED_FUNCTION_1_32(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_8_28();
  v2 = *(_QWORD *)(v1 + 480);
  v3 = OUTLINED_FUNCTION_32_12();
  OUTLINED_FUNCTION_58_0(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  v4 = OUTLINED_FUNCTION_45_10();
  OUTLINED_FUNCTION_44_15(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_3_30();
  OUTLINED_FUNCTION_11_27(v0);
  OUTLINED_FUNCTION_11_27(v2);
  OUTLINED_FUNCTION_0_37();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_28_18();
  OUTLINED_FUNCTION_34_17();
  v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_9();
  return OUTLINED_FUNCTION_1_32(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_8_28();
  v2 = *(_QWORD *)(v1 + 440);
  v3 = OUTLINED_FUNCTION_32_12();
  OUTLINED_FUNCTION_58_0(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  v4 = OUTLINED_FUNCTION_45_10();
  OUTLINED_FUNCTION_44_15(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_3_30();
  OUTLINED_FUNCTION_11_27(v0);
  OUTLINED_FUNCTION_11_27(v2);
  OUTLINED_FUNCTION_0_37();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_28_18();
  OUTLINED_FUNCTION_34_17();
  v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_9();
  return OUTLINED_FUNCTION_1_32(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_8_28();
  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 480);
  v3 = OUTLINED_FUNCTION_43_12();
  OUTLINED_FUNCTION_77_5(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  v4 = OUTLINED_FUNCTION_45_10();
  OUTLINED_FUNCTION_58_0(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_3_30();
  OUTLINED_FUNCTION_11_27(v2);
  OUTLINED_FUNCTION_11_27(v1);
  OUTLINED_FUNCTION_0_37();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_28_18();
  OUTLINED_FUNCTION_34_17();
  v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_9();
  return OUTLINED_FUNCTION_1_32(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  OUTLINED_FUNCTION_8_28();
  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = OUTLINED_FUNCTION_43_12();
  OUTLINED_FUNCTION_44_15(v3, type metadata accessor for MLImageClassifier.FeatureExtractorType);
  OUTLINED_FUNCTION_58_0(v4, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  OUTLINED_FUNCTION_45_10();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
  OUTLINED_FUNCTION_3_30();
  OUTLINED_FUNCTION_11_27(v2);
  OUTLINED_FUNCTION_11_27(v1);
  v5 = OUTLINED_FUNCTION_74_8();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v5, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Model);
  OUTLINED_FUNCTION_0_37();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  OUTLINED_FUNCTION_68_5();
  OUTLINED_FUNCTION_28_18();
  OUTLINED_FUNCTION_34_17();
  v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_9();
  return OUTLINED_FUNCTION_1_32(v6);
}

void MLImageClassifier.init(trainingData:parameters:classNames:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  OUTLINED_FUNCTION_8_28();
  _sypSgWOcTm_0(*(_QWORD *)(v0 + 216) + 16, v0 + 168, &demangling cache variable for type metadata for Any?);
  if (*(_QWORD *)(v0 + 192))
  {
    v18 = *(_QWORD *)(v0 + 424);
    v2 = *(_QWORD *)(v0 + 288);
    v1 = *(_QWORD *)(v0 + 296);
    v3 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 208);
    v5 = *(_QWORD *)(v0 + 216);
    v6 = (_OWORD *)OUTLINED_FUNCTION_261();
    outlined init with take of Any(v6, v7);
    swift_dynamicCast();
    v8 = *(_QWORD *)(v5 + 8);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    v9 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v4;
    outlined init with take of TreeRegressorModel(v2, v10 + v9, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    specialized blockAwait<A>(_:)();
    *(_QWORD *)(v0 + 432) = v11;
    *(_QWORD *)(v0 + 440) = v12;
    if (v18)
    {
      v13 = *(_QWORD *)(v0 + 216);
      swift_release();
      swift_bridgeObjectRelease();
      v14 = outlined destroy of MLImageClassifier.ModelParameters(v13);
      OUTLINED_FUNCTION_77_5(v14, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
      v15 = OUTLINED_FUNCTION_45_10();
      OUTLINED_FUNCTION_58_0(v15, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.Classifier);
      OUTLINED_FUNCTION_24_21();
      OUTLINED_FUNCTION_11_27(v10);
      OUTLINED_FUNCTION_11_27(v0 + 96);
      swift_task_dealloc();
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_40();
      OUTLINED_FUNCTION_58();
      OUTLINED_FUNCTION_19();
      OUTLINED_FUNCTION_75_11();
      OUTLINED_FUNCTION_38();
      OUTLINED_FUNCTION_120_2();
      OUTLINED_FUNCTION_68_5();
      OUTLINED_FUNCTION_28_18();
      OUTLINED_FUNCTION_1_32(*(uint64_t (**)(void))(v0 + 8));
    }
    else
    {
      v16 = v11;
      swift_release();
      v19 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:)
                                                           + async function pointer to specialized static MLImageClassifier.applyAugmentations<A>(to:augmentationOptions:upsampleFactor:));
      v17 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 448) = v17;
      *v17 = v0;
      v17[1] = MLImageClassifier.init(trainingData:parameters:classNames:);
      v19(v16, v8, 1);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in MLImageClassifier.init(trainingData:parameters:classNames:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  *(_QWORD *)(v3 + 16) = a1;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = closure #1 in MLImageClassifier.init(trainingData:parameters:classNames:);
  return static MLImageClassifier.collectImages(trainingData:validationData:)(a2, a3);
}

uint64_t closure #1 in MLImageClassifier.init(trainingData:parameters:classNames:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v8;

  v6 = *v3;
  v8 = *v3;
  OUTLINED_FUNCTION_121_0(&v8);
  swift_task_dealloc();
  if (v2)
    return ((uint64_t (*)(void))v3[1])();
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = a1;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_168_0();
}

uint64_t closure #1 in MLImageClassifier.init(trainingData:parameters:classNames:)()
{
  uint64_t v0;

  *(int8x16_t *)*(_QWORD *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 32), *(int8x16_t *)(v0 + 32), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static MLImageClassifier.collectImages(trainingData:validationData:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for MLImageClassifier.DataSource();
  v2[4] = OUTLINED_FUNCTION_0();
  v2[5] = OUTLINED_FUNCTION_4_12();
  v2[6] = OUTLINED_FUNCTION_0();
  v3 = type metadata accessor for ImageReader();
  v2[7] = v3;
  v2[8] = *(_QWORD *)(v3 - 8);
  v2[9] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

void static MLImageClassifier.collectImages(trainingData:validationData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 24);
  ImageReader.init()();
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
  OUTLINED_FUNCTION_261();
  v3 = (char *)sub_21AEB0250 + 4 * byte_21AFEBA10[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AEB0250()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, _QWORD, _QWORD);

  v1 = v0[2];
  swift_bridgeObjectRetain();
  v2 = OUTLINED_FUNCTION_261();
  specialized Collection.randomSplit<A, B>(strategy:)(v2, v3, v4, v1);
  v6 = v5;
  v8 = v7;
  OUTLINED_FUNCTION_15_0();
  v0[10] = v6;
  v0[11] = v8;
  v9 = (_QWORD *)OUTLINED_FUNCTION_13_31();
  v0[12] = v9;
  *v9 = v0;
  v9[1] = static MLImageClassifier.collectImages(trainingData:validationData:);
  return v11(v8, 0, 0);
}

uint64_t static MLImageClassifier.collectImages(trainingData:validationData:)()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD);

  v2 = *v1;
  OUTLINED_FUNCTION_63_10();
  v2[13] = v3;
  v2[14] = v0;
  OUTLINED_FUNCTION_73_7();
  OUTLINED_FUNCTION_123();
  if (v0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18();
    return OUTLINED_FUNCTION_70();
  }
  else
  {
    v5 = (_QWORD *)OUTLINED_FUNCTION_13_31();
    v2[15] = (uint64_t)v5;
    *v5 = v1;
    v5[1] = static MLImageClassifier.collectImages(trainingData:validationData:);
    v6 = OUTLINED_FUNCTION_62_12(v2[10]);
    return v7(v6, 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_52_2();
  OUTLINED_FUNCTION_121_0(v3);
  *(_QWORD *)(v2 + 128) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1)
    *(_QWORD *)(v2 + 136) = v0;
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 136));
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  OUTLINED_FUNCTION_64_8();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_64_8();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_19();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

id static MLImageClassifier.reportAnalytics(trainingExampleCount:classCount:parameters:)(uint64_t a1)
{
  uint64_t v2;
  id result;
  Swift::String v4;

  v2 = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  MEMORY[0x24BDAC7A8](v2);
  result = AnalyticsReporter.init()();
  if ((result & 1) == 0)
  {
    v4._object = (void *)0x800000021AFF4C10;
    v4._countAndFlagsBits = 0xD000000000000010;
    AnalyticsReporter.reportDataMetrics(model:metricName:quantity:)(CreateML_ModelType_imageClassifier, v4, (float)a1);
  }
  return result;
}

uint64_t specialized MLImageClassifier.evaluation<A>(on:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t MLComponents16AnnotatedFeatureVySo7CIImageCSSGG_AJs5NeverOTg503_s8d87ML17MLImageClassifierV10evaluation2onAA19MLClassifierMetricsVx_tKSlRz0A12MLComponents16fg5VySo7h5CSSG7B59RtzlFAlMcfu_32ebed8ba5c9417264c39088de476e42ecAmLTf3nnnpk_nTf1cn_n;
  uint64_t result;
  uint64_t v5;

  MLComponents16AnnotatedFeatureVySo7CIImageCSSGG_AJs5NeverOTg503_s8d87ML17MLImageClassifierV10evaluation2onAA19MLClassifierMetricsVx_tKSlRz0A12MLComponents16fg5VySo7h5CSSG7B59RtzlFAlMcfu_32ebed8ba5c9417264c39088de476e42ecAmLTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVySo7CIImageCSSGG_AJs5NeverOTg503_s8d87ML17MLImageClassifierV10evaluation2onAA19MLClassifierMetricsVx_tKSlRz0A12MLComponents16fg5VySo7h5CSSG7B59RtzlFAlMcfu_32ebed8ba5c9417264c39088de476e42ecAmLTf3nnnpk_nTf1cn_n(a1);
  MLImageClassifier.performRequests(_:)(MLComponents16AnnotatedFeatureVySo7CIImageCSSGG_AJs5NeverOTg503_s8d87ML17MLImageClassifierV10evaluation2onAA19MLClassifierMetricsVx_tKSlRz0A12MLComponents16fg5VySo7h5CSSG7B59RtzlFAlMcfu_32ebed8ba5c9417264c39088de476e42ecAmLTf3nnnpk_nTf1cn_n);
  result = swift_bridgeObjectRelease();
  if (!v1)
  {
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay18CreateMLComponents16AnnotatedFeatureVySo7CIImageCSSGG_SSs5NeverOTg503_s8d87ML17MLImageClassifierV10evaluation2onAA19MLClassifierMetricsVx_tKSlRz0A12MLComponents16fg5VySo7h5CSSG7B63RtzlFSSAMcfu0_33_7eec49b2e7313abe927b434220475ef8AMSSTf3nnnpk_nTf1cn_n(a1);
    v5 = swift_bridgeObjectRetain();
    specialized Set.init<A>(_:)(v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    ClassificationMetrics.init<A, B>(predicted:groundTruth:labels:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for MLClassifierMetrics.Contents(0);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t MLImageClassifier.init(delegate:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[42] = a1;
  v2[43] = a2;
  v2[44] = OUTLINED_FUNCTION_68_8();
  v2[45] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLClassifierMetrics?);
  v2[46] = OUTLINED_FUNCTION_4_36();
  v2[47] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.Model?);
  v2[48] = OUTLINED_FUNCTION_0();
  v2[49] = OUTLINED_FUNCTION_57_7();
  v2[50] = OUTLINED_FUNCTION_0();
  v2[51] = type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType();
  v2[52] = OUTLINED_FUNCTION_4_36();
  v2[53] = OUTLINED_FUNCTION_25();
  v2[54] = OUTLINED_FUNCTION_4_12();
  v2[55] = OUTLINED_FUNCTION_4_36();
  v2[56] = OUTLINED_FUNCTION_25();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  v2[57] = OUTLINED_FUNCTION_0();
  v2[58] = type metadata accessor for MLImageClassifier.PersistentParameters();
  v2[59] = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

uint64_t MLImageClassifier.init(delegate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_8_28();
  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 344) + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingParameters;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v3, v1, &demangling cache variable for type metadata for MLImageClassifier.PersistentParameters?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v5 = *(int **)(v0 + 464);
    v6 = *(_QWORD *)(v0 + 472);
    v7 = *(_QWORD *)(v0 + 448);
    v8 = *(_QWORD *)(v0 + 440);
    v9 = *(_QWORD *)(v0 + 424);
    v18 = *(_QWORD *)(v0 + 432);
    v19 = *(_QWORD *)(v0 + 416);
    v22 = *(_QWORD *)(v0 + 384);
    v20 = *(_QWORD *)(v0 + 408);
    v21 = *(_QWORD *)(v0 + 344);
    outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 456), v6, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
    OUTLINED_FUNCTION_97(v6 + v5[5], v10, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    v11 = *(_QWORD *)(v6 + v5[8]);
    v12 = *(_QWORD *)(v6 + v5[9]);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v6 + v5[6], v9, type metadata accessor for MLImageClassifier.FeatureExtractorType);
    *(_OWORD *)(v0 + 144) = 0u;
    *(_OWORD *)(v0 + 128) = 0u;
    *(_OWORD *)(v0 + 160) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *(_QWORD *)(v0 + 96) = v11;
    *(_QWORD *)(v0 + 104) = v12;
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    *(_QWORD *)(v0 + 200) = v18;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 176));
    outlined init with take of TreeRegressorModel(v8, (uint64_t)boxed_opaque_existential_0, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    outlined assign with take of Any?(v0 + 176, v0 + 112);
    _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v9, v19, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    *(_QWORD *)(v0 + 232) = v20;
    v14 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 208));
    outlined init with take of TreeRegressorModel(v19, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    outlined assign with take of Any?(v0 + 208, v0 + 144);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v9, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ModelAlgorithmType);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v7, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.ModelParameters.ValidationData);
    v15 = v21 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_model;
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v15, v22, &demangling cache variable for type metadata for MLImageClassifier.Model?);
    v16 = OUTLINED_FUNCTION_67_8();
    result = __swift_getEnumTagSinglePayload(v22, 1, v16);
    if ((_DWORD)result != 1)
    {
      outlined init with copy of MLImageClassifier.ModelParameters((__int128 *)(v0 + 96), v0 + 16);
      v17 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 480) = v17;
      *v17 = v0;
      v17[1] = MLImageClassifier.init(delegate:);
      return MLImageClassifier.init(_:parameters:)(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384), v0 + 16);
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_18();
  return OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 336), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier);
  v4 = v3 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_trainingMetrics;
  OUTLINED_FUNCTION_29_0();
  _sypSgWOcTm_0(v4, v1, &demangling cache variable for type metadata for MLClassifierMetrics?);
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 472);
    v7 = *(_QWORD *)(v0 + 392);
    v9 = *(_QWORD *)(v0 + 368);
    v8 = *(_QWORD *)(v0 + 376);
    v11 = *(_QWORD *)(v0 + 344);
    v10 = *(_QWORD *)(v0 + 352);
    v12 = *(_QWORD *)(v0 + 336);
    outlined destroy of MLImageClassifier.ModelParameters(v0 + 96);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v6, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
    outlined assign with take of MLClassifierMetrics(v8, v12 + *(int *)(v7 + 24));
    v13 = v11 + OBJC_IVAR____TtC8CreateML38ImageClassifierTrainingSessionDelegate_validationMetrics;
    OUTLINED_FUNCTION_29_0();
    _sypSgWOcTm_0(v13, v9, &demangling cache variable for type metadata for MLClassifierMetrics?);
    swift_release();
    if (__swift_getEnumTagSinglePayload(v9, 1, v10) == 1)
    {
      outlined destroy of URL?(*(_QWORD *)(v0 + 368), &demangling cache variable for type metadata for MLClassifierMetrics?);
    }
    else
    {
      v14 = *(_QWORD *)(v0 + 392);
      v15 = *(_QWORD *)(v0 + 360);
      v16 = *(_QWORD *)(v0 + 336);
      outlined init with take of TreeRegressorModel(*(_QWORD *)(v0 + 368), v15, type metadata accessor for MLClassifierMetrics);
      outlined assign with take of MLClassifierMetrics(v15, v16 + *(int *)(v14 + 28));
    }
    swift_task_dealloc();
    OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_65();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_75_11();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = outlined destroy of MLImageClassifier.ModelParameters(v0 + 96);
  OUTLINED_FUNCTION_203(v1, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.PersistentParameters);
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_58();
  OUTLINED_FUNCTION_75_11();
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_120_2();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t MLImageClassifier.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v19;

  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_49();
  v4 = v3 - v2;
  v5 = MLImageClassifier.ModelParameters.description.getter();
  v7 = v6;
  v8 = OUTLINED_FUNCTION_57_7();
  v9 = MLClassifierMetrics.description.getter();
  v11 = v10;
  _s8CreateML27MLTrainingSessionParametersVWOcTm_0(v0 + *(int *)(v8 + 28), v4, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v8) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v4, type metadata accessor for MLClassifierMetrics.Contents);
  v12 = MLClassifierMetrics.description.getter();
  v14 = v13;
  v15._countAndFlagsBits = v5;
  v15._object = v7;
  String.append(_:)(v15);
  OUTLINED_FUNCTION_70_9(0xD00000000000001ELL);
  v16._countAndFlagsBits = v9;
  v16._object = v11;
  String.append(_:)(v16);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  if (v8 <= 1)
  {
    OUTLINED_FUNCTION_70_9(0xD000000000000020);
    v17._countAndFlagsBits = v12;
    v17._object = v14;
    String.append(_:)(v17);
    String.append(_:)(v19);
    OUTLINED_FUNCTION_15_0();
  }
  OUTLINED_FUNCTION_15_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_123();
  return 0xD00000000000001CLL;
}

void MLImageClassifier.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  unint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString();
  v3._countAndFlagsBits = MLImageClassifier.debugDescription.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

uint64_t key path getter for AnnotatedFeature.feature : AnnotatedFeature<CIImage, String>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>);
  result = AnnotatedFeature.feature.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for AnnotatedFeature.feature : AnnotatedFeature<CIImage, String>(id *a1)
{
  id v1;

  v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>);
  return AnnotatedFeature.feature.setter();
}

uint64_t key path getter for AnnotatedFeature.annotation : AnnotatedFeature<CIImage, String>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>);
  result = AnnotatedFeature.annotation.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for AnnotatedFeature.annotation : AnnotatedFeature<CIImage, String>()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<CIImage, String>);
  return AnnotatedFeature.annotation.setter();
}

uint64_t partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_40_11(v1);
  return closure #1 in MLImageClassifier.init(trainingData:parameters:)(v2, v3, v4);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_40_11(v1);
  return closure #1 in MLImageClassifier.init(trainingData:parameters:)(v2, v3, v4);
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 64))
    __swift_destroy_boxed_opaque_existential_0(v0 + 40);
  if (*(_QWORD *)(v0 + 96))
    __swift_destroy_boxed_opaque_existential_0(v0 + 72);
  return swift_deallocObject();
}

void sub_21AEB1264(id *a1@<X8>)
{
  *a1 = MLImageClassifier.model.getter();
  OUTLINED_FUNCTION_22();
}

char *initializeBufferWithCopyOfBuffer for MLImageClassifier(char *a1, char **a2, int *a3)
{
  int v4;
  char *v5;
  _OWORD *v8;
  char *v9;
  char *v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  void **v17;
  void **v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  void *v24;
  id v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void **v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void *v36;
  id v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  char *v46;
  char *v47;
  char *v48;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v8 = a2 + 3;
    v9 = a2[6];
    v10 = v5;
    if (v9)
    {
      *((_QWORD *)a1 + 6) = v9;
      (**((void (***)(uint64_t, _OWORD *, char *))v9 - 1))((uint64_t)(a1 + 24), v8, v9);
    }
    else
    {
      v11 = v8[1];
      *(_OWORD *)(a1 + 24) = *v8;
      *(_OWORD *)(a1 + 40) = v11;
    }
    v12 = a1 + 56;
    v13 = a2 + 7;
    v14 = a2[10];
    if (v14)
    {
      *((_QWORD *)a1 + 10) = v14;
      (**((void (***)(_OWORD *, _OWORD *))v14 - 1))(v12, v13);
    }
    else
    {
      v15 = *(_OWORD *)(a2 + 9);
      *v12 = *v13;
      *(_OWORD *)(a1 + 72) = v15;
    }
    v16 = a3[6];
    v17 = (void **)&a1[v16];
    v18 = (void **)((char *)a2 + v16);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v24 = *v18;
      v25 = v24;
      *v17 = v24;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v17 = *v18;
      v20 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v21 = *(int *)(v20 + 20);
      v45 = (char *)v18 + v21;
      v47 = (char *)v17 + v21;
      v22 = type metadata accessor for DataFrame();
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
      v23(v47, v45, v22);
      v23((char *)v17 + *(int *)(v20 + 24), (char *)v18 + *(int *)(v20 + 24), v22);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v26 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v26 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v27 = __swift_instantiateConcreteTypeFromMangledName(v26);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v17, v18, v27);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v28 = a3[7];
    v29 = (void **)&a1[v28];
    v30 = (void **)((char *)a2 + v28);
    v31 = swift_getEnumCaseMultiPayload();
    if (v31 == 2)
    {
      v36 = *v30;
      v37 = v36;
      *v29 = v36;
    }
    else if (v31 == 1)
    {
      *v29 = *v30;
      v32 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v33 = *(int *)(v32 + 20);
      v46 = (char *)v30 + v33;
      v48 = (char *)v29 + v33;
      v34 = type metadata accessor for DataFrame();
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
      v35(v48, v46, v34);
      v35((char *)v29 + *(int *)(v32 + 24), (char *)v30 + *(int *)(v32 + 24), v34);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v38 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v38 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v39 = __swift_instantiateConcreteTypeFromMangledName(v38);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v29, v30, v39);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v40 = a3[8];
    v41 = &a1[v40];
    v42 = (uint64_t)a2 + v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>);
    else
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MLImageClassifier(uint64_t a1, int *a2)
{
  id *v4;
  int EnumCaseMultiPayload;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  id *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  if (*(_QWORD *)(a1 + 80))
    __swift_destroy_boxed_opaque_existential_0(a1 + 56);
  v4 = (id *)(a1 + a2[6]);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:

      break;
    case 1:
      v7 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v8 = (char *)v4 + *(int *)(v7 + 20);
      v9 = type metadata accessor for DataFrame();
      v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
      v10(v8, v9);
      v10((char *)v4 + *(int *)(v7 + 24), v9);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v6 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v6 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v11 = __swift_instantiateConcreteTypeFromMangledName(v6);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v4, v11);
      break;
  }
  v12 = (id *)(a1 + a2[7]);
  v13 = swift_getEnumCaseMultiPayload();
  switch(v13)
  {
    case 2:

      break;
    case 1:
      v15 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v16 = (char *)v12 + *(int *)(v15 + 20);
      v17 = type metadata accessor for DataFrame();
      v18 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
      v18(v16, v17);
      v18((char *)v12 + *(int *)(v15 + 24), v17);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v14 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v14 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v19 = __swift_instantiateConcreteTypeFromMangledName(v14);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v12, v19);
      break;
  }
  v20 = a1 + a2[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v21 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v21 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v22 = __swift_instantiateConcreteTypeFromMangledName(v21);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
}

uint64_t initializeWithCopy for MLImageClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  id v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  id *v17;
  id *v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  id v26;
  id v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  id *v31;
  id *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  id v40;
  id v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v50;
  char *v51;
  int *v52;
  int *v53;

  v6 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v7 = (_OWORD *)(a1 + 24);
  v8 = (_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = v6;
  if (v9)
  {
    *(_QWORD *)(a1 + 48) = v9;
    (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v9 - 8))(v7, v8, v9);
  }
  else
  {
    v11 = v8[1];
    *v7 = *v8;
    v7[1] = v11;
  }
  v12 = (_OWORD *)(a1 + 56);
  v13 = (_OWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 80);
  if (v14)
  {
    *(_QWORD *)(a1 + 80) = v14;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 72);
    *v12 = *v13;
    *(_OWORD *)(a1 + 72) = v15;
  }
  v16 = a3[6];
  v17 = (id *)(a1 + v16);
  v18 = (id *)(a2 + v16);
  type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v26 = *v18;
    v27 = *v18;
    *v17 = v26;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *v17 = *v18;
    v20 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v21 = *(int *)(v20 + 20);
    v50 = (char *)v17 + v21;
    v52 = a3;
    v22 = (char *)v18 + v21;
    v23 = type metadata accessor for DataFrame();
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    v25 = v22;
    a3 = v52;
    v24(v50, v25, v23);
    v24((char *)v17 + *(int *)(v20 + 24), (char *)v18 + *(int *)(v20 + 24), v23);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v28 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v28 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v29 = __swift_instantiateConcreteTypeFromMangledName(v28);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v17, v18, v29);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v30 = a3[7];
  v31 = (id *)(a1 + v30);
  v32 = (id *)(a2 + v30);
  v33 = swift_getEnumCaseMultiPayload();
  if (v33 == 2)
  {
    v40 = *v32;
    v41 = *v32;
    *v31 = v40;
  }
  else if (v33 == 1)
  {
    *v31 = *v32;
    v34 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v35 = *(int *)(v34 + 20);
    v51 = (char *)v31 + v35;
    v36 = (char *)v32 + v35;
    v53 = a3;
    v37 = type metadata accessor for DataFrame();
    v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
    v38(v51, v36, v37);
    v39 = v37;
    a3 = v53;
    v38((char *)v31 + *(int *)(v34 + 24), (char *)v32 + *(int *)(v34 + 24), v39);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v42 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v42 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v43 = __swift_instantiateConcreteTypeFromMangledName(v42);
    (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v31, v32, v43);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  v44 = a3[8];
  v45 = a1 + v44;
  v46 = a2 + v44;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v47 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v47 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v48 = __swift_instantiateConcreteTypeFromMangledName(v47);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v45, v46, v48);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for MLImageClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  id *v14;
  id *v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  id v23;
  id v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  id *v28;
  id *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  id v37;
  id v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char *v47;
  char *v48;
  int *v49;
  int *v50;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v9)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 48) = v9;
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 24, a2 + 24);
    goto LABEL_8;
  }
  v10 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v10;
LABEL_8:
  v11 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v11)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_0(a1 + 56);
  }
  else if (v11)
  {
    *(_QWORD *)(a1 + 80) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 56, a2 + 56);
    goto LABEL_15;
  }
  v12 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v12;
LABEL_15:
  if (a1 != a2)
  {
    v13 = a3[6];
    v14 = (id *)(a1 + v13);
    v15 = (id *)(a2 + v13);
    outlined destroy of MLHandPoseClassifier.ModelParameters(a1 + v13, type metadata accessor for MLClassifierMetrics.Contents);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v23 = *v15;
      v24 = *v15;
      *v14 = v23;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v14 = *v15;
      v17 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v18 = *(int *)(v17 + 20);
      v47 = (char *)v14 + v18;
      v49 = a3;
      v19 = (char *)v15 + v18;
      v20 = type metadata accessor for DataFrame();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      v22 = v19;
      a3 = v49;
      v21(v47, v22, v20);
      v21((char *)v14 + *(int *)(v17 + 24), (char *)v15 + *(int *)(v17 + 24), v20);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v25 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v25 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v26 = __swift_instantiateConcreteTypeFromMangledName(v25);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v14, v15, v26);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v27 = a3[7];
    v28 = (id *)(a1 + v27);
    v29 = (id *)(a2 + v27);
    outlined destroy of MLHandPoseClassifier.ModelParameters(a1 + v27, type metadata accessor for MLClassifierMetrics.Contents);
    v30 = swift_getEnumCaseMultiPayload();
    if (v30 == 2)
    {
      v37 = *v29;
      v38 = *v29;
      *v28 = v37;
    }
    else if (v30 == 1)
    {
      *v28 = *v29;
      v31 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v32 = *(int *)(v31 + 20);
      v48 = (char *)v28 + v32;
      v33 = (char *)v29 + v32;
      v50 = a3;
      v34 = type metadata accessor for DataFrame();
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
      v35(v48, v33, v34);
      v36 = v34;
      a3 = v50;
      v35((char *)v28 + *(int *)(v31 + 24), (char *)v29 + *(int *)(v31 + 24), v36);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v39 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v39 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v40 = __swift_instantiateConcreteTypeFromMangledName(v39);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v28, v29, v40);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v41 = a3[8];
    v42 = a1 + v41;
    v43 = a2 + v41;
    outlined destroy of URL?(a1 + v41, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v44 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
    else
      v44 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
    v45 = __swift_instantiateConcreteTypeFromMangledName(v44);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *initializeWithTake for MLImageClassifier(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  int *v37;
  int *v38;

  *a1 = *a2;
  memcpy(a1 + 1, a2 + 1, 0x50uLL);
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for MLClassifierMetrics.Contents(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)v7 = *(_QWORD *)v8;
    v13 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v14 = *(int *)(v13 + 20);
    v15 = &v7[v14];
    v16 = &v8[v14];
    v17 = type metadata accessor for DataFrame();
    v37 = a3;
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v15, v16, v17);
    v18(&v7[*(int *)(v13 + 24)], &v8[*(int *)(v13 + 24)], v17);
    a3 = v37;
LABEL_8:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  if (!EnumCaseMultiPayload)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v11 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v11 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v12 = __swift_instantiateConcreteTypeFromMangledName(v11);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
    swift_storeEnumTagMultiPayload();
    goto LABEL_8;
  }
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_10:
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = swift_getEnumCaseMultiPayload();
  if (v22 == 1)
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v25 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
    v26 = *(int *)(v25 + 20);
    v27 = &v20[v26];
    v28 = &v21[v26];
    v29 = type metadata accessor for DataFrame();
    v38 = a3;
    v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32);
    v30(v27, v28, v29);
    v30(&v20[*(int *)(v25 + 24)], &v21[*(int *)(v25 + 24)], v29);
    a3 = v38;
LABEL_17:
    swift_storeEnumTagMultiPayload();
    goto LABEL_19;
  }
  if (!v22)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
    if (swift_getEnumCaseMultiPayload() == 1)
      v23 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
    else
      v23 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
    v24 = __swift_instantiateConcreteTypeFromMangledName(v23);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v20, v21, v24);
    swift_storeEnumTagMultiPayload();
    goto LABEL_17;
  }
  memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_19:
  v31 = a3[8];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  if (swift_getEnumCaseMultiPayload() == 1)
    v34 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
  else
    v34 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
  v35 = __swift_instantiateConcreteTypeFromMangledName(v34);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v32, v33, v35);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for MLImageClassifier(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int *v40;
  int *v41;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  v7 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v7;
  if (*(_QWORD *)(a1 + 80))
    __swift_destroy_boxed_opaque_existential_0(a1 + 56);
  v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v8;
  if (a1 != a2)
  {
    v9 = a3[6];
    v10 = (char *)(a1 + v9);
    v11 = (char *)(a2 + v9);
    outlined destroy of MLHandPoseClassifier.ModelParameters(a1 + v9, type metadata accessor for MLClassifierMetrics.Contents);
    v12 = type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v16 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v17 = *(int *)(v16 + 20);
      v18 = &v10[v17];
      v19 = &v11[v17];
      v20 = type metadata accessor for DataFrame();
      v40 = a3;
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
      v21(v18, v19, v20);
      v21(&v10[*(int *)(v16 + 24)], &v11[*(int *)(v16 + 24)], v20);
      a3 = v40;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_15:
        v22 = a3[7];
        v23 = (char *)(a1 + v22);
        v24 = (char *)(a2 + v22);
        outlined destroy of MLHandPoseClassifier.ModelParameters(a1 + v22, type metadata accessor for MLClassifierMetrics.Contents);
        v25 = swift_getEnumCaseMultiPayload();
        if (v25 == 1)
        {
          *(_QWORD *)v23 = *(_QWORD *)v24;
          v28 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
          v29 = *(int *)(v28 + 20);
          v30 = &v23[v29];
          v31 = &v24[v29];
          v32 = type metadata accessor for DataFrame();
          v41 = a3;
          v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32);
          v33(v30, v31, v32);
          v33(&v23[*(int *)(v28 + 24)], &v24[*(int *)(v28 + 24)], v32);
          a3 = v41;
        }
        else
        {
          if (v25)
          {
            memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
            goto LABEL_24;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
          if (swift_getEnumCaseMultiPayload() == 1)
            v26 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
          else
            v26 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
          v27 = __swift_instantiateConcreteTypeFromMangledName(v26);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v23, v24, v27);
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
LABEL_24:
        v34 = a3[8];
        v35 = a1 + v34;
        v36 = a2 + v34;
        outlined destroy of URL?(a1 + v34, &demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
        if (swift_getEnumCaseMultiPayload() == 1)
          v37 = &demangling cache variable for type metadata for FullyConnectedNetworkClassifierModel<Float, String>;
        else
          v37 = &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>;
        v38 = __swift_instantiateConcreteTypeFromMangledName(v37);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v35, v36, v38);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v14 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v14 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v15 = __swift_instantiateConcreteTypeFromMangledName(v14);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v10, v11, v15);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_15;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MLImageClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEB26C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_68_8();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == (_DWORD)a2)
    {
      v9 = v8;
      v10 = *(int *)(a3 + 24);
    }
    else
    {
      v9 = OUTLINED_FUNCTION_67_8();
      v10 = *(int *)(a3 + 32);
    }
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + v10, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for MLImageClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21AEB2760(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    OUTLINED_FUNCTION_125();
  }
  else
  {
    v8 = OUTLINED_FUNCTION_68_8();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 24);
    }
    else
    {
      v9 = OUTLINED_FUNCTION_67_8();
      v10 = *(int *)(a4 + 32);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)a1 + v10, a2, a2, v9);
  }
}

void type metadata completion function for MLImageClassifier()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for MLClassifierMetrics.Contents(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_21AEB2880()
{
  int EnumCaseMultiPayload;
  unsigned int v1;
  uint64_t v2;

  OUTLINED_FUNCTION_4_12();
  swift_bridgeObjectRelease();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
    goto LABEL_6;
  if (EnumCaseMultiPayload != 1)
    return swift_deallocObject();
  type metadata accessor for MLImageClassifier.DataSource();
  v1 = swift_getEnumCaseMultiPayload();
  if (v1 == 2)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return swift_deallocObject();
  }
  if (v1 <= 1)
  {
    v2 = type metadata accessor for URL();
    OUTLINED_FUNCTION_11_1(v2);
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:classNames:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_4_12();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_40_11(v1);
  return closure #1 in MLImageClassifier.init(trainingData:parameters:classNames:)(v2, v3, v4);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_90(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t outlined destroy of MLImageClassifier.FeatureExtractor(uint64_t a1)
{
  destroy for MLImageClassifier.FeatureExtractor();
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_37()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_1_32(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_2_37()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_3_30()
{
  uint64_t v0;

  return outlined destroy of MLImageClassifier.ModelParameters(*(_QWORD *)(v0 + 200) + 8);
}

uint64_t OUTLINED_FUNCTION_4_36()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_5_27()
{
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_11_27(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of MLHandPoseClassifier.ModelParameters(a1, v1);
}

uint64_t OUTLINED_FUNCTION_13_31()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_24_21()
{
  uint64_t v0;

  return outlined destroy of MLImageClassifier.ModelParameters(*(_QWORD *)(v0 + 200) + 8);
}

uint64_t OUTLINED_FUNCTION_28_18()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_32_12()
{
  uint64_t v0;

  return outlined destroy of MLImageClassifier.ModelParameters(*(_QWORD *)(v0 + 216));
}

uint64_t OUTLINED_FUNCTION_34_17()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_36_14()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_37_11()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 128) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_38_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MLImageClassifier.init(trainingData:parameters:classNames:)(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_39_11(uint64_t a1)
{
  return MLImageClassifier.Model.exportAsCompiledMLModel(featureExtractorType:)(a1);
}

uint64_t OUTLINED_FUNCTION_40_11(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_43_12()
{
  uint64_t v0;

  return outlined destroy of MLImageClassifier.ModelParameters(*(_QWORD *)(v0 + 216));
}

void OUTLINED_FUNCTION_44_15(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of MLHandPoseClassifier.ModelParameters(v2, a2);
}

uint64_t OUTLINED_FUNCTION_45_10()
{
  uint64_t v0;

  return outlined destroy of MLImageClassifier.FeatureExtractor(v0);
}

uint64_t OUTLINED_FUNCTION_48_9()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_53_13(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 96);
}

uint64_t OUTLINED_FUNCTION_54_8()
{
  uint64_t v0;

  return specialized Sequence.flatMap<A>(_:)(*(_QWORD *)(v0 + 104));
}

uint64_t OUTLINED_FUNCTION_57_7()
{
  return type metadata accessor for MLImageClassifier();
}

uint64_t OUTLINED_FUNCTION_62_12@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

void OUTLINED_FUNCTION_63_10()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_64_8()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_66_9()
{
  __int128 *v0;
  uint64_t v1;

  return outlined init with copy of MLImageClassifier.ModelParameters(v0, v1);
}

uint64_t OUTLINED_FUNCTION_67_8()
{
  return type metadata accessor for MLImageClassifier.Model();
}

uint64_t OUTLINED_FUNCTION_68_8()
{
  return type metadata accessor for MLClassifierMetrics(0);
}

void OUTLINED_FUNCTION_70_9(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = a1;
  *(_QWORD *)(v2 - 104) = (v1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_72_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_73_7()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_74_8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 200) + *(int *)(*(_QWORD *)(v0 + 408) + 32);
}

uint64_t OUTLINED_FUNCTION_75_11()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_76_5(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with take of TreeRegressorModel(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_77_6()
{
  uint64_t v0;

  return outlined destroy of MLImageClassifier.FeatureExtractor(v0);
}

uint64_t OUTLINED_FUNCTION_82_6()
{
  return type metadata accessor for MLImageClassifier();
}

uint64_t OUTLINED_FUNCTION_83_8()
{
  return swift_allocObject();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary.subscript.setter(a1, a2, a3, &demangling cache variable for type metadata for MetricsKey?, (uint64_t (*)(_QWORD))MEMORY[0x24BDC5810], (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), &demangling cache variable for type metadata for _NativeDictionary<String, MetricsKey>);
}

{
  return specialized Dictionary.subscript.setter(a1, a2, a3, &demangling cache variable for type metadata for JSONType?, (uint64_t (*)(_QWORD))MEMORY[0x24BDF6008], (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), &demangling cache variable for type metadata for _NativeDictionary<String, JSONType>);
}

{
  return specialized Dictionary.subscript.setter(a1, a2, a3, &demangling cache variable for type metadata for CSVType?, (uint64_t (*)(_QWORD))MEMORY[0x24BDF5FC8], (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), &demangling cache variable for type metadata for _NativeDictionary<String, CSVType>);
}

{
  return specialized Dictionary.subscript.setter(a1, a2, a3, &demangling cache variable for type metadata for MLProgram.Block?, (uint64_t (*)(_QWORD))MEMORY[0x24BE62F58], (void (*)(uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), &demangling cache variable for type metadata for _NativeDictionary<String, MLProgram.Block>);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD), void (*a6)(uint64_t), uint64_t *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v20;
  void (*v21)(uint64_t);

  v20 = a7;
  v21 = a6;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_49();
  v14 = v13 - v12;
  v15 = a5(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v20 - v17;
  if (__swift_getEnumTagSinglePayload(a1, 1, v15) == 1)
  {
    OUTLINED_FUNCTION_8_29(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v20, a5, v14);
    OUTLINED_FUNCTION_123();
    return OUTLINED_FUNCTION_8_29(v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v18, a1, v15);
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v18, a2, a3, v21);
    return OUTLINED_FUNCTION_123();
  }
}

void specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v5[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v5);
    specialized Dictionary._Variant.setValue(_:forKey:)(v5, a2, a3);
    OUTLINED_FUNCTION_123();
  }
  else
  {
    outlined destroy of Any?(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v5);
    OUTLINED_FUNCTION_123();
    outlined destroy of Any?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
  }
  OUTLINED_FUNCTION_13_12();
}

void specialized Dictionary.subscript.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD v3[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v3);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    v1 = type metadata accessor for CodingUserInfoKey();
    OUTLINED_FUNCTION_11_1(v1);
  }
  else
  {
    OUTLINED_FUNCTION_8_29(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(v3);
    v2 = type metadata accessor for CodingUserInfoKey();
    OUTLINED_FUNCTION_11_1(v2);
    OUTLINED_FUNCTION_8_29((uint64_t)v3);
  }
  OUTLINED_FUNCTION_13_12();
}

void specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  _OWORD v3[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v3);
    specialized Dictionary._Variant.setValue(_:forKey:)(v3, a2);
  }
  else
  {
    OUTLINED_FUNCTION_8_29(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v3);
    OUTLINED_FUNCTION_8_29((uint64_t)v3);
  }
  OUTLINED_FUNCTION_13_12();
}

{
  _OWORD v3[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v3);
    specialized Dictionary._Variant.setValue(_:forKey:)(v3, a2);
    outlined destroy of AnyHashable(a2);
  }
  else
  {
    OUTLINED_FUNCTION_8_29(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v3);
    outlined destroy of AnyHashable(a2);
    OUTLINED_FUNCTION_8_29((uint64_t)v3);
  }
  OUTLINED_FUNCTION_13_12();
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  _QWORD v53[2];
  int64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  _OWORD v69[2];
  _OWORD v70[2];

  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: MetricsKey, value: Sendable));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_64();
  v64 = v3;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MetricsKey, Sendable));
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v62 = v5;
  v6 = type metadata accessor for MetricsKey();
  v61 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v59 = (uint64_t)v53 - v10;
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: MetricsKey, value: Double));
  OUTLINED_FUNCTION_3_0();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v57 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v56 = (char *)v53 - v14;
  v66 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MetricsKey, Sendable>);
    v15 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v15 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v55 = v66 + 64;
  OUTLINED_FUNCTION_17_17();
  v18 = v17 & v16;
  v53[1] = v19;
  v54 = (unint64_t)(63 - v19) >> 6;
  v20 = v15 + 8;
  swift_bridgeObjectRetain();
  swift_retain();
  v67 = 0;
  v60 = v9;
  v21 = (uint64_t)v57;
  if (!v18)
    goto LABEL_6;
LABEL_5:
  v68 = (v18 - 1) & v18;
  for (i = __clz(__rbit64(v18)) | (v67 << 6); ; i = __clz(__rbit64(v24)) + (v25 << 6))
  {
    v31 = v66;
    v32 = *(_QWORD *)(v61 + 72);
    v33 = (uint64_t)v56;
    (*(void (**)(char *, unint64_t, uint64_t))(v61 + 16))(v56, *(_QWORD *)(v66 + 48) + v32 * i, v6);
    v34 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * i);
    v35 = v58;
    *(_QWORD *)(v33 + *(int *)(v58 + 48)) = v34;
    outlined init with take of (key: MetricsKey, value: Double)(v33, v21);
    v36 = *(int *)(v35 + 48);
    v37 = v64;
    v38 = (_OWORD *)(v64 + *(int *)(v65 + 48));
    OUTLINED_FUNCTION_16_23(v64, v21);
    *(_QWORD *)&v70[0] = *(_QWORD *)(v21 + v36);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
    swift_dynamicCast();
    v39 = v62;
    v40 = (_OWORD *)(v62 + *(int *)(v63 + 48));
    OUTLINED_FUNCTION_16_23(v62, v37);
    outlined init with take of Any(v38, v40);
    v41 = v59;
    OUTLINED_FUNCTION_16_23(v59, v39);
    outlined init with take of Any(v40, v70);
    v42 = (uint64_t)v60;
    OUTLINED_FUNCTION_16_23((uint64_t)v60, v41);
    outlined init with take of Any(v70, v69);
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC5810], MEMORY[0x24BDC5820]);
    dispatch thunk of Hashable._rawHashValue(seed:)();
    OUTLINED_FUNCTION_30_16();
    v46 = (v45 << v43) & ~v20[v44];
    if (!v46)
    {
      OUTLINED_FUNCTION_32_13();
      while (++v49 != v50 || (v48 & 1) == 0)
      {
        v51 = v49 == v50;
        if (v49 == v50)
          v49 = 0;
        v48 |= v51;
        v52 = v20[v49];
        if (v52 != -1)
        {
          v47 = __clz(__rbit64(~v52)) + (v49 << 6);
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v47 = __clz(__rbit64(v46)) | v43 & 0x7FFFFFFFFFFFFFC0;
LABEL_35:
    *(_QWORD *)((char *)v20 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
    OUTLINED_FUNCTION_16_23(v15[6] + v47 * v32, v42);
    outlined init with take of Any(v69, (_OWORD *)(v15[7] + 32 * v47));
    ++v15[2];
    v18 = v68;
    if (v68)
      goto LABEL_5;
LABEL_6:
    v23 = v67 + 1;
    if (__OFADD__(v67, 1))
      goto LABEL_39;
    if (v23 >= v54)
      goto LABEL_37;
    v24 = *(_QWORD *)(v55 + 8 * v23);
    v25 = v67 + 1;
    if (!v24)
    {
      OUTLINED_FUNCTION_14_21();
      if (v26 == v27)
        goto LABEL_37;
      OUTLINED_FUNCTION_13_32();
      if (!v24)
      {
        OUTLINED_FUNCTION_14_21();
        if (v26 == v27)
          goto LABEL_37;
        OUTLINED_FUNCTION_13_32();
        if (!v24)
        {
          OUTLINED_FUNCTION_14_21();
          if (v26 == v27)
            goto LABEL_37;
          OUTLINED_FUNCTION_13_32();
          if (!v24)
            break;
        }
      }
    }
LABEL_25:
    v67 = v25;
    v68 = (v24 - 1) & v24;
  }
  v29 = v28 + 4;
  if (v29 >= v54)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : [Int]].Iterator._Variant();
    return;
  }
  v24 = *(_QWORD *)(v55 + 8 * v29);
  if (v24)
  {
    v25 = v29;
    goto LABEL_25;
  }
  while (!__OFADD__(v29, 1))
  {
    OUTLINED_FUNCTION_14_21();
    if (v26 == v27)
      goto LABEL_37;
    OUTLINED_FUNCTION_13_32();
    v29 = v30 + 1;
    if (v24)
      goto LABEL_25;
  }
LABEL_40:
  __break(1u);
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v18;
  _OWORD v19[4];
  __int128 v20;
  _OWORD v21[3];

  if (a1[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  OUTLINED_FUNCTION_17_17();
  v5 = v4 & v3;
  v18 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v5)
  {
    v7 = __clz(__rbit64(v5));
    goto LABEL_25;
  }
  if (v18 > 1)
  {
    v8 = a1[9];
    v9 = 1;
    if (v8)
      goto LABEL_24;
    OUTLINED_FUNCTION_28_19();
    if (v10 == v11)
      goto LABEL_26;
    OUTLINED_FUNCTION_27_24();
    if (v8)
      goto LABEL_24;
    OUTLINED_FUNCTION_28_19();
    if (v10 == v11)
      goto LABEL_26;
    OUTLINED_FUNCTION_27_24();
    if (v8)
      goto LABEL_24;
    OUTLINED_FUNCTION_28_19();
    if (v10 == v11)
      goto LABEL_26;
    OUTLINED_FUNCTION_27_24();
    if (v8)
    {
LABEL_24:
      v7 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_25:
      v15 = *(_QWORD *)(a1[7] + 8 * v7);
      LOBYTE(v21[0]) = *(_BYTE *)(a1[6] + v7);
      *(_QWORD *)&v20 = v15;
      swift_dynamicCast();
      v16 = LOBYTE(v21[0]);
      outlined init with take of Any((_OWORD *)((char *)v21 + 8), v19);
      outlined init with take of Any(v19, v21);
      outlined init with take of Any(v21, &v20);
      Hasher.init(_seed:)();
      __asm { BR              X8 }
    }
    v13 = v12 + 4;
    if (v13 < v18)
    {
      v8 = a1[v13 + 8];
      if (v8)
      {
        v9 = v13;
        goto LABEL_24;
      }
      while (1)
      {
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          JUMPOUT(0x21AEB3F28);
        }
        OUTLINED_FUNCTION_28_19();
        if (v10 == v11)
          break;
        OUTLINED_FUNCTION_27_24();
        v13 = v14 + 1;
        if (v8)
          goto LABEL_24;
      }
    }
  }
LABEL_26:
  swift_release();
  outlined consume of [String : [Int]].Iterator._Variant();
  return v2;
}

double MLProgress.elapsedTime.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void MLProgress.elapsedTime.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*MLProgress.elapsedTime.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLProgress.phase.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *MLProgress.phase.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

uint64_t (*MLProgress.phase.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLProgress.itemCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t MLProgress.itemCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*MLProgress.itemCount.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLProgress.totalItemCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t MLProgress.totalItemCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*MLProgress.totalItemCount.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLProgress.metrics.getter()
{
  return swift_bridgeObjectRetain();
}

void MLProgress.metrics.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLProgress.metrics.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLProgress.init(phase:)(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;

  v3 = *a1;
  lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
  v4 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_QWORD *)(a2 + 40) = v4;
  OUTLINED_FUNCTION_22();
}

void MLProgress.init(progress:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unsigned int v47;
  id v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  unsigned __int8 v110;

  v110 = 1;
  lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
  v4 = Dictionary.init(dictionaryLiteral:)();
  v5 = OUTLINED_FUNCTION_7_27();
  type metadata accessor for NSProgressUserInfoKey(0);
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type NSProgressUserInfoKey and conformance NSProgressUserInfoKey, (uint64_t (*)(uint64_t))type metadata accessor for NSProgressUserInfoKey, (uint64_t)&protocol conformance descriptor for NSProgressUserInfoKey);
  OUTLINED_FUNCTION_4_37();
  OUTLINED_FUNCTION_19_23();
  if (one-time initialization token for elapsedTimeKey != -1)
    swift_once();
  v6 = (id)static MLProgress.elapsedTimeKey;
  OUTLINED_FUNCTION_5_28((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v50, v54, v59, v63, v67, v71, v75, v79, v83, v87, v91,
    v96,
    v100,
    v104,
    v108);

  OUTLINED_FUNCTION_30();
  if (!v109)
  {

    outlined destroy of Any?((uint64_t)&v108, &demangling cache variable for type metadata for Any?);
LABEL_18:
    swift_bridgeObjectRelease();
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return;
  }
  if ((OUTLINED_FUNCTION_1_33() & 1) == 0)
    goto LABEL_17;
  v14 = OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_4_37();
  OUTLINED_FUNCTION_19_23();
  if (one-time initialization token for phaseKey != -1)
    swift_once();
  v15 = (id)static MLProgress.phaseKey;
  OUTLINED_FUNCTION_5_28((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, v51, v55, v60, v64, v92, v72, v76, v80, v84, v88, v92,
    v97,
    v101,
    v105,
    v108);

  OUTLINED_FUNCTION_30();
  if ((OUTLINED_FUNCTION_1_33() & 1) == 0)
    goto LABEL_17;
  v23 = OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_4_37();
  OUTLINED_FUNCTION_19_23();
  if (one-time initialization token for itemCountKey != -1)
    swift_once();
  v24 = (id)static MLProgress.itemCountKey;
  OUTLINED_FUNCTION_5_28((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, v52, v56, v61, v93, v68, v73, v77, v81, v85, v89, v93,
    v98,
    v102,
    v106,
    v108);

  OUTLINED_FUNCTION_30();
  if ((OUTLINED_FUNCTION_1_33() & 1) == 0)
  {
LABEL_17:

    goto LABEL_18;
  }
  v32 = OUTLINED_FUNCTION_7_27();
  OUTLINED_FUNCTION_4_37();
  OUTLINED_FUNCTION_19_23();
  if (one-time initialization token for totalItemCountKey != -1)
    swift_once();
  v33 = (id)static MLProgress.totalItemCountKey;
  OUTLINED_FUNCTION_5_28((uint64_t)v33, v34, v35, v36, v37, v38, v39, v40, v53, v57, v94, v65, v69, v74, v78, v82, v86, v90, v94,
    v99,
    v103,
    v107,
    v108);

  OUTLINED_FUNCTION_30();
  v41 = swift_dynamicCast();
  v42 = v95;
  if (!v41)
    v42 = 0;
  v58 = v42;
  v43 = MEMORY[0x24BEE13C8];
  v110 = v41 ^ 1;
  v44 = 11;
  v45 = &byte_24DE1E088;
  do
  {
    v47 = *v45++;
    v46 = v47;
    if (v47 != 6 || type metadata accessor for URL() == v43)
    {
      v48 = OUTLINED_FUNCTION_7_27();
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_19_23();
      __asm { BR              X8 }
    }
    --v44;
  }
  while (v44);
  swift_bridgeObjectRelease();

  v49 = v110;
  *(_QWORD *)a2 = v70;
  *(_QWORD *)(a2 + 8) = v66;
  *(_QWORD *)(a2 + 16) = v62;
  *(_QWORD *)(a2 + 24) = v58;
  *(_QWORD *)(a2 + 32) = v49;
  *(_QWORD *)(a2 + 40) = v4;
}

void *static MLProgress.Metric.allCases.getter()
{
  return &outlined read-only object #0 of static MLProgress.Metric.allCases.getter;
}

CreateML::MLProgress::Metric_optional __swiftcall MLProgress.Metric.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  CreateML::MLProgress::Metric_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MLProgress.Metric.init(rawValue:), v3);
  result.value = OUTLINED_FUNCTION_123();
  v7 = 11;
  if (v5 < 0xB)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t MLProgress.Metric.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21AEB4988 + 4 * byte_21AFEBB50[*v0]))(1936945004, 0xE400000000000000);
}

uint64_t sub_21AEB4988()
{
  return 0x4C746E65746E6F63;
}

uint64_t sub_21AEB49A8()
{
  return 0x736F4C656C797473;
}

uint64_t sub_21AEB49C4()
{
  return 0x7963617275636361;
}

uint64_t sub_21AEB49DC()
{
  return 0x69746164696C6176;
}

unint64_t sub_21AEB4A00()
{
  return 0xD000000000000012;
}

uint64_t sub_21AEB4A84()
{
  return 0x456D756D6978616DLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance MLProgress.Metric(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

CreateML::MLProgress::Metric_optional protocol witness for RawRepresentable.init(rawValue:) in conformance MLProgress.Metric(Swift::String *a1)
{
  return MLProgress.Metric.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MLProgress.Metric(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = MLProgress.Metric.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for Decodable.init(from:) in conformance MLProgress.Metric()
{
  lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLProgress.Metric()
{
  lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
  return RawRepresentable<>.encode(to:)();
}

CreateML::MLProgress::CodingKeys_optional __swiftcall MLProgress.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  BOOL v1;
  void *object;
  uint64_t countAndFlagsBits;
  BOOL v5;
  BOOL v6;
  char v8;

  v1 = stringValue._countAndFlagsBits == 0x5464657370616C65 && stringValue._object == (void *)0xEB00000000656D69;
  if (v1
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (OUTLINED_FUNCTION_48_1() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v5 = countAndFlagsBits == 0x6573616870 && object == (void *)0xE500000000000000;
    if (v5 || (OUTLINED_FUNCTION_26_21(), (OUTLINED_FUNCTION_48_1() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      return (CreateML::MLProgress::CodingKeys_optional)1;
    }
    else
    {
      v6 = countAndFlagsBits == 0x6F72506573616870 && object == (void *)0xED00007373657267;
      if (v6 || (OUTLINED_FUNCTION_48_1() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return (CreateML::MLProgress::CodingKeys_optional)2;
      }
      else if (countAndFlagsBits == 0x7363697274656DLL && object == (void *)0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        return (CreateML::MLProgress::CodingKeys_optional)3;
      }
      else
      {
        v8 = OUTLINED_FUNCTION_48_1();
        OUTLINED_FUNCTION_123();
        if ((v8 & 1) != 0)
          return (CreateML::MLProgress::CodingKeys_optional)3;
        else
          return (CreateML::MLProgress::CodingKeys_optional)4;
      }
    }
  }
}

uint64_t MLProgress.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21AEB4D60 + 4 * byte_21AFEBB5B[a1]))(0x5464657370616C65, 0xEB00000000656D69);
}

uint64_t sub_21AEB4D60()
{
  return 0x6573616870;
}

uint64_t sub_21AEB4D74()
{
  return 0x6F72506573616870;
}

uint64_t sub_21AEB4D98()
{
  return 0x7363697274656DLL;
}

void protocol witness for Hashable.hashValue.getter in conformance MLProgress.Metric()
{
  specialized RawRepresentable<>.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MLProgress.Metric(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance MLProgress.Metric()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance MLProgress.Metric(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static MLProgress.Metric.allCases.getter;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MLProgress.CodingKeys()
{
  unsigned __int8 *v0;

  return MLProgress.CodingKeys.stringValue.getter(*v0);
}

CreateML::MLProgress::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance MLProgress.CodingKeys@<W0>(uint64_t a1@<X0>, CreateML::MLProgress::CodingKeys_optional *a2@<X8>)
{
  CreateML::MLProgress::CodingKeys_optional result;

  result.value = MLProgress.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance MLProgress.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLProgress.CodingKeys()
{
  lazy protocol witness table accessor for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLProgress.CodingKeys()
{
  lazy protocol witness table accessor for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void MLProgress.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MLProgress.CodingKeys>);
  v5 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_49();
  v8 = v7 - v6;
  lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
  Dictionary.init(dictionaryLiteral:)();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
    OUTLINED_FUNCTION_33_16();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : Double]);
    lazy protocol witness table accessor for type [MLProgress.Metric : Double] and conformance <> [A : B](&lazy protocol witness table cache variable for type [MLProgress.Metric : Double] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric, MEMORY[0x24BEE1400], MEMORY[0x24BEE04E0]);
    OUTLINED_FUNCTION_33_16();
    v11 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v13);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v10;
    *(_BYTE *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 1;
    *(_QWORD *)(a2 + 40) = v11;
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_117_0();
}

void MLProgress.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MLProgress.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v6 = *(_QWORD *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    OUTLINED_FUNCTION_24_22(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  }
  else
  {
    lazy protocol witness table accessor for type MLPhase and conformance MLPhase();
    OUTLINED_FUNCTION_32_11();
    specialized Dictionary.compactMapValues<A>(_:)(v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MLProgress.Metric : Double]);
    lazy protocol witness table accessor for type [MLProgress.Metric : Double] and conformance <> [A : B](&lazy protocol witness table cache variable for type [MLProgress.Metric : Double] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric, MEMORY[0x24BEE13D8], MEMORY[0x24BEE04C0]);
    OUTLINED_FUNCTION_32_11();
    OUTLINED_FUNCTION_24_22(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_117_0();
}

void protocol witness for Decodable.init(from:) in conformance MLProgress(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MLProgress.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance MLProgress(_QWORD *a1)
{
  MLProgress.encode(to:)(a1);
}

uint64_t one-time initialization function for elapsedTimeKey()
{
  uint64_t result;

  result = MEMORY[0x22075A8AC](0x5F64657370616C65, 0xEC000000656D6974);
  static MLProgress.elapsedTimeKey = result;
  return result;
}

id static MLProgress.elapsedTimeKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for elapsedTimeKey, (id *)&static MLProgress.elapsedTimeKey);
}

uint64_t one-time initialization function for phaseKey()
{
  uint64_t v0;
  uint64_t result;

  v0 = OUTLINED_FUNCTION_26_21();
  result = MEMORY[0x22075A8AC](v0);
  static MLProgress.phaseKey = result;
  return result;
}

id static MLProgress.phaseKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for phaseKey, (id *)&static MLProgress.phaseKey);
}

uint64_t one-time initialization function for itemCountKey()
{
  uint64_t result;

  result = MEMORY[0x22075A8AC](0x756F635F6D657469, 0xEA0000000000746ELL);
  static MLProgress.itemCountKey = result;
  return result;
}

id static MLProgress.itemCountKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for itemCountKey, (id *)&static MLProgress.itemCountKey);
}

void one-time initialization function for totalItemCountKey()
{
  OUTLINED_FUNCTION_18_19();
}

uint64_t sub_21AEB5368(uint64_t result)
{
  static MLProgress.totalItemCountKey = result;
  return result;
}

id static MLProgress.totalItemCountKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for totalItemCountKey, (id *)&static MLProgress.totalItemCountKey);
}

uint64_t one-time initialization function for lossKey()
{
  uint64_t result;

  result = MEMORY[0x22075A8AC](1936945004, 0xE400000000000000);
  static MLProgress.lossKey = result;
  return result;
}

id static MLProgress.lossKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for lossKey, (id *)&static MLProgress.lossKey);
}

uint64_t one-time initialization function for contentLossKey()
{
  uint64_t result;

  result = MEMORY[0x22075A8AC](0x5F746E65746E6F63, 0xEC00000073736F6CLL);
  static MLProgress.contentLossKey = result;
  return result;
}

id static MLProgress.contentLossKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for contentLossKey, (id *)&static MLProgress.contentLossKey);
}

uint64_t one-time initialization function for styleLossKey()
{
  uint64_t result;

  result = MEMORY[0x22075A8AC](0x6F6C5F656C797473, 0xEA00000000007373);
  static MLProgress.styleLossKey = result;
  return result;
}

id static MLProgress.styleLossKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for styleLossKey, (id *)&static MLProgress.styleLossKey);
}

uint64_t one-time initialization function for accuracyKey()
{
  uint64_t result;

  result = MEMORY[0x22075A8AC](0x7963617275636361, 0xE800000000000000);
  static MLProgress.accuracyKey = result;
  return result;
}

id static MLProgress.accuracyKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for accuracyKey, (id *)&static MLProgress.accuracyKey);
}

uint64_t one-time initialization function for validationLossKey()
{
  uint64_t v0;
  unsigned __int16 v1;
  uint64_t result;

  v0 = OUTLINED_FUNCTION_21_20();
  result = MEMORY[0x22075A8AC](v0, v1 | 0xEF73736F6C5F0000);
  static MLProgress.validationLossKey = result;
  return result;
}

id static MLProgress.validationLossKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for validationLossKey, (id *)&static MLProgress.validationLossKey);
}

uint64_t one-time initialization function for validationAccuracyKey()
{
  uint64_t result;

  result = MEMORY[0x22075A8AC](0xD000000000000013, 0x800000021AFF4C70);
  static MLProgress.validationAccuracyKey = result;
  return result;
}

id static MLProgress.validationAccuracyKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for validationAccuracyKey, (id *)&static MLProgress.validationAccuracyKey);
}

uint64_t one-time initialization function for stylizedImageKey()
{
  uint64_t result;

  result = MEMORY[0x22075A8AC](0x64657A696C797473, 0xEE006567616D695FLL);
  static MLProgress.stylizedImageKey = result;
  return result;
}

id static MLProgress.stylizedImageKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for stylizedImageKey, (id *)&static MLProgress.stylizedImageKey);
}

uint64_t one-time initialization function for rootMeanSquaredErrorKey()
{
  uint64_t result;

  result = MEMORY[0x22075A8AC](1702063474, 0xE400000000000000);
  static MLProgress.rootMeanSquaredErrorKey = result;
  return result;
}

id static MLProgress.rootMeanSquaredErrorKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for rootMeanSquaredErrorKey, (id *)&static MLProgress.rootMeanSquaredErrorKey);
}

uint64_t one-time initialization function for maximumErrorKey()
{
  uint64_t result;

  result = MEMORY[0x22075A8AC](0x726F727265, 0xE500000000000000);
  static MLProgress.maximumErrorKey = result;
  return result;
}

id static MLProgress.maximumErrorKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for maximumErrorKey, (id *)&static MLProgress.maximumErrorKey);
}

uint64_t one-time initialization function for validationRootMeanSquaredErrorKey()
{
  uint64_t v0;
  unsigned __int16 v1;
  uint64_t result;

  v0 = OUTLINED_FUNCTION_21_20();
  result = MEMORY[0x22075A8AC](v0, v1 | 0xEF65736D725F0000);
  static MLProgress.validationRootMeanSquaredErrorKey = result;
  return result;
}

id static MLProgress.validationRootMeanSquaredErrorKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for validationRootMeanSquaredErrorKey, (id *)&static MLProgress.validationRootMeanSquaredErrorKey);
}

void one-time initialization function for validationMaximumErrorKey()
{
  OUTLINED_FUNCTION_18_19();
}

uint64_t sub_21AEB56A0(uint64_t result)
{
  static MLProgress.validationMaximumErrorKey = result;
  return result;
}

id static MLProgress.validationMaximumErrorKey.getter()
{
  return static MLProgress.elapsedTimeKey.getter(&one-time initialization token for validationMaximumErrorKey, (id *)&static MLProgress.validationMaximumErrorKey);
}

id static MLProgress.elapsedTimeKey.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  Swift::Int v12;
  double result;
  uint64_t v14;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v4;
    v11 = *v4;
    *v4 = 0x8000000000000000;
    v12 = *(_QWORD *)(v11 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v14 + 56) + 32 * v8), a3);
    _NativeDictionary._delete(at:)();
    *v4 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)();
  v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    v8 = *v2;
    *v2 = 0x8000000000000000;
    v9 = *(_QWORD *)(v8 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CodingUserInfoKey, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
    v10 = *(_QWORD *)(v13 + 48);
    v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v4, v11);
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v13 + 56) + 32 * v4), a1);
    _NativeDictionary._delete(at:)();
    *v2 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v8;
  unint64_t v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v8 = v5;
  swift_bridgeObjectRetain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v13;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v8;
    v15 = *v8;
    *v8 = 0x8000000000000000;
    v16 = *(_QWORD *)(v15 + 24);
    __swift_instantiateConcreteTypeFromMangledName(a3);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v16);
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v21 + 56);
    v18 = a4(0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v12, v18);
    _NativeDictionary._delete(at:)();
    *v8 = v21;
    swift_bridgeObjectRelease();
    return __swift_storeEnumTagSinglePayload(a5, 0, 1, v18);
  }
  else
  {
    v20 = a4(0);
    return __swift_storeEnumTagSinglePayload(a5, 1, 1, v20);
  }
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  double result;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v3;
    v9 = *v3;
    *v3 = 0x8000000000000000;
    v10 = *(_QWORD *)(v9 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<MLProgress.Metric, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v6), a2);
    lazy protocol witness table accessor for type MLProgress.Metric and conformance MLProgress.Metric();
    _NativeDictionary._delete(at:)();
    *v3 = v12;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  double result;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v3;
    v9 = *v3;
    *v3 = 0x8000000000000000;
    v10 = *(_QWORD *)(v9 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    outlined destroy of AnyHashable(*(_QWORD *)(v12 + 48) + 40 * v6);
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v6), a2);
    _NativeDictionary._delete(at:)();
    *v3 = v12;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)()
{
  _QWORD *v0;
  uint64_t v2;

  OUTLINED_FUNCTION_20_18();
  OUTLINED_FUNCTION_9_27();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  *v0 = v2;
  return OUTLINED_FUNCTION_0_38();
}

{
  uint64_t *v0;
  uint64_t v2;

  swift_isUniquelyReferenced_nonNull_native();
  v2 = *v0;
  *v0 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  *v0 = v2;
  return OUTLINED_FUNCTION_0_38();
}

{
  uint64_t *v0;
  uint64_t v2;

  swift_isUniquelyReferenced_nonNull_native();
  v2 = *v0;
  *v0 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  *v0 = v2;
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v8;

  swift_isUniquelyReferenced_nonNull_native();
  v8 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3);
  *v3 = v8;
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_20_18();
  v6 = OUTLINED_FUNCTION_9_27();
  a4(v6);
  *v4 = v8;
  return OUTLINED_FUNCTION_0_38();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(_OWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  *v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *v2 = v7;
  return swift_bridgeObjectRelease();
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  *v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *v2 = v7;
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLProgress.CodingKeys, &type metadata for MLProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLProgress.CodingKeys, &type metadata for MLProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLProgress.CodingKeys, &type metadata for MLProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLProgress.CodingKeys, &type metadata for MLProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLProgress.CodingKeys and conformance MLProgress.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [MLProgress.Metric] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [MLProgress.Metric] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MLProgress.Metric] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MLProgress.Metric]);
    result = MEMORY[0x22075B938](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [MLProgress.Metric] and conformance [A]);
  }
  return result;
}

uint64_t destroy for MLProgress()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MLProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MLProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MLProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLProgress(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLProgress(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for MLProgress()
{
  OUTLINED_FUNCTION_25_17();
}

uint64_t getEnumTagSinglePayload for MLProgress.Metric(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 10) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v5 = v6 - 11;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MLProgress.Metric(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_21AEB62D4 + 4 * byte_21AFEBB64[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_21AEB6308 + 4 * byte_21AFEBB5F[v4]))();
}

uint64_t sub_21AEB6308(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AEB6310(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AEB6318);
  return result;
}

uint64_t sub_21AEB6324(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AEB632CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_21AEB6330(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AEB6338(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for MLProgress.Metric()
{
  OUTLINED_FUNCTION_25_17();
}

uint64_t getEnumTagSinglePayload for MLProgress.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MLProgress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21AEB6424 + 4 * byte_21AFEBB6E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21AEB6458 + 4 * byte_21AFEBB69[v4]))();
}

uint64_t sub_21AEB6458(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AEB6460(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21AEB6468);
  return result;
}

uint64_t sub_21AEB6474(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21AEB647CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21AEB6480(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21AEB6488(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for MLProgress.CodingKeys()
{
  OUTLINED_FUNCTION_25_17();
}

uint64_t outlined init with take of (key: MetricsKey, value: Double)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: MetricsKey, value: Double));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_11_1(v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_38()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_1_33()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_4_37()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

void OUTLINED_FUNCTION_5_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,__int128 a23)
{
  uint64_t v23;

  specialized Dictionary.subscript.getter(v23, &a23);
}

id OUTLINED_FUNCTION_7_27()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 3784));
}

uint64_t OUTLINED_FUNCTION_8_29(uint64_t a1)
{
  uint64_t *v1;

  return outlined destroy of Any?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_9_27()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_16_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

void OUTLINED_FUNCTION_18_19()
{
  JUMPOUT(0x22075A8ACLL);
}

void OUTLINED_FUNCTION_19_23()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_20_18()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_21_20()
{
  return 0x69746164696C6176;
}

uint64_t OUTLINED_FUNCTION_24_22@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_26_21()
{
  return 0x6573616870;
}

uint64_t OUTLINED_FUNCTION_33_16()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t static MLHandPoseClassifier.__Defaults.batchSize.getter()
{
  return 32;
}

uint64_t static MLHandPoseClassifier.__Defaults.maximumIterations.getter()
{
  return 80;
}

uint64_t static MLHandPoseClassifier.__Defaults.sessionIdColumnName.getter()
{
  return 0x5F6E6F6973736573;
}

uint64_t static MLHandPoseClassifier.__Defaults.featureColumnName.getter()
{
  return 0x746E696F7079656BLL;
}

uint64_t static MLHandPoseClassifier.__Defaults.labelColumnName.getter()
{
  return 0x6C6562616CLL;
}

uint64_t static MLHandPoseClassifier.__Defaults.imageColumnName.getter()
{
  return 0x7461506567616D69;
}

ValueMetadata *type metadata accessor for MLHandPoseClassifier.__Defaults()
{
  return &type metadata for MLHandPoseClassifier.__Defaults;
}

void MLFewShotSoundClassifier.TemporalClassifier.makeConvBlock(name:input:output:layer:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;

  v62 = a7;
  v57 = a5;
  v58 = a6;
  v59 = a3;
  v10 = type metadata accessor for NeuralNetwork.Border();
  MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NeuralNetwork.Layer.PadParameters.Kind();
  MEMORY[0x24BDAC7A8](v12);
  v52 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  MEMORY[0x24BDAC7A8](v55);
  v15 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for NeuralNetwork.Layer.Kind();
  v51 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for NeuralNetwork.Layer();
  v19 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v56 = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v54 = (char *)v48 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v48[0] = (char *)v48 - v24;
  v63 = a1;
  v64 = a2;
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = 1684107359;
  v25._object = (void *)0xE400000000000000;
  String.append(_:)(v25);
  v49 = v64;
  v50 = v63;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v27 = swift_allocObject();
  v60 = xmmword_21AFE7DA0;
  *(_OWORD *)(v27 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v27 + 32) = v59;
  *(_QWORD *)(v27 + 40) = a4;
  v48[1] = v26;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = v60;
  v59 = a1;
  v63 = a1;
  v64 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = 0x74756F5F6461705FLL;
  v29._object = (void *)0xE800000000000000;
  String.append(_:)(v29);
  v30 = v64;
  *(_QWORD *)(v28 + 32) = v63;
  *(_QWORD *)(v28 + 40) = v30;
  outlined init with copy of _TablePrinter(v62, (uint64_t)v15, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
  static NeuralNetwork.Layer.PadParameters.Kind.constant(value:)();
  NeuralNetwork.Border.init(leadingHeight:trailingHeight:leadingWidth:trailingWidth:)();
  NeuralNetwork.Layer.PadParameters.init(kind:amount:)();
  v52 = v15;
  outlined destroy of MLImageClassifier.CustomFeatureExtractor((uint64_t)v15, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
  v31 = *MEMORY[0x24BE62880];
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 104);
  v53 = (char *)v16;
  v33 = v16;
  v34 = v48[0];
  v48[2] = v32;
  v32(v18, v31, v33);
  NeuralNetwork.Layer.init(name:inputNames:outputNames:kind:)();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  v36 = v35;
  v37 = *(_QWORD *)(v35 + 16);
  if (v37 >= *(_QWORD *)(v35 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v36 = v47;
  }
  *(_QWORD *)(v36 + 16) = v37 + 1;
  v50 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v49 = *(_QWORD *)(v19 + 72);
  v51 = *(_QWORD *)(v19 + 32);
  ((void (*)(unint64_t, uint64_t, uint64_t))v51)(v36 + v50 + v49 * v37, v34, v61);
  v38 = v59;
  v63 = v59;
  v64 = a2;
  swift_bridgeObjectRetain();
  v39._countAndFlagsBits = 0x6431766E6F635FLL;
  v39._object = (void *)0xE700000000000000;
  String.append(_:)(v39);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = v60;
  v63 = v38;
  v64 = a2;
  swift_bridgeObjectRetain();
  v41._countAndFlagsBits = 0x74756F5F6461705FLL;
  v41._object = (void *)0xE800000000000000;
  String.append(_:)(v41);
  v42 = v64;
  *(_QWORD *)(v40 + 32) = v63;
  *(_QWORD *)(v40 + 40) = v42;
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = v60;
  v63 = v38;
  v64 = a2;
  swift_bridgeObjectRetain();
  v44._countAndFlagsBits = 0x756F5F766E6F635FLL;
  v44._object = (void *)0xE900000000000074;
  String.append(_:)(v44);
  v45 = v64;
  *(_QWORD *)(v43 + 32) = v63;
  *(_QWORD *)(v43 + 40) = v45;
  v46 = (uint64_t)v52;
  outlined init with copy of _TablePrinter(v62, (uint64_t)v52, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
  NeuralNetwork.Layer.ConvolutionParameters.init(from:)(v46);
}

char *MLFewShotSoundClassifier.TemporalClassifier.largeMarginClassifierLayers(framewiseEmbeddingShape:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(unint64_t, char *);
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[4];
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v3 = type metadata accessor for Dense();
  v66 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v74 = (char *)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NeuralNetwork.Layer.SliceParameters.Axis();
  v64 = *(_QWORD *)(v5 - 8);
  v65 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v63 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  MEMORY[0x24BDAC7A8](v70);
  v69 = (_QWORD *)((char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v78 = type metadata accessor for NeuralNetwork.Layer.Kind();
  v68 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78);
  v79 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NeuralNetwork.Layer();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v67 = (char *)v60 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v73 = (char *)v60 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v72 = (char *)v60 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v71 = (char *)v60 - v20;
  MEMORY[0x24BDAC7A8](v21);
  v76 = (char *)v60 - v22;
  MEMORY[0x24BDAC7A8](v23);
  v75 = (char *)v60 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v60 - v26;
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)v60 - v29;
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)v60 - v32;
  v34 = specialized BidirectionalCollection.last.getter(a1);
  if ((v35 & 1) == 0)
  {
    v60[3] = v34;
    v62 = v3;
    v60[1] = v12;
    v61 = v9;
    v60[2] = v1;
    static NeuralNetwork.Layer.expandDimensions(name:inputName:outputName:axes:)();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v37 = v36;
    v38 = *(_QWORD *)(v36 + 16);
    if (v38 >= *(_QWORD *)(v36 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v37 = v55;
    }
    *(_QWORD *)(v37 + 16) = v38 + 1;
    v77 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v80 = *(_QWORD *)(v10 + 72);
    v39 = v37 + v77 + v80 * v38;
    v40 = *(void (**)(unint64_t, char *))(v10 + 32);
    v41 = v61;
    v40(v39, v33);
    static NeuralNetwork.Layer.transpose(name:inputName:outputName:axes:)();
    v42 = *(_QWORD *)(v37 + 16);
    if (v42 >= *(_QWORD *)(v37 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v37 = v56;
    }
    *(_QWORD *)(v37 + 16) = v42 + 1;
    v43 = v77;
    v44 = v80;
    ((void (*)(unint64_t, char *, uint64_t))v40)(v37 + v77 + v42 * v80, v30, v41);
    v45 = (uint64_t)v69;
    outlined init with copy of _TablePrinter(v81, (uint64_t)v69, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D);
    v46 = v79;
    NeuralNetwork.Layer.ConvolutionParameters.init(from:)(v45);
    v47 = *(_QWORD **)(v68 + 104);
    ((void (*)(char *, _QWORD, uint64_t))v47)(v46, *MEMORY[0x24BE62868], v78);
    NeuralNetwork.Layer.init(name:inputNames:outputNames:kind:)();
    v48 = *(_QWORD *)(v37 + 16);
    if (v48 >= *(_QWORD *)(v37 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v37 = v57;
    }
    *(_QWORD *)(v37 + 16) = v48 + 1;
    ((void (*)(unint64_t, char *, uint64_t))v40)(v37 + v43 + v48 * v44, v27, v41);
    static NeuralNetwork.Layer.leakyRelu(name:inputName:outputName:negativeSlope:)();
    v49 = *(_QWORD *)(v37 + 16);
    if (v49 >= *(_QWORD *)(v37 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v37 = v58;
    }
    *(_QWORD *)(v37 + 16) = v49 + 1;
    ((void (*)(unint64_t, char *, uint64_t))v40)(v37 + v43 + v49 * v44, v75, v41);
    static NeuralNetwork.Layer.transpose(name:inputName:outputName:axes:)();
    v51 = *(_QWORD *)(v37 + 16);
    v50 = *(_QWORD *)(v37 + 24);
    v69 = v47;
    if (v51 >= v50 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v37 = v59;
    }
    *(_QWORD *)(v37 + 16) = v51 + 1;
    ((void (*)(unint64_t, char *, uint64_t))v40)(v37 + v43 + v51 * v44, v76, v41);
    v82 = v37;
    v52 = type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
    MLFewShotSoundClassifier.TemporalClassifier.makeConvBlock(name:input:output:layer:)(0x3163uLL, 0xE200000000000000, 0x6E69646465626D65uLL, 0xE900000000000067, 12643, 0xE200000000000000, v81 + *(int *)(v52 + 20));
  }
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(_QWORD *)v53 = 0xD00000000000002CLL;
  *(_QWORD *)(v53 + 8) = 0x800000021AFF4D70;
  *(_OWORD *)(v53 + 16) = 0u;
  *(_OWORD *)(v53 + 32) = 0u;
  *(_BYTE *)(v53 + 48) = 2;
  swift_willThrow(0.0);
  return v27;
}

uint64_t MLFewShotSoundClassifier.TemporalClassifier.branchClassifier(input:classLabels:framewiseEmbeddingShape:exemplar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  void (*v100)(char *, uint64_t);

  v98 = a4;
  v100 = a3;
  v89 = a2;
  v97 = a5;
  v6 = type metadata accessor for ModelKind();
  v91 = *(_QWORD *)(v6 - 8);
  v92 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v90 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for NeuralNetworkClassifier.ClassLabels();
  v84 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v85 = (uint64_t *)((char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for NeuralNetwork.ArrayShapeMapping();
  v81 = *(_QWORD *)(v9 - 8);
  v82 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v80 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for NeuralNetworkClassifier();
  v86 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v83 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
  v79 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FeatureType();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork?);
  MEMORY[0x24BDAC7A8](v18);
  v77 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for NeuralNetwork.Layer();
  v78 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v93 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for NeuralNetwork();
  v95 = *(_QWORD *)(v22 - 8);
  v96 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v94 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v67 - v25;
  v27 = a1;
  v28 = MLFewShotSoundClassifier.TemporalClassifier.cosineSimilarity(input:exemplar:)(a1, v98);
  v29 = v99;
  MLFewShotSoundClassifier.TemporalClassifier.largeMarginClassifierLayers(framewiseEmbeddingShape:)((uint64_t)v100);
  if (v29)
    return swift_bridgeObjectRelease();
  v69 = v20;
  v70 = v27;
  v71 = v13;
  v31 = v76;
  v72 = v15;
  v73 = v17;
  v74 = v14;
  v98 = 0;
  NeuralNetwork.init(layers:preprocessors:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NeuralNetwork.Layer>);
  v32 = (char *)v28;
  v33 = v78;
  v34 = *(_QWORD *)(v78 + 72);
  v35 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
  v36 = swift_allocObject();
  v99 = xmmword_21AFE7F70;
  *(_OWORD *)(v36 + 16) = xmmword_21AFE7F70;
  v68 = v35;
  static NeuralNetwork.Layer.constant(name:outputName:shape:values:)();
  static NeuralNetwork.Layer.squeezeAll(name:inputName:outputName:)();
  v37 = v94;
  NeuralNetwork.init(layers:preprocessors:)();
  v38 = (uint64_t)v77;
  v39 = v37;
  v40 = v96;
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v77, v39, v96);
  __swift_storeEnumTagSinglePayload(v38, 0, 1, v40);
  static NeuralNetwork.Layer.branch(name:inputName:ifBranch:elseBranch:)();
  outlined destroy of NeuralNetwork?(v38);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v32 = v65;
  }
  v41 = v31;
  v43 = *((_QWORD *)v32 + 2);
  v42 = *((_QWORD *)v32 + 3);
  v44 = v69;
  v75 = v26;
  if (v43 >= v42 >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v32 = v66;
  }
  v77 = v32;
  *((_QWORD *)v32 + 2) = v43 + 1;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v32[v68 + v43 * v34], v93, v44);
  Model.init()();
  Model.specificationVersion.setter();
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  v45 = type metadata accessor for FeatureDescription();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(char **)(v46 + 72);
  v48 = *(unsigned __int8 *)(v46 + 80);
  v49 = (v48 + 32) & ~v48;
  v76 = v49 + 2 * (_QWORD)v47;
  v93 = v47;
  v69 = v48 | 7;
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = v99;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v50 + v49, v70, v45);
  v51 = *MEMORY[0x24BE624E0];
  v52 = v79;
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 104);
  v54 = v71;
  v53(v71, v51, v41);
  v55 = v73;
  static FeatureType.shapedArray(dataType:shape:optional:)();
  v100 = *(void (**)(char *, uint64_t))(v52 + 8);
  v100(v54, v41);
  FeatureDescription.init(name:type:description:)();
  Model.inputs.setter();
  *(_OWORD *)(swift_allocObject() + 16) = v99;
  v53(v54, v51, v41);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_21AFE7F40;
  *(int64x2_t *)(v56 + 32) = vdupq_n_s64(1uLL);
  v57 = v89;
  *(_QWORD *)(v56 + 48) = *(_QWORD *)(v89 + 16);
  static FeatureType.shapedArray(dataType:shape:optional:)();
  swift_bridgeObjectRelease();
  v100(v54, v41);
  FeatureDescription.init(name:type:description:)();
  FeatureType.StringParameters.init(optional:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v55, *MEMORY[0x24BE62578], v74);
  FeatureDescription.init(name:type:description:)();
  Model.outputs.setter();
  Model.predictedFeatureName.setter();
  Model.predictedProbabilitiesName.setter();
  v58 = v83;
  NeuralNetworkClassifier.init(layers:preprocessors:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v80, *MEMORY[0x24BE62670], v82);
  NeuralNetworkClassifier.arrayInputShapeMapping.setter();
  NeuralNetworkClassifier.labelProbabilityLayerName.setter();
  v59 = v85;
  *v85 = v57;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v84 + 104))(v59, *MEMORY[0x24BE62A88], v87);
  swift_bridgeObjectRetain();
  NeuralNetworkClassifier.classLabels.setter();
  v60 = v86;
  v61 = v90;
  v62 = v88;
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v90, v58, v88);
  (*(void (**)(char *, _QWORD, uint64_t))(v91 + 104))(v61, *MEMORY[0x24BE63298], v92);
  Model.kind.setter();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v62);
  v63 = *(void (**)(char *, uint64_t))(v95 + 8);
  v64 = v96;
  v63(v94, v96);
  return ((uint64_t (*)(char *, uint64_t))v63)(v75, v64);
}

uint64_t MLFewShotSoundClassifier.TemporalClassifier.cosineSimilarity(input:exemplar:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(unint64_t, char *, uint64_t);
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  char *v35;
  char *v36;

  v34[1] = a2;
  v2 = type metadata accessor for NeuralNetwork.Layer();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v35 = (char *)v34 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v34 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v34 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v34 - v14;
  FeatureDescription.name.getter();
  static NeuralNetwork.Layer.expandDimensions(name:inputName:outputName:axes:)();
  swift_bridgeObjectRelease();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  v17 = v16;
  v18 = *(_QWORD *)(v16 + 16);
  if (v18 >= *(_QWORD *)(v16 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v17 = v29;
  }
  *(_QWORD *)(v17 + 16) = v18 + 1;
  v19 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v20 = *(_QWORD *)(v3 + 72);
  v21 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
  v21(v17 + v19 + v20 * v18, v15, v2);
  static NeuralNetwork.Layer.constant(name:outputName:shape:values:)();
  v22 = *(_QWORD *)(v17 + 16);
  if (v22 >= *(_QWORD *)(v17 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v17 = v30;
  }
  *(_QWORD *)(v17 + 16) = v22 + 1;
  v21(v17 + v19 + v22 * v20, v12, v2);
  static NeuralNetwork.Layer.constant(name:outputName:shape:values:)();
  v23 = *(_QWORD *)(v17 + 16);
  if (v23 >= *(_QWORD *)(v17 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v17 = v31;
  }
  v24 = v35;
  *(_QWORD *)(v17 + 16) = v23 + 1;
  v21(v17 + v19 + v23 * v20, v9, v2);
  static NeuralNetwork.Layer.cosineSimilarity(name:inputNames:outputName:)();
  v25 = *(_QWORD *)(v17 + 16);
  if (v25 >= *(_QWORD *)(v17 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v17 = v32;
  }
  *(_QWORD *)(v17 + 16) = v25 + 1;
  v21(v17 + v19 + v25 * v20, v24, v2);
  v26 = v36;
  static NeuralNetwork.Layer.broadcastableSubtract(name:inputNames:outputName:)();
  v27 = *(_QWORD *)(v17 + 16);
  if (v27 >= *(_QWORD *)(v17 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v17 = v33;
  }
  *(_QWORD *)(v17 + 16) = v27 + 1;
  v21(v17 + v19 + v27 * v20, v26, v2);
  return v17;
}

uint64_t MLFewShotSoundClassifier.TemporalClassifier.soundPrintKCustomModel(input:fixedOutput:framewiseEmbeddingShape:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(unint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a2;
  v23 = a3;
  v19 = a1;
  v3 = type metadata accessor for ModelKind();
  v25 = *(_QWORD *)(v3 - 8);
  v26 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v24 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FeatureType();
  MEMORY[0x24BDAC7A8](v8);
  Model.init()();
  Model.specificationVersion.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  v9 = type metadata accessor for FeatureDescription();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_21AFE7DA0;
  v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16);
  v13(v12 + v11, v19, v9);
  Model.inputs.setter();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_21AFE7F70;
  v13(v14 + v11, v22, v9);
  v16 = v20;
  v15 = v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v7, *MEMORY[0x24BE624E0], v21);
  static FeatureType.shapedArray(dataType:shape:optional:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v15);
  FeatureDescription.init(name:type:description:)();
  Model.outputs.setter();
  type metadata accessor for CustomModelConfiguration.ParameterValue();
  Dictionary.init(dictionaryLiteral:)();
  v17 = v24;
  CustomModelConfiguration.init(className:parameters:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v17, *MEMORY[0x24BE632A8], v26);
  return Model.kind.setter();
}

void MLFewShotSoundClassifier.TemporalClassifier.pipeline(classLabels:inferenceWindowSize:framewiseEmbeddingShape:exemplar:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(unint64_t, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;

  v56 = a4;
  v54 = (void (*)(char *, uint64_t))a3;
  v55 = a1;
  v52 = a5;
  v7 = type metadata accessor for ModelKind();
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_49();
  v49 = v10 - v9;
  v11 = type metadata accessor for Model();
  v58 = *(_QWORD *)(v11 - 8);
  v59 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  v53 = v13;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v48 - v15;
  v17 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_3_31();
  type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_49();
  v63 = type metadata accessor for FeatureDescription();
  v62 = *(_QWORD *)(v63 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_208();
  v60 = v21;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v48 - v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_21AFE7F40;
  *(int64x2_t *)(v25 + 32) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v25 + 48) = a2;
  v26 = *MEMORY[0x24BE624E0];
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 104);
  v27(v5, v26, v17);
  static FeatureType.shapedArray(dataType:shape:optional:)();
  swift_bridgeObjectRelease();
  v28 = v53;
  OUTLINED_FUNCTION_6_31();
  OUTLINED_FUNCTION_8_30();
  v29 = v26;
  v30 = v24;
  v27(v5, v29, v17);
  static FeatureType.shapedArray(dataType:shape:optional:)();
  OUTLINED_FUNCTION_6_31();
  v31 = v60;
  OUTLINED_FUNCTION_8_30();
  v61 = v16;
  v32 = v54;
  MLFewShotSoundClassifier.TemporalClassifier.soundPrintKCustomModel(input:fixedOutput:framewiseEmbeddingShape:)((uint64_t)v24, v31, (uint64_t)v54);
  v33 = v28;
  v34 = v57;
  MLFewShotSoundClassifier.TemporalClassifier.branchClassifier(input:classLabels:framewiseEmbeddingShape:exemplar:)(v31, v55, v32, v56, v28);
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v61, v59);
    OUTLINED_FUNCTION_7_28(v31);
    v35 = (uint64_t)v24;
  }
  else
  {
    Model.init()();
    Model.specificationVersion.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
    v36 = v62;
    v37 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_21AFE7DA0;
    (*(void (**)(unint64_t, char *, uint64_t))(v36 + 16))(v38 + v37, v30, v63);
    Model.inputs.setter();
    Model.outputs.getter();
    Model.outputs.setter();
    OUTLINED_FUNCTION_4_38();
    Model.predictedFeatureName.setter();
    OUTLINED_FUNCTION_4_38();
    Model.predictedProbabilitiesName.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
    v39 = v58;
    v57 = (uint64_t)v30;
    v40 = *(_QWORD *)(v58 + 72);
    v41 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
    v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_21AFE7F70;
    v43 = v42 + v41;
    v44 = *(void (**)(unint64_t, char *, uint64_t))(v39 + 16);
    v45 = v59;
    v44(v43, v61, v59);
    v44(v43 + v40, (char *)v33, v45);
    v46 = v49;
    PipelineConfiguration.init(models:names:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 104))(v46, *MEMORY[0x24BE632D0], v51);
    Model.kind.setter();
    v47 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v47(v33, v45);
    v47((uint64_t)v61, v45);
    OUTLINED_FUNCTION_7_28(v60);
    v35 = v57;
  }
  OUTLINED_FUNCTION_7_28(v35);
  OUTLINED_FUNCTION_7();
}

void MLFewShotSoundClassifier.write(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  void *v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  v8 = type metadata accessor for Model();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_3_31();
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v14 = v13 - v12;
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(a1, 0xD000000000000016, 0x800000021AFF4CD0, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v13 - v12);
  if (!v36)
  {
    v32 = v2;
    v35 = v14;
    v37 = v11;
    v34 = v10;
    v15 = (int *)type metadata accessor for MLFewShotSoundClassifier();
    v16 = *(void **)(v1 + v15[12]);
    v17 = objc_msgSend(v16, sel_trainingDataEmbeddings);
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_60_0();
    }
    else
    {
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v19)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v18 & 0xC000000000000001) == 0, v18);
      if ((v18 & 0xC000000000000001) != 0)
        v20 = (id)MEMORY[0x22075AF48](0, v18);
      else
        v20 = *(id *)(v18 + 32);
      v21 = v20;
      OUTLINED_FUNCTION_60_0();
      v22 = objc_msgSend(v21, sel_shape);

      type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v24 = objc_msgSend(v16, sel_exemplar);
      v25 = UnsafeBufferPointer.init(_:)();
      specialized _copyCollectionToContiguousArray<A>(_:)(v25, v27);
      v29 = v28;
      outlined init with copy of _TablePrinter(v1 + v15[10], v7, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
      v33 = *(_QWORD *)(v1 + v15[8]);
      objc_msgSend(v16, sel_inferenceWindowSize);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(v23);
      v31 = v30;
      swift_bridgeObjectRelease();
      MLFewShotSoundClassifier.TemporalClassifier.pipeline(classLabels:inferenceWindowSize:framewiseEmbeddingShape:exemplar:)(v33, v38, v31, v29, v32);
      outlined destroy of MLImageClassifier.CustomFeatureExtractor(v7, type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
      swift_release();
      OUTLINED_FUNCTION_60_0();
      Model.write(to:)();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v32, v8);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v34);
    }
    else
    {
      OUTLINED_FUNCTION_60_0();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v26 = 0xD000000000000037;
      *(_QWORD *)(v26 + 8) = 0x800000021AFF4CF0;
      *(_OWORD *)(v26 + 16) = 0u;
      *(_OWORD *)(v26 + 32) = 0u;
      *(_BYTE *)(v26 + 48) = 2;
      swift_willThrow(0.0);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v34);
    }
  }
  OUTLINED_FUNCTION_7();
}

uint64_t outlined destroy of NeuralNetwork?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NeuralNetwork?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_31()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_4_38()
{
  return 0x62614C7373616C63;
}

uint64_t OUTLINED_FUNCTION_6_31()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t OUTLINED_FUNCTION_7_28(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_8_30()
{
  return FeatureDescription.init(name:type:description:)();
}

uint64_t MLImageClassifier.evaluation(on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v3 = v2;
  v17[1] = a2;
  v5 = OUTLINED_FUNCTION_57_7();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = OUTLINED_FUNCTION_12_27();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  outlined init with copy of MLImageClassifier.DataSource(a1, (uint64_t)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.DataSource);
  outlined init with copy of MLImageClassifier.DataSource(v3, (uint64_t)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = (v10 + *(unsigned __int8 *)(v6 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v13 = swift_allocObject();
  outlined init with take of MLImageClassifier.DataSource((uint64_t)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v11, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier.DataSource);
  outlined init with take of MLImageClassifier.DataSource((uint64_t)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier);
  specialized blockAwait<A>(_:)();
  v15 = v14;
  swift_release();
  v17[2] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(predicted: String, label: String)]);
  lazy protocol witness table accessor for type [(predicted: String, label: String)] and conformance [A]();
  ClassificationMetrics.init<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_83_4();
  return swift_storeEnumTagMultiPayload();
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v4 = OUTLINED_FUNCTION_12_27();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v6 = a1;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  MLImageClassifier.evaluation(on:)((uint64_t)v6, a2);
  return outlined destroy of MLImageClassifier.DataSource((uint64_t)v6);
}

uint64_t closure #1 in MLImageClassifier.evaluation(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = *(_QWORD *)(type metadata accessor for MLImageClassifier() - 8);
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 + 64);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in MLImageClassifier.evaluation(on:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;

  v1 = static _ImageUtilities.getImageURLsAndLabels(from:)(*(_QWORD *)(v0 + 24));
  v2 = specialized _NativeDictionary.mapValues<A>(_:)(v1);
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  outlined init with copy of MLImageClassifier.DataSource(*(_QWORD *)(v0 + 32), v3, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = swift_allocObject();
  outlined init with take of MLImageClassifier.DataSource(v3, v6 + v5, (uint64_t (*)(_QWORD))type metadata accessor for MLImageClassifier);
  v7 = specialized _NativeDictionary.mapValues<A>(_:)(v2, (uint64_t (*)(uint64_t))partial apply for implicit closure #2 in implicit closure #1 in closure #1 in MLImageClassifier.evaluation(on:));
  swift_release();
  swift_release();
  v9 = *(uint64_t **)(v0 + 16);
  v10 = specialized Sequence.flatMap<A>(_:)(v7);
  swift_release();
  *v9 = v10;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined init with copy of MLImageClassifier.DataSource(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_166(a1, a2, a3);
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  return v3;
}

uint64_t sub_21AEB9990()
{
  void (*v0)(char *, uint64_t);
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unsigned int EnumCaseMultiPayload;
  uint64_t v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v1 = *(_QWORD *)(OUTLINED_FUNCTION_12_27() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = OUTLINED_FUNCTION_57_7();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = (v2 + v3 + v5) & ~v5;
  v7 = (char *)v0 + v2;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload <= 1)
  {
    v9 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  v10 = (char *)v0 + v6;

  if (*(_QWORD *)((char *)v0 + v6 + 48))
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v10 + 24));
  if (*((_QWORD *)v10 + 10))
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v10 + 56));
  v11 = &v10[*(int *)(v4 + 24)];
  OUTLINED_FUNCTION_83_4();
  v12 = OUTLINED_FUNCTION_1_34();
  switch(v12)
  {
    case 2:
      OUTLINED_FUNCTION_13_33();
      break;
    case 1:
      OUTLINED_FUNCTION_10_26();
      v14 = OUTLINED_FUNCTION_5_29();
      OUTLINED_FUNCTION_3_32(v14);
      v0(&v11[*(int *)(v3 + 24)], v5);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (OUTLINED_FUNCTION_23() == 1)
        v13 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v13 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v15 = __swift_instantiateConcreteTypeFromMangledName(v13);
      OUTLINED_FUNCTION_0_39(v15);
      break;
  }
  v16 = OUTLINED_FUNCTION_1_34();
  switch(v16)
  {
    case 2:
      OUTLINED_FUNCTION_13_33();
      break;
    case 1:
      OUTLINED_FUNCTION_10_26();
      v18 = OUTLINED_FUNCTION_6_32();
      OUTLINED_FUNCTION_4_39(v18);
      OUTLINED_FUNCTION_14_22();
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (OUTLINED_FUNCTION_23() == 1)
        v17 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v17 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v19 = __swift_instantiateConcreteTypeFromMangledName(v17);
      OUTLINED_FUNCTION_0_39(v19);
      break;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v20 = OUTLINED_FUNCTION_114();
  v21 = OUTLINED_FUNCTION_17_18(v20, &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_11_1(v21);
  return swift_deallocObject();
}

uint64_t outlined init with take of MLImageClassifier.DataSource(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_166(a1, a2, a3);
  OUTLINED_FUNCTION_72(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  return v3;
}

uint64_t partial apply for closure #1 in MLImageClassifier.evaluation(on:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(OUTLINED_FUNCTION_12_27() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_57_7() - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1 + v5;
  v10 = v1 + (v8 & ~v7);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in MLLogisticRegressionClassifier.init(checkpoint:);
  return closure #1 in MLImageClassifier.evaluation(on:)(a1, v9, v10);
}

uint64_t outlined destroy of MLImageClassifier.DataSource(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLImageClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21AEBA104()
{
  void (*v0)(char *, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v2 = OUTLINED_FUNCTION_57_7();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v4 = (char *)v0 + ((v3 + 16) & ~v3);

  if (*((_QWORD *)v4 + 6))
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v4 + 24));
  if (*((_QWORD *)v4 + 10))
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v4 + 56));
  v5 = &v4[*(int *)(v2 + 24)];
  OUTLINED_FUNCTION_83_4();
  v6 = OUTLINED_FUNCTION_1_34();
  switch(v6)
  {
    case 2:
      OUTLINED_FUNCTION_13_33();
      break;
    case 1:
      OUTLINED_FUNCTION_10_26();
      v8 = OUTLINED_FUNCTION_5_29();
      OUTLINED_FUNCTION_3_32(v8);
      v0(&v5[*(int *)(v1 + 24)], (v3 + 16) & ~v3);
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (OUTLINED_FUNCTION_23() == 1)
        v7 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v7 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v9 = __swift_instantiateConcreteTypeFromMangledName(v7);
      OUTLINED_FUNCTION_0_39(v9);
      break;
  }
  v10 = OUTLINED_FUNCTION_1_34();
  switch(v10)
  {
    case 2:
      OUTLINED_FUNCTION_13_33();
      break;
    case 1:
      OUTLINED_FUNCTION_10_26();
      v12 = OUTLINED_FUNCTION_6_32();
      OUTLINED_FUNCTION_4_39(v12);
      OUTLINED_FUNCTION_14_22();
      break;
    case 0:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (OUTLINED_FUNCTION_23() == 1)
        v11 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v11 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v13 = __swift_instantiateConcreteTypeFromMangledName(v11);
      OUTLINED_FUNCTION_0_39(v13);
      break;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<LogisticRegressionClassifierModel<Float, String>, FullyConnectedNetworkClassifierModel<Float, String>>);
  v14 = OUTLINED_FUNCTION_114();
  v15 = OUTLINED_FUNCTION_17_18(v14, &demangling cache variable for type metadata for LogisticRegressionClassifierModel<Float, String>);
  OUTLINED_FUNCTION_11_1(v15);
  return swift_deallocObject();
}

id partial apply for implicit closure #2 in implicit closure #1 in closure #1 in MLImageClassifier.evaluation(on:)(unint64_t a1)
{
  type metadata accessor for MLImageClassifier();
  return MLImageClassifier.performRequests(_:)(a1);
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t i;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  result = static _DictionaryStorage.copy(original:)();
  v5 = (_QWORD *)result;
  v6 = 0;
  v29 = a1;
  v9 = *(_QWORD *)(a1 + 64);
  v8 = a1 + 64;
  v7 = v9;
  v10 = 1 << *(_BYTE *)(v8 - 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v7;
  v26 = v8;
  v27 = (unint64_t)(v10 + 63) >> 6;
  v28 = result + 64;
  if ((v11 & v7) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v13 | (v6 << 6); ; i = __clz(__rbit64(v16)) + (v6 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v29 + 48) + 16 * i);
    v19 = *v18;
    v20 = v18[1];
    swift_bridgeObjectRetain();
    v21 = swift_bridgeObjectRetain();
    v22 = a2(v21);
    result = swift_bridgeObjectRelease();
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v5;
    }
    *(_QWORD *)(v28 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v23 = (_QWORD *)(v5[6] + 16 * i);
    *v23 = v19;
    v23[1] = v20;
    *(_QWORD *)(v5[7] + 8 * i) = v22;
    v24 = v5[2];
    v15 = __OFADD__(v24, 1);
    v25 = v24 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v5[2] = v25;
    if (v12)
      goto LABEL_4;
LABEL_5:
    v15 = __OFADD__(v6++, 1);
    if (v15)
      goto LABEL_27;
    if (v6 >= v27)
      return (uint64_t)v5;
    v16 = *(_QWORD *)(v26 + 8 * v6);
    if (!v16)
      break;
LABEL_15:
    v12 = (v16 - 1) & v16;
  }
  v17 = v6 + 1;
  if (v6 + 1 >= v27)
    return (uint64_t)v5;
  v16 = *(_QWORD *)(v26 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v6 + 2;
  if (v6 + 2 >= v27)
    return (uint64_t)v5;
  v16 = *(_QWORD *)(v26 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v6 + 3;
  if (v6 + 3 >= v27)
    return (uint64_t)v5;
  v16 = *(_QWORD *)(v26 + 8 * v17);
  if (v16)
  {
LABEL_14:
    v6 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v27)
      return (uint64_t)v5;
    v16 = *(_QWORD *)(v26 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_0_39(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_1_34()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_3_32(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_4_39(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_5_29()
{
  return type metadata accessor for DataFrame();
}

uint64_t OUTLINED_FUNCTION_6_32()
{
  return type metadata accessor for DataFrame();
}

uint64_t OUTLINED_FUNCTION_10_26()
{
  return type metadata accessor for MLClassifierMetrics.Precomputed(0);
}

uint64_t OUTLINED_FUNCTION_12_27()
{
  return type metadata accessor for MLImageClassifier.DataSource();
}

void OUTLINED_FUNCTION_13_33()
{
  id *v0;

}

uint64_t OUTLINED_FUNCTION_14_22()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(v2 + *(int *)(v1 + 24), v3);
}

uint64_t OUTLINED_FUNCTION_17_18@<X0>(int a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  if (a1 == 1)
    return __swift_instantiateConcreteTypeFromMangledName(v2);
  else
    return __swift_instantiateConcreteTypeFromMangledName(a2);
}

_QWORD *initializeBufferWithCopyOfBuffer for MLLinearRegressor.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2 + 2;
    v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8)
    {
      v10 = a2[3];
      v11 = a2[4];
      a1[2] = v8;
      a1[3] = v10;
      a1[4] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)a1 + 1) = *v9;
      a1[4] = a2[4];
    }
    v13 = *(int *)(a3 + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for BaseLinearRegressorModel();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t destroy for MLLinearRegressor.Model(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for BaseLinearRegressorModel();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for MLLinearRegressor.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2 + 2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7)
  {
    v9 = a2[3];
    v10 = a2[4];
    a1[2] = v7;
    a1[3] = v9;
    a1[4] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    a1[4] = v8[2];
  }
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

_QWORD *assignWithCopy for MLLinearRegressor.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 2;
  v8 = a2 + 2;
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of FeatureVectorizer<Double>.Transformer((uint64_t)(a1 + 2));
      v9 = a2[4];
      *v6 = *v8;
      a1[4] = v9;
    }
  }
  else if (v7)
  {
    a1[2] = v7;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    a1[4] = a2[4];
    *v6 = v10;
  }
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for MLLinearRegressor.Model(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for MLLinearRegressor.Model(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[2];
  if (!a1[2])
    goto LABEL_5;
  if (!v7)
  {
    outlined destroy of FeatureVectorizer<Double>.Transformer((uint64_t)(a1 + 2));
LABEL_5:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    a1[4] = a2[4];
    goto LABEL_6;
  }
  a1[2] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for BaseLinearRegressorModel();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLLinearRegressor.Model()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBAA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for BaseLinearRegressorModel();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MLLinearRegressor.Model()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBAAB0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for BaseLinearRegressorModel();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MLLinearRegressor.Model()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLLinearRegressor.Model;
  if (!type metadata singleton initialization cache for MLLinearRegressor.Model)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MLLinearRegressor.Model()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BaseLinearRegressorModel();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void MLLinearRegressor.Model.applied(to:eventHandler:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  v15 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Double>);
  v13 = *(_QWORD *)(v8 - 8);
  v14 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v3 + 16))
  {
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    if (!v2)
    {
      type metadata accessor for MLLinearRegressor.Model();
      v12 = a1;
      v16 = BaseLinearRegressorModel.applied(features:eventHandler:)();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<Double>);
      lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type ContiguousArray<Double> and conformance ContiguousArray<A>, &demangling cache variable for type metadata for ContiguousArray<Double>, MEMORY[0x24BEE2A48]);
      Column.init<A>(name:contents:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyColumn>);
      type metadata accessor for AnyColumn();
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_21AFE7DA0;
      Column.eraseToAnyColumn()();
      v16 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyColumn]);
      lazy protocol witness table accessor for type [(label: Int, keypoints: MLMultiArray)] and conformance [A](&lazy protocol witness table cache variable for type [AnyColumn] and conformance [A], &demangling cache variable for type metadata for [AnyColumn], MEMORY[0x24BEE12C8]);
      DataFrame.init<A>(columns:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v5);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v14);
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t protocol witness for Transformer.applied(to:eventHandler:) in conformance MLLinearRegressor.Model(uint64_t a1)
{
  uint64_t v1;

  MLLinearRegressor.Model.applied(to:eventHandler:)(a1);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v1 + 8));
}

unint64_t lazy protocol witness table accessor for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model;
  if (!lazy protocol witness table cache variable for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model)
  {
    v1 = type metadata accessor for MLLinearRegressor.Model();
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLLinearRegressor.Model, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLLinearRegressor.Model and conformance MLLinearRegressor.Model);
  }
  return result;
}

uint64_t type metadata completion function for Either()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Either(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for Either(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_21AEBB10C + 4 * byte_21AFEBF05[v7]))();
  }
}

uint64_t initializeWithCopy for Either(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithCopy for Either(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t initializeWithTake for Either(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithTake for Either(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Either(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21AEBB6C8 + 4 * byte_21AFEBF28[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for Either(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if (a3 < 0xFF)
  {
    v8 = 0;
  }
  else if (v6 <= 3)
  {
    v10 = ((a3 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v9 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v11 = v9 & ~(-1 << v7);
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for Either(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_21AEBB908 + 4 * byte_21AFEBF36[v3]))();
}

void destructiveInjectEnumTag for Either(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for Either(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Either);
}

void NLModel.write(to:defaultName:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[9];

  v9 = OUTLINED_FUNCTION_78();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_49();
  v13 = v12 - v11;
  v14 = *a4;
  v22 = a4[2];
  v23 = a4[1];
  v20 = a4[4];
  v21 = a4[3];
  v18 = a4[6];
  v19 = a4[5];
  v15 = a4[7];
  v16 = a4[8];
  v17 = v15;
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(a1, a2, a3, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v13);
  if (!v4)
  {
    v24[0] = v14;
    v24[1] = v23;
    v24[2] = v22;
    v24[3] = v21;
    v24[4] = v20;
    v24[5] = v19;
    v24[6] = v18;
    v24[7] = v17;
    v24[8] = v16;
    NLModel.writeModel(to:metadata:)(v13, (uint64_t)v24);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  OUTLINED_FUNCTION_7();
}

void NLModel.write(toFile:defaultName:metadata:)(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[9];

  v11 = OUTLINED_FUNCTION_78();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_49();
  v15 = v14 - v13;
  v25 = a5[1];
  v26 = *a5;
  v23 = a5[3];
  v24 = a5[2];
  v21 = a5[5];
  v22 = a5[4];
  v16 = a5[6];
  v17 = a5[7];
  v18 = a5[8];
  v19 = v17;
  v20 = v16;
  static _ValidationUtilities.validateWriteLocation(atPath:defaultName:)(a1, a2, a3, a4);
  if (!v5)
  {
    v27[0] = v26;
    v27[1] = v25;
    v27[2] = v24;
    v27[3] = v23;
    v27[4] = v22;
    v27[5] = v21;
    v27[6] = v20;
    v27[7] = v19;
    v27[8] = v18;
    NLModel.write(to:defaultName:metadata:)(v15, a3, (uint64_t)a4, v27);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
  }
  OUTLINED_FUNCTION_7();
}

MLModel __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NLModel.asCoreML()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *);
  NSURL *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  NSURL *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  double v43;
  char *v44;
  id v45;
  id v46;
  double v47;
  char *v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char *v56;
  id v57[2];

  v57[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for UUID();
  v52 = *(_QWORD *)(v0 - 8);
  v53 = v0;
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_49();
  v3 = (id)(v2 - v1);
  v4 = OUTLINED_FUNCTION_78();
  v54 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v49 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v49 - v11;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v49 - v14;
  MEMORY[0x24BDAC7A8](v16);
  v56 = (char *)&v49 - v17;
  v18 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  NSFileManager.createTemporaryModelDirectory()();
  if (!v19)
  {
    v49 = v6;
    v50 = v9;
    NSFileManager.temporaryModelDirectory.getter();
    UUID.init()();
    UUID.uuidString.getter();
    v51 = (void *)v4;
    (*(void (**)(id, uint64_t))(v52 + 8))(v3, v53);
    URL.appendingPathComponent(_:)();
    v20 = v51;
    swift_bridgeObjectRelease();
    URL.appendingPathExtension(_:)();
    v21 = v54;
    v22 = *(void (**)(uint64_t, void *))(v54 + 8);
    OUTLINED_FUNCTION_194_0((uint64_t)v12);
    URL._bridgeToObjectiveC()(v23);
    v25 = v24;
    v26 = Dictionary.init(dictionaryLiteral:)();
    v57[0] = 0;
    v27 = outlined bridged method (mnbnnn) of @objc NLModel.writeMLModel(to:options:)((uint64_t)v25, v26, (uint64_t)v57, v55);

    v3 = v57[0];
    v28 = (uint64_t)v15;
    if ((v27 & 1) != 0)
    {
      v29 = v21;
      v30 = v18;
      v31 = (uint64_t)v56;
      v32 = (void *)objc_opt_self();
      v33 = v3;
      URL._bridgeToObjectiveC()(v34);
      v36 = v35;
      v57[0] = 0;
      v37 = objc_msgSend(v32, sel_compileModelAtURL_error_, v35, v57);

      v38 = v57[0];
      if (v37)
      {
        v39 = (uint64_t)v50;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        v40 = v38;

        type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLModel);
        v41 = (uint64_t)v49;
        (*(void (**)(char *, uint64_t, void *))(v29 + 16))(v49, v39, v51);
        v3 = @nonobjc MLModel.__allocating_init(contentsOf:)(v41);
        OUTLINED_FUNCTION_194_0(v39);
        OUTLINED_FUNCTION_4_40();

        OUTLINED_FUNCTION_194_0(v28);
        OUTLINED_FUNCTION_194_0(v31);
        return (MLModel)v3;
      }
      v46 = v57[0];
      _convertNSErrorToError(_:)();

      swift_willThrow(v47);
      $defer #1 () in CMLModel.compile()(v30);

      v3 = v51;
      v22(v28, v51);
      v44 = (char *)v31;
      v45 = v3;
    }
    else
    {
      v42 = v57[0];
      _convertNSErrorToError(_:)();

      swift_willThrow(v43);
      OUTLINED_FUNCTION_194_0((uint64_t)v15);
      v44 = v56;
      v45 = v20;
    }
    v22((uint64_t)v44, v45);
    return (MLModel)v3;
  }

  return (MLModel)v3;
}

id @nonobjc MLModel.__allocating_init(contentsOf:)(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;
  double v10;
  uint64_t v11;
  id v13;
  NSURL *v14;

  v14 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v14);
  v3 = v2;
  v13 = 0;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_modelWithContentsOfURL_error_, v2, &v13);

  v5 = v13;
  if (v4)
  {
    v6 = type metadata accessor for URL();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v8 = v5;
    v7(a1, v6);
  }
  else
  {
    v9 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow(v10);
    v11 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
  }
  return v4;
}

id NLModel.writeModel(to:metadata:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  NSURL *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  NSDictionary v10;
  unsigned int v11;
  id v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v4 = (NSURL *)*MEMORY[0x24BDAC8D0];
  v23 = *MEMORY[0x24BDAC8D0];
  v5 = *(void **)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 64);
    v16 = *(_OWORD *)(a2 + 32);
    v17 = *(_OWORD *)(a2 + 48);
    v15 = *(_OWORD *)(a2 + 16);
    v7 = *(void **)a2;
    type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for NLModel);
    v18[0] = v7;
    v18[1] = v5;
    v19 = v15;
    v20 = v16;
    v21 = v17;
    v22 = v6;
    v5 = (void *)static NLModel.buildMetadataOptions(_:)((uint64_t *)v18);
  }
  URL._bridgeToObjectiveC()(v4);
  v9 = v8;
  if (v5)
  {
    v10.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.isa = 0;
  }
  v18[0] = 0;
  v11 = objc_msgSend(v3, sel_writeMLModelToURL_options_error_, v9, v10.super.isa, v18, v15, v16, v17);

  if (v11)
    return v18[0];
  v13 = v18[0];
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow(v14);
}

uint64_t static NLModel.buildMetadataOptions(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[40];
  uint64_t v20;

  v2 = *a1;
  v1 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a1[5];
  v15 = a1[4];
  v7 = a1[6];
  v6 = a1[7];
  v8 = a1[8];
  v20 = MEMORY[0x24BEE4B00];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = MEMORY[0x24BEE0D00];
  AnyHashable.init<A>(_:)();
  v18 = v9;
  v16 = v4;
  v17 = v3;
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)&v16, (uint64_t)v19);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v10;
  AnyHashable.init<A>(_:)();
  v18 = v9;
  v16 = v7;
  v17 = v6;
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)&v16, (uint64_t)v19);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v11;
  AnyHashable.init<A>(_:)();
  v18 = v9;
  v16 = v2;
  v17 = v1;
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)&v16, (uint64_t)v19);
  if (v5)
  {
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v12;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    v18 = v9;
    v16 = v15;
    v17 = v5;
    specialized Dictionary.subscript.setter((uint64_t)&v16, (uint64_t)v19);
  }
  if (v8)
  {
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v13;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    v16 = v8;
    specialized Dictionary.subscript.setter((uint64_t)&v16, (uint64_t)v19);
  }
  return v20;
}

id outlined bridged method (mnbnnn) of @objc NLModel.writeMLModel(to:options:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa;
  id v8;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(a4, sel_writeMLModelToURL_options_error_, a1, isa, a3);

  return v8;
}

void OUTLINED_FUNCTION_4_40()
{
  void *v0;

  $defer #1 () in CMLModel.compile()(v0);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML24MLRandomForestClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML24ijk3V15lm76V13configuration10validationAE0A12MLComponents24BoostedTreeConfigurationV_11c7Data0O5e12VSgtcfcAE010N21O0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for DataFrame();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)v10, &demangling cache variable for type metadata for DataFrame?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
  {
    v11 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
    v12 = a2;
    v13 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2, v7, v4);
    v14 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 = a2;
    v13 = 0;
    v11 = v14;
  }
  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v11);
}

uint64_t MLRandomForestClassifier.ModelParameters.validationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  v1 = v0;
  OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v5 = v4 - v3;
  result = outlined init with copy of Any?(v1, (uint64_t)&v7, &demangling cache variable for type metadata for Any?);
  if (v8)
  {
    outlined init with take of Any(&v7, &v9);
    OUTLINED_FUNCTION_16_0();
    MLRandomForestClassifier.ModelParameters.ValidationData.asTable()();
    return outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for MLRandomForestClassifier.ModelParameters.validationData : MLRandomForestClassifier.ModelParameters@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = MLRandomForestClassifier.ModelParameters.validationData.getter();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

void key path setter for MLRandomForestClassifier.ModelParameters.validationData : MLRandomForestClassifier.ModelParameters(uint64_t a1)
{
  unsigned __int8 v1;
  id v2;
  unsigned __int8 v3;

  v1 = *(_BYTE *)(a1 + 8);
  v2 = *(id *)a1;
  v3 = v1;
  outlined copy of MLDataTable?(v2, v1);
  MLRandomForestClassifier.ModelParameters.validationData.setter((uint64_t)&v2);
}

void MLRandomForestClassifier.ModelParameters.validationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v12[4];

  v2 = v1;
  OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  v8 = *(void **)a1;
  v9 = *(unsigned __int8 *)(a1 + 8);
  v12[3] = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v12);
  if (v9 == 255)
  {
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_WORD *)(v7 + 16) = 256;
  }
  else if (MLDataTable.size.getter())
  {
    *(_QWORD *)v7 = v8;
    *(_BYTE *)(v7 + 8) = v9 & 1;
  }
  else
  {
    outlined consume of MLDataTable?(v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData(v7, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v12, v2);
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLRandomForestClassifier.ModelParameters.validation.getter()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  uint64_t v3;
  __int128 v4;

  result = outlined init with copy of Any?(v0, (uint64_t)&v2, &demangling cache variable for type metadata for Any?);
  if (v3)
  {
    outlined init with take of Any(&v2, &v4);
    OUTLINED_FUNCTION_3_33();
    return OUTLINED_FUNCTION_16_0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void (*MLRandomForestClassifier.ModelParameters.validationData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  MLRandomForestClassifier.ModelParameters.validationData.getter();
  return MLRandomForestClassifier.ModelParameters.validationData.modify;
}

void MLRandomForestClassifier.ModelParameters.validationData.modify(uint64_t a1, char a2)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned __int8 v5;

  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(void **)a1;
  v5 = v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of MLDataTable?(v2, v3);
    MLRandomForestClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
    outlined consume of MLDataTable?(v2, v3);
  }
  else
  {
    MLRandomForestClassifier.ModelParameters.validationData.setter((uint64_t)&v4);
  }
}

uint64_t key path setter for MLRandomForestClassifier.ModelParameters.validation : MLRandomForestClassifier.ModelParameters(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLRandomForestClassifier.ModelParameters.ValidationData(a1, (uint64_t)v4);
  return MLRandomForestClassifier.ModelParameters.validation.setter((uint64_t)v4);
}

uint64_t MLRandomForestClassifier.ModelParameters.validation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v5[4];

  v5[3] = OUTLINED_FUNCTION_3_33();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v5);
  outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData(a1, (uint64_t)boxed_opaque_existential_0);
  return outlined assign with take of Any?((uint64_t)v5, v1);
}

void (*MLRandomForestClassifier.ModelParameters.validation.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  void (*result)(uint64_t **, char);

  v2 = v1;
  v4 = malloc(0xA0uLL);
  *a1 = v4;
  v4[16] = v2;
  v5 = OUTLINED_FUNCTION_3_33();
  v4[17] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v4[18] = malloc(v6);
  v4[19] = malloc(v6);
  result = (void (*)(uint64_t **, char))outlined init with copy of Any?(v2, (uint64_t)(v4 + 4), &demangling cache variable for type metadata for Any?);
  if (v4[7])
  {
    outlined init with take of Any((_OWORD *)v4 + 2, v4);
    OUTLINED_FUNCTION_16_0();
    return MLRandomForestClassifier.ModelParameters.validation.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void MLRandomForestClassifier.ModelParameters.validation.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v7;

  v2 = *a1;
  v3 = (void *)(*a1)[18];
  v4 = (void *)(*a1)[19];
  v5 = (*a1)[17];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of MLRandomForestClassifier.ModelParameters.ValidationData((*a1)[19], (uint64_t)v3);
    v2[11] = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v2 + 8);
    outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v3, (uint64_t)boxed_opaque_existential_0);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 8));
    outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v4);
  }
  else
  {
    v2[15] = v5;
    v7 = __swift_allocate_boxed_opaque_existential_0(v2 + 12);
    outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData((uint64_t)v4, (uint64_t)v7);
    OUTLINED_FUNCTION_17_0((uint64_t)(v2 + 12));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t MLRandomForestClassifier.ModelParameters.maxDepth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t MLRandomForestClassifier.ModelParameters.maxDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*MLRandomForestClassifier.ModelParameters.maxDepth.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.ModelParameters.maxIterations.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t MLRandomForestClassifier.ModelParameters.maxIterations.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*MLRandomForestClassifier.ModelParameters.maxIterations.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestClassifier.ModelParameters.minLossReduction.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void MLRandomForestClassifier.ModelParameters.minLossReduction.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*MLRandomForestClassifier.ModelParameters.minLossReduction.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestClassifier.ModelParameters.minChildWeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void MLRandomForestClassifier.ModelParameters.minChildWeight.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*MLRandomForestClassifier.ModelParameters.minChildWeight.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.ModelParameters.randomSeed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t MLRandomForestClassifier.ModelParameters.randomSeed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*MLRandomForestClassifier.ModelParameters.randomSeed.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestClassifier.ModelParameters.rowSubsample.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

void MLRandomForestClassifier.ModelParameters.rowSubsample.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 72) = a1;
}

uint64_t (*MLRandomForestClassifier.ModelParameters.rowSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

double MLRandomForestClassifier.ModelParameters.columnSubsample.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

void MLRandomForestClassifier.ModelParameters.columnSubsample.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 80) = a1;
}

uint64_t (*MLRandomForestClassifier.ModelParameters.columnSubsample.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLRandomForestClassifier.ModelParameters.init(validation:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:rowSubsample:columnSubsample:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  uint64_t v9;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v24[4];

  v19 = OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  *(double *)&v21 = OUTLINED_FUNCTION_7_13();
  *(_OWORD *)a5 = v21;
  *(_OWORD *)(a5 + 16) = v21;
  *(_QWORD *)(a5 + 32) = a2;
  *(_QWORD *)(a5 + 40) = a3;
  *(double *)(a5 + 48) = a6;
  *(double *)(a5 + 56) = a7;
  *(_QWORD *)(a5 + 64) = a4;
  *(double *)(a5 + 72) = a8;
  *(double *)(a5 + 80) = a9;
  outlined init with copy of MLRandomForestClassifier.ModelParameters.ValidationData(a1, v9);
  v24[3] = v19;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v24);
  OUTLINED_FUNCTION_12_28((uint64_t)boxed_opaque_existential_0);
  outlined assign with take of Any?((uint64_t)v24, a5);
  return outlined destroy of MLRandomForestClassifier.ModelParameters.ValidationData(a1);
}

void MLRandomForestClassifier.ModelParameters.init(validationData:maxDepth:maxIterations:minLossReduction:minChildWeight:randomSeed:rowSubsample:columnSubsample:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;

  v9 = *a1;
  v10 = *((_BYTE *)a1 + 8);
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 32) = a2;
  *(_QWORD *)(a5 + 40) = a3;
  *(double *)(a5 + 48) = a6;
  *(double *)(a5 + 56) = a7;
  *(_QWORD *)(a5 + 64) = a4;
  *(double *)(a5 + 72) = a8;
  *(double *)(a5 + 80) = a9;
  v11 = v9;
  v12 = v10;
  MLRandomForestClassifier.ModelParameters.validationData.setter((uint64_t)&v11);
}

void MLRandomForestClassifier.ModelParameters.init(configuration:validation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v19;
  uint64_t v20[4];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLRandomForestClassifier.ModelParameters.ValidationData?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_49();
  v10 = v9 - v8;
  v11 = OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v12);
  *(double *)&v13 = OUTLINED_FUNCTION_7_13();
  *(_OWORD *)a3 = v13;
  *(_OWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 32) = BoostedTreeConfiguration.maximumDepth.getter();
  *(_QWORD *)(a3 + 40) = BoostedTreeConfiguration.maximumIterations.getter();
  BoostedTreeConfiguration.minimumLossReduction.getter();
  *(_QWORD *)(a3 + 48) = v14;
  BoostedTreeConfiguration.minimumChildWeight.getter();
  *(_QWORD *)(a3 + 56) = v15;
  *(_QWORD *)(a3 + 64) = BoostedTreeConfiguration.randomSeed.getter();
  BoostedTreeConfiguration.rowSubsample.getter();
  *(_QWORD *)(a3 + 72) = v16;
  BoostedTreeConfiguration.columnSubsample.getter();
  *(_QWORD *)(a3 + 80) = v17;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF11TabularData0D5FrameV_s5NeverO8CreateML24MLRandomForestClassifierV15ModelParametersV010ValidationD0OTg503_s8g4ML24ijk3V15lm76V13configuration10validationAE0A12MLComponents24BoostedTreeConfigurationV_11c7Data0O5e12VSgtcfcAE010N21O0OAMcAPmcfu_ApMcfu0_AOXMtTf1ncn_n(a2, v10);
  if (__swift_getEnumTagSinglePayload(v10, 1, v11) == 1)
  {
    swift_storeEnumTagMultiPayload();
    outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(v10, &demangling cache variable for type metadata for MLRandomForestClassifier.ModelParameters.ValidationData?);
  }
  else
  {
    outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData(v10, v3);
  }
  v20[3] = v11;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v20);
  OUTLINED_FUNCTION_12_28((uint64_t)boxed_opaque_existential_0);
  OUTLINED_FUNCTION_17_0((uint64_t)v20);
  outlined destroy of MLBoostedTreeRegressor.ModelParameters.ValidationData?(a2, &demangling cache variable for type metadata for DataFrame?);
  v19 = type metadata accessor for BoostedTreeConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
  OUTLINED_FUNCTION_8_0();
}

uint64_t MLRandomForestClassifier.ModelParameters.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  OUTLINED_FUNCTION_12_0();
  v1._countAndFlagsBits = 10;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = OUTLINED_FUNCTION_5_30();
  OUTLINED_FUNCTION_13_0(v46);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_0_1();
  v2._countAndFlagsBits = 0xD000000000000010;
  v2._object = (void *)0x800000021AFF13A0;
  String.append(_:)(v2);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(23);
  OUTLINED_FUNCTION_14_0();
  v47._countAndFlagsBits = 0xD000000000000014;
  v47._object = (void *)0x800000021AFF13C0;
  OUTLINED_FUNCTION_13_0(v47);
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_0(v3, v4, v5, v6, v7, v8, v9, v10, v37, v41, 0xD000000000000010, (void *)0x800000021AFF13A0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_6_0((uint64_t)"Min Child Weight: ");
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_0(v11, v12, v13, v14, v15, v16, v17, v18, v38, v42, v45._countAndFlagsBits, v45._object);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v45, "Random Seed: ");
  HIWORD(v45._object) = -4864;
  v48._countAndFlagsBits = OUTLINED_FUNCTION_5_30();
  OUTLINED_FUNCTION_13_0(v48);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_8(v19, v20, v21, v22, v23, v24, v25, v26, v39, v43, v45._countAndFlagsBits, v45._object);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_9_0();
  _StringGuts.grow(_:)(18);
  OUTLINED_FUNCTION_14_0();
  v27._countAndFlagsBits = 0x7362755320776F52;
  v27._object = (void *)0xEF203A656C706D61;
  String.append(_:)(v27);
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_11_8(v28, v29, v30, v31, v32, v33, v34, v35, v40, v44, v45._countAndFlagsBits, v45._object);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_6_0((uint64_t)"Column Subsample: ");
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_0_1();
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  return 0x747065442078614DLL;
}

uint64_t MLRandomForestClassifier.ModelParameters.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MLRandomForestClassifier.ModelParameters.description.getter();
  a1[3] = MEMORY[0x24BEE0D00];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21AEBD330()
{
  return MLRandomForestClassifier.ModelParameters.validation.getter();
}

uint64_t initializeWithCopy for MLRandomForestClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for MLRandomForestClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for MLRandomForestClassifier.ModelParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLRandomForestClassifier.ModelParameters(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 88))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLRandomForestClassifier.ModelParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLRandomForestClassifier.ModelParameters()
{
  return &type metadata for MLRandomForestClassifier.ModelParameters;
}

uint64_t OUTLINED_FUNCTION_3_33()
{
  return type metadata accessor for MLRandomForestClassifier.ModelParameters.ValidationData();
}

uint64_t OUTLINED_FUNCTION_5_30()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_12_28(uint64_t a1)
{
  uint64_t v1;

  return outlined init with take of MLRandomForestClassifier.ModelParameters.ValidationData(v1, a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.MLP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Dense();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t destroy for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for Dense();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Dense();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Dense();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Dense();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.MLP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Dense();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.MLP()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBD884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE6BCD0]);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.MLP()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBD89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BE6BCD0]);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.MLP(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.MLP);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.MLP()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Dense();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.CausalConv1D(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Conv1D();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *(_DWORD *)((char *)v4 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t destroy for MLFewShotSoundClassifier.CausalConv1D(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for Conv1D();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *initializeWithCopy for MLFewShotSoundClassifier.CausalConv1D(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Conv1D();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithCopy for MLFewShotSoundClassifier.CausalConv1D(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Conv1D();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *initializeWithTake for MLFewShotSoundClassifier.CausalConv1D(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Conv1D();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *assignWithTake for MLFewShotSoundClassifier.CausalConv1D(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Conv1D();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.CausalConv1D()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBDBF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_68_9();
  v0 = OUTLINED_FUNCTION_45_11();
  return OUTLINED_FUNCTION_16_24(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.CausalConv1D()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBDC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_68_9();
  v0 = OUTLINED_FUNCTION_27_25();
  return OUTLINED_FUNCTION_17_19(v0, v1, v2, v3);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.CausalConv1D);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.CausalConv1D()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Conv1D();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.ConvolutionalNetwork(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Conv2D();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
    *(_DWORD *)&a1[*(int *)(v8 + 20)] = *(_DWORD *)((char *)a2 + *(int *)(v8 + 20));
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    *(_OWORD *)&a1[v9] = *(_OWORD *)((char *)a2 + v9);
    v12 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
    v13 = *(int *)(v12 + 20);
    v14 = &v10[v13];
    v15 = &v11[v13];
    v16 = type metadata accessor for Conv1D();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    *(_DWORD *)&v10[*(int *)(v12 + 24)] = *(_DWORD *)&v11[*(int *)(v12 + 24)];
    v18 = a3[6];
    v19 = &a1[v18];
    v20 = (char *)a2 + v18;
    *(_OWORD *)&a1[v18] = *(_OWORD *)((char *)a2 + v18);
    v17(&a1[v18 + *(int *)(v12 + 20)], (char *)a2 + v18 + *(int *)(v12 + 20), v16);
    *(_DWORD *)&v19[*(int *)(v12 + 24)] = *(_DWORD *)&v20[*(int *)(v12 + 24)];
    v21 = a3[7];
    v22 = &a1[v21];
    v23 = (char *)a2 + v21;
    *(_OWORD *)&a1[v21] = *(_OWORD *)((char *)a2 + v21);
    v17(&a1[v21 + *(int *)(v12 + 20)], (char *)a2 + v21 + *(int *)(v12 + 20), v16);
    *(_DWORD *)&v22[*(int *)(v12 + 24)] = *(_DWORD *)&v23[*(int *)(v12 + 24)];
    v24 = a3[8];
    v25 = &a1[v24];
    v26 = (char *)a2 + v24;
    *(_OWORD *)&a1[v24] = *(_OWORD *)v26;
    v17(&a1[v24 + *(int *)(v12 + 20)], &v26[*(int *)(v12 + 20)], v16);
    *(_DWORD *)&v25[*(int *)(v12 + 24)] = *(_DWORD *)&v26[*(int *)(v12 + 24)];
  }
  return a1;
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.LeakyConv2D);
}

uint64_t destroy for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v7 = v5 + *(int *)(v6 + 20);
  v8 = type metadata accessor for Conv1D();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v10(v7, v8);
  v10(a1 + a2[6] + *(int *)(v6 + 20), v8);
  v10(a1 + a2[7] + *(int *)(v6 + 20), v8);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(a1 + a2[8] + *(int *)(v6 + 20), v8);
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v6 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v7 + 20)) = *(_DWORD *)(a2 + *(int *)(v7 + 20));
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v12 = *(int *)(v11 + 20);
  v13 = v9 + v12;
  v14 = (char *)(v10 + v12);
  v15 = type metadata accessor for Conv1D();
  v16 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  *(_DWORD *)(v9 + *(int *)(v11 + 24)) = *(_DWORD *)(v10 + *(int *)(v11 + 24));
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v16(a1 + v17 + *(int *)(v11 + 20), (char *)(a2 + v17 + *(int *)(v11 + 20)), v15);
  *(_DWORD *)(v18 + *(int *)(v11 + 24)) = *(_DWORD *)(v19 + *(int *)(v11 + 24));
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  v16(a1 + v20 + *(int *)(v11 + 20), (char *)(a2 + v20 + *(int *)(v11 + 20)), v15);
  *(_DWORD *)(v21 + *(int *)(v11 + 24)) = *(_DWORD *)(v22 + *(int *)(v11 + 24));
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = (char *)(a2 + v23);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)v25;
  v16(a1 + v23 + *(int *)(v11 + 20), &v25[*(int *)(v11 + 20)], v15);
  *(_DWORD *)(v24 + *(int *)(v11 + 24)) = *(_DWORD *)&v25[*(int *)(v11 + 24)];
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v6 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v7 + 20)) = *(_DWORD *)(a2 + *(int *)(v7 + 20));
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = a2 + v8;
  *v9 = *(_QWORD *)(a2 + v8);
  v9[1] = *(_QWORD *)(a2 + v8 + 8);
  v11 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v12 = *(int *)(v11 + 20);
  v13 = (char *)v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for Conv1D();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v16(v13, v14, v15);
  *(_DWORD *)((char *)v9 + *(int *)(v11 + 24)) = *(_DWORD *)(v10 + *(int *)(v11 + 24));
  v17 = a3[6];
  v18 = (_QWORD *)(a1 + v17);
  v19 = a2 + v17;
  *v18 = *(_QWORD *)(a2 + v17);
  v18[1] = *(_QWORD *)(a2 + v17 + 8);
  v16((char *)(a1 + v17 + *(int *)(v11 + 20)), a2 + v17 + *(int *)(v11 + 20), v15);
  *(_DWORD *)((char *)v18 + *(int *)(v11 + 24)) = *(_DWORD *)(v19 + *(int *)(v11 + 24));
  v20 = a3[7];
  v21 = (_QWORD *)(a1 + v20);
  v22 = a2 + v20;
  *v21 = *(_QWORD *)(a2 + v20);
  v21[1] = *(_QWORD *)(a2 + v20 + 8);
  v16((char *)(a1 + v20 + *(int *)(v11 + 20)), a2 + v20 + *(int *)(v11 + 20), v15);
  *(_DWORD *)((char *)v21 + *(int *)(v11 + 24)) = *(_DWORD *)(v22 + *(int *)(v11 + 24));
  v23 = a3[8];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  v16((char *)(a1 + v23 + *(int *)(v11 + 20)), (uint64_t)v25 + *(int *)(v11 + 20), v15);
  *(_DWORD *)((char *)v24 + *(int *)(v11 + 24)) = *(_DWORD *)((char *)v25 + *(int *)(v11 + 24));
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v6 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v7 + 20)) = *(_DWORD *)(a2 + *(int *)(v7 + 20));
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v12 = *(int *)(v11 + 20);
  v13 = v9 + v12;
  v14 = (char *)(v10 + v12);
  v15 = type metadata accessor for Conv1D();
  v16 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  *(_DWORD *)(v9 + *(int *)(v11 + 24)) = *(_DWORD *)(v10 + *(int *)(v11 + 24));
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v16(a1 + v17 + *(int *)(v11 + 20), (char *)(a2 + v17 + *(int *)(v11 + 20)), v15);
  *(_DWORD *)(v18 + *(int *)(v11 + 24)) = *(_DWORD *)(v19 + *(int *)(v11 + 24));
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  v16(a1 + v20 + *(int *)(v11 + 20), (char *)(a2 + v20 + *(int *)(v11 + 20)), v15);
  *(_DWORD *)(v21 + *(int *)(v11 + 24)) = *(_DWORD *)(v22 + *(int *)(v11 + 24));
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = (char *)(a2 + v23);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)v25;
  v16(a1 + v23 + *(int *)(v11 + 20), &v25[*(int *)(v11 + 20)], v15);
  *(_DWORD *)(v24 + *(int *)(v11 + 24)) = *(_DWORD *)&v25[*(int *)(v11 + 24)];
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v6 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v7 + 20)) = *(_DWORD *)(a2 + *(int *)(v7 + 20));
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v12 = *(int *)(v11 + 20);
  v13 = v9 + v12;
  v14 = (char *)(v10 + v12);
  v15 = type metadata accessor for Conv1D();
  v16 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  *(_DWORD *)(v9 + *(int *)(v11 + 24)) = *(_DWORD *)(v10 + *(int *)(v11 + 24));
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v16(a1 + v17 + *(int *)(v11 + 20), (char *)(a2 + v17 + *(int *)(v11 + 20)), v15);
  *(_DWORD *)(v18 + *(int *)(v11 + 24)) = *(_DWORD *)(v19 + *(int *)(v11 + 24));
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  v16(a1 + v20 + *(int *)(v11 + 20), (char *)(a2 + v20 + *(int *)(v11 + 20)), v15);
  *(_DWORD *)(v21 + *(int *)(v11 + 24)) = *(_DWORD *)(v22 + *(int *)(v11 + 24));
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = (char *)(a2 + v23);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)v25;
  v16(a1 + v23 + *(int *)(v11 + 20), &v25[*(int *)(v11 + 20)], v15);
  *(_DWORD *)(v24 + *(int *)(v11 + 24)) = *(_DWORD *)&v25[*(int *)(v11 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.ConvolutionalNetwork()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBE57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3Tm(a1, a2, a3, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.ConvolutionalNetwork()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBE59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_4Tm(a1, a2, a3, a4, type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D, type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.ConvolutionalNetwork);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.ConvolutionalNetwork()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.LeakyConv2D(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Conv2D();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Conv2D();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.LeakyConv2D()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBE884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_48_10();
  v0 = OUTLINED_FUNCTION_45_11();
  return OUTLINED_FUNCTION_16_24(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.LeakyConv2D()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBE8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_48_10();
  v0 = OUTLINED_FUNCTION_27_25();
  return OUTLINED_FUNCTION_17_19(v0, v1, v2, v3);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.LeakyConv2D()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Conv2D();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.TemporalClassifier(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for Conv2D();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
    *(_DWORD *)&a1[*(int *)(v7 + 20)] = *(_DWORD *)((char *)a2 + *(int *)(v7 + 20));
    v8 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    *(_OWORD *)&a1[v9] = *(_OWORD *)((char *)a2 + v9);
    v12 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
    v13 = *(int *)(v12 + 20);
    v14 = &v10[v13];
    v15 = &v11[v13];
    v16 = type metadata accessor for Conv1D();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    *(_DWORD *)&v10[*(int *)(v12 + 24)] = *(_DWORD *)&v11[*(int *)(v12 + 24)];
    v18 = v8[6];
    v19 = &a1[v18];
    v20 = (char *)a2 + v18;
    *(_OWORD *)&a1[v18] = *(_OWORD *)((char *)a2 + v18);
    v17(&a1[v18 + *(int *)(v12 + 20)], (char *)a2 + v18 + *(int *)(v12 + 20), v16);
    *(_DWORD *)&v19[*(int *)(v12 + 24)] = *(_DWORD *)&v20[*(int *)(v12 + 24)];
    v21 = v8[7];
    v22 = &a1[v21];
    v23 = (char *)a2 + v21;
    *(_OWORD *)&a1[v21] = *(_OWORD *)((char *)a2 + v21);
    v17(&a1[v21 + *(int *)(v12 + 20)], (char *)a2 + v21 + *(int *)(v12 + 20), v16);
    *(_DWORD *)&v22[*(int *)(v12 + 24)] = *(_DWORD *)&v23[*(int *)(v12 + 24)];
    v24 = v8[8];
    v25 = &a1[v24];
    v26 = (char *)a2 + v24;
    *(_OWORD *)&a1[v24] = *(_OWORD *)((char *)a2 + v24);
    v17(&a1[v24 + *(int *)(v12 + 20)], (char *)a2 + v24 + *(int *)(v12 + 20), v16);
    *(_DWORD *)&v25[*(int *)(v12 + 24)] = *(_DWORD *)&v26[*(int *)(v12 + 24)];
    v27 = *(int *)(a3 + 20);
    v28 = &a1[v27];
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for Dense();
    v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
    v31(v28, v29, v30);
    v32 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
    v31(&v28[*(int *)(v32 + 20)], &v29[*(int *)(v32 + 20)], v30);
  }
  return a1;
}

uint64_t destroy for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(uint64_t, uint64_t);

  v4 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  v6 = a1 + v5[5];
  v7 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v8 = v6 + *(int *)(v7 + 20);
  v9 = type metadata accessor for Conv1D();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(a1 + v5[6] + *(int *)(v7 + 20), v9);
  v10(a1 + v5[7] + *(int *)(v7 + 20), v9);
  v10(a1 + v5[8] + *(int *)(v7 + 20), v9);
  v11 = a1 + *(int *)(a2 + 20);
  v12 = type metadata accessor for Dense();
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v15(v11, v12);
  v13 = v11 + *(int *)(type metadata accessor for MLFewShotSoundClassifier.MLP(0) + 20);
  return ((uint64_t (*)(uint64_t, uint64_t))v15)(v13, v12);
}

uint64_t initializeWithCopy for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;

  v5 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  v6 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v6 + 20)) = *(_DWORD *)(a2 + *(int *)(v6 + 20));
  v7 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v12 = *(int *)(v11 + 20);
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for Conv1D();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  *(_DWORD *)(v9 + *(int *)(v11 + 24)) = *(_DWORD *)(v10 + *(int *)(v11 + 24));
  v17 = v7[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v16(a1 + v17 + *(int *)(v11 + 20), a2 + v17 + *(int *)(v11 + 20), v15);
  *(_DWORD *)(v18 + *(int *)(v11 + 24)) = *(_DWORD *)(v19 + *(int *)(v11 + 24));
  v20 = v7[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  v16(a1 + v20 + *(int *)(v11 + 20), a2 + v20 + *(int *)(v11 + 20), v15);
  *(_DWORD *)(v21 + *(int *)(v11 + 24)) = *(_DWORD *)(v22 + *(int *)(v11 + 24));
  v23 = v7[8];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  v16(a1 + v23 + *(int *)(v11 + 20), a2 + v23 + *(int *)(v11 + 20), v15);
  *(_DWORD *)(v24 + *(int *)(v11 + 24)) = *(_DWORD *)(v25 + *(int *)(v11 + 24));
  v26 = *(int *)(a3 + 20);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for Dense();
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
  v30(v27, v28, v29);
  v31 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v30(v27 + *(int *)(v31 + 20), v28 + *(int *)(v31 + 20), v29);
  return a1;
}

uint64_t assignWithCopy for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;

  v5 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a1, a2, v5);
  v6 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v6 + 20)) = *(_DWORD *)(a2 + *(int *)(v6 + 20));
  v7 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = a2 + v8;
  *v9 = *(_QWORD *)(a2 + v8);
  v9[1] = *(_QWORD *)(a2 + v8 + 8);
  v11 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v12 = *(int *)(v11 + 20);
  v13 = (char *)v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for Conv1D();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v16(v13, v14, v15);
  *(_DWORD *)((char *)v9 + *(int *)(v11 + 24)) = *(_DWORD *)(v10 + *(int *)(v11 + 24));
  v17 = v7[6];
  v18 = (_QWORD *)(a1 + v17);
  v19 = a2 + v17;
  *v18 = *(_QWORD *)(a2 + v17);
  v18[1] = *(_QWORD *)(a2 + v17 + 8);
  v16((char *)(a1 + v17 + *(int *)(v11 + 20)), a2 + v17 + *(int *)(v11 + 20), v15);
  *(_DWORD *)((char *)v18 + *(int *)(v11 + 24)) = *(_DWORD *)(v19 + *(int *)(v11 + 24));
  v20 = v7[7];
  v21 = (_QWORD *)(a1 + v20);
  v22 = a2 + v20;
  *v21 = *(_QWORD *)(a2 + v20);
  v21[1] = *(_QWORD *)(a2 + v20 + 8);
  v16((char *)(a1 + v20 + *(int *)(v11 + 20)), a2 + v20 + *(int *)(v11 + 20), v15);
  *(_DWORD *)((char *)v21 + *(int *)(v11 + 24)) = *(_DWORD *)(v22 + *(int *)(v11 + 24));
  v23 = v7[8];
  v24 = (_QWORD *)(a1 + v23);
  v25 = a2 + v23;
  *v24 = *(_QWORD *)(a2 + v23);
  v24[1] = *(_QWORD *)(a2 + v23 + 8);
  v16((char *)(a1 + v23 + *(int *)(v11 + 20)), a2 + v23 + *(int *)(v11 + 20), v15);
  *(_DWORD *)((char *)v24 + *(int *)(v11 + 24)) = *(_DWORD *)(v25 + *(int *)(v11 + 24));
  v26 = *(int *)(a3 + 20);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for Dense();
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 24);
  v30(v27, v28, v29);
  v31 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v30(v27 + *(int *)(v31 + 20), v28 + *(int *)(v31 + 20), v29);
  return a1;
}

uint64_t initializeWithTake for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;

  v5 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  v6 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v6 + 20)) = *(_DWORD *)(a2 + *(int *)(v6 + 20));
  v7 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v12 = *(int *)(v11 + 20);
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for Conv1D();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  *(_DWORD *)(v9 + *(int *)(v11 + 24)) = *(_DWORD *)(v10 + *(int *)(v11 + 24));
  v17 = v7[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v16(a1 + v17 + *(int *)(v11 + 20), a2 + v17 + *(int *)(v11 + 20), v15);
  *(_DWORD *)(v18 + *(int *)(v11 + 24)) = *(_DWORD *)(v19 + *(int *)(v11 + 24));
  v20 = v7[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  v16(a1 + v20 + *(int *)(v11 + 20), a2 + v20 + *(int *)(v11 + 20), v15);
  *(_DWORD *)(v21 + *(int *)(v11 + 24)) = *(_DWORD *)(v22 + *(int *)(v11 + 24));
  v23 = v7[8];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  v16(a1 + v23 + *(int *)(v11 + 20), a2 + v23 + *(int *)(v11 + 20), v15);
  *(_DWORD *)(v24 + *(int *)(v11 + 24)) = *(_DWORD *)(v25 + *(int *)(v11 + 24));
  v26 = *(int *)(a3 + 20);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for Dense();
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32);
  v30(v27, v28, v29);
  v31 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v30(v27 + *(int *)(v31 + 20), v28 + *(int *)(v31 + 20), v29);
  return a1;
}

uint64_t assignWithTake for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;

  v5 = type metadata accessor for Conv2D();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a1, a2, v5);
  v6 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  *(_DWORD *)(a1 + *(int *)(v6 + 20)) = *(_DWORD *)(a2 + *(int *)(v6 + 20));
  v7 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  v12 = *(int *)(v11 + 20);
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for Conv1D();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  *(_DWORD *)(v9 + *(int *)(v11 + 24)) = *(_DWORD *)(v10 + *(int *)(v11 + 24));
  v17 = v7[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v16(a1 + v17 + *(int *)(v11 + 20), a2 + v17 + *(int *)(v11 + 20), v15);
  *(_DWORD *)(v18 + *(int *)(v11 + 24)) = *(_DWORD *)(v19 + *(int *)(v11 + 24));
  v20 = v7[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  v16(a1 + v20 + *(int *)(v11 + 20), a2 + v20 + *(int *)(v11 + 20), v15);
  *(_DWORD *)(v21 + *(int *)(v11 + 24)) = *(_DWORD *)(v22 + *(int *)(v11 + 24));
  v23 = v7[8];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  v16(a1 + v23 + *(int *)(v11 + 20), a2 + v23 + *(int *)(v11 + 20), v15);
  *(_DWORD *)(v24 + *(int *)(v11 + 24)) = *(_DWORD *)(v25 + *(int *)(v11 + 24));
  v26 = *(int *)(a3 + 20);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for Dense();
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 40);
  v30(v27, v28, v29);
  v31 = type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  v30(v27 + *(int *)(v31 + 20), v28 + *(int *)(v31 + 20), v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.TemporalClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBF400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_3Tm(a1, a2, a3, type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork, type metadata accessor for MLFewShotSoundClassifier.MLP);
}

uint64_t __swift_get_extra_inhabitant_index_3Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = OUTLINED_FUNCTION_49_8(a1, a2, a3, a4);
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v5)
  {
    v10 = v9;
    v11 = v6;
  }
  else
  {
    v10 = a5(0);
    v11 = v6 + *(int *)(a3 + 20);
  }
  return __swift_getEnumTagSinglePayload(v11, v5, v10);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.TemporalClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEBF480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_4Tm(a1, a2, a3, a4, type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork, type metadata accessor for MLFewShotSoundClassifier.MLP);
}

uint64_t __swift_store_extra_inhabitant_index_4Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = a3;
  v11 = OUTLINED_FUNCTION_47_12(a1, a2, a3, a4, a5);
  if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == v10)
  {
    v12 = v11;
    v13 = v7;
  }
  else
  {
    v12 = a6(0);
    v13 = v7 + *(int *)(a4 + 20);
  }
  return __swift_storeEnumTagSinglePayload(v13, v6, v6, v12);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.TemporalClassifier);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.TemporalClassifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MLFewShotSoundClassifier.MLP(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void MLFewShotSoundClassifier.TemporalClassifier.init(outputs:inputChannels:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_51_12();
  OUTLINED_FUNCTION_67_9();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_53_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_49();
  type metadata accessor for ParameterInitializer();
  type metadata accessor for ComputeDevice();
  OUTLINED_FUNCTION_32_14();
  OUTLINED_FUNCTION_38_12();
  static ParameterInitializer.randomNormal(mean:standardDeviation:seed:scalarType:on:)();
  OUTLINED_FUNCTION_59_9();
  static ParameterInitializer.zeros.getter();
  OUTLINED_FUNCTION_32_14();
  OUTLINED_FUNCTION_38_12();
  static ParameterInitializer.glorotUniform(seed:scalarType:on:)();
  OUTLINED_FUNCTION_59_9();
  static ParameterInitializer.zeros.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLFewShotSoundClassifier.CausalConv1D>);
  OUTLINED_FUNCTION_28_20();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_21AFE7D90;
  OUTLINED_FUNCTION_51_11();
  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_44_16();
}

void sub_21AEBF6E8()
{
  OUTLINED_FUNCTION_51_11();
  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_15_22();
  OUTLINED_FUNCTION_44_16();
}

void sub_21AEBF700()
{
  OUTLINED_FUNCTION_51_11();
  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_15_22();
  OUTLINED_FUNCTION_44_16();
}

void sub_21AEBF718()
{
  OUTLINED_FUNCTION_51_11();
  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_15_22();
  OUTLINED_FUNCTION_44_16();
}

void sub_21AEBF734()
{
  OUTLINED_FUNCTION_51_11();
  static ParameterInitializer.zeros.getter();
  Conv2D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)();
  OUTLINED_FUNCTION_65_12();
}

void sub_21AEBF77C(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 - 112);
  *(float *)(v2 + *(int *)(*(_QWORD *)(v3 - 120) + 20)) = a1;
  MLFewShotSoundClassifier.ConvolutionalNetwork.init(causal:featureReduction:)(v1, v2, v4);
  type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_71_7();
  type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  swift_retain();
  OUTLINED_FUNCTION_71_7();
  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_8_31();
}

uint64_t MLFewShotSoundClassifier.CausalPadding.forward(_:)()
{
  return Layer.callAsFunction(_:)();
}

uint64_t protocol witness for Layer.forward(_:) in conformance MLFewShotSoundClassifier.CausalPadding()
{
  return MLFewShotSoundClassifier.CausalPadding.forward(_:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.CausalPadding()
{
  lazy protocol witness table accessor for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding();
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.CausalPadding()
{
  lazy protocol witness table accessor for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding();
  return Layer.placed(on:)();
}

void MLFewShotSoundClassifier.CausalConv1D.init(alpha:kernelSize:stride:dilation:weight:bias:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_51_12();
  a21 = v23;
  a22 = v24;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&a9 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = OUTLINED_FUNCTION_10_27();
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_55_0();
  if (__OFSUB__(v32, 1))
  {
    __break(1u);
  }
  else if ((unsigned __int128)(v30 * (__int128)(v32 - 1)) >> 64 == (v30 * (v32 - 1)) >> 63)
  {
    *v34 = ZeroPad1D.init(size:)();
    v34[1] = v40;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v22, v28, v38);
    outlined init with copy of Tensor?(v26, (uint64_t)v37);
    OUTLINED_FUNCTION_28_20();
    OUTLINED_FUNCTION_54_9();
    Conv1D.init(weight:bias:stride:padding:dilation:groupCount:)();
    OUTLINED_FUNCTION_65_12();
  }
  __break(1u);
}

void MLFewShotSoundClassifier.CausalConv1D.init(alpha:filterCount:kernelSize:stride:dilation:weightInitializer:biasInitializer:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_51_12();
  v3 = v2;
  if (__OFSUB__(v0, 1))
  {
    __break(1u);
  }
  else if ((unsigned __int128)(v1 * (__int128)(v0 - 1)) >> 64 == (v1 * (v0 - 1)) >> 63)
  {
    *v2 = ZeroPad1D.init(size:)();
    v3[1] = v4;
    OUTLINED_FUNCTION_28_20();
    swift_retain();
    swift_retain();
    OUTLINED_FUNCTION_54_9();
    Conv1D.init(filterCount:kernelSize:stride:padding:dilation:groupCount:weightInitializer:biasInitializer:)();
    OUTLINED_FUNCTION_65_12();
  }
  __break(1u);
}

uint64_t MLFewShotSoundClassifier.CausalConv1D.forward(_:)()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(char *, uint64_t);
  __int128 v11;
  int v12;

  v1 = OUTLINED_FUNCTION_10_27();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  v5 = (char *)(v3 - v4);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - v7;
  v12 = *(_DWORD *)((char *)v0 + *(int *)(OUTLINED_FUNCTION_28_20() + 24));
  v11 = *v0;
  lazy protocol witness table accessor for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_68_9();
  Layer.callAsFunction(_:)();
  v9 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  v9(v5, v1);
  Layer.callAsFunction(_:)();
  return v9(v8, v1);
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.CausalConv1D()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.CausalConv1D()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
  return Layer.placed(on:)();
}

void MLFewShotSoundClassifier.MLP.forward(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_10_27();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_127_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_60_10();
  v10 = type metadata accessor for Dense();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = OUTLINED_FUNCTION_67_2();
  v13 = type metadata accessor for MLFewShotSoundClassifier.MLP(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v3, v0 + *(int *)(v13 + 20), v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TensorRangeExpression?>);
  v14 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v14 + 16) = xmmword_21AFE7F40;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  v15 = MEMORY[0x24BE6C248];
  *(_QWORD *)(v14 + 136) = MEMORY[0x24BEE1768];
  *(_QWORD *)(v14 + 144) = v15;
  *(_QWORD *)(v14 + 112) = -1;
  Tensor.subscript.getter();
  swift_bridgeObjectRelease();
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_55_11(v7);
  relu(_:)();
  OUTLINED_FUNCTION_55_11(v2);
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_55_11(v1);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, v10);
  OUTLINED_FUNCTION_9_5();
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.MLP()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.MLP);
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.MLP()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.MLP);
  return Layer.placed(on:)();
}

void MLFewShotSoundClassifier.LeakyConv2D.forward(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  OUTLINED_FUNCTION_20_3();
  v33 = v0;
  v36 = v1;
  v35 = OUTLINED_FUNCTION_10_27();
  v32 = *(_QWORD *)(v35 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_50();
  v5 = v3 - v4;
  MEMORY[0x24BDAC7A8](v6);
  v34 = (char *)&v26 - v7;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v8);
  v31 = (char *)&v26 - v9;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v26 - v11;
  v13 = type metadata accessor for TensorShape();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_49();
  v17 = v16 - v15;
  OUTLINED_FUNCTION_36_15();
  v18 = OUTLINED_FUNCTION_69_7();
  v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  OUTLINED_FUNCTION_52_8();
  OUTLINED_FUNCTION_36_15();
  v28 = OUTLINED_FUNCTION_69_7();
  OUTLINED_FUNCTION_52_8();
  OUTLINED_FUNCTION_36_15();
  v20 = OUTLINED_FUNCTION_69_7();
  v19(v17, v13);
  Tensor.transposed(permutation:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v21 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v21 + 16) = xmmword_21AFE7D90;
  v29 = v20;
  v30 = v18;
  if ((unsigned __int128)(v18 * (__int128)v20) >> 64 == (v18 * v20) >> 63)
  {
    *(_QWORD *)(v21 + 32) = v18 * v20;
    *(_QWORD *)(v21 + 40) = 1;
    *(_QWORD *)(v21 + 48) = v28;
    *(_QWORD *)(v21 + 56) = 1;
    MEMORY[0x220758C74]();
    v22 = (uint64_t)v31;
    v27 = v12;
    Tensor.reshaped(to:)();
    v26 = v19;
    v19(v17, v13);
    v37 = *(_DWORD *)(v33 + *(int *)(OUTLINED_FUNCTION_67_9() + 20));
    type metadata accessor for Conv2D();
    Layer.callAsFunction(_:)();
    v23 = (uint64_t)v34;
    Layer.callAsFunction(_:)();
    OUTLINED_FUNCTION_31_16(v5);
    v24 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v24 + 16) = xmmword_21AFE7F40;
    v25 = v29;
    *(_QWORD *)(v24 + 32) = v30;
    *(_QWORD *)(v24 + 40) = v25;
    *(_QWORD *)(v24 + 48) = MEMORY[0x220758F8C]();
    MEMORY[0x220758C74](v24);
    Tensor.reshaped(to:)();
    v26(v17, v13);
    Tensor.transposed(permutation:)();
    OUTLINED_FUNCTION_31_16(v5);
    OUTLINED_FUNCTION_31_16(v23);
    OUTLINED_FUNCTION_31_16(v22);
    OUTLINED_FUNCTION_31_16((uint64_t)v27);
    OUTLINED_FUNCTION_9_5();
  }
  else
  {
    __break(1u);
  }
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.LeakyConv2D()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D);
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.LeakyConv2D()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D);
  return Layer.placed(on:)();
}

uint64_t MLFewShotSoundClassifier.ConvolutionalNetwork.init(causal:featureReduction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = (int *)result;
  v9 = a3 + *(int *)(result + 20);
  v10 = *(_QWORD *)(OUTLINED_FUNCTION_28_20() - 8);
  v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  result = outlined init with copy of MLFewShotSoundClassifier.CausalConv1D(v11, v9);
  if (v7 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(v10 + 72);
  result = outlined init with copy of MLFewShotSoundClassifier.CausalConv1D(v11 + v12, a3 + v8[6]);
  if (v7 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  result = outlined init with copy of MLFewShotSoundClassifier.CausalConv1D(v11 + 2 * v12, a3 + v8[7]);
  if (v7 != 3)
  {
    outlined init with copy of MLFewShotSoundClassifier.CausalConv1D(v11 + 3 * v12, a3 + v8[8]);
    swift_bridgeObjectRelease();
    return outlined init with take of MLFewShotSoundClassifier.LeakyConv2D(a2, a3);
  }
LABEL_9:
  __break(1u);
  return result;
}

void MLFewShotSoundClassifier.ConvolutionalNetwork.forward(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_20_3();
  v21 = v1;
  v2 = OUTLINED_FUNCTION_10_27();
  v20 = *(_QWORD *)(v2 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_208();
  v19 = v4;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - v6;
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_127_3();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - v13;
  OUTLINED_FUNCTION_67_9();
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D);
  Layer.callAsFunction(_:)();
  type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(0);
  OUTLINED_FUNCTION_28_20();
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  OUTLINED_FUNCTION_23_19();
  v15 = v19;
  OUTLINED_FUNCTION_23_19();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v2);
  v16 = v21;
  OUTLINED_FUNCTION_22_17(v21, (uint64_t)v11);
  v17 = (int *)type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork.Output(0);
  OUTLINED_FUNCTION_22_17(v16 + v17[5], v0);
  OUTLINED_FUNCTION_22_17(v16 + v17[6], (uint64_t)v7);
  OUTLINED_FUNCTION_22_17(v16 + v17[7], v15);
  OUTLINED_FUNCTION_9_5();
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.ConvolutionalNetwork()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork);
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.ConvolutionalNetwork()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork);
  return Layer.placed(on:)();
}

uint64_t MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v73 = a3;
  v71 = a1;
  v72 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  v70 = v8 - v7;
  v9 = type metadata accessor for ScalarType();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_55_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_49();
  v17 = v16 - v15;
  type metadata accessor for TensorShape();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Tensor();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_53_0();
  v23 = v74;
  v24 = BlobsFile.floatBlob(at:)(0);
  if (!v23)
  {
    v64 = v10;
    v65 = v20;
    v74 = v24;
    v68 = v3;
    v69 = v12;
    v66 = v17;
    v67 = v4;
    v26 = BlobsFile.floatBlob(at:)(1uLL);
    v27 = BlobsFile.floatBlob(at:)(2uLL);
    v28 = BlobsFile.floatBlob(at:)(3uLL);
    v63 = BlobsFile.floatBlob(at:)(4uLL);
    v62 = v27;
    v29 = BlobsFile.floatBlob(at:)(5uLL);
    v30 = BlobsFile.floatBlob(at:)(6uLL);
    v48 = v29;
    v49 = v30;
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MLFewShotSoundClassifier.CausalConv1D>);
    v31 = *(_QWORD *)(type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0) - 8);
    v56 = *(_QWORD *)(v31 + 72);
    v32 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    v33 = swift_allocObject();
    v51 = xmmword_21AFE7D90;
    *(_OWORD *)(v33 + 16) = xmmword_21AFE7D90;
    v47 = v33;
    v57 = v33 + v32;
    MEMORY[0x220758C74](&outlined read-only object #0 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:));
    v75 = specialized Collection.prefix(_:)(200, v26);
    v76 = v34;
    v77 = v35;
    v78 = v36;
    v61 = type metadata accessor for ComputeDevice();
    v55 = v28;
    v37 = OUTLINED_FUNCTION_14_23();
    __swift_storeEnumTagSinglePayload(v37, v38, v39, v40);
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Float>);
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type ArraySlice<Float> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<Float>);
    v53 = v41;
    OUTLINED_FUNCTION_66_10();
    MEMORY[0x220758C74](&outlined read-only object #1 of MLFewShotSoundClassifier.TemporalClassifier.init(inputChannels:blobsFile:));
    v60 = *MEMORY[0x24BE6B8B8];
    v64 = *(_QWORD *)(v64 + 104);
    v59 = v9;
    ((void (*)(char *))v64)(v69);
    OUTLINED_FUNCTION_29_15();
    v42 = v67;
    OUTLINED_FUNCTION_24_23();
    v58 = v21;
    OUTLINED_FUNCTION_61_8(v42, 0, 1);
    OUTLINED_FUNCTION_40_12(5, 1, 1, v68, v43, v44, v45, v46, v47, v48, v49, v50, v51, *((uint64_t *)&v51 + 1), v52, v53, v54, v55, v56,
      v57,
      v58,
      v59);
  }
  return outlined release of BlobsFile(a2);
}

void sub_21AEC09F8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 328) = v0 + *(_QWORD *)(v1 - 272);
  OUTLINED_FUNCTION_11_28();
}

void sub_21AEC0A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v0 - 120) = specialized Collection.prefix(_:)(160, *(_QWORD *)(v0 - 224));
  *(_QWORD *)(v0 - 112) = v1;
  *(_QWORD *)(v0 - 104) = v2;
  *(_QWORD *)(v0 - 96) = v3;
  v4 = OUTLINED_FUNCTION_14_23();
  __swift_storeEnumTagSinglePayload(v4, v5, v6, *(_QWORD *)(v0 - 232));
  OUTLINED_FUNCTION_20_19();
  OUTLINED_FUNCTION_11_28();
}

#error "21AEC0A8C: call analysis failed (funcsize=15)"

void sub_21AEC0A90()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 328) = *(_QWORD *)(v0 - 264) + 2 * *(_QWORD *)(v0 - 272);
  OUTLINED_FUNCTION_11_28();
}

void sub_21AEC0AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_19_24(*(_QWORD *)(v0 - 280));
  OUTLINED_FUNCTION_58_7(v1, v2, v3);
  *(_QWORD *)(v0 - 224) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type [Float] and conformance [A], &demangling cache variable for type metadata for [Float]);
  *(_QWORD *)(v0 - 280) = v4;
  OUTLINED_FUNCTION_66_10();
  OUTLINED_FUNCTION_11_28();
}

#error "21AEC0B4C: call analysis failed (funcsize=11)"

void sub_21AEC0B50()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 264) += 3 * *(_QWORD *)(v0 - 272);
  OUTLINED_FUNCTION_11_28();
}

void sub_21AEC0B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 - 120) = *(_QWORD *)(v0 - 216);
  v1 = OUTLINED_FUNCTION_14_23();
  OUTLINED_FUNCTION_61_8(v1, v2, v3);
  OUTLINED_FUNCTION_12_29();
  OUTLINED_FUNCTION_11_28();
}

#error "21AEC0BF8: call analysis failed (funcsize=21)"

void sub_21AEC0BFC()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 - 320);
  *(_OWORD *)(v1 + 32) = xmmword_21AFEC010;
  *(_QWORD *)(v1 + 48) = *(_QWORD *)(v0 - 152);
  *(_QWORD *)(v1 + 56) = 1;
  OUTLINED_FUNCTION_11_28();
}

void sub_21AEC0C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((unsigned __int128)(v1 * (__int128)10) >> 64 == (10 * v1) >> 63)
  {
    *(_QWORD *)(v2 - 120) = specialized Collection.prefix(_:)(10 * v1, *(_QWORD *)(v2 - 128));
    *(_QWORD *)(v2 - 112) = v3;
    *(_QWORD *)(v2 - 104) = v4;
    *(_QWORD *)(v2 - 96) = v5;
    OUTLINED_FUNCTION_58_7(v0, 1, 1);
    OUTLINED_FUNCTION_20_19();
    OUTLINED_FUNCTION_11_28();
  }
  __break(1u);
}

void MLFewShotSoundClassifier.TemporalClassifier.forward(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_20_3();
  v4 = v3;
  v19 = *(_QWORD *)(OUTLINED_FUNCTION_10_27() - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_208();
  v20 = v6;
  OUTLINED_FUNCTION_29_3();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - v8;
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_127_3();
  MEMORY[0x24BDAC7A8](v11);
  v12 = OUTLINED_FUNCTION_60_10();
  v13 = type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork.Output(v12);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  v15 = OUTLINED_FUNCTION_67_2();
  type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork(v15);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork);
  Layer.callAsFunction(_:)();
  type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier(0);
  type metadata accessor for MLFewShotSoundClassifier.MLP(0);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.MLP);
  Layer.callAsFunction(_:)();
  OUTLINED_FUNCTION_22_17(v1, v2);
  OUTLINED_FUNCTION_22_17((uint64_t)v9, v2 + *(int *)(v13 + 20));
  v16 = v2 + *(int *)(v13 + 24);
  v17 = v20;
  OUTLINED_FUNCTION_22_17(v20, v16);
  outlined destroy of MLFewShotSoundClassifier.ConvolutionalNetwork.Output(v2);
  OUTLINED_FUNCTION_39_12(v4, v1);
  v18 = (int *)type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier.Output(0);
  OUTLINED_FUNCTION_39_12(v4 + v18[5], (uint64_t)v9);
  OUTLINED_FUNCTION_39_12(v4 + v18[6], v17);
  OUTLINED_FUNCTION_39_12(v4 + v18[7], v0);
  OUTLINED_FUNCTION_9_5();
}

uint64_t protocol witness for _ComputeDevicePlaceable.place(on:) in conformance MLFewShotSoundClassifier.TemporalClassifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
  return Layer.place(on:)();
}

uint64_t protocol witness for _ComputeDevicePlaceable.placed(on:) in conformance MLFewShotSoundClassifier.TemporalClassifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
  return Layer.placed(on:)();
}

void base witness table accessor for _BaseLayer in MLFewShotSoundClassifier.LeakyConv2D()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D);
}

void base witness table accessor for _ComputeDevicePlaceable in MLFewShotSoundClassifier.LeakyConv2D()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D);
}

void base witness table accessor for _Differentiable in MLFewShotSoundClassifier.LeakyConv2D()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.LeakyConv2D and conformance MLFewShotSoundClassifier.LeakyConv2D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D);
}

void base witness table accessor for _BaseLayer in MLFewShotSoundClassifier.ConvolutionalNetwork()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork);
}

void base witness table accessor for _ComputeDevicePlaceable in MLFewShotSoundClassifier.ConvolutionalNetwork()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork);
}

void base witness table accessor for _Differentiable in MLFewShotSoundClassifier.ConvolutionalNetwork()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.ConvolutionalNetwork and conformance MLFewShotSoundClassifier.ConvolutionalNetwork, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork);
}

void base witness table accessor for _BaseLayer in MLFewShotSoundClassifier.CausalConv1D()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
}

void base witness table accessor for _ComputeDevicePlaceable in MLFewShotSoundClassifier.CausalConv1D()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
}

void base witness table accessor for _Differentiable in MLFewShotSoundClassifier.CausalConv1D()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalConv1D and conformance MLFewShotSoundClassifier.CausalConv1D, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.CausalConv1D);
}

void base witness table accessor for _BaseLayer in MLFewShotSoundClassifier.MLP()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.MLP);
}

void base witness table accessor for _ComputeDevicePlaceable in MLFewShotSoundClassifier.MLP()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.MLP);
}

void base witness table accessor for _Differentiable in MLFewShotSoundClassifier.MLP()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.MLP and conformance MLFewShotSoundClassifier.MLP, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.MLP);
}

void base witness table accessor for _BaseLayer in MLFewShotSoundClassifier.TemporalClassifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
}

void base witness table accessor for _ComputeDevicePlaceable in MLFewShotSoundClassifier.TemporalClassifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
}

void base witness table accessor for _Differentiable in MLFewShotSoundClassifier.TemporalClassifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.TemporalClassifier and conformance MLFewShotSoundClassifier.TemporalClassifier, (void (*)(uint64_t))type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier);
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork.Output(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.ConvolutionalNetwork.Output);
}

uint64_t outlined destroy of MLFewShotSoundClassifier.ConvolutionalNetwork.Output(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLFewShotSoundClassifier.ConvolutionalNetwork.Output(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1)
{
  return type metadata accessor for MLImageClassifier.CustomFeatureExtractor(a1, (uint64_t *)&type metadata singleton initialization cache for MLFewShotSoundClassifier.TemporalClassifier.Output);
}

unint64_t lazy protocol witness table accessor for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding;
  if (!lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLFewShotSoundClassifier.CausalPadding, &type metadata for MLFewShotSoundClassifier.CausalPadding);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding;
  if (!lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLFewShotSoundClassifier.CausalPadding, &type metadata for MLFewShotSoundClassifier.CausalPadding);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding;
  if (!lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLFewShotSoundClassifier.CausalPadding, &type metadata for MLFewShotSoundClassifier.CausalPadding);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding;
  if (!lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLFewShotSoundClassifier.CausalPadding, &type metadata for MLFewShotSoundClassifier.CausalPadding);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFewShotSoundClassifier.CausalPadding and conformance MLFewShotSoundClassifier.CausalPadding);
  }
  return result;
}

uint64_t outlined init with copy of MLFewShotSoundClassifier.CausalConv1D(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MLFewShotSoundClassifier.LeakyConv2D(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.TemporalClassifier.Output()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEC1474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE6C048]);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.TemporalClassifier.Output()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEC148C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BE6C048]);
}

void initializeBufferWithCopyOfBuffer for MLFewShotSoundClassifier.TemporalClassifier.Output(_QWORD *a1, _QWORD *a2, int *a3)
{
  if ((*(_DWORD *)(*((_QWORD *)a3 - 1) + 80) & 0x20000) != 0)
  {
    *a1 = *a2;
    swift_retain();
  }
  else
  {
    OUTLINED_FUNCTION_10_27();
    OUTLINED_FUNCTION_2_38((uint64_t)a1, (uint64_t)a2);
    OUTLINED_FUNCTION_1_35((uint64_t)a1 + a3[5], a3[5]);
    OUTLINED_FUNCTION_1_35((uint64_t)a1 + a3[6], a3[6]);
    OUTLINED_FUNCTION_1_35((uint64_t)a1 + a3[7], a3[7]);
  }
  OUTLINED_FUNCTION_164();
}

uint64_t destroy for MLFewShotSoundClassifier.TemporalClassifier.Output(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t (*v32)(uint64_t, uint64_t);

  v4 = OUTLINED_FUNCTION_10_27();
  OUTLINED_FUNCTION_30_17(a1, v5, v6, v7, v8, v9, v10, v11, v27, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8));
  OUTLINED_FUNCTION_30_17(a1 + a2[5], v12, v13, v14, v15, v16, v17, v18, v28, v30);
  OUTLINED_FUNCTION_30_17(a1 + a2[6], v19, v20, v21, v22, v23, v24, v25, v29, v31);
  return v32(a1 + a2[7], v4);
}

void initializeWithCopy for MLFewShotSoundClassifier.TemporalClassifier.Output()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_7_29();
  OUTLINED_FUNCTION_2_38(v2, v1);
  OUTLINED_FUNCTION_0_40(v0[5]);
  OUTLINED_FUNCTION_0_40(v0[6]);
  OUTLINED_FUNCTION_0_40(v0[7]);
  OUTLINED_FUNCTION_164();
}

void assignWithCopy for MLFewShotSoundClassifier.TemporalClassifier.Output()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_7_29();
  OUTLINED_FUNCTION_2_38(v2, v1);
  OUTLINED_FUNCTION_0_40(v0[5]);
  OUTLINED_FUNCTION_0_40(v0[6]);
  OUTLINED_FUNCTION_0_40(v0[7]);
  OUTLINED_FUNCTION_164();
}

void initializeWithTake for MLFewShotSoundClassifier.TemporalClassifier.Output()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_7_29();
  OUTLINED_FUNCTION_2_38(v2, v1);
  OUTLINED_FUNCTION_0_40(v0[5]);
  OUTLINED_FUNCTION_0_40(v0[6]);
  OUTLINED_FUNCTION_0_40(v0[7]);
  OUTLINED_FUNCTION_164();
}

void assignWithTake for MLFewShotSoundClassifier.TemporalClassifier.Output()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_7_29();
  OUTLINED_FUNCTION_2_38(v2, v1);
  OUTLINED_FUNCTION_0_40(v0[5]);
  OUTLINED_FUNCTION_0_40(v0[6]);
  OUTLINED_FUNCTION_0_40(v0[7]);
  OUTLINED_FUNCTION_164();
}

uint64_t getEnumTagSinglePayload for MLFewShotSoundClassifier.ConvolutionalNetwork.Output()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEC1704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE6C048]);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_49_8(a1, a2, a3, a4);
  v4 = OUTLINED_FUNCTION_45_11();
  return OUTLINED_FUNCTION_16_24(v4, v5, v6);
}

uint64_t storeEnumTagSinglePayload for MLFewShotSoundClassifier.ConvolutionalNetwork.Output()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEC1738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BE6C048]);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_47_12(a1, a2, a3, a4, a5);
  v5 = OUTLINED_FUNCTION_27_25();
  return OUTLINED_FUNCTION_17_19(v5, v6, v7, v8);
}

uint64_t type metadata completion function for MLFewShotSoundClassifier.TemporalClassifier.Output()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Tensor();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLFewShotSoundClassifier.CausalPadding()
{
  return &type metadata for MLFewShotSoundClassifier.CausalPadding;
}

uint64_t OUTLINED_FUNCTION_0_40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v2 + a1, v1 + a1, v3);
}

uint64_t OUTLINED_FUNCTION_1_35@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(a1, v2 + a2, v3);
}

uint64_t OUTLINED_FUNCTION_2_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_3_34(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1 - 208))(a1, *(unsigned int *)(v1 - 236), *(_QWORD *)(v1 - 248));
}

uint64_t OUTLINED_FUNCTION_7_29()
{
  return type metadata accessor for Tensor();
}

uint64_t OUTLINED_FUNCTION_10_27()
{
  return type metadata accessor for Tensor();
}

void OUTLINED_FUNCTION_11_28()
{
  JUMPOUT(0x220758C74);
}

uint64_t OUTLINED_FUNCTION_12_29()
{
  return Tensor.init<A>(shape:scalars:on:)();
}

uint64_t OUTLINED_FUNCTION_13_34()
{
  return Tensor.init(zeros:scalarType:on:)();
}

uint64_t OUTLINED_FUNCTION_14_23()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_15_22()
{
  return 8;
}

uint64_t OUTLINED_FUNCTION_16_24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_17_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_18_20()
{
  uint64_t v0;

  return outlined release of BlobsFile(v0);
}

uint64_t OUTLINED_FUNCTION_19_24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = a1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_20_19()
{
  return Tensor.init<A>(shape:scalars:on:)();
}

uint64_t OUTLINED_FUNCTION_21_21()
{
  uint64_t v0;
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v0, 0, 1, *(_QWORD *)(v1 - 256));
  return 5;
}

uint64_t OUTLINED_FUNCTION_22_17(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_23_19()
{
  return Layer.callAsFunction(_:)();
}

uint64_t OUTLINED_FUNCTION_24_23()
{
  return Tensor.init(zeros:scalarType:on:)();
}

uint64_t OUTLINED_FUNCTION_27_25()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_28_20()
{
  return type metadata accessor for MLFewShotSoundClassifier.CausalConv1D(0);
}

uint64_t OUTLINED_FUNCTION_29_15()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 1, 1, *(_QWORD *)(v1 - 232));
}

uint64_t OUTLINED_FUNCTION_30_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t))
{
  uint64_t v10;

  return a10(a1, v10);
}

uint64_t OUTLINED_FUNCTION_31_16(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_32_14()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_34_18()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_36_15()
{
  return Tensor.shape.getter();
}

uint64_t OUTLINED_FUNCTION_37_12(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, *(_QWORD *)(v1 - 256));
}

uint64_t OUTLINED_FUNCTION_38_12()
{
  return 0xFFFFFFFLL;
}

uint64_t OUTLINED_FUNCTION_39_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

void OUTLINED_FUNCTION_40_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  MLFewShotSoundClassifier.CausalConv1D.init(alpha:kernelSize:stride:dilation:weight:bias:)(a1, a2, a3, a4, v22, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22);
}

void OUTLINED_FUNCTION_44_16()
{
  MLFewShotSoundClassifier.CausalConv1D.init(alpha:filterCount:kernelSize:stride:dilation:weightInitializer:biasInitializer:)();
}

uint64_t OUTLINED_FUNCTION_45_11()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_47_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(0);
}

uint64_t OUTLINED_FUNCTION_48_10()
{
  return type metadata accessor for Conv2D();
}

uint64_t OUTLINED_FUNCTION_49_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  return a4(0);
}

uint64_t OUTLINED_FUNCTION_52_8()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_53_14()
{
  uint64_t v0;
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v0, 0, 1, *(_QWORD *)(v1 - 256));
  return 0;
}

uint64_t OUTLINED_FUNCTION_55_11(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_58_7(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v3);
}

void OUTLINED_FUNCTION_59_9()
{
  uint64_t *v0;
  uint64_t v1;

  outlined destroy of FeatureMatrixBuilder<Float>(v1, v0);
}

uint64_t OUTLINED_FUNCTION_60_10()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_61_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return __swift_storeEnumTagSinglePayload(a1, a2, a3, v3);
}

void OUTLINED_FUNCTION_65_12()
{
  JUMPOUT(0x2207592C8);
}

uint64_t OUTLINED_FUNCTION_66_10()
{
  return Tensor.init<A>(shape:scalars:on:)();
}

uint64_t OUTLINED_FUNCTION_67_9()
{
  return type metadata accessor for MLFewShotSoundClassifier.LeakyConv2D(0);
}

uint64_t OUTLINED_FUNCTION_68_9()
{
  return type metadata accessor for Conv1D();
}

uint64_t OUTLINED_FUNCTION_69_7()
{
  return TensorShape.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_70_10()
{
  return Dense.init(weight:bias:)();
}

uint64_t OUTLINED_FUNCTION_71_7()
{
  return Dense.init(unitCount:weightInitializer:biasInitializer:)();
}

uint64_t static MLHandActionClassifier.__Defaults.batchSize.getter()
{
  return 32;
}

uint64_t static MLHandActionClassifier.__Defaults.maximumIterations.getter()
{
  return 80;
}

uint64_t static MLHandActionClassifier.__Defaults.predictionWindowSize.getter()
{
  return 30;
}

double static MLHandActionClassifier.__Defaults.targetFrameRate.getter()
{
  return 30.0;
}

uint64_t static MLHandActionClassifier.__Defaults.sessionIdColumnName.getter()
{
  return 0x5F6E6F6973736573;
}

uint64_t static MLHandActionClassifier.__Defaults.featureColumnName.getter()
{
  return 0x746E696F7079656BLL;
}

uint64_t static MLHandActionClassifier.__Defaults.labelColumnName.getter()
{
  return 0x6C6562616CLL;
}

uint64_t static MLHandActionClassifier.__Defaults.videoColumnName.getter()
{
  return 0x7461506F65646976;
}

uint64_t static MLHandActionClassifier.__Defaults.startTimeColumnName.getter()
{
  return 0x7472617473;
}

uint64_t static MLHandActionClassifier.__Defaults.endTimeColumnName.getter()
{
  return 6581861;
}

ValueMetadata *type metadata accessor for MLHandActionClassifier.__Defaults()
{
  return &type metadata for MLHandActionClassifier.__Defaults;
}

void specialized MLDataColumn.dropMissing()(id a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  if ((a2 & 1) != 0)
  {
    v7 = a1;
    outlined copy of Result<_DataTable, Error>(a1, 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v8 = _getErrorEmbeddedNSError<A>(_:)();
    if (v8)
    {
      v9 = v8;
      OUTLINED_FUNCTION_122_3(a1);
    }
    else
    {
      v9 = OUTLINED_FUNCTION_49_0();
      *v13 = a1;
    }
    v12 = 1;
    OUTLINED_FUNCTION_122_3(a1);
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 16);
  OUTLINED_FUNCTION_12_3(a1);
  specialized handling<A, B>(_:_:)(v5);
  v10 = v6;
  if (v6)
  {
    type metadata accessor for CMLColumn();
    v11 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v11 + 16) = v10;
    type metadata accessor for _UntypedColumn();
    v9 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v9 + 16) = v11;
    OUTLINED_FUNCTION_16_4();
    v12 = 0;
LABEL_9:
    *(_QWORD *)a3 = v9;
    *(_BYTE *)(a3 + 8) = v12;
    OUTLINED_FUNCTION_4_31();
    return;
  }
  __break(1u);
}

void specialized MLDataTable.subscript.setter(void *a1, char a2)
{
  uint64_t v2;
  void *v5;
  char v6;

  MLDataTable.willMutate()();
  v5 = a1;
  a2 &= 1u;
  v6 = a2;
  MLDataTable.setColumnImpl(newColumn:named:)((uint64_t)&v5);
  swift_bridgeObjectRelease();
  outlined consume of Result<_DataTable, Error>(a1, a2);
  if ((*(_BYTE *)(v2 + 8) & 1) == 0)
  {
    OUTLINED_FUNCTION_12_3(*(void **)v2);
    _DataTable.columnNamesDidChange()();
    OUTLINED_FUNCTION_16_4();
  }
  OUTLINED_FUNCTION_4_31();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SSs5NeverOTg5148_s8CreateML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v13;
    v4 = *(_QWORD *)(type metadata accessor for URL() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = URL.path.getter();
      v9 = v8;
      v10 = *(_QWORD *)(v13 + 16);
      if (v10 >= *(_QWORD *)(v13 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = v13 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void static _VideoUtilities.getHandKeyPointsFromImageUrl(url:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSURL *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  id v20;
  void **v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  id v30;
  id v31[4];

  v31[3] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = OUTLINED_FUNCTION_78();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 64);
  MEMORY[0x24BDAC7A8]();
  v3 = *(_QWORD *)(v1 + 16);
  OUTLINED_FUNCTION_77_7();
  type metadata accessor for VNImageOption(0);
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type VNImageOption and conformance VNImageOption, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&protocol conformance descriptor for VNImageOption);
  v4 = MEMORY[0x24BEE4AF8];
  Dictionary.init(dictionaryLiteral:)();
  v5 = objc_allocWithZone(MEMORY[0x24BDF9C28]);
  v30 = @nonobjc VNImageRequestHandler.init(url:options:)((uint64_t)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v7 = OUTLINED_FUNCTION_0_20();
  v29 = v7;
  *(_QWORD *)(v7 + 16) = v4;
  v27 = v7 + 16;
  v8 = OUTLINED_FUNCTION_0_20();
  *(_QWORD *)(v8 + 16) = 0;
  v28 = (void **)(v8 + 16);
  v9 = OUTLINED_FUNCTION_0_20();
  *(_QWORD *)(v9 + 16) = 0;
  OUTLINED_FUNCTION_77_7();
  v10 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  OUTLINED_FUNCTION_98_4();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v8;
  v12 = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v11 + v10, (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v0);
  *(_QWORD *)(v11 + v3) = v9;
  v13 = v30;
  *(_QWORD *)(v11 + v2) = v12;
  v14 = objc_allocWithZone(MEMORY[0x24BDF9B88]);
  swift_retain();
  OUTLINED_FUNCTION_149();
  OUTLINED_FUNCTION_51_0();
  v15 = OUTLINED_FUNCTION_104_4((uint64_t)partial apply for closure #1 in static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v16 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v16 + 16) = xmmword_21AFE8580;
  *(_QWORD *)(v16 + 32) = v15;
  v31[0] = (id)v16;
  v17 = specialized Array._endMutation()();
  OUTLINED_FUNCTION_27_1(v17, &lazy cache variable for type metadata for VNRequest);
  v18 = v15;
  isa = Array._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_12_0();
  v31[0] = 0;
  LODWORD(v2) = objc_msgSend(v13, sel_performRequests_error_, isa, v31);

  v20 = v31[0];
  if ((_DWORD)v2)
  {
    v21 = v28;
    OUTLINED_FUNCTION_29_0();
    v22 = *v21;
    if (!v22)
    {
      v26 = v20;

      OUTLINED_FUNCTION_29_0();
      OUTLINED_FUNCTION_23_3();
      OUTLINED_FUNCTION_81();
      OUTLINED_FUNCTION_79();
      OUTLINED_FUNCTION_13_7();
      goto LABEL_6;
    }
    v23 = v20;
    v24 = v22;
    OUTLINED_FUNCTION_32_8();

    OUTLINED_FUNCTION_81();
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_13_7();
  }
  else
  {
    v25 = v31[0];
    OUTLINED_FUNCTION_111_4();

    swift_willThrow();
    OUTLINED_FUNCTION_81();
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_13_7();

  }
LABEL_6:
  OUTLINED_FUNCTION_7();
}

uint64_t static _VideoUtilities.generatePredictionWindows(frameKeypoints:windowSize:numOfKeypoints:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  uint64_t result;
  Swift::Int v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v6 = a2;
  v7 = a1;
  v8 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_85;
  v9 = a1 & 0xFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (a2)
  {
    do
    {
      v9 = 0x8000000000000000;
      if (v10 == 0x8000000000000000 && v6 == -1)
        goto LABEL_90;
      v12 = v10 / v6;
      if (v10 / v6 < 0)
        goto LABEL_87;
      v53 = a3;
      v54 = v10;
      v4 = MEMORY[0x24BEE4AF8];
      v58 = v8;
      if (!v12)
      {
LABEL_45:
        v9 = v54 - v12 * v6;
        if (v9 < 1)
          return v4;
        v3 = v12 * v6;
        if ((unsigned __int128)(v12 * (__int128)v6) >> 64 != (v12 * v6) >> 63)
          goto LABEL_88;
        v10 = v6 - v9;
        if (__OFSUB__(v6, v9))
          goto LABEL_89;
        v61 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray.reserveCapacity(_:)();
        objc_msgSend(OUTLINED_FUNCTION_209(), sel_initWithInteger_, v10);
        OUTLINED_FUNCTION_93_4();
        OUTLINED_FUNCTION_27_26();
        OUTLINED_FUNCTION_62_13();
        specialized ContiguousArray._endMutation()();
        v31 = OUTLINED_FUNCTION_209();
        OUTLINED_FUNCTION_106_5(v31);
        OUTLINED_FUNCTION_93_4();
        OUTLINED_FUNCTION_27_26();
        OUTLINED_FUNCTION_62_13();
        specialized ContiguousArray._endMutation()();
        objc_msgSend(OUTLINED_FUNCTION_209(), sel_initWithInteger_, v53);
        OUTLINED_FUNCTION_93_4();
        OUTLINED_FUNCTION_27_26();
        OUTLINED_FUNCTION_62_13();
        specialized ContiguousArray._endMutation()();
        v10 = v61;
        v32 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
        v33 = @nonobjc MLMultiArray.init(shape:dataType:)(v61, 65600);
        if (v55)
        {
          OUTLINED_FUNCTION_106_0();
          return v4;
        }
        v34 = v33;
        result = (uint64_t)static _VideoUtilities.resetMultiArray(_:with:)(v33, 0.0);
        v9 = v54;
        if (v54 < v3)
          goto LABEL_91;
        if (v58)
        {
          OUTLINED_FUNCTION_199();
          v10 = OUTLINED_FUNCTION_67_10();
          result = OUTLINED_FUNCTION_104();
        }
        else
        {
          v9 = v7 & 0xFFFFFFFFFFFFF8;
          v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v10 < v3)
          goto LABEL_92;
        if (v3 < 0)
          goto LABEL_93;
        if (v58)
        {
          OUTLINED_FUNCTION_199();
          v10 = OUTLINED_FUNCTION_67_10();
          result = OUTLINED_FUNCTION_104();
        }
        else
        {
          v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v9 = v54;
        if (v10 < v54)
          goto LABEL_94;
        if ((v7 & 0xC000000000000001) != 0 && v3 != v54)
        {
          if (v3 >= (unint64_t)v54)
          {
            __break(1u);
            return result;
          }
          OUTLINED_FUNCTION_27_1(result, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
          v36 = v12 * v6;
          do
          {
            v37 = v36 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v36);
            v36 = v37;
          }
          while (v54 != v37);
        }
        if (v58)
        {
          OUTLINED_FUNCTION_199();
          v38 = _CocoaArrayWrapper.subscript.getter();
          v39 = v42;
          v41 = v43;
          v40 = v44;
          OUTLINED_FUNCTION_104();
        }
        else
        {
          v38 = v7 & 0xFFFFFFFFFFFFFF8;
          v39 = (v7 & 0xFFFFFFFFFFFFFF8) + 32;
          v40 = (2 * v54) | 1;
          OUTLINED_FUNCTION_199();
          v41 = v3;
        }
        v10 = specialized Array.init<A>(_:)(v38, v39, v41, v40);
        v61 = v10;
        v7 = v34;
        v45 = OUTLINED_FUNCTION_23_3();
        v46 = MEMORY[0x22075AA74](v45);
        v9 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= (unint64_t)v9 >> 1)
          goto LABEL_95;
        goto LABEL_71;
      }
      a3 = OUTLINED_FUNCTION_27_1(a1, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
      v3 = 0;
      v57 = v10 / v6;
      v59 = v6;
      while (v3 != v12)
      {
        v13 = v3 * v6;
        if ((unsigned __int128)(v3 * (__int128)v6) >> 64 != (v3 * v6) >> 63)
          goto LABEL_77;
        v14 = v13 + v6;
        if (__OFADD__(v13, v6))
          goto LABEL_78;
        if (v14 < v13)
          goto LABEL_79;
        if (v8)
        {
          OUTLINED_FUNCTION_199();
          v15 = _CocoaArrayWrapper.endIndex.getter();
          OUTLINED_FUNCTION_104();
        }
        else
        {
          v15 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v15 < v13)
          goto LABEL_80;
        if (v13 < 0)
          goto LABEL_81;
        if (v8)
        {
          OUTLINED_FUNCTION_199();
          v16 = _CocoaArrayWrapper.endIndex.getter();
          OUTLINED_FUNCTION_104();
        }
        else
        {
          v16 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v16 < v14)
          goto LABEL_82;
        if ((v7 & 0xC000000000000001) != 0 && v13 != v14)
        {
          if (v13 >= (unint64_t)v14)
            goto LABEL_83;
          v17 = v59;
          v18 = v3 * v6;
          do
          {
            v19 = v18 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v18);
            v18 = v19;
            --v17;
          }
          while (v17);
        }
        if (v8)
        {
          OUTLINED_FUNCTION_199();
          v10 = _CocoaArrayWrapper.subscript.getter();
          v60 = v20;
          v6 = v21;
          OUTLINED_FUNCTION_104();
          if ((v6 & 1) == 0)
            goto LABEL_31;
        }
        else
        {
          v6 = (2 * v14) | 1;
          OUTLINED_FUNCTION_199();
          v10 = v7 & 0xFFFFFFFFFFFFFF8;
          v60 = v13;
        }
        v56 = v4;
        v4 = type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        v24 = swift_dynamicCastClass();
        if (!v24)
        {
          OUTLINED_FUNCTION_273();
          v24 = MEMORY[0x24BEE4AF8];
        }
        v8 = *(_QWORD *)(v24 + 16);
        swift_release();
        if (__OFSUB__((unint64_t)v6 >> 1, v60))
          goto LABEL_84;
        if (v8 == ((unint64_t)v6 >> 1) - v60)
        {
          v23 = swift_dynamicCastClass();
          v4 = v56;
          if (!v23)
          {
            OUTLINED_FUNCTION_273();
            v23 = MEMORY[0x24BEE4AF8];
          }
          goto LABEL_38;
        }
        swift_unknownObjectRelease();
        v4 = v56;
LABEL_31:
        specialized _copyCollectionToContiguousArray<A>(_:)();
        v23 = v22;
LABEL_38:
        OUTLINED_FUNCTION_273();
        v25 = @nonobjc MLMultiArray.__allocating_init(concatenating:axis:dataType:)(v23, 0, 65600);
        if ((OUTLINED_FUNCTION_92_3() & 1) == 0)
        {
          OUTLINED_FUNCTION_30_18();
          v4 = v29;
        }
        v27 = *(_QWORD *)(v4 + 16);
        v26 = *(_QWORD *)(v4 + 24);
        if (v27 >= v26 >> 1)
        {
          OUTLINED_FUNCTION_179(v26);
          OUTLINED_FUNCTION_30_18();
          v4 = v30;
        }
        ++v3;
        *(_QWORD *)(v4 + 16) = v27 + 1;
        v28 = (_QWORD *)(v4 + 24 * v27);
        v28[4] = v10;
        v28[5] = v13;
        v28[6] = v14;

        v12 = v57;
        v8 = v58;
        v6 = v59;
        if (v3 == v57)
          goto LABEL_45;
      }
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      OUTLINED_FUNCTION_199();
      v10 = OUTLINED_FUNCTION_67_10();
      a1 = OUTLINED_FUNCTION_104();
    }
    while (v6);
  }
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  OUTLINED_FUNCTION_179(v9);
  v46 = specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_71:
  OUTLINED_FUNCTION_27_1(v46, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  OUTLINED_FUNCTION_123();
  v47 = @nonobjc MLMultiArray.__allocating_init(concatenating:axis:dataType:)(v61, 0, 65600);
  if ((OUTLINED_FUNCTION_92_3() & 1) == 0)
  {
    OUTLINED_FUNCTION_30_18();
    v4 = v51;
  }
  v49 = *(_QWORD *)(v4 + 16);
  v48 = *(_QWORD *)(v4 + 24);
  if (v49 >= v48 >> 1)
  {
    OUTLINED_FUNCTION_179(v48);
    OUTLINED_FUNCTION_30_18();
    v4 = v52;
  }
  *(_QWORD *)(v4 + 16) = v49 + 1;
  v50 = (_QWORD *)(v4 + 24 * v49);
  v50[4] = v10;
  v50[5] = v3;
  v50[6] = v54;

  return v4;
}

void static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  id v10;
  char v11;
  id v12;
  char v13;
  uint64_t v14;
  char v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  Swift::String v23;
  id v24;
  char v25;
  uint64_t inited;
  void *v27;
  id v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  id v34;
  unint64_t v35;
  id v36;
  char v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;

  v5 = v4;
  v10 = *(id *)a1;
  v11 = *(_BYTE *)(a1 + 8);
  v36 = *(id *)a1;
  v37 = v11;
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v34);
  if (v35 == 1)
  {
    outlined consume of Result<_DataTable, Error>(v34, 1);
LABEL_17:
    v25 = *(_BYTE *)(a1 + 8);
    v34 = *(id *)a1;
    LOBYTE(v35) = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(inited + 32) = a2;
    *(_QWORD *)(inited + 40) = a3;
    LOBYTE(v36) = 5;
    OUTLINED_FUNCTION_50_10();
    static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v34, (_QWORD *)inited, (char *)&v36);
    OUTLINED_FUNCTION_42_11();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_3_1();
  _UntypedColumn.type.getter(&v36);
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_16_4();
  if (v36 != 3)
    goto LABEL_17;
  v34 = v10;
  LOBYTE(v35) = v11;
  OUTLINED_FUNCTION_101_7((uint64_t)&v36);
  v12 = v36;
  v13 = v37;
  v14 = OUTLINED_FUNCTION_0_20();
  *(_QWORD *)(v14 + 16) = a4;
  OUTLINED_FUNCTION_23_3();
  specialized MLUntypedColumn.map<A>(skipUndefined:_:)(1, (uint64_t)partial apply for closure #1 in static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:), v14, v12, v13, (uint64_t)&v34);
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_109_5(v12);
  v38 = v34;
  v33 = v35;
  v15 = *(_BYTE *)(a1 + 8);
  v36 = *(id *)a1;
  v37 = v15;
  OUTLINED_FUNCTION_101_7((uint64_t)&v34);
  v16 = v34;
  if ((v35 & 1) != 0)
  {
    v17 = -1;
  }
  else
  {
    OUTLINED_FUNCTION_51_0();
    v17 = CMLColumn.size.getter();
    OUTLINED_FUNCTION_102(v16);
  }
  OUTLINED_FUNCTION_118_2(v16);
  specialized MLDataColumn.dropMissing()(v38, v33, (uint64_t)&v36);
  v18 = v36;
  if ((v37 & 1) != 0)
  {
    v19 = -1;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v36, 0);
    v19 = CMLColumn.size.getter();
    OUTLINED_FUNCTION_102(v18);
  }
  OUTLINED_FUNCTION_118_2(v18);
  if (__OFSUB__(v17, v19))
  {
    __break(1u);
LABEL_22:
    v20 = (id)MEMORY[0x22075AF48](1, a4);
    goto LABEL_14;
  }
  if (v17 == v19)
  {
    OUTLINED_FUNCTION_50_10();
    specialized MLDataTable.subscript.setter(v38, v33);
    goto LABEL_17;
  }
  v34 = 0;
  v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(236);
  OUTLINED_FUNCTION_24_24(0xD00000000000003DLL, (uint64_t)"Failed to convert keypoints column into MLMultiArray format. ");
  v36 = (id)(v17 - v19);
  v39._countAndFlagsBits = OUTLINED_FUNCTION_91_4();
  OUTLINED_FUNCTION_13_0(v39);
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_24_24(0xD00000000000006BLL, (uint64_t)" rows have issues. Please make sure that the keypoints sequence on each row should have a dimension of [1, ");
  v5 = a4 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, (a4 & 0xC000000000000001) == 0, a4);
  if ((a4 & 0xC000000000000001) != 0)
    goto LABEL_22;
  v20 = *(id *)(a4 + 40);
LABEL_14:
  v21 = v20;
  v22 = objc_msgSend(v20, sel_integerValue);

  v36 = v22;
  v40._countAndFlagsBits = OUTLINED_FUNCTION_91_4();
  OUTLINED_FUNCTION_13_0(v40);
  OUTLINED_FUNCTION_12_0();
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(2, v5 == 0, a4);
  if (v5)
    v24 = (id)MEMORY[0x22075AF48](2, a4);
  else
    v24 = *(id *)(a4 + 48);
  v27 = v24;
  v28 = objc_msgSend(v24, sel_integerValue);

  v36 = v28;
  v41._countAndFlagsBits = OUTLINED_FUNCTION_91_4();
  OUTLINED_FUNCTION_13_0(v41);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_56_1(60, 0x800000021AFF17F0);
  v29 = v34;
  v30 = v35;
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  v31 = OUTLINED_FUNCTION_49_0();
  *v32 = v29;
  v32[1] = v30;
  OUTLINED_FUNCTION_5_8(v31, (uint64_t)v32);
  outlined consume of Result<_DataTable, Error>(v38, v33);
LABEL_18:
  OUTLINED_FUNCTION_32_15();
}

uint64_t static _VideoUtilities.getSecondsFromTimeString(_:)(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  _QWORD *v25;

  lazy protocol witness table accessor for type String and conformance String();
  v4 = (_QWORD *)StringProtocol.components<A>(separatedBy:)();
  v5 = v4;
  v6 = v4[2];
  if (v6 != 3)
  {
    if (v6 != 2)
    {
      if (v6 == 1)
      {
        v7 = v4[4];
        v8 = v4[5];
        OUTLINED_FUNCTION_50_10();
        OUTLINED_FUNCTION_30();
        result = specialized Double.init<A>(_:)(v7, v8);
        if ((v10 & 1) == 0)
          return result;
LABEL_17:
        _StringGuts.grow(_:)(153);
        OUTLINED_FUNCTION_27_2();
        OUTLINED_FUNCTION_56_1(31, v22);
        v23._countAndFlagsBits = a1;
        v23._object = a2;
        String.append(_:)(v23);
        OUTLINED_FUNCTION_24_24(0xD000000000000078, (uint64_t)". Please provide a String value in hours:minutes:seconds.fraction, minutes:seconds.fraction, or seconds.fraction format.");
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        v24 = OUTLINED_FUNCTION_49_0();
        *v25 = 0;
        v25[1] = 0xE000000000000000;
        return OUTLINED_FUNCTION_5_8(v24, (uint64_t)v25);
      }
LABEL_16:
      OUTLINED_FUNCTION_30();
      goto LABEL_17;
    }
    OUTLINED_FUNCTION_199();
    result = OUTLINED_FUNCTION_123_4();
    if ((v18 & 1) != 0)
      goto LABEL_16;
    if (v5[2] >= 2uLL)
    {
      v19 = v5[6];
      v20 = v5[7];
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_30();
      result = specialized Double.init<A>(_:)(v19, v20);
      if ((v21 & 1) != 0)
        goto LABEL_17;
      return result;
    }
    goto LABEL_19;
  }
  OUTLINED_FUNCTION_199();
  result = OUTLINED_FUNCTION_123_4();
  if ((v11 & 1) != 0)
    goto LABEL_16;
  if (v5[2] < 2uLL)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = v5[6];
  v13 = v5[7];
  OUTLINED_FUNCTION_50_10();
  result = specialized Double.init<A>(_:)(v12, v13);
  if ((v14 & 1) != 0)
    goto LABEL_16;
  if (v5[2] < 3uLL)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v15 = v5[8];
  v16 = v5[9];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_30();
  result = specialized Double.init<A>(_:)(v15, v16);
  if ((v17 & 1) != 0)
    goto LABEL_17;
  return result;
}

void *static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(uint64_t a1, CMTimeValue a2, uint64_t a3, CMTimeEpoch a4, CMTimeValue a5, uint64_t a6, CMTimeEpoch a7, double a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  Swift::String v28;
  CMTimeValue value;
  void *v30;
  os_log_type_t v31;
  Swift::String v32;
  id v33;
  id v34;
  id v35;
  unsigned int v36;
  void *v37;
  id v38;
  unsigned int v39;
  uint64_t *v40;
  id v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  void *v46;
  os_log_type_t v47;
  Swift::String v48;
  id v49;
  double v50;
  void *v51;
  id v53;
  id *v54;
  id v55;
  double v56;
  _QWORD v57[3];
  uint64_t *v58;
  id *v59;
  CMTime v60;
  CMTime v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  CMTimeRange v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  CMTimeRange v69;
  uint64_t v70;

  v61.epoch = a7;
  *(_QWORD *)&v61.timescale = a6;
  v61.value = a5;
  v60.epoch = a4;
  *(_QWORD *)&v60.timescale = a3;
  v60.value = a2;
  v70 = *MEMORY[0x24BDAC8D0];
  v10 = OUTLINED_FUNCTION_78();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_27_1(v14, &lazy cache variable for type metadata for VNVideoProcessor);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v16 = v10;
  v15(v13, a1, v10);
  v64 = VNVideoProcessor.__allocating_init(url:)((uint64_t)v13);
  v17 = OUTLINED_FUNCTION_0_20();
  v62 = v17;
  *(_QWORD *)(v17 + 16) = MEMORY[0x24BEE4AF8];
  v57[0] = v17 + 16;
  v18 = OUTLINED_FUNCTION_0_20();
  *(_QWORD *)(v18 + 16) = 0;
  v59 = (id *)(v18 + 16);
  v19 = OUTLINED_FUNCTION_0_20();
  *(_QWORD *)(v19 + 16) = 0;
  v58 = (uint64_t *)(v19 + 16);
  v57[2] = a1;
  v15(v13, a1, v16);
  v20 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v22 + v20, v13, v16);
  *(_QWORD *)(v22 + v21) = v19;
  v23 = v62;
  *(_QWORD *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8)) = v62;
  v24 = v23;
  v25 = objc_allocWithZone(MEMORY[0x24BDF9B88]);
  OUTLINED_FUNCTION_16_15();
  v63 = v19;
  OUTLINED_FUNCTION_51_0();
  swift_retain();
  v26 = OUTLINED_FUNCTION_104_4((uint64_t)partial apply for closure #1 in static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:));
  if (a8 < 0.01)
  {
    v69.start.value = 0;
    *(_QWORD *)&v69.start.timescale = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    OUTLINED_FUNCTION_15_4(0xD00000000000001ALL, (uint64_t)"Invalid target frame rate ");
    OUTLINED_FUNCTION_121_5();
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_56_1(16, v27);
    a8 = 30.0;
    OUTLINED_FUNCTION_121_5();
    v28._countAndFlagsBits = 0x776F6E2073706620;
    v28._object = (void *)0xE90000000000002ELL;
    String.append(_:)(v28);
    value = v69.start.value;
    v30 = *(void **)&v69.start.timescale;
    v31 = static os_log_type_t.default.getter();
    v32._countAndFlagsBits = value;
    v32._object = v30;
    log(_:type:)(v32, v31);
    OUTLINED_FUNCTION_101();
  }
  v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDF9D00]), sel_init);
  v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDF9D08]), sel_initWithTimeInterval_, 1.0 / a8);
  objc_msgSend(v33, sel_setCadence_, v34);

  v69.start.value = 0;
  v35 = v64;
  v36 = objc_msgSend(v64, sel_addRequest_processingOptions_error_, v26, v33, &v69);
  v37 = (void *)v69.start.value;
  if (v36
    && (v38 = (id)v69.start.value,
        CMTimeRange.init(start:end:)(&v65, v60, v61),
        v67 = 0,
        v69 = v65,
        v39 = objc_msgSend(v35, sel_analyzeTimeRange_error_, &v69, &v67),
        v37 = (void *)v67,
        v39))
  {
    v40 = v58;
    OUTLINED_FUNCTION_29_0();
    if (*v40 < 1)
    {
      v53 = v37;
    }
    else
    {
      v67 = 0;
      v68 = 0xE000000000000000;
      v41 = v37;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      v67 = 0x206F65646956;
      v68 = 0xE600000000000000;
      v42._countAndFlagsBits = URL.path.getter();
      String.append(_:)(v42);
      OUTLINED_FUNCTION_60_0();
      v43._countAndFlagsBits = 0x2073616820;
      v43._object = (void *)0xE500000000000000;
      String.append(_:)(v43);
      v66 = *v40;
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_15_4(0xD00000000000001DLL, (uint64_t)" frames with no hand in view.");
      v45 = v67;
      v46 = (void *)v68;
      v47 = static os_log_type_t.info.getter();
      v48._countAndFlagsBits = v45;
      v48._object = v46;
      log(_:type:)(v48, v47);
      OUTLINED_FUNCTION_10_3();
    }
    v54 = v59;
    OUTLINED_FUNCTION_29_0();
    if (!*v54)
    {

      OUTLINED_FUNCTION_29_0();
      v51 = *(void **)(v24 + 16);
      OUTLINED_FUNCTION_23_3();
      OUTLINED_FUNCTION_136();
      swift_release();
      swift_release();
      return v51;
    }
    v55 = *v54;
    swift_willThrow(v56);
    v51 = v33;
  }
  else
  {
    v49 = v37;
    _convertNSErrorToError(_:)();

    swift_willThrow(v50);
    v51 = v26;
    v26 = v35;
    v35 = v33;
  }
  OUTLINED_FUNCTION_136();
  swift_release();
  swift_release();

  return v51;
}

void static _VideoUtilities.renameFeatureTableColumns(table:sessionIdColumn:featureColumn:labelColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v13;
  char v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v13 = *(void **)a1;
  v14 = *(_BYTE *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  *(_QWORD *)(inited + 48) = a4;
  *(_QWORD *)(inited + 56) = a5;
  *(_QWORD *)(inited + 64) = a6;
  *(_QWORD *)(inited + 72) = a7;
  outlined copy of Result<_DataTable, Error>(v13, v14);
  OUTLINED_FUNCTION_50_10();
  OUTLINED_FUNCTION_199();
  OUTLINED_FUNCTION_10_5();
  OUTLINED_FUNCTION_38_13();
  static _ValidationUtilities.validateTableFormat(table:context:columns:)(v16, v17, v18, inited);
  if (v28)
  {
    outlined consume of Result<_DataTable, Error>(v13, v14);
    OUTLINED_FUNCTION_42_11();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    OUTLINED_FUNCTION_118_2(v13);
    OUTLINED_FUNCTION_42_11();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    OUTLINED_FUNCTION_28_21();
    OUTLINED_FUNCTION_59_10();
    MLDataTable.renameImpl(named:to:)(v19, v20, v21, v22);
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_0_41();
      OUTLINED_FUNCTION_16_4();
    }
    OUTLINED_FUNCTION_28_21();
    OUTLINED_FUNCTION_41_12();
    MLDataTable.renameImpl(named:to:)(v23, v24, v25, v26);
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_0_41();
      OUTLINED_FUNCTION_16_4();
    }
    OUTLINED_FUNCTION_28_21();
    OUTLINED_FUNCTION_57_8(a6, a7);
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_0_41();
      OUTLINED_FUNCTION_16_4();
    }
  }
}

uint64_t static _VideoUtilities.generateVideoTable(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  OUTLINED_FUNCTION_119_4();
  v3 = v2;
  v4 = swift_bridgeObjectRetain();
  v49 = specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  specialized MutableCollection<>.sort(by:)(&v49);
  if (v0)
  {
LABEL_59:
    result = swift_release();
    __break(1u);
    return result;
  }
  v5 = 0;
  OUTLINED_FUNCTION_30();
  v48 = *(_QWORD *)(v49 + 16);
  if (v48)
  {
    v45 = v3;
    v6 = 0;
    v47 = v49 + 32;
    v7 = MEMORY[0x24BEE4AF8];
    v8 = MEMORY[0x24BEE4AF8];
    v46 = v1;
    while (1)
    {
      v9 = (uint64_t *)(v47 + 16 * v6);
      v11 = *v9;
      v10 = v9[1];
      v12 = *(_QWORD *)(v1 + 16);
      OUTLINED_FUNCTION_23_3();
      if (v12)
      {
        OUTLINED_FUNCTION_23_3();
        v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
        v14 = MEMORY[0x24BEE4AF8];
        if ((v15 & 1) != 0)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v13);
          OUTLINED_FUNCTION_10_5();
        }
        OUTLINED_FUNCTION_123();
      }
      else
      {
        v14 = MEMORY[0x24BEE4AF8];
      }
      ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_SSs5NeverOTg5148_s8CreateML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n(v14);
      v17 = v5;
      OUTLINED_FUNCTION_60_0();
      v18 = *(_QWORD *)(ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                      + 16);
      if (v18)
      {
        v19 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        v20 = v19;
        v19[2] = v18;
        v19[4] = v11;
        v19[5] = v10;
        if (v18 != 1)
        {
          v19[6] = v11;
          v19[7] = v10;
          v21 = v18 - 2;
          if (v18 != 2)
          {
            v22 = v19 + 9;
            do
            {
              *(v22 - 1) = v11;
              *v22 = v10;
              OUTLINED_FUNCTION_23_3();
              v22 += 2;
              --v21;
            }
            while (v21);
          }
          OUTLINED_FUNCTION_23_3();
        }
      }
      else
      {
        OUTLINED_FUNCTION_123();
        v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v23 = v20[2];
      v24 = *(_QWORD *)(v7 + 16);
      if (__OFADD__(v24, v23))
        break;
      if (!swift_isUniquelyReferenced_nonNull_native() || v24 + v23 > *(_QWORD *)(v7 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v7 = v25;
      }
      if (v20[2])
      {
        v26 = *(_QWORD *)(v7 + 16);
        if ((*(_QWORD *)(v7 + 24) >> 1) - v26 < v23)
          goto LABEL_54;
        v27 = v7 + 16 * v26 + 32;
        if ((unint64_t)(v20 + 4) < v27 + 16 * v23 && v27 < (unint64_t)&v20[2 * v23 + 4])
          goto LABEL_58;
        swift_arrayInitWithCopy();
        if (v23)
        {
          v29 = *(_QWORD *)(v7 + 16);
          v30 = __OFADD__(v29, v23);
          v31 = v29 + v23;
          if (v30)
            goto LABEL_56;
          *(_QWORD *)(v7 + 16) = v31;
        }
      }
      else if (v23)
      {
        goto LABEL_51;
      }
      OUTLINED_FUNCTION_60_0();
      v32 = *(_QWORD *)(ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                      + 16);
      v33 = *(_QWORD *)(v8 + 16);
      if (__OFADD__(v33, v32))
        goto LABEL_52;
      if (!swift_isUniquelyReferenced_nonNull_native() || v33 + v32 > *(_QWORD *)(v8 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = v34;
      }
      if (*(_QWORD *)(ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                     + 16))
      {
        v35 = *(_QWORD *)(v8 + 16);
        if ((*(_QWORD *)(v8 + 24) >> 1) - v35 < v32)
          goto LABEL_55;
        v36 = v8 + 16 * v35 + 32;
        if (ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
           + 32 < v36 + 16 * v32
          && v36 < ML15_VideoUtilitiesV08generateC5TableyAA06MLDataF0VSDySSSay10Foundation3URLVGGKFZSSAIcfu0_33_43697e1f61f7e10b647d882195ad8775AISSTf3nnnpk_nTf1cn_n
                 + 32
                 + 16 * v32)
        {
          goto LABEL_58;
        }
        swift_arrayInitWithCopy();
        if (v32)
        {
          v38 = *(_QWORD *)(v8 + 16);
          v30 = __OFADD__(v38, v32);
          v39 = v38 + v32;
          if (v30)
            goto LABEL_57;
          *(_QWORD *)(v8 + 16) = v39;
        }
      }
      else if (v32)
      {
        goto LABEL_53;
      }
      ++v6;
      OUTLINED_FUNCTION_106_0();
      v5 = v17;
      v1 = v46;
      if (v6 == v48)
      {
        swift_release();
        v3 = v45;
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_59;
  }
  swift_release();
  v8 = MEMORY[0x24BEE4AF8];
  v7 = MEMORY[0x24BEE4AF8];
LABEL_49:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLDataValueConvertible)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(inited + 32) = 0x6C6562616CLL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(_QWORD *)(inited + 72) = v41;
  v42 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 80) = v42;
  *(_QWORD *)(inited + 88) = 0x7461506F65646976;
  *(_QWORD *)(inited + 128) = v41;
  *(_QWORD *)(inited + 136) = v42;
  *(_QWORD *)(inited + 96) = 0xE900000000000068;
  *(_QWORD *)(inited + 104) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLDataValueConvertible);
  v43 = Dictionary.init(dictionaryLiteral:)();
  return MLDataTable.init(dictionary:)(v43, v3);
}

uint64_t static _VideoUtilities.validateVideoInput(dataFrame:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  Swift::OpaquePointer v15;
  uint64_t result;
  uint64_t v17;
  Swift::OpaquePointer v18;
  uint64_t inited;
  Swift::OpaquePointer v20;
  uint64_t v21;
  Swift::OpaquePointer v22;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any.Type>);
  v13 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v13 + 16) = xmmword_21AFE7DA0;
  v14 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v13 + 32) = MEMORY[0x24BEE0D00];
  v31._object = (void *)0xEA00000000006874;
  v27._countAndFlagsBits = a2;
  v27._object = a3;
  v15._rawValue = (void *)v13;
  v31._countAndFlagsBits = 0x6170206F65646956;
  OUTLINED_FUNCTION_128_2(v27, v15, v31);
  result = OUTLINED_FUNCTION_10_3();
  if (!v9)
  {
    v17 = OUTLINED_FUNCTION_9_1();
    *(_OWORD *)(v17 + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(v17 + 32) = v14;
    v28._countAndFlagsBits = a4;
    v28._object = a5;
    v18._rawValue = (void *)v17;
    v32._countAndFlagsBits = 0x6C6562614CLL;
    v32._object = (void *)0xE500000000000000;
    OUTLINED_FUNCTION_128_2(v28, v18, v32);
    result = OUTLINED_FUNCTION_12_0();
    if (a7)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
      *(_QWORD *)(inited + 32) = a6;
      *(_QWORD *)(inited + 40) = a7;
      OUTLINED_FUNCTION_52_1();
      v20._rawValue = (void *)inited;
      v29._countAndFlagsBits = 0x6974207472617453;
      v29._object = (void *)0xEA0000000000656DLL;
      OUTLINED_FUNCTION_127_4(v20, v29);
      swift_setDeallocating();
      result = specialized _ContiguousArrayStorage.__deallocating_deinit();
    }
    if (a9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v21 = swift_initStackObject();
      *(_OWORD *)(v21 + 16) = xmmword_21AFE7DA0;
      *(_QWORD *)(v21 + 32) = a8;
      *(_QWORD *)(v21 + 40) = a9;
      OUTLINED_FUNCTION_52_1();
      v22._rawValue = (void *)v21;
      v30._countAndFlagsBits = 0x656D697420646E45;
      v30._object = (void *)0xE800000000000000;
      OUTLINED_FUNCTION_127_4(v22, v30);
      swift_setDeallocating();
      return specialized _ContiguousArrayStorage.__deallocating_deinit();
    }
  }
  return result;
}

uint64_t static _VideoUtilities.validateVideoInput(trainingData:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v14;
  char v15;
  uint64_t inited;
  __n128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t v30;
  __n128 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __n128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  __n128 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;

  v14 = *(_QWORD *)a1;
  v15 = *(_BYTE *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  v78 = v14;
  v79 = v15;
  OUTLINED_FUNCTION_10_5();
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v78, 0x7461506F65646976, (void *)0xE900000000000068, inited);
  if (v9)
  {
    swift_setDeallocating();
    return specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  v78 = v14;
  v79 = v15;
  v17 = (__n128 *)swift_initStackObject();
  OUTLINED_FUNCTION_45_12(v17, v18, v19, v20, v21, v22, v23, v24, v61, a6, a8, a5, v14, a4, v25);
  v26 = v71;
  *(_QWORD *)(v27 + 32) = v76;
  *(_QWORD *)(v27 + 40) = v71;
  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_48_11((uint64_t)&v78, 0x6C6562616CLL, (void *)0xE500000000000000);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  swift_setDeallocating();
  v29 = (_QWORD *)inited;
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  v30 = v73;
  v78 = v73;
  v79 = v15;
  v31 = (__n128 *)OUTLINED_FUNCTION_113_4();
  OUTLINED_FUNCTION_45_12(v31, v32, v33, v34, v35, v36, v37, v38, v62, v64, v67, v71, v73, v76, v39);
  *(_QWORD *)(v40 + 32) = a2;
  *(_QWORD *)(v40 + 40) = a3;
  v81 = 2;
  v80 = 2;
  OUTLINED_FUNCTION_10_5();
  static _ValidationUtilities.validateTableTypes(table:featureColumns:featureType:labelColumn:labelType:)(&v78, v29, &v81, v77, v26, &v80);
  OUTLINED_FUNCTION_42_11();
  result = specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (a7)
  {
    v78 = v30;
    v79 = v15;
    v41 = (__n128 *)OUTLINED_FUNCTION_113_4();
    OUTLINED_FUNCTION_45_12(v41, v42, v43, v44, v45, v46, v47, v48, v63, v65, v68, v72, v74, v77, v49);
    *(_QWORD *)(v50 + 32) = v65;
    *(_QWORD *)(v50 + 40) = a7;
    OUTLINED_FUNCTION_199();
    OUTLINED_FUNCTION_48_11((uint64_t)&v78, 0xD000000000000011, (void *)0x800000021AFF5160);
    OUTLINED_FUNCTION_42_11();
    result = specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  if (a9)
  {
    v78 = v30;
    v79 = v15;
    v51 = (__n128 *)OUTLINED_FUNCTION_113_4();
    OUTLINED_FUNCTION_45_12(v51, v52, v53, v54, v55, v56, v57, v58, v63, v65, v68, v72, v74, v77, v59);
    *(_QWORD *)(v60 + 32) = v69;
    *(_QWORD *)(v60 + 40) = a9;
    OUTLINED_FUNCTION_195();
    OUTLINED_FUNCTION_48_11((uint64_t)&v78, 0x656D697420646E65, (void *)0xEF6E6D756C6F6320);
    OUTLINED_FUNCTION_42_11();
    return specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  return result;
}

void static _VideoUtilities.getVideoURLsAndAnnotations(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[8];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v19 = a2;
  v20 = type metadata accessor for DataFrame();
  v17[7] = *(_QWORD *)(v20 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v4);
  v17[4] = (char *)v17 - v5;
  v18 = type metadata accessor for UTType();
  MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v6);
  v22 = OUTLINED_FUNCTION_78();
  v21 = *(_QWORD *)(v22 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLHandActionClassifier.DataSource(a1, v15 - v14);
  v16 = (char *)&loc_21AEC40D4 + *((int *)qword_21AEC4C10 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

void sub_21AEC40E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *ML14_UntypedColumnC_s5Error_pTgm5;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;

  v3 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
  v4 = v1 + v3[12];
  v5 = (uint64_t *)(v1 + v3[16]);
  v7 = *v5;
  v6 = v5[1];
  *(_QWORD *)(v2 - 368) = v7;
  *(_QWORD *)(v2 - 320) = v6;
  v8 = (_QWORD *)(v1 + v3[20]);
  v9 = v8[1];
  *(_QWORD *)(v2 - 376) = *v8;
  v10 = (uint64_t *)(v1 + v3[24]);
  v12 = *v10;
  v11 = v10[1];
  *(_QWORD *)(v2 - 392) = v12;
  *(_QWORD *)(v2 - 344) = v11;
  v13 = (uint64_t *)(v1 + v3[28]);
  v15 = *v13;
  v14 = v13[1];
  *(_QWORD *)(v2 - 400) = v15;
  *(_QWORD *)(v2 - 336) = v14;
  v16 = *(_QWORD *)(v2 - 312);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
  v18 = *(_QWORD *)(v2 - 352);
  v19 = *(_QWORD *)(v2 - 304);
  v17(v18, v1, v19);
  v20 = *(_QWORD *)(v2 - 360);
  v17(v20, v4, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v0, v20, v19);
  *(_BYTE *)(v2 - 128) = 1;
  *(_BYTE *)(v2 - 288) = 1;
  *(_DWORD *)(v2 - 287) = *(_DWORD *)(v2 - 111);
  *(_DWORD *)(v2 - 284) = *(_DWORD *)(v2 - 108);
  *(_QWORD *)(v2 - 280) = 44;
  *(_QWORD *)(v2 - 272) = 0xE100000000000000;
  *(_QWORD *)(v2 - 264) = 0;
  *(_QWORD *)(v2 - 256) = 0xE000000000000000;
  *(_QWORD *)(v2 - 248) = 92;
  *(_QWORD *)(v2 - 240) = 0xE100000000000000;
  *(_BYTE *)(v2 - 232) = 1;
  *(_DWORD *)(v2 - 231) = *(_DWORD *)(v2 - 118);
  *(_DWORD *)(v2 - 228) = *(_DWORD *)(v2 - 115);
  *(_QWORD *)(v2 - 224) = 34;
  *(_QWORD *)(v2 - 216) = 0xE100000000000000;
  *(_BYTE *)(v2 - 208) = 1;
  *(_DWORD *)(v2 - 207) = *(_DWORD *)(v2 - 125);
  *(_DWORD *)(v2 - 204) = *(_DWORD *)(v2 - 122);
  *(_QWORD *)(v2 - 200) = &outlined read-only object #0 of default argument 1 of MLDataTable.init(contentsOf:options:);
  *(_QWORD *)(v2 - 192) = 10;
  *(_QWORD *)(v2 - 184) = 0xE100000000000000;
  *(_QWORD *)(v2 - 176) = 0;
  *(_QWORD *)(v2 - 168) = 0;
  *(_BYTE *)(v2 - 160) = *(_BYTE *)(v2 - 128);
  *(_DWORD *)(v2 - 159) = *(_DWORD *)(v2 - 135);
  *(_DWORD *)(v2 - 156) = *(_DWORD *)(v2 - 132);
  *(_QWORD *)(v2 - 152) = 0;
  v21 = *(_QWORD *)(v2 - 72);
  MLDataTable.init(contentsOf:options:)(v0, (const void *)(v2 - 288), v2 - 144);
  if (v21)
  {
    v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v22(v20, v19);
    OUTLINED_FUNCTION_10_3();
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_50_9();
    OUTLINED_FUNCTION_50_9();
    v22(v18, v19);
  }
  else
  {
    *(_QWORD *)(v2 - 72) = v9;
    v25 = *(_QWORD *)(v2 - 344);
    v26 = *(_QWORD *)(v2 - 336);
    v27 = *(_QWORD *)(v2 - 144);
    v28 = *(_BYTE *)(v2 - 136);
    *(_QWORD *)(v2 - 104) = v27;
    *(_BYTE *)(v2 - 96) = v28;
    *(_QWORD *)(v2 - 144) = v27;
    *(_BYTE *)(v2 - 136) = v28;
    v29 = *(_QWORD *)(v2 - 368);
    v30 = *(void **)(v2 - 320);
    MLDataTable.subscript.getter(v29, v30, v2 - 288);
    v31 = *(void **)(v2 - 288);
    v32 = (void *)*(unsigned __int8 *)(v2 - 280);
    if ((v32 & 1) != 0
      || (OUTLINED_FUNCTION_68_10(),
          _UntypedColumn.type.getter((_BYTE *)(v2 - 144)),
          OUTLINED_FUNCTION_102(v31),
          *(_BYTE *)(v2 - 144) != 2))
    {
      outlined consume of Result<_DataTable, Error>(v31, (char)v32);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_12_0();
      *(_QWORD *)(v2 - 288) = 0;
      *(_QWORD *)(v2 - 280) = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      OUTLINED_FUNCTION_50_9();
      *(_QWORD *)(v2 - 288) = 0x206E6D756C6F43;
      *(_QWORD *)(v2 - 280) = 0xE700000000000000;
      v49._countAndFlagsBits = v29;
      v49._object = v30;
      String.append(_:)(v49);
      OUTLINED_FUNCTION_106_0();
      OUTLINED_FUNCTION_27_2();
      OUTLINED_FUNCTION_56_1(17, v50);
      OUTLINED_FUNCTION_103_6();
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      v51 = OUTLINED_FUNCTION_49_0();
      *v52 = v32;
      v52[1] = v2 - 288;
      OUTLINED_FUNCTION_5_8(v51, (uint64_t)v52);
      OUTLINED_FUNCTION_7_28(*(_QWORD *)(v2 - 360));
      OUTLINED_FUNCTION_7_28(*(_QWORD *)(v2 - 352));
      outlined consume of Result<_DataTable, Error>(*(id *)(v2 - 104), *(_BYTE *)(v2 - 96));
    }
    else
    {
      OUTLINED_FUNCTION_68_10();
      v33 = (unint64_t)v31;
      _UntypedColumn.valueAtIndex(index:)(0, v2 - 288);
      OUTLINED_FUNCTION_103_6();
      v34 = *(unsigned __int8 *)(v2 - 272);
      if (v34 != 2)
      {
        outlined consume of MLDataValue(v32, v31, v34);
        v33 = 0xE000000000000000;
      }
      OUTLINED_FUNCTION_102(v31);
      OUTLINED_FUNCTION_76_6();
      *(_QWORD *)(v35 - 256) = v33;
      String.init<A>(_:)();
      URL.init(fileURLWithPath:)();
      OUTLINED_FUNCTION_123();
      v36 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v37 = URL.path.getter();
      v38 = (void *)MEMORY[0x22075A8AC](v37);
      OUTLINED_FUNCTION_30();
      v39 = objc_msgSend(v36, sel_fileExistsAtPath_, v38);

      if ((v39 & 1) == 0)
      {
        OUTLINED_FUNCTION_68_10();
        v40 = specialized Array<A>.init(_:)(v31, 0);
        MEMORY[0x24BDAC7A8](v40);
        v54 = *(_QWORD *)(v2 - 352);
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg5((uint64_t)partial apply for closure #1 in static _VideoUtilities.getVideoURLsAndAnnotations(from:), (uint64_t)&v53, v40);
        v42 = v41;
        v43 = OUTLINED_FUNCTION_123();
        *(_QWORD *)(v2 - 288) = v42;
        MEMORY[0x24BDAC7A8](v43);
        v54 = v2 - 288;
        ML14_UntypedColumnC_s5Error_pTgm5 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
        v46 = v45 & 1;
        v29 = *(_QWORD *)(v2 - 368);
        OUTLINED_FUNCTION_50_9();
        swift_bridgeObjectRetain();
        MLDataTable.willMutate()();
        OUTLINED_FUNCTION_76_6();
        *(_BYTE *)(v47 - 256) = v46;
        MLDataTable.setColumnImpl(newColumn:named:)(v2 - 288);
        OUTLINED_FUNCTION_106_0();
        OUTLINED_FUNCTION_109_5(ML14_UntypedColumnC_s5Error_pTgm5);
        if ((*(_BYTE *)(v2 - 96) & 1) == 0)
        {
          outlined copy of Result<_DataTable, Error>(*(id *)(v2 - 104), 0);
          _DataTable.columnNamesDidChange()();
          OUTLINED_FUNCTION_16_4();
        }
      }
      v48 = *(_QWORD *)(v2 - 352);
      static _VideoUtilities.renameVideoTableColumns(table:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(v2 - 104, v29, (uint64_t)v30, *(_QWORD *)(v2 - 376), *(_QWORD *)(v2 - 72), *(_QWORD *)(v2 - 392), v25, *(_QWORD *)(v2 - 400), v26);
      OUTLINED_FUNCTION_80_7();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_16_25();
      OUTLINED_FUNCTION_7_28(*(_QWORD *)(v2 - 360));
      OUTLINED_FUNCTION_7_28(v48);
      v23 = *(_BYTE *)(v2 - 96);
      v24 = *(_QWORD *)(v2 - 328);
      *(_QWORD *)v24 = *(_QWORD *)(v2 - 104);
      *(_BYTE *)(v24 + 8) = v23;
    }
  }
}

uint64_t closure #1 in static _VideoUtilities.getVideoURLsAndAnnotations(from:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:)();
  v6 = URL.path.getter();
  v8 = v7;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  a1[1] = v8;
  return result;
}

void static _VideoUtilities.renameVideoTableColumns(table:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void *v28;
  char v29;
  uint64_t v30;

  v30 = a8;
  v16 = *(_BYTE *)(a1 + 8);
  v28 = *(void **)a1;
  v15 = v28;
  v29 = v16;
  OUTLINED_FUNCTION_51_13();
  static _VideoUtilities.validateVideoInput(trainingData:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)((uint64_t)&v28, a2, a3, a4, a5, a6, a7, v30, a9);
  OUTLINED_FUNCTION_90_2(v15);
  if (!v27)
  {
    if (a7)
    {
      OUTLINED_FUNCTION_28_21();
      OUTLINED_FUNCTION_86_6();
      MLDataTable.renameImpl(named:to:)(v17, v18, v19, v20);
      if ((*(_BYTE *)(a1 + 8) & 1) == 0)
      {
        OUTLINED_FUNCTION_0_41();
        OUTLINED_FUNCTION_16_4();
      }
    }
    v21 = v30;
    if (a9)
    {
      OUTLINED_FUNCTION_28_21();
      MLDataTable.renameImpl(named:to:)(v21, a9, 6581861, 0xE300000000000000);
      if ((*(_BYTE *)(a1 + 8) & 1) == 0)
      {
        OUTLINED_FUNCTION_0_41();
        OUTLINED_FUNCTION_16_4();
      }
    }
    OUTLINED_FUNCTION_28_21();
    OUTLINED_FUNCTION_47_13();
    MLDataTable.renameImpl(named:to:)(v22, v23, v24, v25);
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_0_41();
      OUTLINED_FUNCTION_16_4();
    }
    OUTLINED_FUNCTION_28_21();
    OUTLINED_FUNCTION_57_8(a4, a5);
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      OUTLINED_FUNCTION_0_41();
      OUTLINED_FUNCTION_16_4();
    }
  }
  OUTLINED_FUNCTION_32_15();
}

void static _VideoUtilities.renameVideoColumns(dataFrame:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(int a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t _, void *_a)
{
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  if (a7)
  {
    OUTLINED_FUNCTION_86_6();
    DataFrame.renameColumn(_:to:)(v12, v13);
  }
  if (_a)
  {
    v14._countAndFlagsBits = _;
    v14._object = _a;
    v15._countAndFlagsBits = 6581861;
    v15._object = (void *)0xE300000000000000;
    DataFrame.renameColumn(_:to:)(v14, v15);
  }
  OUTLINED_FUNCTION_47_13();
  DataFrame.renameColumn(_:to:)(v16, v17);
  OUTLINED_FUNCTION_58_8(a4, a5);
}

void static _VideoUtilities.renameFeatureColumns(dataFrame:sessionIdColumn:featureColumn:labelColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t inited;
  Swift::OpaquePointer v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  *(_QWORD *)(inited + 48) = a4;
  *(_QWORD *)(inited + 56) = a5;
  *(_QWORD *)(inited + 64) = a6;
  *(_QWORD *)(inited + 72) = a7;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_199();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_38_13();
  DataFrame.validateContainsColumns(_:context:)(v14, v15);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (!v16)
  {
    OUTLINED_FUNCTION_59_10();
    DataFrame.renameColumn(_:to:)(v17, v18);
    OUTLINED_FUNCTION_41_12();
    DataFrame.renameColumn(_:to:)(v19, v20);
    OUTLINED_FUNCTION_58_8(a6, a7);
  }
}

void static _VideoUtilities.videoURLsPerClass(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  char v26;
  void *v27;
  id v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void *v42;
  id v43;
  char v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  _UNKNOWN **v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  id v56;

  v3 = OUTLINED_FUNCTION_78();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_49();
  v11 = v10 - v9;
  outlined init with copy of MLHandActionClassifier.DataSource(a1, v10 - v9);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined consume of Result<_DataTable, Error>(*(id *)v11, *(_BYTE *)(v11 + 8));
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_123();
LABEL_19:
    OUTLINED_FUNCTION_7();
    return;
  }
  static _VideoUtilities.getVideoURLsAndAnnotations(from:)(a1, (uint64_t)&v46);
  if (v1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MLHandActionClassifier.DataSource(v11);
    goto LABEL_19;
  }
  v12 = v46;
  v13 = v47;
  OUTLINED_FUNCTION_114_3();
  OUTLINED_FUNCTION_44_12();
  specialized MLDataTable.subscript.getter((char)v12, v13, v14, v15);
  v42 = v12;
  v41 = v13;
  outlined consume of Result<_DataTable, Error>(v12, v13);
  OUTLINED_FUNCTION_40_13();
  v16 = OUTLINED_FUNCTION_78_7();
  v40 = *(_QWORD *)(v16 + 16);
  if (!v40)
  {
    swift_bridgeObjectRelease();
LABEL_18:
    outlined consume of Result<_DataTable, Error>(v42, v41);
    outlined destroy of MLHandActionClassifier.DataSource(v11);
    goto LABEL_19;
  }
  v37 = v11;
  v17 = 0;
  v38 = v16 + 32;
  v18 = (id)MEMORY[0x24BEE4B00];
  v39 = v16;
  while (v17 < *(_QWORD *)(v16 + 16))
  {
    v56 = v18;
    v45 = v17;
    v19 = v38 + 16 * v17;
    v21 = *(void **)v19;
    v20 = *(_QWORD *)(v19 + 8);
    v46 = v42;
    LOBYTE(v47) = v41;
    OUTLINED_FUNCTION_51_13();
    OUTLINED_FUNCTION_195();
    v22 = OUTLINED_FUNCTION_44_12();
    MLDataTable.subscript.getter(v22, v23, v24);
    OUTLINED_FUNCTION_90_2(v42);
    v25 = v52;
    v26 = v53;
    v50 = v52;
    v51 = v53;
    v48 = MEMORY[0x24BEE0D00];
    v49 = &protocol witness table for String;
    v46 = v21;
    v47 = v20;
    OUTLINED_FUNCTION_195();
    static MLUntypedColumn.== infix(_:_:)();
    outlined consume of Result<_DataTable, Error>(v25, v26);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v46);
    v27 = v54;
    v52 = v42;
    v53 = v41;
    v50 = v54;
    v51 = v55;
    OUTLINED_FUNCTION_51_13();
    MLDataTable.subscript.getter((uint64_t)&v50, (uint64_t)&v46);
    OUTLINED_FUNCTION_109_5(v27);
    OUTLINED_FUNCTION_90_2(v42);
    v28 = v46;
    LOBYTE(v27) = v47;
    outlined copy of Result<_DataTable, Error>(v46, v47);
    specialized MLDataTable.subscript.getter((char)v28, (char)v27, (uint64_t)&v54, v29);
    v44 = (char)v27;
    outlined consume of Result<_DataTable, Error>(v28, (char)v27);
    OUTLINED_FUNCTION_40_13();
    v30 = OUTLINED_FUNCTION_78_7();
    v31 = *(_QWORD *)(v30 + 16);
    if (v31)
    {
      v43 = v28;
      v46 = (id)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v32 = v46;
      v33 = v30 + 40;
      do
      {
        OUTLINED_FUNCTION_23_3();
        URL.init(fileURLWithPath:)();
        OUTLINED_FUNCTION_123();
        v46 = v32;
        v35 = v32[2];
        v34 = v32[3];
        if (v35 >= v34 >> 1)
        {
          OUTLINED_FUNCTION_179(v34);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v32 = v46;
        }
        v33 += 16;
        v32[2] = v35 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v32+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v35, v7, v3);
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease();
      v28 = v43;
    }
    else
    {
      OUTLINED_FUNCTION_123();
    }
    v17 = v45 + 1;
    v36 = v56;
    swift_isUniquelyReferenced_nonNull_native();
    v46 = v36;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    v18 = v46;
    OUTLINED_FUNCTION_10_3();
    swift_bridgeObjectRelease();
    outlined consume of Result<_DataTable, Error>(v28, v44);
    v16 = v39;
    if (v45 + 1 == v40)
    {
      swift_bridgeObjectRelease();
      v11 = v37;
      goto LABEL_18;
    }
  }
  __break(1u);
}

double *specialized UnsafeMutableBufferPointer.initialize(repeating:)(double *result, uint64_t a2, double a3)
{
  if (result)
  {
    if (a2 < 0)
    {
      __break(1u);
    }
    else
    {
      for (; a2; --a2)
        *result++ = a3;
    }
  }
  return result;
}

unint64_t static _VideoUtilities.handKeypointsToMultiArray(_:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  id v13;
  double *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  id v23[2];

  OUTLINED_FUNCTION_119_4();
  v23[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (v2 >> 62)
  {
    OUTLINED_FUNCTION_9_8();
    v3 = OUTLINED_FUNCTION_67_10();
    OUTLINED_FUNCTION_30();
  }
  else
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v3 < 1)
  {
    v23[0] = (id)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    objc_msgSend(OUTLINED_FUNCTION_97_4(), sel_initWithInteger_, 1);
    OUTLINED_FUNCTION_65_13();
    OUTLINED_FUNCTION_17_20();
    OUTLINED_FUNCTION_25_18();
    OUTLINED_FUNCTION_87_4();
    v12 = OUTLINED_FUNCTION_97_4();
    OUTLINED_FUNCTION_106_5(v12);
    OUTLINED_FUNCTION_65_13();
    OUTLINED_FUNCTION_17_20();
    OUTLINED_FUNCTION_25_18();
    OUTLINED_FUNCTION_87_4();
    objc_msgSend(OUTLINED_FUNCTION_97_4(), sel_initWithInteger_, 21);
    OUTLINED_FUNCTION_65_13();
    OUTLINED_FUNCTION_17_20();
    OUTLINED_FUNCTION_25_18();
    OUTLINED_FUNCTION_87_4();
    v1 = (unint64_t)objc_allocWithZone(MEMORY[0x24BDBFFF0]);
    v13 = @nonobjc MLMultiArray.init(shape:dataType:)((uint64_t)v23[0], 65600);
    if (!v0)
    {
      v1 = (unint64_t)v13;
      v14 = (double *)UnsafeMutableBufferPointer.init(_:)();
      specialized UnsafeMutableBufferPointer.initialize(repeating:)(v14, v15, 0.0);
    }
  }
  else
  {
    v4 = static _VideoUtilities.pickSingleHand(_:)();
    if (!v0)
    {
      v5 = v4;
      if (v4)
      {
        v23[0] = 0;
        v6 = objc_msgSend(v4, sel_keypointsMultiArrayAndReturnError_, v23);
        if (v6)
        {
          v1 = (unint64_t)v6;
          v7 = v23[0];
          v8 = objc_msgSend((id)v1, sel_shape);
          OUTLINED_FUNCTION_27_1((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_Sis5NeverOTg50125_s8CreateML20MLHandPoseClassifierV15modelPrediction2on5usingSaySS5label_Sd10confidencetGSo12MLMultiArrayC_So7MLModelCtKFSiSo8D54Ccfu_33_5bdac5b40c7411f20a64c1277f8fd44fAOSiTf3nnnpk_nTf1cn_n(v9);
          v11 = v10;
          OUTLINED_FUNCTION_104();
          LOBYTE(v9) = specialized static Array<A>.== infix(_:_:)(v11, outlined read-only object #0 of static _VideoUtilities.handKeypointsToMultiArray(_:));
          OUTLINED_FUNCTION_12_0();
          if ((v9 & 1) != 0)
          {

          }
          else
          {
            lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
            OUTLINED_FUNCTION_49_0();
            OUTLINED_FUNCTION_96_6();
            *v20 = v19 | 3;
            v20[1] = 0x800000021AFF4FC0;
            OUTLINED_FUNCTION_5_8(v21, (uint64_t)v20);

          }
        }
        else
        {
          v1 = (unint64_t)v23[0];
          OUTLINED_FUNCTION_111_4();

          OUTLINED_FUNCTION_32_8();
        }
      }
      else
      {
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        OUTLINED_FUNCTION_49_0();
        OUTLINED_FUNCTION_96_6();
        *v16 = v17;
        v16[1] = 0x800000021AFF4F90;
        OUTLINED_FUNCTION_5_8(v18, (uint64_t)v16);
      }
    }
  }
  return v1;
}

void *static _VideoUtilities.pickSingleHand(_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  void *v14;

  OUTLINED_FUNCTION_119_4();
  if (v2 >> 62)
    goto LABEL_21;
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  OUTLINED_FUNCTION_52_1();
  if (v3)
  {
    while (1)
    {
      v4 = v1 & 0xC000000000000001;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0, v1);
      v5 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22075AF48](0, v1) : *(id *)(v1 + 32);
      v6 = v5;
      if (v3 == 1)
        break;
      v7 = 5;
      while (1)
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v7 - 4, v4 == 0, v1);
        v8 = v4 ? (id)MEMORY[0x22075AF48](v7 - 4, v1) : *(id *)(v1 + 8 * v7);
        v9 = v8;
        v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        static _VideoUtilities.measureHandSize(_:)();
        if (v0)
        {

          OUTLINED_FUNCTION_30();
          return v6;
        }
        v12 = v11;
        static _VideoUtilities.measureHandSize(_:)();
        v0 = 0;
        if (v12 >= v13)
          v14 = v9;
        else
          v14 = v6;
        if (v12 < v13)
          v6 = v9;

        ++v7;
        if (v10 == v3)
          goto LABEL_18;
      }
      __break(1u);
LABEL_21:
      OUTLINED_FUNCTION_9_8();
      v3 = OUTLINED_FUNCTION_67_10();
      if (!v3)
        goto LABEL_22;
    }
LABEL_18:
    OUTLINED_FUNCTION_30();
  }
  else
  {
LABEL_22:
    OUTLINED_FUNCTION_30();
    return 0;
  }
  return v6;
}

double *static _VideoUtilities.resetMultiArray(_:with:)(void *a1, double a2)
{
  uint64_t v2;
  id v4;
  double *result;
  uint64_t v6;

  v4 = a1;
  result = (double *)UnsafeMutableBufferPointer.init(_:)();
  if (!v2 && result)
  {
    if (v6 < 0)
    {
      __break(1u);
    }
    else
    {
      for (; v6; --v6)
        *result++ = a2;
    }
  }
  return result;
}

id VNVideoProcessor.__allocating_init(url:)(uint64_t a1)
{
  id v2;
  NSURL *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  URL._bridgeToObjectiveC()(v3);
  v5 = v4;
  v6 = objc_msgSend(v2, sel_initWithURL_, v4);

  v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  return v6;
}

void closure #1 in static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  void *v8;
  id v9;
  void *v10;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = (uint64_t *)(a3 + 16);
  if (a2)
  {
    OUTLINED_FUNCTION_49_9();
    v8 = (void *)*v6;
    *v6 = (uint64_t)a2;
    v9 = a2;
    v10 = v8;
LABEL_11:

    return;
  }
  v13 = outlined bridged method (pb) of @objc VNRequest.results.getter(a1);
  if (!v13 || (v14 = specialized _arrayConditionalCast<A, B>(_:)(v13), swift_bridgeObjectRelease(), !v14))
  {
    _StringGuts.grow(_:)(62);
    OUTLINED_FUNCTION_96_6();
    OUTLINED_FUNCTION_27_2();
    String.append(_:)(v15);
    OUTLINED_FUNCTION_78();
    lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 46;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v18 = OUTLINED_FUNCTION_49_0();
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0xE000000000000000;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_BYTE *)(v19 + 48) = 0;
    OUTLINED_FUNCTION_49_9();
    v10 = (void *)*v6;
    *v6 = v18;
    goto LABEL_11;
  }
  if (v14 >> 62)
  {
    OUTLINED_FUNCTION_195();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_101();
    if (v25)
      goto LABEL_9;
  }
  else if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    v20 = (void *)static _VideoUtilities.handKeypointsToMultiArray(_:)();
    v21 = (uint64_t *)(a6 + 16);
    OUTLINED_FUNCTION_101();
    v22 = v20;
    MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v22);
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v23 = *(_QWORD *)(*v21 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
    v24 = *v21;
    *(_QWORD *)(v24 + 16) = v23 + 1;
    *(_QWORD *)(v24 + 8 * v23 + 32) = v26;
    swift_endAccess();

    return;
  }
  swift_beginAccess();
  if (!__OFADD__(*(_QWORD *)(a5 + 16), 1))
  {
    ++*(_QWORD *)(a5 + 16);
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t static _VideoUtilities.measureHandSize(_:)()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  id v22;
  float v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v30;
  id v31[2];

  OUTLINED_FUNCTION_119_4();
  v31[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = (void *)MEMORY[0x22075A8AC](0x6C6C414F50494E56, 0xE800000000000000);
  v31[0] = 0;
  v2 = objc_msgSend(v0, sel_recognizedPointsForGroupKey_error_, v1, v31);

  v3 = v31[0];
  if (v2)
  {
    type metadata accessor for VNRecognizedPointKey(0);
    OUTLINED_FUNCTION_27_1(v4, &lazy cache variable for type metadata for VNRecognizedPoint);
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type VNRecognizedPointKey and conformance VNRecognizedPointKey, (uint64_t (*)(uint64_t))type metadata accessor for VNRecognizedPointKey, (uint64_t)&protocol conformance descriptor for VNRecognizedPointKey);
    v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v3;

    v7 = 0;
    v8 = v5 + 64;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = -1;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = -1.0;
    v14 = 1000.0;
    v15 = -1.0;
    v16 = 1000.0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v7 << 6);
      }
      else
      {
        v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
          goto LABEL_35;
        }
        if (v19 >= v12)
          return swift_release();
        v20 = *(_QWORD *)(v8 + 8 * v19);
        ++v7;
        if (!v20)
        {
          v7 = v19 + 1;
          if (v19 + 1 >= v12)
            return swift_release();
          v20 = *(_QWORD *)(v8 + 8 * v7);
          if (!v20)
          {
            v7 = v19 + 2;
            if (v19 + 2 >= v12)
              return swift_release();
            v20 = *(_QWORD *)(v8 + 8 * v7);
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v12)
                return swift_release();
              v20 = *(_QWORD *)(v8 + 8 * v21);
              if (!v20)
              {
                while (1)
                {
                  v7 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    break;
                  if (v7 >= v12)
                    return swift_release();
                  v20 = *(_QWORD *)(v8 + 8 * v7);
                  ++v21;
                  if (v20)
                    goto LABEL_20;
                }
LABEL_35:
                __break(1u);
              }
              v7 = v21;
            }
          }
        }
LABEL_20:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v7 << 6);
      }
      v22 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      objc_msgSend(v22, sel_confidence);
      if (v23 > 0.2)
      {
        OUTLINED_FUNCTION_29_16();
        if (v16 >= v24)
          v16 = v24;
        OUTLINED_FUNCTION_29_16();
        if (v14 >= v25)
          v14 = v25;
        OUTLINED_FUNCTION_29_16();
        if (v26 > v15)
          v15 = v26;
        OUTLINED_FUNCTION_29_16();
        v28 = v27;

        if (v28 > v13)
          v13 = v28;
      }
      else
      {

      }
    }
  }
  v30 = v31[0];
  OUTLINED_FUNCTION_111_4();

  return OUTLINED_FUNCTION_32_8();
}

uint64_t specialized Double.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE *v7;
  char v9;

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    v6 = v9;
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (v7 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = _StringObject.sharedUTF8.getter();
      }
      v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease();
    }
  }
  if ((v6 & 1) != 0)
    return 0;
  else
    return 0;
}

#error "21AEC608C: call analysis failed (funcsize=29)"

void static _VideoUtilities.convertKeypointsSequenceToMultiArray(value:keypointsShape:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  int v23;
  id v24;
  char v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  void *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  id v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v14 = *a1;
  v15 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  v16 = swift_bridgeObjectRetain();
  v17 = @nonobjc MLMultiArray.init(shape:dataType:)(v16, 65600);
  if (v17)
  {
    v18 = v17;
    v19 = UnsafeMutableBufferPointer.init(_:)();
    swift_retain();
    CMLSequence.size.getter();
    specialized RandomAccessCollection<>.distance(from:to:)();
    v21 = v20;
    swift_release();
    if (v21 == 1)
    {
      v102 = 0;
      v103 = 0;
      v81 = a2 & 0xC000000000000001;
      v73 = a2 & 0xFFFFFFFFFFFFFF8;
      v101 = v14;
      swift_retain();
      v87 = v19;
      while (1)
      {
        specialized EnumeratedSequence.Iterator.next()((uint64_t)&v97);
        v23 = (int)v97;
        v22 = v98;
        v24 = v99;
        v25 = v100;
        v85 = v98;
        v95 = (uint64_t)v97;
        if (v100 != 3)
        {
          if (v100 == 255)
          {
            swift_release();
            MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v18);
            *a3 = v97;
            return;
          }

          OUTLINED_FUNCTION_4_2();
          v68 = v85;
          v69 = v95;
          goto LABEL_36;
        }
        outlined copy of MLDataValue(v98, v99, 3);
        outlined copy of MLDataValue(v22, v24, 3);
        CMLSequence.size.getter();
        specialized RandomAccessCollection<>.distance(from:to:)();
        v27 = v26;
        OUTLINED_FUNCTION_14_24(v23);
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(1, v81 == 0, a2);
        if (v81)
          v28 = (id)MEMORY[0x22075AF48](1, a2);
        else
          v28 = *(id *)(a2 + 40);
        v29 = v28;
        v30 = objc_msgSend(v28, sel_integerValue);

        if (v27 != v30)
        {

          swift_release();
          v25 = 3;
          v69 = v95;
          v68 = v85;
          OUTLINED_FUNCTION_14_24(v95);
LABEL_36:
          outlined consume of (offset: Int, element: MLDataValue)?(v69, v68, v24, v25);
          goto LABEL_28;
        }
        outlined copy of MLDataValue(v85, v24, 3);
        if (CMLSequence.size.getter())
          break;
        v32 = v85;
LABEL_25:
        outlined consume of (offset: Int, element: MLDataValue)?(v95, v32, v24, 3);
        outlined consume of (offset: Int, element: MLDataValue)?(v95, v32, v24, 3);
        OUTLINED_FUNCTION_14_24(v95);
      }
      v31 = 0;
      v32 = v85;
      v78 = v24;
      v83 = a2;
      while (1)
      {
        OUTLINED_FUNCTION_3_1();
        CMLSequence.value(at:)(v31);
        OUTLINED_FUNCTION_14_24(v95);
        v33 = v24;
        MLDataValue.init(_:)();
        v34 = v97;
        v93 = v98;
        v35 = v99;
        OUTLINED_FUNCTION_3_1();
        v36 = CMLSequence.size.getter();
        outlined consume of (offset: Int, element: MLDataValue)?(v95, v32, v33, 3);
        v91 = v31;
        if (v31 >= v36)
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          JUMPOUT(0x21AEC6980);
        }
        if (v35 != 3)
        {
          v37 = v93;
          goto LABEL_33;
        }
        v37 = v93;
        OUTLINED_FUNCTION_95_5(v34);
        OUTLINED_FUNCTION_95_5(v34);
        v38 = OUTLINED_FUNCTION_109_3();
        if (CMLSequence.size.getter() < 0)
          goto LABEL_38;
        v39 = OUTLINED_FUNCTION_109_3();
        OUTLINED_FUNCTION_4_41();
        if (v38 < 0 || v39 < v38)
          goto LABEL_39;
        if (v81)
        {
          v40 = (id)MEMORY[0x22075AF48](2, v83);
        }
        else
        {
          if (*(_QWORD *)(v73 + 16) < 3uLL)
            goto LABEL_40;
          v40 = *(id *)(v83 + 48);
        }
        v41 = v40;
        v42 = objc_msgSend(v40, sel_integerValue);

        if ((id)v38 != v42)
          break;
        OUTLINED_FUNCTION_149();
        if (OUTLINED_FUNCTION_109_3())
        {
          OUTLINED_FUNCTION_149();
          CMLSequence.value(at:)(0);
          OUTLINED_FUNCTION_4_41();
          v43 = (char *)&loc_21AEC63B8 + dword_21AEC69DC[CMLFeatureValue.type.getter()];
          __asm { BR              X9 }
        }
        outlined consume of MLDataValue(v34, v93, 3);
        outlined consume of MLDataValue(v34, v93, 3);
        swift_release();
        ++v31;
        v32 = v85;
        a2 = v83;
        v24 = v78;
        if (v91 + 1 == CMLSequence.size.getter())
          goto LABEL_25;
      }
      LOBYTE(v35) = 3;
      OUTLINED_FUNCTION_4_41();
LABEL_33:
      outlined consume of MLDataValue(v34, v37, v35);
      v52 = OUTLINED_FUNCTION_43_13(v44, v45, v46, v47, v48, v49, v50, v51, v70, v73, (uint64_t)a3, (uint64_t)v78, v81, v83, (uint64_t)v85, v87, v89, v31, (uint64_t)v93,
              v95);
      OUTLINED_FUNCTION_23_20(v52, v53, v54, v55, v56, v57, v58, v59, v71, v74, v76, v79);
      OUTLINED_FUNCTION_66_11(v60, v61, v62, v63, v64, v65, v66, v67, v72, v75, v77, (uint64_t)v80, v82, v84, v86, v88, v90, v92, (uint64_t)v94,
        v96,
        (uint64_t)v97,
        (uint64_t)v98,
        (uint64_t)v99,
        v100,
        v101);
    }
    else
    {

    }
  }
LABEL_28:
  *a3 = 0;
}

uint64_t specialized MLUntypedColumn.map<A>(skipUndefined:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  _QWORD *v18;
  uint64_t result;

  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  if ((a5 & 1) != 0)
  {
    OUTLINED_FUNCTION_14_19();
    OUTLINED_FUNCTION_16_15();
    OUTLINED_FUNCTION_14_19();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v13 = _getErrorEmbeddedNSError<A>(_:)();
    if (v13)
    {
      v14 = v13;
      OUTLINED_FUNCTION_122_3(a4);
    }
    else
    {
      v14 = OUTLINED_FUNCTION_49_0();
      *v18 = a4;
    }
    v16 = a4;
    v17 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_16_15();
    OUTLINED_FUNCTION_12_3(a4);
    v15 = CMLColumn.apply(transform:type:skipUndefined:)(partial apply for specialized closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:), v12, 6, a1 & 1);
    type metadata accessor for _UntypedColumn();
    v14 = OUTLINED_FUNCTION_0_20();
    *(_QWORD *)(v14 + 16) = v15;
    v16 = a4;
    v17 = 0;
  }
  outlined consume of Result<_DataTable, Error>(v16, v17);
  result = swift_release();
  *(_QWORD *)a6 = v14;
  *(_BYTE *)(a6 + 8) = a5 & 1;
  return result;
}

uint64_t specialized closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(uint64_t a1, void (*a2)(void **__return_ptr, _QWORD *))
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  ValueMetadata *v12;
  _UNKNOWN **v13;
  void *v14;

  swift_retain();
  MLDataValue.init(_:)();
  v3 = (void *)v10[0];
  v4 = (void *)v10[1];
  v5 = v11;
  a2(&v14, v10);
  v6 = v14;
  if (v14)
  {
    v12 = &type metadata for MLDataValue.MultiArrayType;
    v13 = &protocol witness table for MLDataValue.MultiArrayType;
    v10[0] = v14;
    __swift_project_boxed_opaque_existential_1(v10, (uint64_t)&type metadata for MLDataValue.MultiArrayType);
    v7 = v6;
    v8 = MLDataValue.MultiArrayType.featureValue.getter();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
    outlined consume of MLDataValue(v3, v4, v5);

  }
  else
  {
    type metadata accessor for CMLFeatureValue();
    v8 = CMLFeatureValue.__allocating_init()();
    outlined consume of MLDataValue(v3, v4, v5);
  }
  return v8;
}

id @nonobjc VNDetectHumanHandPoseRequest.init(completionHandler:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  _QWORD v6[6];

  if (a1)
  {
    v6[4] = a1;
    v6[5] = a2;
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 1107296256;
    v6[2] = thunk for @escaping @callee_guaranteed (@guaranteed VNRequest, @guaranteed Error?) -> ();
    v6[3] = &block_descriptor_6;
    v3 = _Block_copy(v6);
    swift_release();
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(v2, sel_initWithCompletionHandler_, v3);
  _Block_release(v3);
  return v4;
}

void thunk for @escaping @callee_guaranteed (@guaranteed VNRequest, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, void *);
  id v6;
  id v7;

  v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, a3);
  swift_release();

}

uint64_t sub_21AEC6D4C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static _VideoUtilities.reformatKeypointsDataTable(table:featureColumn:keypointsShape:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_21AEC6D78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in MLUntypedColumn.map<A>(skipUndefined:_:)(a1, *(void (**)(void **__return_ptr, _QWORD *))(v1 + 16));
}

_BYTE *closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1)
{
  _BYTE v2[48];

  outlined init with take of (MLDataValue, MLDataValue)?(a1, (uint64_t)v2);
  return v2[16] != 0xFF;
}

{
  _BYTE v2[48];

  outlined init with take of (MLDataValue, MLDataValue)?(a1, (uint64_t)v2);
  return specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)((uint64_t)v2);
}

id specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  id result;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  char v17;
  _BYTE v18[48];

  OUTLINED_FUNCTION_129_0(a1, a2, a3, a4, a5, a6, a7, a8, v11);
  result = (id)outlined init with take of (MLDataValue, MLDataValue)?(a1, (uint64_t)v18);
  if (v18[16] == 0xFF)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)v8 = v12;
    *(_QWORD *)(v8 + 8) = v13;
    *(_BYTE *)(v8 + 16) = v14;
    *(_QWORD *)(v8 + 24) = v15;
    *(_QWORD *)(v8 + 32) = v16;
    *(_BYTE *)(v8 + 40) = v17;
    outlined copy of MLDataValue(v12, v13, v14);
    return outlined copy of MLDataValue(v15, v16, v17);
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[6];

  OUTLINED_FUNCTION_129_0(a1, a2, a3, a4, a5, a6, a7, a8, v16[0]);
  return specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)((uint64_t)v16, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t outlined bridged method (pb) of @objc VNRequest.results.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_results);
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for VNObservation);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined init with take of (MLDataValue, MLDataValue)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLDataValue, MLDataValue)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21AEC6FEC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21AEC7010()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t outlined init with copy of MLHandActionClassifier.DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLHandActionClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLHandActionClassifier.DataSource(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLHandActionClassifier.DataSource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in static _VideoUtilities.getVideoURLsAndAnnotations(from:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in static _VideoUtilities.getVideoURLsAndAnnotations(from:)(a1);
}

_BYTE *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

void partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(_BYTE *a1@<X8>)
{
  uint64_t v1;

  specialized closure #1 in _StringGuts.withCString<A>(_:)(*(void (**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  if (!v2)
    *a1 = v4;
  OUTLINED_FUNCTION_56_9();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v2 = &protocol witness table for String;
    result = MEMORY[0x22075B938](&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  }
  return result;
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = OUTLINED_FUNCTION_78();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  OUTLINED_FUNCTION_98_4();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(OUTLINED_FUNCTION_78() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

void OUTLINED_FUNCTION_0_41()
{
  id *v0;

  outlined copy of Result<_DataTable, Error>(*v0, 0);
  _DataTable.columnNamesDidChange()();
}

uint64_t OUTLINED_FUNCTION_2_39(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return static _VideoUtilities.validateVideoInput(trainingData:videoColumn:labelColumn:startTimeColumn:endTimeColumn:)(v9 - 288, 0x7461506F65646976, 0xE900000000000068, 0x6C6562616CLL, 0xE500000000000000, 0, 0, 0, a9);
}

void OUTLINED_FUNCTION_4_41()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v1, v0, 3);
}

void OUTLINED_FUNCTION_14_24(int a1)
{
  void *v1;
  void *v2;

  outlined consume of (offset: Int, element: MLDataValue)?(a1, v1, v2, 3);
}

uint64_t OUTLINED_FUNCTION_16_25()
{
  void *v0;
  uint64_t v1;

  outlined consume of Result<_DataTable, Error>(v0, 0);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 312) + 8))(*(_QWORD *)(v1 - 384), *(_QWORD *)(v1 - 304));
}

uint64_t OUTLINED_FUNCTION_17_20()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

void OUTLINED_FUNCTION_23_20(int a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  int v13;
  void *v14;

  outlined consume of (offset: Int, element: MLDataValue)?(a1, a2, a12, 3);
  outlined consume of (offset: Int, element: MLDataValue)?(v13, v12, a12, 3);

}

void OUTLINED_FUNCTION_24_24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_25_18()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t OUTLINED_FUNCTION_27_26()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

void OUTLINED_FUNCTION_28_21()
{
  MLDataTable.willMutate()();
}

id OUTLINED_FUNCTION_29_16()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 840));
}

void OUTLINED_FUNCTION_30_18()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_40_13()
{
  uint64_t v0;

  specialized MLDataColumn.dropDuplicates()(*(id *)(v0 - 104), *(_BYTE *)(v0 - 96), v0 - 176);
}

uint64_t OUTLINED_FUNCTION_42_11()
{
  return swift_setDeallocating();
}

uint64_t OUTLINED_FUNCTION_43_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return a20;
}

uint64_t OUTLINED_FUNCTION_44_17()
{
  uint64_t v0;

  return v0;
}

__n128 OUTLINED_FUNCTION_45_12(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __n128 a15)
{
  __n128 result;

  result = a15;
  a1[1] = a15;
  return result;
}

uint64_t OUTLINED_FUNCTION_46_9()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_48_11(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return static _ValidationUtilities.validateTableFormat(table:context:columns:)(a1, a2, a3, v3);
}

uint64_t OUTLINED_FUNCTION_49_9()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_50_10()
{
  return swift_bridgeObjectRetain();
}

id OUTLINED_FUNCTION_51_13()
{
  void *v0;
  char v1;

  return outlined copy of Result<_DataTable, Error>(v0, v1);
}

void OUTLINED_FUNCTION_56_10()
{
  uint64_t v0;

  outlined consume of Result<_DataTable, Error>(*(id *)(v0 - 304), *(_DWORD *)(v0 - 312));
}

uint64_t OUTLINED_FUNCTION_57_8(uint64_t a1, uint64_t a2)
{
  return MLDataTable.renameImpl(named:to:)(a1, a2, 0x6C6562616CLL, 0xE500000000000000);
}

void OUTLINED_FUNCTION_58_8(uint64_t a1, uint64_t a2)
{
  Swift::String v2;

  v2._countAndFlagsBits = 0x6C6562616CLL;
  v2._object = (void *)0xE500000000000000;
  DataFrame.renameColumn(_:to:)(*(Swift::String *)&a1, v2);
}

uint64_t OUTLINED_FUNCTION_62_13()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t OUTLINED_FUNCTION_65_13()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_66_11(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  void *v26;
  int v27;

  outlined consume of (offset: Int, element: MLDataValue)?(v27, v26, v25, 3);
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_67_10()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

id OUTLINED_FUNCTION_68_10()
{
  void *v0;

  return outlined copy of Result<_DataTable, Error>(v0, 0);
}

void OUTLINED_FUNCTION_76_6()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 288) = v0;
}

uint64_t OUTLINED_FUNCTION_77_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v0, v1, v3);
}

uint64_t OUTLINED_FUNCTION_78_7()
{
  void *v0;
  char v1;
  uint64_t v2;

  outlined consume of Result<_DataTable, Error>(v0, v1);
  return specialized Array<A>.init(_:)(*(void **)(v2 - 176), *(_BYTE *)(v2 - 168));
}

void OUTLINED_FUNCTION_82_7()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_87_4()
{
  return specialized ContiguousArray._endMutation()();
}

void OUTLINED_FUNCTION_90_2(void *a1)
{
  char v1;

  outlined consume of Result<_DataTable, Error>(a1, v1);
}

uint64_t OUTLINED_FUNCTION_91_4()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_92_3()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_93_4()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

id OUTLINED_FUNCTION_95_5(void *a1)
{
  void *v1;

  return outlined copy of MLDataValue(a1, v1, 3);
}

id OUTLINED_FUNCTION_97_4()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 1760));
}

void OUTLINED_FUNCTION_101_7(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;

  MLDataTable.subscript.getter(v2, v1, a1);
}

id OUTLINED_FUNCTION_104_4(uint64_t a1)
{
  uint64_t v1;

  return @nonobjc VNDetectHumanHandPoseRequest.init(completionHandler:)(a1, v1);
}

id OUTLINED_FUNCTION_106_5(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 94), 3);
}

void OUTLINED_FUNCTION_109_5(void *a1)
{
  char v1;

  outlined consume of Result<_DataTable, Error>(a1, v1);
}

uint64_t OUTLINED_FUNCTION_111_4()
{
  return _convertNSErrorToError(_:)();
}

uint64_t OUTLINED_FUNCTION_113_4()
{
  return swift_initStackObject();
}

id OUTLINED_FUNCTION_114_3()
{
  void *v0;
  char v1;

  return outlined copy of Result<_DataTable, Error>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_121_5()
{
  return Double.write<A>(to:)();
}

void OUTLINED_FUNCTION_122_3(void *a1)
{
  outlined consume of Result<_DataTable, Error>(a1, 1);
}

uint64_t OUTLINED_FUNCTION_123_4()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Double.init<A>(_:)(v0, v1);
}

id OUTLINED_FUNCTION_125_5(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void OUTLINED_FUNCTION_127_4(Swift::OpaquePointer _, Swift::String context)
{
  DataFrame.validateContainsColumns(_:context:)(_, context);
}

void OUTLINED_FUNCTION_128_2(Swift::String _, Swift::OpaquePointer a2, Swift::String context)
{
  DataFrame.validateColumnTypes(_:_:context:)(_, a2, context);
}

uint64_t OUTLINED_FUNCTION_129_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return outlined init with take of (MLDataValue, MLDataValue)?(a1, (uint64_t)&a9);
}

void MLFewShotSoundClassifier.validationData(features:labels:device:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScalarType?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for Tensor();
  OUTLINED_FUNCTION_3();
  v2 = MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8NSNumberCG_14NeuralNetworks6TensorVs5NeverOTg5();
  type metadata accessor for ScalarType();
  OUTLINED_FUNCTION_6_33();
  Tensor.init(concatenating:alongAxis:scalarType:)();
  OUTLINED_FUNCTION_6_33();
  Tensor.init(stacking:alongAxis:scalarType:)();
  DataSample.init(features:labels:)();
  OUTLINED_FUNCTION_9_5();
}

void closure #1 in MLFewShotSoundClassifier.makeSoundDataset<A>(from:batchSize:device:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  uint64_t v23;
  _QWORD v24[8];
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v24[7] = a1;
  v29 = a2;
  v2 = type metadata accessor for FloatingPointRoundingRule();
  v24[5] = *(_QWORD *)(v2 - 8);
  v24[6] = v2;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_64();
  v24[4] = v4;
  v5 = type metadata accessor for ScalarType();
  v24[2] = *(_QWORD *)(v5 - 8);
  v24[3] = v5;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_64();
  v24[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(type metadata accessor for Tensor() - 8);
  OUTLINED_FUNCTION_3();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v25 = (uint64_t)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v24 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v28 = (char *)v24 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v24 - v19;
  type metadata accessor for ComputeDevice();
  OUTLINED_FUNCTION_1_36();
  OUTLINED_FUNCTION_0_42();
  v26 = v20;
  Tensor.init(oneHotAtIndex:depth:onValue:offValue:on:)();
  v21 = MLMultiArray.cast(to:)((id)0x10020);
  OUTLINED_FUNCTION_1_36();
  OUTLINED_FUNCTION_0_42();
  v22 = v21;
  Tensor.init(_:device:)(v22, (uint64_t)v10);
  OUTLINED_FUNCTION_7_30();
  OUTLINED_FUNCTION_48_2((uint64_t)v16);
  OUTLINED_FUNCTION_8_32((uint64_t)v16, (uint64_t)v21);
  v23 = (uint64_t)v26;
  OUTLINED_FUNCTION_8_32(v25, (uint64_t)v26);
  OUTLINED_FUNCTION_3_35();

  OUTLINED_FUNCTION_48_2((uint64_t)v21);
  OUTLINED_FUNCTION_48_2(v23);
  OUTLINED_FUNCTION_9_5();
}

uint64_t closure #1 in MLFewShotSoundClassifier.validationData(features:labels:device:)(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(*a1, sel_integerValue);
  type metadata accessor for MLFewShotSoundClassifier();
  v8 = type metadata accessor for ComputeDevice();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, a3, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  return Tensor.init(oneHotAtIndex:depth:onValue:offValue:on:)();
}

uint64_t partial apply for closure #1 in MLFewShotSoundClassifier.validationData(features:labels:device:)(id *a1)
{
  uint64_t v1;

  return closure #1 in MLFewShotSoundClassifier.validationData(features:labels:device:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void closure #2 in MLFewShotSoundClassifier.validationData(features:labels:device:)(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a2;
  v31 = a3;
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ScalarType();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComputeDevice?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Tensor();
  v26 = *(_QWORD *)(v15 - 8);
  v27 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v19 = MLMultiArray.cast(to:)((id)0x10020);
  if (v3)
  {

    v20 = type metadata accessor for ComputeDevice();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v14, v30, v20);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v20);
    Tensor.init(_:device:)(v18, (uint64_t)v14);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE6B8B8], v8);
    v22 = v28;
    v21 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v7, *MEMORY[0x24BEE38B8], v29);
    Tensor.cast(to:roundingRule:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v21);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v27);
  }
  else
  {
    v23 = v19;
    v24 = type metadata accessor for ComputeDevice();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v14, v30, v24);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v24);
    Tensor.init(_:device:)(v23, (uint64_t)v14);
  }
}

void partial apply for closure #2 in MLFewShotSoundClassifier.validationData(features:labels:device:)(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  closure #2 in MLFewShotSoundClassifier.validationData(features:labels:device:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t OUTLINED_FUNCTION_0_42()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_1_36()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v0, v1, v3);
}

uint64_t OUTLINED_FUNCTION_3_35()
{
  return DataSample.init(features:labels:)();
}

uint64_t OUTLINED_FUNCTION_6_33()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_7_30()
{
  return Tensor.squeezingShape(at:)();
}

uint64_t OUTLINED_FUNCTION_8_32(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

_QWORD *initializeBufferWithCopyOfBuffer for AnyTreeClassifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    v7 = *((_BYTE *)a2 + 32);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = v7;
    v8 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v8;
    v9 = *(int *)(a3 + 32);
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    *(_QWORD *)(a1 + 56) = a2[7];
    v12 = type metadata accessor for BaseTreeClassifier();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  return v3;
}

uint64_t destroy for AnyTreeClassifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for BaseTreeClassifier();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v11 = type metadata accessor for BaseTreeClassifier();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BaseTreeClassifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(int *)(a3 + 32);
  v6 = a2 + v5;
  v7 = a1 + v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = type metadata accessor for BaseTreeClassifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v6, v8);
  return a1;
}

uint64_t assignWithTake for AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v7 = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 32);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for BaseTreeClassifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyTreeClassifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEC83A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_16_26();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AnyTreeClassifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21AEC8424(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = OUTLINED_FUNCTION_16_26();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AnyTreeClassifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AnyTreeClassifier;
  if (!type metadata singleton initialization cache for AnyTreeClassifier)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AnyTreeClassifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BaseTreeClassifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void associated type witness table accessor for SupervisedTabularEstimator.Transformer : TabularTransformer in AnyTreeClassifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type AnyTreeClassifierModel and conformance AnyTreeClassifierModel, (void (*)(uint64_t))type metadata accessor for AnyTreeClassifierModel);
}

void AnyTreeClassifier.init(labels:annotationColumnName:featureColumnNames:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int64_t v20;
  int v21;
  int v22;
  char v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t *v48;

  v11 = OUTLINED_FUNCTION_21_22();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_64();
  v43 = v13;
  v14 = OUTLINED_FUNCTION_16_26();
  v45 = *(_QWORD *)(v14 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_80_3(v16, v37);
  *(_QWORD *)v5 = a2;
  *(_QWORD *)(v5 + 8) = a3;
  *(_QWORD *)(v5 + 16) = a4;
  OUTLINED_FUNCTION_31_17();
  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = v17;
  *(_QWORD *)(v5 + 56) = 0x800000021AFF21B0;
  v18 = *(_QWORD *)(v6 + 16);
  if (v18)
  {
    v38 = v12;
    v39 = v14;
    v40 = v11;
    v41 = a5;
    v42 = v5;
    v48 = (uint64_t *)MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_52_1();
    v19 = (uint64_t *)&v48;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v20 = OUTLINED_FUNCTION_23_21();
    v22 = v21;
    v24 = v23 & 1;
    v46 = v6 + 56;
    while ((v20 & 0x8000000000000000) == 0 && v20 < 1 << *(_BYTE *)(v6 + 32))
    {
      if (((*(_QWORD *)(v46 + (((unint64_t)v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        goto LABEL_20;
      if (*(_DWORD *)(v6 + 36) != v22)
        goto LABEL_21;
      v47 = v24;
      v25 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v20);
      v26 = v25[1];
      if (v26)
        v27 = *v25;
      else
        v27 = 0;
      if (v26)
        v28 = v25[1];
      else
        v28 = 0xE000000000000000;
      v48 = v19;
      v29 = v6;
      v31 = v19[2];
      v30 = v19[3];
      swift_bridgeObjectRetain();
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v19 = v48;
      }
      v19[2] = v31 + 1;
      v32 = &v19[2 * v31];
      v32[4] = v27;
      v32[5] = v28;
      v33 = specialized _NativeSet.index(after:)(v20, v22, v47 & 1, v29);
      v20 = v33;
      v22 = v34;
      v24 = v35 & 1;
      --v18;
      v6 = v29;
      if (!v18)
      {
        outlined consume of [MLDataValue : MLDataValue].Index._Variant(v33, v34, v24);
        OUTLINED_FUNCTION_15_0();
        a5 = v41;
        v5 = v42;
        v14 = v39;
        v11 = v40;
        v12 = v38;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    swift_release();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_52_1();
    OUTLINED_FUNCTION_15_0();
    v19 = (uint64_t *)MEMORY[0x24BEE4AF8];
LABEL_18:
    v48 = v19;
    OUTLINED_FUNCTION_52_1();
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v48);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 24) = v48;
    *(_BYTE *)(v5 + 32) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v43, a5, v11);
    BaseTreeClassifier.init(configuration:)();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a5, v11);
    v36 = OUTLINED_FUNCTION_26_16();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v5 + *(int *)(v36 + 32), v44, v14);
    OUTLINED_FUNCTION_9_5();
  }
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int64_t v19;
  int v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;

  v11 = OUTLINED_FUNCTION_21_22();
  v41 = *(_QWORD *)(v11 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_80_3(v13, v35);
  v14 = OUTLINED_FUNCTION_16_26();
  v40 = *(_QWORD *)(v14 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_64();
  v39 = v16;
  *(_QWORD *)v5 = a2;
  *(_QWORD *)(v5 + 8) = a3;
  *(_QWORD *)(v5 + 16) = a4;
  v17 = *(_QWORD *)(v6 + 16);
  if (v17)
  {
    v36 = v11;
    v37 = a5;
    v38 = v5;
    v42 = (uint64_t *)MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_189();
    v18 = (uint64_t *)&v42;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    v19 = OUTLINED_FUNCTION_23_21();
    v21 = v20;
    v23 = v22 & 1;
    while ((v19 & 0x8000000000000000) == 0 && v19 < 1 << *(_BYTE *)(v6 + 32))
    {
      if (((*(_QWORD *)(v6 + 56 + (((unint64_t)v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        goto LABEL_17;
      if (*(_DWORD *)(v6 + 36) != v21)
        goto LABEL_18;
      v24 = *(_QWORD *)(v6 + 48) + 16 * v19;
      if (*(_BYTE *)(v24 + 8))
        v25 = 0;
      else
        v25 = *(_QWORD *)v24;
      v42 = v18;
      v27 = v18[2];
      v26 = v18[3];
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        v18 = v42;
      }
      v18[2] = v27 + 1;
      v18[v27 + 4] = v25;
      v28 = specialized _NativeSet.index(after:)(v19, v21, v23 & 1, v6);
      v19 = v28;
      v21 = v29;
      v23 = v30 & 1;
      if (!--v17)
      {
        outlined consume of [MLDataValue : MLDataValue].Index._Variant(v28, v29, v30 & 1);
        OUTLINED_FUNCTION_15_0();
        a5 = v37;
        v5 = v38;
        v11 = v36;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    swift_release();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_15_0();
    v18 = (uint64_t *)MEMORY[0x24BEE4AF8];
LABEL_15:
    v42 = v18;
    OUTLINED_FUNCTION_52_1();
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v42);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 24) = v42;
    *(_BYTE *)(v5 + 32) = 0;
    OUTLINED_FUNCTION_31_17();
    *(_QWORD *)(v5 + 40) = a4;
    *(_QWORD *)(v5 + 48) = v31;
    *(_QWORD *)(v5 + 56) = 0x800000021AFF21B0;
    v32 = OUTLINED_FUNCTION_22_18();
    v33(v32);
    BaseTreeClassifier.init(configuration:)();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(a5, v11);
    v34 = OUTLINED_FUNCTION_26_16();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v5 + *(int *)(v34 + 32), v39, v14);
    OUTLINED_FUNCTION_9_5();
  }
}

void AnyTreeClassifier.makeTransformer()(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v13;

  v3 = type metadata accessor for BaseTreeClassifierModel();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  v9 = *v1;
  v8 = v1[1];
  v10 = v1[3];
  v11 = *((_BYTE *)v1 + 32);
  OUTLINED_FUNCTION_26_16();
  swift_bridgeObjectRetain();
  BaseTreeClassifier.makeTransformer(classCount:featureCount:)();
  *(_QWORD *)a1 = v9;
  *((_QWORD *)a1 + 1) = v8;
  v12 = type metadata accessor for AnyTreeClassifierModel();
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 2) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&a1[*(int *)(v12 + 24)], v7, v3);
  v13 = &a1[*(int *)(v12 + 28)];
  *(_QWORD *)v13 = v10;
  v13[8] = v11;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_9_5();
}

uint64_t AnyTreeClassifier.update(_:with:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  v5[10] = OUTLINED_FUNCTION_0();
  v7 = type metadata accessor for AnyColumn();
  v5[11] = v7;
  v5[12] = *(_QWORD *)(v7 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AnyTreeClassifier.update(_:with:eventHandler:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t ML16ColumnDescriptorVsAE_pTg5;
  uint64_t *v3;
  uint64_t result;
  _BYTE *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(uint64_t **)(v0 + 16);
  ML16ColumnDescriptorVsAE_pTg5 = v1[2];
  v3 = v1;
  if (!ML16ColumnDescriptorVsAE_pTg5)
  {
    v11 = *(_QWORD *)(v0 + 24);
    v12 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
    v13 = swift_task_alloc();
    *(_QWORD *)(v13 + 16) = v11;
    OUTLINED_FUNCTION_23_3();
    ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)partial apply for closure #1 in FeatureVectorizer.fitted(to:), v13, v12);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    outlined consume of FeatureVectorizer<Float>.Transformer?(v1[2]);
    OUTLINED_FUNCTION_31_17();
    v1[2] = ML16ColumnDescriptorVsAE_pTg5;
    v1[3] = v14;
    v1[4] = 0x800000021AFF21B0;
    v3 = *(uint64_t **)(v0 + 16);
  }
  result = type metadata accessor for AnyTreeClassifierModel();
  v5 = (char *)v3 + *(int *)(result + 28);
  v6 = *(_QWORD *)v5;
  if (*(_QWORD *)(*(_QWORD *)v5 + 16))
  {
    v7 = v5[8];
    if (ML16ColumnDescriptorVsAE_pTg5)
    {
LABEL_5:
      specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
      v9 = *(_QWORD *)(v0 + 96);
      v8 = *(_QWORD *)(v0 + 104);
      v10 = *(_QWORD *)(v0 + 72);
      v20 = *(_QWORD *)(v0 + 64);
      v21 = *(_QWORD *)(v0 + 56);
      v19 = *(_QWORD *)(v0 + 88);
      MEMORY[0x220758A1C](**(_QWORD **)(v0 + 48), *(_QWORD *)(*(_QWORD *)(v0 + 48) + 8));
      Labels.encodeAnnotations(_:)(v8, v6, v7 & 1);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v19);
      OUTLINED_FUNCTION_26_16();
      BaseTreeClassifier.update(_:features:annotations:eventHandler:)();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v10, v21);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 88);
    MEMORY[0x220758A1C](**(_QWORD **)(v0 + 48), *(_QWORD *)(*(_QWORD *)(v0 + 48) + 8));
    __swift_storeEnumTagSinglePayload(v17, 1, 1, v16);
    v6 = static Labels.collected(from:_:)(v15, v17);
    v7 = v18;
    outlined destroy of FeatureMatrixBuilder<Float>(*(_QWORD *)(v0 + 80), &demangling cache variable for type metadata for AnyColumn?);
    OUTLINED_FUNCTION_13_35();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v5 = v6;
    v5[8] = v7 & 1;
    if (v1[2])
      goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t AnyTreeClassifier.annotationColumnID.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<String, Int>);
  OUTLINED_FUNCTION_52_1();
  return ColumnID.init(_:_:)();
}

void AnyTreeClassifier.init(trainingLabelsColumn:validationLabelsColumn:annotationColumnName:featureColumnNames:configuration:)(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  Swift::Int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;

  v77 = a5;
  v73 = a2;
  v74 = a3;
  v79 = a1;
  v8 = type metadata accessor for BoostedTreeConfiguration();
  v75 = *(_QWORD *)(v8 - 8);
  v76 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v69 = v10;
  v11 = type metadata accessor for BaseTreeClassifier();
  v71 = *(_QWORD *)(v11 - 8);
  v72 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_38_4(v13, v61);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  v65 = *(_QWORD *)(v14 - 8);
  v66 = v14;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_64();
  v64 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<Int>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_64();
  v63 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyColumn?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_24_25();
  MEMORY[0x24BDAC7A8](v20);
  v67 = (char *)&v61 - v21;
  v22 = OUTLINED_FUNCTION_56_6();
  v82 = *(_QWORD *)(v22 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v62 = (char *)&v61 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<String>);
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_49();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FilledColumn<Column<String>>);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_49();
  v30 = v74;
  *a6 = v73;
  a6[1] = v30;
  a6[2] = a4;
  OUTLINED_FUNCTION_31_17();
  a6[5] = a4;
  a6[6] = v31;
  v74 = a6;
  a6[7] = 0x800000021AFF21B0;
  swift_bridgeObjectRetain();
  AnyColumn.wrappedElementType.getter();
  v32 = swift_dynamicCastMetatype();
  v33 = v32;
  v78 = v22;
  if (v32)
  {
    v66 = v32;
    OUTLINED_FUNCTION_38_14();
    v80 = 0;
    v81 = 0xE000000000000000;
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<String> and conformance Column<A>, &demangling cache variable for type metadata for Column<String>);
    OUTLINED_FUNCTION_5_31();
    OUTLINED_FUNCTION_30_19();
    specialized Set.init<A>(_:)();
    v35 = v34;
    v36 = (uint64_t)v67;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v79, (uint64_t)v67, &demangling cache variable for type metadata for AnyColumn?);
    if (__swift_getEnumTagSinglePayload(v36, 1, v22) == 1)
    {
      outlined destroy of FeatureMatrixBuilder<Float>(v36, &demangling cache variable for type metadata for AnyColumn?);
    }
    else
    {
      v43 = v62;
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v62, v36, v22);
      AnyColumn.assumingType<A>(_:)();
      v80 = 0;
      v81 = 0xE000000000000000;
      OUTLINED_FUNCTION_5_31();
      OUTLINED_FUNCTION_30_19();
      specialized Set.init<A>(_:)();
      specialized Set.union<A>(_:)(v44, v35);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v43, v22);
    }
    swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    v46 = v45;
    swift_bridgeObjectRelease();
    v80 = v46;
    v47 = v68;
    specialized MutableCollection<>.sort(by:)(&v80);
    v40 = v79;
    v33 = v66;
    if (!v47)
      goto LABEL_13;
  }
  else
  {
    v67 = v25;
    if (!swift_dynamicCastMetatype())
    {
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v48 = 0xD000000000000025;
      *(_QWORD *)(v48 + 8) = 0x800000021AFF5180;
      *(_OWORD *)(v48 + 16) = 0u;
      *(_OWORD *)(v48 + 32) = 0u;
      *(_BYTE *)(v48 + 48) = 1;
      swift_willThrow(0.0);
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v77, v76);
      outlined destroy of FeatureMatrixBuilder<Float>(v79, &demangling cache variable for type metadata for AnyColumn?);
      OUTLINED_FUNCTION_7_31();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_14:
      OUTLINED_FUNCTION_7();
      return;
    }
    OUTLINED_FUNCTION_38_14();
    v80 = 0;
    lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type Column<Int> and conformance Column<A>, &demangling cache variable for type metadata for Column<Int>);
    v62 = v37;
    OptionalColumnProtocol.filled(with:)();
    OUTLINED_FUNCTION_27_27();
    specialized Set.init<A>(_:)();
    v39 = v38;
    v40 = v79;
    v41 = v61;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v79, v61, &demangling cache variable for type metadata for AnyColumn?);
    v42 = v78;
    if (__swift_getEnumTagSinglePayload(v41, 1, v78) == 1)
    {
      outlined destroy of FeatureMatrixBuilder<Float>(v41, &demangling cache variable for type metadata for AnyColumn?);
    }
    else
    {
      v49 = v41;
      v50 = (uint64_t)v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v67, v49, v42);
      AnyColumn.assumingType<A>(_:)();
      v80 = 0;
      OptionalColumnProtocol.filled(with:)();
      OUTLINED_FUNCTION_27_27();
      specialized Set.init<A>(_:)();
      specialized Set.union<A>(_:)(v51, v39);
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v50, v78);
    }
    swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)();
    v53 = v52;
    OUTLINED_FUNCTION_12_0();
    v80 = v53;
    v54 = v68;
    specialized MutableCollection<>.sort(by:)(&v80);
    if (!v54)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      v55 = v74;
      v56 = v75;
      v74[3] = v80;
      *((_BYTE *)v55 + 32) = v33 != 0;
      OUTLINED_FUNCTION_133_0(v69, v77, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 16));
      v57 = v70;
      BaseTreeClassifier.init(configuration:)();
      v58 = OUTLINED_FUNCTION_22_18();
      v59(v58);
      outlined destroy of FeatureMatrixBuilder<Float>(v40, &demangling cache variable for type metadata for AnyColumn?);
      OUTLINED_FUNCTION_7_31();
      v60 = OUTLINED_FUNCTION_26_16();
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))((char *)v55 + *(int *)(v60 + 32), v57, v72);
      goto LABEL_14;
    }
  }
  swift_release();
  __break(1u);
}

void AnyTreeClassifier.fitted(to:validateOn:eventHandler:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ML16ColumnDescriptorVsAE_pTg5;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char v90[16];
  uint64_t v91;
  uint64_t v92;

  v79 = a3;
  v80 = a4;
  v83 = a2;
  v76 = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v84 = v8;
  v88 = type metadata accessor for DataFrame();
  v78 = *(_QWORD *)(v88 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_38_4(v10, v66);
  v11 = OUTLINED_FUNCTION_33_17();
  v12 = *(_QWORD *)(v11 - 8);
  v73 = v11;
  v74 = v12;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v13);
  v77 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_24_25();
  MEMORY[0x24BDAC7A8](v16);
  v75 = (char *)&v66 - v17;
  v85 = OUTLINED_FUNCTION_56_6();
  v82 = *(_QWORD *)(v85 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_49();
  v21 = v20 - v19;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DenseMatrix<Float>);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v66 - v27;
  v29 = v5[5];
  v89 = v5[6];
  v86 = v5;
  v87 = (char *)a1;
  v30 = v5[7];
  v91 = a1;
  swift_bridgeObjectRetain();
  v31 = v92;
  ML16ColumnDescriptorVsAE_pTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_8CreateML16ColumnDescriptorVsAE_pTg5((uint64_t)closure #1 in FeatureVectorizer.fitted(to:)partial apply, (uint64_t)v90, v29);
  swift_bridgeObjectRelease();
  if (!v31)
  {
    v92 = v21;
    v69 = v25;
    v70 = v23;
    v71 = v22;
    v33 = v86;
    v34 = v88;
    OUTLINED_FUNCTION_189();
    specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
    v67 = v30;
    OUTLINED_FUNCTION_25_19();
    v35 = v33;
    v36 = v33[3];
    HIDWORD(v66) = *((unsigned __int8 *)v33 + 32);
    v37 = v92;
    MEMORY[0x220758A1C](*v33, v33[1]);
    v38 = v37;
    v39 = Labels.encodeAnnotations(_:)(v37, v36, SBYTE4(v66));
    v40 = *(void (**)(_QWORD, _QWORD))(v82 + 8);
    v40(v38, v85);
    v41 = v84;
    outlined init with copy of Either<LogisticRegressionClassifier<Float, String>, FullyConnectedNetworkClassifier<Float, String>>(v83, v84, &demangling cache variable for type metadata for DataFrame?);
    if (__swift_getEnumTagSinglePayload(v41, 1, v34) == 1)
    {
      v42 = ML16ColumnDescriptorVsAE_pTg5;
      outlined destroy of FeatureMatrixBuilder<Float>(v41, &demangling cache variable for type metadata for DataFrame?);
      OUTLINED_FUNCTION_26_16();
      v43 = v77;
      v44 = v68;
      BaseTreeClassifier.fitted(features:annotations:classCount:eventHandler:)();
      OUTLINED_FUNCTION_69_2((uint64_t)v28, *(uint64_t (**)(uint64_t, _QWORD))(v70 + 8));
      if (v44)
      {
        OUTLINED_FUNCTION_26_22();
        OUTLINED_FUNCTION_12_0();
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      OUTLINED_FUNCTION_25_19();
      OUTLINED_FUNCTION_60_0();
      v49 = v75;
      v50 = *(void (**)(_QWORD, _QWORD, _QWORD))(v74 + 32);
      v51 = v75;
      v52 = v43;
    }
    else
    {
      v83 = v39;
      v87 = v28;
      v45 = v78;
      v46 = v81;
      OUTLINED_FUNCTION_133_0(v81, v41, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 32));
      v47 = v34;
      v42 = ML16ColumnDescriptorVsAE_pTg5;
      v48 = v68;
      specialized FeatureVectorizer.Transformer.vectorized(_:includingBias:)();
      if (v48)
      {
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_12_0();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
        OUTLINED_FUNCTION_69_2((uint64_t)v87, *(uint64_t (**)(uint64_t, _QWORD))(v70 + 8));
        goto LABEL_3;
      }
      v53 = v35[3];
      OUTLINED_FUNCTION_25_19();
      v54 = *((_BYTE *)v35 + 32);
      v55 = v92;
      MEMORY[0x220758A1C](*v35, v35[1]);
      Labels.encodeAnnotations(_:)(v55, v53, v54);
      v40(v55, v85);
      OUTLINED_FUNCTION_26_16();
      v56 = v72;
      v57 = v68;
      BaseTreeClassifier.fitted(trainingFeatures:trainingAnnotations:validationFeatures:validationAnnotations:classCount:eventHandler:)();
      if (v57)
      {
        OUTLINED_FUNCTION_26_22();
        OUTLINED_FUNCTION_12_0();
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_60_0();
        OUTLINED_FUNCTION_4_42();
        OUTLINED_FUNCTION_8_33();
        OUTLINED_FUNCTION_29_17();
        goto LABEL_3;
      }
      OUTLINED_FUNCTION_25_19();
      OUTLINED_FUNCTION_123();
      OUTLINED_FUNCTION_60_0();
      OUTLINED_FUNCTION_4_42();
      OUTLINED_FUNCTION_8_33();
      OUTLINED_FUNCTION_29_17();
      v49 = v75;
      v50 = *(void (**)(_QWORD, _QWORD, _QWORD))(v74 + 32);
      v51 = v75;
      v52 = v56;
    }
    v58 = v73;
    v50(v51, v52, v73);
    v60 = *v35;
    v59 = v35[1];
    v61 = OUTLINED_FUNCTION_63_8();
    v62 = v76;
    v50((char *)v76 + *(int *)(v61 + 24), v49, v58);
    v63 = v35[3];
    v64 = *((_BYTE *)v35 + 32);
    *v62 = v60;
    v62[1] = v59;
    v65 = v89;
    v62[2] = v42;
    v62[3] = v65;
    v62[4] = v67;
    OUTLINED_FUNCTION_12_30(v63, v64);
    OUTLINED_FUNCTION_23_3();
  }
LABEL_3:
  OUTLINED_FUNCTION_7();
}

uint64_t AnyTreeClassifier.encode(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  __swift_mutable_project_boxed_opaque_existential_1(a2, *(_QWORD *)(a2 + 24));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer?);
  lazy protocol witness table accessor for type FeatureVectorizer<Float>.Transformer? and conformance <A> A?();
  result = dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  if (!v2)
  {
    OUTLINED_FUNCTION_63_8();
    v4 = OUTLINED_FUNCTION_22_18();
    __swift_mutable_project_boxed_opaque_existential_1(v4, v5);
    OUTLINED_FUNCTION_33_17();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type BaseTreeClassifierModel and conformance BaseTreeClassifierModel, (void (*)(uint64_t))MEMORY[0x24BDC5CE0]);
    return dispatch thunk of EstimatorEncoder.encode<A>(_:)();
  }
  return result;
}

void AnyTreeClassifier.decode(from:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = OUTLINED_FUNCTION_33_17();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_64();
  v17 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  __swift_mutable_project_boxed_opaque_existential_1(a1, *(_QWORD *)(a1 + 24));
  lazy protocol witness table accessor for type FullyConnectedNetworkClassifier<Float, String> and conformance FullyConnectedNetworkClassifier<A, B>(&lazy protocol witness table cache variable for type FeatureVectorizer<Float>.Transformer and conformance FeatureVectorizer<A>.Transformer, &demangling cache variable for type metadata for FeatureVectorizer<Float>.Transformer);
  dispatch thunk of EstimatorDecoder.decode<A>(_:)();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1(a1, *(_QWORD *)(a1 + 24));
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type BaseTreeClassifierModel and conformance BaseTreeClassifierModel, (void (*)(uint64_t))MEMORY[0x24BDC5CE0]);
    dispatch thunk of EstimatorDecoder.decode<A>(_:)();
    v7 = v12[1];
    v11 = *v12;
    v8 = OUTLINED_FUNCTION_63_8();
    OUTLINED_FUNCTION_133_0((uint64_t)a2 + *(int *)(v8 + 24), v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    v9 = v12[3];
    v10 = *((_BYTE *)v12 + 32);
    *a2 = v11;
    a2[1] = v7;
    a2[2] = v14;
    a2[3] = v15;
    a2[4] = v16;
    OUTLINED_FUNCTION_12_30(v9, v10);
    OUTLINED_FUNCTION_23_3();
  }
  OUTLINED_FUNCTION_7();
}

void (*protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance AnyTreeClassifier(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ColumnID<Either<String, Int>>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  AnyTreeClassifier.annotationColumnID.getter();
  return protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance AnyTreeClassifier;
}

void protocol witness for SupervisedTabularEstimator.annotationColumnID.modify in conformance AnyTreeClassifier(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void (*v6)(uint64_t);

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, _QWORD))(v2[2] + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v2[1]);
    MLLogisticRegressionClassifier.Classifier.annotationColumnID.setter((uint64_t)v3);
    v5 = OUTLINED_FUNCTION_22_18();
    v6(v5);
  }
  else
  {
    MLLogisticRegressionClassifier.Classifier.annotationColumnID.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance AnyTreeClassifier(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  AnyTreeClassifier.fitted(to:validateOn:eventHandler:)(a2, a3, a4, a5, a1);
  return protocol witness for SupervisedTabularEstimator.fitted(to:validateOn:eventHandler:) in conformance TreeRegressor(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance AnyTreeClassifier(uint64_t a1, uint64_t a2)
{
  return AnyTreeClassifier.encode(_:to:)(a1, a2);
}

void protocol witness for SupervisedTabularEstimator.decode(from:) in conformance AnyTreeClassifier(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  AnyTreeClassifier.decode(from:)(a1, a2);
}

void base witness table accessor for SupervisedTabularEstimator in AnyTreeClassifier()
{
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type AnyTreeClassifier and conformance AnyTreeClassifier, (void (*)(uint64_t))type metadata accessor for AnyTreeClassifier);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.update(_:with:eventHandler:) in conformance AnyTreeClassifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = partial apply for closure #1 in MLLogisticRegressionClassifier.init(checkpoint:);
  return AnyTreeClassifier.update(_:with:eventHandler:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UpdatableSupervisedTabularEstimator.encodeWithOptimizer(_:to:) in conformance AnyTreeClassifier(uint64_t a1, uint64_t a2)
{
  return protocol witness for SupervisedTabularEstimator.encode(_:to:) in conformance AnyTreeClassifier(a1, a2);
}

void protocol witness for UpdatableSupervisedTabularEstimator.decodeWithOptimizer(from:) in conformance AnyTreeClassifier(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  protocol witness for SupervisedTabularEstimator.decode(from:) in conformance AnyTreeClassifier(a1, a2);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t *v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t *v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return;
    }
    goto LABEL_124;
  }
  v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v85 = a1;
  v86 = v6;
  v90 = v7;
  v88 = v3;
  if (v3 <= 0)
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    v27 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_90:
    if (v27 < 2)
    {
LABEL_101:
      swift_bridgeObjectRelease();
      if (v88 >= -1)
      {
        *(_QWORD *)(v86 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_129;
    }
    v78 = *v85;
    while (1)
    {
      v79 = v27 - 2;
      if (v27 < 2)
        break;
      if (!v78)
        goto LABEL_133;
      v80 = *(_QWORD *)&v10[16 * v79 + 32];
      v81 = *(_QWORD *)&v10[16 * v27 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v78 + 8 * v80), (uint64_t *)(v78 + 8 * *(_QWORD *)&v10[16 * v27 + 16]), v78 + 8 * v81, v90);
      if (v1)
        goto LABEL_86;
      if (v81 < v80)
        goto LABEL_119;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()();
      if (v79 >= *((_QWORD *)v10 + 2))
        goto LABEL_120;
      v82 = &v10[16 * v79 + 32];
      *(_QWORD *)v82 = v80;
      *((_QWORD *)v82 + 1) = v81;
      v83 = *((_QWORD *)v10 + 2);
      if (v27 > v83)
        goto LABEL_121;
      memmove(&v10[16 * v27 + 16], &v10[16 * v27 + 32], 16 * (v83 - v27));
      *((_QWORD *)v10 + 2) = v83 - 1;
      v27 = v83 - 1;
      if (v83 <= 2)
        goto LABEL_101;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return;
  }
  v8 = 0;
  v9 = *a1;
  v84 = *a1 - 8;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v87 = v5;
  v89 = *a1;
  while (1)
  {
    v11 = v8++;
    if (v8 < v3)
    {
      v12 = *(_QWORD *)(v9 + 8 * v8);
      v13 = *(_QWORD *)(v9 + 8 * v11);
      v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        v14 = v12;
        while (1)
        {
          v15 = *(_QWORD *)(v9 + 8 * v8);
          if (v12 < v13 == v15 >= v14)
            break;
          ++v8;
          v14 = v15;
          if (v8 >= v3)
          {
            v8 = v3;
            break;
          }
        }
      }
      if (v12 < v13)
      {
        if (v8 < v11)
          goto LABEL_126;
        if (v11 < v8)
        {
          v16 = v8 - 1;
          v17 = v11;
          do
          {
            if (v17 != v16)
            {
              if (!v9)
                goto LABEL_132;
              v18 = *(_QWORD *)(v9 + 8 * v17);
              *(_QWORD *)(v9 + 8 * v17) = *(_QWORD *)(v9 + 8 * v16);
              *(_QWORD *)(v9 + 8 * v16) = v18;
            }
            v58 = ++v17 < v16--;
          }
          while (v58);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11))
        goto LABEL_123;
      if (v8 - v11 < v5)
      {
        v19 = v11 + v5;
        if (__OFADD__(v11, v5))
          goto LABEL_127;
        if (v19 >= v3)
          v19 = v3;
        if (v19 < v11)
          goto LABEL_128;
        if (v8 != v19)
        {
          v20 = (uint64_t *)(v84 + 8 * v8);
          do
          {
            v21 = *(_QWORD *)(v9 + 8 * v8);
            v22 = v11;
            v23 = v20;
            do
            {
              v24 = *v23;
              if (v21 >= *v23)
                break;
              if (!v9)
                goto LABEL_130;
              *v23 = v21;
              v23[1] = v24;
              --v23;
              ++v22;
            }
            while (v8 != v22);
            ++v8;
            ++v20;
          }
          while (v8 != v19);
          v8 = v19;
        }
      }
    }
    if (v8 < v11)
      goto LABEL_122;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v26 = *((_QWORD *)v10 + 2);
    v25 = *((_QWORD *)v10 + 3);
    v27 = v26 + 1;
    v9 = v89;
    if (v26 >= v25 >> 1)
    {
      v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v10);
      v9 = v89;
      v10 = v77;
    }
    *((_QWORD *)v10 + 2) = v27;
    v28 = v10 + 32;
    v29 = &v10[16 * v26 + 32];
    *(_QWORD *)v29 = v11;
    *((_QWORD *)v29 + 1) = v8;
    if (v26)
      break;
    v27 = 1;
LABEL_81:
    v5 = v87;
    v3 = v88;
    if (v8 >= v88)
      goto LABEL_90;
  }
  while (1)
  {
    v30 = v27 - 1;
    if (v27 >= 4)
    {
      v35 = &v28[16 * v27];
      v36 = *((_QWORD *)v35 - 8);
      v37 = *((_QWORD *)v35 - 7);
      v41 = __OFSUB__(v37, v36);
      v38 = v37 - v36;
      if (v41)
        goto LABEL_107;
      v40 = *((_QWORD *)v35 - 6);
      v39 = *((_QWORD *)v35 - 5);
      v41 = __OFSUB__(v39, v40);
      v33 = v39 - v40;
      v34 = v41;
      if (v41)
        goto LABEL_108;
      v42 = v27 - 2;
      v43 = &v28[16 * v27 - 32];
      v45 = *(_QWORD *)v43;
      v44 = *((_QWORD *)v43 + 1);
      v41 = __OFSUB__(v44, v45);
      v46 = v44 - v45;
      if (v41)
        goto LABEL_109;
      v41 = __OFADD__(v33, v46);
      v47 = v33 + v46;
      if (v41)
        goto LABEL_111;
      if (v47 >= v38)
      {
        v65 = &v28[16 * v30];
        v67 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        v41 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v41)
          goto LABEL_117;
        v58 = v33 < v68;
        goto LABEL_70;
      }
    }
    else
    {
      if (v27 != 3)
      {
        v59 = *((_QWORD *)v10 + 4);
        v60 = *((_QWORD *)v10 + 5);
        v41 = __OFSUB__(v60, v59);
        v52 = v60 - v59;
        v53 = v41;
        goto LABEL_64;
      }
      v32 = *((_QWORD *)v10 + 4);
      v31 = *((_QWORD *)v10 + 5);
      v41 = __OFSUB__(v31, v32);
      v33 = v31 - v32;
      v34 = v41;
    }
    if ((v34 & 1) != 0)
      goto LABEL_110;
    v42 = v27 - 2;
    v48 = &v28[16 * v27 - 32];
    v50 = *(_QWORD *)v48;
    v49 = *((_QWORD *)v48 + 1);
    v51 = __OFSUB__(v49, v50);
    v52 = v49 - v50;
    v53 = v51;
    if (v51)
      goto LABEL_112;
    v54 = &v28[16 * v30];
    v56 = *(_QWORD *)v54;
    v55 = *((_QWORD *)v54 + 1);
    v41 = __OFSUB__(v55, v56);
    v57 = v55 - v56;
    if (v41)
      goto LABEL_114;
    if (__OFADD__(v52, v57))
      goto LABEL_116;
    if (v52 + v57 >= v33)
    {
      v58 = v33 < v57;
LABEL_70:
      if (v58)
        v30 = v42;
      goto LABEL_72;
    }
LABEL_64:
    if ((v53 & 1) != 0)
      goto LABEL_113;
    v61 = &v28[16 * v30];
    v63 = *(_QWORD *)v61;
    v62 = *((_QWORD *)v61 + 1);
    v41 = __OFSUB__(v62, v63);
    v64 = v62 - v63;
    if (v41)
      goto LABEL_115;
    if (v64 < v52)
      goto LABEL_81;
LABEL_72:
    v69 = v10;
    v70 = v30 - 1;
    if (v30 - 1 >= v27)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v9)
      goto LABEL_131;
    v71 = &v28[16 * v70];
    v72 = *(_QWORD *)v71;
    v73 = v28;
    v74 = &v28[16 * v30];
    v75 = *((_QWORD *)v74 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v9 + 8 * *(_QWORD *)v71), (uint64_t *)(v9 + 8 * *(_QWORD *)v74), v9 + 8 * v75, v90);
    if (v1)
      break;
    if (v75 < v72)
      goto LABEL_104;
    if (v30 > *((_QWORD *)v69 + 2))
      goto LABEL_105;
    *(_QWORD *)v71 = v72;
    *(_QWORD *)&v73[16 * v70 + 8] = v75;
    v76 = *((_QWORD *)v69 + 2);
    if (v30 >= v76)
      goto LABEL_106;
    v10 = v69;
    v27 = v76 - 1;
    memmove(v74, v74 + 16, 16 * (v76 - 1 - v30));
    v28 = v73;
    *((_QWORD *)v69 + 2) = v76 - 1;
    v9 = v89;
    if (v76 <= 2)
      goto LABEL_81;
  }
LABEL_86:
  swift_bridgeObjectRelease();
  if (v88 < -1)
    goto LABEL_125;
  *(_QWORD *)(v86 + 16) = 0;
  swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v16;
  Swift::Int v17;
  _QWORD *v18;
  _QWORD *v19;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  Swift::Int v85;
  _QWORD *v86;
  BOOL v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  Swift::Int v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return;
    }
    goto LABEL_144;
  }
  v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v98 = v6;
  v99 = v3;
  v100 = v7;
  v96 = a1;
  if (v3 <= 0)
  {
    v101 = (char *)MEMORY[0x24BEE4AF8];
    v33 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_110:
    if (v33 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(_QWORD *)(v98 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_149;
    }
    v88 = *v96;
    while (1)
    {
      v89 = v33 - 2;
      if (v33 < 2)
        break;
      if (!v88)
        goto LABEL_153;
      v90 = v101;
      v91 = *(_QWORD *)&v101[16 * v89 + 32];
      v92 = *(_QWORD *)&v101[16 * v33 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v88 + 16 * v91), (char *)(v88 + 16 * *(_QWORD *)&v101[16 * v33 + 16]), v88 + 16 * v92, v100);
      if (v1)
        goto LABEL_106;
      if (v92 < v91)
        goto LABEL_139;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v90 = specialized _ArrayBuffer._consumeAndCreateNew()();
      if (v89 >= *((_QWORD *)v90 + 2))
        goto LABEL_140;
      v93 = &v90[16 * v89 + 32];
      *(_QWORD *)v93 = v91;
      *((_QWORD *)v93 + 1) = v92;
      v94 = *((_QWORD *)v90 + 2);
      if (v33 > v94)
        goto LABEL_141;
      memmove(&v90[16 * v33 + 16], &v90[16 * v33 + 32], 16 * (v94 - v33));
      v101 = v90;
      *((_QWORD *)v90 + 2) = v94 - 1;
      v33 = v94 - 1;
      v3 = v99;
      if (v94 <= 2)
        goto LABEL_121;
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }
  v97 = v5;
  v8 = 0;
  v9 = *a1;
  v95 = *a1 + 8;
  v101 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v10 = v8++;
    if (v8 >= v3)
      goto LABEL_32;
    v11 = (uint64_t *)(v9 + 16 * v8);
    v12 = *v11;
    v13 = v11[1];
    v14 = (_QWORD *)(v9 + 16 * v10);
    if (v12 == *v14 && v13 == v14[1])
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v3)
        goto LABEL_31;
      v16 = 0;
LABEL_13:
      v18 = (_QWORD *)(v95 + 16 * v17);
      do
      {
        v19 = (_QWORD *)(v9 + 16 * v8);
        if (*(v18 - 1) == *v19 && *v18 == v19[1])
        {
          if ((v16 & 1) != 0)
            goto LABEL_24;
        }
        else if (((v16 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
        {
          goto LABEL_23;
        }
        v18 += 2;
        v21 = v17 + 1;
        v8 = v17;
        v17 = v21;
      }
      while (v21 < v3);
      v17 = v21;
      goto LABEL_23;
    }
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v17 = v10 + 2;
    if (v10 + 2 < v3)
      goto LABEL_13;
LABEL_23:
    v8 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_32;
LABEL_24:
    if (v17 < v10)
      goto LABEL_148;
    if (v10 < v17)
    {
      v22 = 16 * v17;
      v23 = 16 * v10;
      v24 = v17;
      v25 = v10;
      do
      {
        if (v25 != --v24)
        {
          if (!v9)
            goto LABEL_152;
          v26 = v9 + v22;
          v27 = *(_QWORD *)(v9 + v23);
          v28 = *(_QWORD *)(v9 + v23 + 8);
          *(_OWORD *)(v9 + v23) = *(_OWORD *)(v9 + v22 - 16);
          *(_QWORD *)(v26 - 16) = v27;
          *(_QWORD *)(v26 - 8) = v28;
        }
        ++v25;
        v22 -= 16;
        v23 += 16;
      }
      while (v25 < v24);
    }
LABEL_31:
    v8 = v17;
LABEL_32:
    if (v8 >= v3)
      goto LABEL_41;
    if (__OFSUB__(v8, v10))
      goto LABEL_143;
    if (v8 - v10 >= v97)
      goto LABEL_41;
    if (__OFADD__(v10, v97))
      goto LABEL_146;
    if (v10 + v97 >= v3)
      v29 = v3;
    else
      v29 = v10 + v97;
    if (v29 < v10)
      goto LABEL_147;
    if (v8 == v29)
    {
LABEL_41:
      v30 = v101;
    }
    else
    {
      v81 = (_QWORD *)(v9 + 16 * v8);
      v30 = v101;
      do
      {
        v82 = (uint64_t *)(v9 + 16 * v8);
        v83 = *v82;
        v84 = v82[1];
        v85 = v10;
        v86 = v81;
        do
        {
          v87 = v83 == *(v86 - 2) && v84 == *(v86 - 1);
          if (v87 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v9)
            goto LABEL_150;
          v83 = *v86;
          v84 = v86[1];
          *(_OWORD *)v86 = *((_OWORD *)v86 - 1);
          *(v86 - 1) = v84;
          *(v86 - 2) = v83;
          v86 -= 2;
          ++v85;
        }
        while (v8 != v85);
        ++v8;
        v81 += 2;
      }
      while (v8 != v29);
      v8 = v29;
    }
    if (v8 < v10)
      goto LABEL_142;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
    v32 = *((_QWORD *)v30 + 2);
    v31 = *((_QWORD *)v30 + 3);
    v33 = v32 + 1;
    if (v32 >= v31 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v30);
    *((_QWORD *)v30 + 2) = v33;
    v34 = v30 + 32;
    v35 = &v30[16 * v32 + 32];
    *(_QWORD *)v35 = v10;
    *((_QWORD *)v35 + 1) = v8;
    v101 = v30;
    if (v32)
      break;
    v33 = 1;
LABEL_90:
    v3 = v99;
    if (v8 >= v99)
      goto LABEL_110;
  }
  while (1)
  {
    v36 = v33 - 1;
    if (v33 >= 4)
    {
      v41 = &v34[16 * v33];
      v42 = *((_QWORD *)v41 - 8);
      v43 = *((_QWORD *)v41 - 7);
      v47 = __OFSUB__(v43, v42);
      v44 = v43 - v42;
      if (v47)
        goto LABEL_127;
      v46 = *((_QWORD *)v41 - 6);
      v45 = *((_QWORD *)v41 - 5);
      v47 = __OFSUB__(v45, v46);
      v39 = v45 - v46;
      v40 = v47;
      if (v47)
        goto LABEL_128;
      v48 = v33 - 2;
      v49 = &v34[16 * v33 - 32];
      v51 = *(_QWORD *)v49;
      v50 = *((_QWORD *)v49 + 1);
      v47 = __OFSUB__(v50, v51);
      v52 = v50 - v51;
      if (v47)
        goto LABEL_129;
      v47 = __OFADD__(v39, v52);
      v53 = v39 + v52;
      if (v47)
        goto LABEL_131;
      if (v53 >= v44)
      {
        v71 = &v34[16 * v36];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v47 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v47)
          goto LABEL_137;
        v64 = v39 < v74;
        goto LABEL_79;
      }
    }
    else
    {
      if (v33 != 3)
      {
        v65 = *((_QWORD *)v30 + 4);
        v66 = *((_QWORD *)v30 + 5);
        v47 = __OFSUB__(v66, v65);
        v58 = v66 - v65;
        v59 = v47;
        goto LABEL_73;
      }
      v38 = *((_QWORD *)v30 + 4);
      v37 = *((_QWORD *)v30 + 5);
      v47 = __OFSUB__(v37, v38);
      v39 = v37 - v38;
      v40 = v47;
    }
    if ((v40 & 1) != 0)
      goto LABEL_130;
    v48 = v33 - 2;
    v54 = &v34[16 * v33 - 32];
    v56 = *(_QWORD *)v54;
    v55 = *((_QWORD *)v54 + 1);
    v57 = __OFSUB__(v55, v56);
    v58 = v55 - v56;
    v59 = v57;
    if (v57)
      goto LABEL_132;
    v60 = &v34[16 * v36];
    v62 = *(_QWORD *)v60;
    v61 = *((_QWORD *)v60 + 1);
    v47 = __OFSUB__(v61, v62);
    v63 = v61 - v62;
    if (v47)
      goto LABEL_134;
    if (__OFADD__(v58, v63))
      goto LABEL_136;
    if (v58 + v63 >= v39)
    {
      v64 = v39 < v63;
LABEL_79:
      if (v64)
        v36 = v48;
      goto LABEL_81;
    }
LABEL_73:
    if ((v59 & 1) != 0)
      goto LABEL_133;
    v67 = &v34[16 * v36];
    v69 = *(_QWORD *)v67;
    v68 = *((_QWORD *)v67 + 1);
    v47 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if (v47)
      goto LABEL_135;
    if (v70 < v58)
      goto LABEL_90;
LABEL_81:
    v75 = v36 - 1;
    if (v36 - 1 >= v33)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v9)
      goto LABEL_151;
    v76 = &v34[16 * v75];
    v77 = *(_QWORD *)v76;
    v78 = &v34[16 * v36];
    v79 = *((_QWORD *)v78 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v9 + 16 * *(_QWORD *)v76), (char *)(v9 + 16 * *(_QWORD *)v78), v9 + 16 * v79, v100);
    if (v1)
      break;
    if (v79 < v77)
      goto LABEL_124;
    if (v36 > *((_QWORD *)v101 + 2))
      goto LABEL_125;
    *(_QWORD *)v76 = v77;
    *(_QWORD *)&v34[16 * v75 + 8] = v79;
    v80 = *((_QWORD *)v101 + 2);
    if (v36 >= v80)
      goto LABEL_126;
    v30 = v101;
    v33 = v80 - 1;
    memmove(&v34[16 * v36], v78 + 16, 16 * (v80 - 1 - v36));
    *((_QWORD *)v101 + 2) = v80 - 1;
    if (v80 <= 2)
      goto LABEL_90;
  }
LABEL_106:
  swift_bridgeObjectRelease();
  if (v99 < -1)
    goto LABEL_145;
  *(_QWORD *)(v98 + 16) = 0;
  swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v15;
  Swift::Int v16;
  _QWORD *v17;
  _QWORD *v18;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  Swift::Int v84;
  _QWORD *v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)();
      return;
    }
    goto LABEL_144;
  }
  v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v114 = v6;
  v115 = v3;
  v112 = a1;
  if (v3 <= 0)
  {
    v116 = (char *)MEMORY[0x24BEE4AF8];
    v32 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_110:
    if (v32 < 2)
    {
LABEL_121:
      v102 = swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        OUTLINED_FUNCTION_73_19(v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, (uint64_t)v112, v113, v114);
        return;
      }
      goto LABEL_149;
    }
    v95 = *v112;
    while (1)
    {
      v96 = v32 - 2;
      if (v32 < 2)
        break;
      if (!v95)
        goto LABEL_153;
      v97 = v116;
      v98 = *(_QWORD *)&v116[16 * v96 + 32];
      v99 = *(_QWORD *)&v116[16 * v32 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)();
      if (v1)
        goto LABEL_106;
      if (v99 < v98)
        goto LABEL_139;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v97 = specialized _ArrayBuffer._consumeAndCreateNew()();
      if (v96 >= *((_QWORD *)v97 + 2))
        goto LABEL_140;
      v100 = &v97[16 * v96 + 32];
      *(_QWORD *)v100 = v98;
      *((_QWORD *)v100 + 1) = v99;
      v101 = *((_QWORD *)v97 + 2);
      if (v32 > v101)
        goto LABEL_141;
      memmove(&v97[16 * v32 + 16], &v97[16 * v32 + 32], 16 * (v101 - v32));
      v116 = v97;
      *((_QWORD *)v97 + 2) = v101 - 1;
      v32 = v101 - 1;
      v3 = v115;
      if (v101 <= 2)
        goto LABEL_121;
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }
  v113 = v5;
  v7 = 0;
  v8 = *a1;
  v111 = *a1 + 8;
  v116 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v9 = v7++;
    if (v7 >= v3)
      goto LABEL_32;
    v10 = (uint64_t *)(v8 + 16 * v7);
    v11 = *v10;
    v12 = v10[1];
    v13 = (_QWORD *)(v8 + 16 * v9);
    if (v11 == *v13 && v12 == v13[1])
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v3)
        goto LABEL_31;
      v15 = 0;
LABEL_13:
      v17 = (_QWORD *)(v111 + 16 * v16);
      do
      {
        v18 = (_QWORD *)(v8 + 16 * v7);
        if (*(v17 - 1) == *v18 && *v17 == v18[1])
        {
          if ((v15 & 1) != 0)
            goto LABEL_24;
        }
        else if (((v15 ^ OUTLINED_FUNCTION_34_31()) & 1) != 0)
        {
          goto LABEL_23;
        }
        v17 += 2;
        v20 = v16 + 1;
        v7 = v16;
        v16 = v20;
      }
      while (v20 < v3);
      v16 = v20;
      goto LABEL_23;
    }
    v15 = OUTLINED_FUNCTION_34_31();
    v16 = v9 + 2;
    if (v9 + 2 < v3)
      goto LABEL_13;
LABEL_23:
    v7 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_32;
LABEL_24:
    if (v16 < v9)
      goto LABEL_148;
    if (v9 < v16)
    {
      v21 = 16 * v16;
      v22 = 16 * v9;
      v23 = v16;
      v24 = v9;
      do
      {
        if (v24 != --v23)
        {
          if (!v8)
            goto LABEL_152;
          v25 = v8 + v21;
          v26 = *(_QWORD *)(v8 + v22);
          v27 = *(_QWORD *)(v8 + v22 + 8);
          *(_OWORD *)(v8 + v22) = *(_OWORD *)(v8 + v21 - 16);
          *(_QWORD *)(v25 - 16) = v26;
          *(_QWORD *)(v25 - 8) = v27;
        }
        ++v24;
        v21 -= 16;
        v22 += 16;
      }
      while (v24 < v23);
    }
LABEL_31:
    v7 = v16;
LABEL_32:
    if (v7 >= v3)
      goto LABEL_41;
    if (__OFSUB__(v7, v9))
      goto LABEL_143;
    if (v7 - v9 >= v113)
      goto LABEL_41;
    if (__OFADD__(v9, v113))
      goto LABEL_146;
    if (v9 + v113 >= v3)
      v28 = v3;
    else
      v28 = v9 + v113;
    if (v28 < v9)
      goto LABEL_147;
    if (v7 == v28)
    {
LABEL_41:
      v29 = v116;
    }
    else
    {
      v80 = (_QWORD *)(v8 + 16 * v7);
      v29 = v116;
      do
      {
        v81 = (uint64_t *)(v8 + 16 * v7);
        v82 = *v81;
        v83 = v81[1];
        v84 = v9;
        v85 = v80;
        do
        {
          v86 = v82 == *(v85 - 2) && v83 == *(v85 - 1);
          if (v86 || (OUTLINED_FUNCTION_34_31() & 1) == 0)
            break;
          if (!v8)
            goto LABEL_150;
          v82 = *v85;
          v83 = v85[1];
          *(_OWORD *)v85 = *((_OWORD *)v85 - 1);
          *(v85 - 1) = v83;
          *(v85 - 2) = v82;
          v85 -= 2;
          ++v84;
        }
        while (v7 != v84);
        ++v7;
        v80 += 2;
      }
      while (v7 != v28);
      v7 = v28;
    }
    if (v7 < v9)
      goto LABEL_142;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v29 = OUTLINED_FUNCTION_70_20(0, *((_QWORD *)v29 + 2) + 1);
    v31 = *((_QWORD *)v29 + 2);
    v30 = *((_QWORD *)v29 + 3);
    v32 = v31 + 1;
    if (v31 >= v30 >> 1)
      v29 = OUTLINED_FUNCTION_70_20((char *)(v30 > 1), v31 + 1);
    *((_QWORD *)v29 + 2) = v32;
    v33 = v29 + 32;
    v34 = &v29[16 * v31 + 32];
    *(_QWORD *)v34 = v9;
    *((_QWORD *)v34 + 1) = v7;
    v116 = v29;
    if (v31)
      break;
    v32 = 1;
LABEL_90:
    v3 = v115;
    if (v7 >= v115)
      goto LABEL_110;
  }
  while (1)
  {
    v35 = v32 - 1;
    if (v32 >= 4)
    {
      v40 = &v33[16 * v32];
      v41 = *((_QWORD *)v40 - 8);
      v42 = *((_QWORD *)v40 - 7);
      v46 = __OFSUB__(v42, v41);
      v43 = v42 - v41;
      if (v46)
        goto LABEL_127;
      v45 = *((_QWORD *)v40 - 6);
      v44 = *((_QWORD *)v40 - 5);
      v46 = __OFSUB__(v44, v45);
      v38 = v44 - v45;
      v39 = v46;
      if (v46)
        goto LABEL_128;
      v47 = v32 - 2;
      v48 = &v33[16 * v32 - 32];
      v50 = *(_QWORD *)v48;
      v49 = *((_QWORD *)v48 + 1);
      v46 = __OFSUB__(v49, v50);
      v51 = v49 - v50;
      if (v46)
        goto LABEL_129;
      v46 = __OFADD__(v38, v51);
      v52 = v38 + v51;
      if (v46)
        goto LABEL_131;
      if (v52 >= v43)
      {
        v70 = &v33[16 * v35];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v46 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v46)
          goto LABEL_137;
        v63 = v38 < v73;
        goto LABEL_79;
      }
    }
    else
    {
      if (v32 != 3)
      {
        v64 = *((_QWORD *)v29 + 4);
        v65 = *((_QWORD *)v29 + 5);
        v46 = __OFSUB__(v65, v64);
        v57 = v65 - v64;
        v58 = v46;
        goto LABEL_73;
      }
      v37 = *((_QWORD *)v29 + 4);
      v36 = *((_QWORD *)v29 + 5);
      v46 = __OFSUB__(v36, v37);
      v38 = v36 - v37;
      v39 = v46;
    }
    if ((v39 & 1) != 0)
      goto LABEL_130;
    v47 = v32 - 2;
    v53 = &v33[16 * v32 - 32];
    v55 = *(_QWORD *)v53;
    v54 = *((_QWORD *)v53 + 1);
    v56 = __OFSUB__(v54, v55);
    v57 = v54 - v55;
    v58 = v56;
    if (v56)
      goto LABEL_132;
    v59 = &v33[16 * v35];
    v61 = *(_QWORD *)v59;
    v60 = *((_QWORD *)v59 + 1);
    v46 = __OFSUB__(v60, v61);
    v62 = v60 - v61;
    if (v46)
      goto LABEL_134;
    if (__OFADD__(v57, v62))
      goto LABEL_136;
    if (v57 + v62 >= v38)
    {
      v63 = v38 < v62;
LABEL_79:
      if (v63)
        v35 = v47;
      goto LABEL_81;
    }
LABEL_73:
    if ((v58 & 1) != 0)
      goto LABEL_133;
    v66 = &v33[16 * v35];
    v68 = *(_QWORD *)v66;
    v67 = *((_QWORD *)v66 + 1);
    v46 = __OFSUB__(v67, v68);
    v69 = v67 - v68;
    if (v46)
      goto LABEL_135;
    if (v69 < v57)
      goto LABEL_90;
LABEL_81:
    v74 = v35 - 1;
    if (v35 - 1 >= v32)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v8)
      goto LABEL_151;
    v75 = &v33[16 * v74];
    v76 = *(_QWORD *)v75;
    v77 = &v33[16 * v35];
    v78 = *((_QWORD *)v77 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)();
    if (v1)
      break;
    if (v78 < v76)
      goto LABEL_124;
    if (v35 > *((_QWORD *)v116 + 2))
      goto LABEL_125;
    *(_QWORD *)v75 = v76;
    *(_QWORD *)&v33[16 * v74 + 8] = v78;
    v79 = *((_QWORD *)v116 + 2);
    if (v35 >= v79)
      goto LABEL_126;
    v29 = v116;
    v32 = v79 - 1;
    memmove(&v33[16 * v35], v77 + 16, 16 * (v79 - 1 - v35));
    *((_QWORD *)v116 + 2) = v79 - 1;
    if (v79 <= 2)
      goto LABEL_90;
  }
LABEL_106:
  v87 = OUTLINED_FUNCTION_12_0();
  if (v115 < -1)
    goto LABEL_145;
  OUTLINED_FUNCTION_73_19(v87, v88, v89, v90, v91, v92, v93, v94, v110, v111, (uint64_t)v112, v113, v114);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 8 * a3);
      v7 = result;
      v8 = (uint64_t *)v5;
      do
      {
        v9 = *v8;
        if (v6 >= *v8)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        *v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 8;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1))
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        result = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  BOOL v15;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = (char *)a2 - (char *)a1;
  v9 = a2 - a1;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = &v4[v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (uint64_t *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 1;
      v20 = *(v6 - 1);
      if (*(v12 - 1) >= v20)
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = *--v12;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v21 = v19 != v6 || v18 >= v6;
        --v6;
        if (!v21)
          goto LABEL_35;
      }
      *v18 = v20;
LABEL_35:
      --v18;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_39;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, a4);
  v12 = &v4[v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v14 = *v6;
      if (*v6 < *v4)
        break;
      v14 = *v4;
      v15 = v7 == v4++;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      ++v7;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v15 = v7 == v6++;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *v7 = v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, v12 - v4, v6);
  return 1;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t OUTLINED_FUNCTION_4_42()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 272) + 8))(v0, *(_QWORD *)(v1 - 264));
}

uint64_t OUTLINED_FUNCTION_5_31()
{
  return OptionalColumnProtocol.filled(with:)();
}

uint64_t OUTLINED_FUNCTION_7_31()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 72) + 8))(v0, *(_QWORD *)(v1 - 120));
}

uint64_t OUTLINED_FUNCTION_8_33()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 208) + 8))(*(_QWORD *)(v0 - 184), *(_QWORD *)(v0 - 128));
}

uint64_t OUTLINED_FUNCTION_12_30@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3 + *(int *)(v2 + 28);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = a2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_13_35()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_16_26()
{
  return type metadata accessor for BaseTreeClassifier();
}

uint64_t OUTLINED_FUNCTION_21_22()
{
  return type metadata accessor for BoostedTreeConfiguration();
}

uint64_t OUTLINED_FUNCTION_22_18()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_23_21()
{
  uint64_t v0;

  return specialized _NativeSet.startIndex.getter(v0);
}

void OUTLINED_FUNCTION_24_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 256) = v0 - v1;
}

void OUTLINED_FUNCTION_25_19()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 288) = v0;
}

uint64_t OUTLINED_FUNCTION_26_22()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_27_27()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_29_17()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_30_19()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_33_17()
{
  return type metadata accessor for BaseTreeClassifierModel();
}

uint64_t OUTLINED_FUNCTION_38_14()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 160) = v0;
  return AnyColumn.assumingType<A>(_:)();
}

void **assignWithCopy for MLRandomForestRegressor.ModelParameters.ValidationData(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  char v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for DataFrame();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = *a2;
      v8 = *((_BYTE *)a2 + 8);
      outlined copy of Result<_DataTable, Error>(v7, v8);
      *a1 = v7;
      *((_BYTE *)a1 + 8) = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLRandomForestRegressor.ModelParameters.ValidationData;
  if (!type metadata singleton initialization cache for MLRandomForestRegressor.ModelParameters.ValidationData)
    return swift_getSingletonMetadata();
  return result;
}

void *assignWithTake for MLRandomForestRegressor.ModelParameters.ValidationData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of MLRandomForestRegressor.ModelParameters.ValidationData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for DataFrame();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for MLRandomForestRegressor.ModelParameters.ValidationData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DataFrame();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MLRandomForestRegressor.ModelParameters.ValidationData.generateDataFrames(trainingData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v10 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v1 = type metadata accessor for DataFrame.Slice();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  v3 = MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataFrame.Slice?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(v0, v8 - v7);
  v9 = (char *)sub_21AECAE10 + 4 * byte_21AFEC6E0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21AECAE10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v6 = *(_BYTE *)(v4 + 16);
  v7 = *(_BYTE *)(v4 + 17);
  *(_OWORD *)(v5 - 112) = *(_OWORD *)v4;
  *(_BYTE *)(v5 - 96) = v6;
  *(_BYTE *)(v5 - 95) = v7;
  DataFrame.randomSplit(strategy:)(v0, v3, v5 - 112);
  v9 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 152);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v10(v1, v3, v8);
  DataFrame.init(_:)();
  outlined init with copy of DataFrame.Slice?(v0, v2);
  if (__swift_getEnumTagSinglePayload(v2, 1, v8) == 1)
  {
    __swift_storeEnumTagSinglePayload(*(_QWORD *)(v5 - 144), 1, 1, *(_QWORD *)(v5 - 136));
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v2, v8);
    v10(*(_QWORD *)(v5 - 168), v1, v8);
    v12 = *(_QWORD *)(v5 - 144);
    DataFrame.init(_:)();
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v11(v1, v8);
    __swift_storeEnumTagSinglePayload(v12, 0, 1, *(_QWORD *)(v5 - 136));
  }
  v11(v3, v8);
  return outlined destroy of DataFrame.Slice?(v0);
}

void MLRandomForestRegressor.ModelParameters.ValidationData.table.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v1 = type metadata accessor for DataFrame();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for MLRandomForestRegressor.ModelParameters.ValidationData();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  outlined init with copy of MLRandomForestRegressor.ModelParameters.ValidationData(v0, v5 - v4);
  v6 = (char *)&loc_21AECB0DC + *((int *)qword_21AECB1E0 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

void sub_21AECB0EC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_BYTE *)(v0 + 8) = v2;
}

uint64_t specialized Sequence.first(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  if (a3 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    v7 = 4;
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v8 = MEMORY[0x22075AF48](v7 - 4, a3);
      }
      else
      {
        v8 = *(_QWORD *)(a3 + 8 * v7);
        swift_retain();
      }
      v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v12 = v8;
      v10 = a1(&v12);
      if (v3)
      {
        OUTLINED_FUNCTION_101();
        swift_release();
        return v8;
      }
      if ((v10 & 1) != 0)
      {
        OUTLINED_FUNCTION_101();
        return v8;
      }
      swift_release();
      ++v7;
      if (v9 == v6)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  OUTLINED_FUNCTION_101();
  return 0;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  _QWORD v22[4];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v6);
    v11 = *v10;
    v12 = v10[1];
    v0[3] = v4;
    v0[4] = v5;
    v13 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v22[0] = v8;
    v22[1] = v9;
    v22[2] = v11;
    v22[3] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(&v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v21;
  }
  v15 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v16 = (unint64_t)(v0[2] + 64) >> 6;
    if (v15 < v16)
    {
      v17 = v0[1];
      v18 = *(_QWORD *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        v5 = (v18 - 1) & v18;
        v6 = __clz(__rbit64(v18)) + (v15 << 6);
        v4 = v15;
        goto LABEL_3;
      }
      v19 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v16)
      {
        v18 = *(_QWORD *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          v15 = v19;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v16)
        {
          v18 = *(_QWORD *)(v17 + 8 * (v3 + 3));
          if (v18)
          {
            v15 = v3 + 3;
            goto LABEL_7;
          }
          v19 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v16)
          {
            v18 = *(_QWORD *)(v17 + 8 * v19);
            if (v18)
              goto LABEL_10;
            v15 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v16)
            {
              v18 = *(_QWORD *)(v17 + 8 * v15);
              if (v18)
                goto LABEL_7;
              v4 = v16 - 1;
              v20 = v3 + 6;
              while (v20 < v16)
              {
                v18 = *(_QWORD *)(v17 + 8 * v20++);
                if (v18)
                {
                  v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v18 < v14)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

void specialized LazyMapSequence.Iterator.next()(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_OWORD *);
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v10);
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v22 + 8);
    LOBYTE(v22[0]) = v11;
    goto LABEL_23;
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return;
  }
  v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    v14 = *(_QWORD *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      v9 = (v14 - 1) & v14;
      v10 = __clz(__rbit64(v14)) + (v12 << 6);
      v7 = v12;
      goto LABEL_3;
    }
    v15 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      v14 = *(_QWORD *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        v12 = v15;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        v14 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          v12 = v5 + 3;
          goto LABEL_7;
        }
        v15 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (v14)
            goto LABEL_10;
          v12 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            v14 = *(_QWORD *)(v4 + 8 * v12);
            if (v14)
              goto LABEL_7;
            v7 = v13 - 1;
            v16 = v5 + 6;
            while (v16 < v13)
            {
              v14 = *(_QWORD *)(v4 + 8 * v16++);
              if (v14)
              {
                v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v23 = 0;
  memset(v22, 0, sizeof(v22));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v17 = (void (*)(_OWORD *))v1[5];
  outlined init with take of (key: URL, value: CIImage)?((uint64_t)v22, (uint64_t)v20, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any)?);
  if (v21)
  {
    v18[0] = v20[0];
    v18[1] = v20[1];
    v19 = v21;
    v17(v18);
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v18, &demangling cache variable for type metadata for (key: MLProgress.Metric, value: Any));
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

uint64_t specialized Conv2D.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t inited;
  Swift::String v32;
  void *object;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  Swift::String v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(Swift::String *, _QWORD);
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  Swift::String v65;
  uint64_t v66;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  Swift::String v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::String v79;
  uint64_t v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(Swift::String *, _QWORD);
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  char *v102;
  unint64_t v103;
  Swift::String v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  void *v108;
  Swift::String v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  Swift::String v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  Swift::String v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  Swift::String v121;
  uint64_t v122;
  uint64_t countAndFlagsBits;
  Swift::String v124;
  Swift::String v125;
  void *v126;
  uint64_t v127;
  Swift::String v128;
  Swift::String v129;
  void *v130;
  uint64_t v131;
  uint64_t result;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t);
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(char *, uint64_t);
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  Swift::String v159;
  char v160[16];
  char *v161;
  Swift::String v162;
  uint64_t v163;

  v150 = a5;
  v147 = a4;
  v159._countAndFlagsBits = a2;
  v159._object = a3;
  v151 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?);
  MEMORY[0x24BDAC7A8](v6);
  v141 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for Conv2D();
  v148 = *(_QWORD *)(v149 - 8);
  MEMORY[0x24BDAC7A8](v149);
  v145 = (char *)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  v9 = MEMORY[0x24BDAC7A8](v140);
  v135 = (uint64_t)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v144 = (char *)&v133 - v11;
  v155 = type metadata accessor for Parameter();
  v156 = *(_QWORD *)(v155 - 8);
  v12 = MEMORY[0x24BDAC7A8](v155);
  v134 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v146 = (char *)&v133 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v143 = (char *)&v133 - v16;
  v17 = type metadata accessor for TensorShape();
  v154 = *(void (**)(char *, uint64_t))(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v139 = (char *)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v133 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v133 - v23;
  v152 = type metadata accessor for Tensor();
  v25 = *(_QWORD *)(v152 - 8);
  v26 = MEMORY[0x24BDAC7A8](v152);
  v28 = (char *)&v133 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v133 - v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  inited = swift_initStackObject();
  v157 = xmmword_21AFE7F70;
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
  v162._countAndFlagsBits = a2;
  v162._object = v159._object;
  swift_bridgeObjectRetain();
  v32._countAndFlagsBits = 0x7468676965772ELL;
  v32._object = (void *)0xE700000000000000;
  String.append(_:)(v32);
  object = v162._object;
  *(_QWORD *)(inited + 32) = v162._countAndFlagsBits;
  *(_QWORD *)(inited + 40) = object;
  Conv2D.weight.getter();
  Tensor.shape.getter();
  v34 = TensorShape.contiguousSize.getter();
  v35 = (void (*)(char *, uint64_t))*((_QWORD *)v154 + 1);
  v137 = v24;
  v154 = v35;
  v35(v24, v17);
  v161 = v30;
  v36 = v153;
  v37 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v34, (uint64_t (*)(_QWORD *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)v160);
  v153 = v36;
  v38 = *(void (**)(char *, uint64_t))(v25 + 8);
  v138 = v30;
  v39 = v152;
  v38(v30, v152);
  *(_QWORD *)(inited + 48) = v37;
  v162 = v159;
  swift_bridgeObjectRetain();
  v40._countAndFlagsBits = 0x2E7468676965772ELL;
  v40._object = (void *)0xED00006570616873;
  String.append(_:)(v40);
  v41 = v162._object;
  *(_QWORD *)(inited + 56) = v162._countAndFlagsBits;
  *(_QWORD *)(inited + 64) = v41;
  v142 = inited;
  Conv2D.weight.getter();
  Tensor.shape.getter();
  v136 = v38;
  v38(v28, v39);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption((unint64_t *)&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape, (uint64_t (*)(uint64_t))MEMORY[0x24BE6B8F8], MEMORY[0x24BE6B910]);
  v42 = dispatch thunk of Collection.count.getter();
  v43 = MEMORY[0x24BEE4AF8];
  if (v42)
  {
    v44 = v42;
    v163 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42 & ~(v42 >> 63), 0);
    v43 = v163;
    dispatch thunk of Collection.startIndex.getter();
    if (v44 < 0)
    {
      __break(1u);
      goto LABEL_36;
    }
    do
    {
      v45 = (void (*)(Swift::String *, _QWORD))dispatch thunk of Collection.subscript.read();
      v47 = *v46;
      v45(&v162, 0);
      v163 = v43;
      v49 = *(_QWORD *)(v43 + 16);
      v48 = *(_QWORD *)(v43 + 24);
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
        v43 = v163;
      }
      *(_QWORD *)(v43 + 16) = v49 + 1;
      *(double *)(v43 + 8 * v49 + 32) = (double)v47;
      dispatch thunk of Collection.formIndex(after:)();
      --v44;
    }
    while (v44);
  }
  v154(v22, v17);
  *(_QWORD *)(v142 + 72) = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  v142 = Dictionary.init(dictionaryLiteral:)();
  v50 = v155;
  v51 = v150;
  v52 = (uint64_t)v144;
  if (v150)
  {
    v53 = v143;
    v54 = v158;
    MEMORY[0x220758FD4]();
    v55 = Parameter.id.getter();
    (*(void (**)(char *, uint64_t))(v156 + 8))(v53, v50);
    v51 = specialized Dictionary.subscript.getter(v55, v51);
  }
  else
  {
    v54 = v158;
  }
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v151, v52);
  v56 = v148;
  v57 = v145;
  v58 = v149;
  v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v148 + 16))(v145, v54, v149);
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v52);
  }
  else
  {
    v60 = v143;
    MEMORY[0x220758FD4](v59);
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
    v61 = Layer.parameterKeyPaths(recursively:)();
    MEMORY[0x24BDAC7A8](v61);
    *(&v133 - 2) = v52;
    *(&v133 - 1) = (uint64_t)v60;
    v62 = v153;
    v51 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t)(&v133 - 4), v61);
    v153 = v62;
    swift_bridgeObjectRelease();
    v63 = v60;
    v50 = v155;
    (*(void (**)(char *, uint64_t))(v156 + 8))(v63, v155);
    (*(void (**)(char *, uint64_t))(v148 + 8))(v57, v149);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v52);
    if (!v51)
    {
      swift_bridgeObjectRelease();
      v162._countAndFlagsBits = 0;
      v162._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v124._object = (void *)0x800000021AFF51B0;
      v124._countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v124);
      String.append(_:)(v159);
      v125._countAndFlagsBits = 0xD00000000000001DLL;
      v125._object = (void *)0x800000021AFF5210;
      String.append(_:)(v125);
      countAndFlagsBits = v162._countAndFlagsBits;
      v126 = v162._object;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v127 = countAndFlagsBits;
      *(_QWORD *)(v127 + 8) = v126;
      *(_OWORD *)(v127 + 16) = 0u;
      *(_OWORD *)(v127 + 32) = 0u;
      *(_BYTE *)(v127 + 48) = 2;
      swift_willThrow(0.0);
      return countAndFlagsBits;
    }
  }
  v64 = v142;
  v162 = v159;
  swift_bridgeObjectRetain();
  v65._countAndFlagsBits = 0x7468676965772ELL;
  v65._object = (void *)0xE700000000000000;
  String.append(_:)(v65);
  v149 = v51;
  v66 = specialized SGD.getStatesDictionary(for:name:)(v51, v162._countAndFlagsBits, (char *)v162._object);
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v162._countAndFlagsBits = v64;
  v68 = v153;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v66, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v162);
  if (v68)
    goto LABEL_37;
  v153 = 0;
  v69 = v162._countAndFlagsBits;
  swift_bridgeObjectRelease();
  v70 = (uint64_t)v141;
  Conv2D.$bias.getter();
  if (__swift_getEnumTagSinglePayload(v70, 1, v50) == 1)
  {
    outlined destroy of FeatureMatrixBuilder<Float>(v70, &demangling cache variable for type metadata for Parameter?);
LABEL_31:
    v107 = v159._countAndFlagsBits;
    v108 = v159._object;
    v162 = v159;
    swift_bridgeObjectRetain();
    v109._countAndFlagsBits = 0x736564697274732ELL;
    v109._object = (void *)0xE800000000000000;
    String.append(_:)(v109);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v110 = swift_allocObject();
    *(_OWORD *)(v110 + 16) = v157;
    *(double *)(v110 + 32) = (double)Conv2D.stride.getter();
    Conv2D.stride.getter();
    *(double *)(v110 + 40) = (double)v111;
    swift_isUniquelyReferenced_nonNull_native();
    v162._countAndFlagsBits = v69;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    v112 = v162._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v162._countAndFlagsBits = v107;
    v162._object = v108;
    swift_bridgeObjectRetain();
    v113._countAndFlagsBits = 0x676E69646461702ELL;
    v113._object = (void *)0xE800000000000000;
    String.append(_:)(v113);
    v114 = swift_allocObject();
    *(_OWORD *)(v114 + 16) = v157;
    *(double *)(v114 + 32) = (double)Conv2D.padding.getter();
    Conv2D.padding.getter();
    *(double *)(v114 + 40) = (double)v115;
    swift_isUniquelyReferenced_nonNull_native();
    v162._countAndFlagsBits = v112;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    v116 = v162._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v162._countAndFlagsBits = v107;
    v162._object = v108;
    swift_bridgeObjectRetain();
    v117._countAndFlagsBits = 0x6F6974616C69642ELL;
    v117._object = (void *)0xEA0000000000736ELL;
    String.append(_:)(v117);
    v118 = swift_allocObject();
    *(_OWORD *)(v118 + 16) = v157;
    *(double *)(v118 + 32) = (double)Conv2D.dilation.getter();
    Conv2D.dilation.getter();
    *(double *)(v118 + 40) = (double)v119;
    swift_isUniquelyReferenced_nonNull_native();
    v162._countAndFlagsBits = v116;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    v120 = v162._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v162._countAndFlagsBits = v107;
    v162._object = v108;
    swift_bridgeObjectRetain();
    v121._countAndFlagsBits = 0x6F4370756F72672ELL;
    v121._object = (void *)0xEB00000000746E75;
    String.append(_:)(v121);
    v122 = swift_allocObject();
    *(_OWORD *)(v122 + 16) = xmmword_21AFE7DA0;
    *(double *)(v122 + 32) = (double)Conv2D.groupCount.getter();
    swift_isUniquelyReferenced_nonNull_native();
    v162._countAndFlagsBits = v120;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    countAndFlagsBits = v162._countAndFlagsBits;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return countAndFlagsBits;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v156 + 32))(v146, v70, v50);
  v71 = v159._object;
  v162 = v159;
  swift_bridgeObjectRetain();
  v72._countAndFlagsBits = 0x736169622ELL;
  v72._object = (void *)0xE500000000000000;
  String.append(_:)(v72);
  v145 = (char *)v162._object;
  v148 = v162._countAndFlagsBits;
  v73 = v138;
  MEMORY[0x2207592EC]();
  v74 = v137;
  Tensor.shape.getter();
  v75 = TensorShape.contiguousSize.getter();
  v76 = ((uint64_t (*)(char *, uint64_t))v154)(v74, v17);
  MEMORY[0x24BDAC7A8](v76);
  *(&v133 - 2) = (uint64_t)v73;
  v77 = v153;
  specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v75, (uint64_t (*)(_QWORD *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)(&v133 - 4));
  v153 = v77;
  v136(v73, v152);
  swift_isUniquelyReferenced_nonNull_native();
  v162._countAndFlagsBits = v69;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  v78 = v162._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v162._countAndFlagsBits = v159._countAndFlagsBits;
  v162._object = v71;
  swift_bridgeObjectRetain();
  v79._countAndFlagsBits = 0x68732E736169622ELL;
  v79._object = (void *)0xEB00000000657061;
  String.append(_:)(v79);
  v80 = v162._countAndFlagsBits;
  v81 = v162._object;
  v82 = v139;
  Parameter.shape.getter();
  v83 = dispatch thunk of Collection.count.getter();
  if (v83)
  {
    v84 = v83;
    v163 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83 & ~(v83 >> 63), 0);
    v85 = v163;
    dispatch thunk of Collection.startIndex.getter();
    if ((v84 & 0x8000000000000000) == 0)
    {
      v145 = (char *)v80;
      v148 = (uint64_t)v81;
      v152 = v78;
      do
      {
        v86 = (void (*)(Swift::String *, _QWORD))dispatch thunk of Collection.subscript.read();
        v88 = *v87;
        v86(&v162, 0);
        v163 = v85;
        v90 = *(_QWORD *)(v85 + 16);
        v89 = *(_QWORD *)(v85 + 24);
        if (v90 >= v89 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1);
          v85 = v163;
        }
        *(_QWORD *)(v85 + 16) = v90 + 1;
        *(double *)(v85 + 8 * v90 + 32) = (double)v88;
        dispatch thunk of Collection.formIndex(after:)();
        --v84;
      }
      while (v84);
      v78 = v152;
      goto LABEL_22;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_22:
  v154(v82, v17);
  swift_isUniquelyReferenced_nonNull_native();
  v162._countAndFlagsBits = v78;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  v91 = v162._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v92 = v146;
  v93 = v134;
  v94 = v150;
  v95 = v153;
  if (v150)
  {
    v96 = Parameter.id.getter();
    v97 = specialized Dictionary.subscript.getter(v96, v94);
  }
  else
  {
    v97 = 0;
  }
  v98 = v135;
  v99 = v156;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v151, v135);
  v100 = v155;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v93, v92, v155);
  if (v97)
  {
    v101 = *(void (**)(char *, uint64_t))(v99 + 8);
    v101(v93, v100);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v98);
  }
  else
  {
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
    v102 = v93;
    v103 = Layer.parameterKeyPaths(recursively:)();
    MEMORY[0x24BDAC7A8](v103);
    *(&v133 - 2) = v98;
    *(&v133 - 1) = (uint64_t)v102;
    v97 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t)(&v133 - 4), v103);
    swift_bridgeObjectRelease();
    v101 = *(void (**)(char *, uint64_t))(v99 + 8);
    v101(v102, v100);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v98);
    if (!v97)
    {
      swift_bridgeObjectRelease();
      v162._countAndFlagsBits = 0;
      v162._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v128._object = (void *)0x800000021AFF51B0;
      v128._countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v128);
      String.append(_:)(v159);
      v129._object = (void *)0x800000021AFF5230;
      v129._countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v129);
      countAndFlagsBits = v162._countAndFlagsBits;
      v130 = v162._object;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v131 = countAndFlagsBits;
      *(_QWORD *)(v131 + 8) = v130;
      *(_OWORD *)(v131 + 16) = 0u;
      *(_OWORD *)(v131 + 32) = 0u;
      *(_BYTE *)(v131 + 48) = 2;
      swift_willThrow(0.0);
      swift_release();
      v101(v146, v100);
      return countAndFlagsBits;
    }
    v92 = v146;
  }
  v162 = v159;
  swift_bridgeObjectRetain();
  v104._countAndFlagsBits = 0x736169622ELL;
  v104._object = (void *)0xE500000000000000;
  String.append(_:)(v104);
  v105 = specialized SGD.getStatesDictionary(for:name:)(v97, v162._countAndFlagsBits, (char *)v162._object);
  swift_bridgeObjectRelease();
  v106 = swift_isUniquelyReferenced_nonNull_native();
  v162._countAndFlagsBits = v91;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v105, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v106, &v162);
  v153 = v95;
  if (!v95)
  {
    v69 = v162._countAndFlagsBits;
    swift_release();
    swift_bridgeObjectRelease();
    v101(v92, v155);
    goto LABEL_31;
  }
LABEL_37:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t specialized LSTM.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  void *object;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  int64_t v70;
  Swift::String v71;
  Swift::Bool v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  Swift::String v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  Swift::String v106;
  Swift::String v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int64_t v111;
  unint64_t v112;
  int64_t v113;
  uint64_t *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  unint64_t v119;
  uint64_t v120;
  _BOOL8 v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v130;
  uint64_t result;
  Swift::String v132;
  Swift::String v133;
  uint64_t countAndFlagsBits;
  void *v135;
  uint64_t v136;
  double v137;
  Swift::String v138;
  Swift::String v139;
  Swift::String v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  double v144;
  _QWORD v145[2];
  void *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t);
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(unint64_t, uint64_t);
  uint64_t v175;
  char *v176;
  uint64_t v177;
  Swift::String v178;
  Swift::String v179;
  unint64_t v180;
  char *v181;
  int64_t v182;
  int64_t v183;
  void (*v184)(uint64_t *__return_ptr, Swift::String *);
  uint64_t v185;
  uint64_t v186;
  int64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  Swift::String v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD v195[2];
  uint64_t v196;
  int64_t v197;
  unint64_t v198;
  void (*v199)(uint64_t *__return_ptr, Swift::String *);
  uint64_t v200;
  _QWORD v201[2];
  uint64_t v202;
  int64_t v203;
  unint64_t v204;
  void (*v205)(uint64_t *__return_ptr, Swift::String *);
  uint64_t v206;

  v166 = a4;
  v179._object = a3;
  v179._countAndFlagsBits = a2;
  v168 = a1;
  v149 = type metadata accessor for TensorShape();
  v148 = *(_QWORD *)(v149 - 8);
  MEMORY[0x24BDAC7A8](v149);
  v147 = (char *)v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Parameter();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v145 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v145 - v13;
  v152 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  v15 = MEMORY[0x24BDAC7A8](v152);
  v17 = (char *)v145 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v151 = (uint64_t)v145 - v18;
  v177 = type metadata accessor for Tensor();
  v167 = *(_QWORD *)(v177 - 8);
  MEMORY[0x24BDAC7A8](v177);
  v176 = (char *)v145 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LayerState();
  v153 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v150 = (char *)v145 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v181 = (char *)v145 - v23;
  v194 = MEMORY[0x24BEE4B00];
  v145[1] = type metadata accessor for LSTM();
  v169 = v5;
  v24 = Layer.namedParameterKeyPaths(recursively:)();
  v25 = *(_QWORD *)(v24 + 16);
  v170 = v20;
  v165 = a5;
  v159 = v25;
  if (!v25)
    goto LABEL_51;
  v26 = 0;
  v160 = v24 + 32;
  v154 = xmmword_21AFE7DA0;
  v146 = (void *)0x800000021AFF5280;
  v157 = v8;
  v164 = v14;
  v156 = v9;
  v161 = v12;
  v155 = v17;
  v27 = v14;
  v158 = v24;
  do
  {
    if (v26 >= *(_QWORD *)(v24 + 16))
    {
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    v28 = v9;
    v29 = v8;
    v180 = v26;
    v30 = (uint64_t *)(v160 + 24 * v26);
    v32 = *v30;
    v31 = (void *)v30[1];
    v33 = v30[2];
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_getAtKeyPath();
    v175 = v33;
    v34 = swift_release();
    v35 = (uint64_t)v176;
    MEMORY[0x2207592EC](v34);
    v178._countAndFlagsBits = v32;
    v178._object = v31;
    Dictionary<>.updateValue(tensor:forKey:prefix:)(v35, v32, v31, v179._countAndFlagsBits, (uint64_t)v179._object);
    v163 = *(void (**)(uint64_t, uint64_t))(v167 + 8);
    v163(v35, v177);
    if (a5)
    {
      v36 = Parameter.id.getter();
      a5 = specialized Dictionary.subscript.getter(v36, a5);
    }
    v37 = v29;
    v38 = v17;
    outlined init with copy of MLHandActionClassifier.GraphCNNModel(v168, (uint64_t)v17);
    v39 = (unint64_t)v161;
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v161, v27, v37);
    if (a5)
    {
      v174 = *(void (**)(unint64_t, uint64_t))(v28 + 8);
      v174(v39, v37);
      outlined destroy of MLHandActionClassifier.GraphCNNModel((uint64_t)v17);
    }
    else
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)v27;
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
      v41 = (uint64_t)v38;
      v42 = Layer.parameterKeyPaths(recursively:)();
      MEMORY[0x24BDAC7A8](v42);
      v145[-2] = v41;
      v145[-1] = v39;
      v43 = v162;
      a5 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t)&v145[-4], v42);
      v162 = v43;
      swift_bridgeObjectRelease();
      v44 = *(_QWORD *)(v28 + 8);
      ((void (*)(unint64_t, uint64_t))v44)(v39, v37);
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v41);
      if (!a5)
        goto LABEL_100;
      v174 = (void (*)(unint64_t, uint64_t))v44;
    }
    ++v180;
    v191 = v179;
    swift_bridgeObjectRetain();
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    String.append(_:)(v178);
    object = v191._object;
    v173 = a5;
    v47 = specialized SGD.getStatesDictionary(for:name:)(a5, v191._countAndFlagsBits, (char *)v191._object);
    swift_bridgeObjectRelease();
    v48 = v194;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v193 = v48;
    v194 = 0x8000000000000000;
    specialized LazyMapSequence.makeIterator()(v47, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v201);
    v186 = v206;
    v185 = v201[0];
    v182 = v201[1];
    v187 = v203;
    v49 = v204;
    v184 = v205;
    v171 = v202;
    v183 = (unint64_t)(v202 + 64) >> 6;
    v172 = v47;
    swift_bridgeObjectRetain();
    while (1)
    {
      if (v49)
      {
        v50 = __clz(__rbit64(v49));
        v49 &= v49 - 1;
        v51 = v50 | (v187 << 6);
        goto LABEL_28;
      }
      v52 = v187 + 1;
      if (__OFADD__(v187, 1))
      {
        __break(1u);
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      if (v52 >= v183)
        goto LABEL_44;
      v53 = *(_QWORD *)(v182 + 8 * v52);
      if (!v53)
        break;
LABEL_27:
      v49 = (v53 - 1) & v53;
      v51 = __clz(__rbit64(v53)) + (v52 << 6);
      v187 = v52;
LABEL_28:
      v55 = (uint64_t *)(*(_QWORD *)(v185 + 48) + 16 * v51);
      v56 = (void *)v55[1];
      v57 = *(_QWORD *)(*(_QWORD *)(v185 + 56) + 8 * v51);
      v191._countAndFlagsBits = *v55;
      v191._object = v56;
      v192 = v57;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v184(&v188, &v191);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v37 = v188;
      v58 = v189;
      v44 = v190;
      v39 = specialized __RawDictionaryStorage.find<A>(_:)(v188, v189);
      v60 = *(_QWORD *)(v48 + 16);
      v61 = (v59 & 1) == 0;
      v62 = v60 + v61;
      if (__OFADD__(v60, v61))
      {
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v191._countAndFlagsBits = 0;
        v191._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v132._object = (void *)0x800000021AFF5250;
        v132._countAndFlagsBits = 0xD000000000000025;
        String.append(_:)(v132);
        String.append(_:)(v179);
        v133._countAndFlagsBits = 0x74656D6172617020;
        v133._object = (void *)0xEB00000000207265;
        String.append(_:)(v133);
        String.append(_:)(v178);
        countAndFlagsBits = v191._countAndFlagsBits;
        v135 = v191._object;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v136 = countAndFlagsBits;
        *(_QWORD *)(v136 + 8) = v135;
        *(_OWORD *)(v136 + 16) = 0u;
        *(_OWORD *)(v136 + 32) = 0u;
        *(_BYTE *)(v136 + 48) = 0;
        swift_bridgeObjectRelease();
        swift_willThrow(v137);
        swift_release();
        return ((uint64_t (*)(uint64_t, uint64_t))v44)(isUniquelyReferenced_nonNull_native, v37);
      }
      object = v59;
      if (*(_QWORD *)(v48 + 24) >= v62)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v62, isUniquelyReferenced_nonNull_native & 1);
        v63 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v58);
        if ((object & 1) != (v64 & 1))
          goto LABEL_107;
        v39 = v63;
      }
      v48 = v193;
      if ((object & 1) != 0)
      {
        object = *(void **)(*(_QWORD *)(v193 + 56) + 8 * v39);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v65 = *(_QWORD *)(v48 + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v65 + 8 * v39) = object;
        isUniquelyReferenced_nonNull_native = 1;
      }
      else
      {
        *(_QWORD *)(v193 + 8 * (v39 >> 6) + 64) |= 1 << v39;
        v66 = (uint64_t *)(*(_QWORD *)(v48 + 48) + 16 * v39);
        *v66 = v37;
        v66[1] = v58;
        *(_QWORD *)(*(_QWORD *)(v48 + 56) + 8 * v39) = v44;
        v67 = *(_QWORD *)(v48 + 16);
        v68 = __OFADD__(v67, 1);
        v69 = v67 + 1;
        if (v68)
          goto LABEL_99;
        *(_QWORD *)(v48 + 16) = v69;
        isUniquelyReferenced_nonNull_native = 1;
      }
    }
    v54 = v187 + 2;
    if (v187 + 2 >= v183)
      goto LABEL_44;
    v53 = *(_QWORD *)(v182 + 8 * v54);
    if (v53)
      goto LABEL_26;
    v54 = v187 + 3;
    if (v187 + 3 >= v183)
      goto LABEL_44;
    v53 = *(_QWORD *)(v182 + 8 * v54);
    if (v53)
      goto LABEL_26;
    v54 = v187 + 4;
    if (v187 + 4 >= v183)
      goto LABEL_44;
    v53 = *(_QWORD *)(v182 + 8 * v54);
    if (v53)
      goto LABEL_26;
    v54 = v187 + 5;
    if (v187 + 5 >= v183)
      goto LABEL_44;
    v53 = *(_QWORD *)(v182 + 8 * v54);
    if (v53)
      goto LABEL_26;
    v54 = v187 + 6;
    if (v187 + 6 >= v183)
      goto LABEL_44;
    v53 = *(_QWORD *)(v182 + 8 * v54);
    if (v53)
    {
LABEL_26:
      v52 = v54;
      goto LABEL_27;
    }
    v52 = v187 + 7;
    if (v187 + 7 < v183)
    {
      v53 = *(_QWORD *)(v182 + 8 * v52);
      if (!v53)
      {
        v70 = v187 + 8;
        do
        {
          if (v70 >= v183)
            goto LABEL_44;
          v53 = *(_QWORD *)(v182 + 8 * v70++);
        }
        while (!v53);
        v52 = v70 - 1;
      }
      goto LABEL_27;
    }
LABEL_44:
    swift_bridgeObjectRelease();
    outlined consume of [String : [Int]].Iterator._Variant();
    swift_release();
    v194 = v48;
    swift_bridgeObjectRelease();
    v71._countAndFlagsBits = 0x6E65727275636572;
    v71._object = (void *)0xEF74686769655774;
    v72 = String.hasSuffix(_:)(v71);
    v73 = swift_bridgeObjectRelease();
    v27 = v164;
    if (v72)
    {
      v74 = v176;
      MEMORY[0x2207592EC](v73);
      v75 = v147;
      Tensor.shape.getter();
      v163((uint64_t)v74, v177);
      v76 = *(_QWORD *)(TensorShape.dimensions.getter() + 16);
      swift_bridgeObjectRelease();
      if (v76 == 3)
        v77 = 1.0;
      else
        v77 = 0.0;
      v78 = TensorShape.subscript.getter();
      v79 = v179._countAndFlagsBits;
      v80 = v179._object;
      v191 = v179;
      swift_bridgeObjectRetain();
      v81._countAndFlagsBits = 0x756F4374696E752ELL;
      v81._object = (void *)0xEA0000000000746ELL;
      String.append(_:)(v81);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v82 = swift_allocObject();
      *(_OWORD *)(v82 + 16) = v154;
      *(double *)(v82 + 32) = (double)v78;
      v83 = v194;
      swift_isUniquelyReferenced_nonNull_native();
      v191._countAndFlagsBits = v83;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
      v84 = v191._countAndFlagsBits;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v191._countAndFlagsBits = 0;
      v191._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v191._countAndFlagsBits = v79;
      v191._object = v80;
      v85 = v164;
      v86._countAndFlagsBits = 0xD000000000000010;
      v86._object = v146;
      String.append(_:)(v86);
      v87 = swift_allocObject();
      *(_OWORD *)(v87 + 16) = v154;
      *(double *)(v87 + 32) = v77;
      swift_isUniquelyReferenced_nonNull_native();
      v191._countAndFlagsBits = v84;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
      v27 = v85;
      v194 = v191._countAndFlagsBits;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v148 + 8))(v75, v149);
      v8 = v157;
      v174((unint64_t)v85, v157);
    }
    else
    {
      v8 = v157;
      v174((unint64_t)v164, v157);
      swift_release();
      swift_release();
    }
    v20 = v170;
    a5 = v165;
    v9 = v156;
    v17 = v155;
    v24 = v158;
    v26 = v180;
  }
  while (v180 != v159);
LABEL_51:
  swift_bridgeObjectRelease();
  v88 = Layer.namedLayerStateKeyPaths(recursively:)();
  v171 = *(_QWORD *)(v88 + 16);
  if (!v171)
    goto LABEL_96;
  v89 = 0;
  v172 = v88 + 32;
  v90 = v181;
  v164 = (char *)v88;
  while (2)
  {
    if (v89 >= *(_QWORD *)(v88 + 16))
      goto LABEL_106;
    v180 = v89;
    v91 = (unint64_t *)(v172 + 24 * v89);
    v39 = *v91;
    object = (void *)v91[1];
    v92 = v91[2];
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_getAtKeyPath();
    v178._countAndFlagsBits = v92;
    v93 = swift_release();
    v94 = (uint64_t)v176;
    v95 = v90;
    MEMORY[0x220758C20](v93);
    Dictionary<>.updateValue(tensor:forKey:prefix:)(v94, v39, object, v179._countAndFlagsBits, (uint64_t)v179._object);
    (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v94, v177);
    if (a5)
    {
      v96 = LayerState.id.getter();
      v97 = specialized Dictionary.subscript.getter(v96, a5);
    }
    else
    {
      v97 = 0;
    }
    v98 = v151;
    outlined init with copy of MLHandActionClassifier.GraphCNNModel(v168, v151);
    v99 = v153;
    v100 = v150;
    (*(void (**)(char *, char *, uint64_t))(v153 + 16))(v150, v95, v20);
    if (v97)
    {
      v178._object = *(void **)(v99 + 8);
      ((void (*)(char *, uint64_t))v178._object)(v100, v20);
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v98);
      v101 = v97;
      goto LABEL_60;
    }
    v102 = LayerState.id.getter();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
    v103 = Layer.parameterKeyPaths(recursively:)();
    v104 = v98;
    MEMORY[0x24BDAC7A8](v103);
    v145[-2] = v98;
    LODWORD(v145[-1]) = v102;
    v105 = v162;
    v101 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:), (uint64_t)&v145[-4], v103);
    v162 = v105;
    swift_bridgeObjectRelease();
    v48 = v170;
    v178._object = *(void **)(v153 + 8);
    ((void (*)(char *, uint64_t))v178._object)(v100, v170);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v104);
    if (!v101)
    {
LABEL_103:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v191._countAndFlagsBits = 0;
      v191._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v138._object = (void *)0x800000021AFF5250;
      v138._countAndFlagsBits = 0xD000000000000025;
      String.append(_:)(v138);
      String.append(_:)(v179);
      v139._countAndFlagsBits = 0x74656D6172617020;
      v139._object = (void *)0xEB00000000207265;
      String.append(_:)(v139);
      v140._countAndFlagsBits = v39;
      v140._object = object;
      String.append(_:)(v140);
      v141 = v191._countAndFlagsBits;
      v142 = v191._object;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v143 = v141;
      *(_QWORD *)(v143 + 8) = v142;
      *(_OWORD *)(v143 + 16) = 0u;
      *(_OWORD *)(v143 + 32) = 0u;
      *(_BYTE *)(v143 + 48) = 0;
      swift_bridgeObjectRelease();
      swift_willThrow(v144);
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v178._object)(v181, v48);
    }
LABEL_60:
    ++v180;
    v191 = v179;
    swift_bridgeObjectRetain();
    v106._countAndFlagsBits = 46;
    v106._object = (void *)0xE100000000000000;
    String.append(_:)(v106);
    v107._countAndFlagsBits = v39;
    v107._object = object;
    String.append(_:)(v107);
    swift_bridgeObjectRelease();
    v175 = v101;
    v108 = specialized SGD.getStatesDictionary(for:name:)(v101, v191._countAndFlagsBits, (char *)v191._object);
    swift_bridgeObjectRelease();
    v44 = v194;
    v48 = swift_isUniquelyReferenced_nonNull_native();
    v193 = v44;
    v194 = 0x8000000000000000;
    specialized LazyMapSequence.makeIterator()(v108, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v195);
    v186 = v200;
    v185 = v195[0];
    v183 = v195[1];
    v187 = v197;
    v39 = v198;
    v184 = v199;
    v173 = v196;
    v182 = (unint64_t)(v196 + 64) >> 6;
    v174 = (void (*)(unint64_t, uint64_t))v108;
    swift_bridgeObjectRetain();
    while (2)
    {
      if (v39)
      {
        v109 = __clz(__rbit64(v39));
        v39 &= v39 - 1;
        v110 = v109 | (v187 << 6);
        goto LABEL_78;
      }
      v111 = v187 + 1;
      if (__OFADD__(v187, 1))
      {
        __break(1u);
        goto LABEL_105;
      }
      if (v111 >= v182)
      {
        v90 = v181;
        goto LABEL_95;
      }
      v112 = *(_QWORD *)(v183 + 8 * v111);
      v90 = v181;
      if (v112)
      {
LABEL_77:
        v39 = (v112 - 1) & v112;
        v110 = __clz(__rbit64(v112)) + (v111 << 6);
        v187 = v111;
LABEL_78:
        v114 = (uint64_t *)(*(_QWORD *)(v185 + 48) + 16 * v110);
        v115 = (void *)v114[1];
        v116 = *(_QWORD *)(*(_QWORD *)(v185 + 56) + 8 * v110);
        v191._countAndFlagsBits = *v114;
        v191._object = v115;
        v192 = v116;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v184(&v188, &v191);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v117 = v188;
        v37 = v189;
        isUniquelyReferenced_nonNull_native = v190;
        v119 = specialized __RawDictionaryStorage.find<A>(_:)(v188, v189);
        v120 = *(_QWORD *)(v44 + 16);
        v121 = (v118 & 1) == 0;
        v122 = v120 + v121;
        if (__OFADD__(v120, v121))
          goto LABEL_98;
        object = v118;
        if (*(_QWORD *)(v44 + 24) >= v122)
        {
          if ((v48 & 1) == 0)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
            _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v122, v48 & 1);
          v123 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v37);
          if ((object & 1) != (v124 & 1))
            goto LABEL_107;
          v119 = v123;
        }
        v44 = v193;
        if ((object & 1) != 0)
        {
          v125 = *(_QWORD *)(*(_QWORD *)(v193 + 56) + 8 * v119);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v126 = *(_QWORD *)(v44 + 56);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v126 + 8 * v119) = v125;
          v48 = 1;
        }
        else
        {
          *(_QWORD *)(v193 + 8 * (v119 >> 6) + 64) |= 1 << v119;
          v127 = (uint64_t *)(*(_QWORD *)(v44 + 48) + 16 * v119);
          *v127 = v117;
          v127[1] = v37;
          *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v119) = isUniquelyReferenced_nonNull_native;
          v128 = *(_QWORD *)(v44 + 16);
          v68 = __OFADD__(v128, 1);
          v129 = v128 + 1;
          if (v68)
            goto LABEL_102;
          *(_QWORD *)(v44 + 16) = v129;
          v48 = 1;
        }
        continue;
      }
      break;
    }
    v113 = v187 + 2;
    if (v187 + 2 >= v182)
      goto LABEL_95;
    v112 = *(_QWORD *)(v183 + 8 * v113);
    if (v112)
      goto LABEL_76;
    v113 = v187 + 3;
    if (v187 + 3 >= v182)
      goto LABEL_95;
    v112 = *(_QWORD *)(v183 + 8 * v113);
    if (v112)
      goto LABEL_76;
    v113 = v187 + 4;
    if (v187 + 4 >= v182)
      goto LABEL_95;
    v112 = *(_QWORD *)(v183 + 8 * v113);
    if (v112)
      goto LABEL_76;
    v113 = v187 + 5;
    if (v187 + 5 >= v182)
      goto LABEL_95;
    v112 = *(_QWORD *)(v183 + 8 * v113);
    if (v112)
      goto LABEL_76;
    v113 = v187 + 6;
    if (v187 + 6 >= v182)
      goto LABEL_95;
    v112 = *(_QWORD *)(v183 + 8 * v113);
    if (v112)
    {
LABEL_76:
      v111 = v113;
      goto LABEL_77;
    }
    v111 = v187 + 7;
    if (v187 + 7 >= v182)
      goto LABEL_95;
    v112 = *(_QWORD *)(v183 + 8 * v111);
    if (v112)
      goto LABEL_77;
    v130 = v187 + 8;
    while (v130 < v182)
    {
      v112 = *(_QWORD *)(v183 + 8 * v130++);
      if (v112)
      {
        v111 = v130 - 1;
        goto LABEL_77;
      }
    }
LABEL_95:
    swift_bridgeObjectRelease();
    outlined consume of [String : [Int]].Iterator._Variant();
    swift_release();
    v194 = v44;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v20 = v170;
    ((void (*)(char *, uint64_t))v178._object)(v90, v170);
    v89 = v180;
    a5 = v165;
    v88 = (uint64_t)v164;
    if (v180 != v171)
      continue;
    break;
  }
LABEL_96:
  swift_bridgeObjectRelease();
  return v194;
}

uint64_t specialized SGD.getParametersDictionary()()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(v0 + 12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F40;
  strcpy((char *)(inited + 32), "learningRate");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_21AFE7DA0;
  *(double *)(v3 + 32) = *(float *)v0;
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = 0x6D75746E656D6F6DLL;
  *(_QWORD *)(inited + 64) = 0xE800000000000000;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21AFE7DA0;
  *(double *)(v4 + 32) = *(float *)(v0 + 4);
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 80) = 0xD000000000000014;
  *(_QWORD *)(inited + 88) = 0x800000021AFF52A0;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_21AFE7DA0;
  *(double *)(v5 + 32) = (double)v1;
  *(_QWORD *)(inited + 96) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t specialized SGD.getStatesDictionary(for:name:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  void (*v29)(uint64_t *, _QWORD);
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v39 = a3;
  v40 = a2;
  v3 = type metadata accessor for TensorShape();
  v38 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v34 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tensor?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Tensor();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  v16 = Dictionary.init(dictionaryLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptimizerStateDictionary<MLHandActionClassifier.GraphCNNModel>);
  OptimizerStateDictionary.subscript.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
  {
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v11, &demangling cache variable for type metadata for Tensor?);
    return v16;
  }
  v36 = v12;
  v37 = v13;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  v41 = 0;
  v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v17 = (unint64_t)v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = v40;
  v42 = v17;
  v18._object = (void *)0x800000021AFF51D0;
  v18._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v18);
  Tensor.shape.getter();
  v19 = TensorShape.contiguousSize.getter();
  v38 = *(_QWORD *)(v38 + 8);
  v20 = ((uint64_t (*)(char *, uint64_t))v38)(v8, v3);
  MEMORY[0x24BDAC7A8](v20);
  *(&v34 - 2) = (unint64_t)v15;
  specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v19, (uint64_t (*)(_QWORD *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)(&v34 - 4));
  swift_isUniquelyReferenced_nonNull_native();
  v41 = v16;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  v21 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = 0;
  v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = v40;
  v42 = v17;
  v22._countAndFlagsBits = 0xD000000000000019;
  v22._object = (void *)0x800000021AFF51F0;
  String.append(_:)(v22);
  v23 = v42;
  v40 = v41;
  Tensor.shape.getter();
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption((unint64_t *)&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape, (uint64_t (*)(uint64_t))MEMORY[0x24BE6B8F8], MEMORY[0x24BE6B910]);
  v24 = dispatch thunk of Collection.count.getter();
  v25 = v37;
  if (!v24)
  {
LABEL_10:
    ((void (*)(char *, uint64_t))v38)(v6, v3);
    swift_isUniquelyReferenced_nonNull_native();
    v41 = v21;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    v16 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v36);
    return v16;
  }
  v26 = v24;
  v43 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24 & ~(v24 >> 63), 0);
  v27 = v43;
  result = dispatch thunk of Collection.startIndex.getter();
  if ((v26 & 0x8000000000000000) == 0)
  {
    v34 = v23;
    v35 = v21;
    v39 = v15;
    do
    {
      v29 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      v31 = *v30;
      v29(&v41, 0);
      v43 = v27;
      v33 = *(_QWORD *)(v27 + 16);
      v32 = *(_QWORD *)(v27 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        v27 = v43;
      }
      *(_QWORD *)(v27 + 16) = v33 + 1;
      *(double *)(v27 + 8 * v33 + 32) = (double)v31;
      dispatch thunk of Collection.formIndex(after:)();
      --v26;
    }
    while (v26);
    v15 = v39;
    v21 = v35;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

BOOL specialized closure #1 in Layer.parameterKeyPath(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  uint64_t v6;

  v0 = type metadata accessor for Parameter();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath();
  v4 = Parameter.id.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 == Parameter.id.getter();
}

{
  return specialized closure #1 in Layer.parameterKeyPath(for:)();
}

BOOL specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v4 = type metadata accessor for Parameter();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v8 = v7 - v6;
  swift_getAtKeyPath();
  v9 = Parameter.id.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  return v9 == a3;
}

uint64_t MLHandActionClassifier.GraphCNN.getCheckpointStatesDictionary()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_49();
  v4 = v3 - v2;
  v5 = v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_optimizer;
  swift_beginAccess();
  outlined init with copy of URL?(v5, v4, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  MLHandActionClassifier.GraphCNN.trainableSublayers()();
  v7 = specialized _ModelCheckpoint<>.getCheckpointStatesDictionary<A>(optimizer:trainableSublayers:)(v4, v6);
  outlined destroy of FeatureMatrixBuilder<Float>(v4, &demangling cache variable for type metadata for SGD<MLHandActionClassifier.GraphCNNModel>);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized _ModelCheckpoint<>.getCheckpointStatesDictionary<A>(optimizer:trainableSublayers:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 *v35;
  unint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  char *v40;
  uint64_t isUniquelyReferenced_nonNull_native;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(unint64_t, uint64_t);
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(unint64_t, uint64_t);
  unint64_t v86;
  uint64_t result;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  __int128 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t v121;
  char *v122;
  void (*v123)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[5];
  _QWORD v132[7];
  uint64_t v133;
  _QWORD v134[5];
  _QWORD v135[2];
  uint64_t v136;
  char *v137;
  unint64_t v138;
  void (*v139)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v140;
  _QWORD *v141;

  v5 = type metadata accessor for LSTM();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v92 = (char *)&v88 - v10;
  v11 = type metadata accessor for Dense();
  v96 = *(_QWORD *)(v11 - 8);
  v97 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v91 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v95 = (char *)&v88 - v14;
  v15 = type metadata accessor for Conv2D();
  v102 = *(_QWORD *)(v15 - 8);
  v103 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v94 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v101 = (char *)&v88 - v18;
  v19 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v89 = (unint64_t)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v90 = (unint64_t)&v88 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v93 = (uint64_t)&v88 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v100 = (unint64_t)&v88 - v26;
  v112 = type metadata accessor for BatchNorm();
  v99 = *(_QWORD *)(v112 - 8);
  v27 = MEMORY[0x24BDAC7A8](v112);
  v98 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v111 = (char *)&v88 - v29;
  v30 = specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter();
  v108 = a1;
  v109 = v30;
  v31 = specialized SGD.getParametersDictionary()();
  v113 = *(_QWORD *)(a2 + 16);
  v32 = v2 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_bridgeObjectRetain();
  v107 = v32;
  swift_beginAccess();
  v33 = 0;
  v88 = a2;
  v105 = (__int128 *)v131;
  v106 = a2 + 32;
  v104 = &v132[1];
  v110 = (__int128 *)v134;
  v118 = v6;
  v119 = v5;
  v122 = v9;
LABEL_2:
  if (v33 == v113)
  {
    v115 = v113;
    memset(v132, 0, 48);
  }
  else
  {
    if (v33 >= v113)
    {
      __break(1u);
LABEL_68:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    v34 = v33 + 1;
    v35 = v105;
    v36 = v33;
    outlined init with copy of TrainingSessionDelegate(v106 + 40 * v33, (uint64_t)v105);
    v132[0] = v36;
    outlined init with take of BinaryFloatingPoint(v35, (uint64_t)v104);
    v115 = v34;
  }
  outlined init with take of (key: URL, value: CIImage)?((uint64_t)v132, (uint64_t)&v133, &demangling cache variable for type metadata for (offset: Int, element: Layer)?);
  if (!v134[3])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v31;
  }
  v37 = v133;
  outlined init with take of BinaryFloatingPoint(v110, (uint64_t)v132);
  v130 = 0x5F726579616CLL;
  v131[0] = 0xE600000000000000;
  v127 = v37;
  v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v125 = v130;
  v126 = (char *)v131[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  v39 = Dictionary.init(dictionaryLiteral:)();
  outlined init with copy of TrainingSessionDelegate((uint64_t)v132, (uint64_t)&v130);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Layer);
  v40 = v111;
  isUniquelyReferenced_nonNull_native = v112;
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v42 = v98;
    v43 = v99;
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v98, v40, isUniquelyReferenced_nonNull_native);
    v44 = v100;
    outlined init with copy of MLHandActionClassifier.GraphCNNModel(v107, v100);
    v5 = v109;
    swift_bridgeObjectRetain();
    v45 = v116;
    v46 = specialized BatchNorm.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v44, v125, v126, v108, v5);
    v116 = v45;
    if (v45)
    {
LABEL_58:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v44);
      v85 = *(void (**)(unint64_t, uint64_t))(v43 + 8);
      v86 = (unint64_t)v42;
      goto LABEL_63;
    }
    v117 = v46;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v44);
    v47 = *(void (**)(unint64_t, uint64_t))(v43 + 8);
    v48 = (unint64_t)v42;
  }
  else
  {
    v117 = v39;
    v49 = v101;
    isUniquelyReferenced_nonNull_native = v103;
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v44 = (unint64_t)v94;
      (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v94, v49, isUniquelyReferenced_nonNull_native);
      v5 = v93;
      outlined init with copy of MLHandActionClassifier.GraphCNNModel(v107, v93);
      v50 = v109;
      swift_bridgeObjectRetain();
      v51 = v116;
      v52 = specialized Conv2D.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v5, v125, v126, v108, v50);
      v116 = v51;
      if (v51)
        goto LABEL_61;
      v117 = v52;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v5);
      v47 = *(void (**)(unint64_t, uint64_t))(v102 + 8);
      v48 = v44;
    }
    else
    {
      v44 = (unint64_t)v95;
      isUniquelyReferenced_nonNull_native = v97;
      if ((swift_dynamicCast() & 1) == 0)
      {
        v81 = v92;
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v81, v5);
          v44 = v89;
          outlined init with copy of MLHandActionClassifier.GraphCNNModel(v107, v89);
          v82 = v109;
          swift_bridgeObjectRetain();
          v83 = v116;
          v84 = specialized LSTM.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v44, v125, v126, v108, v82);
          v116 = v83;
          if (v83)
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            outlined destroy of MLHandActionClassifier.GraphCNNModel(v44);
            (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
            goto LABEL_64;
          }
          v117 = v84;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of MLHandActionClassifier.GraphCNNModel(v44);
          (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        goto LABEL_17;
      }
      swift_bridgeObjectRelease();
      v5 = (uint64_t)v91;
      (*(void (**)(char *, unint64_t, uint64_t))(v96 + 32))(v91, v44, isUniquelyReferenced_nonNull_native);
      v44 = v90;
      outlined init with copy of MLHandActionClassifier.GraphCNNModel(v107, v90);
      v53 = v109;
      swift_bridgeObjectRetain();
      v54 = v116;
      v55 = specialized Dense.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(v44, v125, v126, v108, v53);
      v116 = v54;
      if (v54)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        outlined destroy of MLHandActionClassifier.GraphCNNModel(v44);
        v85 = *(void (**)(unint64_t, uint64_t))(v96 + 8);
        v86 = v5;
        goto LABEL_63;
      }
      v117 = v55;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v44);
      v47 = *(void (**)(unint64_t, uint64_t))(v96 + 8);
      v48 = v5;
    }
  }
  v47(v48, isUniquelyReferenced_nonNull_native);
LABEL_17:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v130);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v141 = (_QWORD *)v31;
  specialized LazyMapSequence.makeIterator()(v117, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v135);
  v124 = v135[0];
  v125 = v140;
  v126 = v137;
  v56 = v138;
  v123 = v139;
  v114 = v136;
  v120 = (unint64_t)(v136 + 64) >> 6;
  v121 = v135[1];
  swift_bridgeObjectRetain();
  if (v56)
  {
LABEL_18:
    v57 = __clz(__rbit64(v56));
    v56 &= v56 - 1;
    v58 = v57 | ((_QWORD)v126 << 6);
    goto LABEL_32;
  }
  while (1)
  {
    v59 = (uint64_t)(v126 + 1);
    if (__OFADD__(v126, 1))
      goto LABEL_60;
    if (v59 >= v120)
    {
      v6 = v118;
      v5 = v119;
LABEL_51:
      swift_bridgeObjectRelease();
      outlined consume of [String : [Int]].Iterator._Variant();
      swift_bridgeObjectRelease();
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v132);
      v33 = v115;
      goto LABEL_2;
    }
    v60 = *(_QWORD *)(v121 + 8 * v59);
    v6 = v118;
    v5 = v119;
    if (!v60)
    {
      v61 = v126 + 2;
      if ((uint64_t)(v126 + 2) >= v120)
        goto LABEL_51;
      v60 = *(_QWORD *)(v121 + 8 * (_QWORD)v61);
      if (v60)
        goto LABEL_30;
      v61 = v126 + 3;
      if ((uint64_t)(v126 + 3) >= v120)
        goto LABEL_51;
      v60 = *(_QWORD *)(v121 + 8 * (_QWORD)v61);
      if (v60)
        goto LABEL_30;
      v61 = v126 + 4;
      if ((uint64_t)(v126 + 4) >= v120)
        goto LABEL_51;
      v60 = *(_QWORD *)(v121 + 8 * (_QWORD)v61);
      if (v60)
        goto LABEL_30;
      v61 = v126 + 5;
      if ((uint64_t)(v126 + 5) >= v120)
        goto LABEL_51;
      v60 = *(_QWORD *)(v121 + 8 * (_QWORD)v61);
      if (v60)
      {
LABEL_30:
        v59 = (uint64_t)v61;
      }
      else
      {
        v59 = (uint64_t)(v126 + 6);
        if ((uint64_t)(v126 + 6) >= v120)
          goto LABEL_51;
        v60 = *(_QWORD *)(v121 + 8 * v59);
        if (!v60)
        {
          v80 = (uint64_t)(v126 + 7);
          while (v80 < v120)
          {
            v60 = *(_QWORD *)(v121 + 8 * v80++);
            if (v60)
            {
              v59 = v80 - 1;
              goto LABEL_31;
            }
          }
          goto LABEL_51;
        }
      }
    }
LABEL_31:
    v56 = (v60 - 1) & v60;
    v58 = __clz(__rbit64(v60)) + (v59 << 6);
    v126 = (char *)v59;
LABEL_32:
    v62 = (uint64_t *)(*(_QWORD *)(v124 + 48) + 16 * v58);
    v63 = v62[1];
    v64 = *(_QWORD *)(*(_QWORD *)(v124 + 56) + 8 * v58);
    v130 = *v62;
    v131[0] = v63;
    v131[1] = v64;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v123(&v127, &v130);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v65 = v127;
    v5 = v128;
    v43 = v129;
    v42 = (char *)v31;
    v44 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v128);
    v67 = *(_QWORD *)(v31 + 16);
    v68 = (v66 & 1) == 0;
    v69 = v67 + v68;
    if (__OFADD__(v67, v68))
    {
      __break(1u);
      goto LABEL_58;
    }
    v31 = v66;
    if (*((_QWORD *)v42 + 3) >= v69)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v69, isUniquelyReferenced_nonNull_native & 1);
      v70 = specialized __RawDictionaryStorage.find<A>(_:)(v65, v5);
      if ((v31 & 1) != (v71 & 1))
        goto LABEL_68;
      v44 = v70;
    }
    v72 = v141;
    if ((v31 & 1) == 0)
      break;
    v73 = *(_QWORD *)(v141[7] + 8 * v44);
    v74 = (uint64_t)v141;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = v74;
    v75 = *(_QWORD *)(v74 + 56);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v75 + 8 * v44) = v73;
LABEL_42:
    isUniquelyReferenced_nonNull_native = 1;
    v9 = v122;
    if (v56)
      goto LABEL_18;
  }
  v141[(v44 >> 6) + 8] |= 1 << v44;
  v76 = (uint64_t *)(v72[6] + 16 * v44);
  *v76 = v65;
  v76[1] = v5;
  *(_QWORD *)(v72[7] + 8 * v44) = v43;
  v77 = v72[2];
  v78 = __OFADD__(v77, 1);
  v79 = v77 + 1;
  if (!v78)
  {
    v31 = (uint64_t)v72;
    v72[2] = v79;
    goto LABEL_42;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  outlined destroy of MLHandActionClassifier.GraphCNNModel(v5);
  v85 = *(void (**)(unint64_t, uint64_t))(v102 + 8);
  v86 = v44;
LABEL_63:
  v85(v86, isUniquelyReferenced_nonNull_native);
LABEL_64:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v132);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v130);
  return v31;
}

uint64_t specialized _ModelCheckpoint<>.parameterKeyPathLookup.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _BOOL8 v20;
  Swift::Int v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v1 = type metadata accessor for Parameter();
  v36 = *(_QWORD *)(v1 - 8);
  v37 = v1;
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_49();
  v35 = v3 - v2;
  v4 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v7 = v6 - v5;
  v8 = v0 + OBJC_IVAR____TtCV8CreateML22MLHandActionClassifier8GraphCNN_model;
  swift_beginAccess();
  v34 = v8;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v8, v7);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
  v9 = Layer.parameterKeyPaths(recursively:)();
  v33 = v7;
  outlined destroy of MLHandActionClassifier.GraphCNNModel(v7);
  if (v9 >> 62)
  {
LABEL_21:
    OUTLINED_FUNCTION_52_1();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_30();
    if (v10)
      goto LABEL_3;
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
    {
LABEL_3:
      v32 = v9 & 0xC000000000000001;
      v11 = (_QWORD *)MEMORY[0x24BEE4B00];
      v12 = 4;
      v31 = v9;
      while (1)
      {
        if (v32)
        {
          v13 = MEMORY[0x22075AF48](v12 - 4, v9);
        }
        else
        {
          v13 = *(_QWORD *)(v9 + 8 * v12);
          swift_retain();
        }
        v14 = v12 - 3;
        if (__OFADD__(v12 - 4, 1))
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        outlined init with copy of MLHandActionClassifier.GraphCNNModel(v34, v33);
        swift_retain();
        swift_getAtKeyPath();
        swift_release();
        outlined destroy of MLHandActionClassifier.GraphCNNModel(v33);
        v15 = Parameter.id.getter();
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v38 = v11;
        v9 = (unint64_t)v11;
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
        v19 = v11[2];
        v20 = (v18 & 1) == 0;
        v21 = v19 + v20;
        if (__OFADD__(v19, v20))
          goto LABEL_19;
        v22 = v17;
        v23 = v18;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, WritableKeyPath<MLHandActionClassifier.GraphCNNModel, Parameter>>);
        v9 = (unint64_t)&v38;
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v21))
        {
          v9 = (unint64_t)v38;
          v24 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
          if ((v23 & 1) != (v25 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          v22 = v24;
        }
        v11 = v38;
        if ((v23 & 1) != 0)
        {
          v26 = v38[7];
          swift_release();
          *(_QWORD *)(v26 + 8 * v22) = v13;
        }
        else
        {
          v38[(v22 >> 6) + 8] |= 1 << v22;
          *(_DWORD *)(v11[6] + 4 * v22) = v15;
          *(_QWORD *)(v11[7] + 8 * v22) = v13;
          v27 = v11[2];
          v28 = __OFADD__(v27, 1);
          v29 = v27 + 1;
          if (v28)
            goto LABEL_20;
          v11[2] = v29;
        }
        swift_bridgeObjectRelease();
        ++v12;
        v9 = v31;
        if (v14 == v10)
          goto LABEL_23;
      }
    }
  }
  v11 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_23:
  OUTLINED_FUNCTION_30();
  return (uint64_t)v11;
}

uint64_t specialized BatchNorm.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  Swift::String v31;
  void *object;
  uint64_t v33;
  float v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  float v38;
  _QWORD *countAndFlagsBits;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  Swift::String v57;
  Swift::String v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int64_t v83;
  unint64_t v84;
  int64_t v85;
  uint64_t *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  int64_t v106;
  void (*v107)(uint64_t *__return_ptr, Swift::String *);
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  Swift::String v123;
  Swift::String v124;
  void *v125;
  uint64_t *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t v143;
  _BOOL8 v144;
  Swift::Int v145;
  unint64_t v146;
  char v147;
  unint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  Swift::String v154;
  Swift::String v155;
  Swift::String v156;
  Swift::String v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t result;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  _QWORD *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  char *v185;
  char *v186;
  void (*v187)(char *, uint64_t);
  uint64_t (*v188)(char *, uint64_t);
  uint64_t v189;
  uint64_t v190;
  Swift::String v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  void (*v195)(char *, uint64_t);
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  int64_t v203;
  _QWORD *v204;
  void (*v205)(uint64_t *__return_ptr, Swift::String *);
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  Swift::String v212;
  uint64_t v213;
  _QWORD v214[2];
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void (*v218)(uint64_t *__return_ptr, Swift::String *);
  uint64_t v219;
  _QWORD *v220;

  v181 = a5;
  v169 = a4;
  v180 = a1;
  v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, state: LayerState));
  v163 = *(_QWORD *)(v168 - 8);
  v8 = MEMORY[0x24BDAC7A8](v168);
  v166 = (uint64_t *)((char *)&v162 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x24BDAC7A8](v8);
  v184 = (uint64_t *)((char *)&v162 - v11);
  MEMORY[0x24BDAC7A8](v10);
  v167 = (uint64_t *)((char *)&v162 - v12);
  v165 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  MEMORY[0x24BDAC7A8](v165);
  v199 = (uint64_t)&v162 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for TensorShape();
  v179 = *(_QWORD *)(v190 - 8);
  v14 = MEMORY[0x24BDAC7A8](v190);
  v186 = (char *)&v162 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v178 = (char *)&v162 - v16;
  v189 = type metadata accessor for Tensor();
  v177 = *(_QWORD *)(v189 - 8);
  v17 = MEMORY[0x24BDAC7A8](v189);
  v185 = (char *)&v162 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v176 = (char *)&v162 - v19;
  v198 = type metadata accessor for Parameter();
  v197 = *(_QWORD *)(v198 - 8);
  v20 = MEMORY[0x24BDAC7A8](v198);
  v175 = (char *)&v162 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v201 = (char *)&v162 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, parameter: Parameter));
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v173 = (char *)&v162 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v196 = (uint64_t *)((char *)&v162 - v28);
  MEMORY[0x24BDAC7A8](v27);
  v183 = (uint64_t *)((char *)&v162 - v29);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  inited = swift_initStackObject();
  v208 = xmmword_21AFE7DA0;
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  v212._countAndFlagsBits = a2;
  v212._object = a3;
  swift_bridgeObjectRetain();
  v31._countAndFlagsBits = 0x75746E656D6F6D2ELL;
  v31._object = (void *)0xE90000000000006DLL;
  String.append(_:)(v31);
  object = v212._object;
  *(_QWORD *)(inited + 32) = v212._countAndFlagsBits;
  *(_QWORD *)(inited + 40) = object;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = v208;
  BatchNorm.momentum.getter();
  *(double *)(v33 + 32) = v34;
  *(_QWORD *)(inited + 48) = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  v35 = Dictionary.init(dictionaryLiteral:)();
  v191._countAndFlagsBits = a2;
  v212._countAndFlagsBits = a2;
  v212._object = a3;
  v191._object = a3;
  swift_bridgeObjectRetain();
  v36._countAndFlagsBits = 0x6E6F6C697370652ELL;
  v36._object = (void *)0xE800000000000000;
  String.append(_:)(v36);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = v208;
  BatchNorm.epsilon.getter();
  *(double *)(v37 + 32) = v38;
  swift_isUniquelyReferenced_nonNull_native();
  v212._countAndFlagsBits = v35;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  countAndFlagsBits = (_QWORD *)v212._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, parameter: Parameter)>);
  v40 = *(_QWORD *)(v24 + 72);
  v41 = *(unsigned __int8 *)(v24 + 80);
  v42 = v198;
  v43 = (v41 + 32) & ~v41;
  v44 = swift_allocObject();
  v162 = xmmword_21AFE7F70;
  *(_OWORD *)(v44 + 16) = xmmword_21AFE7F70;
  v182 = v44;
  v45 = (_QWORD *)(v44 + v43);
  *v45 = 0x74657366666FLL;
  v45[1] = 0xE600000000000000;
  BatchNorm.$offset.getter();
  v172 = v40;
  v171 = v45;
  v46 = (_QWORD *)((char *)v45 + v40);
  *v46 = 0x656C616373;
  v46[1] = 0xE500000000000000;
  v164 = v5;
  BatchNorm.$scale.getter();
  v47 = 0;
  v48 = 0;
  v174 = v23;
  v170 = (char *)v183 + *(int *)(v23 + 48);
  while (2)
  {
    if (v48 >= *(_QWORD *)(v182 + 16))
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    v194 = v47;
    v49 = v183;
    outlined init with copy of URL?((uint64_t)v171 + v48 * v172, (uint64_t)v183, &demangling cache variable for type metadata for (name: String, parameter: Parameter));
    v50 = v174;
    v51 = v196;
    v52 = (char *)v196 + *(int *)(v174 + 48);
    v54 = *v49;
    v53 = (void *)v49[1];
    *v196 = *v49;
    v51[1] = (uint64_t)v53;
    v55 = v197;
    v56 = *(void (**)(char *, char *, uint64_t))(v197 + 32);
    v56(v52, v170, v42);
    v212 = v191;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v57._countAndFlagsBits = 46;
    v57._object = (void *)0xE100000000000000;
    String.append(_:)(v57);
    v206 = (_QWORD *)v54;
    v58._countAndFlagsBits = v54;
    *(_QWORD *)&v208 = v53;
    v58._object = v53;
    String.append(_:)(v58);
    v59 = (char *)v212._object;
    v207 = v212._countAndFlagsBits;
    v60 = v42;
    v61 = &v173[*(int *)(v50 + 48)];
    v62 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
    v62(v61, v52, v60);
    v56(v201, v61, v60);
    v63 = Parameter.id.getter();
    v64 = swift_bridgeObjectRetain();
    v65 = v176;
    MEMORY[0x2207592EC](v64);
    v66 = v178;
    Tensor.shape.getter();
    v67 = TensorShape.contiguousSize.getter();
    v188 = *(uint64_t (**)(char *, uint64_t))(v179 + 8);
    v68 = v188(v66, v190);
    MEMORY[0x24BDAC7A8](v68);
    *((_QWORD *)&v162 - 2) = v65;
    v69 = v202;
    specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v67, (uint64_t (*)(_QWORD *, uint64_t *))partial apply for closure #1 in Tensor.doubleArray(), (uint64_t)(&v162 - 2));
    v202 = v69;
    v187 = *(void (**)(char *, uint64_t))(v177 + 8);
    v187(v65, v189);
    swift_isUniquelyReferenced_nonNull_native();
    v212._countAndFlagsBits = (uint64_t)countAndFlagsBits;
    v70 = v207;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    countAndFlagsBits = (_QWORD *)v212._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v181)
      v71 = specialized Dictionary.subscript.getter(v63, v181);
    else
      v71 = 0;
    v72 = v199;
    v73 = v175;
    outlined init with copy of MLHandActionClassifier.GraphCNNModel(v180, v199);
    v74 = v198;
    v62(v73, v201, v198);
    if (v71)
    {
      v200 = v71;
      v195 = *(void (**)(char *, uint64_t))(v197 + 8);
      v195(v73, v74);
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v72);
    }
    else
    {
      lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
      v75 = Layer.parameterKeyPaths(recursively:)();
      MEMORY[0x24BDAC7A8](v75);
      *((_QWORD *)&v162 - 2) = v199;
      *((_QWORD *)&v162 - 1) = v73;
      v76 = v202;
      v77 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in Layer.parameterKeyPath(for:), (uint64_t)(&v162 - 2), v75);
      v202 = v76;
      swift_bridgeObjectRelease();
      v195 = *(void (**)(char *, uint64_t))(v197 + 8);
      v195(v73, v74);
      outlined destroy of MLHandActionClassifier.GraphCNNModel(v199);
      if (!v77)
      {
LABEL_65:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v212._countAndFlagsBits = 0;
        v212._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v154._object = (void *)0x800000021AFF51B0;
        v154._countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v154);
        String.append(_:)(v191);
        v155._countAndFlagsBits = 0x697373696D202C60;
        v155._object = (void *)0xEC0000006020676ELL;
        String.append(_:)(v155);
        v156._countAndFlagsBits = (uint64_t)v206;
        v156._object = (void *)v208;
        String.append(_:)(v156);
        swift_bridgeObjectRelease();
        v157._countAndFlagsBits = 0x61702079656B2060;
        v157._object = (void *)0xEB000000002E6874;
        String.append(_:)(v157);
        v158 = v212._countAndFlagsBits;
        v159 = v212._object;
        lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
        swift_allocError();
        *(_QWORD *)v160 = v158;
        *(_QWORD *)(v160 + 8) = v159;
        *(_OWORD *)(v160 + 16) = 0u;
        *(_OWORD *)(v160 + 32) = 0u;
        *(_BYTE *)(v160 + 48) = 2;
        swift_willThrow(0.0);
        v195(v201, v198);
        outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v196, &demangling cache variable for type metadata for (name: String, parameter: Parameter));
        return (uint64_t)countAndFlagsBits;
      }
      v200 = v77;
    }
    swift_bridgeObjectRelease();
    v78 = specialized SGD.getStatesDictionary(for:name:)(v200, v70, v59);
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v220 = countAndFlagsBits;
    specialized LazyMapSequence.makeIterator()(v78, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v214);
    v207 = v219;
    v206 = (_QWORD *)v214[0];
    v204 = (_QWORD *)v214[1];
    *(_QWORD *)&v208 = v216;
    v80 = v217;
    v205 = v218;
    v192 = v215;
    v203 = (unint64_t)(v215 + 64) >> 6;
    v193 = v78;
    swift_bridgeObjectRetain();
    while (1)
    {
      if (v80)
      {
        v81 = __clz(__rbit64(v80));
        v80 &= v80 - 1;
        v82 = v81 | ((_QWORD)v208 << 6);
        goto LABEL_28;
      }
      v83 = v208 + 1;
      if (__OFADD__((_QWORD)v208, 1))
      {
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if (v83 >= v203)
        goto LABEL_44;
      v84 = v204[v83];
      if (!v84)
        break;
LABEL_27:
      v80 = (v84 - 1) & v84;
      v82 = __clz(__rbit64(v84)) + (v83 << 6);
      *(_QWORD *)&v208 = v83;
LABEL_28:
      v86 = (uint64_t *)(v206[6] + 16 * v82);
      v87 = (void *)v86[1];
      v88 = *(_QWORD *)(v206[7] + 8 * v82);
      v212._countAndFlagsBits = *v86;
      v212._object = v87;
      v213 = v88;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v205(&v209, &v212);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v90 = v209;
      v89 = v210;
      v91 = v211;
      v93 = specialized __RawDictionaryStorage.find<A>(_:)(v209, v210);
      v94 = countAndFlagsBits[2];
      v95 = (v92 & 1) == 0;
      v96 = v94 + v95;
      if (__OFADD__(v94, v95))
      {
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      v97 = v92;
      if (countAndFlagsBits[3] >= v96)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v96, isUniquelyReferenced_nonNull_native & 1);
        v98 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v89);
        if ((v97 & 1) != (v99 & 1))
          goto LABEL_73;
        v93 = v98;
      }
      countAndFlagsBits = v220;
      if ((v97 & 1) != 0)
      {
        v100 = *(_QWORD *)(v220[7] + 8 * v93);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v101 = countAndFlagsBits[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v101 + 8 * v93) = v100;
        isUniquelyReferenced_nonNull_native = 1;
      }
      else
      {
        v220[(v93 >> 6) + 8] |= 1 << v93;
        v102 = (uint64_t *)(countAndFlagsBits[6] + 16 * v93);
        *v102 = v90;
        v102[1] = v89;
        *(_QWORD *)(countAndFlagsBits[7] + 8 * v93) = v91;
        v103 = countAndFlagsBits[2];
        v104 = __OFADD__(v103, 1);
        v105 = v103 + 1;
        if (v104)
          goto LABEL_64;
        countAndFlagsBits[2] = v105;
        isUniquelyReferenced_nonNull_native = 1;
      }
    }
    v85 = v208 + 2;
    if ((uint64_t)v208 + 2 >= v203)
      goto LABEL_44;
    v84 = v204[v85];
    if (v84)
      goto LABEL_26;
    v85 = v208 + 3;
    if ((uint64_t)v208 + 3 >= v203)
      goto LABEL_44;
    v84 = v204[v85];
    if (v84)
      goto LABEL_26;
    v85 = v208 + 4;
    if ((uint64_t)v208 + 4 >= v203)
      goto LABEL_44;
    v84 = v204[v85];
    if (v84)
      goto LABEL_26;
    v85 = v208 + 5;
    if ((uint64_t)v208 + 5 >= v203)
      goto LABEL_44;
    v84 = v204[v85];
    if (v84)
      goto LABEL_26;
    v85 = v208 + 6;
    if ((uint64_t)v208 + 6 >= v203)
      goto LABEL_44;
    v84 = v204[v85];
    if (v84)
    {
LABEL_26:
      v83 = v85;
      goto LABEL_27;
    }
    v83 = v208 + 7;
    if ((uint64_t)v208 + 7 >= v203)
      goto LABEL_44;
    v84 = v204[v83];
    if (v84)
      goto LABEL_27;
    v106 = v208 + 8;
    while (v106 < v203)
    {
      v84 = v204[v106++];
      if (v84)
      {
        v83 = v106 - 1;
        goto LABEL_27;
      }
    }
LABEL_44:
    swift_bridgeObjectRelease();
    outlined consume of [String : [Int]].Iterator._Variant();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v42 = v198;
    v195(v201, v198);
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v196, &demangling cache variable for type metadata for (name: String, parameter: Parameter));
    v47 = 1;
    v48 = 1;
    if ((v194 & 1) == 0)
      continue;
    break;
  }
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, state: LayerState)>);
  v107 = *(void (**)(uint64_t *__return_ptr, Swift::String *))(v163 + 72);
  v108 = (*(unsigned __int8 *)(v163 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80);
  v109 = swift_allocObject();
  *(_OWORD *)(v109 + 16) = v162;
  v206 = (_QWORD *)v109;
  v110 = v109 + v108;
  v111 = v168;
  *(_QWORD *)v110 = 0x4D676E696E6E7572;
  *(_QWORD *)(v110 + 8) = 0xEB000000006E6165;
  BatchNorm.$runningMean.getter();
  v205 = v107;
  v204 = (_QWORD *)v110;
  v112 = (char *)v107 + v110;
  *(_QWORD *)v112 = 0x56676E696E6E7572;
  *((_QWORD *)v112 + 1) = 0xEF65636E61697261;
  BatchNorm.$runningVariance.getter();
  v113 = 0;
  v114 = 0;
  v203 = (int64_t)v167 + *(int *)(v111 + 48);
  v115 = v168;
  while (v114 < v206[2])
  {
    LODWORD(v207) = v113;
    v116 = v167;
    outlined init with copy of URL?((uint64_t)v204 + v114 * (_QWORD)v205, (uint64_t)v167, &demangling cache variable for type metadata for (name: String, state: LayerState));
    v117 = v184;
    v118 = (char *)v184 + *(int *)(v115 + 48);
    v119 = *v116;
    v120 = (void *)v116[1];
    *v184 = *v116;
    v117[1] = (uint64_t)v120;
    v121 = type metadata accessor for LayerState();
    v122 = *(_QWORD *)(v121 - 8);
    (*(void (**)(char *, int64_t, uint64_t))(v122 + 32))(v118, v203, v121);
    v212 = v191;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v123._countAndFlagsBits = 46;
    v123._object = (void *)0xE100000000000000;
    String.append(_:)(v123);
    v124._countAndFlagsBits = v119;
    v124._object = v120;
    String.append(_:)(v124);
    v125 = v212._object;
    *(_QWORD *)&v208 = v212._countAndFlagsBits;
    v126 = v166;
    v127 = (char *)v166 + *(int *)(v115 + 48);
    *v166 = v119;
    v126[1] = (uint64_t)v120;
    (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v127, v118, v121);
    v128 = swift_bridgeObjectRelease();
    MEMORY[0x220758C20](v128);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v127, v121);
    Tensor.shape.getter();
    v129 = TensorShape.dimensions.getter();
    v130 = *(_QWORD *)(v129 + 16);
    if (v130)
    {
      v131 = (uint64_t *)(v129 + 32);
      v132 = 1;
      while (1)
      {
        v133 = *v131++;
        v134 = v132 * v133;
        if ((unsigned __int128)(v132 * (__int128)v133) >> 64 != (v132 * v133) >> 63)
          goto LABEL_68;
        v132 = v134;
        if (!--v130)
          goto LABEL_53;
      }
    }
    v134 = 1;
LABEL_53:
    swift_bridgeObjectRelease();
    v135 = v188(v186, v190);
    MEMORY[0x24BDAC7A8](v135);
    v136 = v185;
    *((_QWORD *)&v162 - 2) = v185;
    v137 = v202;
    v138 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v134, (uint64_t (*)(_QWORD *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)(&v162 - 2));
    v202 = v137;
    v187(v136, v189);
    v139 = swift_isUniquelyReferenced_nonNull_native();
    v212._countAndFlagsBits = (uint64_t)countAndFlagsBits;
    v140 = v208;
    v141 = specialized __RawDictionaryStorage.find<A>(_:)(v208, (uint64_t)v125);
    v143 = countAndFlagsBits[2];
    v144 = (v142 & 1) == 0;
    v145 = v143 + v144;
    if (__OFADD__(v143, v144))
      goto LABEL_71;
    v146 = v141;
    v147 = v142;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [Double]>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v139, v145))
    {
      v148 = specialized __RawDictionaryStorage.find<A>(_:)(v140, (uint64_t)v125);
      if ((v147 & 1) != (v149 & 1))
        goto LABEL_73;
      v146 = v148;
    }
    countAndFlagsBits = (_QWORD *)v212._countAndFlagsBits;
    if ((v147 & 1) != 0)
    {
      v150 = *(_QWORD *)(v212._countAndFlagsBits + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v150 + 8 * v146) = v138;
    }
    else
    {
      *(_QWORD *)(v212._countAndFlagsBits + 8 * (v146 >> 6) + 64) |= 1 << v146;
      v151 = (uint64_t *)(countAndFlagsBits[6] + 16 * v146);
      *v151 = v140;
      v151[1] = (uint64_t)v125;
      *(_QWORD *)(countAndFlagsBits[7] + 8 * v146) = v138;
      v152 = countAndFlagsBits[2];
      v104 = __OFADD__(v152, 1);
      v153 = v152 + 1;
      if (v104)
        goto LABEL_72;
      countAndFlagsBits[2] = v153;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of FeatureMatrixBuilder<Float>((uint64_t)v184, &demangling cache variable for type metadata for (name: String, state: LayerState));
    v113 = 1;
    v114 = 1;
    if ((v207 & 1) != 0)
    {
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      return (uint64_t)countAndFlagsBits;
    }
  }
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Dense.getStatesDictionary<A, B>(_:layerName:optimizer:parameterKeyPathLookup:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t inited;
  Swift::String v32;
  void *object;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  Swift::String v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(Swift::String *, _QWORD);
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  Swift::String v65;
  uint64_t v66;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  Swift::String v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  void *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(Swift::String *, _QWORD);
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  unint64_t v101;
  uint64_t v102;
  Swift::String v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  Swift::String v107;
  Swift::String v108;
  uint64_t countAndFlagsBits;
  void *v110;
  uint64_t v111;
  Swift::String v112;
  Swift::String v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  char *v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  Swift::String v142;
  char v143[16];
  char *v144;
  Swift::String v145;
  uint64_t v146;

  v135 = a5;
  v132 = a4;
  v142._countAndFlagsBits = a2;
  v142._object = a3;
  v136 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parameter?);
  MEMORY[0x24BDAC7A8](v6);
  v126 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for Dense();
  v129 = *(_QWORD *)(v130 - 8);
  MEMORY[0x24BDAC7A8](v130);
  v134 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  v9 = MEMORY[0x24BDAC7A8](v125);
  v119 = (char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v128 = (uint64_t)&v118 - v11;
  v141 = type metadata accessor for Parameter();
  v139 = *(_QWORD *)(v141 - 8);
  v12 = MEMORY[0x24BDAC7A8](v141);
  v118 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v133 = (char *)&v118 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v127 = (char *)&v118 - v16;
  v17 = type metadata accessor for TensorShape();
  v138 = *(void (**)(char *, uint64_t))(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v124 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v118 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v118 - v23;
  v25 = type metadata accessor for Tensor();
  v131 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v118 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v118 - v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
  v145._countAndFlagsBits = a2;
  v145._object = v142._object;
  swift_bridgeObjectRetain();
  v32._countAndFlagsBits = 0x7468676965772ELL;
  v32._object = (void *)0xE700000000000000;
  String.append(_:)(v32);
  object = v145._object;
  *(_QWORD *)(inited + 32) = v145._countAndFlagsBits;
  *(_QWORD *)(inited + 40) = object;
  Dense.weight.getter();
  Tensor.shape.getter();
  v34 = TensorShape.contiguousSize.getter();
  v35 = (void (*)(char *, uint64_t))*((_QWORD *)v138 + 1);
  v121 = v24;
  v138 = v35;
  v35(v24, v17);
  v144 = v30;
  v36 = v137;
  v37 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v34, (uint64_t (*)(_QWORD *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)v143);
  v137 = v36;
  v38 = *(void (**)(char *, uint64_t))(v131 + 8);
  v122 = v30;
  v38(v30, v25);
  *(_QWORD *)(inited + 48) = v37;
  v145 = v142;
  swift_bridgeObjectRetain();
  v39._countAndFlagsBits = 0x2E7468676965772ELL;
  v39._object = (void *)0xED00006570616873;
  String.append(_:)(v39);
  v40 = v145._object;
  *(_QWORD *)(inited + 56) = v145._countAndFlagsBits;
  *(_QWORD *)(inited + 64) = v40;
  v131 = inited;
  v41 = v140;
  Dense.weight.getter();
  Tensor.shape.getter();
  v123 = v25;
  v120 = v38;
  v38(v28, v25);
  lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption((unint64_t *)&lazy protocol witness table cache variable for type TensorShape and conformance TensorShape, (uint64_t (*)(uint64_t))MEMORY[0x24BE6B8F8], MEMORY[0x24BE6B910]);
  v42 = dispatch thunk of Collection.count.getter();
  v43 = MEMORY[0x24BEE4AF8];
  if (v42)
  {
    v44 = v42;
    v146 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42 & ~(v42 >> 63), 0);
    v43 = v146;
    dispatch thunk of Collection.startIndex.getter();
    if (v44 < 0)
    {
      __break(1u);
      goto LABEL_35;
    }
    do
    {
      v45 = (void (*)(Swift::String *, _QWORD))dispatch thunk of Collection.subscript.read();
      v47 = *v46;
      v45(&v145, 0);
      v146 = v43;
      v49 = *(_QWORD *)(v43 + 16);
      v48 = *(_QWORD *)(v43 + 24);
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
        v43 = v146;
      }
      *(_QWORD *)(v43 + 16) = v49 + 1;
      *(double *)(v43 + 8 * v49 + 32) = (double)v47;
      dispatch thunk of Collection.formIndex(after:)();
      --v44;
    }
    while (v44);
    v50 = v141;
    v51 = v140;
  }
  else
  {
    v50 = v141;
    v51 = v41;
  }
  v138(v22, v17);
  *(_QWORD *)(v131 + 72) = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  v131 = Dictionary.init(dictionaryLiteral:)();
  v52 = v135;
  v53 = v129;
  if (v135)
  {
    v54 = v127;
    Dense.$weight.getter();
    v55 = Parameter.id.getter();
    (*(void (**)(char *, uint64_t))(v139 + 8))(v54, v50);
    v52 = specialized Dictionary.subscript.getter(v55, v52);
  }
  v56 = v130;
  v57 = v128;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v136, v128);
  v58 = v134;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v134, v51, v56);
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v58, v56);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v57);
  }
  else
  {
    v59 = v127;
    v60 = v57;
    Dense.$weight.getter();
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
    v61 = Layer.parameterKeyPaths(recursively:)();
    MEMORY[0x24BDAC7A8](v61);
    *(&v118 - 2) = (char *)v57;
    *(&v118 - 1) = v59;
    v62 = v137;
    v52 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t)(&v118 - 4), v61);
    v137 = v62;
    swift_bridgeObjectRelease();
    v63 = v59;
    v50 = v141;
    (*(void (**)(char *, uint64_t))(v139 + 8))(v63, v141);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v134, v56);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v57);
    if (!v52)
    {
      swift_bridgeObjectRelease();
      v145._countAndFlagsBits = 0;
      v145._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v107._object = (void *)0x800000021AFF51B0;
      v107._countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v107);
      String.append(_:)(v142);
      v108._countAndFlagsBits = 0xD00000000000001DLL;
      v108._object = (void *)0x800000021AFF5210;
      String.append(_:)(v108);
      countAndFlagsBits = v145._countAndFlagsBits;
      v110 = v145._object;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v111 = countAndFlagsBits;
      *(_QWORD *)(v111 + 8) = v110;
      *(_OWORD *)(v111 + 16) = 0u;
      *(_OWORD *)(v111 + 32) = 0u;
      *(_BYTE *)(v111 + 48) = 2;
      swift_willThrow(0.0);
      return v60;
    }
  }
  v64 = v131;
  v145 = v142;
  swift_bridgeObjectRetain();
  v65._countAndFlagsBits = 0x7468676965772ELL;
  v65._object = (void *)0xE700000000000000;
  String.append(_:)(v65);
  v66 = specialized SGD.getStatesDictionary(for:name:)(v52, v145._countAndFlagsBits, (char *)v145._object);
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v145._countAndFlagsBits = v64;
  v68 = v137;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v66, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v145);
  if (v68)
    goto LABEL_36;
  v60 = v145._countAndFlagsBits;
  swift_bridgeObjectRelease();
  v69 = (uint64_t)v126;
  Dense.$bias.getter();
  if (__swift_getEnumTagSinglePayload(v69, 1, v50) == 1)
  {
    swift_release();
    outlined destroy of FeatureMatrixBuilder<Float>(v69, &demangling cache variable for type metadata for Parameter?);
    return v60;
  }
  v134 = (char *)v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v139 + 32))(v133, v69, v50);
  v70 = v142._object;
  v145 = v142;
  swift_bridgeObjectRetain();
  v71._countAndFlagsBits = 0x736169622ELL;
  v71._object = (void *)0xE500000000000000;
  String.append(_:)(v71);
  v137 = v145._countAndFlagsBits;
  v72 = v60;
  v73 = v122;
  MEMORY[0x2207592EC]();
  v74 = v121;
  Tensor.shape.getter();
  v75 = TensorShape.contiguousSize.getter();
  v76 = ((uint64_t (*)(char *, uint64_t))v138)(v74, v17);
  MEMORY[0x24BDAC7A8](v76);
  *(&v118 - 2) = v73;
  specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v75, (uint64_t (*)(_QWORD *, uint64_t *))closure #1 in Tensor.doubleArray()partial apply, (uint64_t)(&v118 - 4));
  v140 = 0;
  v120(v73, v123);
  swift_isUniquelyReferenced_nonNull_native();
  v145._countAndFlagsBits = v72;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  v77 = v145._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v145._countAndFlagsBits = v142._countAndFlagsBits;
  v145._object = v70;
  swift_bridgeObjectRetain();
  v78._countAndFlagsBits = 0x68732E736169622ELL;
  v78._object = (void *)0xEB00000000657061;
  String.append(_:)(v78);
  v80 = v145._countAndFlagsBits;
  v79 = v145._object;
  v81 = v124;
  Parameter.shape.getter();
  v82 = dispatch thunk of Collection.count.getter();
  if (v82)
  {
    v83 = v82;
    v146 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82 & ~(v82 >> 63), 0);
    v84 = v146;
    dispatch thunk of Collection.startIndex.getter();
    if ((v83 & 0x8000000000000000) == 0)
    {
      v130 = v80;
      v131 = (uint64_t)v79;
      v137 = v77;
      do
      {
        v85 = (void (*)(Swift::String *, _QWORD))dispatch thunk of Collection.subscript.read();
        v87 = *v86;
        v85(&v145, 0);
        v146 = v84;
        v88 = v81;
        v90 = *(_QWORD *)(v84 + 16);
        v89 = *(_QWORD *)(v84 + 24);
        if (v90 >= v89 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1);
          v84 = v146;
        }
        *(_QWORD *)(v84 + 16) = v90 + 1;
        *(double *)(v84 + 8 * v90 + 32) = (double)v87;
        dispatch thunk of Collection.formIndex(after:)();
        --v83;
        v81 = v88;
      }
      while (v83);
      v77 = v137;
      goto LABEL_23;
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_23:
  v138(v81, v17);
  swift_isUniquelyReferenced_nonNull_native();
  v145._countAndFlagsBits = v77;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  v91 = v145._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v92 = v142._countAndFlagsBits;
  v93 = (uint64_t)v119;
  v94 = v118;
  v95 = v135;
  v96 = v133;
  if (v135)
  {
    v97 = Parameter.id.getter();
    v95 = specialized Dictionary.subscript.getter(v97, v95);
  }
  v98 = v139;
  outlined init with copy of MLHandActionClassifier.GraphCNNModel(v136, v93);
  v99 = v141;
  (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v94, v96, v141);
  if (v95)
  {
    v100 = *(void (**)(char *, uint64_t))(v98 + 8);
    v100(v94, v99);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v93);
  }
  else
  {
    lazy protocol witness table accessor for type VNImageOption and conformance VNImageOption(&lazy protocol witness table cache variable for type MLHandActionClassifier.GraphCNNModel and conformance MLHandActionClassifier.GraphCNNModel, type metadata accessor for MLHandActionClassifier.GraphCNNModel, (uint64_t)&protocol conformance descriptor for MLHandActionClassifier.GraphCNNModel);
    v60 = (uint64_t)v94;
    v101 = Layer.parameterKeyPaths(recursively:)();
    MEMORY[0x24BDAC7A8](v101);
    *(&v118 - 2) = (char *)v93;
    *(&v118 - 1) = (char *)v60;
    v102 = v140;
    v95 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Layer.parameterKeyPath(for:)specialized partial apply, (uint64_t)(&v118 - 4), v101);
    v140 = v102;
    swift_bridgeObjectRelease();
    v100 = *(void (**)(char *, uint64_t))(v98 + 8);
    v100((char *)v60, v99);
    outlined destroy of MLHandActionClassifier.GraphCNNModel(v93);
    if (!v95)
    {
      swift_bridgeObjectRelease();
      v145._countAndFlagsBits = 0;
      v145._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v112._object = (void *)0x800000021AFF51B0;
      v112._countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v112);
      String.append(_:)(v142);
      v113._object = (void *)0x800000021AFF5230;
      v113._countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v113);
      v114 = v145._countAndFlagsBits;
      v115 = v145._object;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      swift_allocError();
      *(_QWORD *)v116 = v114;
      *(_QWORD *)(v116 + 8) = v115;
      *(_OWORD *)(v116 + 16) = 0u;
      *(_OWORD *)(v116 + 32) = 0u;
      *(_BYTE *)(v116 + 48) = 2;
      swift_willThrow(0.0);
      swift_release();
      v100(v96, v99);
      return v60;
    }
    v92 = v142._countAndFlagsBits;
  }
  v145._countAndFlagsBits = v92;
  v145._object = v142._object;
  swift_bridgeObjectRetain();
  v103._countAndFlagsBits = 0x736169622ELL;
  v103._object = (void *)0xE500000000000000;
  String.append(_:)(v103);
  v104 = specialized SGD.getStatesDictionary(for:name:)(v95, v145._countAndFlagsBits, (char *)v145._object);
  swift_bridgeObjectRelease();
  v105 = swift_isUniquelyReferenced_nonNull_native();
  v145._countAndFlagsBits = v91;
  v106 = v140;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v104, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v105, &v145);
  if (!v106)
  {
    v60 = v145._countAndFlagsBits;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v100(v96, v141);
    return v60;
  }
LABEL_36:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  uint64_t *v0;
  uint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  char v31;

  OUTLINED_FUNCTION_46_10();
  v1 = v0;
  v3 = v2;
  v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, MLDataValue>);
  v31 = v3;
  v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_26:
    OUTLINED_FUNCTION_13_7();
    *v1 = v5;
    OUTLINED_FUNCTION_8_34();
    return;
  }
  v30 = v4 + 64;
  OUTLINED_FUNCTION_32_16();
  v8 = v7 & v6;
  v29 = (unint64_t)(v9 + 63) >> 6;
  swift_retain();
  if (v8)
  {
    OUTLINED_FUNCTION_70_11();
LABEL_16:
    v18 = 3 * v10;
    v19 = *(_QWORD *)(v4 + 48) + 8 * v18;
    v20 = *(unsigned __int8 *)(v19 + 16);
    v21 = *(_QWORD *)(v4 + 56) + 8 * v18;
    v23 = *(void **)v21;
    v22 = *(void **)(v21 + 8);
    v24 = *(_BYTE *)(v21 + 16);
    if ((v31 & 1) == 0)
    {
      outlined copy of MLDataValue(*(id *)v19, *(id *)(v19 + 8), *(_BYTE *)(v19 + 16));
      outlined copy of MLDataValue(v23, v22, v24);
    }
    v25 = OUTLINED_FUNCTION_34_19();
    ((void (*)(uint64_t))((char *)&loc_21AED1AD8 + *((int *)qword_21AED1C98 + v20)))(v25);
    return;
  }
  if (v29 <= 1)
  {
    OUTLINED_FUNCTION_13_7();
    v11 = (_QWORD *)(v4 + 64);
LABEL_21:
    v1 = v0;
    if ((v31 & 1) != 0)
    {
      if (1 << *(_BYTE *)(v4 + 32) >= 64)
      {
        v27 = OUTLINED_FUNCTION_24_26();
        specialized UnsafeMutablePointer.assign(repeating:count:)(v27, v28, v11);
      }
      else
      {
        OUTLINED_FUNCTION_37_13();
        *v11 = v26;
      }
      *(_QWORD *)(v4 + 16) = 0;
    }
    goto LABEL_26;
  }
  v11 = (_QWORD *)(v4 + 64);
  v12 = 1;
  if (*(_QWORD *)(v4 + 72))
    goto LABEL_15;
  v12 = 2;
  if (v29 <= 2)
  {
LABEL_19:
    OUTLINED_FUNCTION_13_7();
    goto LABEL_21;
  }
  if (*(_QWORD *)(v4 + 80))
  {
LABEL_15:
    OUTLINED_FUNCTION_66_12();
    v10 = v17 + (v12 << 6);
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_67_11();
  if (v15 == v16)
    goto LABEL_19;
  if (*(_QWORD *)(v30 + 8 * v13))
  {
    v12 = v13;
    goto LABEL_15;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v14)
      goto LABEL_19;
    ++v13;
    if (*(_QWORD *)(v30 + 8 * v12))
      goto LABEL_15;
  }
  __break(1u);
}

{
  unint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  OUTLINED_FUNCTION_46_10();
  v2 = (_QWORD *)v0;
  v4 = v3;
  OUTLINED_FUNCTION_5_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLDataValue, Int>);
  static _DictionaryStorage.resize(original:capacity:move:)();
  OUTLINED_FUNCTION_25_20();
  if (!v5)
  {
LABEL_23:
    OUTLINED_FUNCTION_4_43();
    *v2 = v4;
    OUTLINED_FUNCTION_8_34();
    return;
  }
  OUTLINED_FUNCTION_14_25();
  v21 = v6;
  OUTLINED_FUNCTION_47_14();
  v20 = v7;
  OUTLINED_FUNCTION_23_22();
  if (v0)
  {
    v8 = __clz(__rbit64(v0));
LABEL_15:
    v12 = *(_QWORD *)(v1 + 48) + 24 * v8;
    v13 = *(unsigned __int8 *)(v12 + 16);
    if ((v4 & 1) == 0)
      outlined copy of MLDataValue(*(id *)v12, *(id *)(v12 + 8), *(_BYTE *)(v12 + 16));
    v14 = OUTLINED_FUNCTION_34_19();
    ((void (*)(uint64_t))((char *)&loc_21AED1E10 + dword_21AED1F94[v13]))(v14);
    return;
  }
  if (v20 <= 1)
    goto LABEL_18;
  v9 = v21[1];
  v10 = 1;
  if (v9)
    goto LABEL_14;
  v10 = 2;
  if (v20 <= 2)
    goto LABEL_18;
  v9 = v21[2];
  if (v9)
  {
LABEL_14:
    v8 = __clz(__rbit64(v9)) + (v10 << 6);
    goto LABEL_15;
  }
  v11 = 3;
  if (v20 <= 3)
  {
LABEL_18:
    OUTLINED_FUNCTION_4_43();
    v2 = 0;
    if ((v4 & 1) != 0)
    {
      OUTLINED_FUNCTION_3_36();
      if (v15 != v16)
      {
        OUTLINED_FUNCTION_37_13();
        *v21 = v17;
      }
      else
      {
        v18 = OUTLINED_FUNCTION_24_26();
        specialized UnsafeMutablePointer.assign(repeating:count:)(v18, v19, v21);
      }
      *(_QWORD *)(v1 + 16) = 0;
    }
    goto LABEL_23;
  }
  v9 = v21[3];
  if (v9)
  {
    v10 = 3;
    goto LABEL_14;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v20)
      goto LABEL_18;
    v9 = v21[v10];
    ++v11;
    if (v9)
      goto LABEL_14;
  }
  __break(1u);
}

void sub_21AED1C20()
{
  OUTLINED_FUNCTION_73_8();
  OUTLINED_FUNCTION_72_8();
  OUTLINED_FUNCTION_71_8();
  __break(1u);
  JUMPOUT(0x21AED1C98);
}

void sub_21AED1F1C()
{
  OUTLINED_FUNCTION_36_16();
  OUTLINED_FUNCTION_73_8();
  OUTLINED_FUNCTION_71_8();
  __break(1u);
  JUMPOUT(0x21AED1F94);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, int a13, char a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_48_12();
  v16 = v14;
  v18 = v17;
  OUTLINED_FUNCTION_5_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLUntypedColumn>);
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_25_20();
  if (v19)
  {
    OUTLINED_FUNCTION_19_25();
    OUTLINED_FUNCTION_47_14();
    v43 = v20;
    OUTLINED_FUNCTION_23_22();
    v21 = 0;
    if (!v14)
      goto LABEL_4;
LABEL_3:
    OUTLINED_FUNCTION_44_18();
    while (1)
    {
      v25 = (uint64_t *)(v15[6] + 16 * v22);
      v27 = *v25;
      v26 = v25[1];
      v28 = v15[7] + 16 * v22;
      v29 = *(void **)v28;
      v30 = *(_BYTE *)(v28 + 8);
      if ((a14 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Result<_DataTable, Error>(v29, v30);
      }
      OUTLINED_FUNCTION_35_12();
      String.hash(into:)();
      OUTLINED_FUNCTION_52_9();
      OUTLINED_FUNCTION_29_18();
      if (v31)
      {
        OUTLINED_FUNCTION_32_13();
        while (1)
        {
          OUTLINED_FUNCTION_20_20();
          if (v31)
          {
            if ((v33 & 1) != 0)
              break;
          }
          OUTLINED_FUNCTION_39_13();
          if (!v31)
          {
            OUTLINED_FUNCTION_0_43();
            goto LABEL_26;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_2_40();
LABEL_26:
      OUTLINED_FUNCTION_27_28(v32);
      v36 = (_QWORD *)(v35 + 16 * v34);
      *v36 = v27;
      v36[1] = v26;
      v37 = *(_QWORD *)(v18 + 56) + 16 * v34;
      *(_QWORD *)v37 = v29;
      *(_BYTE *)(v37 + 8) = v30;
      OUTLINED_FUNCTION_6_34();
      if (v14)
        goto LABEL_3;
LABEL_4:
      v23 = v21 + 1;
      if (__OFADD__(v21, 1))
        goto LABEL_35;
      if (v23 >= v43)
        goto LABEL_28;
      ++v21;
      if (!a12[v23])
      {
        v21 = v23 + 1;
        if (v23 + 1 >= v43)
          goto LABEL_28;
        if (!a12[v21])
        {
          v24 = v23 + 2;
          if (v24 >= v43)
          {
LABEL_28:
            OUTLINED_FUNCTION_4_43();
            v16 = v14;
            if ((a14 & 1) != 0)
            {
              OUTLINED_FUNCTION_3_36();
              if (v38 != v39)
              {
                OUTLINED_FUNCTION_37_13();
                *a12 = v40;
              }
              else
              {
                v41 = OUTLINED_FUNCTION_24_26();
                specialized UnsafeMutablePointer.assign(repeating:count:)(v41, v42, a12);
              }
              v15[2] = 0;
            }
            break;
          }
          if (!a12[v24])
          {
            while (1)
            {
              v21 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_36;
              if (v21 >= v43)
                goto LABEL_28;
              ++v24;
              if (a12[v21])
                goto LABEL_15;
            }
          }
          v21 = v24;
        }
      }
LABEL_15:
      OUTLINED_FUNCTION_45_13();
    }
  }
  OUTLINED_FUNCTION_4_43();
  *v16 = v18;
  OUTLINED_FUNCTION_9_28();
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  OUTLINED_FUNCTION_46_10();
  a34 = v38;
  a35 = v39;
  v40 = v35;
  v42 = v41;
  OUTLINED_FUNCTION_5_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  OUTLINED_FUNCTION_15_23();
  OUTLINED_FUNCTION_25_20();
  if (v43)
  {
    OUTLINED_FUNCTION_14_25();
    v64 = v44;
    OUTLINED_FUNCTION_49_10();
    OUTLINED_FUNCTION_47_14();
    v63 = v45;
    OUTLINED_FUNCTION_23_22();
    v46 = 0;
    if (!v35)
      goto LABEL_4;
LABEL_3:
    OUTLINED_FUNCTION_44_18();
    while (1)
    {
      v50 = (_OWORD *)(*(_QWORD *)(v36 + 56) + 32 * v47);
      if ((v42 & 1) != 0)
      {
        outlined init with take of Any(v50, &a21);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v50, (uint64_t)&a21);
        OUTLINED_FUNCTION_50_10();
      }
      Hasher.init(_seed:)();
      OUTLINED_FUNCTION_60_11();
      Hasher._finalize()();
      OUTLINED_FUNCTION_31_18();
      if (v51)
      {
        OUTLINED_FUNCTION_32_13();
        while (1)
        {
          OUTLINED_FUNCTION_20_20();
          if (v51)
          {
            if ((v53 & 1) != 0)
              break;
          }
          if (v54 == v55)
            v54 = 0;
          if (*(_QWORD *)(v37 + 64 + 8 * v54) != -1)
          {
            OUTLINED_FUNCTION_0_43();
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_2_40();
LABEL_29:
      OUTLINED_FUNCTION_16_27(v52);
      outlined init with take of Any(&a21, (_OWORD *)(v57 + 32 * v56));
      OUTLINED_FUNCTION_6_34();
      if (v35)
        goto LABEL_3;
LABEL_4:
      v48 = v46 + 1;
      if (__OFADD__(v46, 1))
        goto LABEL_38;
      if (v48 >= v63)
        goto LABEL_31;
      ++v46;
      if (!v64[v48])
      {
        v46 = v48 + 1;
        if (v48 + 1 >= v63)
          goto LABEL_31;
        if (!v64[v46])
        {
          v49 = v48 + 2;
          if (v49 >= v63)
          {
LABEL_31:
            OUTLINED_FUNCTION_4_43();
            v40 = v35;
            if ((v42 & 1) != 0)
            {
              OUTLINED_FUNCTION_3_36();
              if (v58 != v59)
              {
                OUTLINED_FUNCTION_37_13();
                *v64 = v60;
              }
              else
              {
                v61 = OUTLINED_FUNCTION_24_26();
                specialized UnsafeMutablePointer.assign(repeating:count:)(v61, v62, v64);
              }
              *(_QWORD *)(v36 + 16) = 0;
            }
            break;
          }
          if (!v64[v49])
          {
            while (1)
            {
              v46 = v49 + 1;
              if (__OFADD__(v49, 1))
                goto LABEL_39;
              if (v46 >= v63)
                goto LABEL_31;
              ++v49;
              if (v64[v46])
                goto LABEL_15;
            }
          }
          v46 = v49;
        }
      }
LABEL_15:
      OUTLINED_FUNCTION_45_13();
    }
  }
  OUTLINED_FUNCTION_4_43();
  *v40 = v37;
  OUTLINED_FUNCTION_8_34();
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t i;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  char v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int64_t v49;

  OUTLINED_FUNCTION_48_12();
  v16 = v14;
  v18 = v17;
  OUTLINED_FUNCTION_5_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_25_20();
  if (v19)
  {
    OUTLINED_FUNCTION_19_25();
    v22 = v21 & v20;
    v49 = (unint64_t)(v23 + 63) >> 6;
    OUTLINED_FUNCTION_23_22();
    v24 = 0;
    if (!v22)
      goto LABEL_4;
LABEL_3:
    v25 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    for (i = v25 | (v24 << 6); ; i = __clz(__rbit64(v28)) + (v24 << 6))
    {
      v33 = (uint64_t *)(v15[6] + 16 * i);
      v35 = *v33;
      v34 = v33[1];
      v36 = (uint64_t *)(v15[7] + 16 * i);
      v37 = *v36;
      v38 = v36[1];
      if ((a14 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_50_10();
      }
      OUTLINED_FUNCTION_35_12();
      OUTLINED_FUNCTION_50_11();
      OUTLINED_FUNCTION_52_9();
      OUTLINED_FUNCTION_28_22();
      if (v39)
      {
        OUTLINED_FUNCTION_32_13();
        while (1)
        {
          OUTLINED_FUNCTION_20_20();
          if (v39)
          {
            if ((v41 & 1) != 0)
              break;
          }
          if (v42 == v43)
            v42 = 0;
          if (*(_QWORD *)(v18 + 64 + 8 * v42) != -1)
          {
            OUTLINED_FUNCTION_0_43();
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_2_40();
LABEL_29:
      OUTLINED_FUNCTION_26_23(v40);
      v46 = (_QWORD *)(v45 + 16 * v44);
      *v46 = v35;
      v46[1] = v34;
      v47 = (_QWORD *)(*(_QWORD *)(v18 + 56) + 16 * v44);
      *v47 = v37;
      v47[1] = v38;
      OUTLINED_FUNCTION_6_34();
      if (v22)
        goto LABEL_3;
LABEL_4:
      v27 = v24 + 1;
      if (__OFADD__(v24, 1))
        goto LABEL_38;
      if (v27 >= v49)
        goto LABEL_31;
      v28 = *(_QWORD *)(a12 + 8 * v27);
      ++v24;
      if (!v28)
      {
        v24 = v27 + 1;
        if (v27 + 1 >= v49)
          goto LABEL_31;
        v28 = *(_QWORD *)(a12 + 8 * v24);
        if (!v28)
        {
          OUTLINED_FUNCTION_67_11();
          if (v31 == v32)
          {
LABEL_31:
            OUTLINED_FUNCTION_4_43();
            v16 = v14;
            if ((a14 & 1) != 0)
            {
              OUTLINED_FUNCTION_3_36();
              if (v31 != v32)
                OUTLINED_FUNCTION_30_20(v48);
              else
                OUTLINED_FUNCTION_11_29(v48);
              v15[2] = 0;
            }
            break;
          }
          v28 = *(_QWORD *)(a12 + 8 * v29);
          if (!v28)
          {
            while (1)
            {
              v24 = v29 + 1;
              if (__OFADD__(v29, 1))
                goto LABEL_39;
              if (v24 >= v30)
                goto LABEL_31;
              v28 = *(_QWORD *)(a12 + 8 * v24);
              ++v29;
              if (v28)
                goto LABEL_16;
            }
          }
          v24 = v29;
        }
      }
LABEL_16:
      v22 = (v28 - 1) & v28;
    }
  }
  OUTLINED_FUNCTION_4_43();
  *v16 = v18;
  OUTLINED_FUNCTION_9_28();
}

{
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t i;
  int64_t v27;
  int64_t v28;
  int64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_48_12();
  v16 = v14;
  v18 = v17;
  OUTLINED_FUNCTION_5_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_25_20();
  if (v19)
  {
    v43 = v15 + 64;
    OUTLINED_FUNCTION_49_10();
    v22 = v21 & v20;
    v42 = (unint64_t)(v23 + 63) >> 6;
    OUTLINED_FUNCTION_23_22();
    v24 = 0;
    if (!v22)
      goto LABEL_4;
LABEL_3:
    OUTLINED_FUNCTION_62_14();
    for (i = v25 | (v24 << 6); ; i = v32 + (v24 << 6))
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * i);
      if ((a14 & 1) == 0)
        OUTLINED_FUNCTION_50_10();
      OUTLINED_FUNCTION_35_12();
      OUTLINED_FUNCTION_60_11();
      OUTLINED_FUNCTION_52_9();
      OUTLINED_FUNCTION_31_18();
      if (v34)
      {
        OUTLINED_FUNCTION_32_13();
        while (1)
        {
          OUTLINED_FUNCTION_20_20();
          if (v34)
          {
            if ((v36 & 1) != 0)
              break;
          }
          if (v37 == v38)
            v37 = 0;
          if (*(_QWORD *)(v18 + 64 + 8 * v37) != -1)
          {
            OUTLINED_FUNCTION_0_43();
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_2_40();
LABEL_29:
      OUTLINED_FUNCTION_16_27(v35);
      *(_QWORD *)(v40 + 8 * v39) = v33;
      OUTLINED_FUNCTION_6_34();
      if (v22)
        goto LABEL_3;
LABEL_4:
      v27 = v24 + 1;
      if (__OFADD__(v24, 1))
        goto LABEL_38;
      if (v27 >= v42)
        goto LABEL_31;
      ++v24;
      if (!*(_QWORD *)(v43 + 8 * v27))
      {
        v24 = v27 + 1;
        if (v27 + 1 >= v42)
          goto LABEL_31;
        if (!*(_QWORD *)(v43 + 8 * v24))
        {
          OUTLINED_FUNCTION_67_11();
          if (v30 == v31)
          {
LABEL_31:
            OUTLINED_FUNCTION_4_43();
            v16 = v14;
            if ((a14 & 1) != 0)
            {
              OUTLINED_FUNCTION_3_36();
              if (v30 != v31)
                OUTLINED_FUNCTION_30_20(v41);
              else
                OUTLINED_FUNCTION_11_29(v41);
              *(_QWORD *)(v15 + 16) = 0;
            }
            break;
          }
          if (!*(_QWORD *)(v43 + 8 * v28))
          {
            while (1)
            {
              v24 = v28 + 1;
              if (__OFADD__(v28, 1))
                goto LABEL_39;
              if (v24 >= v29)
                goto LABEL_31;
              ++v28;
              if (*(_QWORD *)(v43 + 8 * v24))
                goto LABEL_16;
            }
          }
          v24 = v28;
        }
      }
LABEL_16:
      OUTLINED_FUNCTION_65_14();
    }
  }
  OUTLINED_FUNCTION_4_43();
  *v16 = v18;
  OUTLINED_FUNCTION_9_28();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t result;
  _QWORD *v24;
  _OWORD v25[2];

  v5 = v2;
  OUTLINED_FUNCTION_5_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Any>);
  OUTLINED_FUNCTION_15_23();
  OUTLINED_FUNCTION_25_20();
  if (!v7)
    goto LABEL_26;
  OUTLINED_FUNCTION_14_25();
  v24 = v8;
  OUTLINED_FUNCTION_61_9();
  v11 = v10 & v9;
  v13 = (unint64_t)(v12 + 63) >> 6;
  OUTLINED_FUNCTION_23_22();
  if (v11)
  {
    OUTLINED_FUNCTION_70_11();
    goto LABEL_15;
  }
  if (v13 <= 1)
  {
    OUTLINED_FUNCTION_4_43();
    v5 = v2;
    if ((a2 & 1) == 0)
      goto LABEL_26;
    goto LABEL_22;
  }
  v15 = 1;
  if (v24[1])
    goto LABEL_14;
  v15 = 2;
  if (v13 <= 2)
    goto LABEL_19;
  if (v24[2])
  {
LABEL_14:
    OUTLINED_FUNCTION_66_12();
    v14 = v17 + (v15 << 6);
LABEL_15:
    v18 = *(unsigned __int8 *)(v3[6] + v14);
    v19 = (_OWORD *)(v3[7] + 32 * v14);
    if ((a2 & 1) != 0)
      outlined init with take of Any(v19, v25);
    else
      outlined init with copy of Any((uint64_t)v19, (uint64_t)v25);
    Hasher.init(_seed:)();
    OUTLINED_FUNCTION_40_14();
    __asm { BR              X8 }
  }
  v16 = 3;
  if (v13 > 3)
  {
    if (v24[3])
    {
      v15 = 3;
      goto LABEL_14;
    }
    while (1)
    {
      v15 = v16 + 1;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
        JUMPOUT(0x21AED27F0);
      }
      if (v15 >= v13)
        break;
      ++v16;
      if (v24[v15])
        goto LABEL_14;
    }
  }
LABEL_19:
  OUTLINED_FUNCTION_4_43();
  v5 = v2;
  if ((a2 & 1) == 0)
    goto LABEL_26;
LABEL_22:
  OUTLINED_FUNCTION_3_36();
  if (v21 != v22)
    OUTLINED_FUNCTION_30_20(v20);
  else
    OUTLINED_FUNCTION_11_29(v20);
  v3[2] = 0;
LABEL_26:
  result = OUTLINED_FUNCTION_4_43();
  *v5 = v4;
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_49();
  v8 = v7 - v6;
  v9 = (_QWORD *)*v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, URL>);
  static _DictionaryStorage.resize(original:capacity:move:)();
  OUTLINED_FUNCTION_25_20();
  if (!v10)
    goto LABEL_26;
  OUTLINED_FUNCTION_14_25();
  v28 = v11;
  OUTLINED_FUNCTION_32_16();
  v14 = v13 & v12;
  v27 = (unint64_t)(v15 + 63) >> 6;
  OUTLINED_FUNCTION_23_22();
  v16 = 16;
  if ((a2 & 1) != 0)
    v16 = 32;
  v29 = v16;
  if (v14)
  {
    OUTLINED_FUNCTION_62_14();
    goto LABEL_18;
  }
  if (v27 <= 1)
  {
    OUTLINED_FUNCTION_4_43();
    if ((a2 & 1) == 0)
      goto LABEL_26;
    goto LABEL_22;
  }
  v18 = 1;
  if (*(_QWORD *)(v28 + 8))
    goto LABEL_17;
  v18 = 2;
  if (v27 <= 2)
    goto LABEL_19;
  if (*(_QWORD *)(v28 + 16))
  {
LABEL_17:
    OUTLINED_FUNCTION_65_14();
    v17 = v23 + (v18 << 6);
LABEL_18:
    v24 = *(unsigned __int8 *)(v9[6] + v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + v29))(v8, v9[7] + *(_QWORD *)(v5 + 72) * v17, v30);
    Hasher.init(_seed:)();
    OUTLINED_FUNCTION_40_14();
    __asm { BR              X8 }
  }
  OUTLINED_FUNCTION_67_11();
  if (v21 == v22)
    goto LABEL_19;
  if (*(_QWORD *)(v28 + 8 * v19))
  {
    v18 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      JUMPOUT(0x21AED2B98);
    }
    if (v18 >= v20)
      break;
    ++v19;
    if (*(_QWORD *)(v28 + 8 * v18))
      goto LABEL_17;
  }
LABEL_19:
  OUTLINED_FUNCTION_4_43();
  if ((a2 & 1) == 0)
    goto LABEL_26;
LABEL_22:
  OUTLINED_FUNCTION_3_36();
  if (v21 != v22)
    OUTLINED_FUNCTION_30_20(v25);
  else
    OUTLINED_FUNCTION_11_29(v25);
  v9[2] = 0;
LABEL_26:
  result = OUTLINED_FUNCTION_4_43();
  *v2 = v3;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;

  v5 = v2;
  OUTLINED_FUNCTION_5_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MLProgress.Metric, Double>);
  OUTLINED_FUNCTION_15_23();
  OUTLINED_FUNCTION_25_20();
  if (!v7)
    goto LABEL_21;
  v8 = v3 + 8;
  OUTLINED_FUNCTION_61_9();
  v11 = v10 & v9;
  v13 = (unint64_t)(v12 + 63) >> 6;
  OUTLINED_FUNCTION_23_22();
  if (v11)
  {
    v14 = __clz(__rbit64(v11));
    goto LABEL_15;
  }
  if (v13 > 1)
  {
    v15 = v3[9];
    v16 = 1;
    if (v15)
      goto LABEL_14;
    v16 = 2;
    if (v13 > 2)
    {
      v15 = v3[10];
      if (!v15)
      {
        v17 = 3;
        if (v13 > 3)
        {
          v15 = v3[11];
          if (v15)
          {
            v16 = 3;
            goto LABEL_14;
          }
          while (1)
          {
            v16 = v17 + 1;
            if (__OFADD__(v17, 1))
            {
              __break(1u);
              JUMPOUT(0x21AED2E80);
            }
            if (v16 >= v13)
              break;
            v15 = v8[v16];
            ++v17;
            if (v15)
              goto LABEL_14;
          }
        }
        goto LABEL_16;
      }
LABEL_14:
      v14 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_15:
      v18 = *(unsigned __int8 *)(v3[6] + v14);
      OUTLINED_FUNCTION_34_19();
      OUTLINED_FUNCTION_40_14();
      __asm { BR              X8 }
    }
  }
LABEL_16:
  OUTLINED_FUNCTION_4_43();
  v5 = v2;
  if ((a2 & 1) != 0)
  {
    OUTLINED_FUNCTION_3_36();
    if (v19 != v20)
    {
      OUTLINED_FUNCTION_37_13();
      *v8 = v21;
    }
    else
    {
      v22 = OUTLINED_FUNCTION_24_26();
      specialized UnsafeMutablePointer.assign(repeating:count:)(v22, v23, v3 + 8);
    }
    v3[2] = 0;
  }
LABEL_21:
  result = OUTLINED_FUNCTION_4_43();
  *v5 = v4;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Double]>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_39;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  if (!v10)
    goto LABEL_7;
LABEL_6:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v22 = *v20;
    v21 = v20[1];
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v27);
    *v32 = v22;
    v32[1] = v21;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v27) = v23;
    ++*(_QWORD *)(v7 + 16);
    if (v10)
      goto LABEL_6;
LABEL_7:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_41;
    if (v16 >= v34)
    {
      swift_release();
      v17 = (_QWORD *)(v5 + 64);
      goto LABEL_34;
    }
    v17 = (_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v35 + 8 * v16);
    ++v13;
    if (!v18)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v34)
        goto LABEL_32;
      v18 = *(_QWORD *)(v35 + 8 * v13);
      if (!v18)
        break;
    }
LABEL_18:
    v10 = (v18 - 1) & v18;
  }
  v19 = v16 + 2;
  if (v19 < v34)
  {
    v18 = *(_QWORD *)(v35 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        v13 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_42;
        if (v13 >= v34)
          goto LABEL_32;
        v18 = *(_QWORD *)(v35 + 8 * v13);
        ++v19;
        if (v18)
          goto LABEL_18;
      }
    }
    v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
LABEL_34:
  if ((v36 & 1) != 0)
  {
    v33 = 1 << *(_BYTE *)(v5 + 32);
    if (v33 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v33 + 63) >> 6, v17);
    else
      *v17 = -1 << v33;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_39:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a4;
  a1[1] = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(_BYTE *a1, uint64_t a2, char a3, uint64_t a4)
{
  *a1 = a3;
  return outlined init with copy of Any(a4, a2);
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

BOOL specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(uint64_t *a1, uint64_t a2, int a3)
{
  return specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(*a1, a2, a3);
}

uint64_t outlined init with copy of MLHandActionClassifier.GraphCNNModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MLHandActionClassifier.GraphCNNModel(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MLHandActionClassifier.GraphCNNModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in Tensor.doubleArray()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in Tensor.doubleArray()(a1, a2, *(_QWORD *)(v2 + 16));
}

BOOL partial apply for specialized closure #1 in Layer.parameterKeyPath(for:)()
{
  return specialized closure #1 in Layer.parameterKeyPath(for:)();
}

BOOL partial apply for specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(uint64_t *a1)
{
  uint64_t v1;

  return specialized closure #1 in Layer.parameterKeyPath(forParameterWithId:)(a1, *(_QWORD *)(v1 + 16), *(_DWORD *)(v1 + 24));
}

BOOL closure #1 in Layer.parameterKeyPath(for:)specialized partial apply()
{
  return partial apply for specialized closure #1 in Layer.parameterKeyPath(for:)();
}

uint64_t closure #1 in Tensor.doubleArray()partial apply(uint64_t a1, uint64_t *a2)
{
  return partial apply for closure #1 in Tensor.doubleArray()(a1, a2);
}

uint64_t OUTLINED_FUNCTION_4_43()
{
  return swift_release();
}

void OUTLINED_FUNCTION_6_34()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_10_28()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t OUTLINED_FUNCTION_11_29@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(a1 + 63) >> 6, v1);
}

uint64_t OUTLINED_FUNCTION_15_23()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

void OUTLINED_FUNCTION_16_27(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * a1);
  *v5 = v3;
  v5[1] = v2;
}

void OUTLINED_FUNCTION_18_21(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_QWORD *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  *(_BYTE *)(*(_QWORD *)(v2 + 48) + a1) = v3;
}

uint64_t OUTLINED_FUNCTION_23_22()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_24_26()
{
  return 0;
}

void OUTLINED_FUNCTION_26_23(unint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

void OUTLINED_FUNCTION_27_28(unint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

void OUTLINED_FUNCTION_30_20(char a1@<W8>)
{
  _QWORD *v1;

  *v1 = -1 << a1;
}

uint64_t OUTLINED_FUNCTION_34_19()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_35_12()
{
  return Hasher.init(_seed:)();
}

unint64_t OUTLINED_FUNCTION_41_13()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_50_11()
{
  return String.hash(into:)();
}

Swift::Int OUTLINED_FUNCTION_52_9()
{
  return Hasher._finalize()();
}

Swift::Int OUTLINED_FUNCTION_59_11()
{
  return Hasher._finalize()();
}

uint64_t OUTLINED_FUNCTION_60_11()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_64_9()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_71_8()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

BOOL specialized Collection.isEmpty.getter()
{
  uint64_t v0;

  v0 = MLDataTable.size.getter();
  return OUTLINED_FUNCTION_35_13(v0);
}

{
  uint64_t v0;

  v0 = CMLSequence.size.getter();
  return OUTLINED_FUNCTION_35_13(v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_retain();
  v0 = CMLSequence.size.getter();
  specialized RandomAccessCollection<>.distance(from:to:)(0, v0);
  v2 = v1;
  swift_release();
  return v2 == 0;
}

{
  uint64_t v0;

  v0 = CMLSequence.size.getter();
  return OUTLINED_FUNCTION_35_13(v0);
}

{
  uint64_t v0;

  v0 = CMLDictionary.size.getter();
  return OUTLINED_FUNCTION_35_13(v0);
}

{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for DataFrame.Rows();
  lazy protocol witness table accessor for type DataFrame.Rows and conformance DataFrame.Rows();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  return v2 == v1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = OUTLINED_FUNCTION_48_1();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (OUTLINED_FUNCTION_48_1() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t i;
  uint64_t v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v5 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v3 = v6;
    v6 = v6 || v5 == v2;
    if (v6)
      return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized _UntypedColumn.init<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[5];
  uint64_t v18;

  v4 = MEMORY[0x22075BB18](0);
  if (!v4)
  {
    __break(1u);
LABEL_11:
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v5 = v4;
  v18 = v1;
  type metadata accessor for CMLSequence();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v5;
  *(_BYTE *)(inited + 24) = 1;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    type metadata accessor for CMLFeatureValue();
    v8 = (uint64_t *)(a1 + 40);
    v9 = MEMORY[0x24BEE0D00];
    do
    {
      v10 = *(v8 - 1);
      v11 = *v8;
      v17[3] = v9;
      v17[4] = &protocol witness table for String;
      v17[0] = v10;
      v17[1] = v11;
      __swift_project_boxed_opaque_existential_1(v17, v9);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      CMLFeatureValue.__allocating_init(_:)();
      if (v2)
        goto LABEL_11;
      v13 = v12;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
      CMLSequence.append(_:)(v13);
      v8 += 2;
      swift_release();
      swift_bridgeObjectRelease();
    }
    while (--v7);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for CMLColumn();
  v14 = CMLColumn.__allocating_init(_:type:)(inited, 2);
  v15 = v18;
  if (v2)
  {
    type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v18 + 16) = v14;
  }
  return v15;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = MEMORY[0x22075BB18](0);
  if (!v4)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v5 = v4;
  v38 = v1;
  type metadata accessor for CMLSequence();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v5;
  *(_BYTE *)(inited + 24) = 1;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = 0;
    v9 = MEMORY[0x24BEE1768];
    do
    {
      v10 = *(_QWORD *)(a1 + 8 * v8 + 32);
      v31 = v9;
      v32 = &protocol witness table for Int;
      v30[0] = v10;
      v11 = __swift_project_boxed_opaque_existential_1(v30, v9);
      specialized handling<A, B>(_:_:)(*v11, v12, v13, v14, v15, v16, v17, v18, v25, v26, v27, v28, v29, v30[0], v30[1], v30[2], v31, (uint64_t)v32, v33,
        v34,
        v35,
        v36,
        v37,
        v38,
        v39,
        v40,
        v41,
        v42,
        v43,
        v44);
      if (v2)
        goto LABEL_13;
      v20 = v19;
      if (!v19)
      {
        __break(1u);
        goto LABEL_12;
      }
      type metadata accessor for CMLFeatureValue();
      swift_initStackObject();
      v21 = CMLFeatureValue.init(rawValue:ownsValue:)(v20, 1);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
      CMLSequence.append(_:)(v21);
      ++v8;
      swift_release();
    }
    while (v7 != v8);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for CMLColumn();
  v22 = CMLColumn.__allocating_init(_:type:)(inited, 0);
  v23 = v38;
  if (v2)
  {
    type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v38 + 16) = v22;
  }
  return v23;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[3];
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[12];

  v3 = v1;
  v5 = MEMORY[0x22075BB18](0);
  if (!v5)
    goto LABEL_23;
  v6 = v5;
  v38 = type metadata accessor for CMLSequence();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v6;
  v39 = inited;
  *(_BYTE *)(inited + 24) = 1;
  v37 = *(_QWORD *)(a1 + 16);
  if (v37)
  {
    v34 = v1;
    type metadata accessor for CMLFeatureValue();
    v8 = 0;
    v36 = a1 + 32;
    v9 = MEMORY[0x24BEE1768];
    v35 = a1;
    while (v8 < *(_QWORD *)(a1 + 16))
    {
      v10 = *(_QWORD *)(v36 + 8 * v8);
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      v52[3] = v11;
      v52[4] = lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int], (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <A> [A]);
      v52[0] = v10;
      v12 = *__swift_project_boxed_opaque_existential_1(v52, v11);
      v52[11] = v10;
      swift_bridgeObjectRetain_n();
      v13 = MEMORY[0x22075BB18](0);
      if (!v13)
        goto LABEL_22;
      v14 = v13;
      v15 = swift_initStackObject();
      *(_QWORD *)(v15 + 16) = v14;
      *(_BYTE *)(v15 + 24) = 1;
      v16 = *(_QWORD *)(v12 + 16);
      if (v16)
      {
        v40 = v8;
        swift_bridgeObjectRetain();
        for (i = 0; i != v16; ++i)
        {
          v18 = *(_QWORD *)(v12 + 8 * i + 32);
          v46 = v9;
          v47 = &protocol witness table for Int;
          v45[0] = v18;
          v19 = __swift_project_boxed_opaque_existential_1(v45, v9);
          specialized handling<A, B>(_:_:)(*v19, v20, v21, v22, v23, v24, v25, v26, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44,
            v45[0],
            v45[1],
            v45[2],
            v46,
            (uint64_t)v47,
            v48,
            v49,
            v50,
            v51,
            v52[0],
            v52[1]);
          if (v2)
            goto LABEL_24;
          v28 = v27;
          if (!v27)
            goto LABEL_21;
          swift_initStackObject();
          v29 = CMLFeatureValue.init(rawValue:ownsValue:)(v28, 1);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v45);
          CMLSequence.append(_:)(v29);
          swift_release();
        }
        swift_bridgeObjectRelease();
        a1 = v35;
        v8 = v40;
      }
      CMLFeatureValue.__allocating_init(_:)(v15);
      if (v2)
        goto LABEL_24;
      v31 = v30;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
      CMLSequence.append(_:)(v31);
      ++v8;
      swift_release();
      swift_bridgeObjectRelease();
      if (v8 == v37)
      {
        swift_bridgeObjectRelease();
        v3 = v34;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    while (1)
    {
LABEL_24:
      swift_unexpectedError();
      __break(1u);
    }
  }
  swift_bridgeObjectRelease();
LABEL_16:
  type metadata accessor for CMLColumn();
  v32 = CMLColumn.__allocating_init(_:type:)(v39, 3);
  if (v2)
  {
    type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v32;
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  result = MEMORY[0x22075BB18](0);
  if (result)
  {
    v5 = result;
    v15 = v1;
    type metadata accessor for CMLSequence();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v5;
    *(_BYTE *)(inited + 24) = 1;
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      v8 = 0;
      while (1)
      {
        v9 = *(void **)(a1 + 8 * v8 + 32);
        v14[3] = &type metadata for MLDataValue.MultiArrayType;
        v14[4] = &protocol witness table for MLDataValue.MultiArrayType;
        v14[0] = v9;
        __swift_project_boxed_opaque_existential_1(v14, (uint64_t)&type metadata for MLDataValue.MultiArrayType);
        v10 = v9;
        v11 = MLDataValue.MultiArrayType.featureValue.getter();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
        CMLSequence.append(_:)(v11);
        if (v2)
          break;
        ++v8;
        swift_release();

        if (v7 == v8)
          goto LABEL_6;
      }
      swift_release();
      swift_setDeallocating();
      CMLFeatureValue.deinit();
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();

    }
    else
    {
LABEL_6:
      swift_bridgeObjectRelease();
      type metadata accessor for CMLColumn();
      v12 = CMLColumn.__allocating_init(_:type:)(inited, 6);
      if (!v2)
      {
        v13 = v15;
        *(_QWORD *)(v15 + 16) = v12;
        return v13;
      }
    }
    v13 = v15;
    type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance();
    return v13;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v1;
  result = MEMORY[0x22075BB18](0);
  if (result)
  {
    v6 = result;
    type metadata accessor for CMLSequence();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v6;
    *(_BYTE *)(inited + 24) = 1;
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
    {
      v19 = v3;
      v9 = lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [String : Double] and conformance <> [A : B], &demangling cache variable for type metadata for [String : Double], (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> [A : B]);
      swift_bridgeObjectRetain();
      v10 = 0;
      while (1)
      {
        v11 = *(_QWORD *)(a1 + 8 * v10 + 32);
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Double]);
        v18 = v9;
        v16[0] = v11;
        v12 = *__swift_project_boxed_opaque_existential_1(v16, v17);
        swift_bridgeObjectRetain_n();
        v13 = specialized Dictionary<>.featureValue.getter(v12);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
        CMLSequence.append(_:)(v13);
        if (v2)
          break;
        ++v10;
        swift_release();
        swift_bridgeObjectRelease();
        if (v8 == v10)
        {
          swift_bridgeObjectRelease();
          v3 = v19;
          goto LABEL_7;
        }
      }
      swift_release();
      swift_setDeallocating();
      CMLFeatureValue.deinit();
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = v19;
    }
    else
    {
LABEL_7:
      type metadata accessor for CMLColumn();
      v14 = CMLColumn.__allocating_init(_:type:)(inited, 4);
      if (!v2)
      {
        v15 = v14;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v3 + 16) = v15;
        return v3;
      }
    }
    swift_bridgeObjectRelease();
    type metadata accessor for _UntypedColumn();
    swift_deallocPartialClassInstance();
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = MEMORY[0x22075BB18](0);
  if (!v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = v4;
  type metadata accessor for CMLSequence();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v5;
  v12 = inited;
  *(_BYTE *)(inited + 24) = 1;
  if (*(_QWORD *)(a1 + 16))
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  specialized handling<A, B>(_:_:)(*(_QWORD *)(v12 + 16));
  if (!v2)
  {
    v8 = v7;
    if (v7)
    {
      swift_setDeallocating();
      CMLFeatureValue.deinit();
      swift_deallocClassInstance();
      type metadata accessor for CMLColumn();
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v8;
      v10 = v1;
      *(_QWORD *)(v1 + 16) = v9;
      return v10;
    }
LABEL_10:
    __break(1u);
    JUMPOUT(0x21AF1DC60);
  }
  swift_setDeallocating();
  CMLFeatureValue.deinit();
  swift_deallocClassInstance();
  type metadata accessor for _UntypedColumn();
  v10 = v1;
  swift_deallocPartialClassInstance();
  return v10;
}

void static MLClassifierMetrics.__evaluation(on:labelColumn:predictionColumn:classes:)(char **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  id v25;
  char *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  id *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char **v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  Swift::Int v63;
  uint64_t v64;
  Swift::Int v65;
  uint64_t v66;
  char **v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  char *v86;
  char v87;
  BOOL v88;
  char v89;
  void **v90;
  uint64_t v91;
  uint64_t v92;
  Swift::String v94;
  char *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  Swift::Int v153;
  Swift::Int v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  int64_t v168;
  _QWORD *v169;
  uint64_t v170;
  char *v171;
  id v172;
  char v173;
  _QWORD *v174;
  char v175;
  char *v176;

  v12 = *a1;
  v13 = *((unsigned __int8 *)a1 + 8);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  v168 = 1;
  *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(inited + 32) = a4;
  *(_QWORD *)(inited + 40) = a5;
  v176 = v12;
  v171 = v12;
  LOBYTE(v172) = v13;
  swift_bridgeObjectRetain();
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v171, 0x6974636964657250, (void *)0xEA00000000006E6FLL, inited);
  if (v7)
  {
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    return;
  }
  v165 = a6;
  v161 = a7;
  v162 = a4;
  v171 = v176;
  LOBYTE(v172) = v13;
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v16 + 32) = a2;
  *(_QWORD *)(v16 + 40) = a3;
  OUTLINED_FUNCTION_23_3();
  static _ValidationUtilities.validateTableFormat(table:context:columns:)((uint64_t)&v171, 0x6C6562614CLL, (void *)0xE500000000000000, v16);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  v171 = v176;
  LOBYTE(v172) = v13;
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_21AFE7DA0;
  *(_QWORD *)(v17 + 32) = a2;
  *(_QWORD *)(v17 + 40) = a3;
  LOBYTE(v169) = 2;
  LOBYTE(v174) = 4;
  OUTLINED_FUNCTION_23_3();
  static _ValidationUtilities.validateTableTypes(table:featureColumns:featureType:labelColumn:labelType:)((uint64_t *)&v171, (_QWORD *)v17, (char *)&v169, a4, a5, (char *)&v174);
  v160 = v14;
  v18 = v176;
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  v164 = *(_QWORD *)(a6 + 16);
  if (!v164)
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_12_32();
    OUTLINED_FUNCTION_44_2(v44, v45);
    *a7 = v46;
    type metadata accessor for MLClassifierMetrics.Contents(0);
    OUTLINED_FUNCTION_23_23();
    return;
  }
  v155 = (void *)a5;
  v171 = v18;
  LOBYTE(v172) = v13;
  outlined copy of Result<_DataTable, Error>(v18, v13);
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v169);
  v19 = v169;
  v174 = v169;
  v175 = v170;
  MLUntypedColumn.dropDuplicates()(&v171);
  OUTLINED_FUNCTION_24_27(v19);
  if ((v172 & 1) != 0
    || (v20 = v171,
        OUTLINED_FUNCTION_4_21(),
        v21 = CMLColumn.size.getter(),
        v163 = v20,
        OUTLINED_FUNCTION_102(v20),
        v21 < 0))
  {
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  HIDWORD(v157) = v13;
  if (v21)
  {
    v22 = 0;
    v156 = a6 + 72;
    v158 = 0x800000021AFF5590;
    v159 = v21;
    v23 = v18;
    v24 = v161;
    while (1)
    {
      if (v22 == v21)
      {
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
        JUMPOUT(0x21AED5AF8);
      }
      OUTLINED_FUNCTION_14_26();
      _UntypedColumn.valueAtIndex(index:)(v22, (uint64_t)&v171);
      OUTLINED_FUNCTION_102(v163);
      v26 = v171;
      v25 = v172;
      if (v173 != 2)
      {
        outlined consume of MLDataValue(v171, v172, v173);
        __break(1u);
        JUMPOUT(0x21AED5B0CLL);
      }
      v27 = *(char **)(v165 + 32) == v171 && v172 == *(id *)(v165 + 40);
      if (!v27 && (OUTLINED_FUNCTION_6_35() & 1) == 0)
      {
        if (v164 == 1)
          goto LABEL_20;
        v30 = *(char **)(v165 + 48) == v26 && v25 == *(id *)(v165 + 56);
        if (!v30 && (OUTLINED_FUNCTION_6_35() & 1) == 0)
          break;
      }
      OUTLINED_FUNCTION_17_22(v26, v25);
LABEL_17:
      if (++v22 == v21)
        goto LABEL_47;
    }
    if (v164 == 2)
    {
LABEL_20:
      v28 = swift_initStackObject();
      *(_OWORD *)(v28 + 16) = xmmword_21AFE7DA0;
      *(_QWORD *)(v28 + 32) = v26;
      *(_QWORD *)(v28 + 40) = v25;
      type metadata accessor for _UntypedColumn();
      OUTLINED_FUNCTION_9_1();
      outlined copy of Result<_DataTable, Error>(v23, BYTE4(v157) & 1);
      v29 = swift_bridgeObjectRetain();
      v35 = (void *)specialized _UntypedColumn.init<A>(_:)(v29);
      if ((v157 & 0x100000000) != 0)
      {
        v171 = v23;
        v36 = v23;
        OUTLINED_FUNCTION_28_23();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v37 = _getErrorEmbeddedNSError<A>(_:)();
        if (v37)
        {
          v38 = v37;
          OUTLINED_FUNCTION_103_4();
        }
        else
        {
          v38 = OUTLINED_FUNCTION_49_0();
          *v40 = v171;
        }
        v43 = 1;
        outlined consume of Result<_DataTable, Error>(v23, 1);
        OUTLINED_FUNCTION_24_27(v35);
        OUTLINED_FUNCTION_80();
      }
      else
      {
        OUTLINED_FUNCTION_35_10();
        outlined copy of Result<_DataTable, Error>(v35, 0);
        v39 = swift_retain();
        CMLTable.filtered(_:columnName:isExcluding:)(v39, a2, (uint64_t)a3, 1);
        v42 = v41;
        OUTLINED_FUNCTION_102(v35);
        swift_release();
        type metadata accessor for _DataTable();
        OUTLINED_FUNCTION_9_1();
        v38 = (uint64_t)_DataTable.init(impl:)(v42);
        OUTLINED_FUNCTION_9_29();
        v43 = 0;
      }
      OUTLINED_FUNCTION_24_27(v23);
      OUTLINED_FUNCTION_24_27(v23);
      v23 = (char *)v38;
      HIDWORD(v157) = v43;
    }
    else
    {
      v31 = (id *)(v165 + 72);
      v32 = 2;
      while (1)
      {
        v33 = v32 + 1;
        if (__OFADD__(v32, 1))
          goto LABEL_139;
        v34 = *(v31 - 1) == v26 && v25 == *v31;
        if (v34 || (OUTLINED_FUNCTION_6_35() & 1) != 0)
          break;
        v31 += 2;
        ++v32;
        if (v33 == v164)
          goto LABEL_20;
      }
      OUTLINED_FUNCTION_17_22(v26, v25);
    }
    v24 = v161;
    v21 = v159;
    goto LABEL_17;
  }
  v23 = v18;
  v24 = v161;
LABEL_47:
  v171 = v23;
  v47 = BYTE4(v157);
  v48 = BYTE4(v157) & 1;
  LOBYTE(v172) = BYTE4(v157) & 1;
  if (!MLDataTable.size.getter())
  {
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    v106 = OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_12_32();
    OUTLINED_FUNCTION_44_2(v108, v107 + 58);
    OUTLINED_FUNCTION_34_20(v109, v110, v111, v112, v113, v114, v115, v116, v149, v150, v152, v153, v154, (uint64_t)v155, v156, v157, v158, v159, v160,
      (uint64_t)v161,
      v162,
      v163);
    outlined consume of Result<_DataTable, Error>(v23, v48);
    *v24 = v106;
    type metadata accessor for MLClassifierMetrics.Contents(0);
LABEL_126:
    swift_storeEnumTagMultiPayload();
    return;
  }
  LOBYTE(v169) = BYTE4(v157) & 1;
  outlined copy of Result<_DataTable, Error>(v23, v48);
  v49 = 0;
  v50 = v165;
  v151 = v165 + 72;
  v176 = v23;
  if ((v157 & 0x100000000) != 0)
    goto LABEL_53;
  while (2)
  {
    OUTLINED_FUNCTION_36_17();
    v51 = CMLTable.rows()();
    if (v52 || (v53 = v51, v154 = CMLTable.columns()(), v54))
    {
      while (1)
      {
LABEL_145:
        swift_unexpectedError();
        __break(1u);
      }
    }
    OUTLINED_FUNCTION_102(v23);
    if (v49 == v53)
    {
      v117 = v23;
      v118 = 0;
      goto LABEL_128;
    }
LABEL_59:
    OUTLINED_FUNCTION_35_10();
    swift_retain();
    CMLTable.row(at:)(v49);
    v160 = v58;
    OUTLINED_FUNCTION_4_2();
    OUTLINED_FUNCTION_35_10();
    _DataTable.columnNames.getter(&v171);
    OUTLINED_FUNCTION_102(v23);
    v59 = v171;
    OUTLINED_FUNCTION_35_10();
    v60 = _DataTable.columnIndexes.getter();
    outlined consume of Result<_DataTable, Error>(v23, 0);
    OUTLINED_FUNCTION_102(v23);
    if ((v47 & 1) != 0)
    {
      OUTLINED_FUNCTION_21_23();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v61 = _getErrorEmbeddedNSError<A>(_:)();
      if (v61)
      {
        v62 = (void *)v61;
        OUTLINED_FUNCTION_103_4();
      }
      else
      {
        v62 = (void *)OUTLINED_FUNCTION_49_0();
        *v67 = v171;
      }
      OUTLINED_FUNCTION_103_4();
      outlined consume of Result<_RegressorMetrics, Error>(v62, v153, 1);
      v65 = 0;
    }
    else
    {
      OUTLINED_FUNCTION_36_17();
      v63 = CMLTable.rows()();
      if (v64)
        goto LABEL_145;
      v65 = v63;
      v153 = CMLTable.columns()();
      if (v66)
        goto LABEL_145;
      OUTLINED_FUNCTION_102(v23);
    }
    if (v49 >= v65)
      goto LABEL_138;
    if (!*(_QWORD *)(v60 + 16))
      goto LABEL_118;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v68 = specialized __RawDictionaryStorage.find<A>(_:)(v162, (uint64_t)v155);
    if ((v69 & 1) == 0)
    {
      OUTLINED_FUNCTION_30_21();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_30_21();
      swift_bridgeObjectRelease();
      goto LABEL_120;
    }
    v70 = *(_QWORD *)(*(_QWORD *)(v60 + 56) + 8 * v68);
    swift_bridgeObjectRelease();
    swift_retain_n();
    CMLSequence.value(at:)(v70);
    OUTLINED_FUNCTION_184();
    MLDataValue.init(_:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_30_21();
    v71 = v171;
    if (v173 != 4)
    {
      outlined consume of MLDataValue(v171, v172, v173);
LABEL_118:
      OUTLINED_FUNCTION_184();
      swift_bridgeObjectRelease();
      goto LABEL_119;
    }
    v152 = v60;
    if (*((_QWORD *)v171 + 2) != v164)
    {
      outlined consume of MLDataValue(v171, v172, 4);
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_12_32();
      OUTLINED_FUNCTION_44_2(v139, v138 + 89);
      OUTLINED_FUNCTION_184();
      OUTLINED_FUNCTION_153();
      OUTLINED_FUNCTION_79();
      outlined consume of Result<_DataTable, Error>(v163, 0);
      outlined consume of Result<_DataTable, Error>(v23, BYTE4(v157) & 1);
      OUTLINED_FUNCTION_15_24(v140, v141, v142, v143, v144, v145, v146, v147, v149, v151, v60, v153, v154, (uint64_t)v155, v156, v157, v158, v159, v160,
        v161,
        v162,
        (uint64_t)v163,
        v164,
        v165,
        (uint64_t)a3,
        a2,
        v168,
        2,
        (char)v169);
      goto LABEL_126;
    }
    v158 = 0;
    v159 = (uint64_t)v59;
    v156 = v49;
    v72 = 0;
    v73 = v171 + 64;
    v74 = 1 << v171[32];
    if (v74 < 64)
      v75 = ~(-1 << v74);
    else
      v75 = -1;
    v76 = v75 & *((_QWORD *)v171 + 8);
    v168 = (unint64_t)(v74 + 63) >> 6;
LABEL_76:
    while (v76)
    {
      v77 = __clz(__rbit64(v76));
      v76 &= v76 - 1;
      v78 = v77 | (v72 << 6);
LABEL_92:
      v82 = *((_QWORD *)v71 + 6) + 24 * v78;
      if (*(_BYTE *)(v82 + 16) == 2)
      {
        v83 = *(void **)v82;
        v84 = *(void **)(v82 + 8);
        if (*(_QWORD *)(v50 + 32) != *(_QWORD *)v82 || v84 != *(void **)(v50 + 40))
        {
          v86 = v71;
          v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v71 = v86;
          if ((v87 & 1) == 0)
          {
            if (v164 == 1)
              goto LABEL_124;
            v50 = v165;
            v88 = *(void **)(v165 + 48) == v83 && v84 == *(void **)(v165 + 56);
            v23 = v176;
            if (!v88)
            {
              v89 = OUTLINED_FUNCTION_18_22();
              v71 = v86;
              if ((v89 & 1) == 0)
              {
                if (v164 == 2)
                {
LABEL_124:
                  v171 = 0;
                  v172 = (id)0xE000000000000000;
                  outlined copy of MLDataValue(v83, v84, 2);
                  _StringGuts.grow(_:)(93);
                  OUTLINED_FUNCTION_19_26(0xD00000000000002ALL, (uint64_t)"The provided table has row(s) with label '");
                  outlined copy of MLDataValue(v83, v84, 2);
                  v94._countAndFlagsBits = (uint64_t)v83;
                  v94._object = v84;
                  String.append(_:)(v94);
                  OUTLINED_FUNCTION_17_22(v83, v84);
                  OUTLINED_FUNCTION_19_26(0xD000000000000031, (uint64_t)"'. This label is not in the model's set of labels");
                  v95 = v171;
                  v96 = v172;
                  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
                  OUTLINED_FUNCTION_49_0();
                  *(_QWORD *)v97 = v95;
                  *(_QWORD *)(v97 + 8) = v96;
                  *(_OWORD *)(v97 + 16) = 0u;
                  *(_OWORD *)(v97 + 32) = 0u;
                  *(_BYTE *)(v97 + 48) = 0;
                  OUTLINED_FUNCTION_17_22(v83, v84);
                  swift_release();
                  OUTLINED_FUNCTION_153();
                  swift_release();
                  outlined consume of Result<_DataTable, Error>(v163, 0);
                  outlined consume of Result<_DataTable, Error>(v176, BYTE4(v157) & 1);
                  v98 = swift_release();
                  OUTLINED_FUNCTION_15_24(v98, v99, v100, v101, v102, v103, v104, v105, v149, v151, v152, v153, v154, (uint64_t)v155, v156, v157, 0, v159, v160,
                    v161,
                    v162,
                    (uint64_t)v163,
                    v164,
                    v165,
                    (uint64_t)a3,
                    a2,
                    v168,
                    2,
                    (char)v169);
                  OUTLINED_FUNCTION_23_23();
                  return;
                }
                v90 = (void **)(v165 + 72);
                v91 = 2;
                while (1)
                {
                  v92 = v91 + 1;
                  if (__OFADD__(v91, 1))
                    goto LABEL_137;
                  if (*(v90 - 1) == v83 && v84 == *v90)
                    break;
                  if ((OUTLINED_FUNCTION_18_22() & 1) != 0)
                  {
                    v23 = v176;
                    v50 = v165;
                    v71 = v86;
                    goto LABEL_76;
                  }
                  v90 += 2;
                  ++v91;
                  v71 = v86;
                  if (v92 == v164)
                    goto LABEL_124;
                }
                v23 = v176;
                v50 = v165;
              }
            }
          }
        }
      }
    }
    v79 = v72 + 1;
    v49 = v156;
    if (__OFADD__(v72, 1))
      goto LABEL_136;
    if (v79 < v168)
    {
      v80 = *(_QWORD *)&v73[8 * v79];
      ++v72;
      if (v80)
        goto LABEL_91;
      v72 = v79 + 1;
      if (v79 + 1 >= v168)
        goto LABEL_123;
      v80 = *(_QWORD *)&v73[8 * v72];
      if (v80)
        goto LABEL_91;
      v72 = v79 + 2;
      if (v79 + 2 >= v168)
        goto LABEL_123;
      v80 = *(_QWORD *)&v73[8 * v72];
      if (v80)
      {
LABEL_91:
        v76 = (v80 - 1) & v80;
        v78 = __clz(__rbit64(v80)) + (v72 << 6);
        goto LABEL_92;
      }
      v81 = v79 + 3;
      if (v81 < v168)
      {
        v80 = *(_QWORD *)&v73[8 * v81];
        if (!v80)
        {
          while (1)
          {
            v72 = v81 + 1;
            if (__OFADD__(v81, 1))
              goto LABEL_140;
            if (v72 >= v168)
              goto LABEL_123;
            v80 = *(_QWORD *)&v73[8 * v72];
            ++v81;
            if (v80)
              goto LABEL_91;
          }
        }
        v72 = v81;
        goto LABEL_91;
      }
LABEL_123:
      OUTLINED_FUNCTION_27_29();
      OUTLINED_FUNCTION_153();
      OUTLINED_FUNCTION_184();
LABEL_119:
      swift_release();
      goto LABEL_120;
    }
    OUTLINED_FUNCTION_27_29();
    OUTLINED_FUNCTION_153();
    swift_release();
    OUTLINED_FUNCTION_4_2();
LABEL_120:
    ++v49;
    v47 = (char)v169;
    if ((v169 & 1) == 0)
      continue;
    break;
  }
LABEL_53:
  OUTLINED_FUNCTION_21_23();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v55 = _getErrorEmbeddedNSError<A>(_:)();
  if (v55)
  {
    v56 = (void *)v55;
    v118 = 1;
    OUTLINED_FUNCTION_103_4();
  }
  else
  {
    v56 = (void *)OUTLINED_FUNCTION_49_0();
    *v57 = v171;
    v118 = (char)v169;
  }
  outlined consume of Result<_DataTable, Error>(v23, 1);
  outlined consume of Result<_RegressorMetrics, Error>(v56, v154, 1);
  if (v49)
  {
    if ((v118 & 1) != 0)
    {
      OUTLINED_FUNCTION_28_23();
      OUTLINED_FUNCTION_17_3();
    }
    goto LABEL_59;
  }
  v117 = v23;
LABEL_128:
  outlined consume of Result<_DataTable, Error>(v117, v118);
  v119 = MEMORY[0x22075BB9C](0);
  if (!v119)
    goto LABEL_143;
  v120 = v119;
  type metadata accessor for CMLParameters();
  *(_QWORD *)(swift_initStackObject() + 16) = v120;
  if ((v157 & 0x100000000) != 0)
  {
    outlined copy of Result<_DataTable, Error>(v117, 1);
    swift_willThrow(v148);
    goto LABEL_145;
  }
  v121 = v117[2];
  swift_retain();
  CMLParameters.add(key:table:)(4u, v121);
  swift_release();
  type metadata accessor for CMLFeatureValue();
  OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_21_15();
  CMLParameters.add(key:featureValue:)(5u, v122);
  swift_release();
  OUTLINED_FUNCTION_21_15();
  CMLParameters.add(key:featureValue:)(0x1Du, v123);
  swift_release();
  v169 = v117;
  LOBYTE(v170) = 0;
  MLDataTable.subscript.getter(v162, v155, (uint64_t)&v171);
  v124 = v171;
  if ((v172 & 1) == 0)
  {
    v135 = *((_QWORD *)v171 + 2);
    swift_retain();
    CMLParameters.add(key:column:)(0x1Cu, v135);
    swift_release();
    OUTLINED_FUNCTION_102(v124);
    v136 = MEMORY[0x22075BAE8](0);
    if (v136)
    {
      v137 = v136;
      type metadata accessor for CMLDictionary();
      *(_QWORD *)(swift_initStackObject() + 16) = v137;
      OUTLINED_FUNCTION_17_3();
    }
LABEL_144:
    __break(1u);
    JUMPOUT(0x21AED5B24);
  }
  outlined consume of Result<_DataTable, Error>(v171, 1);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_12_32();
  *(_QWORD *)v126 = v125 + 47;
  *(_QWORD *)(v126 + 8) = 0x800000021AFF54B0;
  *(_OWORD *)(v126 + 16) = 0u;
  *(_OWORD *)(v126 + 32) = 0u;
  *(_BYTE *)(v126 + 48) = 1;
  swift_willThrow(0.0);
  swift_setDeallocating();
  v127 = tc_v1_release();
  OUTLINED_FUNCTION_34_20(v127, v128, v129, v130, v131, v132, v133, v134, v149, v151, v152, v153, v154, (uint64_t)v155, v156, v157, v158, v159, v160,
    (uint64_t)v161,
    v162,
    v163);
  OUTLINED_FUNCTION_102(v117);
}

void static MLRegressorMetrics.__evaluation(on:targetColumn:predictionColumn:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  id v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void *v49;
  char v50;

  v11 = *(id *)a1;
  v12 = *(_BYTE *)(a1 + 8);
  v46 = *(_QWORD *)a1;
  outlined copy of Result<_DataTable, Error>(*(id *)a1, v12);
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v47);
  outlined consume of Result<_DataTable, Error>(v11, v12);
  OUTLINED_FUNCTION_7_33(v13, v14, v15, v16, v17, v18, v19, v20, v46, v12, v47, v48);
  v21 = v49;
  v22 = v50;
  if ((v50 & 1) != 0
    || (OUTLINED_FUNCTION_4_21(),
        _UntypedColumn.type.getter(&v47),
        outlined consume of Result<_DataTable, Error>(v21, 0),
        v47 != 1))
  {
    outlined consume of Result<_DataTable, Error>(v21, v22);
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_20_21();
    OUTLINED_FUNCTION_18_0(v40, v41);
  }
  else
  {
    outlined copy of Result<_DataTable, Error>(v11, v12);
    MLDataTable.subscript.getter(a4, a5, (uint64_t)&v47);
    outlined consume of Result<_DataTable, Error>(v11, v12);
    OUTLINED_FUNCTION_7_33(v23, v24, v25, v26, v27, v28, v29, v30, (uint64_t)v11, v12, v47, v48);
    v31 = v49;
    v32 = v50;
    if ((v50 & 1) != 0
      || (OUTLINED_FUNCTION_14_26(),
          _UntypedColumn.type.getter(&v47),
          outlined consume of Result<_DataTable, Error>(v31, 0),
          v47 != 1))
    {
      outlined consume of Result<_DataTable, Error>(v31, v32);
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_20_21();
      OUTLINED_FUNCTION_18_0(v43, v42 + 4);
    }
    else
    {
      OUTLINED_FUNCTION_4_21();
      v33 = specialized Array<A>.init(_:)(v21, 0);
      OUTLINED_FUNCTION_14_26();
      v34 = specialized Array<A>.init(_:)(v31, 0);
      static _MetricUtilities.rmse(target:prediction:)(v33, v34);
      v36 = v35;
      v37 = static _MetricUtilities.maximumError(target:prediction:)(v33, v34);
      v39 = v38;
      OUTLINED_FUNCTION_80();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
      {
        OUTLINED_FUNCTION_102(v21);
        OUTLINED_FUNCTION_102(v31);
        *(_QWORD *)a6 = v37;
        *(_QWORD *)(a6 + 8) = v36;
        *(_BYTE *)(a6 + 16) = 0;
        return;
      }
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      OUTLINED_FUNCTION_20_21();
      OUTLINED_FUNCTION_18_0(v45, v44 + 23);
      OUTLINED_FUNCTION_102(v31);
    }
    OUTLINED_FUNCTION_102(v21);
  }
}

uint64_t specialized Dictionary<>.featureValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  char v39;
  uint64_t v40;
  _UNKNOWN **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = MEMORY[0x22075BAE8](0);
  if (!v2)
    goto LABEL_28;
  v3 = v2;
  type metadata accessor for CMLDictionary();
  *(_QWORD *)(swift_initStackObject() + 16) = v3;
  v31 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v32 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = MEMORY[0x24BEE13C8];
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      while (1)
      {
        swift_unexpectedError();
        __break(1u);
      }
    }
    if (v7 >= v32)
      goto LABEL_24;
    v12 = *(_QWORD *)(v31 + 8 * v7);
    if (v12)
      goto LABEL_17;
    v13 = v7 + 1;
    if (v7 + 1 >= v32)
      goto LABEL_24;
    v12 = *(_QWORD *)(v31 + 8 * v13);
    if (!v12)
    {
      v13 = v7 + 2;
      if (v7 + 2 >= v32)
        goto LABEL_24;
      v12 = *(_QWORD *)(v31 + 8 * v13);
      if (!v12)
        break;
    }
LABEL_16:
    v7 = v13;
LABEL_17:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_18:
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    v40 = v8;
    v41 = &protocol witness table for Double;
    v38[0] = v15;
    __swift_project_boxed_opaque_existential_1(v38, v8);
    v16 = swift_bridgeObjectRetain();
    specialized handling<A, B>(_:_:)(v16, v17, v18, v19, v20, v21, v22, v23, v30, v31, v32, v33, v34, v35, v36, v37, v38[0], v38[1], v39,
      v40,
      (uint64_t)v41,
      v42,
      v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      v50);
    v25 = v24;
    if (!v24)
      goto LABEL_27;
    type metadata accessor for CMLFeatureValue();
    swift_initStackObject();
    CMLFeatureValue.init(rawValue:ownsValue:)(v25, 1);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v38);
    CMLDictionary.add(key:value:)(v14);
    swift_release();
    swift_bridgeObjectRelease();
  }
  v13 = v7 + 3;
  if (v7 + 3 < v32)
  {
    v12 = *(_QWORD *)(v31 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        v7 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_26;
        if (v7 >= v32)
          goto LABEL_24;
        v12 = *(_QWORD *)(v31 + 8 * v7);
        ++v13;
        if (v12)
          goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
LABEL_24:
  swift_release();
  type metadata accessor for CMLFeatureValue();
  v26 = swift_retain();
  CMLFeatureValue.__allocating_init(_:)(v26);
  v28 = v27;
  swift_setDeallocating();
  tc_v1_release();
  return v28;
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)(uint64_t a1)
{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, specialized _UntypedColumn.init<A>(_:));
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, specialized _UntypedColumn.init<A>(_:));
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, specialized _UntypedColumn.init<A>(_:));
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, specialized _UntypedColumn.init<A>(_:));
}

{
  return specialized closure #1 in MLUntypedColumn.init<A>(_:)(a1, specialized _UntypedColumn.init<A>(_:));
}

uint64_t specialized closure #1 in MLUntypedColumn.init<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  type metadata accessor for _UntypedColumn();
  OUTLINED_FUNCTION_9_1();
  v3 = swift_bridgeObjectRetain();
  return a2(v3);
}

void partial apply for closure #1 in CMLCallFunction(name:arguments:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CMLCallFunction(name:arguments:)(a1, v1);
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3;
    result = MEMORY[0x22075B938](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_6_35()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_7_33(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  a9 = a11;
  a10 = a12;
  return MLUntypedColumn.init(doubles:)((uint64_t)&a9);
}

uint64_t OUTLINED_FUNCTION_9_29()
{
  void *v0;
  void *v1;

  outlined consume of Result<_DataTable, Error>(v0, 0);
  outlined consume of Result<_DataTable, Error>(v1, 0);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_10_29()
{
  uint64_t v0;

  return v0;
}

id OUTLINED_FUNCTION_14_26()
{
  void *v0;

  return outlined copy of Result<_DataTable, Error>(v0, 0);
}

uint64_t OUTLINED_FUNCTION_15_24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  uint64_t v30;

  outlined consume of Result<_DataTable, Error>(v29, a29);
  *a20 = v30;
  return type metadata accessor for MLClassifierMetrics.Contents(0);
}

void OUTLINED_FUNCTION_17_22(void *a1, void *a2)
{
  outlined consume of MLDataValue(a1, a2, 2);
}

uint64_t OUTLINED_FUNCTION_18_22()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_19_26(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

id OUTLINED_FUNCTION_21_23()
{
  void *v0;

  outlined copy of Result<_DataTable, Error>(v0, 1);
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_23()
{
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_24_27(void *a1)
{
  char v1;

  outlined consume of Result<_DataTable, Error>(a1, v1);
}

uint64_t OUTLINED_FUNCTION_27_29()
{
  return swift_release();
}

id OUTLINED_FUNCTION_28_23()
{
  void *v0;

  return outlined copy of Result<_DataTable, Error>(v0, 1);
}

uint64_t OUTLINED_FUNCTION_30_21()
{
  return swift_release_n();
}

void OUTLINED_FUNCTION_34_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  outlined consume of Result<_DataTable, Error>(a22, 0);
}

BOOL OUTLINED_FUNCTION_35_13(uint64_t a1)
{
  return a1 == 0;
}

uint64_t OUTLINED_FUNCTION_36_17()
{
  return swift_retain();
}

Swift::Int specialized FeatureVectorizer.Transformer.exportEncoders()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized FeatureVectorizer.Transformer.exportEncoders()(a1, a2, a3);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n;
  Swift::Int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  Swift::Int i;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  _QWORD v60[3];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::Int v71;
  uint64_t v72;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  Swift::Int v85[14];
  uint64_t v86;
  Swift::String v87;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FeatureDescription?);
  OUTLINED_FUNCTION_3();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v10);
  v11 = type metadata accessor for FeatureVectorizerConfiguration.Input();
  v81 = *(_QWORD *)(v11 - 8);
  v82 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  v80 = v13;
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v15);
  v77 = type metadata accessor for FeatureDescription();
  v16 = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_211();
  OUTLINED_FUNCTION_28_3(v19);
  v65 = type metadata accessor for FeatureType.ShapedArrayParameters.DataType();
  v64 = *(_QWORD *)(v65 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v21);
  type metadata accessor for FeatureType();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v23);
  v62 = type metadata accessor for ModelKind();
  v61 = *(_QWORD *)(v62 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28_3(v25);
  v26 = type metadata accessor for Model();
  v70 = *(_QWORD *)(v26 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_65_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)v60 - v32;
  Model.init()();
  v74 = v33;
  Model.specificationVersion.setter();
  v34 = OUTLINED_FUNCTION_195();
  ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(v34);
  OUTLINED_FUNCTION_101();
  v36 = specialized Set.init<A>(_:)(ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n);
  v85[13] = v36;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31_2();
  specialized Set.contains(_:)(a2, a3, v36);
  v75 = a2;
  v76 = a3;
  v37 = a3;
  v68 = v26;
  v66 = v9;
  v69 = a1;
  if ((v38 & 1) != 0)
  {
    v39 = v16;
    OUTLINED_FUNCTION_50_9();
    for (i = 1; ; ++i)
    {
      OUTLINED_FUNCTION_48_13((uint64_t)&v86);
      OUTLINED_FUNCTION_13_37();
      v85[9] = i;
      v87._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      OUTLINED_FUNCTION_41_14(v87);
      OUTLINED_FUNCTION_104();
      if (__OFADD__(i, 1))
      {
        __break(1u);
        JUMPOUT(0x21AED7478);
      }
      a2 = v85[0];
      v37 = v85[1];
      OUTLINED_FUNCTION_199();
      specialized Set.contains(_:)(a2, v37, v36);
      v42 = v41;
      OUTLINED_FUNCTION_104();
      if ((v42 & 1) == 0)
        break;
      OUTLINED_FUNCTION_104();
    }
    a1 = v69;
    v16 = v39;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_199();
  v60[0] = a2;
  v60[1] = v37;
  specialized Set._Variant.insert(_:)(v85, a2, v37);
  OUTLINED_FUNCTION_57_9();
  if (*(_QWORD *)(a1 + 16))
  {
    v72 = a1 + 32;
    OUTLINED_FUNCTION_195();
    v84 = 0;
    v43 = MEMORY[0x24BEE4AF8];
    v71 = MEMORY[0x24BEE4AF8];
    v67 = v16;
    OUTLINED_FUNCTION_53_16();
    v79 = v43;
    v45 = v72 + 32 * v44;
    v46 = *(_QWORD *)v45;
    v47 = *(_QWORD *)(v45 + 8);
    v48 = *(_QWORD *)(v45 + 16);
    v49 = *(unsigned __int8 *)(v45 + 24);
    v78 = v44 + 1;
    swift_bridgeObjectRetain();
    outlined copy of ColumnDescriptor.ColumnTypeDescriptor(v48, v49);
    *(_QWORD *)&v83 = v46;
    ColumnDescriptor.featureDescription.getter(v46, v47, v48, v49);
    __asm { BR              X8 }
  }
  v84 = 0;
  v71 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v50 = v60[2];
  FeatureVectorizerConfiguration.init(inputs:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v61 + 104))(v50, *MEMORY[0x24BE63248], v62);
  v51 = (uint64_t)v74;
  Model.kind.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  v52 = OUTLINED_FUNCTION_7_34();
  v83 = xmmword_21AFE7DA0;
  *(_OWORD *)(v52 + 16) = xmmword_21AFE7DA0;
  v53 = v64;
  v54 = v63;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v64 + 104))(v63, *MEMORY[0x24BE624D0], v65);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = v83;
  *(_QWORD *)(v55 + 32) = v84;
  static FeatureType.shapedArray(dataType:shape:optional:)();
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_12_7(v54, *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8));
  OUTLINED_FUNCTION_31_19();
  Model.outputs.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
  v56 = v70;
  v57 = OUTLINED_FUNCTION_7_34();
  *(_OWORD *)(v57 + 16) = v83;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v57 + v51, v51, v68);
  v85[0] = v71;
  specialized Array.append<A>(contentsOf:)(v57);
  v58 = v85[0];
  OUTLINED_FUNCTION_12_7(v51, *(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
  return v58;
}

void MLLinearRegressor.Model.export(internalMetadata:)(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  Swift::Int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v68 = a1;
  v4 = type metadata accessor for ModelKind();
  v67 = *(_QWORD *)(v4 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v66 = v6;
  v64 = type metadata accessor for FeatureType();
  v62 = *(_QWORD *)(v64 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_64();
  v63 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Model?);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_64();
  v61 = v10;
  v11 = type metadata accessor for Model();
  v69 = *(_QWORD *)(v11 - 8);
  v70 = v11;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_208();
  v65 = v13;
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_211();
  v72 = v15;
  v16 = type metadata accessor for URL.DirectoryHint();
  v74 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)&v75 = v16;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_64();
  v73 = v18;
  v19 = type metadata accessor for UUID();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_54_0();
  v78 = type metadata accessor for URL();
  v76 = *(uint64_t (**)(uint64_t, uint64_t))(v78 - 8);
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_208();
  v71 = v22;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v57 - v24;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v57 - v27;
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_211();
  v77 = v30;
  v31 = v1[2];
  if (!v31)
    goto LABEL_9;
  v32 = specialized FeatureVectorizer.Transformer.exportEncoders()(v1[2], v1[3], v1[4]);
  if (v2)
    return;
  v57 = v31;
  v60 = v32;
  v59 = v1;
  v58 = v4;
  v33 = (void *)objc_opt_self();
  v34 = objc_msgSend(v33, sel_defaultManager);
  NSFileManager.createTemporaryModelDirectory()();
  if (v35)
  {
    OUTLINED_FUNCTION_50_9();

    return;
  }

  v36 = objc_msgSend(v33, sel_defaultManager);
  NSFileManager.temporaryModelDirectory.getter();

  UUID.init()();
  v37 = UUID.uuidString.getter();
  v39 = v38;
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v3, v19);
  v79 = v37;
  v80 = v39;
  v41 = v73;
  v40 = v74;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v74 + 104))(v73, *MEMORY[0x24BDCD7A0], v75);
  lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(component:directoryHint:)();
  OUTLINED_FUNCTION_12_7(v41, *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8));
  swift_bridgeObjectRelease();
  v42 = v76;
  v43 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v76 + 1);
  v44 = v78;
  OUTLINED_FUNCTION_3_27((uint64_t)v25);
  v45 = v77;
  URL.appendingPathExtension(_:)();
  OUTLINED_FUNCTION_3_27((uint64_t)v28);
  type metadata accessor for MLLinearRegressor.Model();
  BaseLinearRegressorModel.export(to:)();
  (*((void (**)(uint64_t, uint64_t, uint64_t))v42 + 2))(v71, v45, v44);
  v46 = v72;
  Model.init(contentsOf:)();
  v47 = v61;
  specialized BidirectionalCollection.last.getter(v60, v61);
  if (__swift_getEnumTagSinglePayload(v47, 1, v70) == 1)
  {
    __break(1u);
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  Model.outputs.getter();
  v76 = *(uint64_t (**)(uint64_t, uint64_t))(v69 + 8);
  OUTLINED_FUNCTION_12_7(v47, v76);
  Model.inputs.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  type metadata accessor for FeatureDescription();
  OUTLINED_FUNCTION_21_24();
  v48 = swift_allocObject();
  v75 = xmmword_21AFE7DA0;
  *(_OWORD *)(v48 + 16) = xmmword_21AFE7DA0;
  OUTLINED_FUNCTION_199();
  v49 = v63;
  FeatureType.DoubleParameters.init(optional:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v62 + 104))(v49, *MEMORY[0x24BE62570], v64);
  OUTLINED_FUNCTION_31_19();
  Model.outputs.setter();
  OUTLINED_FUNCTION_199();
  Model.predictedFeatureName.setter();
  Dictionary.init(dictionaryLiteral:)();
  Model.metadata.setter();
  v50 = v65;
  Model.init()();
  Model.specificationVersion.setter();
  v51 = OUTLINED_FUNCTION_31_2();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_20MLModelSpecification18FeatureDescriptionVs5NeverOTg503_s8d50ML18TreeRegressorModelV6export16internalMetadata20h33Specification0E0VSDyS2SGz_tKFAF18jk5VAA16fG54Vcfu0_33_3fd57c9cf8bb5b882e179ce0f1f8c55eAmKTf3nnnpk_nTf1cn_n(v51);
  swift_bridgeObjectRelease();
  Model.inputs.setter();
  Model.outputs.getter();
  Model.outputs.setter();
  swift_bridgeObjectRetain();
  Model.predictedFeatureName.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Model>);
  v52 = v69;
  v53 = OUTLINED_FUNCTION_7_34();
  *(_OWORD *)(v53 + 16) = v75;
  v54 = v70;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v53 + v50, v46, v70);
  v79 = v60;
  specialized Array.append<A>(contentsOf:)(v53);
  v55 = v66;
  PipelineRegressorConfiguration.init(models:names:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v67 + 104))(v55, *MEMORY[0x24BE63250], v58);
  Model.kind.setter();
  v76(v46, v54);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v68, v50, v54);
  v56 = v77;
  $defer #1 () in MLImageClassifier.Model.createScenePrintFeatureExtractorModel(revision:)();
  v43(v56, v78);
}

void specialized FeatureVectorizer.Transformer.makeOneHotEncoder(inputName:outputName:categories:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a3;
  v23 = a4;
  v20 = a1;
  v21 = a2;
  v8 = OUTLINED_FUNCTION_54_11();
  v18 = *(_QWORD *)(v8 - 8);
  v19 = v8;
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_23_24();
  v10 = type metadata accessor for OneHotEncoderConfiguration.UnknownBehavior();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ModelKind();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_54_0();
  Model.init()();
  Model.specificationVersion.setter();
  v24 = a5;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BE62AF0], v10);
  OneHotEncoderConfiguration.init(orderedCategories:sparseOutput:unknownBehavior:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v6, *MEMORY[0x24BE63220], v14);
  Model.kind.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  OUTLINED_FUNCTION_46_11();
  OUTLINED_FUNCTION_21_24();
  v16 = OUTLINED_FUNCTION_28_24();
  v17 = xmmword_21AFE7DA0;
  *(_OWORD *)(v16 + 16) = xmmword_21AFE7DA0;
  swift_bridgeObjectRetain();
  FeatureType.StringParameters.init(optional:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v5, *MEMORY[0x24BE62578], v19);
  OUTLINED_FUNCTION_6_36();
  Model.inputs.setter();
  *(_OWORD *)(OUTLINED_FUNCTION_28_24() + 16) = v17;
  OUTLINED_FUNCTION_195();
  OUTLINED_FUNCTION_44_19();
  OUTLINED_FUNCTION_6_36();
  Model.outputs.setter();
  OUTLINED_FUNCTION_9_5();
}

void specialized FeatureVectorizer.Transformer.makeDictionaryVectorizer(inputName:outputName:descriptors:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n;

  v13 = a1;
  v14 = a3;
  OUTLINED_FUNCTION_54_11();
  OUTLINED_FUNCTION_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_23_24();
  v7 = type metadata accessor for ModelKind();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Model.init()();
  Model.specificationVersion.setter();
  ML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8CreateML16ColumnDescriptorVG_SSs5NeverOTg503_s8d131ML17FeatureVectorizerV11TransformerV10vectorized_13includingBias0A12MLComponents11DenseMatrixVyxG11TabularData0M5FrameV_SbtKFSSAA16fG54Vcfu_33_44daf68368b8b9c6f03dca699c8750fcAPSSTf3nnnpk_nTf1cn_n(a5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  DictionaryVectorizerConfiguration.init<A>(keys:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BE63278], v7);
  Model.kind.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureDescription>);
  OUTLINED_FUNCTION_46_11();
  OUTLINED_FUNCTION_21_24();
  v11 = OUTLINED_FUNCTION_27_30();
  v12 = xmmword_21AFE7DA0;
  *(_OWORD *)(v11 + 16) = xmmword_21AFE7DA0;
  OUTLINED_FUNCTION_199();
  static FeatureType.dictionaryWithStringKeys(optional:)();
  OUTLINED_FUNCTION_6_36();
  Model.inputs.setter();
  *(_OWORD *)(OUTLINED_FUNCTION_27_30() + 16) = v12;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_44_19();
  OUTLINED_FUNCTION_6_36();
  Model.outputs.setter();
  OUTLINED_FUNCTION_9_5();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v14;
  char *v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v18 = (char *)(a3 - 16);
    while (1)
    {
      v19 = v18 + 16;
      v20 = (char *)(v12 - 16);
      v21 = *(_QWORD *)(v12 - 16) == *((_QWORD *)v6 - 2) && *(_QWORD *)(v12 - 8) == *((_QWORD *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23)
          goto LABEL_43;
      }
      else
      {
        v22 = v19 != v6 || v18 >= v6;
        v20 = v6 - 16;
        v6 -= 16;
        if (!v22)
          goto LABEL_43;
      }
      *(_OWORD *)v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_47;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      v15 = v4;
      v14 = v7 == v4;
      v4 += 16;
      if (!v14)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_21;
    }
    v15 = v6;
    v14 = v7 == v6;
    v6 += 16;
    if (v14)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - (_QWORD)v4) / 16, v6);
  return 1;
}

uint64_t OUTLINED_FUNCTION_3_37()
{
  return Model.inputs.modify();
}

uint64_t OUTLINED_FUNCTION_6_36()
{
  return FeatureDescription.init(name:type:description:)();
}

uint64_t OUTLINED_FUNCTION_7_34()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_9_30()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 176) = 0x5F6465646F636E65;
  *(_QWORD *)(v0 - 168) = 0xE800000000000000;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_11_30()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_12_33()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_13_37()
{
  Swift::String v0;

  v0._countAndFlagsBits = 95;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

unint64_t OUTLINED_FUNCTION_15_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = v1;
  return v0
       + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
       + *(_QWORD *)(v3 + 72) * v2;
}

uint64_t OUTLINED_FUNCTION_22_20()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_23_24()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_26_24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_27_30()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_28_24()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_29_19()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = *(_QWORD *)(v1 - 208);
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_31_19()
{
  return FeatureDescription.init(name:type:description:)();
}

uint64_t OUTLINED_FUNCTION_33_18()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_34_21()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 360) = v0;
}

uint64_t OUTLINED_FUNCTION_36_18()
{
  uint64_t v0;

  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)(*(_QWORD *)v0 + 16));
}

uint64_t OUTLINED_FUNCTION_40_15(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void OUTLINED_FUNCTION_41_14(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_42_12()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_43_14()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 208);
}

uint64_t OUTLINED_FUNCTION_44_19()
{
  return static FeatureType.dictionaryWithIntKeys(optional:)();
}

uint64_t OUTLINED_FUNCTION_45_14()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_46_11()
{
  return type metadata accessor for FeatureDescription();
}

uint64_t OUTLINED_FUNCTION_48_13@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 - 256);
  *(_QWORD *)(v2 - 176) = v1;
  *(_QWORD *)(v2 - 168) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_51_14()
{
  return FeatureVectorizerConfiguration.Input.init(name:size:)();
}

uint64_t OUTLINED_FUNCTION_54_11()
{
  return type metadata accessor for FeatureType();
}

void OUTLINED_FUNCTION_55_13()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v0 + 16) = v1 + 1;
}

uint64_t OUTLINED_FUNCTION_57_9()
{
  return swift_bridgeObjectRelease();
}

CreateML::MLDataValue::MultiArrayType __swiftcall MLDataValue.MultiArrayType.init(_:)(MLMultiArray a1)
{
  Class *v1;
  uint64_t v2;
  Class *v4;
  CreateML::MLDataValue::MultiArrayType result;
  Class isa;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  char **p_type;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  Class v51;
  id v52;
  double v53;
  double v54;
  id v55;
  Class v56;
  Class *v57;
  Class v58;
  id v59;
  uint64_t v60;

  v4 = v1;
  result._contents.super.isa = (Class)-[objc_class dataType](a1.super.isa, sel_dataType);
  if (result._contents.super.isa == (Class)65600)
  {
    isa = a1.super.isa;
LABEL_54:
    *v4 = isa;
    return result;
  }
  v57 = v4;
  v7 = -[objc_class shape](a1.super.isa, sel_shape);
  OUTLINED_FUNCTION_27_1((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v8 = OUTLINED_FUNCTION_48_14();

  v9 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  v10 = OUTLINED_FUNCTION_28_25(v8, 0x40u);
  if (!v2)
  {
    v59 = v10;
    p_type = &stru_24DE27FF0.type;
    v12 = -[objc_class strides](a1.super.isa, sel_strides);
    v13 = OUTLINED_FUNCTION_48_14();

    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v15 = OUTLINED_FUNCTION_77_8();
      v14 = OUTLINED_FUNCTION_10_3();
    }
    else
    {
      v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v16 = MEMORY[0x24BEE4AF8];
    v58 = a1.super.isa;
    if (v15)
    {
      v60 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_26_25(v14, v15 & ~(v15 >> 63));
      if (v15 < 0)
      {
        __break(1u);
        goto LABEL_56;
      }
      v17 = 0;
      v18 = v60;
      v16 = MEMORY[0x24BEE4AF8];
      do
      {
        if ((v13 & 0xC000000000000001) != 0)
          v19 = (id)MEMORY[0x22075AF48](v17, v13);
        else
          v19 = OUTLINED_FUNCTION_46_12(v13 + 8 * v17);
        v20 = v19;
        v21 = objc_msgSend(v19, sel_integerValue);

        v60 = v18;
        v23 = *(_QWORD *)(v18 + 16);
        v22 = *(_QWORD *)(v18 + 24);
        if (v23 >= v22 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          v16 = MEMORY[0x24BEE4AF8];
          v18 = v60;
        }
        ++v17;
        *(_QWORD *)(v18 + 16) = v23 + 1;
        *(_QWORD *)(v18 + 8 * v23 + 32) = v21;
      }
      while (v15 != v17);
      OUTLINED_FUNCTION_10_3();
      p_type = (char **)(&stru_24DE27FF0 + 16);
    }
    else
    {
      OUTLINED_FUNCTION_10_3();
    }
    v24 = objc_msgSend(v59, p_type[490]);
    v25 = OUTLINED_FUNCTION_48_14();

    if (v25 >> 62)
    {
      OUTLINED_FUNCTION_54_12();
      v27 = OUTLINED_FUNCTION_77_8();
      v26 = OUTLINED_FUNCTION_80();
      if (v27)
      {
LABEL_19:
        v60 = v16;
        OUTLINED_FUNCTION_26_25(v26, v27 & ~(v27 >> 63));
        if ((v27 & 0x8000000000000000) == 0)
        {
          v28 = 0;
          v29 = v60;
          do
          {
            if ((v25 & 0xC000000000000001) != 0)
              OUTLINED_FUNCTION_73_9();
            v30 = OUTLINED_FUNCTION_46_12(v25 + 8 * v28);
            v31 = objc_msgSend(v30, sel_integerValue);

            v60 = v29;
            v33 = *(_QWORD *)(v29 + 16);
            v32 = *(_QWORD *)(v29 + 24);
            if (v33 >= v32 >> 1)
            {
              OUTLINED_FUNCTION_35_14(v32);
              v29 = v60;
            }
            ++v28;
            *(_QWORD *)(v29 + 16) = v33 + 1;
            *(_QWORD *)(v29 + 8 * v33 + 32) = v31;
          }
          while (v27 != v28);
          OUTLINED_FUNCTION_80();
          v16 = MEMORY[0x24BEE4AF8];
LABEL_30:
          v34 = -[objc_class shape](v58, sel_shape);
          v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v35 >> 62)
          {
            OUTLINED_FUNCTION_54_12();
            v37 = OUTLINED_FUNCTION_77_8();
            v36 = OUTLINED_FUNCTION_80();
            if (v37)
            {
LABEL_32:
              v60 = v16;
              OUTLINED_FUNCTION_26_25(v36, v37 & ~(v37 >> 63));
              if ((v37 & 0x8000000000000000) == 0)
              {
                v38 = 0;
                v39 = v60;
                do
                {
                  if ((v35 & 0xC000000000000001) != 0)
                    OUTLINED_FUNCTION_73_9();
                  v40 = OUTLINED_FUNCTION_46_12(v35 + 8 * v38);
                  v41 = objc_msgSend(v40, sel_integerValue);

                  v60 = v39;
                  v43 = *(_QWORD *)(v39 + 16);
                  v42 = *(_QWORD *)(v39 + 24);
                  if (v43 >= v42 >> 1)
                  {
                    OUTLINED_FUNCTION_35_14(v42);
                    v39 = v60;
                  }
                  ++v38;
                  *(_QWORD *)(v39 + 16) = v43 + 1;
                  *(_QWORD *)(v39 + 8 * v43 + 32) = v41;
                }
                while (v37 != v38);
                OUTLINED_FUNCTION_80();
                goto LABEL_42;
              }
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
          }
          else
          {
            v37 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v37)
              goto LABEL_32;
          }
          OUTLINED_FUNCTION_80();
          v39 = MEMORY[0x24BEE4AF8];
LABEL_42:
          v44 = (_QWORD *)OUTLINED_FUNCTION_84_5();
          v46 = specialized static Array<A>.== infix(_:_:)(v44, v45);
          OUTLINED_FUNCTION_10_3();
          OUTLINED_FUNCTION_104();
          if (!v46)
          {
            if ((uint64_t)-[objc_class count](v58, sel_count) >= 1)
            {
              v60 = specialized Array.init(repeating:count:)(objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, 0), *(_QWORD *)(v39 + 16));
              do
              {
                swift_bridgeObjectRetain();
                v51 = Array._bridgeToObjectiveC()().super.isa;
                v52 = OUTLINED_FUNCTION_81_9(v58, sel_objectForKeyedSubscript_);

                objc_msgSend(v52, sel_doubleValue);
                v54 = v53;

                v55 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v54);
                OUTLINED_FUNCTION_84_5();
                v56 = Array._bridgeToObjectiveC()().super.isa;
                OUTLINED_FUNCTION_104();
                objc_msgSend(v59, sel_setObject_forKeyedSubscript_, v55, v56);

              }
              while ((incrementIndex #1 (shape:index:) in MLDataValue.MultiArrayType.init(_:)(v39, &v60) & 1) != 0);

              OUTLINED_FUNCTION_30();
              result._contents.super.isa = (Class)swift_bridgeObjectRelease();
              v4 = v57;
              isa = (Class)v59;
              goto LABEL_54;
            }
            isa = (Class)v59;

            OUTLINED_FUNCTION_30();
            goto LABEL_53;
          }
          OUTLINED_FUNCTION_30();
          v47 = (unint64_t)-[objc_class count](v58, sel_count);
          isa = (Class)v59;
          if ((v47 & 0x8000000000000000) == 0)
          {
            v48 = v47;
            if (v47)
            {
              v49 = 0;
              do
              {
                v50 = OUTLINED_FUNCTION_81_9(v58, sel_objectAtIndexedSubscript_);
                objc_msgSend(v59, sel_setObject_atIndexedSubscript_, v50, v49);

                ++v49;
              }
              while (v48 != v49);
            }

LABEL_53:
            v4 = v57;
            goto LABEL_54;
          }
          goto LABEL_58;
        }
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
    }
    else
    {
      v27 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v27)
        goto LABEL_19;
    }
    OUTLINED_FUNCTION_80();
    goto LABEL_30;
  }
LABEL_59:
  OUTLINED_FUNCTION_6_22();
  result._contents.super.isa = (Class)swift_unexpectedError();
  __break(1u);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

void specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = a1[2];
  if (v2 == a2[2] && v2 && a1 != a2)
  {
    v5 = a1[4] == a2[4] && a1[5] == a2[5];
    if ((v5 || (OUTLINED_FUNCTION_8_3() & 1) != 0) && v2 != 1)
    {
      v6 = a2 + 7;
      v7 = a1 + 7;
      do
      {
        v8 = *(v7 - 1) == *(v6 - 1) && *v7 == *v6;
        if (!v8 && (OUTLINED_FUNCTION_8_3() & 1) == 0)
          break;
        OUTLINED_FUNCTION_86_7();
      }
      while (!v5);
    }
  }
}

void specialized static Array<A>.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == a2[2] && v2 && (_QWORD *)a1 != a2)
  {
    v3 = *(unsigned __int8 *)(a1 + 56);
    v4 = *(_QWORD *)(a1 + 32) == a2[4] && *(_QWORD *)(a1 + 40) == a2[5];
    if (v4 || (OUTLINED_FUNCTION_8_3() & 1) != 0)
      __asm { BR              X8 }
  }
  OUTLINED_FUNCTION_9_5();
}

void specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16) && v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v21 = *(_QWORD *)(v8 + 72);
    v22 = v8;
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    v14 = v11 - 1;
    do
    {
      v15 = a1;
      v13(v10, a1 + v12, v4);
      v16 = a2;
      v13(v7, a2 + v12, v4);
      lazy protocol witness table accessor for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>();
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      v18 = *(void (**)(char *, uint64_t))(v22 + 8);
      v18(v7, v4);
      v18(v10, v4);
      v20 = v14-- != 0;
      if ((v17 & 1) == 0)
        break;
      v12 += v21;
      a2 = v16;
      a1 = v15;
    }
    while (v20);
  }
  OUTLINED_FUNCTION_9_5();
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  char v13;
  char v14;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;

  v4 = (id)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
  {
LABEL_38:
    OUTLINED_FUNCTION_84();
    v5 = OUTLINED_FUNCTION_64_10();
    OUTLINED_FUNCTION_15_0();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    OUTLINED_FUNCTION_23_3();
    v6 = OUTLINED_FUNCTION_64_10();
    OUTLINED_FUNCTION_123();
  }
  else
  {
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v5 != v6)
    goto LABEL_24;
  if (v5)
  {
    v7 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v7 = a1;
    if (!v4)
      v7 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v8 = a2 & 0xFFFFFFFFFFFFFF8;
    v9 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
    if (a2 < 0)
      v8 = a2;
    if ((unint64_t)a2 >> 62)
      v9 = v8;
    if (v7 != v9)
    {
      if (v5 < 0)
        goto LABEL_41;
      v20 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) != 0)
LABEL_42:
        v10 = (id)MEMORY[0x22075AF48](0, a1);
      else
        v10 = *(id *)(a1 + 32);
      v4 = v10;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a2 & 0xC000000000000001) == 0, a2);
      if ((a2 & 0xC000000000000001) != 0)
        v11 = (id)MEMORY[0x22075AF48](0, a2);
      else
        v11 = *(id *)(a2 + 32);
      v12 = v11;
      OUTLINED_FUNCTION_27_1((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      v13 = static NSObject.== infix(_:_:)();

      if ((v13 & 1) != 0)
      {
        if (v5 != 1)
        {
          v16 = 5;
          while (1)
          {
            if (v16 - 4 >= v5)
            {
              __break(1u);
              goto LABEL_38;
            }
            if (v20)
              OUTLINED_FUNCTION_85_4();
            v4 = *(id *)(a1 + 8 * v16);
            if ((a2 & 0xC000000000000001) != 0)
            {
              v17 = (id)MEMORY[0x22075AF48](v16 - 4, a2);
            }
            else
            {
              if ((unint64_t)(v16 - 4) >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_41:
                __break(1u);
                goto LABEL_42;
              }
              v17 = *(id *)(a2 + 8 * v16);
            }
            v18 = v17;
            v14 = static NSObject.== infix(_:_:)();

            if ((v14 & 1) != 0)
            {
              v19 = 2 - v5 + v16++;
              if (v19 != 5)
                continue;
            }
            return v14 & 1;
          }
        }
        goto LABEL_23;
      }
LABEL_24:
      v14 = 0;
      return v14 & 1;
    }
  }
LABEL_23:
  v14 = 1;
  return v14 & 1;
}

id MLDataValue.MultiArrayType.mlMultiArray.getter()
{
  id *v0;

  return *v0;
}

uint64_t specialized Array.init(repeating:count:)(void *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;

  result = specialized static Array._allocateUninitialized(_:)(a2);
  v10 = result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      *v5 = a1;
      if (a2 != 1)
      {
        v5[1] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v5 + 2;
          do
          {
            *v7++ = a1;
            v8 = a1;
            --v6;
          }
          while (v6);
        }
        v9 = a1;
      }
    }
    else
    {

    }
    specialized Array._endMutation()();
    return v10;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  if (a3 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    result = OUTLINED_FUNCTION_11_31();
    __break(1u);
  }
  else
  {
    if (a3)
    {
      v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v7 = v6;
      v6[2] = a3;
      v6[4] = a1;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = a1;
        v6[7] = a2;
        v8 = a3 - 2;
        if (v8)
        {
          v9 = v6 + 9;
          do
          {
            *(v9 - 1) = a1;
            *v9 = a2;
            OUTLINED_FUNCTION_23_3();
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        OUTLINED_FUNCTION_23_3();
      }
    }
    else
    {
      OUTLINED_FUNCTION_123();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v7;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    result = OUTLINED_FUNCTION_11_31();
    __break(1u);
  }
  else if (a2)
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v5 = 0;
    *(_QWORD *)(result + 16) = a2;
    do
    {
      v6 = result + 8 * v5++;
      *(_QWORD *)(v6 + 32) = a1;
    }
    while (a2 != v5);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    result = OUTLINED_FUNCTION_11_31();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      v4 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            OUTLINED_FUNCTION_23_3();
            --v6;
          }
          while (v6);
        }
        OUTLINED_FUNCTION_23_3();
      }
    }
    else
    {
      OUTLINED_FUNCTION_123();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t MLDataValue.MultiArrayType.description.getter()
{
  return MLDataValue.MultiArrayType.description.getter((SEL *)&selRef_description);
}

id MLDataValue.MultiArrayType.dataValue.getter@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 5;
  return v2;
}

CreateML::MLDataValue::MultiArrayType __swiftcall MLDataValue.MultiArrayType.init(shape:)(Swift::OpaquePointer shape)
{
  CreateML::MLDataValue::MultiArrayType *v1;
  CreateML::MLDataValue::MultiArrayType *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  CreateML::MLDataValue::MultiArrayType result;
  uint64_t v10;

  v3 = v1;
  v4 = *((_QWORD *)shape._rawValue + 2);
  if (v4)
  {
    v10 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v5 = 0;
    do
    {
      v6 = v5 + 1;
      OUTLINED_FUNCTION_74_9(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 = v6;
    }
    while (v4 != v6);
    v7 = v10;
    OUTLINED_FUNCTION_15_0();
  }
  else
  {
    OUTLINED_FUNCTION_15_0();
    v7 = MEMORY[0x24BEE4AF8];
  }
  v8 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  result._contents.super.isa = (Class)OUTLINED_FUNCTION_28_25(v7, 0x40u);
  if (shape._rawValue)
  {
    OUTLINED_FUNCTION_6_22();
    result._contents.super.isa = (Class)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v3->_contents.super.isa = result._contents.super.isa;
  }
  return result;
}

uint64_t incrementIndex #1 (shape:index:) in MLDataValue.MultiArrayType.init(_:)(uint64_t result, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  char *v11;
  id v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  _BOOL8 v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  int v25;
  void *v26;

  v3 = result;
  if ((unint64_t)*a2 >> 62)
    goto LABEL_37;
  v4 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    if (((v4 - 1) & 0x8000000000000000) == 0)
    {
      v5 = *(_QWORD *)(v3 + 16);
      v6 = v3 + 24;
      v7 = 0x24BDD1000uLL;
      while (1)
      {
        v3 = v4 - 1;
        v8 = *a2;
        if ((*a2 & 0xC000000000000001) != 0)
        {
          v9 = (id)MEMORY[0x22075AF48](v4 - 1);
        }
        else
        {
          if (v3 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            swift_bridgeObjectRetain();
            v4 = _CocoaArrayWrapper.endIndex.getter();
            result = swift_bridgeObjectRelease();
            goto LABEL_3;
          }
          v9 = *(id *)(v8 + 8 * v4 + 24);
        }
        v10 = v9;
        v11 = (char *)objc_msgSend(v9, sel_integerValue);

        if (__OFADD__(v11, 1))
          goto LABEL_32;
        v12 = objc_msgSend(objc_allocWithZone(*(Class *)(v7 + 1760)), sel_initWithInteger_, v11 + 1);
        v13 = *a2;
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a2 = v13;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v13 < 0 || (v13 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v13);
        if (v3 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_33;
        v15 = *(void **)((v13 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x18);
        *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x18) = v12;

        specialized Array._endMutation()();
        v16 = *a2;
        if ((*a2 & 0xC000000000000001) != 0)
        {
          v17 = (id)MEMORY[0x22075AF48](v4 - 1);
        }
        else
        {
          if (v3 >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_34;
          v17 = *(id *)(v16 + 8 * v4 + 24);
        }
        v18 = v17;
        v19 = objc_msgSend(v17, sel_integerValue);

        if ((uint64_t)v3 >= v5)
          goto LABEL_35;
        v20 = *(_QWORD *)(v6 + 8 * v4);
        v21 = (uint64_t)v19 < v20;
        if ((uint64_t)v19 < v20)
          return v21;
        v22 = v7;
        v23 = objc_msgSend(objc_allocWithZone(*(Class *)(v7 + 1760)), sel_initWithInteger_, 0);
        v24 = *a2;
        v25 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a2 = v24;
        if (!v25 || v24 < 0 || (v24 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v24);
        if (v3 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_36;
        v26 = *(void **)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x18);
        *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x18) = v23;

        specialized Array._endMutation()();
        --v4;
        v7 = v22;
        if (!v4)
          return v21;
      }
    }
    return 0;
  }
  return result;
}

double MLDataValue.MultiArrayType.subscript.getter(uint64_t a1)
{
  id *v1;
  id v2;
  double v3;
  double v4;

  v2 = objc_msgSend(*v1, sel_objectAtIndexedSubscript_, a1);
  objc_msgSend(v2, sel_doubleValue);
  v4 = v3;

  return v4;
}

{
  void **v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  id v7;
  double v8;
  double v9;

  v2 = *v1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1;
    specialized ContiguousArray.reserveCapacity(_:)();
    v5 = v4 + 32;
    do
    {
      v5 += 8;
      OUTLINED_FUNCTION_74_9(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      a1 = specialized ContiguousArray._endMutation()();
      --v3;
    }
    while (v3);
  }
  OUTLINED_FUNCTION_27_1(a1, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_30();
  v7 = objc_msgSend(v2, sel_objectForKeyedSubscript_, isa);

  objc_msgSend(v7, sel_doubleValue);
  v9 = v8;

  return v9;
}

uint64_t static MLDataValue.MultiArrayType.== infix(_:_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_27_1(a1, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t MLDataValue.MultiArrayType.debugDescription.getter()
{
  return MLDataValue.MultiArrayType.description.getter((SEL *)&selRef_debugDescription);
}

uint64_t MLDataValue.MultiArrayType.description.getter(SEL *a1)
{
  id *v1;
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(*v1, *a1);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void static MLDataValue.MultiArrayType.dataValueType.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void *MLDataValue.MultiArrayType.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  int v5;

  result = *(void **)a1;
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 != 5)
  {
    outlined consume of MLDataValue(result, *(id *)(a1 + 8), v5);
    result = 0;
  }
  *a2 = result;
  return result;
}

CreateML::MLDataValue::MultiArrayType __swiftcall MLDataValue.MultiArrayType.init()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  id v4;
  CreateML::MLDataValue::MultiArrayType result;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v2 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v2 + 16) = xmmword_21AFE8580;
  OUTLINED_FUNCTION_27_1(v2, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(NSNumber *)(v2 + 32) = NSNumber.init(integerLiteral:)(1);
  specialized Array._endMutation()();
  v3 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  v4 = OUTLINED_FUNCTION_28_25(v2, 0x20u);
  if (v2)
  {

  }
  else if (v4)
  {
    MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v4);
    *v1 = 0;
    OUTLINED_FUNCTION_13_12();
    return result;
  }
  result._contents.super.isa = (Class)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MLDataValue.MultiArrayType.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  v4 = (_QWORD *)OUTLINED_FUNCTION_9_1();
  specialized handling<A, B>(_:_:)(*(_QWORD *)(a1 + 16));
  v6 = v5;
  if (!v5)
    goto LABEL_13;
  type metadata accessor for CMLMultiArray();
  v7 = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v7 + 16) = v6;
  v4[2] = v7;
  swift_retain();
  v8 = CMLMultiArray.data()();
  v9 = CMLMultiArray.dimensions()();
  if (v10)
  {
    OUTLINED_FUNCTION_6_22();
    goto LABEL_15;
  }
  v11 = v9;
  CMLMultiArray.shape()();
  v12 = CMLMultiArray.strides()();
  if (v11 < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    OUTLINED_FUNCTION_6_22();
LABEL_15:
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v13 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v14 = v12;
    v21 = v8;
    OUTLINED_FUNCTION_68_11();
    v15 = 0;
    do
    {
      v16 = v15 + 1;
      OUTLINED_FUNCTION_74_9(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithUnsignedLongLong_);
      OUTLINED_FUNCTION_80_8();
      OUTLINED_FUNCTION_51_15();
      OUTLINED_FUNCTION_67_12();
      specialized ContiguousArray._endMutation()();
      v15 = v16;
    }
    while (v11 != v16);
    v17 = v22;
    OUTLINED_FUNCTION_68_11();
    do
    {
      v14 += 8;
      OUTLINED_FUNCTION_81_9(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithLongLong_);
      OUTLINED_FUNCTION_80_8();
      OUTLINED_FUNCTION_51_15();
      OUTLINED_FUNCTION_67_12();
      specialized ContiguousArray._endMutation()();
      --v11;
    }
    while (v11);
    v13 = v22;
    v8 = v21;
  }
  else
  {
    v17 = MEMORY[0x24BEE4AF8];
  }
  v18 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  swift_retain();
  v19 = @nonobjc MLMultiArray.init(dataPointer:shape:dataType:strides:deallocator:)(v8, v17, 65600, v13, partial apply for closure #3 in MLDataValue.MultiArrayType.init(from:), v4);
  MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v19);
  swift_release();
  swift_release();
  result = swift_release();
  *a2 = v22;
  return result;
}

uint64_t closure #3 in MLDataValue.MultiArrayType.init(from:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(_QWORD *)(a2 + 16) = 0;
  return swift_release();
}

#error "21AEDAA3C: call analysis failed (funcsize=227)"

id @nonobjc MLMultiArray.init(shape:dataType:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  Class isa;
  id v5;
  id v6;
  id v7;
  double v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v5 = objc_msgSend(v2, sel_initWithShape_dataType_error_, isa, a2, v10);

  if (v5)
  {
    v6 = v10[0];
  }
  else
  {
    v7 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow(v8);
  }
  return v5;
}

void specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  specialized static Array._allocateUninitialized(_:)(a1);
}

{
  specialized static Array._allocateUninitialized(_:)(a1);
}

{
  specialized static Array._allocateUninitialized(_:)(a1);
}

{
  specialized static Array._allocateUninitialized(_:)(a1);
}

{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_11_31();
    __break(1u);
  }
  else
  {
    if (a1)
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = a1;
    OUTLINED_FUNCTION_28_10();
  }
}

{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_11_31();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = a1;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    OUTLINED_FUNCTION_28_10();
  }
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    result = (char *)OUTLINED_FUNCTION_2_41();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_37(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    result = (char *)OUTLINED_FUNCTION_2_41();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_37(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    result = (char *)OUTLINED_FUNCTION_2_41();
    __break(1u);
  }
  else if (a3 != result || &result[4 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_37(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    result = (char *)OUTLINED_FUNCTION_2_41();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_37(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    result = (char *)OUTLINED_FUNCTION_2_41();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_37(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    result = (char *)OUTLINED_FUNCTION_2_41();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_37(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    result = (char *)OUTLINED_FUNCTION_2_41();
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_37(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    result = (char *)OUTLINED_FUNCTION_2_41();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_37(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2)
{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  char v6;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_2_41();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_61_10();
    if (v5 && (__swift_instantiateConcreteTypeFromMangledName(v4), OUTLINED_FUNCTION_79_6(), !v6 & v5))
    {
      if (v3 == v2)
      {
        OUTLINED_FUNCTION_13_12();
      }
      else
      {
        OUTLINED_FUNCTION_22_21();
        OUTLINED_FUNCTION_31_20();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(v4);
      OUTLINED_FUNCTION_22_21();
      OUTLINED_FUNCTION_29_20();
    }
  }
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  char v5;
  char v6;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_2_41();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_61_10();
    if (v5 && (v4(0), OUTLINED_FUNCTION_79_6(), !v6 & v5))
    {
      if (v3 == v2)
      {
        OUTLINED_FUNCTION_13_12();
      }
      else
      {
        OUTLINED_FUNCTION_22_21();
        OUTLINED_FUNCTION_31_20();
      }
    }
    else
    {
      v4(0);
      OUTLINED_FUNCTION_22_21();
      OUTLINED_FUNCTION_29_20();
    }
  }
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    OUTLINED_FUNCTION_0_44();
    __src = (char *)OUTLINED_FUNCTION_2_41();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  OUTLINED_FUNCTION_59_12();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    if (v2 + 16 * v1 <= v0 || v0 + 16 * v1 <= v2)
      return OUTLINED_FUNCTION_15_26();
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  OUTLINED_FUNCTION_59_12();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    if (v2 + 24 * v1 <= v0 || v0 + 24 * v1 <= v2)
      return OUTLINED_FUNCTION_15_26();
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  OUTLINED_FUNCTION_59_12();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    if (v2 + 8 * v1 <= v0 || v0 + 8 * v1 <= v2)
      return OUTLINED_FUNCTION_15_26();
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  OUTLINED_FUNCTION_59_12();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    if (v2 + 32 * v1 <= v0 || v0 + 32 * v1 <= v2)
      return OUTLINED_FUNCTION_15_26();
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  BOOL v3;
  uint64_t result;

  if (a2 < 0 || (a3 + 16 * a2 > a1 ? (v3 = a1 + 16 * a2 > a3) : (v3 = 0), v3))
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  BOOL v3;
  uint64_t result;

  if (a2 < 0 || (a3 + 48 * a2 > a1 ? (v3 = a1 + 48 * a2 > a3) : (v3 = 0), v3))
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLDataValue, MLDataValue));
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  BOOL v3;
  uint64_t result;

  if (a2 < 0 || (a3 + 32 * a2 > a1 ? (v3 = a1 + 32 * a2 > a3) : (v3 = 0), v3))
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MLDataValue, Int));
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  BOOL v3;
  uint64_t result;

  if (a2 < 0 || (a3 + 40 * a2 > a1 ? (v3 = a1 + 40 * a2 > a3) : (v3 = 0), v3))
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Numeric);
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  BOOL v3;
  uint64_t result;

  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (v3 = a1 + 24 * a2 > a3) : (v3 = 0), v3))
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String, confidence: Double));
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  uint64_t result;

  if ((a2 & 0x8000000000000000) == 0 && (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3))
    return swift_arrayInitWithCopy();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  BOOL v3;
  uint64_t result;

  if (a2 < 0 || (a3 + 8 * a2 > a1 ? (v3 = a1 + 8 * a2 > a3) : (v3 = 0), v3))
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for NLLanguage(0);
    return swift_arrayInitWithCopy();
  }
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  void *v7;
  const void *v8;
  size_t v9;
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    OUTLINED_FUNCTION_56_12();
    if (!v5 & v4)
      v6 = v3 > v2;
    else
      v6 = 0;
    if (!v6)
    {
      v7 = (void *)OUTLINED_FUNCTION_55_14();
      return OUTLINED_FUNCTION_10_30(v7, v8, v9);
    }
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = (void *)OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  void *v7;
  const void *v8;
  size_t v9;
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    OUTLINED_FUNCTION_57_10();
    if (!v5 & v4)
      v6 = v3 > v2;
    else
      v6 = 0;
    if (!v6)
    {
      v7 = (void *)OUTLINED_FUNCTION_55_14();
      return OUTLINED_FUNCTION_10_30(v7, v8, v9);
    }
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = (void *)OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    OUTLINED_FUNCTION_21_25();
    if (!v8 && v7)
    {
      v7 = v6 >= v4;
      v8 = v6 == v4;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      OUTLINED_FUNCTION_45_15(v2, v3, v4, v5);
      OUTLINED_FUNCTION_9_31();
      return OUTLINED_FUNCTION_4_44();
    }
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    OUTLINED_FUNCTION_21_25();
    if (!v6 && v5)
    {
      v5 = v4 >= v3;
      v6 = v4 == v3;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
    {
      OUTLINED_FUNCTION_27_1(v2, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
      OUTLINED_FUNCTION_9_31();
      return OUTLINED_FUNCTION_4_44();
    }
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  void (*v3)(_QWORD);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    OUTLINED_FUNCTION_63_11();
    v3(0);
    OUTLINED_FUNCTION_50_12();
    if (!v6 & v5)
      v7 = v4 > v2;
    else
      v7 = 0;
    if (!v7)
    {
      OUTLINED_FUNCTION_9_31();
      return OUTLINED_FUNCTION_4_44();
    }
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    OUTLINED_FUNCTION_63_11();
    v6 = v2 + 16 * v3;
    if (v4 + 16 * v3 > v2)
    {
      v7 = v6 >= v4;
      v8 = v6 == v4;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      OUTLINED_FUNCTION_45_15(v2, v3, v4, v5);
      OUTLINED_FUNCTION_9_31();
      return OUTLINED_FUNCTION_4_44();
    }
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char v8;
  char v9;
  BOOL v10;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    OUTLINED_FUNCTION_63_11();
    OUTLINED_FUNCTION_45_15(v3, v4, v5, v6);
    OUTLINED_FUNCTION_50_12();
    if (!v9 & v8)
      v10 = v7 > v2;
    else
      v10 = 0;
    if (!v10)
    {
      OUTLINED_FUNCTION_9_31();
      return OUTLINED_FUNCTION_4_44();
    }
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    OUTLINED_FUNCTION_47_15();
    if (!v8 && v7)
    {
      v7 = v6 >= v4;
      v8 = v6 == v4;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (v8 || !v7)
    {
      OUTLINED_FUNCTION_45_15(v2, v3, v4, v5);
      OUTLINED_FUNCTION_9_31();
      return OUTLINED_FUNCTION_4_44();
    }
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    OUTLINED_FUNCTION_47_15();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      OUTLINED_FUNCTION_9_31();
      return OUTLINED_FUNCTION_4_44();
    }
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    v3 = a1 + 16 * a2;
    if (a3 + 16 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      v6 = (void *)OUTLINED_FUNCTION_55_14();
      return OUTLINED_FUNCTION_10_30(v6, v7, v8);
    }
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = (void *)OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)()
{
  char *v0;
  size_t v1;
  char *v2;
  uint64_t v3;
  void *result;

  OUTLINED_FUNCTION_59_12();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_6_37();
  }
  else
  {
    if (&v2[v1] <= v0 || &v0[v1] <= v2)
      return OUTLINED_FUNCTION_10_30(v2, v0, v1);
    OUTLINED_FUNCTION_0_44();
    OUTLINED_FUNCTION_5_33();
  }
  result = (void *)OUTLINED_FUNCTION_3_38();
  __break(1u);
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = v4;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[(MLDataValue, MLDataValue)]?>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [(MLDataValue, MLDataValue)]?, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[(key: MLDataValue, value: MLDataValue)]?>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [(key: MLDataValue, value: MLDataValue)]?, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLDataValue]?>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [MLDataValue]?, (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[(label: String, confidence: Double)]>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [(label: String, confidence: Double)], (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [Double], (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[MLHandActionClassifier.Prediction]>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [MLHandActionClassifier.Prediction], (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Double]>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (uint64_t)&demangling cache variable for type metadata for [String : Double], (void (*)(uint64_t, uint64_t, _QWORD *, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = v4;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const void *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_20_23();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_66_13();
  if (v4)
  {
    OUTLINED_FUNCTION_19_28(v9, v10, v11, v12, v13);
    v14 = (const void *)OUTLINED_FUNCTION_12_34();
    v15 = _swift_stdlib_malloc_size(v14);
    OUTLINED_FUNCTION_62_15(v15);
  }
  v16 = (char *)OUTLINED_FUNCTION_60_12();
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v16, v17, v18);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v16, v17);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_125();
}

{
  uint64_t v4;
  char v7;
  char v8;
  const void *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_20_23();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_66_13();
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v9 = (const void *)OUTLINED_FUNCTION_12_34();
    v10 = _swift_stdlib_malloc_size(v9);
    OUTLINED_FUNCTION_62_15(v10);
  }
  v11 = (char *)OUTLINED_FUNCTION_60_12();
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v11, v12, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v11, v12);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_125();
}

{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_20_23();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_66_13();
  if (v5)
  {
    OUTLINED_FUNCTION_19_28(v10, v11, v12, v13, v14);
    v15 = (_QWORD *)OUTLINED_FUNCTION_12_34();
    _swift_stdlib_malloc_size(v15);
    OUTLINED_FUNCTION_38_16();
    v15[2] = v4;
    v15[3] = v16;
  }
  v17 = (char *)OUTLINED_FUNCTION_60_12();
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v17, v18, v19);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v17, v18, (unint64_t)v19);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_125();
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_23_25();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_20_23();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_40_16();
  if (v5)
  {
    OUTLINED_FUNCTION_19_28(v9, v10, v11, v12, v13);
    v14 = (_QWORD *)OUTLINED_FUNCTION_12_34();
    _swift_stdlib_malloc_size(v14);
    OUTLINED_FUNCTION_38_16();
    v14[2] = v4;
    v14[3] = v15;
  }
  v16 = OUTLINED_FUNCTION_37_14();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_164();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  OUTLINED_FUNCTION_36_19();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_20_23();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    OUTLINED_FUNCTION_19_28(v2, v3, v4, v5, v6);
    v12 = OUTLINED_FUNCTION_12_34();
    _swift_stdlib_malloc_size((const void *)v12);
    OUTLINED_FUNCTION_38_16();
    *(_QWORD *)(v12 + 16) = v10;
    *(_QWORD *)(v12 + 24) = v13;
  }
  else
  {
    v12 = MEMORY[0x24BEE4AF8];
  }
  v14 = (char *)(v0 + 32);
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v10, (char *)(v12 + 32));
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v14, v10);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_164();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(_QWORD);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_36_19();
  if ((v7 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v11 != v12)
    {
      OUTLINED_FUNCTION_20_23();
      if (v11)
      {
LABEL_23:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  else
  {
    v10 = v6;
  }
  v13 = *(_QWORD *)(v0 + 16);
  if (v10 <= v13)
    v14 = *(_QWORD *)(v0 + 16);
  else
    v14 = v10;
  if (!v14)
    goto LABEL_17;
  OUTLINED_FUNCTION_19_28(v5, v6, v7, v8, v9);
  v1(0);
  v15 = (_QWORD *)OUTLINED_FUNCTION_24_29();
  v16 = _swift_stdlib_malloc_size(v15);
  if (!v3)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v16 - v4 == 0x8000000000000000 && v3 == -1)
    goto LABEL_22;
  v15[2] = v13;
  v15[3] = 2 * ((uint64_t)(v16 - v4) / v3);
LABEL_17:
  v18 = ((uint64_t (*)(_QWORD))v1)(0);
  v19 = OUTLINED_FUNCTION_33_19(v18);
  if ((v2 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v19, v20);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v19, v20);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_8_0();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_23_25();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_20_23();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_40_16();
  if (v5)
  {
    OUTLINED_FUNCTION_19_28(v9, v10, v11, v12, v13);
    v14 = (_QWORD *)OUTLINED_FUNCTION_12_34();
    v15 = _swift_stdlib_malloc_size(v14);
    v14[2] = v4;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 4);
  }
  v16 = OUTLINED_FUNCTION_37_14();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_164();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_23_25();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_20_23();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_40_16();
  if (v5)
  {
    OUTLINED_FUNCTION_19_28(v9, v10, v11, v12, v13);
    v14 = (_QWORD *)OUTLINED_FUNCTION_12_34();
    _swift_stdlib_malloc_size(v14);
    OUTLINED_FUNCTION_75_12();
    v14[2] = v4;
    v14[3] = v15;
  }
  v16 = OUTLINED_FUNCTION_37_14();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_164();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_23_25();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_20_23();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  OUTLINED_FUNCTION_40_16();
  if (v5)
  {
    OUTLINED_FUNCTION_19_28(v9, v10, v11, v12, v13);
    v14 = (_QWORD *)OUTLINED_FUNCTION_9_1();
    v15 = _swift_stdlib_malloc_size(v14);
    v14[2] = v4;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 24);
  }
  v16 = OUTLINED_FUNCTION_37_14();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_36_19();
  if ((v7 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v11 != v12)
    {
      OUTLINED_FUNCTION_20_23();
      if (v11)
      {
LABEL_23:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  else
  {
    v10 = v6;
  }
  v13 = *(_QWORD *)(v0 + 16);
  if (v10 <= v13)
    v14 = *(_QWORD *)(v0 + 16);
  else
    v14 = v10;
  if (!v14)
    goto LABEL_17;
  OUTLINED_FUNCTION_19_28(v5, v6, v7, v8, v9);
  __swift_instantiateConcreteTypeFromMangledName(v1);
  v15 = (_QWORD *)OUTLINED_FUNCTION_24_29();
  v16 = _swift_stdlib_malloc_size(v15);
  if (!v3)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v16 - v4 == 0x8000000000000000 && v3 == -1)
    goto LABEL_22;
  v15[2] = v13;
  v15[3] = 2 * ((uint64_t)(v16 - v4) / v3);
LABEL_17:
  v18 = __swift_instantiateConcreteTypeFromMangledName(v1);
  v19 = OUTLINED_FUNCTION_33_19(v18);
  if ((v2 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v19, v20);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v19, v20);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  OUTLINED_FUNCTION_36_19();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_20_23();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    OUTLINED_FUNCTION_19_28(v2, v3, v4, v5, v6);
    v12 = OUTLINED_FUNCTION_12_34();
    _swift_stdlib_malloc_size((const void *)v12);
    OUTLINED_FUNCTION_75_12();
    *(_QWORD *)(v12 + 16) = v10;
    *(_QWORD *)(v12 + 24) = v13;
  }
  else
  {
    v12 = MEMORY[0x24BEE4AF8];
  }
  v14 = (char *)(v0 + 32);
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v10, (char *)(v12 + 32));
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v14, v10);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_164();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(MLDataValue, MLDataValue)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Numeric>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NLLanguage>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, _QWORD *), uint64_t a7, void (*a8)(uint64_t, uint64_t, _QWORD *, uint64_t))
{
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;

  v12 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_8_35();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_20_23();
      if (v14)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_7_35();
    }
  }
  else
  {
    v13 = a2;
  }
  v16 = *(_QWORD *)(a4 + 16);
  if (v13 <= v16)
    v17 = *(_QWORD *)(a4 + 16);
  else
    v17 = v13;
  if (v17)
  {
    OUTLINED_FUNCTION_19_28(a1, a2, a3, a4, a5);
    v18 = (_QWORD *)OUTLINED_FUNCTION_12_34();
    v19 = _swift_stdlib_malloc_size(v18);
    v18[2] = v16;
    v18[3] = 2 * ((uint64_t)(v19 - 32) / 8);
  }
  else
  {
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v20 = v18 + 4;
  v21 = a4 + 32;
  if ((v12 & 1) != 0)
  {
    a6(v21, v16, v20);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a8(v21, v16, v20, a7);
  }
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_8_0();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = swift_allocObject();
    v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * v11 - 64;
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)();
  }
  swift_release();
  return v10;
}

unint64_t lazy protocol witness table accessor for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>;
  if (!lazy protocol witness table cache variable for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnnotatedFeature<URL, String>);
    v2[0] = lazy protocol witness table accessor for type URL and conformance URL();
    v2[1] = MEMORY[0x24BEE0D28];
    result = MEMORY[0x22075B938](MEMORY[0x24BDC5A20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnnotatedFeature<URL, String> and conformance <> AnnotatedFeature<A, B>);
  }
  return result;
}

uint64_t sub_21AEDD778()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in MLDataValue.MultiArrayType.init(from:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in MLDataValue.MultiArrayType.init(from:)(a1, v1);
}

void *OUTLINED_FUNCTION_1_37@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_41()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_3_38()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_4_44()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_9_31()
{
  uint64_t v0;

  return v0;
}

void *OUTLINED_FUNCTION_10_30(void *__dst, const void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t OUTLINED_FUNCTION_11_31()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_12_34()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_15_26()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_19_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return __swift_instantiateConcreteTypeFromMangledName(a5);
}

uint64_t OUTLINED_FUNCTION_22_21()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_24_29()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_25_21(void *a1, void *a2)
{
  void *v2;
  void *v3;

  outlined copy of MLDataValue(a1, a2, 2);
  outlined copy of MLDataValue(v2, v3, 2);
  outlined consume of MLDataValue(v2, v3, 2);
}

void OUTLINED_FUNCTION_26_25(uint64_t a1, uint64_t a2)
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2, 0);
}

id OUTLINED_FUNCTION_28_25(uint64_t a1, unsigned __int16 a2)
{
  return @nonobjc MLMultiArray.init(shape:dataType:)(a1, a2 | 0x10000u);
}

uint64_t OUTLINED_FUNCTION_29_20()
{
  return swift_arrayInitWithTakeFrontToBack();
}

uint64_t OUTLINED_FUNCTION_31_20()
{
  return swift_arrayInitWithTakeBackToFront();
}

uint64_t OUTLINED_FUNCTION_33_19(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v1 + ((v2 + 32) & ~v2);
}

void OUTLINED_FUNCTION_35_14(unint64_t a1@<X8>)
{
  uint64_t v1;

  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1, 1);
}

uint64_t OUTLINED_FUNCTION_37_14()
{
  uint64_t v0;

  return v0 + 32;
}

id OUTLINED_FUNCTION_41_15()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  outlined copy of MLDataValue(v2, v3, 5);
  return outlined copy of MLDataValue(v0, v1, 5);
}

id OUTLINED_FUNCTION_42_13()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  outlined copy of MLDataValue(v2, v3, 3);
  return outlined copy of MLDataValue(v0, v1, 3);
}

id OUTLINED_FUNCTION_43_15()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  outlined copy of MLDataValue(v2, v3, 4);
  return outlined copy of MLDataValue(v0, v1, 4);
}

uint64_t OUTLINED_FUNCTION_45_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return __swift_instantiateConcreteTypeFromMangledName(a4);
}

id OUTLINED_FUNCTION_46_12@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t OUTLINED_FUNCTION_48_14()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_51_15()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t OUTLINED_FUNCTION_54_12()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_55_14()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_60_12()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_62_15(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * ((result - 32) / 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_64_10()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_67_12()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t OUTLINED_FUNCTION_68_11()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

void OUTLINED_FUNCTION_69_8()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 5);
}

void OUTLINED_FUNCTION_70_12()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 3);
}

void OUTLINED_FUNCTION_71_9()
{
  void *v0;
  void *v1;

  outlined consume of MLDataValue(v0, v1, 4);
}

uint64_t OUTLINED_FUNCTION_72_9()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_73_9()
{
  JUMPOUT(0x22075AF48);
}

id OUTLINED_FUNCTION_74_9(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_77_8()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_80_8()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

id OUTLINED_FUNCTION_81_9(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_84_5()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_85_4()
{
  JUMPOUT(0x22075AF48);
}

uint64_t static MLSoundClassifier.ModelParameters.FeatureExtractorType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~(*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8));
}

unint64_t MLSoundClassifier.ModelParameters.FeatureExtractorType.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v4;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    OUTLINED_FUNCTION_1_7();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v1 = dispatch thunk of CustomStringConvertible.description.getter();
    v4 = 0xD000000000000031;
  }
  else
  {
    v1 = dispatch thunk of CustomStringConvertible.description.getter();
    v4 = 0xD000000000000010;
  }
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLSoundClassifier.ModelParameters.FeatureExtractorType.validate()()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *v0;
  if ((v0[1] & 1) != 0)
  {
    if (v1 == 1)
      return;
    OUTLINED_FUNCTION_1_7();
    _StringGuts.grow(_:)(58);
    v2._countAndFlagsBits = 0xD000000000000026;
    v2._object = (void *)0x800000021AFF5840;
    String.append(_:)(v2);
  }
  else
  {
    if (v1 == 1)
      return;
    OUTLINED_FUNCTION_1_7();
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    v6 = 0xD000000000000019;
    v7 = 0x800000021AFF5870;
  }
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x800000021AFF1BD0;
  v4._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
  swift_allocError();
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_BYTE *)(v5 + 48) = 0;
  swift_willThrow(0.0);
}

uint64_t getEnumTag for MLSoundClassifier.ModelParameters.FeatureExtractorType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for MLSoundClassifier.ModelParameters.FeatureExtractorType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MLSoundClassifier.ModelParameters.FeatureExtractorType()
{
  return &type metadata for MLSoundClassifier.ModelParameters.FeatureExtractorType;
}

id MLMultiArray.cast(to:)(id a1)
{
  void *v1;
  uint64_t v2;
  id v4;
  id result;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;

  v4 = objc_msgSend(v1, sel_dataType);
  if (v4 == (id)65600)
  {
    if (a1 != (id)65568)
    {
LABEL_12:
      if (v4 == a1)
        return v1;
      _StringGuts.grow(_:)(56);
      v7._object = (void *)0x800000021AFF58B0;
      v7._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v7);
      objc_msgSend(v1, sel_dataType);
      type metadata accessor for MLMultiArrayDataType(0);
      OUTLINED_FUNCTION_0_45();
      v8._countAndFlagsBits = 0x60206F742060;
      v8._object = (void *)0xE600000000000000;
      String.append(_:)(v8);
      OUTLINED_FUNCTION_0_45();
      v9._countAndFlagsBits = 0xD00000000000001DLL;
      v9._object = (void *)0x800000021AFF58D0;
      String.append(_:)(v9);
      result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    MEMORY[0x24BDAC7A8](65600);
    OUTLINED_FUNCTION_1_38();
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  }
  else
  {
    if (v4 != (id)65568 || a1 != (id)65600)
      goto LABEL_12;
    MEMORY[0x24BDAC7A8](v4);
    OUTLINED_FUNCTION_1_38();
    type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  }
  result = (id)MLMultiArray.withUnsafeBytes<A>(_:)();
  if (!v2)
    return (id)v10;
  return result;
}

uint64_t static Int32.mlMultiArrayDataType.getter()
{
  return 131104;
}

uint64_t static Float.mlMultiArrayDataType.getter()
{
  return 65568;
}

uint64_t static Double.mlMultiArrayDataType.getter()
{
  return 65600;
}

uint64_t closure #1 in MLMultiArray.cast(to:)@<X0>(id a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t result;
  uint64_t v8;

  v4 = objc_msgSend(a1, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  result = (uint64_t)@nonobjc MLMultiArray.init(shape:dataType:)(v5, 65600);
  if (!v2)
  {
    v8 = result;
    MEMORY[0x24BDAC7A8](result);
    result = MLMultiArray.withUnsafeMutableBytes<A>(_:)();
    *a2 = v8;
  }
  return result;
}

void closure #1 in closure #1 in MLMultiArray.cast(to:)(double *__C, uint64_t a2, int a3, const float *__A, int64_t a5)
{
  uint64_t v5;

  if (__C)
    v5 = (a2 - (uint64_t)__C) / 8;
  else
    v5 = 0;
  if (v5 < a5)
    a5 = v5;
  if (a5 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!__A)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__C)
  {
    vDSP_vspdp(__A, 1, __C, 1, a5);
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t closure #2 in MLMultiArray.cast(to:)@<X0>(id a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t result;
  uint64_t v8;

  v4 = objc_msgSend(a1, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  result = (uint64_t)@nonobjc MLMultiArray.init(shape:dataType:)(v5, 65568);
  if (!v2)
  {
    v8 = result;
    MEMORY[0x24BDAC7A8](result);
    result = MLMultiArray.withUnsafeMutableBytes<A>(_:)();
    *a2 = v8;
  }
  return result;
}

void closure #1 in closure #2 in MLMultiArray.cast(to:)(float *__C, uint64_t a2, int a3, const double *__A, int64_t a5)
{
  uint64_t v5;

  if (__C)
    v5 = (a2 - (uint64_t)__C) / 4;
  else
    v5 = 0;
  if (v5 < a5)
    a5 = v5;
  if (a5 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!__A)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__C)
  {
    vDSP_vdpsp(__A, 1, __C, 1, a5);
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t partial apply for closure #2 in MLMultiArray.cast(to:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #2 in MLMultiArray.cast(to:)(*(id *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in MLMultiArray.cast(to:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in MLMultiArray.cast(to:)(*(id *)(v1 + 16), a1);
}

void partial apply for closure #1 in closure #1 in MLMultiArray.cast(to:)(double *a1, uint64_t a2, int a3)
{
  uint64_t v3;

  closure #1 in closure #1 in MLMultiArray.cast(to:)(a1, a2, a3, *(const float **)(v3 + 16), *(_QWORD *)(v3 + 24));
}

void partial apply for closure #1 in closure #2 in MLMultiArray.cast(to:)(float *a1, uint64_t a2, int a3)
{
  uint64_t v3;

  closure #1 in closure #2 in MLMultiArray.cast(to:)(a1, a2, a3, *(const double **)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t OUTLINED_FUNCTION_0_45()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = OUTLINED_FUNCTION_24_30(a1, a2), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  else
    return 0;
}

void specialized Dictionary.subscript.getter(unsigned int a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v2 & 1) != 0)
      swift_retain();
  }
  OUTLINED_FUNCTION_22();
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, (uint64_t (*)(void))specialized __RawDictionaryStorage.find<A>(_:), (void (*)(uint64_t))outlined init with copy of Any, a2);
}

{
  return specialized Dictionary.subscript.getter(a1, (uint64_t (*)(void))specialized __RawDictionaryStorage.find<A>(_:), (void (*)(uint64_t))outlined init with copy of Any, a2);
}

void specialized Dictionary.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a3 + 16) && (v5 = OUTLINED_FUNCTION_24_30(a1, a2), (v6 & 1) != 0))
  {
    v7 = OUTLINED_FUNCTION_32_17(v5);
    OUTLINED_FUNCTION_22_22(v7, v8);
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    OUTLINED_FUNCTION_22();
  }
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    OUTLINED_FUNCTION_24_30(a1, a2);
    if ((v3 & 1) != 0)
      OUTLINED_FUNCTION_48_15();
  }
  OUTLINED_FUNCTION_22();
}

{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    OUTLINED_FUNCTION_24_30(a1, a2);
    if ((v3 & 1) != 0)
      swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_22();
}

{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    OUTLINED_FUNCTION_24_30(a1, a2);
    if ((v3 & 1) != 0)
      swift_unknownObjectRetain();
  }
  OUTLINED_FUNCTION_22();
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X1>, uint64_t (*a2)(void)@<X2>, void (*a3)(uint64_t)@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  double result;

  if (*(_QWORD *)(a1 + 16) && (v5 = a2(), (v6 & 1) != 0))
  {
    v7 = OUTLINED_FUNCTION_32_17(v5);
    a3(v7);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

void specialized Dictionary.subscript.getter(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16) && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(), (v4 & 1) != 0))
  {
    v5 = OUTLINED_FUNCTION_32_17(v3);
    OUTLINED_FUNCTION_22_22(v5, v6);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
    OUTLINED_FUNCTION_22();
  }
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)();
    if ((v2 & 1) != 0)
      OUTLINED_FUNCTION_48_15();
  }
  OUTLINED_FUNCTION_22();
}

uint64_t MLDataTable.Row.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  char v13;

  v5 = *(_QWORD *)(v3 + 8);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_6;
  v7 = result;
  OUTLINED_FUNCTION_49_11();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, a2);
  if ((v9 & 1) == 0)
  {
    result = OUTLINED_FUNCTION_15_0();
LABEL_6:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v11 = -1;
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v8);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_46_8();
  OUTLINED_FUNCTION_27_31(v10);
  OUTLINED_FUNCTION_5_34();
  if (!a2)
  {
    OUTLINED_FUNCTION_40_10();
    result = OUTLINED_FUNCTION_81();
    v11 = v13;
    *(_OWORD *)a3 = v12;
LABEL_7:
    *(_BYTE *)(a3 + 16) = v11;
    return result;
  }
  result = OUTLINED_FUNCTION_1_39();
  __break(1u);
  return result;
}

uint64_t MLDataTable.Row.Values.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t result;

  OUTLINED_FUNCTION_122();
  v0 = OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_5_1(v0);
  v2 = v1;
  OUTLINED_FUNCTION_122();
  v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v3);
  v5 = v4;
  OUTLINED_FUNCTION_217();
  if (v5 < 0)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_122();
  v6 = OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_5_1(v6);
  v8 = v7;
  OUTLINED_FUNCTION_30_21();
  if (v2 < 0 || v8 < v2)
    goto LABEL_21;
  if (v2 >= 10)
    v9 = 10;
  else
    v9 = v2;
  if (v9)
  {
    v10 = 0;
    while (v9 != v10)
    {
      if (v10)
        OUTLINED_FUNCTION_45_16();
      OUTLINED_FUNCTION_46_8();
      CMLSequence.value(at:)(v10);
      OUTLINED_FUNCTION_217();
      ++v10;
      OUTLINED_FUNCTION_40_10();
      OUTLINED_FUNCTION_217();
      MLDataValue.description.getter();
      v12 = v11;
      v14 = v13;
      OUTLINED_FUNCTION_31_21();
      v15._countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      if (v9 == v10)
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_13:
  OUTLINED_FUNCTION_122();
  v16 = OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_5_1(v16);
  v18 = v17;
  OUTLINED_FUNCTION_122();
  v19 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v19);
  v21 = v20;
  OUTLINED_FUNCTION_217();
  if (v21 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    result = OUTLINED_FUNCTION_1_39();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_122();
  v22 = OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_5_1(v22);
  v24 = v23;
  OUTLINED_FUNCTION_30_21();
  if (v18 < 0 || v24 < v18)
    goto LABEL_23;
  if (v9 < v18)
  {
    v25._countAndFlagsBits = 0x2E2E2E202CLL;
    v25._object = (void *)0xE500000000000000;
    String.append(_:)(v25);
  }
  OUTLINED_FUNCTION_34_13();
  return 91;
}

uint64_t MLDataTable.Row.keys.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return OUTLINED_FUNCTION_19_29(*v1, a1);
}

uint64_t MLDataTable.Row.values.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return OUTLINED_FUNCTION_19_29(*(_QWORD *)(v1 + 16), a1);
}

Swift::Int_optional __swiftcall MLDataTable.Row.index(forKey:)(Swift::String forKey)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v5;
  char v6;
  Swift::Int v7;
  char v8;
  Swift::Bool v9;
  Swift::Int v10;
  Swift::Int_optional result;

  v2 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)(v2 + 16))
  {
    object = forKey._object;
    countAndFlagsBits = forKey._countAndFlagsBits;
    OUTLINED_FUNCTION_49_11();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if ((v6 & 1) != 0)
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5);
    else
      v7 = 0;
    v8 = v6 ^ 1;
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = v8 & 1;
  v10 = v7;
  result.value = v10;
  result.is_nil = v9;
  return result;
}

void MLDataTable.Row.Values.subscript.getter(uint64_t a1)
{
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_27_31(a1);
  OUTLINED_FUNCTION_5_34();
  if (a1)
  {
    OUTLINED_FUNCTION_1_39();
    __break(1u);
  }
  else
  {
    MLDataValue.init(_:)();
  }
}

uint64_t MLDataTable.Row.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;

  v8 = *(_QWORD *)(v5 + 8);
  if (!*(_QWORD *)(v8 + 16))
    return __swift_storeEnumTagSinglePayload(a5, 1, 1, a3);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_84();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v13 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    OUTLINED_FUNCTION_15_0();
    return __swift_storeEnumTagSinglePayload(a5, 1, 1, a3);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v12);
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_46_8();
  OUTLINED_FUNCTION_27_31(v14);
  swift_release();
  if (a2)
  {
    result = OUTLINED_FUNCTION_1_39();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_40_10();
    swift_bridgeObjectRelease();
    swift_release();
    OUTLINED_FUNCTION_30_21();
    return (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(a4 + 16))(&v16, a3, a4);
  }
  return result;
}

uint64_t static MLDataTable.Row.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_3_1();
  v4 = specialized Sequence<>.elementsEqual<A>(_:)();
  OUTLINED_FUNCTION_217();
  OUTLINED_FUNCTION_4_2();
  if ((v4 & 1) != 0)
  {
    v7 = v3;
    v8 = v2;
    v5 = static MLDataTable.Row.Values.== infix(_:_:)(&v8, &v7);
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t static MLDataTable.Row.Values.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  void *v31;
  void *v32;
  char v33;
  void *v34;
  void *v35;
  char v36;

  v3 = *a1;
  v4 = *a2;
  OUTLINED_FUNCTION_139();
  v5 = OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_5_1(v5);
  v7 = v6;
  OUTLINED_FUNCTION_139();
  v8 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v8);
  OUTLINED_FUNCTION_9_32();
  if (v2 < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_139();
  v9 = OUTLINED_FUNCTION_108();
  OUTLINED_FUNCTION_5_1(v9);
  v11 = v10;
  OUTLINED_FUNCTION_30_21();
  if (v7 < 0 || v11 < v7)
    goto LABEL_20;
  OUTLINED_FUNCTION_51_0();
  v12 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v12);
  v14 = v13;
  OUTLINED_FUNCTION_51_0();
  v15 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v15);
  OUTLINED_FUNCTION_5_34();
  if ((v4 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_51_0();
    v16 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v16);
    v18 = v17;
    OUTLINED_FUNCTION_30_21();
    if (v14 < 0 || v18 < v14)
      goto LABEL_22;
    if (v7 == v14)
    {
      OUTLINED_FUNCTION_139();
      v19 = OUTLINED_FUNCTION_108();
      OUTLINED_FUNCTION_5_1(v19);
      if (v20)
      {
        v21 = 0;
        v30 = v3;
        while (1)
        {
          OUTLINED_FUNCTION_139();
          CMLSequence.value(at:)(v21);
          OUTLINED_FUNCTION_9_32();
          OUTLINED_FUNCTION_40_10();
          v22 = v34;
          v23 = v35;
          v24 = v36;
          OUTLINED_FUNCTION_139();
          v25 = OUTLINED_FUNCTION_108();
          OUTLINED_FUNCTION_5_1(v25);
          OUTLINED_FUNCTION_9_32();
          if (v21 >= v3)
            break;
          v34 = v22;
          v35 = v23;
          v36 = v24;
          OUTLINED_FUNCTION_46_8();
          OUTLINED_FUNCTION_47_16();
          OUTLINED_FUNCTION_5_34();
          OUTLINED_FUNCTION_40_10();
          OUTLINED_FUNCTION_81();
          static MLDataValue.== infix(_:_:)((uint64_t)&v34);
          v27 = v26;
          outlined consume of MLDataValue(v31, v32, v33);
          outlined consume of MLDataValue(v22, v23, v24);
          if ((v27 & 1) != 0)
          {
            ++v21;
            v3 = v30;
            OUTLINED_FUNCTION_139();
            v28 = OUTLINED_FUNCTION_108();
            OUTLINED_FUNCTION_5_1(v28);
            OUTLINED_FUNCTION_9_32();
            if ((void *)v21 != v31)
              continue;
          }
          goto LABEL_16;
        }
        __break(1u);
        goto LABEL_19;
      }
      v27 = 1;
LABEL_16:
      swift_release();
    }
    else
    {
      v27 = 0;
    }
    return v27 & 1;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  result = OUTLINED_FUNCTION_1_39();
  __break(1u);
  return result;
}

void MLDataTable.Row.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_3_1();
  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v0);
  v2 = v1;
  OUTLINED_FUNCTION_3_1();
  v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v3);
  v5 = v4;
  OUTLINED_FUNCTION_4_2();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    v6 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v6);
    v8 = v7;
    OUTLINED_FUNCTION_30_21();
    if ((v2 & 0x8000000000000000) == 0 && v8 >= v2)
    {
      OUTLINED_FUNCTION_125();
      return;
    }
  }
  __break(1u);
}

uint64_t MLDataTable.Row.isEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_46_8();
  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v0);
  v2 = v1;
  OUTLINED_FUNCTION_3_1();
  v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v3);
  v5 = v4;
  result = OUTLINED_FUNCTION_4_2();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    v7 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v7);
    v9 = v8;
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_217();
    result = OUTLINED_FUNCTION_39_14();
    if ((v2 & 0x8000000000000000) == 0 && v9 >= v2)
      return v2 == 0;
  }
  __break(1u);
  return result;
}

uint64_t MLDataTable.Row.startIndex.getter()
{
  return 0;
}

uint64_t MLDataTable.Row.endIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_46_8();
  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v0);
  v2 = v1;
  OUTLINED_FUNCTION_3_1();
  v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v3);
  v5 = v4;
  result = OUTLINED_FUNCTION_4_2();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_3_1();
    v7 = CMLSequence.size.getter();
    OUTLINED_FUNCTION_5_1(v7);
    v9 = v8;
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_217();
    result = OUTLINED_FUNCTION_39_14();
    if ((v2 & 0x8000000000000000) == 0 && v9 >= v2)
      return v2;
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall MLDataTable.Row.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t MLDataTable.Row.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = MLDataTable.ColumnNames.subscript.getter(a2);
  OUTLINED_FUNCTION_122();
  OUTLINED_FUNCTION_27_31(a2);
  if (a2)
  {
    result = OUTLINED_FUNCTION_1_39();
    __break(1u);
  }
  else
  {
    MLDataValue.init(_:)();
    OUTLINED_FUNCTION_217();
    return v3;
  }
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance MLDataTable.Row(uint64_t *a1@<X8>)
{
  *a1 = MLDataTable.Row.endIndex.getter();
  OUTLINED_FUNCTION_22();
}

void (*protocol witness for Collection.subscript.read in conformance MLDataTable.Row(_QWORD *a1, uint64_t *a2))(uint64_t a1)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;

  v4 = malloc(0x68uLL);
  *a1 = v4;
  v5 = MLDataTable.Row.subscript.getter((uint64_t)v4 + 16, *a2);
  *((_QWORD *)v4 + 5) = v5;
  *(_QWORD *)v4 = v5;
  *((_QWORD *)v4 + 1) = v6;
  v7 = (void *)*((_QWORD *)v4 + 2);
  v8 = (void *)*((_QWORD *)v4 + 3);
  *((_QWORD *)v4 + 10) = v6;
  *((_QWORD *)v4 + 11) = v7;
  *((_QWORD *)v4 + 12) = v8;
  v9 = *((_BYTE *)v4 + 32);
  *((_BYTE *)v4 + 33) = v9;
  *((_QWORD *)v4 + 6) = v6;
  *((_QWORD *)v4 + 7) = v7;
  *((_QWORD *)v4 + 8) = v8;
  *((_BYTE *)v4 + 72) = v9;
  OUTLINED_FUNCTION_49_11();
  outlined copy of MLDataValue(v7, v8, v9);
  return protocol witness for Collection.subscript.read in conformance MLDataTable.Row;
}

void protocol witness for Collection.subscript.read in conformance MLDataTable.Row(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  char v4;

  v1 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 88);
  v2 = *(void **)(*(_QWORD *)a1 + 96);
  v4 = *(_BYTE *)(*(_QWORD *)a1 + 33);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_31_21();
  OUTLINED_FUNCTION_101();
  outlined consume of MLDataValue(v3, v2, v4);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance MLDataTable.Row@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return specialized Collection<>.subscript.getter(*a1, a1[1], *v2, v2[1], v2[2], a2);
}

void protocol witness for Collection.indices.getter in conformance MLDataTable.Row(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  specialized Collection<>.indices.getter(*v1, v1[1], v1[2], a1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance MLDataTable.Row@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = specialized Collection.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance MLDataTable.Row@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance MLDataTable.Row(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

{
  return protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized Collection._failEarlyRangeCheck(_:bounds:));
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v5;

  return a5(*a1, *a2, a2[1], *v5, v5[1], v5[2]);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1]);
}

void protocol witness for Collection.index(after:) in conformance MLDataTable.Row(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  *a2 = MLDataTable.Row.index(after:)(*a1);
  OUTLINED_FUNCTION_22();
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance MLDataTable.Row(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance MLDataTable.Row@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = 0;
  return result;
}

void protocol witness for Sequence.underestimatedCount.getter in conformance MLDataTable.Row()
{
  specialized Collection.underestimatedCount.getter();
}

void protocol witness for Sequence._copyToContiguousArray() in conformance MLDataTable.Row()
{
  uint64_t *v0;

  specialized Collection._copyToContiguousArray()(*v0, v0[1], v0[2]);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataTable.Row(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t MLDataTable.Row.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char v28;

  v1 = *(_QWORD *)(v0 + 16);
  OUTLINED_FUNCTION_46_8();
  v2 = OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_5_1(v2);
  v4 = v3;
  OUTLINED_FUNCTION_217();
  if (v4)
  {
    v5 = 0;
    while (1)
    {
      v6 = MLDataTable.ColumnNames.subscript.getter(v5);
      v8 = v7;
      OUTLINED_FUNCTION_122();
      v9 = OUTLINED_FUNCTION_140();
      OUTLINED_FUNCTION_5_1(v9);
      v11 = v10;
      OUTLINED_FUNCTION_217();
      if (v5 >= v11)
        break;
      v12._countAndFlagsBits = v6;
      v12._object = v8;
      String.append(_:)(v12);
      OUTLINED_FUNCTION_104();
      swift_bridgeObjectRetain();
      v13._countAndFlagsBits = 540680226;
      v13._object = (void *)0xE400000000000000;
      String.append(_:)(v13);
      OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_46_8();
      OUTLINED_FUNCTION_47_16();
      OUTLINED_FUNCTION_5_34();
      OUTLINED_FUNCTION_40_10();
      v14 = v1;
      OUTLINED_FUNCTION_81();
      MLDataValue.description.getter();
      v16 = v15;
      v18 = v17;
      outlined consume of MLDataValue((void *)0x22, (id)0xE100000000000000, v28);
      swift_bridgeObjectRetain();
      v19._countAndFlagsBits = v16;
      v19._object = v18;
      String.append(_:)(v19);
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_104();
      v20._countAndFlagsBits = 34;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_122();
      v21 = OUTLINED_FUNCTION_140();
      OUTLINED_FUNCTION_5_1(v21);
      v23 = v22;
      OUTLINED_FUNCTION_217();
      if (__OFSUB__(v23, 1))
        goto LABEL_11;
      if (v5 < v23 - 1)
        OUTLINED_FUNCTION_45_16();
      ++v5;
      OUTLINED_FUNCTION_122();
      v24 = OUTLINED_FUNCTION_140();
      OUTLINED_FUNCTION_5_1(v24);
      v26 = v25;
      OUTLINED_FUNCTION_217();
      v1 = v14;
      if (v5 == v26)
        goto LABEL_9;
    }
    __break(1u);
LABEL_11:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
LABEL_9:
    OUTLINED_FUNCTION_217();
    OUTLINED_FUNCTION_34_13();
    return 91;
  }
  return result;
}

uint64_t MLDataTable.Row.debugDescription.getter()
{
  return OUTLINED_FUNCTION_17_23();
}

void MLDataTable.Row.playgroundDescription.getter(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_17_23();
  v2 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  OUTLINED_FUNCTION_14_27();
  v4 = v3;
  OUTLINED_FUNCTION_46_13(v3, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  a1[3] = v5;
  *a1 = v4;
}

uint64_t MLDataTable.Row.Values.startIndex.getter()
{
  return 0;
}

void MLDataTable.Row.Values.endIndex.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_3_1();
  v0 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v0);
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_22();
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance MLDataTable.Row.Values(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    swift_retain();
    v3 = CMLSequence.size.getter();
    specialized RandomAccessCollection<>.distance(from:to:)(0, v3);
    v5 = v4;
    result = (uint64_t *)swift_release();
    if ((v1 & 0x8000000000000000) == 0 && v1 < v5)
    {
      *v2 = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance MLDataTable.Row.Values(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;

  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *v2);
}

void protocol witness for Collection.endIndex.getter in conformance MLDataTable.Row.Values(_QWORD *a1@<X8>)
{
  uint64_t v2;

  MLDataTable.Row.Values.endIndex.getter();
  *a1 = v2;
  OUTLINED_FUNCTION_22();
}

void protocol witness for Collection.subscript.read in conformance MLDataTable.Row.Values(uint64_t a1, uint64_t *a2)
{
  MLDataTable.Row.Values.subscript.getter(*a2);
  OUTLINED_FUNCTION_22();
}

uint64_t protocol witness for Collection.count.getter in conformance MLDataTable.Row.Values()
{
  _QWORD *v0;

  return specialized Collection.count.getter(*v0);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance MLDataTable.Row.Values(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;

  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1], *v2);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance MLDataTable.Row.Values(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  swift_retain();
  v3 = CMLSequence.size.getter();
  OUTLINED_FUNCTION_5_1(v3);
  v5 = v4;
  result = swift_release();
  if (v2 < 0 || v2 >= v5)
    __break(1u);
  else
    *a1 = v2 + 1;
  return result;
}

void protocol witness for Sequence._copyToContiguousArray() in conformance MLDataTable.Row.Values()
{
  uint64_t *v0;

  specialized Collection._copyToContiguousArray()(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MLDataTable.Row.Values(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t MLDataTable.Row.Values.debugDescription.getter()
{
  return OUTLINED_FUNCTION_29_21();
}

void MLDataTable.Row.Values.playgroundDescription.getter(uint64_t *a1@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_29_21();
  v2 = objc_allocWithZone(MEMORY[0x24BDD1458]);
  OUTLINED_FUNCTION_14_27();
  v4 = v3;
  OUTLINED_FUNCTION_46_13(v3, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  a1[3] = v5;
  *a1 = v4;
}

unint64_t lazy protocol witness table accessor for type MLDataTable.Row and conformance MLDataTable.Row()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.Row and conformance MLDataTable.Row;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row and conformance MLDataTable.Row)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.Row, &type metadata for MLDataTable.Row);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Row and conformance MLDataTable.Row);
  }
  return result;
}

void associated type witness table accessor for Collection.Indices : Collection in MLDataTable.Row()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type DefaultIndices<MLDataTable.Row> and conformance DefaultIndices<A>);
}

void associated type witness table accessor for Collection.SubSequence : Collection in MLDataTable.Row()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataTable.Row> and conformance Slice<A>);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataTable.Row()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type IndexingIterator<MLDataTable.Row> and conformance IndexingIterator<A>);
}

unint64_t lazy protocol witness table accessor for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.Row.Values, &type metadata for MLDataTable.Row.Values);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.Row.Values, &type metadata for MLDataTable.Row.Values);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.Row.Values, &type metadata for MLDataTable.Row.Values);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values;
  if (!lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values)
  {
    result = MEMORY[0x22075B938](&protocol conformance descriptor for MLDataTable.Row.Values, &type metadata for MLDataTable.Row.Values);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLDataTable.Row.Values and conformance MLDataTable.Row.Values);
  }
  return result;
}

void associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in MLDataTable.Row.Values()
{
  lazy protocol witness table accessor for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>);
}

void associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in MLDataTable.Row.Values()
{
  lazy protocol witness table accessor for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>);
}

void lazy protocol witness table accessor for type Slice<MLDataTable.Row.Values> and conformance <> Slice<A>(uint64_t a1)
{
  unint64_t *v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;

  if (!OUTLINED_FUNCTION_41_10(a1))
  {
    v4 = v3;
    v5 = v2;
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<MLDataTable.Row.Values>);
    v7 = v5();
    atomic_store(MEMORY[0x22075B938](v4, v6, &v7), v1);
  }
  OUTLINED_FUNCTION_27_0();
}

void associated type witness table accessor for Collection.SubSequence : Collection in MLDataTable.Row.Values()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type Slice<MLDataTable.Row.Values> and conformance Slice<A>);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MLDataTable.Row.Values()
{
  lazy protocol witness table accessor for type Slice<MLDataValue.SequenceType> and conformance Slice<A>((uint64_t)&lazy protocol witness table cache variable for type IndexingIterator<MLDataTable.Row.Values> and conformance IndexingIterator<A>);
}

uint64_t destroy for MLDataTable.Row()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

void initializeBufferWithCopyOfBuffer for MLDataTable.Row(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_125();
}

_QWORD *assignWithCopy for MLDataTable.Row(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MLDataTable.Row(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MLDataTable.Row()
{
  return &type metadata for MLDataTable.Row;
}

ValueMetadata *type metadata accessor for MLDataTable.Row.Values()
{
  return &type metadata for MLDataTable.Row.Values;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;

  Hasher.init(_seed:)();
  MLDataValue.hash(into:)();
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x22075B29C](*(_QWORD *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

void specialized __RawDictionaryStorage.find<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_18_23();
  type metadata accessor for MetricsKey();
  lazy protocol witness table accessor for type MetricsKey and conformance MetricsKey((uint64_t)&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey);
  v0 = OUTLINED_FUNCTION_30_22();
  OUTLINED_FUNCTION_25_22(v0, v0, v1, (uint64_t)&lazy protocol witness table cache variable for type MetricsKey and conformance MetricsKey, MEMORY[0x24BDC5828]);
  OUTLINED_FUNCTION_164();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_18_23();
  type metadata accessor for URL();
  lazy protocol witness table accessor for type MetricsKey and conformance MetricsKey((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  v0 = OUTLINED_FUNCTION_30_22();
  OUTLINED_FUNCTION_25_22(v0, v0, v1, (uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB00]);
  OUTLINED_FUNCTION_164();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_18_23();
  type metadata accessor for CodingUserInfoKey();
  v1 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_35_15();
  OUTLINED_FUNCTION_23_26();
  OUTLINED_FUNCTION_36_20();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_41_16();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v1, v0);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  Swift::Int v2;
  _BYTE v4[72];

  OUTLINED_FUNCTION_50_13();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v4, a1);
  v2 = OUTLINED_FUNCTION_3_4();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v5 = -1 << *(_BYTE *)(v4 + 32);
  v6 = a4 & ~v5;
  if (((*(_QWORD *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
    __asm { BR              X8 }
  return a4 & ~v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x22075AE88](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v20 = a4;
  v21 = a5;
  v6 = v5;
  v19[0] = a1;
  v19[1] = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v19 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      lazy protocol witness table accessor for type MetricsKey and conformance MetricsKey(v20);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

void _sSo18NSAttributedStringCMaTm_0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    objc_opt_self();
    atomic_store(swift_getObjCClassMetadata(), a2);
  }
  OUTLINED_FUNCTION_22();
}

void lazy protocol witness table accessor for type MetricsKey and conformance MetricsKey(uint64_t a1)
{
  void (*v1)(uint64_t);

  if (!OUTLINED_FUNCTION_41_10(a1))
  {
    v1(255);
    OUTLINED_FUNCTION_62();
  }
  OUTLINED_FUNCTION_22();
}

uint64_t OUTLINED_FUNCTION_1_39()
{
  return swift_unexpectedError();
}

uint64_t OUTLINED_FUNCTION_5_34()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_9_32()
{
  return swift_release();
}

void OUTLINED_FUNCTION_14_27()
{
  uint64_t v0;
  uint64_t v1;

  @nonobjc NSAttributedString.init(string:attributes:)(v0, v1, 0);
}

uint64_t OUTLINED_FUNCTION_17_23()
{
  return MLDataTable.Row.description.getter();
}

uint64_t OUTLINED_FUNCTION_18_23()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_19_29@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_22_22(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of Any(a1, a2);
}

uint64_t OUTLINED_FUNCTION_23_26()
{
  return Hasher.init(_seed:)();
}

unint64_t OUTLINED_FUNCTION_24_30(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
}

unint64_t OUTLINED_FUNCTION_25_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t (*v6)(_QWORD);

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v5, a2, v6, a4, a5);
}

void OUTLINED_FUNCTION_27_31(uint64_t a1)
{
  CMLSequence.value(at:)(a1);
}

uint64_t OUTLINED_FUNCTION_29_21()
{
  return MLDataTable.Row.Values.description.getter();
}

uint64_t OUTLINED_FUNCTION_30_22()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

void OUTLINED_FUNCTION_31_21()
{
  void *v0;
  void *v1;
  char v2;

  outlined consume of MLDataValue(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_32_17(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 56) + 32 * a1;
}

uint64_t OUTLINED_FUNCTION_35_15()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_36_20()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_39_14()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_41_16()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_45_16()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_46_13(uint64_t a1, unint64_t *a2)
{
  _sSo18NSAttributedStringCMaTm_0(0, a2);
}

void OUTLINED_FUNCTION_47_16()
{
  uint64_t v0;

  CMLSequence.value(at:)(v0);
}

uint64_t OUTLINED_FUNCTION_48_15()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_49_11()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_50_13()
{
  return Hasher.init(_seed:)();
}

uint64_t MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 + 48) = a1;
  *(_QWORD *)(v4 + 56) = a4;
  v5 = *a2;
  *(_BYTE *)(v4 + 25) = *((_BYTE *)a2 + 8);
  v6 = *a3;
  *(_QWORD *)(v4 + 64) = v5;
  *(_QWORD *)(v4 + 72) = v6;
  *(_BYTE *)(v4 + 26) = *((_BYTE *)a3 + 8);
  return swift_task_switch();
}

uint64_t MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)()
{
  uint64_t v0;
  char v1;
  char v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  id v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_BYTE *)(v0 + 26);
  v2 = *(_BYTE *)(v0 + 25);
  v3 = *(void **)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(uint64_t **)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6[2] = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFC8]), sel_init);
  v7 = OUTLINED_FUNCTION_13_38();
  MLClassifierMetrics.init()(v7, v8, v9, v10, v11, v12, v13, v14, (uint64_t)v30, v31, (uint64_t)v32, v33, v34, v35, v36, v37, v38, v39, v40,
    v41);
  MLClassifierMetrics.init()(v15, v16, v17, v18, v19, v20, v21, v22, (uint64_t)v30, v31, (uint64_t)v32, v33, v34, v35, v36, v37, v38, v39, v40,
    v41);
  outlined init with copy of MLTrainingSessionParameters(v5, (uint64_t)v6 + *(int *)(v7 + 28), type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined copy of Result<_DataTable, Error>(v3, v2);
  OUTLINED_FUNCTION_44_12();
  specialized MLDataTable.subscript.getter((char)v3, v2, v23, v24);
  OUTLINED_FUNCTION_149_0();
  v25 = v32;
  v26 = v33;
  specialized MLDataColumn.dropDuplicates()(v32, v33, (uint64_t)&v30);
  outlined consume of Result<_DataTable, Error>(v25, v26);
  *v6 = specialized Array<A>.init(_:)(v30, v31);
  v27 = OUTLINED_FUNCTION_8_36();
  *(_QWORD *)(v0 + 80) = v27;
  *(_DWORD *)(v0 + 28) = *(_DWORD *)(v27 + 28);
  type metadata accessor for MLHandActionClassifier.GraphCNN(0);
  swift_allocObject();
  OUTLINED_FUNCTION_31_2();
  v6[1] = (uint64_t)MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
  *(_QWORD *)(v0 + 16) = v3;
  *(_BYTE *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = v1;
  v28 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v28;
  *v28 = v0;
  v28[1] = MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:);
  return MLHandActionClassifier.runTrainingLoop(trainingData:validationData:loadPretrain:)((uint64_t *)(v0 + 16), v0 + 32);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_149_0();
  return OUTLINED_FUNCTION_70();
}

{
  uint64_t v0;
  uint64_t v1;

  if ((AnalyticsReporter.init()() & 1) == 0)
  {
    v1 = MLDataTable.size.getter();
    OUTLINED_FUNCTION_38_17((uint64_t)"Number of Frames", (float)v1);
  }
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 56), type metadata accessor for MLHandActionClassifier.ModelParameters);
  OUTLINED_FUNCTION_149_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  char v1;
  void *v2;
  uint64_t v3;

  v1 = *(_BYTE *)(v0 + 25);
  v2 = *(void **)(v0 + 64);
  outlined destroy of MLHandPoseClassifier.ModelParameters(*(_QWORD *)(v0 + 56), type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined consume of Result<_DataTable, Error>(v2, v1);
  OUTLINED_FUNCTION_44_15(v3, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

void MLHandActionClassifier.evaluation(on:parameters:)()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  double *v21;

  OUTLINED_FUNCTION_8_1();
  v17 = v4;
  v6 = v5;
  v21 = v7;
  v8 = type metadata accessor for LearningPhase();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_161();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataset<[(label: Int, keypoints: MLMultiArray)], DataSample<Tensor, Tensor>>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_14_5();
  v12 = *((_BYTE *)v6 + 8);
  v18 = v0;
  v19 = *v6;
  v20 = v12;
  v13 = (_QWORD *)*v0;
  static MLHandActionClassifier.makeLabeledKeypointsSequenceFeatures(from:classLabels:)((uint64_t)&v19, v13);
  if (v1)
  {
    *(_QWORD *)v21 = v1;
    type metadata accessor for MLClassifierMetrics.Contents(0);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v15 = v14;
    v16 = v13[2];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v3, *MEMORY[0x24BE6B9A8], v8);
    specialized static MLHandActionClassifier.makeDataset<A>(from:classLabelsCount:parameters:learningPhase:)(v15, v16, v17, v3, v2);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v8);
    swift_bridgeObjectRelease();
    MLHandActionClassifier.GraphCNN.evaluate(_:)(v2);
    static _MetricUtilities.makeClassifierMetrics(confusionMeter:classLabels:)(*v18, v21);
    OUTLINED_FUNCTION_50_14(v11);
    swift_release();
  }
  OUTLINED_FUNCTION_7();
}

void MLHandActionClassifier.write(to:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[4];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  OUTLINED_FUNCTION_8_1();
  v3 = v2;
  v5 = v4;
  v20 = OUTLINED_FUNCTION_78();
  v19 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_14_5();
  v6 = *(_QWORD *)(v3 + 64);
  v7 = *(_OWORD *)(v3 + 16);
  v24[0] = *(_OWORD *)v3;
  v24[1] = v7;
  v8 = *(_OWORD *)(v3 + 48);
  v24[2] = *(_OWORD *)(v3 + 32);
  v24[3] = v8;
  v25 = v6;
  MLHandActionClassifier.addHandActionClassifierSpecificMetadata(_:)((uint64_t *)v24, &v26);
  v9 = v26;
  v10 = v27;
  v12 = v28;
  v11 = v29;
  v22 = v30;
  v21 = v31;
  v23 = v32;
  v13 = v34;
  v35 = v33;
  if (URL.pathExtension.getter() == 0x67616B6361706C6DLL && v14 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_30();
    if ((v16 & 1) == 0)
    {
      v26 = v9;
      v27 = v10;
      v28 = v12;
      v29 = v11;
      v30 = v22;
      v31 = v21;
      v32 = v23;
      v33 = v35;
      v34 = v13;
      MLHandActionClassifier.writeLegacyModel(to:metadata:)();
      v17 = v9;
      v18 = v10;
      goto LABEL_11;
    }
  }
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v5, 0xD000000000000014, 0x800000021AFF1440, 0x67616B6361706C6DLL, (void *)0xE900000000000065, v1);
  if (!v0)
  {
    v26 = v9;
    v27 = v10;
    v28 = v12;
    v29 = v11;
    v30 = v22;
    v31 = v21;
    v32 = v23;
    v33 = v35;
    v34 = v13;
    MLHandActionClassifier.GraphCNN.writeMLPackage(to:metadata:)(v1, &v26);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v1, v20);
  }
  v17 = v9;
  v18 = v10;
LABEL_11:
  outlined consume of MLModelMetadata?(v17, v18);
  OUTLINED_FUNCTION_7();
}

void static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  char v7;
  id v8;
  void *v9;
  char v10;
  char v11;
  char v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t inited;
  id v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;

  v6 = *(id *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  v26 = *(_QWORD *)a1;
  v27 = v7;
  MLDataTable.subscript.getter(a2, a3, (uint64_t)&v24);
  v8 = v24;
  if (v25 == 1)
  {
    outlined consume of Result<_DataTable, Error>(v24, 1);
LABEL_14:
    v22 = *(_BYTE *)(a1 + 8);
    v24 = *(id *)a1;
    LOBYTE(v25) = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(inited + 32) = a2;
    *(_QWORD *)(inited + 40) = a3;
    LOBYTE(v26) = 5;
    OUTLINED_FUNCTION_199();
    static _ValidationUtilities.validateTableTypes(table:columns:type:)((uint64_t)&v24, (_QWORD *)inited, (char *)&v26);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    return;
  }
  OUTLINED_FUNCTION_3_1();
  _UntypedColumn.type.getter(&v26);
  OUTLINED_FUNCTION_102(v8);
  OUTLINED_FUNCTION_102(v8);
  if (v26 != 3)
    goto LABEL_14;
  v24 = v6;
  LOBYTE(v25) = v7;
  OUTLINED_FUNCTION_183((uint64_t)&v26);
  v9 = (void *)v26;
  v10 = v27;
  specialized MLUntypedColumn.map<A>(skipUndefined:_:)(1, (uint64_t)partial apply for closure #1 in static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:), 0, (void *)v26, v27, (uint64_t)&v24);
  outlined consume of Result<_DataTable, Error>(v9, v10);
  v28 = v24;
  v11 = v25;
  v12 = *(_BYTE *)(a1 + 8);
  v26 = *(_QWORD *)a1;
  v27 = v12;
  OUTLINED_FUNCTION_183((uint64_t)&v24);
  v13 = v24;
  if ((v25 & 1) != 0)
  {
    v14 = -1;
  }
  else
  {
    OUTLINED_FUNCTION_139();
    v14 = CMLColumn.size.getter();
    OUTLINED_FUNCTION_102(v13);
  }
  OUTLINED_FUNCTION_182();
  specialized MLDataColumn.dropMissing()(v28, v11, (uint64_t)&v26);
  v15 = (void *)v26;
  if ((v27 & 1) != 0)
  {
    v16 = -1;
  }
  else
  {
    outlined copy of Result<_DataTable, Error>((id)v26, 0);
    v16 = CMLColumn.size.getter();
    OUTLINED_FUNCTION_102(v15);
  }
  OUTLINED_FUNCTION_182();
  if (!__OFSUB__(v14, v16))
  {
    if (v14 != v16)
    {
      v24 = 0;
      v25 = 0xE000000000000000;
      _StringGuts.grow(_:)(236);
      v29._countAndFlagsBits = 0xD00000000000003DLL;
      v29._object = (void *)0x800000021AFF1740;
      OUTLINED_FUNCTION_96(v29);
      v26 = v14 - v16;
      v30._countAndFlagsBits = OUTLINED_FUNCTION_59_0();
      OUTLINED_FUNCTION_96(v30);
      OUTLINED_FUNCTION_123();
      v31._countAndFlagsBits = 0xD00000000000006BLL;
      v31._object = (void *)0x800000021AFF1780;
      OUTLINED_FUNCTION_96(v31);
      v26 = 3;
      v32._countAndFlagsBits = OUTLINED_FUNCTION_59_0();
      OUTLINED_FUNCTION_96(v32);
      OUTLINED_FUNCTION_123();
      v17._countAndFlagsBits = 8236;
      v17._object = (void *)0xE200000000000000;
      String.append(_:)(v17);
      v26 = 21;
      v33._countAndFlagsBits = OUTLINED_FUNCTION_59_0();
      OUTLINED_FUNCTION_96(v33);
      OUTLINED_FUNCTION_123();
      v18._object = (void *)0x800000021AFF17F0;
      v18._countAndFlagsBits = 0xD00000000000003CLL;
      String.append(_:)(v18);
      v19 = v24;
      v20 = v25;
      lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
      OUTLINED_FUNCTION_49_0();
      *(_QWORD *)v21 = v19;
      *(_QWORD *)(v21 + 8) = v20;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 32) = 0u;
      *(_BYTE *)(v21 + 48) = 0;
      swift_willThrow(0.0);
      outlined consume of Result<_DataTable, Error>(v28, v11);
      return;
    }
    OUTLINED_FUNCTION_199();
    specialized MLDataTable.subscript.setter(v28, v11);
    goto LABEL_14;
  }
  __break(1u);
}

void one-time initialization function for logger()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_109_6();
  __swift_allocate_value_buffer(v0, static MLHandActionClassifier.logger);
  __swift_project_value_buffer(v0, (uint64_t)static MLHandActionClassifier.logger);
  OUTLINED_FUNCTION_187();
  Logger.init(subsystem:category:)();
  OUTLINED_FUNCTION_22();
}

void static MLHandActionClassifier._defaultSessionParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _defaultSessionParameters != -1)
    swift_once();
  v2 = type metadata accessor for MLTrainingSessionParameters();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MLHandActionClassifier._defaultSessionParameters);
  outlined init with copy of MLTrainingSessionParameters(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  OUTLINED_FUNCTION_22();
}

id MLHandActionClassifier.model.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void MLHandActionClassifier.model.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLHandActionClassifier.model.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandActionClassifier.modelParameters.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_13_38();
  OUTLINED_FUNCTION_131(v0 + *(int *)(v1 + 28), v2, type metadata accessor for MLHandActionClassifier.ModelParameters);
  OUTLINED_FUNCTION_22();
}

void MLHandActionClassifier.trainingMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_13_38();
  OUTLINED_FUNCTION_131(v0 + *(int *)(v1 + 32), v2, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

uint64_t MLHandActionClassifier.trainingMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_13_38();
  return OUTLINED_FUNCTION_130(a1, v1 + *(int *)(v3 + 32));
}

uint64_t (*MLHandActionClassifier.trainingMetrics.modify())(_QWORD)
{
  OUTLINED_FUNCTION_13_38();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandActionClassifier.validationMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_13_38();
  OUTLINED_FUNCTION_131(v0 + *(int *)(v1 + 36), v2, type metadata accessor for MLClassifierMetrics);
  OUTLINED_FUNCTION_22();
}

uint64_t MLHandActionClassifier.validationMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_13_38();
  return OUTLINED_FUNCTION_130(a1, v1 + *(int *)(v3 + 36));
}

uint64_t (*MLHandActionClassifier.validationMetrics.modify())(_QWORD)
{
  OUTLINED_FUNCTION_13_38();
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.Prediction.frameRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MLHandActionClassifier.Prediction.frameRange.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*MLHandActionClassifier.Prediction.frameRange.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

uint64_t MLHandActionClassifier.Prediction.results.getter()
{
  return swift_bridgeObjectRetain();
}

void MLHandActionClassifier.Prediction.results.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*MLHandActionClassifier.Prediction.results.modify())()
{
  return MLBoostedTreeRegressor.ModelParameters.maxDepth.modify;
}

void MLHandActionClassifier.init(trainingData:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  int v40;
  double v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unsigned __int8 v84;
  uint64_t v85;
  unsigned __int8 v86;

  OUTLINED_FUNCTION_58_11();
  v78 = v3;
  v79 = v1;
  v5 = v4;
  v7 = v6;
  v8 = OUTLINED_FUNCTION_8_36();
  v76 = *(_QWORD *)(v8 - 8);
  v77 = (int *)v8;
  v9 = *(_QWORD *)(v76 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v75 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OUTLINED_FUNCTION_13_38();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_208();
  v74 = v12;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v66 - v14;
  v16 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_20_0();
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_6();
  *v7 = MEMORY[0x24BEE4AF8];
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFC8]), sel_init);
  v7[2] = v19;
  v81 = (uint64_t)v7 + *(int *)(v10 + 32);
  MLClassifierMetrics.init()((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26, v66, v67, v68, v69, (uint64_t)v70, v71, (uint64_t)v72, v73, v74, v75, v76,
    (uint64_t)v77);
  v27 = *(int *)(v10 + 36);
  v80 = v7;
  v82 = (uint64_t)v7 + v27;
  MLClassifierMetrics.init()(v28, v29, v30, v31, v32, v33, v34, v35, v66, v67, v68, v69, (uint64_t)v70, v71, (uint64_t)v72, v73, v74, v75, v76,
    (uint64_t)v77);
  v36 = v78;
  v37 = v79;
  MLHandActionClassifier.ModelParameters.ValidationData.extractAnnotations(trainingData:)(&v85, &v83);
  if (v37)
  {
    outlined destroy of MLHandPoseClassifier.ModelParameters(v36, type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v5, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
    v47 = v81;
    v46 = v82;
    OUTLINED_FUNCTION_89_5();
    OUTLINED_FUNCTION_62_16();
    OUTLINED_FUNCTION_92(v47);
    OUTLINED_FUNCTION_92(v46);
LABEL_8:
    OUTLINED_FUNCTION_117_0();
    return;
  }
  v68 = v16;
  v69 = v2;
  v70 = v15;
  v71 = v0;
  v38 = v36;
  v39 = (void *)v85;
  v40 = v86;
  v72 = v83;
  v73 = v5;
  LODWORD(v79) = v84;
  if (v86 == 255)
  {
    v67 = v85;
    MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((uint64_t)&v85);
  }
  else
  {
    type metadata accessor for MLHandActionClassifier.FeatureExtractor();
    v83 = v39;
    v84 = v40 & 1;
    v41 = *(double *)(v36 + v77[10]);
    outlined copy of Result<_DataTable, Error>(v39, v40 & 1);
    OUTLINED_FUNCTION_118_3((uint64_t *)&v83, &v85, v41);
    v67 = (uint64_t)v39;
    OUTLINED_FUNCTION_97_5(v39);
  }
  v42 = v85;
  HIDWORD(v66) = v86;
  v43 = v79;
  v44 = v76;
  v45 = v71;
  if ((_DWORD)v79 != 255)
  {
    type metadata accessor for MLHandActionClassifier.FeatureExtractor();
    v83 = v72;
    v84 = v43 & 1;
    OUTLINED_FUNCTION_118_3((uint64_t *)&v83, &v85, *(double *)(v38 + v77[10]));
    v77 = (int *)v42;
    LODWORD(v78) = v40;
    v49 = (_QWORD *)v85;
    v50 = v86;
    v51 = v75;
LABEL_13:
    outlined init with copy of MLTrainingSessionParameters(v38, v51, type metadata accessor for MLHandActionClassifier.ModelParameters);
    v55 = v51;
    v56 = (*(unsigned __int8 *)(v44 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    v57 = swift_allocObject();
    v58 = v77;
    *(_QWORD *)(v57 + 16) = v77;
    v59 = BYTE4(v66);
    *(_BYTE *)(v57 + 24) = BYTE4(v66);
    *(_QWORD *)(v57 + 32) = v49;
    *(_BYTE *)(v57 + 40) = v50;
    v60 = v57 + v56;
    LOBYTE(v56) = v59;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v55, v60, type metadata accessor for MLHandActionClassifier.ModelParameters);
    outlined copy of Result<_DataTable, Error>(v58, v56);
    outlined copy of Result<_DataTable, Error>(v49, v50);
    v61 = (uint64_t)v70;
    specialized blockAwait<A>(_:)();
    swift_release();
    OUTLINED_FUNCTION_24_31();
    OUTLINED_FUNCTION_45_17();
    OUTLINED_FUNCTION_70_13();
    OUTLINED_FUNCTION_65_2(v62, type metadata accessor for MLHandActionClassifier.ModelParameters);
    OUTLINED_FUNCTION_96_7(v63, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
    v64 = v74;
    outlined init with take of MLHandPoseClassifier.ModelParameters(v61, v74, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
    v65 = (uint64_t)v80;
    OUTLINED_FUNCTION_89_5();
    OUTLINED_FUNCTION_62_16();
    outlined destroy of MLHandPoseClassifier.ModelParameters(v81, type metadata accessor for MLClassifierMetrics);
    outlined destroy of MLHandPoseClassifier.ModelParameters(v82, type metadata accessor for MLClassifierMetrics);
    outlined init with take of MLHandPoseClassifier.ModelParameters(v64, v65, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
    goto LABEL_8;
  }
  LODWORD(v78) = v40;
  v48 = v69;
  outlined init with copy of MLTrainingSessionParameters(v38, v69, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of MLHandPoseClassifier.ModelParameters(v48, v45, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
    MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((uint64_t)&v85);
    v51 = v75;
    v77 = (int *)v42;
    outlined destroy of MLHandPoseClassifier.ModelParameters(v45, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
    v49 = (_QWORD *)v85;
    v50 = v86;
    goto LABEL_13;
  }
  outlined destroy of MLHandPoseClassifier.ModelParameters(v48, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
  v52 = MEMORY[0x22075BC08](0);
  v51 = v75;
  if (v52)
  {
    v53 = v52;
    v77 = (int *)v42;
    type metadata accessor for CMLTable();
    v54 = OUTLINED_FUNCTION_9_1();
    *(_QWORD *)(v54 + 16) = v53;
    type metadata accessor for _DataTable();
    OUTLINED_FUNCTION_9_1();
    v49 = _DataTable.init(impl:)(v54);
    v50 = 0;
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t closure #1 in MLHandActionClassifier.init(trainingData:parameters:)(uint64_t a1, void *a2, char a3, void *a4, char a5, uint64_t a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 26) = a5;
  *(_QWORD *)(v6 + 64) = a4;
  *(_QWORD *)(v6 + 72) = a6;
  *(_BYTE *)(v6 + 25) = a3;
  *(_QWORD *)(v6 + 48) = a1;
  *(_QWORD *)(v6 + 56) = a2;
  type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  outlined copy of Result<_DataTable, Error>(a2, a3 & 1);
  outlined copy of Result<_DataTable, Error>(a4, a5 & 1);
  return swift_task_switch();
}

uint64_t closure #1 in MLHandActionClassifier.init(trainingData:parameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_BYTE *)(v0 + 26);
  v4 = *(_BYTE *)(v0 + 25);
  v5 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 56);
  *(_BYTE *)(v0 + 24) = v4 & 1;
  *(_QWORD *)(v0 + 32) = v5;
  *(_BYTE *)(v0 + 40) = v3 & 1;
  outlined init with copy of MLTrainingSessionParameters(v1, v2, type metadata accessor for MLHandActionClassifier.ModelParameters);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v6;
  *v6 = v0;
  v6[1] = closure #1 in MLHandActionClassifier.init(trainingData:parameters:);
  return MLHandActionClassifier.init(trainingFeatures:validationFeatures:parameters:)(*(_QWORD *)(v0 + 48), (uint64_t *)(v0 + 16), (uint64_t *)(v0 + 32), *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

#error "21AEE27C4: call analysis failed (funcsize=167)"

void MLHandActionClassifier.init(checkpoint:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char v36;
  double v37;
  id v38;
  char v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  void *v70;
  char v71;

  OUTLINED_FUNCTION_58_11();
  v66 = v0;
  v4 = v3;
  v6 = v5;
  v61 = type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_161();
  v62 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_14_5();
  v9 = OUTLINED_FUNCTION_78();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_50();
  v13 = (char *)(v11 - v12);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v58 - v15;
  *v6 = MEMORY[0x24BEE4AF8];
  v6[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFC8]), sel_init);
  v17 = OUTLINED_FUNCTION_13_38();
  MLClassifierMetrics.init()(v17, v18, v19, v20, v21, v22, v23, v24, v58, v59, (uint64_t)v60, v61, (uint64_t)v62, v63, v64, (uint64_t)v6 + *(int *)(v17 + 32), v66, v67, (uint64_t)v68,
    v69);
  MLClassifierMetrics.init()(v25, v26, v27, v28, v29, v30, v31, v32, v58, v59, (uint64_t)v60, v61, (uint64_t)v62, v17, (uint64_t)v6 + *(int *)(v17 + 36), v65, v66, (uint64_t)v6, (uint64_t)v68,
    v69);
  URL.deletingLastPathComponent()();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, v9);
  v33 = v66;
  MLHandActionClassifier.PersistentParameters.init(sessionDirectory:)(v13, v1);
  if (v33)
  {
    OUTLINED_FUNCTION_48_0(v34, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_51_16();
    v52 = v64;
    v51 = v65;
    OUTLINED_FUNCTION_89_5();
    OUTLINED_FUNCTION_62_16();
    OUTLINED_FUNCTION_92(v51);
    OUTLINED_FUNCTION_92(v52);
  }
  else
  {
    v66 = v4;
    outlined init with copy of MLTrainingSessionParameters(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v60 = v16;
      v61 = v9;
      v35 = *(void **)v2;
      v36 = *(_BYTE *)(v2 + 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined copy of Result<_DataTable, Error>(v35, v36);
      specialized MLDataTable.subscript.getter((char)v35, v36, (uint64_t)&v68, v37);
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_91_5();
      v38 = v68;
      v39 = v69;
      specialized MLDataColumn.dropDuplicates()(v68, v69, (uint64_t)&v70);
      outlined consume of Result<_DataTable, Error>(v38, v39);
      v59 = specialized Array<A>.init(_:)(v70, v71);
      OUTLINED_FUNCTION_91_5();
      v40 = v62;
    }
    else
    {
      static _VideoUtilities.videoURLsPerClass(from:)(v1);
      v40 = v62;
      v60 = v16;
      v61 = v9;
      v59 = specialized _copyCollectionToContiguousArray<A>(_:)(v41);
      OUTLINED_FUNCTION_12_0();
      outlined destroy of MLHandPoseClassifier.ModelParameters(v2, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.DataSource);
    }
    v42 = v67 + *(int *)(v63 + 28);
    outlined init with copy of MLTrainingSessionParameters(v1 + v40[5], v42, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
    v43 = *(_QWORD *)(v1 + v40[6]);
    v44 = *(_QWORD *)(v1 + v40[7]);
    v45 = *(_QWORD *)(v1 + v40[8]);
    v46 = *(_QWORD *)(v1 + v40[10]);
    v47 = *(_QWORD *)(v1 + v40[9]);
    v48 = (int *)OUTLINED_FUNCTION_8_36();
    *(_QWORD *)(v42 + v48[5]) = v43;
    *(_QWORD *)(v42 + v48[6]) = v44;
    *(_QWORD *)(v42 + v48[7]) = v45;
    *(_QWORD *)(v42 + v48[8]) = v46;
    *(_QWORD *)(v42 + v48[10]) = v47;
    type metadata accessor for MLHandActionClassifier.GraphCNN(0);
    OUTLINED_FUNCTION_15_1();
    v49 = MLHandActionClassifier.GraphCNN.init(classLabels:export:numOfKeypoints:numOfKeypointsChannels:windowSize:)();
    MLHandActionClassifier.GraphCNN.updateGraphCNN(from:)(v66);
    OUTLINED_FUNCTION_3_1();
    specialized blockAwait<A>(_:)();
    v50 = (uint64_t)v60;
    v54 = v53;
    v55 = swift_release();
    OUTLINED_FUNCTION_77_5(v55, (uint64_t (*)(_QWORD))type metadata accessor for MLCheckpoint);
    OUTLINED_FUNCTION_48_0(v56, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v50, v61);
    v57 = v67;
    OUTLINED_FUNCTION_62_16();
    *(_QWORD *)(v57 + 8) = v49;
    *(_QWORD *)(v57 + 16) = v54;
  }
  OUTLINED_FUNCTION_117_0();
}

uint64_t closure #1 in MLHandActionClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = closure #1 in MLHandActionClassifier.init(checkpoint:);
  return MLHandActionClassifier.GraphCNN.compile()();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v5 + 8));
  *(_QWORD *)(v4 + 32) = a1;
  return OUTLINED_FUNCTION_70();
}

void static MLHandActionClassifier.train(trainingData:parameters:sessionParameters:)()
{
  uint64_t v0;

  static MLHandActionClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)();
  if (!v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLHandActionClassifier>);
    OUTLINED_FUNCTION_15_1();
    specialized MLJob.init(_:)();
  }
}

void static MLHandActionClassifier.makeTrainingSession(trainingData:parameters:sessionParameters:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[15];
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_8_1();
  v25 = v2;
  v26 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v24[-1] - v12;
  OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_49();
  v17 = v16 - v15;
  type metadata accessor for MLHandActionClassifier.DataSource();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_54_0();
  outlined init with copy of MLTrainingSessionParameters(v9, v1, v19);
  outlined init with copy of MLTrainingSessionParameters(v7, v17, type metadata accessor for MLHandActionClassifier.ModelParameters);
  outlined init with copy of MLTrainingSessionParameters(v5, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
  v20 = type metadata accessor for HandActionClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  HandActionClassifierTrainingSessionDelegate.init(trainingData:modelParameters:sessionParameters:)();
  if (!v0)
  {
    v24[3] = v20;
    v24[4] = &protocol witness table for HandActionClassifierTrainingSessionDelegate;
    v24[0] = v21;
    OUTLINED_FUNCTION_138_0(v21, v22, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>);
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_56_13((uint64_t)v24);
  }
}

void static MLHandActionClassifier.resume(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLJob<MLHandActionClassifier>);
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_3_1();
  specialized MLJob.init(_:)();
}

void static MLHandActionClassifier.restoreTrainingSession(sessionParameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  type metadata accessor for MLTrainingSessionParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_115();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12[-1] - v5;
  outlined init with copy of MLTrainingSessionParameters(a1, (uint64_t)&v12[-1] - v5, v7);
  v8 = type metadata accessor for HandActionClassifierTrainingSessionDelegate();
  OUTLINED_FUNCTION_15_1();
  v9 = HandActionClassifierTrainingSessionDelegate.init(sessionParameters:)((uint64_t)v6);
  if (!v1)
  {
    v12[3] = v8;
    v12[4] = &protocol witness table for HandActionClassifierTrainingSessionDelegate;
    v12[0] = v9;
    OUTLINED_FUNCTION_138_0(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for MLTrainingSessionParameters);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLTrainingSession<MLHandActionClassifier>);
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_56_13((uint64_t)v12);
  }
}

void closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  int *v41;
  uint64_t v42;
  _BYTE v43[40];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_49();
  v13 = (_QWORD *)(v12 - v11);
  v41 = (int *)type metadata accessor for MLHandActionClassifier.PersistentParameters();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_64();
  v40 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)OUTLINED_FUNCTION_8_36();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_50();
  v23 = v21 - v22;
  MEMORY[0x24BDAC7A8](v24);
  if ((a2 & 1) != 0)
  {
    *v13 = a1;
    swift_storeEnumTagMultiPayload();
    v31 = a1;
    a4(v13);
    outlined destroy of URL?((uint64_t)v13, &demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>);
  }
  else
  {
    v26 = (char *)v39 - v25;
    v39[1] = a5;
    outlined init with copy of TrainingSessionDelegate(a3 + direct field offset for MLTrainingSession.delegate, (uint64_t)v43);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrainingSessionDelegate);
    type metadata accessor for HandActionClassifierTrainingSessionDelegate();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v27 = v42;
      v28 = *(_QWORD *)(v42 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_model);
      if (!v28)
      {
LABEL_7:
        swift_release();
        goto LABEL_12;
      }
      v29 = v42 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_trainingParameters;
      swift_beginAccess();
      outlined init with copy of MLHandActionClassifier.PersistentParameters?(v29, (uint64_t)v18);
      v30 = v41;
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, (uint64_t)v41))
      {
        OUTLINED_FUNCTION_51_0();
        outlined destroy of URL?((uint64_t)v18, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
        OUTLINED_FUNCTION_99();
        goto LABEL_7;
      }
      v32 = v40;
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v18, v40, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
      v39[0] = v28;
      OUTLINED_FUNCTION_51_0();
      outlined destroy of URL?((uint64_t)v18, &demangling cache variable for type metadata for MLHandActionClassifier.PersistentParameters?);
      outlined init with copy of MLTrainingSessionParameters(v32 + v30[5], v23, type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData);
      v33 = *(_QWORD *)(v32 + v30[7]);
      v34 = *(_QWORD *)(v32 + v30[8]);
      v35 = *(_QWORD *)(v32 + v30[10]);
      v36 = *(_QWORD *)(v32 + v30[9]);
      *(_QWORD *)(v23 + v19[5]) = *(_QWORD *)(v32 + v30[6]);
      *(_QWORD *)(v23 + v19[6]) = v33;
      *(_QWORD *)(v23 + v19[7]) = v34;
      *(_QWORD *)(v23 + v19[8]) = v35;
      *(_QWORD *)(v23 + v19[10]) = v36;
      outlined destroy of MLHandPoseClassifier.ModelParameters(v32, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier.PersistentParameters);
      outlined init with take of MLHandPoseClassifier.ModelParameters(v23, (uint64_t)v26, type metadata accessor for MLHandActionClassifier.ModelParameters);
      v38 = *(_QWORD *)(v27 + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_classLabels);
      if (v38)
      {
        MEMORY[0x24BDAC7A8](v37);
        v39[-4] = v39[0];
        v39[-3] = v26;
        v39[-2] = v27;
        v39[-1] = v38;
        swift_bridgeObjectRetain();
        _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML22MLHandActionClassifierV_s5Error_pTgm5((void (*)(uint64_t *))partial apply for closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:), (uint64_t)v13);
        swift_bridgeObjectRelease();
        a4(v13);
        OUTLINED_FUNCTION_99();
        swift_release();
        outlined destroy of URL?((uint64_t)v13, &demangling cache variable for type metadata for Result<MLHandActionClassifier, Error>);
      }
      else
      {
        OUTLINED_FUNCTION_99();
        swift_release();
      }
      outlined destroy of MLHandPoseClassifier.ModelParameters((uint64_t)v26, type metadata accessor for MLHandActionClassifier.ModelParameters);
    }
  }
LABEL_12:
  OUTLINED_FUNCTION_9_5();
}

uint64_t closure #1 in closure #1 in closure #1 in static MLHandActionClassifier.resume(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v7 = v5;
  v12 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MLTrainingSessionParameters(a2, (uint64_t)v14, v15);
  v16 = *(_QWORD *)(a3
                  + OBJC_IVAR____TtC8CreateML43HandActionClassifierTrainingSessionDelegate_metricsAttributesDictionary);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = MLHandActionClassifier.init(model:parameters:metricsAttributes:classLabels:)(a1, v14, v16, a4);
  if (v7)
    *a5 = v7;
  return result;
}

uint64_t static MLHandActionClassifier.buildFeatureTable(features:labels:sessionIds:videoFiles:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t inited;
  uint64_t ML14_UntypedColumnC_s5Error_pTgm5;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  char v24;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLUntypedColumn)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21AFE7D90;
  *(_QWORD *)(inited + 32) = 0x746E696F7079656BLL;
  *(_QWORD *)(inited + 40) = 0xE900000000000073;
  v23 = a1;
  OUTLINED_FUNCTION_199();
  ML14_UntypedColumnC_s5Error_pTgm5 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  v13 = v12;
  OUTLINED_FUNCTION_148();
  *(_QWORD *)(inited + 48) = ML14_UntypedColumnC_s5Error_pTgm5;
  *(_BYTE *)(inited + 56) = v13 & 1;
  *(_QWORD *)(inited + 64) = 0x6C6562616CLL;
  *(_QWORD *)(inited + 72) = 0xE500000000000000;
  v23 = a2;
  OUTLINED_FUNCTION_31_2();
  v14 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(ML14_UntypedColumnC_s5Error_pTgm5) = v15;
  OUTLINED_FUNCTION_148();
  *(_QWORD *)(inited + 80) = v14;
  *(_BYTE *)(inited + 88) = ML14_UntypedColumnC_s5Error_pTgm5 & 1;
  *(_QWORD *)(inited + 96) = 0x5F6E6F6973736573;
  *(_QWORD *)(inited + 104) = 0xEA00000000006469;
  v23 = a3;
  swift_bridgeObjectRetain();
  v16 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for specialized closure #1 in MLUntypedColumn.init<A>(_:));
  LOBYTE(v14) = v17;
  OUTLINED_FUNCTION_148();
  *(_QWORD *)(inited + 112) = v16;
  *(_BYTE *)(inited + 120) = v14 & 1;
  *(_QWORD *)(inited + 128) = 0x7461506F65646976;
  *(_QWORD *)(inited + 136) = 0xE900000000000068;
  v23 = a4;
  OUTLINED_FUNCTION_84();
  v18 = _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC8CreateML14_UntypedColumnC_s5Error_pTgm5((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in MLUntypedColumn.init<A>(_:)specialized partial apply);
  LOBYTE(v16) = v19;
  OUTLINED_FUNCTION_148();
  *(_QWORD *)(inited + 144) = v18;
  *(_BYTE *)(inited + 152) = v16 & 1;
  v20 = Dictionary.init(dictionaryLiteral:)();
  result = specialized MLDataTable.init<A>(uniqueKeysWithValues:)(v20, (uint64_t)&v23);
  v22 = v24;
  *(_QWORD *)a5 = v23;
  *(_BYTE *)(a5 + 8) = v22;
  return result;
}

void closure #1 in static MLHandActionClassifier.reformatKeypointsDataTable(table:featureColumn:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t var8[3];

  if (*(_BYTE *)(a1 + 16) == 3)
    static MLHandActionClassifier.convertSequenceToMultiArray(value:)(var8, a2, v2, *(_QWORD *)a1, var8[1], (id)var8[2]);
  else
    *a2 = 0;
}

void static MLHandActionClassifier.convertSequenceToMultiArray(value:)(uint64_t *a1@<X0>, _QWORD *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, id a6)
{
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v7 = *a1;
  v51 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray.reserveCapacity(_:)();
  objc_msgSend(OUTLINED_FUNCTION_209(), sel_initWithInteger_, 1);
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_210();
  objc_msgSend(OUTLINED_FUNCTION_209(), sel_initWithInteger_, 3);
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_210();
  objc_msgSend(OUTLINED_FUNCTION_209(), sel_initWithInteger_, 21);
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_210();
  v8 = objc_allocWithZone(MEMORY[0x24BDBFFF0]);
  v9 = @nonobjc MLMultiArray.init(shape:dataType:)(v51, 65600);
  if (!v9)
    goto LABEL_19;
  v10 = v9;
  UnsafeMutableBufferPointer.init(_:)();
  OUTLINED_FUNCTION_122();
  CMLSequence.size.getter();
  specialized RandomAccessCollection<>.distance(from:to:)();
  v12 = v11;
  swift_release();
  if (v12 != 1)
  {

LABEL_19:
    *a2 = 0;
    return;
  }
  v49 = 0;
  v50 = 0;
  v48 = v7;
  OUTLINED_FUNCTION_122();
  while (1)
  {
    specialized EnumeratedSequence.Iterator.next()((uint64_t)&v44);
    v14 = (int)v44;
    v13 = v45;
    v15 = v46;
    v16 = v47;
    if (v47 != 3)
    {
      if (v47 == 255)
      {
        swift_release();
        MLDataValue.MultiArrayType.init(_:)((MLMultiArray)v10);
        *a2 = v44;
        return;
      }

      swift_release();
      goto LABEL_27;
    }
    outlined copy of MLDataValue(v45, v46, 3);
    OUTLINED_FUNCTION_205();
    specialized RandomAccessCollection<>.distance(from:to:)();
    v18 = v17;
    OUTLINED_FUNCTION_24();
    if (v18 != 3)
    {

      swift_release();
      v16 = 3;
      OUTLINED_FUNCTION_24();
LABEL_27:
      outlined consume of (offset: Int, element: MLDataValue)?(v14, v13, v15, v16);
      goto LABEL_19;
    }
    if (OUTLINED_FUNCTION_205())
      break;
LABEL_17:
    outlined consume of (offset: Int, element: MLDataValue)?(v14, v13, v15, 3);
    outlined consume of (offset: Int, element: MLDataValue)?(v14, v13, v15, 3);
    OUTLINED_FUNCTION_24();
  }
  v19 = 0;
  v37 = v15;
  v38 = (uint64_t)a2;
  v36 = v13;
  v41 = v14;
  while (1)
  {
    OUTLINED_FUNCTION_3_1();
    CMLSequence.value(at:)(v19);
    v20 = v19;
    OUTLINED_FUNCTION_24();
    v21 = v13;
    MLDataValue.init(_:)();
    v22 = v44;
    v43 = v45;
    v23 = v46;
    OUTLINED_FUNCTION_3_1();
    v24 = (void *)CMLSequence.size.getter();
    outlined consume of (offset: Int, element: MLDataValue)?(v14, v21, v15, 3);
    v42 = v20;
    if (v20 >= (uint64_t)v24)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      JUMPOUT(0x21AEE40F0);
    }
    if ((_DWORD)v23 != 3)
    {
      v25 = v43;
      goto LABEL_24;
    }
    v25 = v43;
    OUTLINED_FUNCTION_178(v22);
    OUTLINED_FUNCTION_178(v22);
    v26 = OUTLINED_FUNCTION_108();
    if (CMLSequence.size.getter() < 0)
      goto LABEL_29;
    v24 = (void *)OUTLINED_FUNCTION_108();
    OUTLINED_FUNCTION_14_1();
    if (v26 < 0 || (uint64_t)v24 < v26)
      goto LABEL_30;
    if (v26 != 21)
      break;
    OUTLINED_FUNCTION_139();
    if (OUTLINED_FUNCTION_108())
    {
      OUTLINED_FUNCTION_139();
      CMLSequence.value(at:)(0);
      OUTLINED_FUNCTION_14_1();
      v27 = (char *)&loc_21AEE3B50 + dword_21AEE414C[CMLFeatureValue.type.getter()];
      __asm { BR              X9 }
    }
    outlined consume of MLDataValue(v22, v43, 3);
    outlined consume of MLDataValue(v22, v43, 3);
    swift_release();
    v19 = v20 + 1;
    v13 = v36;
    v15 = v37;
    a2 = (_QWORD *)v38;
    v14 = v41;
    if (v42 + 1 == CMLSequence.size.getter())
      goto LABEL_17;
  }
  v23 = 3;
  OUTLINED_FUNCTION_14_1();
LABEL_24:
  outlined consume of MLDataValue(v22, v25, v23);
  OUTLINED_FUNCTION_38_0(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v40, v41);
  outlined consume of (offset: Int, element: MLDataValue)?(0, v24, (id)v23, 3);
  swift_release();
  *v39 = 0;
}

uint64_t MLHandActionClassifier.prediction(from:)(uint64_t a1)
{
  return MLHandActionClassifier.modelPrediction(on:using:)(a1);
}

uint64_t MLHandActionClassifier.modelPrediction(on:using:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _OWORD *v17;
  id v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;

  v5 = v1 + *(int *)(type metadata accessor for MLHandActionClassifier() + 28);
  v6 = type metadata accessor for MLHandActionClassifier.ModelParameters(0);
  v7 = static _VideoUtilities.getHandKeyPointsFromVideoUrl(url:startTime:endTime:targetFrameRate:)(a1, *MEMORY[0x24BDC0D88], *(_QWORD *)(MEMORY[0x24BDC0D88] + 8), *(_QWORD *)(MEMORY[0x24BDC0D88] + 16), *MEMORY[0x24BDC0D30], *(_QWORD *)(MEMORY[0x24BDC0D30] + 8), *(_QWORD *)(MEMORY[0x24BDC0D30] + 16), *(double *)(v5 + *(int *)(v6 + 40)));
  if (!v2)
  {
    v8 = v7;
    v9 = v7[2];
    if (v9)
    {
      v25 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v10 = 0;
      do
      {
        v11 = v10 + 1;
        v12 = (id)v8[v10 + 4];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v10 = v11;
      }
      while (v9 != v11);
      v13 = v25;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v13 = MEMORY[0x24BEE4AF8];
    }
    v14 = static _VideoUtilities.generatePredictionWindows(frameKeypoints:windowSize:numOfKeypoints:)(v13, *(_QWORD *)(v5 + *(int *)(v6 + 28)), 21);
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v14 + 16);
    if (v16)
    {
      v17 = (_OWORD *)(v14 + 40);
      v3 = MEMORY[0x24BEE4AF8];
      do
      {
        v24 = *v17;
        v18 = *((id *)v17 - 1);
        v19 = MLHandActionClassifier.modelPrediction(on:using:)();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v3 = v22;
        }
        v20 = *(_QWORD *)(v3 + 16);
        if (v20 >= *(_QWORD *)(v3 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v3 = v23;
        }
        *(_QWORD *)(v3 + 16) = v20 + 1;
        v21 = v3 + 24 * v20;
        *(_OWORD *)(v21 + 32) = v24;
        *(_QWORD *)(v21 + 48) = v19;

        v17 = (_OWORD *)((char *)v17 + 24);
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
  }
  return v3;
}

void MLHandActionClassifier.predictions(from:)(uint64_t a1)
{
  uint64_t v1;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation3URLVG_Say8CreateML22MLHandActionClassifierV10PredictionVGsAE_pTg5((uint64_t)partial apply for closure #1 in MLHandActionClassifier.predictions(from:), (uint64_t)&v1, a1);
}

uint64_t closure #1 in MLHandActionClassifier.predictions(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = MLHandActionClassifier.modelPrediction(on:using:)(a1);
  if (v3)
    *a2 = v3;
  else
    *a3 = result;
  return result;
}

_QWORD *MLHandActionClassifier.modelPrediction(on:using:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t inited;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v41;
  double v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD v50[6];
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[2];
  __int128 v58;
  _OWORD v59[2];
  __int128 v60;
  id v61[4];
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  OUTLINED_FUNCTION_58_11();
  v64 = v2;
  v65 = v3;
  v5 = v4;
  v7 = v6;
  v63 = *MEMORY[0x24BDAC8D0];
  v8 = objc_msgSend(v6, sel_shape);
  type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
  {
    OUTLINED_FUNCTION_50_10();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_10_3();
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  OUTLINED_FUNCTION_10_3();
  if (v10 != 3)
    goto LABEL_25;
  v11 = objc_msgSend(v7, sel_shape);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v13 = OUTLINED_FUNCTION_9_1();
  *(_OWORD *)(v13 + 16) = xmmword_21AFE7F30;
  v14 = (char *)v0 + *(int *)(OUTLINED_FUNCTION_13_38() + 28);
  v15 = *(_QWORD *)&v14[*(int *)(OUTLINED_FUNCTION_8_36() + 28)];
  *(_QWORD *)(v13 + 32) = objc_msgSend(OUTLINED_FUNCTION_121_6(), sel_initWithInteger_, v15);
  *(_QWORD *)(v13 + 40) = objc_msgSend(OUTLINED_FUNCTION_121_6(), sel_initWithInteger_, 3);
  *(_QWORD *)(v13 + 48) = objc_msgSend(OUTLINED_FUNCTION_121_6(), sel_initWithInteger_, 21);
  specialized Array._endMutation()();
  v0 = (_QWORD *)v13;
  LOBYTE(v13) = specialized static Array<A>.== infix(_:_:)(v12, v13);
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_30();
  if ((v13 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21AFE7DA0;
    *(_QWORD *)(inited + 32) = 0x7365736F70;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    v17 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, v7);
    *(_QWORD *)(inited + 72) = type metadata accessor for NSAttributedString(0, &lazy cache variable for type metadata for MLFeatureValue);
    *(_QWORD *)(inited + 48) = v17;
    Dictionary.init(dictionaryLiteral:)();
    v0 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
    v18 = @nonobjc MLDictionaryFeatureProvider.init(dictionary:)();
    if (!v1)
    {
      v19 = v18;
      v61[0] = 0;
      v20 = objc_msgSend(v5, sel_predictionFromFeatures_error_, v18, v61);
      v0 = v61[0];
      if (v20)
      {
        v21 = v20;
        v22 = v61[0];
        v23 = (void *)MEMORY[0x22075A8AC](0xD000000000000012, 0x800000021AFF1650);
        v0 = objc_msgSend(v21, sel_featureValueForName_, v23);

        if (v0)
        {
          v24 = objc_msgSend(v0, sel_dictionaryValue);

          v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
          v26 = *(_QWORD *)(v25 + 16);
          if (v26)
          {
            v44 = v19;
            v49 = (_QWORD *)MEMORY[0x24BEE4AF8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v27 = specialized Dictionary.startIndex.getter(v25);
            if (v27 < 0 || (v29 = v27, v27 >= 1 << *(_BYTE *)(v25 + 32)))
            {
LABEL_32:
              __break(1u);
LABEL_33:
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
            }
            v30 = v25 + 64;
            while (1)
            {
              if ((*(_QWORD *)(v30 + 8 * (v29 >> 6)) & (1 << v29)) == 0)
                goto LABEL_33;
              if (v28 != *(_DWORD *)(v25 + 36))
                goto LABEL_34;
              v46 = v28;
              outlined init with copy of AnyHashable(*(_QWORD *)(v25 + 48) + 40 * v29, (uint64_t)v61);
              v62 = *(void **)(*(_QWORD *)(v25 + 56) + 8 * v29);
              v31 = v62;
              outlined init with copy of AnyHashable((uint64_t)v61, (uint64_t)v59);
              *((_QWORD *)&v60 + 1) = v31;
              v57[0] = v59[0];
              v57[1] = v59[1];
              v58 = v60;
              v32 = v31;
              outlined destroy of URL?((uint64_t)v61, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              outlined init with copy of AnyHashable((uint64_t)v57, (uint64_t)v51);
              v53 = *((_QWORD *)&v58 + 1);
              v54 = v51[0];
              v55 = v51[1];
              v56 = v52;
              swift_dynamicCast();
              outlined init with copy of AnyHashable((uint64_t)v57, (uint64_t)v50);
              v50[5] = *((_QWORD *)&v58 + 1);
              objc_msgSend(*((id *)&v58 + 1), sel_doubleValue);
              v34 = v33;
              outlined destroy of AnyHashable((uint64_t)v50);
              outlined destroy of URL?((uint64_t)v57, &demangling cache variable for type metadata for (key: AnyHashable, value: NSNumber));
              v0 = v49;
              v45 = v26;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v0 = v49;
              }
              v35 = v0[2];
              if (v35 >= v0[3] >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v0 = v49;
              }
              v0[2] = v35 + 1;
              v36 = &v0[3 * v35];
              v36[4] = v47;
              v36[5] = v48;
              v36[6] = v34;
              if ((uint64_t)v29 >= -(-1 << *(_BYTE *)(v25 + 32)))
                goto LABEL_35;
              v30 = v25 + 64;
              if ((*(_QWORD *)(v25 + 64 + 8 * (v29 >> 6)) & (1 << v29)) == 0)
                goto LABEL_36;
              if (v46 != *(_DWORD *)(v25 + 36))
                goto LABEL_37;
              v37 = _HashTable.occupiedBucket(after:)();
              --v26;
              if (v45 == 1)
                break;
              v29 = v37;
              if ((v37 & 0x8000000000000000) == 0)
              {
                v28 = *(_DWORD *)(v25 + 36);
                if (v37 < 1 << *(_BYTE *)(v25 + 32))
                  continue;
              }
              goto LABEL_32;
            }
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();

          }
          else
          {
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();

            return (_QWORD *)MEMORY[0x24BEE4AF8];
          }
        }
        else
        {
          lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
          OUTLINED_FUNCTION_49_0();
          OUTLINED_FUNCTION_18_0(v43, 0xD000000000000028);

          swift_unknownObjectRelease();
        }
      }
      else
      {
        v41 = v61[0];
        _convertNSErrorToError(_:)();

        swift_willThrow(v42);
      }
    }
  }
  else
  {
LABEL_25:
    lazy protocol witness table accessor for type MLCreateError and conformance MLCreateError();
    OUTLINED_FUNCTION_49_0();
    OUTLINED_FUNCTION_187();
    OUTLINED_FUNCTION_18_0(v39, v38 + 19);
  }
  return v0;
}

void MLHandActionClassifier.evaluation(on:)()
{
  uint64_t v0;
  void *v1;
  char v2;
  void *v3;
  char v4;

  MLHandActionClassifier.DataSource.keypointsWithAnnotations(targetFrameRate:)((uint64_t)&v3);
  if (!v0)
  {
    v1 = v3;
    v2 = v4;
    OUTLINED_FUNCTION_13_38();
    MLHandActionClassifier.evaluation(on:parameters:)();
    outlined consume of Result<_DataTable, Error>(v1, v2);
  }
}

void MLHandActionClassifier.addHandActionClassifierSpecificMetadata(_:)(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  NSObject *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSString *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  char v97[8];
  char v98[8];
  char v99[8];
  char v100[8];

  v5 = OUTLINED_FUNCTION_13_38();
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v7);
  v10 = a1[1];
  if (v10)
  {
    v94 = v2;
    v92 = v5;
    v91 = a2;
    v93 = v10;
    v11 = *a1;
    v13 = a1[2];
    v12 = a1[3];
    v14 = a1[4];
    v15 = a1[5];
    v17 = a1[6];
    v16 = a1[7];
    v18 = a1[8];
    if (!v18)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21AFE7F70;
      *(_QWORD *)(inited + 32) = 0xD000000000000016;
      *(_QWORD *)(inited + 40) = 0x800000021AFF59B0;
      OUTLINED_FUNCTION_113_5();
      v94 = 0xD000000000000011;
      v42 = v17;
      v43 = v12;
      v92 = OUTLINED_FUNCTION_8_36();
      v96 = *(_QWORD *)(*(int *)(v92 + 28) - 0x2FFFFFFFFFFFFFEFLL);
      v44 = v93;
      OUTLINED_FUNCTION_84();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_50_10();
      outlined copy of MLModelMetadata?(v11, v93);
      OUTLINED_FUNCTION_199();
      *(_QWORD *)(inited + 48) = OUTLINED_FUNCTION_42_14();
      *(_QWORD *)(inited + 56) = v45;
      *(_QWORD *)(inited + 64) = 0xD000000000000011;
      *(_QWORD *)(inited + 72) = 0x800000021AFF59D0;
      v46 = v43;
      *(_QWORD *)(inited + 80) = Double.description.getter();
      *(_QWORD *)(inited + 88) = v47;
      v36 = Dictionary.init(dictionaryLiteral:)();
LABEL_32:
      OUTLINED_FUNCTION_84();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_199();
      OUTLINED_FUNCTION_10_3();
      OUTLINED_FUNCTION_63_1();
      OUTLINED_FUNCTION_63_1();
      OUTLINED_FUNCTION_63_1();
      a2 = v91;
      *v91 = v11;
      a2[1] = v44;
      a2[2] = v13;
      a2[3] = v46;
      a2[4] = v14;
      a2[5] = v15;
      a2[6] = v42;
      goto LABEL_33;
    }
    v19 = (char *)&v78 - v8;
    v85 = v9;
    v20 = v93;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_50_10();
    swift_bridgeObjectRetain();
    v89 = v11;
    v88 = v13;
    v87 = v12;
    v86 = v14;
    v90 = v16;
    outlined copy of MLModelMetadata?(v11, v20);
    OUTLINED_FUNCTION_199();
    specialized Dictionary.subscript.getter(0xD000000000000016, 0x800000021AFF59B0, v18);
    if (v22)
    {
      v23 = v21;
      v24 = v22;
      v84 = "Number of Labels";
      v25 = v92;
      OUTLINED_FUNCTION_59_13();
      v28 = v27 + v26;
      v83 = OUTLINED_FUNCTION_8_36();
      v29 = *(int *)(v83 + 28);
      v96 = *(_QWORD *)(v28 + v29);
      if (v23 == OUTLINED_FUNCTION_42_14() && v24 == v30)
      {
        OUTLINED_FUNCTION_10_3();
LABEL_14:
        swift_bridgeObjectRelease();
        v36 = v18;
        goto LABEL_21;
      }
      OUTLINED_FUNCTION_33_20((uint64_t)v99);
      OUTLINED_FUNCTION_2_24();
      if ((v28 & 1) != 0)
        goto LABEL_14;
      if (one-time initialization token for logger != -1)
        swift_once();
      v50 = OUTLINED_FUNCTION_109_6();
      __swift_project_value_buffer(v50, (uint64_t)static MLHandActionClassifier.logger);
      v51 = v19;
      outlined init with copy of MLTrainingSessionParameters((uint64_t)v94, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
      OUTLINED_FUNCTION_50_10();
      v52 = Logger.logObject.getter();
      v53 = static os_log_type_t.info.getter();
      v54 = v53;
      v55 = os_log_type_enabled(v52, v53);
      if (v55)
      {
        OUTLINED_FUNCTION_104_5();
        LODWORD(v81) = v54;
        v80 = OUTLINED_FUNCTION_67_13();
        v96 = v80;
        *(_DWORD *)v54 = 136315394;
        v79 = v54 + 4;
        OUTLINED_FUNCTION_50_10();
        v56 = OUTLINED_FUNCTION_68_12();
        OUTLINED_FUNCTION_34_22(v56);
        OUTLINED_FUNCTION_93_5();
        v57 = OUTLINED_FUNCTION_85_5();
        *(_WORD *)(v54 + 12) = 2048;
        v79 = v54 + 14;
        v58 = *(_QWORD *)&v51[*(int *)(v25 + 28) + *(int *)(v83 + 28)];
        OUTLINED_FUNCTION_44_15(v57, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
        v95 = v58;
        OUTLINED_FUNCTION_93_5();
        OUTLINED_FUNCTION_64_11(&dword_21ADEE000, v52, "Prediction window size %s is set incorrectly, change it to %ld frames.", (uint64_t)v98);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_9_6();
      }
      OUTLINED_FUNCTION_44_15(v55, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);

      OUTLINED_FUNCTION_63_1();
      v96 = *(_QWORD *)(v82 + v29);
      OUTLINED_FUNCTION_42_14();
      v36 = v59;
      swift_isUniquelyReferenced_nonNull_native();
      v96 = v18;
    }
    else
    {
      OUTLINED_FUNCTION_59_13();
      v96 = *(_QWORD *)(v49 + v48 + *(int *)(OUTLINED_FUNCTION_8_36() + 28));
      v36 = OUTLINED_FUNCTION_42_14();
      swift_isUniquelyReferenced_nonNull_native();
      v96 = v18;
    }
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
    OUTLINED_FUNCTION_120_5();
LABEL_21:
    specialized Dictionary.subscript.getter(0xD000000000000011, 0x800000021AFF59D0, v36);
    if (v61)
    {
      v62 = v60;
      v63 = v61;
      OUTLINED_FUNCTION_59_13();
      v66 = v65 + v64;
      v84 = (const char *)OUTLINED_FUNCTION_8_36();
      v67 = *((_DWORD *)v84 + 10);
      if (v62 == Double.description.getter() && v63 == v68)
      {
        v42 = v17;
        v70 = v15;
        OUTLINED_FUNCTION_10_3();
      }
      else
      {
        OUTLINED_FUNCTION_33_20((uint64_t)v100);
        OUTLINED_FUNCTION_2_24();
        if ((v67 & 1) == 0)
        {
          v81 = v66;
          v82 = v15;
          if (one-time initialization token for logger != -1)
            swift_once();
          v71 = OUTLINED_FUNCTION_109_6();
          v72 = __swift_project_value_buffer(v71, (uint64_t)static MLHandActionClassifier.logger);
          v73 = v85;
          outlined init with copy of MLTrainingSessionParameters((uint64_t)v94, v85, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
          OUTLINED_FUNCTION_50_10();
          v74 = Logger.logObject.getter();
          v75 = static os_log_type_t.info.getter();
          v76 = v75;
          v94 = v74;
          if (os_log_type_enabled(v74, v75))
          {
            LODWORD(v80) = v76;
            OUTLINED_FUNCTION_104_5();
            v96 = OUTLINED_FUNCTION_67_13();
            *(_DWORD *)v72 = 136315394;
            OUTLINED_FUNCTION_50_10();
            v77 = OUTLINED_FUNCTION_68_12();
            OUTLINED_FUNCTION_34_22(v77);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_85_5();
            *(_WORD *)(v72 + 12) = 2048;
            v95 = *(_QWORD *)(v73 + *(int *)(v92 + 28) + *((int *)v84 + 10));
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            outlined destroy of MLHandPoseClassifier.ModelParameters(v73, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);
            OUTLINED_FUNCTION_64_11(&dword_21ADEE000, v94, "Target frame rate %s is set incorrectly, change it to %f.", (uint64_t)v97);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_9_6();
          }
          v42 = v17;
          OUTLINED_FUNCTION_63_1();
          outlined destroy of MLHandPoseClassifier.ModelParameters(v73, (uint64_t (*)(_QWORD))type metadata accessor for MLHandActionClassifier);

          v11 = v89;
          v70 = v82;
          Double.description.getter();
          swift_isUniquelyReferenced_nonNull_native();
          v96 = v36;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
          OUTLINED_FUNCTION_120_5();
          v16 = v90;
          goto LABEL_31;
        }
        v42 = v17;
        v70 = v15;
      }
    }
    else
    {
      v42 = v17;
      v70 = v15;
      OUTLINED_FUNCTION_113_5();
      OUTLINED_FUNCTION_8_36();
      Double.description.getter();
      swift_isUniquelyReferenced_nonNull_native();
      v96 = v36;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
      v36 = v96;
    }
    swift_bridgeObjectRelease();
    v16 = v90;
    v11 = v89;
LABEL_31:
    OUTLINED_FUNCTION_101();
    v13 = v88;
    v46 = v87;
    v14 = v86;
    v44 = v93;
    v15 = v70;
    goto LABEL_32;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  v32 = swift_initStackObject();
  *(_OWORD *)(v32 + 16) = xmmword_21AFE7F70;
  *(_QWORD *)(v32 + 32) = 0xD000000000000016;
  *(_QWORD *)(v32 + 40) = 0x800000021AFF59B0;
  v33 = (char *)v2 + *(int *)(v5 + 28);
  v96 = *(_QWORD *)&v33[*(int *)(OUTLINED_FUNCTION_8_36() + 28)];
  *(_QWORD *)(v32 + 48) = OUTLINED_FUNCTION_42_14();
  *(_QWORD *)(v32 + 56) = v34;
  *(_QWORD *)(v32 + 64) = 0xD000000000000011;
  *(_QWORD *)(v32 + 72) = 0x800000021AFF59D0;
  *(_QWORD *)(v32 + 80) = Double.description.getter();
  *(_QWORD *)(v32 + 88) = v35;
  v36 = Dictionary.init(dictionaryLiteral:)();
  v37 = NSFullUserName();
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v40 = v39;

  *a2 = v38;
  a2[1] = v40;
  a2[2] = 0xD000000000000033;
  a2[3] = 0x800000021AFF2260;
  a2[4] = 0;
  a2[5] = 0;
  a2[6] = 49;
  v16 = 0xE100000000000000;
LABEL_33:
  a2[7] = v16;
  a2[8] = v36;
  OUTLINED_FUNCTION_9_5();
}

void MLHandActionClassifier.writeLegacyModel(to:metadata:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[9];
  uint64_t v24;

  OUTLINED_FUNCTION_8_1();
  v2 = v1;
  v4 = v3;
  v5 = type metadata accessor for Model();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_64();
  v24 = v7;
  v8 = OUTLINED_FUNCTION_78();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_49();
  v12 = v11 - v10;
  v13 = *v2;
  v21 = v2[2];
  v22 = v2[1];
  v19 = v2[4];
  v20 = v2[3];
  v17 = v2[6];
  v18 = v2[5];
  v14 = v2[7];
  v15 = v2[8];
  v16 = v14;
  static _ValidationUtilities.validateWriteLocation(atURL:defaultName:fileExtension:)(v4, 0xD000000000000014, 0x800000021AFF1440, 0x6C65646F6D6C6DLL, (void *)0xE700000000000000, v12);
  if (!v0)
  {
    v23[0] = v13;
    v23[1] = v22;
    v23[2] = v21;
    v23[3] = v20;
    v23[4] = v19;
    v23[5] = v18;
    v23[6] = v17;
    v23[7] = v16;
    v23[8] = v15;
    MLHandActionClassifier.GraphCNN.export(metadata:)((uint64_t)v23);
    Model.write(to:)();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v24, v5);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t outlined consume of MLModelMetadata?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for MLHandActionClassifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MLHandActionClassifier;
  if (!type metadata singleton initialization cache for MLHandActionClassifier)
    return swift_getSingletonMetadata();
  return result;
}

void MLHandActionClassifier.write(toFile:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_8_1();
  v3 = type metadata accessor for URL.DirectoryHint();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_54_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_6();
  v6 = OUTLINED_FUNCTION_78();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_161();
  __swift_storeEnumTagSinglePayload(v0, 1, 1, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, *MEMORY[0x24BDCD7A0], v3);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  MLHandActionClassifier.write(to:metadata:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
  OUTLINED_FUNCTION_7();
}

unint64_t MLHandActionClassifier.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;

  type metadata accessor for MLClassifierMetrics.Contents(0);
  OUTLINED_FUNCTION_3_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_20_0();
  v3 = type metadata accessor for MLHandActionClassifier();
  v4 = MLHandActionClassifier.ModelParameters.description.getter();
  v6 = v5;
  v7 = MLClassifierMetrics.accuracyDescription.getter();
  v9 = v8;
  outlined init with copy of MLTrainingSessionParameters(v0 + *(int *)(v3 + 36), v1, type metadata accessor for MLClassifierMetrics.Contents);
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  outlined destroy of MLHandPoseClassifier.ModelParameters(v1, type metadata accessor for MLClassifierMetrics.Contents);
  v10 = MLClassifierMetrics.accuracyDescription.getter();
  v12 = v11;
  v13._countAndFlagsBits = v4;
  v13._object = v6;
  String.append(_:)(v13);
  v14._countAndFlagsBits = v7;
  v14._object = v9;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD00000000000001ELL;
  v15._object = (void *)0x800000021AFF1480;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  if (v3 <= 1)
  {
    v16._countAndFlagsBits = v10;
    v16._object = v12;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0xD000000000000020;
    v17._object = (void *)0x800000021AFF14A0;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_101();
  swift_bridgeObjectRelease();
  return 0xD000000000000021;
}

void MLHandActionClassifier.playgroundDescription.getter(NSAttributedString *a1@<X8>)
{
  uint64_t v2;
  Swift::String v3;
  NSAttributedString v4;

  v2 = type metadata accessor for NSAttributedString(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v3._countAndFlagsBits = MLHandActionClassifier.debugDescription.getter();
  v4.super.isa = NSAttributedString.__allocating_init(string:)(v3).super.isa;
  a1[3].super.isa = (Class)v2;
  a1->super.isa = v4.super.isa;
  OUTLINED_FUNCTION_125();
}

id @nonobjc MLDictionaryFeatureProvider.init(dictionary:)()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  double v5;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x24BDAC8D0];
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7[0] = 0;
  v2 = objc_msgSend(v0, sel_initWithDictionary_error_, isa, v7);

  if (v2)
  {
    v3 = v7[0];
  }
  else
  {
    v4 = v7[0];
    _convertNSErrorToError(_:)();

    swift_willThrow(v5);
  }
  return v2;
}

uint64_t sub_21AEE5C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_8_36() - 8) + 80);
  v2 = (v1 + 41) & ~v1;
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  outlined consume of Result<_DataTable, Error>(*(id *)(v0 + 32), *(_BYTE *)(v0 + 40));
  type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
  if (OUTLINED_FUNCTION_114() == 1)
  {
    type metadata accessor for MLHandActionClassifier.DataSource();
    switch(OUTLINED_FUNCTION_114())
    {
      case 0u:
        v4 = type metadata accessor for URL();
        v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
        v5(v0 + v2, v4);
        v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (at: URL, annotationFile: URL, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        v5(v0 + v2 + *(int *)(v6 + 48), v4);
        OUTLINED_FUNCTION_10_1();
        OUTLINED_FUNCTION_10_1();
        OUTLINED_FUNCTION_10_1();
        goto LABEL_9;
      case 1u:
      case 2u:
        v3 = type metadata accessor for URL();
        OUTLINED_FUNCTION_11_1(v3);
        return swift_deallocObject();
      case 3u:
        OUTLINED_FUNCTION_219();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 4u:
        OUTLINED_FUNCTION_219();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 5u:
        v7 = type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_11_1(v7);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, sessionIdColumn: String, labelColumn: String, featureColumn: String));
        OUTLINED_FUNCTION_10_1();
        OUTLINED_FUNCTION_10_1();
        goto LABEL_9;
      case 6u:
        v8 = type metadata accessor for DataFrame();
        OUTLINED_FUNCTION_11_1(v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataFrame, videoColumn: String, labelColumn: String, startTimeColumn: String?, endTimeColumn: String?));
        OUTLINED_FUNCTION_10_1();
        OUTLINED_FUNCTION_10_1();
        OUTLINED_FUNCTION_10_1();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        return swift_deallocObject();
    }
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MLHandActionClassifier.init(trainingData:parameters:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_8_36() - 8) + 80);
  v5 = *(void **)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v7 = *(void **)(v1 + 32);
  v8 = *(_BYTE *)(v1 + 40);
  v9 = v1 + ((v4 + 41) & ~v4);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:);
  return closure #1 in MLHandActionClassifier.init(trainingData:parameters:)(a1, v5, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in MLHandActionClassifier.init(checkpoint:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for closure #1 in MLImageClassifier.init(trainingData:parameters:classNames:);
  return closure #1 in MLHandActionClassifier.init(checkpoint:)(a1);
}

uint64_t partial apply for closure #1 in MLHandActionClassifier.predictions(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #1 in MLHandActionClassifier.predictions(from:)(a1, a2, a3);
}

_QWORD *initializeBufferWithCopyOfBuffer for MLHandActionClassifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  id v13;
  char *v14;
  int *v15;
  uint64_t v16;
  id *v17;
  id *v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  id v28;
  id v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void **v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  void *v42;
  id v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v47;
  _QWORD *v48;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a3;
    v6 = a2;
    v7 = a1;
    v8 = (void *)a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = *(int *)(a3 + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for MLHandActionClassifier.ModelParameters.ValidationData(0);
    swift_bridgeObjectRetain();
    swift_retain();
    v13 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for MLHandActionClassifier.DataSource();
      v14 = (char *)&loc_21AEE5FFC + 4 * byte_21AFECD97[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    v15 = (int *)type metadata accessor for MLHandActionClassifier.ModelParameters(0);
    *(_QWORD *)&v10[v15[5]] = *(_QWORD *)&v11[v15[5]];
    *(_QWORD *)&v10[v15[6]] = *(_QWORD *)&v11[v15[6]];
    *(_QWORD *)&v10[v15[7]] = *(_QWORD *)&v11[v15[7]];
    *(_QWORD *)&v10[v15[8]] = *(_QWORD *)&v11[v15[8]];
    *(_QWORD *)&v10[v15[10]] = *(_QWORD *)&v11[v15[10]];
    v16 = *(int *)(v5 + 32);
    v17 = (id *)((char *)v7 + v16);
    v18 = (id *)((char *)v6 + v16);
    type metadata accessor for MLClassifierMetrics.Contents(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v28 = *v18;
      v29 = *v18;
      *v17 = v28;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v17 = *v18;
      v20 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v21 = *(int *)(v20 + 20);
      v22 = (char *)v17 + v21;
      v47 = v7;
      v23 = v5;
      v24 = (char *)v18 + v21;
      v25 = type metadata accessor for DataFrame();
      v48 = v6;
      v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
      v27 = v24;
      v5 = v23;
      v7 = v47;
      v26(v22, v27, v25);
      v26((char *)v17 + *(int *)(v20 + 24), (char *)v18 + *(int *)(v20 + 24), v25);
      v6 = v48;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v30 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v30 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v31 = __swift_instantiateConcreteTypeFromMangledName(v30);
      (*(void (**)(id *, id *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v17, v18, v31);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    v32 = *(int *)(v5 + 36);
    v33 = (void **)((char *)v7 + v32);
    v34 = (void **)((char *)v6 + v32);
    v35 = swift_getEnumCaseMultiPayload();
    if (v35 == 2)
    {
      v42 = *v34;
      v43 = v42;
      *v33 = v42;
    }
    else if (v35 == 1)
    {
      *v33 = *v34;
      v36 = type metadata accessor for MLClassifierMetrics.Precomputed(0);
      v37 = *(int *)(v36 + 20);
      v38 = (char *)v33 + v37;
      v39 = (char *)v34 + v37;
      v40 = type metadata accessor for DataFrame();
      v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
      v41(v38, v39, v40);
      v41((char *)v33 + *(int *)(v36 + 24), (char *)v34 + *(int *)(v36 + 24), v40);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Either<ClassificationMetrics<String>, ClassificationMetrics<Int>>);
      if (swift_getEnumCaseMultiPayload() == 1)
        v44 = &demangling cache variable for type metadata for ClassificationMetrics<Int>;
      else
        v44 = &demangling cache variable for type metadata for ClassificationMetrics<String>;
      v45 = __swift_instantiateConcreteTypeFromMangledName(v44);
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v33, v34, v45);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v7;
}

