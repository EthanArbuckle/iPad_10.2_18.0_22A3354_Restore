void storeEnumTagSinglePayload for PageTabView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64);
  v10 = (((v8 | 7) + 1) & ~(v8 | 7)) + v9;
  if (v6 - 1 >= a3)
  {
    v11 = 0u;
  }
  else
  {
    v11 = 1u;
    if (v10 <= 3)
    {
      v12 = (((v11 << (8 * v10)) + a3 - v6) >> (8 * v10)) + 1;
      if (HIWORD(v12))
      {
        v11 = 4u;
        if (v7 >= a2)
          goto LABEL_21;
      }
      else
      {
        if (v12 >= 0x100)
          v11 = 2;
        else
          v11 = v12 > 1;
        if (v7 >= a2)
LABEL_21:
          __asm { BR              X17 }
      }
LABEL_14:
      v13 = a2 - v6;
      if (v10 < 4)
      {
        if ((_DWORD)v10)
        {
          v14 = v13 & ~(-1 << (8 * v10));
          bzero(a1, v10);
          if ((_DWORD)v10 == 3)
          {
            *a1 = v14;
            *((_BYTE *)a1 + 2) = BYTE2(v14);
          }
          else if ((_DWORD)v10 == 2)
          {
            *a1 = v14;
          }
          else
          {
            *(_BYTE *)a1 = v14;
          }
        }
      }
      else
      {
        bzero(a1, (((v8 | 7) + 1) & ~(v8 | 7)) + v9);
        *(_DWORD *)a1 = v13;
      }
      __asm { BR              X10 }
    }
  }
  if (v7 >= a2)
    goto LABEL_21;
  goto LABEL_14;
}

void sub_18752129C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187521308);
}

void sub_1875212A4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187521308);
}

void sub_1875212AC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187521308);
}

void sub_1875212DC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187521308);
}

void sub_1875212EC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187521308);
}

void sub_1875212F4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187521308);
}

uint64_t instantiation function for generic protocol witness table for PageTabView<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PageTabView<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in IndexViewPlacementModifier()
{
  return &protocol witness table for IndexViewPlacementModifier;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IndexViewPlacementModifier.IsAutomaticPredicate()
{
  char v1;

  lazy protocol witness table accessor for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (v1 & 1) == 0;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IndexViewPlacementModifier.IsToolbarPredicate()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IndexViewPlacementModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IndexViewPlacementModifier()
{
  lazy protocol witness table accessor for type IndexViewPlacementModifier and conformance IndexViewPlacementModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance IndexViewPlacementModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type PageIndexDisplayMode and conformance PageIndexDisplayMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PageIndexDisplayMode and conformance PageIndexDisplayMode;
  if (!lazy protocol witness table cache variable for type PageIndexDisplayMode and conformance PageIndexDisplayMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PageIndexDisplayMode, &type metadata for PageIndexDisplayMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PageIndexDisplayMode and conformance PageIndexDisplayMode);
  }
  return result;
}

uint64_t PageTabView.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;
  _BYTE v15[56];

  v7 = *(_QWORD *)(a2 + 16);
  type metadata accessor for Binding();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v15[-v11 - 8];
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v15);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v12, &v3[*(int *)(a2 + 36)], v8);
  HIBYTE(v14) = *v3;
  return PageViewWrapper.init(children:selection:displayMode:)((uint64_t)v15, (uint64_t)v12, (char *)&v14 + 7, v7, *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance PageTabView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PageTabView<A>, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type _IndexViewPlacement.Role and conformance _IndexViewPlacement.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _IndexViewPlacement.Role and conformance _IndexViewPlacement.Role;
  if (!lazy protocol witness table cache variable for type _IndexViewPlacement.Role and conformance _IndexViewPlacement.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _IndexViewPlacement.Role, &type metadata for _IndexViewPlacement.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IndexViewPlacement.Role and conformance _IndexViewPlacement.Role);
  }
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in PageTabView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in PageTabViewStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void partial apply for closure #1 in PageTabViewStyle.Body.value.getter()
{
  closure #1 in PageTabViewStyle.Body.value.getter();
}

unint64_t lazy protocol witness table accessor for type IndexViewPlacementModifier and conformance IndexViewPlacementModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexViewPlacementModifier and conformance IndexViewPlacementModifier;
  if (!lazy protocol witness table cache variable for type IndexViewPlacementModifier and conformance IndexViewPlacementModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewPlacementModifier, &type metadata for IndexViewPlacementModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewPlacementModifier and conformance IndexViewPlacementModifier);
  }
  return result;
}

uint64_t specialized static IndexViewPlacementModifier._makeViewInputs(modifier:inputs:)()
{
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>();
  _GraphValue.value.getter();
  AGGraphGetValue();
  lazy protocol witness table accessor for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input();
  return PropertyList.subscript.setter();
}

void type metadata accessor for _GraphValue<IndexViewPlacementModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<IndexViewPlacementModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<IndexViewPlacementModifier>);
  }
}

void type metadata accessor for EnvironmentPropertyKey<PageIndexDisplayMode.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PageIndexDisplayMode.Key>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PageIndexDisplayMode.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PageIndexDisplayMode.Key>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for PageIndexDisplayMode.Key()
{
  return &type metadata for PageIndexDisplayMode.Key;
}

ValueMetadata *type metadata accessor for IndexViewPlacementModifier.Input()
{
  return &type metadata for IndexViewPlacementModifier.Input;
}

void sub_1875219A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PageViewWrapper(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

ValueMetadata *type metadata accessor for IndexViewPlacementModifier.IsToolbarPredicate()
{
  return &type metadata for IndexViewPlacementModifier.IsToolbarPredicate;
}

ValueMetadata *type metadata accessor for IndexViewPlacementModifier.IsAutomaticPredicate()
{
  return &type metadata for IndexViewPlacementModifier.IsAutomaticPredicate;
}

uint64_t ParameterizedLazyView.init(value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;
  _QWORD *v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7, a1, a4);
  result = type metadata accessor for ParameterizedLazyView(0, a4, a5, a6);
  v14 = (_QWORD *)(a7 + *(int *)(result + 44));
  *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for ParameterizedLazyView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParameterizedLazyView);
}

uint64_t type metadata completion function for ParameterizedLazyView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ParameterizedLazyView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187521BAC + 4 * byte_187C3CA00[v10]))();
  }
}

void storeEnumTagSinglePayload for ParameterizedLazyView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187521D24()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187521D9CLL);
}

void sub_187521D2C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187521D34);
  JUMPOUT(0x187521D9CLL);
}

void sub_187521D74()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187521D9CLL);
}

void sub_187521D7C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187521D9CLL);
}

uint64_t sub_187521D84(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187521D9CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187521D98);
    JUMPOUT(0x187521D90);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for LazyView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyView);
}

uint64_t associated type witness table accessor for View.Body : View in ParameterizedLazyView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance LazyView<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in LabeledContent<>.init(_:content:)(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t ParameterizedLazyView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v19 - v13;
  (*(void (**)(uint64_t, double))(v3 + *(int *)(v15 + 44)))(v16, v12);
  static ViewBuilder.buildExpression<A>(_:)(v9, v6, *(_QWORD *)(a1 + 32));
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, v6);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, v6, a3);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, v6);
}

uint64_t associated type witness table accessor for View.Body : View in LazyView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187521F30(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void static PaletteSelectionEffect.automatic.getter(_WORD *a1@<X8>)
{
  *a1 = 1024;
}

_WORD *static PaletteSelectionEffect.symbolVariant(_:)@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static PaletteSelectionEffect.custom.getter(_WORD *a1@<X8>)
{
  *a1 = 1280;
}

uint64_t View.paletteSelectionEffect(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.paletteSelectionEffect.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.paletteSelectionEffect.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance PaletteSelectionEffectKey(_WORD *a1@<X8>)
{
  *a1 = 1024;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance PaletteSelectionEffectKey(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  if (v2 >> 8 == 4)
  {
    if ((v3 & 0xFF00) != 0x400)
      goto LABEL_8;
  }
  else
  {
    if (v2 >> 8 != 5)
    {
      if (((v3 >> 8) & 0xFE) != 4)
      {
        v4 = static SymbolVariants.== infix(_:_:)();
        return v4 & 1;
      }
      goto LABEL_8;
    }
    if ((v3 & 0xFF00) != 0x500)
    {
LABEL_8:
      v4 = 0;
      return v4 & 1;
    }
  }
  v4 = 1;
  return v4 & 1;
}

uint64_t getEnumTagSinglePayload for PaletteSelectionEffect(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 65285 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65285 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65285;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65285;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65285;
  }
LABEL_17:
  if (*((unsigned __int8 *)a1 + 1) <= 5u)
    v6 = 5;
  else
    v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 - 6;
  if (*((unsigned __int8 *)a1 + 1) < 3u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PaletteSelectionEffect(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65285 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65285 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_187522338 + 4 * byte_187C3CAA5[v4]))();
  *a1 = a2 - 251;
  return ((uint64_t (*)(void))((char *)sub_18752236C + 4 * byte_187C3CAA0[v4]))();
}

uint64_t sub_18752236C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_187522374(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x18752237CLL);
  return result;
}

uint64_t sub_187522388(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x187522390);
  *(_BYTE *)(result + 1) = a2 + 5;
  return result;
}

uint64_t sub_187522394(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_18752239C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1875223A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<PaletteSelectionEffect>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PaletteSelectionEffect> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<PaletteSelectionEffect>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<PaletteSelectionEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PaletteSelectionEffect>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PaletteSelectionEffect>);
  }
}

uint64_t getEnumTagSinglePayload for PaletteSelectionEffect.Guts(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
  {
    if (*(unsigned __int8 *)(a1 + 1) <= 3u)
      v6 = 3;
    else
      v6 = *(unsigned __int8 *)(a1 + 1);
    v7 = v6 - 3;
    if (*(unsigned __int8 *)(a1 + 1) >= 3u)
      v8 = v7;
    else
      v8 = 0;
    if (v8 >= 3)
      return v8 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 65285;
    if (a2 + 65285 <= 0xFFFEFFFF)
      v3 = 2;
    else
      v3 = 4;
    if (v2 < 0xFF0000)
      v3 = 1;
    if (v2 >= 0x10000)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1875224CC + 4 * byte_187C3CAAA[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for PaletteSelectionEffect.Guts(_WORD *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 65285;
  if (a3 + 65285 <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFB)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_187522588 + 4 * byte_187C3CAB4[v5]))();
  *a1 = a2 - 251;
  return ((uint64_t (*)(void))((char *)sub_1875225BC + 4 * byte_187C3CAAF[v5]))();
}

uint64_t sub_1875225BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1875225C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1875225CCLL);
  return result;
}

uint64_t sub_1875225D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1875225E0);
  *(_BYTE *)(result + 1) = a2 + 5;
  return result;
}

uint64_t sub_1875225E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1875225EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t getEnumTag for PaletteSelectionEffect.Guts(uint64_t a1)
{
  int v1;
  unsigned int v2;

  if (*(unsigned __int8 *)(a1 + 1) <= 3u)
    v1 = 3;
  else
    v1 = *(unsigned __int8 *)(a1 + 1);
  v2 = v1 - 3;
  if (*(unsigned __int8 *)(a1 + 1) >= 3u)
    return v2;
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for PaletteSelectionEffect.Guts(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFC)
  {
    *(_WORD *)result = a2 - 253;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 1) = a2 + 3;
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PaletteSelectionEffectKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PaletteSelectionEffectKey>);
  }
}

ValueMetadata *type metadata accessor for PaletteSelectionEffectKey()
{
  return &type metadata for PaletteSelectionEffectKey;
}

BOOL static SidebarRowSize.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SidebarRowSize.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int SidebarRowSize.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.sidebarRowSize.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SidebarRowSize.Key>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SidebarRowSize.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.sidebarRowSize : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.sidebarRowSize.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.sidebarRowSize.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.sidebarRowSize.modify;
}

uint64_t EnvironmentValues.sidebarRowSize.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type SidebarRowSize and conformance SidebarRowSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarRowSize and conformance SidebarRowSize;
  if (!lazy protocol witness table cache variable for type SidebarRowSize and conformance SidebarRowSize)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarRowSize, &type metadata for SidebarRowSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarRowSize and conformance SidebarRowSize);
  }
  return result;
}

uint64_t sub_187522C28()
{
  return EnvironmentValues.sidebarRowSize.setter();
}

uint64_t storeEnumTagSinglePayload for SidebarRowSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187522CA8 + 4 * byte_187C3CB91[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187522CDC + 4 * byte_187C3CB8C[v4]))();
}

uint64_t sub_187522CDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187522CE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187522CECLL);
  return result;
}

uint64_t sub_187522CF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187522D00);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187522D04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187522D0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SidebarRowSize()
{
  return &type metadata for SidebarRowSize;
}

void *type metadata accessor for SidebarRowSize.Key()
{
  return &unk_1E1AB93C8;
}

uint64_t UIKitGestureContainer._proxyView.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = result + 16;
    swift_beginAccess();
    if (MEMORY[0x18D760234](v2))
    {
      v3 = *(_QWORD *)(v1 + 24);
      ObjectType = swift_getObjectType();
      v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16))(&v6, v5, v5, ObjectType, v3);
      swift_release();
      swift_unknownObjectRelease();
      return v6;
    }
    else
    {
      swift_release();
      return 0;
    }
  }
  return result;
}

char *UIKitGestureContainer.init(responder:)(uint64_t *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  char *v12;
  void *v13;
  uint64_t v14;
  char *v15;
  objc_super v17;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_responder + 8] = 0;
  v7 = swift_weakInit();
  v8 = &v3[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_subgraphObserver];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_registeredGestureRecognizers] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer__actingParentContainer] = 0;
  *(_QWORD *)(v7 + 8) = a2;
  swift_weakAssign();
  v17.receiver = v3;
  v17.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v17, sel_init);
  v10 = *a1;
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  v12 = (char *)v9;
  v13 = (void *)v11(v10, a2);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  v14 = AGSubgraphAddObserver();

  swift_release_n();
  swift_release();
  v15 = &v12[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_subgraphObserver];
  *(_QWORD *)v15 = v14;
  v15[8] = 0;
  return v12;
}

void closure #1 in UIKitGestureContainer.init(responder:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = (char *)v2;
    UIKitGestureContainer.unregister()();
    v4 = &v3[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_subgraphObserver];
    *(_QWORD *)v4 = 0;
    v4[8] = 1;

  }
}

uint64_t UIKitGestureContainer.unregister()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE v11[8];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_responder;
  Strong = (_QWORD *)swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)(v2 + 8) + 24))(*Strong);
    swift_release();
  }
  v4 = OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_registeredGestureRecognizers;
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_registeredGestureRecognizers);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of WeakBox<UIGestureRecognizer>(v7, (uint64_t)v11);
      v8 = MEMORY[0x18D760234](v11);
      if (v8)
      {
        v9 = (void *)v8;
        _UIGestureRecognizerUnregisterFromContainer();

      }
      outlined destroy of WeakBox<UIGestureRecognizer>((uint64_t)v11);
      v7 += 8;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v1 + v4) = MEMORY[0x1E0DEE9D8];
  return swift_bridgeObjectRelease();
}

unint64_t UIKitGestureContainer.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *Strong;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  Swift::String v15;
  Swift::String v16;
  uint64_t v18;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_responder;
  Strong = (_QWORD *)swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)(v1 + 8) + 32))(*Strong);
    v3 = _typeName(_:qualified:)();
    v5 = v4;
    swift_release();
  }
  else
  {
    v5 = (void *)0xE300000000000000;
    v3 = 7104878;
  }
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v20 = 0xD000000000000016;
  v21 = 0x8000000187BE2520;
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8 = swift_weakLoadStrong();
  if (v8)
  {
    v9 = (uint64_t *)v8;
    v10 = swift_conformsToProtocol2();
    if (v10)
      v11 = v10;
    else
      v11 = 0;
    if (v10)
      v12 = v9;
    else
      v12 = 0;
    if (v12
      && (v13 = *v12,
          v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 72),
          v14((uint64_t *)&v19, *v12, v11),
          LOBYTE(v19._countAndFlagsBits)))
    {
      v19._countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      v15._countAndFlagsBits = 32;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      v14(&v18, v13, v11);
      _print_unlocked<A, B>(_:_:)();
      String.append(_:)(v19);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 32;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v18 = v0;
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t UIKitGestureContainer.next.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18[3];

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer__actingParentContainer))
  {
    objc_opt_self();
    v1 = swift_dynamicCastObjCClass();
    if (v1)
    {
      v2 = v1;
      swift_unknownObjectRetain();
      return v2;
    }
  }
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
LABEL_16:
    v10 = swift_weakLoadStrong();
    if (v10)
    {
      v11 = v10;
      v12 = v10 + 16;
      swift_beginAccess();
      if (MEMORY[0x18D760234](v12))
      {
        v13 = *(_QWORD *)(v11 + 24);
        ObjectType = swift_getObjectType();
        v15 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(&v17, v15, v15, ObjectType, v13);
        swift_release();
        swift_unknownObjectRelease();
        return v17;
      }
      swift_release();
    }
    return 0;
  }
  v4 = Strong;
  swift_retain();
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
LABEL_12:
    swift_beginAccess();
    if (MEMORY[0x18D760234](v4 + 16))
    {
      v7 = *(_QWORD *)(v4 + 24);
      v8 = swift_getObjectType();
      v9 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v18, v9, v9, v8, v7);
      swift_unknownObjectRelease();
      v2 = v18[0];
      swift_release();
      swift_release();
      if (v2)
        return v2;
    }
    else
    {
      swift_release();
      swift_release();
    }
    goto LABEL_16;
  }
  while (1)
  {
    v5 = dispatch thunk of ViewResponder.gestureContainer.getter();
    if (v5)
      break;
    type metadata accessor for UIViewResponder();
    v6 = swift_dynamicCastClass();
    if (v6)
    {
      v5 = MEMORY[0x18D760234](v6 + 48);
      if (v5)
        break;
    }
    swift_release();
    swift_beginAccess();
    if (!swift_weakLoadStrong())
      goto LABEL_12;
  }
  v2 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

uint64_t UIKitGestureContainer.gestureRecognizers.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE v20[16];
  unint64_t v21;

  Strong = swift_weakLoadStrong();
  result = MEMORY[0x1E0DEE9D8];
  if (Strong)
  {
    v21 = MEMORY[0x1E0DEE9D8];
    MEMORY[0x1E0C80A78](MEMORY[0x1E0DEE9D8], v1);
    static Update.ensure<A>(_:)();
    v4 = v21;
    v5 = v21 >> 62;
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v7 = OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_registeredGestureRecognizers;
    v8 = *(_QWORD **)(v0 + OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_registeredGestureRecognizers);
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v0 + v7) = v8;
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v6 <= v8[3] >> 1)
    {
      *(_QWORD *)(v0 + v7) = v8;
      if (!v5)
        goto LABEL_7;
    }
    else
    {
      if (v8[2] <= v6)
        v11 = v6;
      else
        v11 = v8[2];
      *(_QWORD *)(v0 + v7) = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 0, v8);
      if (!v5)
      {
LABEL_7:
        v10 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain();
        if (!v10)
          goto LABEL_24;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v10 = result;
    if (!result)
    {
LABEL_24:
      swift_release();
      swift_bridgeObjectRelease();
      return v21;
    }
LABEL_14:
    if (v10 < 1)
    {
      __break(1u);
      return result;
    }
    v12 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v13 = (id)MEMORY[0x18D75E3BC](v12, v4);
      else
        v13 = *(id *)(v4 + 8 * v12 + 32);
      v14 = v13;
      _UIGestureRecognizerRegisterInContainer();
      swift_unknownObjectWeakInit();
      v15 = swift_unknownObjectWeakAssign();
      outlined init with take of WeakBox<UIGestureRecognizer>(v15, (uint64_t)v20);
      v16 = *(_QWORD **)(v0 + v7);
      v17 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v0 + v7) = v16;
      if ((v17 & 1) == 0)
      {
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        *(_QWORD *)(v0 + v7) = v16;
      }
      v19 = v16[2];
      v18 = v16[3];
      if (v19 >= v18 >> 1)
      {
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
        *(_QWORD *)(v0 + v7) = v16;
      }
      ++v12;
      v16[2] = v19 + 1;
      outlined init with take of WeakBox<UIGestureRecognizer>((uint64_t)v20, (uint64_t)&v16[v19 + 4]);

    }
    while (v10 != v12);
    goto LABEL_24;
  }
  return result;
}

uint64_t closure #1 in UIKitGestureContainer.gestureRecognizers.getter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t ObjectType;
  void (*v11)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(a3 + 16))(*a2, a3);
  v5 = MEMORY[0x1E0DEE9D8];
  v15 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    v7 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    v8 = (uint64_t *)(v4 + 40);
    do
    {
      v9 = *v8;
      ObjectType = swift_getObjectType();
      v11 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16);
      swift_unknownObjectRetain();
      v11(&v14, v7, v7, ObjectType, v9);
      v12 = swift_unknownObjectRelease();
      if (v14)
      {
        MEMORY[0x18D75CF58](v12);
        if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += 2;
      --v6;
    }
    while (v6);
    v5 = v15;
  }
  swift_bridgeObjectRelease();
  *a1 = v5;
  return swift_bridgeObjectRelease();
}

uint64_t UIKitGestureContainer._parentContainer.getter()
{
  uint64_t Strong;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v9;

  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v1 = Strong;
  swift_retain();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    while (1)
    {
      v2 = dispatch thunk of ViewResponder.gestureContainer.getter();
      if (v2)
        break;
      type metadata accessor for UIViewResponder();
      v3 = swift_dynamicCastClass();
      if (v3)
      {
        v2 = MEMORY[0x18D760234](v3 + 48);
        if (v2)
          break;
      }
      swift_release();
      swift_beginAccess();
      if (!swift_weakLoadStrong())
        goto LABEL_10;
    }
    v4 = v2;
    swift_release();
  }
  else
  {
LABEL_10:
    swift_beginAccess();
    v4 = MEMORY[0x18D760234](v1 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(v1 + 24);
      ObjectType = swift_getObjectType();
      v7 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16))(&v9, v7, v7, ObjectType, v5);
      swift_unknownObjectRelease();
      v4 = v9;
    }
  }
  swift_release();
  swift_release();
  return v4;
}

uint64_t ViewResponder.childGestureContainers.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v7 = MEMORY[0x1E0DEE9D8];
  result = dispatch thunk of ViewResponder.childCount.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    if (result)
    {
      v2 = 0;
      do
      {
        dispatch thunk of ViewResponder.child(at:)();
        v4 = (void *)dispatch thunk of ViewResponder.gestureContainer.getter();
        if (v4
          || (type metadata accessor for UIViewResponder(), (v6 = swift_dynamicCastClass()) != 0)
          && (v4 = (void *)MEMORY[0x18D760234](v6 + 40)) != 0)
        {
          v5 = v4;
          MEMORY[0x18D75CF58]();
          if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();

        }
        else
        {
          v3 = ViewResponder.childGestureContainers.getter();
          specialized Array.append<A>(contentsOf:)(v3);
          swift_release();
        }
        ++v2;
      }
      while (v1 != v2);
      return v7;
    }
    else
    {
      return MEMORY[0x1E0DEE9D8];
    }
  }
  return result;
}

id UIKitGestureContainer._eventReceivingWindow.getter()
{
  uint64_t Strong;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  id v6;
  id v7;
  id v9;

  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v1 = Strong;
  v2 = Strong + 16;
  swift_beginAccess();
  if (MEMORY[0x18D760234](v2))
  {
    v3 = *(_QWORD *)(v1 + 24);
    ObjectType = swift_getObjectType();
    v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    (*(void (**)(id *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16))(&v9, v5, v5, ObjectType, v3);
    swift_release();
    swift_unknownObjectRelease();
    v6 = v9;
  }
  else
  {
    swift_release();
    v6 = 0;
  }
  v7 = objc_msgSend(v6, sel_window);

  return v7;
}

uint64_t type metadata accessor for UIKitGestureContainer()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for UIKitGestureContainerFactory()
{
  return &type metadata for UIKitGestureContainerFactory;
}

char *protocol witness for static GestureContainerFactory.makeGestureContainer(responder:) in conformance UIKitGestureContainerFactory(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t *v4;

  v3 = objc_allocWithZone((Class)type metadata accessor for UIKitGestureContainer());
  v4 = (uint64_t *)swift_retain();
  return UIKitGestureContainer.init(responder:)(v4, a2);
}

uint64_t sub_1875240D0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitGestureContainer.init(responder:)()
{
  uint64_t v0;

  closure #1 in UIKitGestureContainer.init(responder:)(v0);
}

uint64_t outlined init with copy of WeakBox<UIGestureRecognizer>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<UIGestureRecognizer>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WeakBox<UIGestureRecognizer>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for WeakBox<UIGestureRecognizer>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t closure #1 in printGestureContainerAncestors(_:)()
{
  unint64_t v0;
  Swift::String v1;
  Swift::String v2;

  type metadata accessor for UIKitGestureContainer();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
    v0 = UIKitGestureContainer.description.getter();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_getObjectType();
    v1._countAndFlagsBits = AGTypeID.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 32;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
    _print_unlocked<A, B>(_:_:)();
    return 0;
  }
  return v0;
}

uint64_t specialized UIKitGestureContainer._compare(_:)()
{
  return _UIGestureRecognizerContainerCompare();
}

unint64_t type metadata accessor for _UIGestureRecognizerContainer()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _UIGestureRecognizerContainer;
  if (!lazy cache variable for type metadata for _UIGestureRecognizerContainer)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
  }
  return result;
}

uint64_t partial apply for closure #1 in UIKitGestureContainer.gestureRecognizers.getter()
{
  uint64_t v0;

  return closure #1 in UIKitGestureContainer.gestureRecognizers.getter(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t outlined init with take of WeakBox<UIGestureRecognizer>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<UIGestureRecognizer>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized printGestureContainerAncestors(_:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  unint64_t v7;
  unint64_t v8;
  id (*v9)(uint64_t);
  void *v10;
  unint64_t (*v11)();
  uint64_t v12;

  v11 = closure #1 in printGestureContainerAncestors(_:);
  v12 = 0;
  v7 = MEMORY[0x1E0C809B0];
  v8 = 1107296256;
  v9 = thunk for @escaping @callee_guaranteed (@guaranteed _UIGestureRecognizerContainer) -> (@owned String?);
  v10 = &block_descriptor_35;
  v0 = _Block_copy(&v7);
  v1 = (id)_UIGestureRecognizerContainerAncestralDescription();
  _Block_release(v0);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v7 = 0xD000000000000013;
  v8 = 0x8000000187BE2540;
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  MEMORY[0x18D75AC60](v7, v8);
  return swift_bridgeObjectRelease();
}

void static ContentMarginPlacement.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ContentMarginPlacement.scrollContent.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ContentMarginPlacement.scrollIndicators.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static ContentMarginPlacement.toolbar.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t storeEnumTagSinglePayload for ContentMarginPlacement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18752447C + 4 * byte_187C3CCB5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1875244B0 + 4 * byte_187C3CCB0[v4]))();
}

uint64_t sub_1875244B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875244B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1875244C0);
  return result;
}

uint64_t sub_1875244CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1875244D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1875244D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875244E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentMarginPlacement.Role and conformance ContentMarginPlacement.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentMarginPlacement.Role and conformance ContentMarginPlacement.Role;
  if (!lazy protocol witness table cache variable for type ContentMarginPlacement.Role and conformance ContentMarginPlacement.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentMarginPlacement.Role, &type metadata for ContentMarginPlacement.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentMarginPlacement.Role and conformance ContentMarginPlacement.Role);
  }
  return result;
}

SwiftUI::AccessoryCircularCapacityGaugeStyle __swiftcall AccessoryCircularCapacityGaugeStyle.init()()
{
  _BYTE *v0;
  SwiftUI::AccessoryCircularCapacityGaugeStyle result;

  *v0 = 0;
  return result;
}

double closure #1 in CircularPercentageGauge.body.getter@<D0>(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  KeyPath = swift_getKeyPath();
  v7 = swift_getKeyPath();
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  result = 58.0;
  *(_OWORD *)a2 = xmmword_187C1BBA0;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  *(_BYTE *)(a2 + 40) = a1 & 1;
  *(_BYTE *)(a2 + 41) = BYTE1(a1) & 1;
  *(_BYTE *)(a2 + 42) = BYTE2(a1) & 1;
  *(_QWORD *)(a2 + 48) = v9;
  *(_WORD *)(a2 + 56) = 256;
  *(_QWORD *)(a2 + 64) = KeyPath;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = v7;
  *(_BYTE *)(a2 + 88) = 0;
  return result;
}

double closure #2 in CircularPercentageGauge.body.getter@<D0>(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  KeyPath = swift_getKeyPath();
  v7 = swift_getKeyPath();
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  result = 58.0;
  *(_OWORD *)a2 = xmmword_187C1BBA0;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  *(_BYTE *)(a2 + 40) = a1 & 1;
  *(_BYTE *)(a2 + 41) = BYTE1(a1) & 1;
  *(_BYTE *)(a2 + 42) = BYTE2(a1) & 1;
  *(_QWORD *)(a2 + 48) = v9;
  *(_WORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = KeyPath;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = v7;
  *(_BYTE *)(a2 + 88) = 0;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance CircularPercentageGauge()
{
  return specialized static StaticIf<>._viewListCount(inputs:)();
}

double protocol witness for View.body.getter in conformance CircularPercentageGauge@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double v3;
  int v4;
  int v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  _OWORD v13[6];
  _OWORD v14[4];
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];

  v3 = *(double *)v1;
  v4 = *(unsigned __int8 *)(v1 + 8);
  v5 = *(unsigned __int8 *)(v1 + 9);
  v6 = *(unsigned __int8 *)(v1 + 10);
  LOBYTE(v16) = v4;
  LOBYTE(v13[0]) = v5;
  closure #1 in CircularPercentageGauge.body.getter(v4 | (v5 << 8) | (v6 << 16), (uint64_t)v13, v3);
  LOBYTE(v16) = v4;
  closure #2 in CircularPercentageGauge.body.getter(v4 | (v5 << 8) | (v6 << 16), (uint64_t)v14, v3);
  v24[0] = v15[0];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)v15 + 9);
  v20 = v13[4];
  v21 = v13[5];
  v22 = v14[0];
  v23 = v14[1];
  v16 = v13[0];
  v17 = v13[1];
  v18 = v13[2];
  v19 = v13[3];
  v7 = v14[3];
  a1[8] = v14[2];
  a1[9] = v7;
  a1[10] = v24[0];
  *(_OWORD *)((char *)a1 + 169) = *(_OWORD *)((char *)v24 + 9);
  v8 = v21;
  a1[4] = v20;
  a1[5] = v8;
  v9 = v23;
  a1[6] = v22;
  a1[7] = v9;
  v10 = v17;
  *a1 = v16;
  a1[1] = v10;
  result = *(double *)&v18;
  v12 = v19;
  a1[2] = v18;
  a1[3] = v12;
  return result;
}

uint64_t SizedCircularPercentageGauge.body.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  _OWORD v18[2];

  v3 = v1[3];
  v17[2] = v1[2];
  v17[3] = v3;
  v18[0] = v1[4];
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)v1 + 73);
  v4 = v1[1];
  v17[0] = *v1;
  v17[1] = v4;
  v5 = v3;
  v6 = BYTE8(v3);
  outlined copy of Environment<ControlSize>.Content(v3, BYTE8(v3));
  specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<ControlSize>.Content(v5, v6);
  v7 = (_OWORD *)swift_allocObject();
  v8 = v1[3];
  v7[3] = v1[2];
  v7[4] = v8;
  v7[5] = v1[4];
  *(_OWORD *)((char *)v7 + 89) = *(_OWORD *)((char *)v1 + 73);
  v9 = v1[1];
  v7[1] = *v1;
  v7[2] = v9;
  outlined retain of SizedCircularPercentageGauge((uint64_t)v17, (void (*)(_QWORD, _QWORD))outlined copy of Environment<SceneBridge?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = partial apply for closure #1 in SizedCircularPercentageGauge.body.getter;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v16;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = result;
  *(_QWORD *)(a1 + 88) = 0x3F847AE147AE147BLL;
  return result;
}

uint64_t closure #1 in closure #1 in SizedCircularPercentageGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  double v21;
  double v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  char v62;
  _OWORD v63[10];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[231];
  char v69;
  char v70;
  _OWORD v71[10];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v89;
  char v90;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(unsigned __int8 *)(a1 + 72);
  outlined retain of SizedCircularPercentageGauge(a1, (void (*)(_QWORD, _QWORD))outlined copy of Environment<SceneBridge?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined retain of SizedCircularPercentageGauge(a1, (void (*)(_QWORD, _QWORD))outlined copy of Environment<SceneBridge?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<ControlSize>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7, (uint64_t *)v68);
  outlined consume of Environment<ControlSize>.Content(v6, v7);
  if ((v68[0] & 2) != 0)
  {
    v8 = *(_QWORD *)(a1 + 80);
    v9 = *(unsigned __int8 *)(a1 + 88);
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(_QWORD, _QWORD))outlined copy of Environment<SceneBridge?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    outlined copy of Environment<ControlSize>.Content(v8, v9);
    v10 = specialized Environment.wrappedValue.getter(v8, v9);
    outlined consume of Environment<ControlSize>.Content(v8, v9);
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<AnyShapeStyle?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<AnyShapeStyle?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<AnyShapeStyle?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    v11 = 0;
    if ((v10 & 1) != 0)
      goto LABEL_5;
  }
  else
  {
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<AnyShapeStyle?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<AnyShapeStyle?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  }
  v11 = *(_QWORD *)(a1 + 32);
LABEL_5:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(unsigned __int8 *)(a1 + 24);
  outlined copy of Environment<SceneBridge?>.Content(v12, v13);
  v14 = specialized Environment.wrappedValue.getter(v12, v13);
  outlined consume of Environment<AnyShapeStyle?>.Content(v12, v13);
  KeyPath = swift_getKeyPath();
  v16 = swift_getKeyPath();
  if (!v14)
  {
    *(_QWORD *)v68 = static Color.primary.getter();
    v14 = AnyShapeStyle.init<A>(_:)();
  }
  v17 = static HorizontalAlignment.center.getter();
  v18 = *(_BYTE *)(a1 + 40);
  v19 = static VerticalAlignment.center.getter();
  v84 = v17;
  v85 = 0;
  v86 = 1;
  v87 = v19;
  v88 = 0;
  v89 = 1;
  v90 = v18 & 1;
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v68 = *(_OWORD *)a2;
  *(_OWORD *)&v68[16] = v20;
  *(_OWORD *)&v68[32] = *(_OWORD *)(a2 + 32);
  *(_DWORD *)&v68[48] = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  v22 = v21 * 0.7;
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, v22, 0, 0.0, 1, &v51, 0.0, 1, 0.0, 1);
  v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v68 = *(_OWORD *)a2;
  *(_OWORD *)&v68[16] = v23;
  *(_OWORD *)&v68[32] = *(_OWORD *)(a2 + 32);
  *(_DWORD *)&v68[48] = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  static Font.Weight.medium.getter();
  v68[0] = 4;
  v24 = static Font.system(size:weight:design:)();
  v25 = swift_getKeyPath();
  v26 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v68 = *(_OWORD *)a2;
  *(_OWORD *)&v68[16] = v26;
  *(_OWORD *)&v68[32] = *(_OWORD *)(a2 + 32);
  *(_DWORD *)&v68[48] = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  v27 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v68 = *(_OWORD *)a2;
  *(_OWORD *)&v68[16] = v27;
  *(_OWORD *)&v68[32] = *(_OWORD *)(a2 + 32);
  *(_DWORD *)&v68[48] = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v28 = v79;
  v29 = v80;
  v30 = v81;
  v31 = v82;
  v32 = v83;
  v33 = v57;
  v34 = v58;
  v63[6] = v57;
  v63[7] = v58;
  v35 = v59;
  v36 = v60;
  v63[8] = v59;
  v63[9] = v60;
  v37 = v53;
  v38 = v54;
  v63[2] = v53;
  v63[3] = v54;
  v39 = v55;
  v40 = v56;
  v63[4] = v55;
  v63[5] = v56;
  v41 = v51;
  v42 = v52;
  v63[0] = v51;
  v63[1] = v52;
  *(_QWORD *)&v64 = v25;
  *((_QWORD *)&v64 + 1) = v24;
  *(_QWORD *)&v65 = v79;
  BYTE8(v65) = v80;
  *(_QWORD *)&v66 = v81;
  BYTE8(v66) = v82;
  v67 = v83;
  *(_OWORD *)&v68[103] = v57;
  *(_OWORD *)&v68[119] = v58;
  *(_OWORD *)&v68[135] = v59;
  *(_OWORD *)&v68[151] = v60;
  *(_OWORD *)&v68[39] = v53;
  *(_OWORD *)&v68[55] = v54;
  *(_OWORD *)&v68[71] = v55;
  *(_OWORD *)&v68[87] = v56;
  *(_OWORD *)&v68[7] = v51;
  *(_OWORD *)&v68[23] = v52;
  *(_OWORD *)&v68[167] = v64;
  *(_OWORD *)&v68[183] = v65;
  *(_OWORD *)&v68[199] = v66;
  *(_OWORD *)&v68[215] = v83;
  *(_QWORD *)a3 = v11;
  v43 = *(_OWORD *)&v68[160];
  *(_OWORD *)(a3 + 225) = *(_OWORD *)&v68[176];
  v44 = *(_OWORD *)&v68[208];
  *(_OWORD *)(a3 + 241) = *(_OWORD *)&v68[192];
  *(_OWORD *)(a3 + 257) = v44;
  v45 = *(_OWORD *)&v68[96];
  *(_OWORD *)(a3 + 161) = *(_OWORD *)&v68[112];
  v46 = *(_OWORD *)&v68[144];
  *(_OWORD *)(a3 + 177) = *(_OWORD *)&v68[128];
  *(_OWORD *)(a3 + 193) = v46;
  *(_OWORD *)(a3 + 209) = v43;
  v47 = *(_OWORD *)&v68[32];
  *(_OWORD *)(a3 + 97) = *(_OWORD *)&v68[48];
  v48 = *(_OWORD *)&v68[80];
  *(_OWORD *)(a3 + 113) = *(_OWORD *)&v68[64];
  *(_OWORD *)(a3 + 129) = v48;
  *(_OWORD *)(a3 + 145) = v45;
  v49 = *(_OWORD *)&v68[16];
  *(_OWORD *)(a3 + 49) = *(_OWORD *)v68;
  *(_OWORD *)(a3 + 65) = v49;
  *(_OWORD *)(a3 + 81) = v47;
  v71[6] = v33;
  v71[7] = v34;
  v71[8] = v35;
  v71[9] = v36;
  v71[2] = v37;
  v71[3] = v38;
  v71[4] = v39;
  v71[5] = v40;
  v62 = v29;
  v61 = v31;
  v70 = 0;
  v69 = 0;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = KeyPath;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = v16;
  *(_BYTE *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 272) = *(_QWORD *)&v68[223];
  v71[0] = v41;
  v71[1] = v42;
  v72 = v25;
  v73 = v24;
  v74 = v28;
  v75 = v29;
  v76 = v30;
  v77 = v31;
  v78 = v32;
  swift_retain();
  outlined copy of Environment<(Color, Color)?>.Content(KeyPath, 0, 0);
  outlined copy of Environment<ControlSize>.Content(v16, 0);
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>((uint64_t)v63);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>((uint64_t)v71);
  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(KeyPath, 0, 0);
  return outlined consume of Environment<ControlSize>.Content(v16, 0);
}

uint64_t CircularPercentageGaugeRing.resolvedTint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  __int128 v13;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(unsigned __int8 *)(v0 + 48);
  AnyShapeStyle.as<A>(type:)();
  v7 = v12[0];
  if (v12[0])
  {
    swift_retain();
    outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
    outlined copy of Environment<ControlSize>.Content(v5, v6);
    outlined copy of Environment<ControlSize>.Content(v5, v6);
    specialized Environment.wrappedValue.getter(v5, v6, v12);
    outlined consume of Environment<ControlSize>.Content(v5, v6);
    swift_release();
    outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
    outlined consume of Environment<ControlSize>.Content(v5, v6);
    if (LOBYTE(v12[0]) == 1)
    {
      v8 = Gradient.reversed.getter();
      swift_bridgeObjectRelease();
      v7 = v8;
    }
    static UnitPoint.center.getter();
    v12[0] = v7;
    v12[1] = v9;
    v12[2] = v10;
    v13 = xmmword_187C3CD50;
    return AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    AnyShapeStyle.as<A>(type:)();
    swift_retain();
  }
  return v1;
}

uint64_t CircularPercentageGaugeRing.resolvedStartCapColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(unsigned __int8 *)(v0 + 48);
  swift_retain();
  outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined copy of Environment<ControlSize>.Content(v5, v6);
  outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
  v7 = specialized Environment.wrappedValue.getter(v2, v3, v4);
  outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined consume of Environment<ControlSize>.Content(v5, v6);
  if (v7)
  {
    v1 = AnyShapeStyle.init<A>(_:)();
    swift_release();
  }
  else
  {
    AnyShapeStyle.as<A>(type:)();
    if (v9)
    {
      Gradient.color(at:)();
      swift_bridgeObjectRelease();
      return AnyShapeStyle.init<A>(_:)();
    }
    else
    {
      AnyShapeStyle.as<A>(type:)();
      swift_retain();
    }
  }
  return v1;
}

uint64_t CircularPercentageGaugeRing.resolvedEndCapColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(unsigned __int8 *)(v0 + 48);
  swift_retain();
  outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined copy of Environment<ControlSize>.Content(v5, v6);
  outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
  v7 = specialized Environment.wrappedValue.getter(v2, v3, v4);
  outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined consume of Environment<ControlSize>.Content(v5, v6);
  if (v7)
  {
    v1 = AnyShapeStyle.init<A>(_:)();
    swift_release();
  }
  else
  {
    AnyShapeStyle.as<A>(type:)();
    if (v9)
    {
      Gradient.color(at:)();
      swift_bridgeObjectRelease();
      return AnyShapeStyle.init<A>(_:)();
    }
    else
    {
      AnyShapeStyle.as<A>(type:)();
      swift_retain();
    }
  }
  return v1;
}

__n128 closure #1 in CircularPercentageGaugeRing.body.getter@<Q0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 result;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v11 = a1[6];
  v10 = a1[7];
  v29 = a1[9];
  v30 = a1[8];
  v27 = a1[11];
  v28 = a1[10];
  v26 = a1[12];
  GeometryProxy.size.getter();
  v13 = v12;
  *(_QWORD *)&v32 = __PAIR64__(v5, v4);
  *((_QWORD *)&v32 + 1) = __PAIR64__(v7, v6);
  v33.n128_u64[0] = __PAIR64__(v9, v8);
  v33.n128_u64[1] = __PAIR64__(v10, v11);
  *(_QWORD *)&v34 = __PAIR64__(v29, v30);
  *((_QWORD *)&v34 + 1) = __PAIR64__(v27, v28);
  LODWORD(v35) = v26;
  GeometryProxy.size.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v15 / 10.5;
  v17 = static Alignment.center.getter();
  v19 = v18;
  closure #1 in closure #1 in CircularPercentageGaugeRing.body.getter(a2, (uint64_t)&v32, v16);
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v19;
  v20 = v43;
  *(_OWORD *)(a3 + 176) = v42;
  *(_OWORD *)(a3 + 192) = v20;
  *(_QWORD *)(a3 + 208) = v44;
  v21 = v39;
  *(_OWORD *)(a3 + 112) = v38;
  *(_OWORD *)(a3 + 128) = v21;
  v22 = v41;
  *(_OWORD *)(a3 + 144) = v40;
  *(_OWORD *)(a3 + 160) = v22;
  v23 = v35;
  *(_OWORD *)(a3 + 48) = v34;
  *(_OWORD *)(a3 + 64) = v23;
  v24 = v37;
  *(_OWORD *)(a3 + 80) = v36;
  *(_OWORD *)(a3 + 96) = v24;
  result = v33;
  *(_OWORD *)(a3 + 16) = v32;
  *(__n128 *)(a3 + 32) = result;
  return result;
}

uint64_t closure #1 in closure #1 in CircularPercentageGaugeRing.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t started;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  outlined retain of CircularPercentageGaugeRing(a1);
  outlined copy of Environment<(Color, Color)?>.Content(v7, v6, v8);
  v9 = specialized Environment.wrappedValue.getter(v7, v6, v8);
  v11 = v10;
  outlined consume of Environment<(Color, Color)?>.Content(v7, v6, v8);
  if (v9)
  {
    *(_QWORD *)&v52 = v11;
    swift_retain();
    v50 = AnyShapeStyle.init<A>(_:)();
    swift_release();
    swift_release();
  }
  else
  {
    v12 = *(_OWORD *)(a1 + 16);
    v52 = *(_OWORD *)a1;
    v53 = v12;
    v54 = *(_OWORD *)(a1 + 32);
    v55 = *(_BYTE *)(a1 + 48);
    *(_QWORD *)&v52 = CircularPercentageGaugeRing.resolvedTint.getter();
    DWORD2(v52) = 1051931443;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], MEMORY[0x1E0CE4650]);
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
    v50 = AnyShapeStyle.init<A>(_:)();
  }
  outlined release of CircularPercentageGaugeRing(a1);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  v13 = v56;
  v14 = v57;
  v15 = v58;
  v16 = v60;
  v17 = static Alignment.center.getter();
  v19 = *(double *)a1;
  v49 = v59;
  if (*(double *)a1 <= 0.0)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0.0;
    v26 = 0.0;
    v27 = 0;
    v28 = 0;
    v29 = 0.0;
    v30 = 0;
    v31 = 0;
  }
  else
  {
    v47 = v18;
    v48 = v17;
    outlined retain of CircularPercentageGaugeRing(a1);
    outlined copy of Environment<(Color, Color)?>.Content(v7, v6, v8);
    v20 = specialized Environment.wrappedValue.getter(v7, v6, v8);
    outlined consume of Environment<(Color, Color)?>.Content(v7, v6, v8);
    if (v20)
    {
      *(_QWORD *)&v52 = v20;
      v43 = AnyShapeStyle.init<A>(_:)();
      swift_release();
    }
    else
    {
      v32 = *(_OWORD *)(a1 + 16);
      v52 = *(_OWORD *)a1;
      v53 = v32;
      v54 = *(_OWORD *)(a1 + 32);
      v55 = *(_BYTE *)(a1 + 48);
      v43 = CircularPercentageGaugeRing.resolvedTint.getter();
    }
    outlined release of CircularPercentageGaugeRing(a1);
    v33 = *(_OWORD *)(a1 + 16);
    v52 = *(_OWORD *)a1;
    v53 = v33;
    v54 = *(_OWORD *)(a1 + 32);
    v55 = *(_BYTE *)(a1 + 48);
    started = CircularPercentageGaugeRing.resolvedStartCapColor.getter();
    if (v19 <= 0.5)
    {
      v25 = 0.0;
      v26 = 0.0;
      v27 = 0;
      v45 = 0;
      v44 = *(_QWORD *)&v19;
      v29 = a3;
    }
    else
    {
      outlined retain of CircularPercentageGaugeRing(a1);
      outlined copy of Environment<(Color, Color)?>.Content(v7, v6, v8);
      v34 = specialized Environment.wrappedValue.getter(v7, v6, v8);
      outlined consume of Environment<(Color, Color)?>.Content(v7, v6, v8);
      if (v34)
      {
        *(_QWORD *)&v52 = v34;
        v27 = AnyShapeStyle.init<A>(_:)();
        swift_release();
      }
      else
      {
        v35 = *(_OWORD *)(a1 + 16);
        v52 = *(_OWORD *)a1;
        v53 = v35;
        v54 = *(_OWORD *)(a1 + 32);
        v55 = *(_BYTE *)(a1 + 48);
        v27 = CircularPercentageGaugeRing.resolvedTint.getter();
      }
      outlined release of CircularPercentageGaugeRing(a1);
      v25 = v19;
      v29 = a3;
      v44 = *(_QWORD *)&v19;
      v45 = 256;
      v26 = a3;
    }
    v36 = *(_QWORD *)(a1 + 40);
    v37 = *(unsigned __int8 *)(a1 + 48);
    outlined retain of CircularPercentageGaugeRing(a1);
    outlined copy of Environment<ControlSize>.Content(v36, v37);
    specialized Environment.wrappedValue.getter(v36, v37, &v51);
    outlined consume of Environment<ControlSize>.Content(v36, v37);
    v38 = *(_OWORD *)(a1 + 16);
    v52 = *(_OWORD *)a1;
    v53 = v38;
    v54 = *(_OWORD *)(a1 + 32);
    v55 = *(_BYTE *)(a1 + 48);
    v31 = CircularPercentageGaugeRing.resolvedEndCapColor.getter();
    outlined release of CircularPercentageGaugeRing(a1);
    swift_retain();
    swift_release();
    v23 = 256;
    v21 = 1;
    v18 = v47;
    v17 = v48;
    v22 = v43;
    v30 = v44;
    v28 = v45;
    v24 = started;
  }
  *(double *)a2 = v13 * 0.5;
  *(double *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v49;
  *(_QWORD *)(a2 + 40) = v16;
  *(_QWORD *)(a2 + 48) = v50;
  *(_WORD *)(a2 + 56) = 256;
  *(_QWORD *)(a2 + 64) = v17;
  *(_QWORD *)(a2 + 72) = v18;
  *(_QWORD *)(a2 + 80) = v30;
  *(double *)(a2 + 88) = v29;
  *(_QWORD *)(a2 + 96) = v21;
  *(_QWORD *)(a2 + 104) = v22;
  *(_QWORD *)(a2 + 112) = v23;
  *(_QWORD *)(a2 + 120) = v24;
  *(double *)(a2 + 128) = v29;
  *(double *)(a2 + 136) = v25;
  *(double *)(a2 + 144) = v26;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = v27;
  *(_QWORD *)(a2 + 168) = v28;
  *(double *)(a2 + 176) = v29;
  *(_QWORD *)(a2 + 184) = v30;
  *(_QWORD *)(a2 + 192) = v31;
  v39 = *(_QWORD *)&v29;
  v40 = v22;
  v41 = v21;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?(v30, v39, v41, v40);
  outlined consume of TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?(v30, v39, v41, v40);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.StartCap.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  GeometryProxy.size.getter();
  v8 = v6 * 0.5;
  v9 = v7 * 0.5;
  if (v7 * 0.5 >= v6 * 0.5)
    v10 = v6 * 0.5;
  else
    v10 = v7 * 0.5;
  static UnitPoint.center.getter();
  *(_OWORD *)a2 = xmmword_187C3CD60;
  *(_QWORD *)(a2 + 16) = 0x3FF921FB54442D18;
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = v12;
  *(double *)(a2 + 40) = a3;
  *(double *)(a2 + 48) = a3;
  *(_QWORD *)(a2 + 56) = a1;
  *(_WORD *)(a2 + 64) = 256;
  *(double *)(a2 + 72) = v8 - a3 * 0.5;
  *(double *)(a2 + 80) = v9 - v10;
  *(_BYTE *)(a2 + 88) = 1;
  return swift_retain();
}

uint64_t protocol witness for View.body.getter in conformance CircularPercentageGaugeRing.StartCap@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = v1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *a1 = partial apply for implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.StartCap.body.getter;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v5;
  return swift_retain();
}

uint64_t implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.EndCap.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  GeometryProxy.size.getter();
  v10 = v8 * 0.5;
  if (v9 * 0.5 >= v8 * 0.5)
    v11 = v8 * 0.5;
  else
    v11 = v9 * 0.5;
  v12 = v9 * 0.5 - v11;
  swift_retain();
  v13 = static Color.black.getter();
  result = static UnitPoint.center.getter();
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a3;
  *(_QWORD *)(a2 + 16) = a1;
  *(_WORD *)(a2 + 24) = 256;
  *(_QWORD *)(a2 + 32) = v13;
  *(double *)(a2 + 40) = v11 * 0.03;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(double *)(a2 + 64) = v10 - a3 * 0.5;
  *(double *)(a2 + 72) = v12;
  *(double *)(a2 + 80) = a3;
  *(double *)(a2 + 88) = a3;
  *(double *)(a2 + 96) = v10 + -1.0;
  *(double *)(a2 + 104) = v12;
  *(_WORD *)(a2 + 112) = 0;
  *(double *)(a2 + 120) = a4 * 3.14159265 + a4 * 3.14159265;
  *(_QWORD *)(a2 + 128) = v15;
  *(_QWORD *)(a2 + 136) = v16;
  *(_BYTE *)(a2 + 144) = 1;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance CircularPercentageGaugeRing.EndCap@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)@<X0>(uint64_t@<X8>);

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  *((_QWORD *)v6 + 2) = v3;
  *((_QWORD *)v6 + 3) = v4;
  *((_QWORD *)v6 + 4) = v5;
  *a1 = partial apply for implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.EndCap.body.getter;
  a1[1] = v6;
  return swift_retain();
}

double CircularPercentageGaugeRing.RingArc.path(in:)@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double result;
  __int128 v11;
  _BYTE v12[40];
  __int128 v13;
  __int128 v14;
  char v15;
  _OWORD v16[2];
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[40];
  CGRect v25;
  CGRect v26;
  CGRect v27;

  CGRectGetMidX(*(CGRect *)&a2);
  v25.origin.x = a2;
  v25.origin.y = a3;
  v25.size.width = a4;
  v25.size.height = a5;
  CGRectGetMidY(v25);
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.width = a4;
  v26.size.height = a5;
  CGRectGetWidth(v26);
  v27.origin.x = a2;
  v27.origin.y = a3;
  v27.size.width = a4;
  v27.size.height = a5;
  CGRectGetHeight(v27);
  v18 = 0x3FF0000000000000;
  v19 = 0;
  v20 = 0;
  v21 = 0x3FF0000000000000;
  v22 = 0;
  v23 = 0;
  Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
  memset(v16, 0, sizeof(v16));
  v17 = 6;
  outlined init with take of Path.Storage((uint64_t)v16, (uint64_t)v24);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  Path.strokedPath(_:)();
  outlined release of StrokeStyle((uint64_t)v12);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  result = *(double *)&v13;
  v11 = v14;
  *(_OWORD *)a1 = v13;
  *(_OWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 32) = v15;
  return result;
}

double protocol witness for Shape.path(in:) in conformance CircularPercentageGaugeRing.RingArc@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  CircularPercentageGaugeRing.RingArc.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

__n128 protocol witness for Animatable.animatableData.getter in conformance CircularPercentageGaugeRing.RingArc@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 protocol witness for Animatable.animatableData.setter in conformance CircularPercentageGaugeRing.RingArc(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

__n128 (*protocol witness for Animatable.animatableData.modify in conformance CircularPercentageGaugeRing.RingArc(uint64_t a1))(__n128 *a1)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CircularPercentageGaugeRing.RingArc;
}

__n128 protocol witness for Animatable.animatableData.modify in conformance CircularPercentageGaugeRing.RingArc(__n128 *a1)
{
  __n128 result;

  result = *a1;
  *(__n128 *)a1[1].n128_u64[0] = *a1;
  return result;
}

__n128 protocol witness for View.body.getter in conformance CircularPercentageGaugeRing.RingArc@<Q0>(uint64_t a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  result = *v1;
  *(__n128 *)a1 = *v1;
  *(_BYTE *)(a1 + 16) = v2;
  *(_WORD *)(a1 + 17) = 256;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance CircularPercentageGaugeRing@<X0>(double (**a1)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v7[3];
  char v8;

  v3 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(v1 + 32);
  v8 = *(_BYTE *)(v1 + 48);
  v4 = swift_allocObject();
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(v4 + 64) = *(_BYTE *)(v1 + 48);
  *a1 = partial apply for closure #1 in CircularPercentageGaugeRing.body.getter;
  a1[1] = (double (*)@<D0>(unsigned int *@<X0>, uint64_t@<X8>))v4;
  return outlined retain of CircularPercentageGaugeRing((uint64_t)v7);
}

SwiftUI::CircularPercentageGaugeStyle __swiftcall CircularPercentageGaugeStyle.init(halfOpen:)(SwiftUI::CircularPercentageGaugeStyle halfOpen)
{
  SwiftUI::CircularPercentageGaugeStyle *v1;

  v1->halfOpen = halfOpen.halfOpen;
  return halfOpen;
}

uint64_t AccessoryCircularCapacityGaugeStyle.makeBody(configuration:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v2;
  v4 = 256;
  if (!*(_BYTE *)(result + 9))
    v4 = 0;
  v5 = 0x10000;
  if (!*(_BYTE *)(result + 10))
    v5 = 0;
  v6 = v5 | *(unsigned __int8 *)(result + 8) | v4;
  if (*v2)
    v6 |= 0x1000000uLL;
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = v3 ^ 1;
  return result;
}

double CircularProgressGaugeStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  char v3;
  char v4;
  char v5;

  result = *(double *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 9);
  v5 = *(_BYTE *)(a1 + 10);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = v4;
  *(_BYTE *)(a2 + 10) = v5;
  return result;
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in AccessoryCircularCapacityGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in CircularPercentageGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in CircularProgressGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

double protocol witness for GaugeStyle.makeBody(configuration:) in conformance CircularProgressGaugeStyle@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  char v3;
  char v4;
  char v5;

  result = *(double *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 9);
  v5 = *(_BYTE *)(a1 + 10);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = v4;
  *(_BYTE *)(a2 + 10) = v5;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCircularCapacityGaugeStyle()
{
  return &type metadata for AccessoryCircularCapacityGaugeStyle;
}

uint64_t storeEnumTagSinglePayload for AccessoryCircularCapacityGaugeStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187526140 + 4 * byte_187C3CD95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187526174 + 4 * byte_187C3CD90[v4]))();
}

uint64_t sub_187526174(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18752617C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187526184);
  return result;
}

uint64_t sub_187526190(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187526198);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18752619C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875261A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CircularPercentageGaugeStyle()
{
  return &type metadata for CircularPercentageGaugeStyle;
}

ValueMetadata *type metadata accessor for CircularProgressGaugeStyle()
{
  return &type metadata for CircularProgressGaugeStyle;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge>, (uint64_t)&type metadata for HalfOpenCircularGauge, (uint64_t)&type metadata for CircularPercentageGauge, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type HalfOpenCircularGauge and conformance HalfOpenCircularGauge();
    v3[1] = lazy protocol witness table accessor for type CircularPercentageGauge and conformance CircularPercentageGauge();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HalfOpenCircularGauge and conformance HalfOpenCircularGauge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HalfOpenCircularGauge and conformance HalfOpenCircularGauge;
  if (!lazy protocol witness table cache variable for type HalfOpenCircularGauge and conformance HalfOpenCircularGauge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HalfOpenCircularGauge, &type metadata for HalfOpenCircularGauge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HalfOpenCircularGauge and conformance HalfOpenCircularGauge);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CircularPercentageGauge and conformance CircularPercentageGauge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CircularPercentageGauge and conformance CircularPercentageGauge;
  if (!lazy protocol witness table cache variable for type CircularPercentageGauge and conformance CircularPercentageGauge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CircularPercentageGauge, &type metadata for CircularPercentageGauge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGauge and conformance CircularPercentageGauge);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CircularPercentageGauge(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 11))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CircularPercentageGauge(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 11) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CircularPercentageGauge()
{
  return &type metadata for CircularPercentageGauge;
}

uint64_t associated type witness table accessor for View.Body : View in CircularPercentageGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for SizedCircularPercentageGauge(uint64_t a1)
{
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  return outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 80), *(unsigned __int8 *)(a1 + 88));
}

uint64_t initializeWithCopy for SizedCircularPercentageGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<SceneBridge?>.Content(v4, v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 39) = *(_DWORD *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<ControlSize>.Content(v6, v7);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<ControlSize>.Content(v8, v9);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(unsigned __int8 *)(a2 + 88);
  outlined copy of Environment<ControlSize>.Content(v10, v11);
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = v11;
  return a1;
}

uint64_t assignWithCopy for SizedCircularPercentageGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<SceneBridge?>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<ControlSize>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(unsigned __int8 *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  outlined consume of Environment<ControlSize>.Content(v10, v11);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<ControlSize>.Content(v12, v13);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(unsigned __int8 *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 72) = v13;
  outlined consume of Environment<ControlSize>.Content(v14, v15);
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(unsigned __int8 *)(a2 + 88);
  outlined copy of Environment<ControlSize>.Content(v16, v17);
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v16;
  *(_BYTE *)(a1 + 88) = v17;
  outlined consume of Environment<ControlSize>.Content(v18, v19);
  return a1;
}

uint64_t assignWithTake for SizedCircularPercentageGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  v8 = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(unsigned __int8 *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v8;
  outlined consume of Environment<ControlSize>.Content(v9, v10);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v11 = *(_BYTE *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(unsigned __int8 *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v11;
  outlined consume of Environment<ControlSize>.Content(v12, v13);
  v14 = *(_BYTE *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 80);
  v16 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = v14;
  outlined consume of Environment<ControlSize>.Content(v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SizedCircularPercentageGauge(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SizedCircularPercentageGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SizedCircularPercentageGauge()
{
  return &type metadata for SizedCircularPercentageGauge;
}

uint64_t outlined copy of Environment<(Color, Color)?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return outlined copy of (Color, Color)?(result);
  else
    return swift_retain();
}

uint64_t destroy for CircularPercentageGaugeRing(uint64_t a1)
{
  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t outlined consume of Environment<(Color, Color)?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(result);
  else
    return swift_release();
}

uint64_t initializeWithCopy for CircularPercentageGaugeRing(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  swift_retain();
  outlined copy of Environment<(Color, Color)?>.Content(v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<ControlSize>.Content(v8, v9);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for CircularPercentageGaugeRing(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<(Color, Color)?>.Content(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  outlined consume of Environment<(Color, Color)?>.Content(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<ControlSize>.Content(v10, v11);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = v11;
  outlined consume of Environment<ControlSize>.Content(v12, v13);
  return a1;
}

uint64_t assignWithTake for CircularPercentageGaugeRing(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of Environment<(Color, Color)?>.Content(v5, v6, v7);
  v8 = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = v8;
  outlined consume of Environment<ControlSize>.Content(v9, v10);
  return a1;
}

ValueMetadata *type metadata accessor for CircularPercentageGaugeRing()
{
  return &type metadata for CircularPercentageGaugeRing;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge>();
    v2[0] = lazy protocol witness table accessor for type SizedCircularPercentageGauge and conformance SizedCircularPercentageGauge();
    v2[1] = v2[0];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, MEMORY[0x1E0CE5FC8], MEMORY[0x1E0CE5FB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, MEMORY[0x1E0CE5FC8], MEMORY[0x1E0CE5FB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SizedCircularPercentageGauge and conformance SizedCircularPercentageGauge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizedCircularPercentageGauge and conformance SizedCircularPercentageGauge;
  if (!lazy protocol witness table cache variable for type SizedCircularPercentageGauge and conformance SizedCircularPercentageGauge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SizedCircularPercentageGauge, &type metadata for SizedCircularPercentageGauge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizedCircularPercentageGauge and conformance SizedCircularPercentageGauge);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CircularPercentageGaugeRing(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CircularPercentageGaugeRing()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SizedCircularPercentageGauge()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState;
  if (!lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TimelineProgressViewBaseEmptyState, &type metadata for _TimelineProgressViewBaseEmptyState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState;
  if (!lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TimelineProgressViewBaseEmptyState, &type metadata for _TimelineProgressViewBaseEmptyState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState);
  }
  return result;
}

uint64_t sub_187526BC8()
{
  uint64_t v0;

  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 64), *(unsigned __int8 *)(v0 + 72));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 80), *(unsigned __int8 *)(v0 + 88));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 96), *(unsigned __int8 *)(v0 + 104));
  return swift_deallocObject();
}

void *partial apply for closure #1 in SizedCircularPercentageGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[3];
  int v10;
  _BYTE __src[280];

  v4 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v4;
  v9[2] = *(_OWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 48);
  v5 = static Alignment.center.getter();
  v7 = v6;
  closure #1 in closure #1 in SizedCircularPercentageGauge.body.getter(v2 + 16, (uint64_t)v9, (uint64_t)__src);
  *a2 = v5;
  a2[1] = v7;
  return memcpy(a2 + 2, __src, 0x118uLL);
}

uint64_t outlined retain of SizedCircularPercentageGauge(uint64_t a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(unsigned __int8 *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(unsigned __int8 *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(unsigned __int8 *)(a1 + 88);
  a2(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  a3(v7, v8);
  a4(v9, v10);
  a3(v11, v12);
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_187526DAC()
{
  uint64_t v0;

  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64));
  return swift_deallocObject();
}

double partial apply for closure #1 in CircularPercentageGaugeRing.body.getter@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)&result = closure #1 in CircularPercentageGaugeRing.body.getter(a1, v2 + 16, a2).n128_u64[0];
  return result;
}

uint64_t outlined retain of CircularPercentageGaugeRing(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 48);
  swift_retain();
  outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined copy of Environment<ControlSize>.Content(v5, v6);
  return a1;
}

uint64_t outlined release of CircularPercentageGaugeRing(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 48);
  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined consume of Environment<ControlSize>.Content(v5, v6);
  return a1;
}

uint64_t outlined copy of TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

_QWORD *assignWithCopy for CircularPercentageGaugeRing.EndCap(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CircularPercentageGaugeRing.EndCap()
{
  return &type metadata for CircularPercentageGaugeRing.EndCap;
}

_QWORD *initializeBufferWithCopyOfBuffer for CircularPercentageGaugeRing.StartCap(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for CircularPercentageGaugeRing.StartCap(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for CircularPercentageGaugeRing.StartCap(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for CircularPercentageGaugeRing.StartCap()
{
  return &type metadata for CircularPercentageGaugeRing.StartCap;
}

ValueMetadata *type metadata accessor for CircularPercentageGaugeRing.RingArc()
{
  return &type metadata for CircularPercentageGaugeRing.RingArc;
}

ValueMetadata *type metadata accessor for SizedCircularPercentageGauge.Metrics()
{
  return &type metadata for SizedCircularPercentageGauge.Metrics;
}

uint64_t sub_187527094()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, type metadata accessor for ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>);
}

uint64_t sub_187527160()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GeometryReader<ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>> and conformance GeometryReader<A>, (uint64_t (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>>, MEMORY[0x1E0CE2768]);
}

void type metadata accessor for GeometryReader<ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>>)
  {
    type metadata accessor for ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>, MEMORY[0x1E0CE74D8]);
    v0 = type metadata accessor for GeometryReader();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>>);
  }
}

void type metadata accessor for ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>)
  {
    type metadata accessor for TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for ZStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>);
  }
}

void type metadata accessor for TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?))
  {
    type metadata accessor for StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?));
  }
}

void type metadata accessor for StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>)
  {
    lazy protocol witness table accessor for type Circle and conformance Circle();
    v0 = type metadata accessor for StrokeBorderShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>);
  }
}

void type metadata accessor for TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap))
  {
    type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>(255, &lazy cache variable for type metadata for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>);
    type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?();
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for (_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap));
  }
}

unint64_t lazy protocol witness table accessor for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc;
  if (!lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CircularPercentageGaugeRing.RingArc, &type metadata for CircularPercentageGaugeRing.RingArc);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc;
  if (!lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CircularPercentageGaugeRing.RingArc, &type metadata for CircularPercentageGaugeRing.RingArc);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc;
  if (!lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CircularPercentageGaugeRing.RingArc, &type metadata for CircularPercentageGaugeRing.RingArc);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc);
  }
  return result;
}

void type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?)
  {
    type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>(255, &lazy cache variable for type metadata for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?);
  }
}

unint64_t lazy protocol witness table accessor for type _ShapeView<CircularPercentageGaugeRing.RingArc, ForegroundStyle> and conformance _ShapeView<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ShapeView<CircularPercentageGaugeRing.RingArc, ForegroundStyle> and conformance _ShapeView<A, B>;
  if (!lazy protocol witness table cache variable for type _ShapeView<CircularPercentageGaugeRing.RingArc, ForegroundStyle> and conformance _ShapeView<A, B>)
  {
    type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>(255, &lazy cache variable for type metadata for _ShapeView<CircularPercentageGaugeRing.RingArc, ForegroundStyle>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0E50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeView<CircularPercentageGaugeRing.RingArc, ForegroundStyle> and conformance _ShapeView<A, B>);
  }
  return result;
}

void type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    lazy protocol witness table accessor for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc();
    v3 = type metadata accessor for _ShapeView();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in CircularPercentageGaugeRing.RingArc()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnimatablePair<Double, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, CGFloat>, MEMORY[0x1E0CE26B8]);
}

void type metadata accessor for AnimatablePair<Double, CGFloat>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnimatablePair<Double, CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    v0 = type metadata accessor for AnimatablePair();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Double, CGFloat>);
  }
}

unint64_t instantiation function for generic protocol witness table for CircularPercentageGaugeRing.RingArc(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc();
  result = lazy protocol witness table accessor for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CircularPercentageGaugeRing.StartCap()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in CircularPercentageGaugeRing.EndCap()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1875277A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.EndCap.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.EndCap.body.getter(*(_QWORD *)(v1 + 32), a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t sub_1875277D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.StartCap.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.StartCap.body.getter(*(_QWORD *)(v1 + 16), a1, *(double *)(v1 + 24));
}

uint64_t sub_187527804()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect>> and conformance GeometryReader<A>, (uint64_t (*)(uint64_t))type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect>>, MEMORY[0x1E0CE2768]);
}

void type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect>>(uint64_t a1)
{
  type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>>(a1, &lazy cache variable for type metadata for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect>, &lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(void))
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(a4, a3, a5, (uint64_t)&protocol witness table for _LayoutDirectionBehaviorEffect);
    v9 = type metadata accessor for GeometryReader();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, (void (*)(uint64_t))type metadata accessor for _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, type metadata accessor for ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>);
}

void type metadata accessor for ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, (void (*)(uint64_t))type metadata accessor for _ShapeView<_SizedShape<Circle>, AnyShapeStyle>);
}

void type metadata accessor for _ShapeView<_SizedShape<Circle>, AnyShapeStyle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<_SizedShape<Circle>, AnyShapeStyle>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _SizedShape<Circle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle, MEMORY[0x1E0CE73A8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14F0]);
    lazy protocol witness table accessor for type _SizedShape<Circle> and conformance _SizedShape<A>();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<_SizedShape<Circle>, AnyShapeStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type _SizedShape<Circle> and conformance _SizedShape<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _SizedShape<Circle> and conformance _SizedShape<A>;
  if (!lazy protocol witness table cache variable for type _SizedShape<Circle> and conformance _SizedShape<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _SizedShape<Circle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle, MEMORY[0x1E0CE73A8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14F0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1500], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SizedShape<Circle> and conformance _SizedShape<A>);
  }
  return result;
}

void type metadata accessor for _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>)
  {
    type metadata accessor for OffsetShape<_SizedShape<Rectangle>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type OffsetShape<_SizedShape<Rectangle>> and conformance OffsetShape<A>, (uint64_t (*)(uint64_t))type metadata accessor for OffsetShape<_SizedShape<Rectangle>>, MEMORY[0x1E0CE1228]);
    v0 = type metadata accessor for _ClipEffect();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>);
  }
}

void type metadata accessor for OffsetShape<_SizedShape<Rectangle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for OffsetShape<_SizedShape<Rectangle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _SizedShape<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14F0]);
    lazy protocol witness table accessor for type _SizedShape<Rectangle> and conformance _SizedShape<A>();
    v0 = type metadata accessor for OffsetShape();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for OffsetShape<_SizedShape<Rectangle>>);
  }
}

unint64_t lazy protocol witness table accessor for type _SizedShape<Rectangle> and conformance _SizedShape<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _SizedShape<Rectangle> and conformance _SizedShape<A>;
  if (!lazy protocol witness table cache variable for type _SizedShape<Rectangle> and conformance _SizedShape<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _SizedShape<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14F0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1500], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SizedShape<Rectangle> and conformance _SizedShape<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type _ClipEffect<OffsetShape<_SizedShape<Rectangle>>> and conformance _ClipEffect<A>);
    v3[1] = MEMORY[0x1E0CE3010];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2310]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<_SizedShape<Circle>, AnyShapeStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<_SizedShape<Circle>, AnyShapeStyle>, MEMORY[0x1E0CE0E50]);
    v3[1] = MEMORY[0x1E0CE23F0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ClipEffect<OffsetShape<_SizedShape<Rectangle>>> and conformance _ClipEffect<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ClipEffect<OffsetShape<_SizedShape<Rectangle>>> and conformance _ClipEffect<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>, MEMORY[0x1E0CE1450]);
}

uint64_t sub_187527D14()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>> and conformance GeometryReader<A>, (uint64_t (*)(uint64_t))type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>>, MEMORY[0x1E0CE2768]);
}

void type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>>(uint64_t a1)
{
  type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>>(a1, &lazy cache variable for type metadata for GeometryReader<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>, &lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>, type metadata accessor for ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>);
}

void type metadata accessor for ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, (void (*)(uint64_t))type metadata accessor for _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>);
}

void type metadata accessor for _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>)
  {
    type metadata accessor for _SizedShape<RotatedShape<_TrimmedShape<Circle>>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _SizedShape<RotatedShape<_TrimmedShape<Circle>>> and conformance _SizedShape<A>, (uint64_t (*)(uint64_t))type metadata accessor for _SizedShape<RotatedShape<_TrimmedShape<Circle>>>, MEMORY[0x1E0CE1500]);
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>);
  }
}

void type metadata accessor for _SizedShape<RotatedShape<_TrimmedShape<Circle>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _SizedShape<RotatedShape<_TrimmedShape<Circle>>>)
  {
    type metadata accessor for RotatedShape<_TrimmedShape<Circle>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RotatedShape<_TrimmedShape<Circle>> and conformance RotatedShape<A>, (uint64_t (*)(uint64_t))type metadata accessor for RotatedShape<_TrimmedShape<Circle>>, MEMORY[0x1E0CE1898]);
    v0 = type metadata accessor for _SizedShape();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SizedShape<RotatedShape<_TrimmedShape<Circle>>>);
  }
}

void type metadata accessor for RotatedShape<_TrimmedShape<Circle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for RotatedShape<_TrimmedShape<Circle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _TrimmedShape<Circle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle, MEMORY[0x1E0CE73A8], MEMORY[0x1E0CE25A8]);
    lazy protocol witness table accessor for type _TrimmedShape<Circle> and conformance _TrimmedShape<A>();
    v0 = type metadata accessor for RotatedShape();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RotatedShape<_TrimmedShape<Circle>>);
  }
}

unint64_t lazy protocol witness table accessor for type _TrimmedShape<Circle> and conformance _TrimmedShape<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TrimmedShape<Circle> and conformance _TrimmedShape<A>;
  if (!lazy protocol witness table cache variable for type _TrimmedShape<Circle> and conformance _TrimmedShape<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _TrimmedShape<Circle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle, MEMORY[0x1E0CE73A8], MEMORY[0x1E0CE25A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE25B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TrimmedShape<Circle> and conformance _TrimmedShape<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, MEMORY[0x1E0CE0E50]);
    v3[1] = MEMORY[0x1E0CE2310];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for SectionStyle.Body : View in SidebarSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SidebarSectionStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  KeyPath = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  v11 = a3 & 1;
  if (a2)
    v12 = a1;
  else
    v12 = 1;
  *(_BYTE *)(a4 + 16) = a3;
  if (!a2)
    v11 = 0;
  *(_QWORD *)(a4 + 24) = v12;
  *(_QWORD *)(a4 + 32) = a2;
  *(_BYTE *)(a4 + 40) = v11;
  *(_BYTE *)(a4 + 41) = a2 != 0;
  *(_QWORD *)(a4 + 48) = KeyPath;
  *(_BYTE *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = v9;
  *(_BYTE *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = v10;
  *(_BYTE *)(a4 + 88) = 0;
  outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  return outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
}

uint64_t SidebarSection.appearsExpanded.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v13 = *(_QWORD *)(v0 + 48);
  v12 = *(_BYTE *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_BYTE *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 80);
  v14 = *(_BYTE *)(v0 + 88);
  v5 = *(_BYTE *)(v0 + 41);
  if ((v5 & 1) == 0)
  {
    v6 = *(unsigned __int8 *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.wrappedValue.getter();
    if ((v16 & 1) == 0)
      goto LABEL_3;
LABEL_5:
    v9 = 1;
    return v9 & 1;
  }
  v6 = *(unsigned __int8 *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v16);
  if ((v16 & 1) != 0)
    goto LABEL_5;
LABEL_3:
  outlined copy of Binding<NavigationSplitViewColumn>?(v1, v2);
  outlined copy of StateOrBinding<Bool>(v7, v8, v6, v5);
  outlined copy of Environment<Bool>.Content(v13, v12);
  outlined copy of Environment<Bool>.Content(v3, v4);
  outlined copy of Environment<Bool>.Content(v15, v14);
  outlined copy of Environment<Bool>.Content(v3, v4);
  v11 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
  outlined consume of StateOrBinding<Bool>(v7, v8, v6, v5);
  outlined consume of Environment<Bool>.Content(v13, v12);
  outlined consume of Environment<Bool>.Content(v3, v4);
  outlined consume of Environment<Bool>.Content(v15, v14);
  v9 = v11 ^ 1;
  return v9 & 1;
}

uint64_t SidebarSection.body.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)@<X0>(uint64_t@<X8>);
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  int *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  __int128 v50;
  char v51;
  _BYTE v52[24];
  __int128 v53;
  char v54;
  uint64_t v55[3];

  v38 = a1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v38 - v4;
  type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView();
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v38 - v17);
  v19 = v1[3];
  v47 = v1[2];
  v48 = v19;
  v49[0] = v1[4];
  *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)((char *)v1 + 73);
  v20 = v1[1];
  v45 = *v1;
  v46 = v20;
  v50 = v45;
  v51 = *((_BYTE *)v1 + 16);
  v21 = (_OWORD *)swift_allocObject();
  v22 = v1[3];
  v21[3] = v1[2];
  v21[4] = v22;
  v21[5] = v1[4];
  *(_OWORD *)((char *)v21 + 89) = *(_OWORD *)((char *)v1 + 73);
  v23 = v1[1];
  v21[1] = *v1;
  v21[2] = v23;
  *v18 = partial apply for closure #1 in closure #1 in closure #2 in SidebarSection.body.getter;
  v18[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v21;
  v24 = (uint64_t)v18 + *(int *)(v11 + 52);
  outlined retain of SidebarSection((uint64_t)&v45, (void (*)(_QWORD, _QWORD, _QWORD))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content);
  closure #1 in closure #1 in SidebarSection.resolvedHeader.getter(&v45, (uint64_t)v5);
  v25 = type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect();
  closure #2 in closure #1 in SidebarSection.resolvedHeader.getter((uint64_t)&v45, (uint64_t)&v5[*(int *)(v25 + 52)]);
  v42 = v47;
  v43 = v48;
  v44[0] = v49[0];
  *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v49 + 9);
  v40 = v45;
  v41 = v46;
  v26 = SidebarSection.appearsExpanded.getter() & 1;
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 1;
  *(_BYTE *)(v27 + 17) = v26;
  outlined init with copy of Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten((uint64_t)v5, (uint64_t)v10);
  v28 = &v10[*(int *)(v7 + 36)];
  *(_QWORD *)v28 = _s7SwiftUI4ViewPAAE11outlineRoot_10isExpandedQrSb_SbSgtFyAA07OutlineE13ConfigurationVzcfU_TA_0;
  *((_QWORD *)v28 + 1) = v27;
  outlined destroy of TableRowList?((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t)type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect, (uint64_t)MEMORY[0x1E0CE71A8], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with take of TableCellFormula((uint64_t)v10, v24, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView);
  v29 = v48;
  LOBYTE(v24) = BYTE8(v48);
  outlined retain of SidebarSection((uint64_t)&v45, (void (*)(_QWORD, _QWORD, _QWORD))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v29, v24);
  v30 = specialized Environment.wrappedValue.getter(v29, v24);
  outlined consume of Environment<Bool>.Content(v29, v24);
  outlined retain of SidebarSection((uint64_t)&v45, (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
  outlined init with take of TableCellFormula((uint64_t)&v50, (uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for Binding<Bool>?);
  outlined init with take of TableCellFormula((uint64_t)v52, (uint64_t)&v53, (uint64_t (*)(_QWORD))type metadata accessor for Binding<Bool>?);
  if (!*((_QWORD *)&v53 + 1))
    goto LABEL_3;
  v55[0] = v53;
  v40 = v53;
  LOBYTE(v41) = v54;
  outlined retain of SectionStyleConfiguration((uint64_t *)&v50);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v39);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v55);
  swift_release();
  if (v39 != 1)
    v31 = 1;
  else
LABEL_3:
    v31 = 0;
  v42 = v47;
  v43 = v48;
  v44[0] = v49[0];
  *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v49 + 9);
  v40 = v45;
  v41 = v46;
  v32 = SidebarSection.appearsExpanded.getter();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
  type metadata accessor for Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rect(0);
  v34 = v38;
  v35 = (char *)(v38 + v33[11]);
  *v35 = v31;
  v35[1] = (v32 & 1) == 0;
  *(_BYTE *)(v34 + v33[12]) = v30 & 1;
  v36 = v34 + v33[13];
  *(_QWORD *)v36 = 0;
  *(_QWORD *)(v36 + 8) = 0;
  *(_BYTE *)(v36 + 16) = 0;
  return outlined init with take of TableCellFormula((uint64_t)v14, v34, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
}

uint64_t closure #1 in closure #1 in closure #2 in SidebarSection.body.getter@<X0>(_OWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  char *v19;
  _OWORD v21[4];
  _OWORD v22[2];

  v4 = MEMORY[0x1E0CE71A8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v21 - v7;
  type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView();
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined retain of SidebarSection((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content);
  closure #1 in closure #1 in SidebarSection.resolvedHeader.getter(a1, (uint64_t)v8);
  v14 = type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect();
  closure #2 in closure #1 in SidebarSection.resolvedHeader.getter((uint64_t)a1, (uint64_t)&v8[*(int *)(v14 + 52)]);
  v15 = a1[3];
  v21[2] = a1[2];
  v21[3] = v15;
  v22[0] = a1[4];
  *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)((char *)a1 + 73);
  v16 = a1[1];
  v21[0] = *a1;
  v21[1] = v16;
  v17 = SidebarSection.appearsExpanded.getter() & 1;
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = 1;
  *(_BYTE *)(v18 + 17) = v17;
  outlined init with copy of Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten((uint64_t)v8, (uint64_t)v13);
  v19 = &v13[*(int *)(v10 + 36)];
  *(_QWORD *)v19 = closure #1 in View.outlineRoot(_:isExpanded:)partial apply;
  *((_QWORD *)v19 + 1) = v18;
  outlined destroy of TableRowList?((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t)type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with take of TableCellFormula((uint64_t)v13, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView);
  return outlined retain of SidebarSection((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content);
}

uint64_t closure #1 in closure #1 in SidebarSection.resolvedHeader.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  __int128 v39;
  __int128 v40;
  char v41;
  _BYTE v42[24];
  _BYTE v43[24];

  type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(0);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (_WORD *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v33 - v15;
  outlined init with take of StateOrBinding<Bool>((uint64_t)a1 + 24, (uint64_t)v42);
  outlined init with take of StateOrBinding<Bool>((uint64_t)v42, (uint64_t)v43);
  if ((v43[17] & 1) != 0)
  {
    v17 = (_OWORD *)swift_allocObject();
    v18 = a1[3];
    v17[3] = a1[2];
    v17[4] = v18;
    v17[5] = a1[4];
    *(_OWORD *)((char *)v17 + 89) = *(_OWORD *)((char *)a1 + 73);
    v19 = a1[1];
    v17[1] = *a1;
    v17[2] = v19;
    *v8 = 256;
    v20 = (_QWORD *)((char *)v8 + *(int *)(v5 + 36));
    *v20 = implicit closure #2 in implicit closure #1 in SidebarSection.headerWithOutlineDisclosure.getterpartial apply;
    v20[1] = v17;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    v21 = (char *)v8 + *(int *)(v5 + 40);
    outlined retain of SidebarSection((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content);
    swift_retain();
    v22 = static VerticalAlignment.center.getter();
    closure #1 in closure #1 in SidebarSection.headerWithOutlineDisclosure.getter((uint64_t)a1, (uint64_t)&v34);
    swift_release();
    v23 = v34;
    v24 = v35;
    v25 = v36;
    v26 = v37;
    v27 = v38;
    v28 = v41;
    v29 = v39;
    v30 = v40;
    *(_QWORD *)v21 = v22;
    *((_QWORD *)v21 + 1) = 0;
    v21[16] = 1;
    *((_QWORD *)v21 + 3) = v23;
    v21[32] = v24;
    v21[40] = v25;
    v21[41] = v26;
    v21[48] = v27;
    *(_OWORD *)(v21 + 56) = v29;
    *(_OWORD *)(v21 + 72) = v30;
    v21[88] = v28;
    v21[96] = 0;
    *((_QWORD *)v21 + 13) = 1;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
    outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
  }
  else
  {
    outlined retain of SidebarSection((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content);
    v32 = static VerticalAlignment.center.getter();
    outlined retain of SidebarSection((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content);
    *(_QWORD *)a2 = v32;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 1;
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t closure #2 in closure #1 in SidebarSection.resolvedHeader.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  char v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t (**v23)();
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  char v44;

  type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(0);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (_WORD *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v36 - v15;
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_BYTE *)(a1 + 72);
  outlined retain of SidebarSection(a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v17, v18);
  v19 = specialized Environment.wrappedValue.getter(v17, v18);
  outlined consume of Environment<Bool>.Content(v17, v18);
  outlined retain of SidebarSection(a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content);
  if ((v19 & 1) != 0)
  {
    v20 = (_OWORD *)swift_allocObject();
    v21 = *(_OWORD *)(a1 + 48);
    v20[3] = *(_OWORD *)(a1 + 32);
    v20[4] = v21;
    v20[5] = *(_OWORD *)(a1 + 64);
    *(_OWORD *)((char *)v20 + 89) = *(_OWORD *)(a1 + 73);
    v22 = *(_OWORD *)(a1 + 16);
    v20[1] = *(_OWORD *)a1;
    v20[2] = v22;
    *v8 = 256;
    v23 = (uint64_t (**)())((char *)v8 + *(int *)(v5 + 36));
    *v23 = partial apply for implicit closure #2 in implicit closure #1 in SidebarSection.headerWithOutlineDisclosure.getter;
    v23[1] = (uint64_t (*)())v20;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    v24 = (char *)v8 + *(int *)(v5 + 40);
    outlined retain of SidebarSection(a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content);
    swift_retain();
    v25 = static VerticalAlignment.center.getter();
    closure #1 in closure #1 in SidebarSection.headerWithOutlineDisclosure.getter(a1, (uint64_t)&v37);
    swift_release();
    v26 = v37;
    v27 = v38;
    v28 = v39;
    v29 = v40;
    v30 = v41;
    v31 = v44;
    v32 = v42;
    v33 = v43;
    *(_QWORD *)v24 = v25;
    *((_QWORD *)v24 + 1) = 0;
    v24[16] = 1;
    *((_QWORD *)v24 + 3) = v26;
    v24[32] = v27;
    v24[40] = v28;
    v24[41] = v29;
    v24[48] = v30;
    *(_OWORD *)(v24 + 56) = v32;
    *(_OWORD *)(v24 + 72) = v33;
    v24[88] = v31;
    v24[96] = 0;
    *((_QWORD *)v24 + 13) = 1;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
    outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
  }
  else
  {
    outlined retain of SidebarSection(a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content);
    v35 = static VerticalAlignment.center.getter();
    outlined retain of SidebarSection(a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content);
    *(_QWORD *)a2 = v35;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 1;
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t implicit closure #2 in implicit closure #1 in SidebarSection.headerWithOutlineDisclosure.getter(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 41) & 1) != 0)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.projectedValue.getter();
  }
  specialized static RotatingDisclosureIndicator.toggle(_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in SidebarSection.headerWithOutlineDisclosure.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  static SystemStyleMetrics.list.getter();
  v4 = v14;
  swift_release();
  swift_release();
  if ((*(_BYTE *)(a1 + 41) & 1) != 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v13);
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.wrappedValue.getter();
  }
  v5 = v13;
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_BYTE *)(a1 + 88);
  outlined retain of SidebarSection(a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined retain of SidebarSection(a1, (void (*)(_QWORD, _QWORD, _QWORD))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, _QWORD))outlined consume of Environment<Bool>.Content);
  result = EdgeInsets.init(_all:)();
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  *(_BYTE *)(a2 + 24) = 8;
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = v12;
  *(_BYTE *)(a2 + 64) = 0;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SidebarSection()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedSectionStyle, StaticSourceWriter<SectionStyleConfiguration.Header, ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeader, type metadata accessor for ModifiedContent<ResolvedSectionStyle, StaticSourceWriter<SectionStyleConfiguration.Header, ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeade, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<SectionStyleConfiguration.Footer, SectionStyleConfiguration.Footer?>);
  type metadata accessor for StaticSourceWriter<SectionStyleConfiguration.RawContent, StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedSectionStyle, StaticSourceWriter<SectionStyleConfiguration.Header, ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHe();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UseSidebarHeaderModifierPredicate()
{
  unsigned __int8 v1;
  char v2;

  PropertyList.subscript.getter();
  if ((v2 & 1) != 0)
    return 0;
  PropertyList.subscript.getter();
  return v1;
}

__n128 SidebarHeaderModifier.body(content:)@<Q0>(__n128 *a1@<X8>)
{
  uint64_t KeyPath;
  __n128 result;
  __n128 v4;
  unint64_t v5;
  unint64_t v6;

  static Font.Weight.semibold.getter();
  v4.n128_u8[0] = 4;
  static Font.system(size:weight:design:)();
  swift_getKeyPath();
  static Color.primary.getter();
  type metadata accessor for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>();
  lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.defaultForegroundColor(_:)();
  swift_release();
  swift_release();
  swift_release();
  KeyPath = swift_getKeyPath();
  result = v4;
  *a1 = v4;
  a1[1].n128_u64[0] = v5;
  a1[1].n128_u64[1] = v6;
  a1[2].n128_u64[0] = KeyPath;
  a1[2].n128_u8[8] = 2;
  return result;
}

uint64_t destroy for SidebarSection(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_release();
    swift_release();
  }
  outlined consume of StateOrBinding<Bool>(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(_BYTE *)(a1 + 41));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
}

uint64_t initializeWithCopy for SidebarSection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 41);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of StateOrBinding<Bool>(v5, v6, v8, v7);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 41) = v7;
  v9 = *(_QWORD *)(a2 + 48);
  LOBYTE(v6) = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v9, v6);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v6;
  v10 = *(_QWORD *)(a2 + 64);
  LOBYTE(v6) = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v10, v6);
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = v6;
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(_QWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = v12;
  return a1;
}

uint64_t assignWithCopy for SidebarSection(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    }
    else
    {
      outlined destroy of TableRowList?(a1, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      v5 = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v6 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  v7 = *((_QWORD *)a2 + 3);
  v8 = *((_QWORD *)a2 + 4);
  v9 = *((_BYTE *)a2 + 41);
  v10 = *((_BYTE *)a2 + 40);
  outlined copy of StateOrBinding<Bool>(v7, v8, v10, v9);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 41);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v14 = *(unsigned __int8 *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 41) = v9;
  outlined consume of StateOrBinding<Bool>(v11, v12, v14, v13);
  v15 = *((_QWORD *)a2 + 6);
  LOBYTE(v8) = *((_BYTE *)a2 + 56);
  outlined copy of Environment<Bool>.Content(v15, v8);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v15;
  *(_BYTE *)(a1 + 56) = v8;
  outlined consume of Environment<Bool>.Content(v16, v17);
  v18 = *((_QWORD *)a2 + 8);
  LOBYTE(v8) = *((_BYTE *)a2 + 72);
  outlined copy of Environment<Bool>.Content(v18, v8);
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v18;
  *(_BYTE *)(a1 + 72) = v8;
  outlined consume of Environment<Bool>.Content(v19, v20);
  v21 = *((_QWORD *)a2 + 10);
  v22 = *((_BYTE *)a2 + 88);
  outlined copy of Environment<Bool>.Content(v21, v22);
  v23 = *(_QWORD *)(a1 + 80);
  v24 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v21;
  *(_BYTE *)(a1 + 88) = v22;
  outlined consume of Environment<Bool>.Content(v23, v24);
  return a1;
}

uint64_t assignWithTake for SidebarSection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of TableRowList?(a1, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
LABEL_6:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_BYTE *)(a2 + 41);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 41);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v10 = *(unsigned __int8 *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 41) = v6;
  outlined consume of StateOrBinding<Bool>(v7, v8, v10, v9);
  v11 = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = *(_BYTE *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v14;
  outlined consume of Environment<Bool>.Content(v15, v16);
  v17 = *(_BYTE *)(a2 + 88);
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = v17;
  outlined consume of Environment<Bool>.Content(v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarSection(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SidebarSection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarSection()
{
  return &type metadata for SidebarSection;
}

unint64_t lazy protocol witness table accessor for type SidebarSection and conformance SidebarSection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarSection and conformance SidebarSection;
  if (!lazy protocol witness table cache variable for type SidebarSection and conformance SidebarSection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarSection, &type metadata for SidebarSection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarSection and conformance SidebarSection);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SidebarSection()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>)
  {
    type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
  }
}

void type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>, lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Button);
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>);
  }
}

void type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>))
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>, (uint64_t)&type metadata for RotatingDisclosureIndicator, MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>));
  }
}

uint64_t type metadata accessor for StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type UseSidebarHeaderModifierPredicate and conformance UseSidebarHeaderModifierPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UseSidebarHeaderModifierPredicate and conformance UseSidebarHeaderModifierPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseSidebarHeaderModifierPredicate and conformance UseSidebarHeaderModifierPredicate;
  if (!lazy protocol witness table cache variable for type UseSidebarHeaderModifierPredicate and conformance UseSidebarHeaderModifierPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UseSidebarHeaderModifierPredicate, &unk_1E1B03B68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseSidebarHeaderModifierPredicate and conformance UseSidebarHeaderModifierPredicate);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>> and conformance HStack<A>, (uint64_t)&protocol witness table for _ContentShapeKindModifier<A>);
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>> and conformance HStack<A>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>(a5, a3, a4);
    v9 = type metadata accessor for HStack();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer))
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer));
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v5);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, H)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, H);
  }
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifi;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifi)
  {
    type metadata accessor for MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContaine();
    type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContaine()
{
  uint64_t result;

  result = lazy cache variable for type metadata for MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButt;
  if (!lazy cache variable for type metadata for MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButt)
  {
    type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButton, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView, (uint64_t (*)(void))lazy protocol witness table accessor for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleV, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>);
    type metadata accessor for MappedViews();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleV()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<;
  if (!lazy protocol witness table cache variable for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(M();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>> and conformance Button<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    v3[1] = lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>> and conformance HStack<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>> and conformance Button<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>> and conformance Button<A>;
  if (!lazy protocol witness table cache variable for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>> and conformance Button<A>)
  {
    type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>> and conformance Button<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>> and conformance HStack<A>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)> and conformance TupleView<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>> and conformance HStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in SidebarSection.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #2 in SidebarSection.body.getter((_OWORD *)(v1 + 16), a1);
}

uint64_t sub_18752A2C4()
{
  return swift_deallocObject();
}

_BYTE *_s7SwiftUI4ViewPAAE11outlineRoot_10isExpandedQrSb_SbSgtFyAA07OutlineE13ConfigurationVzcfU_TA_0(_BYTE *a1)
{
  uint64_t v1;

  return closure #1 in View.outlineRoot(_:isExpanded:)(a1, *(_BYTE *)(v1 + 16), *(_BYTE *)(v1 + 17));
}

uint64_t outlined retain of SidebarSection(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), void (*a5)(uint64_t, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v17;
  uint64_t v18;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(unsigned __int8 *)(a1 + 41);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(unsigned __int8 *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(unsigned __int8 *)(a1 + 72);
  v18 = *(_QWORD *)(a1 + 80);
  v17 = *(unsigned __int8 *)(a1 + 88);
  v14 = *(unsigned __int8 *)(a1 + 40);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  a3(v7, v8, v14, v9);
  a4(v10, v11);
  a4(v12, v13);
  a5(v18, v17);
  return a1;
}

void type metadata accessor for Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rect(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKi)
  {
    v2 = type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>();
    v3 = type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for SectionStyleConfiguration.Footer?, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = type metadata accessor for Section(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKi);
  }
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, MEMORY[0x1E0CE7C38], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for SectionStyleConfiguration.RawContent?, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t *outlined retain of SectionStyleConfiguration(uint64_t *a1)
{
  outlined copy of Binding<NavigationSplitViewColumn>?(*a1, a1[1]);
  return a1;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
    v7 = v6;
    type metadata accessor for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)> and conformance TupleView<A>);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in SidebarSection.headerWithOutlineDisclosure.getter()
{
  uint64_t v0;

  return implicit closure #2 in implicit closure #1 in SidebarSection.headerWithOutlineDisclosure.getter(v0 + 16);
}

uint64_t outlined init with take of StateOrBinding<Bool>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StateOrBinding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2A10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18752A680()
{
  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModif ()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _Conten)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _Conten);
  }
}

void type metadata accessor for AccessibilityTraitsModifier<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentSh(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for AccessibilityTraitsModifier<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindMo, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityTraitsModifier.ChildModifier);
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindMo()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShape;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShape)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>();
    v2[0] = &protocol witness table for MappedViews<A, B>;
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButton, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView, (uint64_t (*)(void))lazy protocol witness table accessor for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleV, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleConfiguration.Header, &type metadata for SectionStyleConfiguration.Header);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleConfiguration.Header, &type metadata for SectionStyleConfiguration.Header);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header);
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<SectionStyleConfiguration.Footer, SectionStyleConfiguration.Footer?>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<SectionStyleConfiguration.Footer, SectionStyleConfiguration.Footer?>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<SectionStyleConfiguration.Footer, SectionStyleConfiguration.Footer?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for SectionStyleConfiguration.Footer?, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer();
    lazy protocol witness table accessor for type SectionStyleConfiguration.Footer? and conformance <A> A?(&lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer? and conformance <A> A?, &lazy cache variable for type metadata for SectionStyleConfiguration.Footer?, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, (uint64_t)&protocol witness table for SectionStyleConfiguration.Footer);
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleConfiguration.Footer, &type metadata for SectionStyleConfiguration.Footer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleConfiguration.Footer, &type metadata for SectionStyleConfiguration.Footer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer);
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<SectionStyleConfiguration.RawContent, StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<SectionStyleConfiguration.RawContent, StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<SectionStyleConfiguration.RawContent, StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>();
    lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent();
    lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleConfiguration.RawContent, &type metadata for SectionStyleConfiguration.RawContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleConfiguration.RawContent, &type metadata for SectionStyleConfiguration.RawContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>();
    v2[0] = lazy protocol witness table accessor for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type SectionStyleConfiguration.Footer? and conformance <A> A?(&lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent? and conformance <A> A?, &lazy cache variable for type metadata for SectionStyleConfiguration.RawContent?, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, (uint64_t)&protocol witness table for SectionStyleConfiguration.RawContent);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SectionStyleConfiguration.Footer? and conformance <A> A?(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v8 = a4;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for SidebarHeaderModifier()
{
  return &unk_1E1AD92B0;
}

void *type metadata accessor for UseSidebarHeaderModifierPredicate()
{
  return &unk_1E1B03B68;
}

unint64_t lazy protocol witness table accessor for type Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentSha()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];

  result = lazy protocol witness table cache variable for type Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _Cont;
  if (!lazy protocol witness table cache variable for type Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _Cont)
  {
    type metadata accessor for Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rect(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindMo();
    v3[1] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>();
    v3[2] = lazy protocol witness table accessor for type SectionStyleConfiguration.Footer? and conformance <A> A?(&lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer? and conformance <A> A?, &lazy cache variable for type metadata for SectionStyleConfiguration.Footer?, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, (uint64_t)&protocol witness table for SectionStyleConfiguration.Footer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _Cont);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SidebarHeaderModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<SidebarHeaderModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarHeaderModifier and conformance SidebarHeaderModifier, (uint64_t)&unk_1E1AD92B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

unint64_t lazy protocol witness table accessor for type SidebarHeaderModifier and conformance SidebarHeaderModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarHeaderModifier and conformance SidebarHeaderModifier;
  if (!lazy protocol witness table cache variable for type SidebarHeaderModifier and conformance SidebarHeaderModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarHeaderModifier, &unk_1E1AD92B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarHeaderModifier and conformance SidebarHeaderModifier);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<SidebarHeaderModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<SidebarHeaderModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<SidebarHeaderModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<SidebarHeaderModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<SidebarHeaderModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarHeaderModifier and conformance SidebarHeaderModifier, (uint64_t)&unk_1E1AD92B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<SidebarHeaderModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_18752AFA8()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_18752AFC8()
{
  return EnvironmentValues.textCase.setter();
}

uint64_t sub_18752AFFC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Text.Case?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Text.Case?>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.Case?> and conformance _EnvironmentKeyWritingModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Text.Case?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Text.Case?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Case?>, &lazy cache variable for type metadata for Text.Case?, MEMORY[0x1E0CE6B70]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Text.Case?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.Case?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Case?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Case?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Case?>, &lazy cache variable for type metadata for Text.Case?, MEMORY[0x1E0CE6B70]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Case?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void ButtonStyleConfiguration.role.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

unint64_t instantiation function for generic protocol witness table for ButtonStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in ButtonStyleConfiguration.Label()
{
  return &protocol witness table for ButtonStyleConfiguration.Label;
}

uint64_t dispatch thunk of ButtonStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ButtonStyleConvertible.buttonStyleRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_18752B254(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for ButtonStyleContainerModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContainerModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

_QWORD *initializeBufferWithCopyOfBuffer for ArchivableLinkModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for LinkDestination.Configuration();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for URL();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(v6 + 20)) = *((_BYTE *)a2 + *(int *)(v6 + 20));
  }
  return a1;
}

uint64_t destroy for ArchivableLinkModifier(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for ArchivableLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(a1 + *(int *)(v5 + 20)) = *(_BYTE *)(a2 + *(int *)(v5 + 20));
  return a1;
}

uint64_t assignWithCopy for ArchivableLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(a1 + *(int *)(v5 + 20)) = *(_BYTE *)(a2 + *(int *)(v5 + 20));
  return a1;
}

uint64_t initializeWithTake for ArchivableLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(a1 + *(int *)(v5 + 20)) = *(_BYTE *)(a2 + *(int *)(v5 + 20));
  return a1;
}

uint64_t assignWithTake for ArchivableLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(a1 + *(int *)(v5 + 20)) = *(_BYTE *)(a2 + *(int *)(v5 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableLinkModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18752B4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_4(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2DE8]);
}

uint64_t storeEnumTagSinglePayload for ArchivableLinkModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18752B514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_4(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2DE8]);
}

uint64_t type metadata accessor for ArchivableLinkModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ArchivableLinkModifier);
}

uint64_t type metadata completion function for ArchivableLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ArchivableLinkModifier(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2DE8]);
}

uint64_t getEnumTagSinglePayload for WrappedButtonStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18752B5F0 + 4 * byte_187C3D330[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for WrappedButtonStyle(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t static ResolvedButtonStyleBody._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  _BYTE v40[4];
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  int v53;

  v8 = *a1;
  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = a2[5];
  v13 = a2[6];
  v14 = *((_DWORD *)a2 + 20);
  static DynamicPropertyCache.fields(of:)();
  v15 = v45;
  v16 = v46;
  v17 = v47;
  v18 = HIDWORD(v47);
  v45 = v9;
  LODWORD(v46) = v10;
  v48 = *(_OWORD *)(a2 + 3);
  v47 = v11;
  v49 = v12;
  v50 = v13;
  v51 = *(_OWORD *)(a2 + 7);
  v52 = a2[9];
  v53 = v14;
  v26 = v8;
  v27 = v17;
  v41 = v8;
  v28 = v16;
  v29 = v15;
  v31 = v15;
  v32 = v16;
  LOBYTE(v33) = v17;
  v25 = v18;
  HIDWORD(v33) = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ResolvedButtonStyleBody.makeStyleBody(view:inputs:fields:)((uint64_t)v40, (uint64_t)&v42, (uint64_t)&v41, (uint64_t)&v45, (uint64_t)&v31, a3, a4);
  v19 = v43;
  v24 = v42;
  LOBYTE(v8) = v44;
  swift_getAssociatedTypeWitness();
  v31 = v45;
  LODWORD(v32) = v46;
  v33 = v47;
  v34 = v48;
  v35 = v49;
  v36 = v50;
  v37 = v51;
  v38 = v52;
  v39 = v53;
  swift_getAssociatedConformanceWitness();
  static View.makeDebuggableView(view:inputs:)();
  v21 = v42;
  v22 = v43;
  if ((v8 & 1) == 0)
  {
    v42 = v24;
    v43 = v19;
    v41 = v26;
    v31 = v29;
    v32 = v28;
    LOBYTE(v33) = v27;
    HIDWORD(v33) = v25;
    type metadata accessor for ResolvedButtonStyleBody(0, a3, a4, v20);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a5 = v21;
  a5[1] = v22;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedButtonStyleBody<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return static ResolvedButtonStyleBody._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void protocol witness for View.body.getter in conformance ResolvedButtonStyleBody<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedButtonStyleBody<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t WrappedButtonStyle<>.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v9 + 8))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v8, a1);
}

uint64_t protocol witness for AnyDefaultStyle.init() in conformance <> WrappedButtonStyle<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WrappedButtonStyle<>.init()(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t implicit closure #2 in implicit closure #1 in WrappedButtonStyleBody.body.getter(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  void (*v24)(uint64_t);
  void (*v25)(void *);
  uint64_t v26;
  _BYTE v27[16];

  v4 = type metadata accessor for LinkDestination();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for ButtonAction();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + *(int *)(v12 + 24), (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v14 = MEMORY[0x1E0CE2E18];
      outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
      LinkDestination.open()();
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))v14);
    }
    else
    {
      v20 = *(_QWORD *)v11;
      v21 = *((_QWORD *)v11 + 1);
      v22 = v11[16];
      v23 = (void *)*((_QWORD *)v11 + 3);
      v24 = (void (*)(uint64_t))*((_QWORD *)v11 + 4);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v11, v21, v22);
      v25 = (void (*)(void *))specialized Environment.wrappedValue.getter(v20, v21, v22);
      v26 = outlined consume of Environment<AppIntentExecutor?>.Content(v20, v21, v22);
      if (v25)
      {
        v25(v23);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v25);
      }
      else
      {
        v24(v26);
      }
      outlined consume of Environment<AppIntentExecutor?>.Content(v20, v21, v22);

      return swift_release();
    }
  }
  else
  {
    v17 = *(_QWORD *)v11;
    v16 = *((_QWORD *)v11 + 1);
    v18 = type metadata accessor for MainActor();
    MEMORY[0x1E0C80A78](v18, v19);
    *(_QWORD *)&v27[-16] = v17;
    *(_QWORD *)&v27[-8] = v16;
    specialized static MainActor.assumeIsolated<A>(_:file:line:)(a2, (uint64_t)&v27[-32]);
    return swift_release();
  }
}

uint64_t closure #2 in closure #2 in WrappedButtonStyleBody.body.getter()
{
  return static Animation.coreAnimationDefault(duration:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance WrappedButtonStyleBody<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyleBody<A>, a3);
  return static ConditionallyArchivableView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance WrappedButtonStyleBody<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyleBody<A>);
  return static ConditionallyArchivableView._viewListCount(inputs:)();
}

void WrappedButtonStyleBody.ArchiveBody.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _UNKNOWN **v21;
  uint64_t v22;
  uint64_t v23;

  v17 = a2;
  v3 = type metadata accessor for ArchivableLinkModifier(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v16 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEAEC8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [Bool], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = v9;
  v11 = type metadata accessor for ResolvedButtonStyleBody(255, v9, v14, v10);
  v12 = lazy protocol witness table accessor for type External<Bool> and conformance External<A>(&lazy protocol witness table cache variable for type [Bool] and conformance [A], &lazy cache variable for type metadata for [Bool], (uint64_t (*)(_QWORD, uint64_t))v6, MEMORY[0x1E0DEAF50]);
  v18 = v8;
  v19 = v11;
  v20 = v12;
  v21 = &protocol witness table for ResolvedButtonStyleBody<A>;
  v22 = MEMORY[0x1E0DEAFB8];
  v23 = MEMORY[0x1E0CE80E8];
  type metadata accessor for TemporalStack();
}

uint64_t sub_18752BEF0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  int EnumCaseMultiPayload;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t);
  void (*v45)(_BYTE *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD, uint64_t);
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v65[96];

  v1[9] = v2;
  v7 = type metadata accessor for ModifiedContent();
  v1[6] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v1[7] = &v65[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10, v11);
  v1[10] = &v65[-v12];
  v13 = type metadata accessor for LinkDestination();
  v1[2] = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v1[13] = &v65[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v1[24] = v7;
  v16 = type metadata accessor for _ConditionalContent();
  v1[15] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v1[14] = &v65[-v18];
  v1[16] = v3;
  v1[1] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = &v65[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v23, v24);
  v1[11] = &v65[-v25];
  v26 = type metadata accessor for ButtonAction();
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = &v65[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v30 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = &v65[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v1[12] = a1;
  v34 = v1[18];
  v35 = type metadata accessor for ModifiedContent();
  v1[23] = v16;
  v1[19] = v35;
  v36 = type metadata accessor for _ConditionalContent();
  v1[21] = *(_QWORD *)(v36 - 8);
  v1[22] = v36;
  MEMORY[0x1E0C80A78](v36, v37);
  v1[20] = &v65[-v38];
  v39 = (_BYTE *)(v34 + *(int *)(v4 + 44));
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v39, (uint64_t)v33, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of TableCellFormula((uint64_t)&v33[*(int *)(v30 + 24)], (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of TableCellFormula((uint64_t)v29, v1[13], (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
      WrappedButtonStyleBody.ArchiveBody.temporalStack.getter(v4, v5 - 184);
    }
    *((_OWORD *)v1 + 8) = *(_OWORD *)(v29 + 24);
    WrappedButtonStyleBody.ArchiveBody.temporalStack.getter(v4, (uint64_t)(v1 + 52));
  }
  swift_release();
  v41 = v39[1];
  *(_BYTE *)(v5 - 184) = *v39;
  *(_WORD *)(v5 - 183) = v41;
  ButtonStyle.resolvedBody(configuration:)(v5 - 184, v1[4], v1[3], (uint64_t)v22);
  v42 = v1[11];
  v43 = v1[16];
  static ViewBuilder.buildExpression<A>(_:)(v22, v43, &protocol witness table for ResolvedButtonStyleBody<A>);
  v44 = *(void (**)(_BYTE *, uint64_t))(v1[1] + 8);
  v44(v22, v43);
  v45 = v44;
  static ViewBuilder.buildBlock<A>(_:)(v42, v43, (uint64_t)v22);
  v46 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
  v1[30] = &protocol witness table for TemporalStack<A, B>;
  v1[31] = v46;
  v47 = MEMORY[0x1E0CE2E70];
  v48 = v1[24];
  v49 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v48, v1 + 30);
  v50 = v1[14];
  static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v22, v43);
  v45(v22, v43);
  v51 = (void (*)(_QWORD, uint64_t))v45;
  v1[28] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v1[29] = v49;
  v52 = v1[23];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v52, v1 + 28);
  v53 = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
  v1[26] = &protocol witness table for TemporalStack<A, B>;
  v1[27] = v53;
  v54 = v1[19];
  MEMORY[0x18D75FFDC](v47, v54, v1 + 26);
  v55 = v1[20];
  static ViewBuilder.buildEither<A, B>(first:)(v50, v52);
  (*(void (**)(uint64_t, uint64_t))(v1[15] + 8))(v50, v52);
  v51(v1[11], v43);
  v56 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
  v1[44] = &protocol witness table for TemporalStack<A, B>;
  v1[45] = v56;
  v57 = MEMORY[0x1E0CE2E70];
  v58 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v48, v1 + 44);
  v1[42] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v1[43] = v58;
  v59 = MEMORY[0x1E0CE4BD0];
  v60 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v52, v1 + 42);
  v61 = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
  v1[40] = &protocol witness table for TemporalStack<A, B>;
  v1[41] = v61;
  v62 = MEMORY[0x18D75FFDC](v57, v54, v1 + 40);
  v1[38] = v60;
  v1[39] = v62;
  v63 = v1[22];
  MEMORY[0x18D75FFDC](v59, v63, v1 + 38);
  static ViewBuilder.buildBlock<A>(_:)(v55, v63, v1[25]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1[21] + 8))(v55, v63);
}

void WrappedButtonStyleBody.ArchiveBody.temporalStack.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1, v3);
  v18 = &outlined read-only object #0 of WrappedButtonStyleBody.ArchiveBody.temporalStack.getter;
  (*(void (**)(char *, double))(v6 + 16))((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 24) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  static Alignment.center.getter();
  v13 = MEMORY[0x1E0DEAEC8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Bool], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v15 = v14;
  type metadata accessor for ResolvedButtonStyleBody(0, v11, v12, v16);
  lazy protocol witness table accessor for type External<Bool> and conformance External<A>(&lazy protocol witness table cache variable for type [Bool] and conformance [A], &lazy cache variable for type metadata for [Bool], (uint64_t (*)(_QWORD, uint64_t))v13, MEMORY[0x1E0DEAF50]);
  TemporalStack.init(states:alignment:content:)((uint64_t)&v18, v15, a2);
}

uint64_t closure #1 in WrappedButtonStyleBody.ArchiveBody.temporalStack.getter@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  char v21;
  void (*v22)(_BYTE *, uint64_t);
  _BYTE v24[13];
  _BYTE v25[3];

  v10 = type metadata accessor for ResolvedButtonStyleBody(0, a3, a4, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v24[-v17];
  LOBYTE(a1) = *a1;
  v20 = (char *)(a2 + *(int *)(type metadata accessor for WrappedButtonStyleBody.ArchiveBody(0, a3, a4, v19) + 44));
  v21 = *v20;
  LOBYTE(v20) = v20[1];
  v25[0] = v21;
  v25[1] = (_BYTE)v20;
  v25[2] = (_BYTE)a1;
  ButtonStyle.resolvedBody(configuration:)((uint64_t)v25, a3, a4, (uint64_t)v14);
  static ViewBuilder.buildExpression<A>(_:)(v14, v10, &protocol witness table for ResolvedButtonStyleBody<A>);
  v22 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v22(v14, v10);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, v10, a5);
  return ((uint64_t (*)(_BYTE *, uint64_t))v22)(v18, v10);
}

uint64_t WrappedButtonStyleBody.ArchiveBody.init(style:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a5 = swift_getKeyPath();
  *(_BYTE *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = swift_getKeyPath();
  *(_BYTE *)(a5 + 24) = 0;
  v11 = type metadata accessor for WrappedButtonStyleBody.ArchiveBody(0, a3, a4, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5 + *(int *)(v11 + 40), a1, a3);
  return outlined init with take of TableCellFormula(a2, a5 + *(int *)(v11 + 44), type metadata accessor for PrimitiveButtonStyleConfiguration);
}

uint64_t WrappedButtonStyleBody.archivedBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t, double);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  _QWORD v50[2];

  v41 = a1;
  v48 = a2;
  v3 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v44 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(a1 + 24);
  v13 = type metadata accessor for WrappedButtonStyleBody.ArchiveBody(0, v6, v43, v12);
  v45 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v41 - v15;
  v17 = type metadata accessor for ModifiedContent();
  v46 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v41 - v19;
  v21 = type metadata accessor for ModifiedContent();
  v47 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  v29 = (char *)&v41 - v28;
  v30 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v31 = v42;
  v30(v11, v42, v6, v27);
  v32 = v31 + *(int *)(v41 + 36);
  v33 = v44;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v32, v44, type metadata accessor for PrimitiveButtonStyleConfiguration);
  WrappedButtonStyleBody.ArchiveBody.init(style:configuration:)((uint64_t)v11, v33, v6, v43, (uint64_t)v16);
  v34 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyleBody<A>.ArchiveBody, v13);
  MEMORY[0x18D75B4AC](v34, v13, &type metadata for ArchivesInteractiveControlsEffect, v34);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v13);
  v50[0] = v34;
  v50[1] = &protocol witness table for ArchivesInteractiveControlsEffect;
  v35 = MEMORY[0x1E0CE2E70];
  v36 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v50);
  MEMORY[0x18D75B4AC](v36, v17, &type metadata for HandGestureShortcutInteractiveControl, v36);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v20, v17);
  v37 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl();
  v49[0] = v36;
  v49[1] = v37;
  v38 = MEMORY[0x18D75FFDC](v35, v21, v49);
  static ViewBuilder.buildExpression<A>(_:)(v24, v21, v38);
  v39 = *(void (**)(char *, uint64_t))(v47 + 8);
  v39(v24, v21);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v29, v21, v48);
  return ((uint64_t (*)(char *, uint64_t))v39)(v29, v21);
}

uint64_t ArchivableLinkModifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v20 = a2;
  v21 = type metadata accessor for LinkDestination.Configuration();
  MEMORY[0x1E0C80A78](v21, v3);
  v22 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys, (uint64_t)&unk_1E1ADB080, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v19 - v9;
  v11 = type metadata accessor for ArchivableLinkModifier(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys();
  v15 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    v16 = v20;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LinkDestination.Configuration and conformance LinkDestination.Configuration, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2DE8], MEMORY[0x1E0CE2E00]);
    v17 = (uint64_t)v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    outlined init with take of TableCellFormula(v17, (uint64_t)v14, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2DE8]);
    outlined init with take of TableCellFormula((uint64_t)v14, v16, type metadata accessor for ArchivableLinkModifier);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableLinkModifier.CodingKeys()
{
  return 0x72756769666E6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableLinkModifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableLinkModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableLinkModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ArchivableLinkModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for LinkDestination();
  v5 = MEMORY[0x1E0CE2E18];
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LinkDestination.Configuration();
  v10 = MEMORY[0x1E0CE2DE8];
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v23 - v16;
  v18 = type metadata accessor for LinkButtonModifierBody(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v17, (uint64_t (*)(_QWORD))v10);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(_QWORD))v10);
  LinkDestination.init(configuration:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))v10);
  outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)v21, (uint64_t (*)(_QWORD))v5);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, a1, type metadata accessor for LinkButtonModifierBody);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, type metadata accessor for LinkButtonModifierBody);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivableLinkModifier@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ArchivableLinkModifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableLinkModifier(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableLinkModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys, (uint64_t)&unk_1E1ADB080, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for LinkDestination.Configuration();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LinkDestination.Configuration and conformance LinkDestination.Configuration, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2DE8], MEMORY[0x1E0CE2DF8]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t instantiation function for generic protocol witness table for ArchivableLinkModifier(_QWORD *a1)
{
  uint64_t result;

  a1[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
  a1[2] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in WrappedButtonStyleBody<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivableLinkModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for LinkButtonModifierBody(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for LinkButtonModifierBody);
}

uint64_t closure #1 in ArchivableButtonAppIntentModifier.body(content:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (*v9)(uint64_t);
  char v10;
  void (*v11)(void *);
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  char *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  os_log_t v24;
  uint64_t v25;
  _QWORD v27[2];
  os_log_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = type metadata accessor for Logger();
  v33 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(void **)(a1 + 24);
  v9 = *(void (**)(uint64_t))(a1 + 32);
  v10 = *(_BYTE *)(a1 + 16) & 1;
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a1, v7, v10);
  v11 = (void (*)(void *))specialized Environment.wrappedValue.getter(v6, v7, v10);
  v12 = outlined consume of Environment<AppIntentExecutor?>.Content(v6, v7, v10);
  if (v11)
  {
    v11(v8);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v11);
  }
  else
  {
    v9(v12);
  }
  static Log.archivedButton.getter();
  outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v10);
  v13 = v8;
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v10);
  v14 = v13;
  swift_retain();
  v15 = Logger.logObject.getter();
  v16 = v5;
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v17))
  {
    v32 = v16;
    v18 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v35 = v30;
    v31 = v2;
    v29 = v18;
    *(_DWORD *)v18 = 136315138;
    v27[1] = v18 + 4;
    v19 = objc_msgSend(v14, sel_debugDescription);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v28 = v15;
    v22 = v21;

    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Environment<AppIntentExecutor?>.Content(v6, v7, v10);
    swift_release();

    outlined consume of Environment<AppIntentExecutor?>.Content(v6, v7, v10);
    swift_release();

    v24 = v28;
    v23 = v29;
    _os_log_impl(&dword_186E48000, v28, v17, "Executed LNAction %s from button tap.", v29, 0xCu);
    v25 = v30;
    swift_arrayDestroy();
    MEMORY[0x18D760108](v25, -1, -1);
    MEMORY[0x18D760108](v23, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v32, v31);
  }
  else
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(v6, v7, v10);
    swift_release();

    outlined consume of Environment<AppIntentExecutor?>.Content(v6, v7, v10);
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v16, v2);
  }
}

uint64_t closure #3 in ArchivableButtonAppIntentModifier.body(content:)()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t ArchivableButtonAppIntentModifier.encode(to:)(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  _OWORD v13[3];
  char v14;

  v3 = v1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableButtonAppIntentModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys, (uint64_t)&unk_1E1B02480, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v13 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11 = v3[1];
  v13[0] = *v3;
  v13[1] = v11;
  v13[2] = v3[2];
  v14 = 0;
  lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableButtonAppIntentModifier.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C62616E457369;
  else
    return 0x6E6F69746361;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableButtonAppIntentModifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ArchivableButtonAppIntentModifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableButtonAppIntentModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableButtonAppIntentModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ArchivableButtonAppIntentModifier@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t KeyPath;
  id v7;
  __int128 v9;
  __int128 v10;
  char v11;

  v3 = *((_QWORD *)v1 + 5);
  v4 = *((_BYTE *)v1 + 48);
  v10 = *v1;
  v11 = *((_BYTE *)v1 + 16);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = *v1;
  *(_QWORD *)(v5 + 32) = *((_QWORD *)v1 + 2);
  v9 = *(__int128 *)((char *)v1 + 24);
  *(_OWORD *)(v5 + 40) = v9;
  *(_QWORD *)(v5 + 56) = v3;
  *(_BYTE *)(v5 + 64) = v4;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = partial apply for closure #1 in ArchivableButtonAppIntentModifier.body(content:);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = partial apply for closure #2 in ArchivableButtonAppIntentModifier.body(content:);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = closure #3 in ArchivableButtonAppIntentModifier.body(content:);
  *(_QWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 2;
  *(_BYTE *)(a1 + 74) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = KeyPath;
  *(_BYTE *)(a1 + 96) = v4 & 1;
  outlined retain of Environment<AppIntentExecutor?>((uint64_t)&v10);
  v7 = (id)v9;
  return swift_retain();
}

double protocol witness for Decodable.init(from:) in conformance ArchivableButtonAppIntentModifier@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  char v8;

  specialized ArchivableButtonAppIntentModifier.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_BYTE *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableButtonAppIntentModifier(_QWORD *a1)
{
  return ArchivableButtonAppIntentModifier.encode(to:)(a1);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance LinkButtonModifierBody@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = type metadata accessor for LinkDestination();
  v4 = MEMORY[0x1E0CE2E18];
  v5 = *(_QWORD *)(v3 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v3, v7);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  result = outlined init with take of TableCellFormula((uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, (uint64_t (*)(_QWORD))v4);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = partial apply for implicit closure #2 in implicit closure #1 in LinkButtonModifierBody.body(content:);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = partial apply for closure #1 in LinkButtonModifierBody.body(content:);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 2;
  *(_BYTE *)(a1 + 74) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WrappedButtonStyleBody.body.getter()
{
  return partial apply for implicit closure #2 in implicit closure #1 in WrappedButtonStyleBody.body.getter((void (*)(void))closure #1 in ButtonAction.callAsFunction()partial apply);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #2 in WrappedButtonStyleBody.body.getter()
{
  return partial apply for implicit closure #2 in implicit closure #1 in WrappedButtonStyleBody.body.getter((void (*)(void))partial apply for closure #1 in ButtonAction.callAsFunction());
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WrappedButtonStyleBody.body.getter(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8) + 80);
  return implicit closure #2 in implicit closure #1 in WrappedButtonStyleBody.body.getter(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t objectdestroy_3Tm_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for WrappedButtonStyleBody(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = (v7 + 32) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v8, v5);
  v9 = *(int *)(v6 + 36);
  v10 = v4 + v8 + v9 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));

LABEL_6:
      swift_release();
      return swift_deallocObject();
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), *(_WORD *)(v10 + 32), *(_BYTE *)(v10 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v10 + 40), *(_QWORD *)(v10 + 48), *(_QWORD *)(v10 + 56), *(_QWORD *)(v10 + 64), *(_WORD *)(v10 + 72), *(_BYTE *)(v10 + 74));
      v12 = v10 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v13 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      return swift_deallocObject();
    case 0:
      goto LABEL_6;
  }
  return swift_deallocObject();
}

uint64_t property wrapper backing initializer of ButtonBehavior.state(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned __int16 v6;
  char v7;

  type metadata accessor for ButtonBehavior.StateType(0, a2, a3, a4);
  State.init(wrappedValue:)();
  if (v7)
    v4 = 0x10000;
  else
    v4 = 0;
  return v4 | v6;
}

uint64_t ButtonBehavior.ended()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int16 v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int16 v16;

  v14 = *(_OWORD *)(v4 + 72);
  v15 = v14;
  type metadata accessor for ButtonBehavior.StateType(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = type metadata accessor for State();
  State.wrappedValue.getter();
  if (v16 == 2)
  {
    ButtonBehavior.pressing(_:)(1, a1);
    static Transaction._core_barrier()();
  }
  v14 = v15;
  v7 = State.wrappedValue.getter();
  if (v16 == 2 || (v16 & 0x100) == 0)
    (*(void (**)(uint64_t))(v4 + 8))(v7);
  v14 = v15;
  type metadata accessor for AnyLocation();
  v9 = type metadata accessor for Optional();
  (*(void (**)(__int16 *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(&v16, (char *)&v15 + 8, v9);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v16);
  State.wrappedValue.getter();
  v14 = v15;
  v11 = 2;
  v12 = v13;
  specialized State.wrappedValue.setter((uint64_t)&v11, v6);
  return outlined release of AnyDynamicChild<A, B>((uint64_t)&v15);
}

uint64_t ButtonBehavior.pressing(_:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int16 v10;
  BOOL v11;
  __int128 v12;
  __int16 v13;
  BOOL v14;
  __int128 v15;
  _BYTE v16[8];

  (*(void (**)(void))(v2 + 24))();
  v15 = *(_OWORD *)(v2 + 72);
  type metadata accessor for ButtonBehavior.StateType(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v5);
  type metadata accessor for AnyLocation();
  v6 = type metadata accessor for Optional();
  (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v16, (char *)&v15 + 8, v6);
  v7 = type metadata accessor for State();
  State.wrappedValue.getter();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v16);
  State.wrappedValue.getter();
  v12 = v15;
  v10 = v13;
  v11 = v13 != 2;
  specialized State.wrappedValue.setter((uint64_t)&v10, v7);
  outlined release of AnyDynamicChild<A, B>((uint64_t)&v15);
  v12 = v15;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v16);
  State.wrappedValue.getter();
  v8 = v13 & 0x100;
  if (v13 == 2)
    v8 = 0;
  v12 = v15;
  v10 = v8 & 0xFFFE | a1 & 1;
  v11 = v14;
  specialized State.wrappedValue.setter((uint64_t)&v10, v7);
  return outlined release of AnyDynamicChild<A, B>((uint64_t)&v15);
}

uint64_t closure #1 in ButtonBehavior.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v7;
  char v8;
  __int128 v9;
  char v10;
  __int128 v11;
  _BYTE v12[8];

  v11 = *(_OWORD *)(a1 + 72);
  type metadata accessor for ButtonBehavior.StateType(255, a2, a3, a4);
  type metadata accessor for AnyLocation();
  v4 = type metadata accessor for Optional();
  (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v12, (char *)&v11 + 8, v4);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v12);
  v5 = type metadata accessor for State();
  State.wrappedValue.getter();
  v9 = v11;
  v7 = 2;
  v8 = v10;
  specialized State.wrappedValue.setter((uint64_t)&v7, v5);
  return outlined release of AnyDynamicChild<A, B>((uint64_t)&v11);
}

uint64_t closure #4 in ButtonBehavior.body.getter(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v8;
  char v9;
  __int128 v10;
  char v11;
  __int128 v12;
  _BYTE v13[8];

  if ((a1 & 1) != 0)
    v4 = 1;
  else
    v4 = 2;
  v12 = *(_OWORD *)(a2 + 72);
  type metadata accessor for ButtonBehavior.StateType(255, a3, a4, a4);
  type metadata accessor for AnyLocation();
  v5 = type metadata accessor for Optional();
  (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v13, (char *)&v12 + 8, v5);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v13);
  v6 = type metadata accessor for State();
  State.wrappedValue.getter();
  v10 = v12;
  v8 = v4;
  v9 = v11;
  specialized State.wrappedValue.setter((uint64_t)&v8, v6);
  return outlined release of AnyDynamicChild<A, B>((uint64_t)&v12);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ButtonInteractionPhase(__int16 *a1, _WORD *a2)
{
  __int16 v2;
  int v3;

  v2 = *a1;
  v3 = (unsigned __int16)*a2;
  if (*a1 == 2)
    return *a2 == 2;
  if (*a2 == 2 || ((((v2 & 1) == 0) ^ v3) & 1) == 0)
    return 0;
  return ((v2 & 0x100) == 0) ^ ((unsigned __int16)(v3 & 0x100) >> 8);
}

double ButtonFocusInteractionModifier.body(content:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[3];
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[60];

  *(_QWORD *)&v23 = &protocol witness table for FocusInteractions;
  *((_QWORD *)&v22 + 1) = &type metadata for FocusInteractions;
  *(_QWORD *)&v21 = 3;
  LOBYTE(v18[0]) = 1;
  outlined init with take of OptionalBinaryInteger(&v21, (uint64_t)v18 + 8);
  v19 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v20 = 0;
  v21 = v18[0];
  v22 = v18[1];
  v23 = v18[2];
  v24 = (unint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v21, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v21, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  lazy protocol witness table accessor for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture();
  lazy protocol witness table accessor for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType();
  swift_retain();
  swift_retain();
  Gesture<>.onChanged(_:)();
  swift_release();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = a3;
  v11[5] = a4;
  type metadata accessor for _ChangedGesture<PhysicalButtonPressGesture>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ChangedGesture<PhysicalButtonPressGesture> and conformance _ChangedGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ChangedGesture<PhysicalButtonPressGesture>, MEMORY[0x1E0CE2F88]);
  swift_retain();
  swift_retain();
  Gesture.onEnded(_:)();
  swift_release();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, (uint64_t)&v21, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>);
  *(_OWORD *)&v25[8] = v16;
  *(_OWORD *)&v25[24] = v17;
  *(_QWORD *)&v25[40] = 0;
  *(_QWORD *)&v25[48] = 0;
  *(_QWORD *)v25 = 16;
  *(_DWORD *)&v25[56] = 3;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>);
  v12 = *(_OWORD *)&v25[16];
  a5[4] = *(_OWORD *)v25;
  a5[5] = v12;
  a5[6] = *(_OWORD *)&v25[32];
  *(_OWORD *)((char *)a5 + 108) = *(_OWORD *)&v25[44];
  v13 = v22;
  *a5 = v21;
  a5[1] = v13;
  result = *(double *)&v23;
  v15 = v24;
  a5[2] = v23;
  a5[3] = v15;
  return result;
}

double protocol witness for ViewModifier.body(content:) in conformance ButtonFocusInteractionModifier@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;

  return ButtonFocusInteractionModifier.body(content:)(*v1, v1[1], v1[2], v1[3], a1);
}

id specialized static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  char v13;
  double v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  _QWORD v23[6];
  Swift::Double_optional v24;

  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  swift_bridgeObjectRetain();
  v24 = ButtonRepeatTiming.Iterator.next()();
  if ((v13 & 1) != 0)
  {
    swift_release();
    return 0;
  }
  else
  {
    v14 = *(double *)&v24.is_nil;
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = a3;
    v15[3] = a4;
    v15[4] = v12;
    v15[5] = a5;
    v15[6] = a6;
    v23[4] = partial apply for specialized closure #1 in static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:);
    v23[5] = v15;
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 1107296256;
    v23[2] = thunk for @escaping @callee_guaranteed (@guaranteed _UITabAction) -> ();
    v23[3] = &block_descriptor_36;
    v16 = _Block_copy(v23);
    v17 = (void *)objc_opt_self();
    swift_retain();
    swift_retain();
    swift_retain();
    v18 = objc_msgSend(v17, sel_timerWithTimeInterval_repeats_block_, 0, v16, v14);
    _Block_release(v16);
    swift_release();
    v19 = (void *)objc_opt_self();
    v20 = v18;
    v21 = objc_msgSend(v19, sel_mainRunLoop);
    objc_msgSend(v21, sel_addTimer_forMode_, v20, *MEMORY[0x1E0C99860]);
    swift_release();

  }
  return v20;
}

void specialized closure #1 in static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6)
{
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  id v15;

  a2();
  swift_beginAccess();
  v14 = *(_QWORD *)(a4 + 24);
  v11 = swift_bridgeObjectRetain();
  v12 = (void *)specialized static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(v11, v14, a2, a3, a5, a6);
  LODWORD(v14) = v13;
  swift_bridgeObjectRelease();
  if (v12)
    v14 = 1;
  else
    v14 = v14;
  v15 = v12;
  a5(v12, v14);

}

__n128 ButtonRepeatModifier.body(content:)@<Q0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  char v11;
  _BYTE v12[24];
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];

  v3 = v1[3];
  v17 = v1[2];
  v18[0] = v3;
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)v1 + 57);
  v4 = v1[1];
  v15 = *v1;
  v16 = v4;
  *(_OWORD *)v12 = v15;
  *(_WORD *)&v12[16] = *((_WORD *)v1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ButtonInteractionPhase>, (uint64_t)&type metadata for ButtonInteractionPhase, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v11);
  v5 = (_OWORD *)swift_allocObject();
  v6 = v18[0];
  v5[3] = v17;
  v5[4] = v6;
  *(_OWORD *)((char *)v5 + 73) = *(_OWORD *)((char *)v18 + 9);
  v7 = v16;
  v5[1] = v15;
  v5[2] = v7;
  outlined retain of ButtonRepeatModifier((uint64_t)&v15);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonRepeatModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonRepeatModifier and conformance ButtonRepeatModifier, (uint64_t)&unk_1E1AD2198, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
  lazy protocol witness table accessor for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>();
  lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  result = v13;
  v9 = v14;
  v10 = *(_OWORD *)&v12[8];
  *(_WORD *)a1 = *(_WORD *)v12;
  *(_OWORD *)(a1 + 8) = v10;
  *(__n128 *)(a1 + 24) = result;
  *(_OWORD *)(a1 + 40) = v9;
  return result;
}

void closure #1 in ButtonRepeatModifier.body(content:)(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  id v15;
  char v16;
  char v17;
  id v18;
  id v19;
  __int128 v20;
  uint64_t v21;
  id v22[2];
  __int128 v23;
  uint64_t v24;
  _BYTE v25[8];
  id v26[2];

  v4 = *a2;
  v23 = *(_OWORD *)(a3 + 40);
  v24 = *(_QWORD *)(a3 + 56);
  outlined init with take of ButtonRepeatModifier.RepeatState?((uint64_t)&v23, (uint64_t)v26);
  outlined init with take of TableCellFormula((uint64_t)&v24, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
  v20 = v23;
  v21 = v24;
  type metadata accessor for State<ButtonRepeatModifier.RepeatState?>(0, &lazy cache variable for type metadata for State<ButtonRepeatModifier.RepeatState?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();

  v5 = v4 & 1;
  if (!v22[0] && v4 != 2 && (v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(a3 + 64);
    v7 = *(_BYTE *)(a3 + 72);
    outlined copy of ResolvedTableRowIDs.Storage(v6, v7);
    specialized Environment.wrappedValue.getter(v6, v7, &v20);
    outlined consume of ResolvedTableRowIDs.Storage(v6, v7);
    v8 = v20;
    if ((_QWORD)v20)
    {
      v9 = (_OWORD *)swift_allocObject();
      v10 = *(_OWORD *)(a3 + 48);
      v9[3] = *(_OWORD *)(a3 + 32);
      v9[4] = v10;
      *(_OWORD *)((char *)v9 + 73) = *(_OWORD *)(a3 + 57);
      v11 = *(_OWORD *)(a3 + 16);
      v9[1] = *(_OWORD *)a3;
      v9[2] = v11;
      v12 = (_OWORD *)swift_allocObject();
      v13 = *(_OWORD *)(a3 + 48);
      v12[3] = *(_OWORD *)(a3 + 32);
      v12[4] = v13;
      *(_OWORD *)((char *)v12 + 73) = *(_OWORD *)(a3 + 57);
      v14 = *(_OWORD *)(a3 + 16);
      v12[1] = *(_OWORD *)a3;
      v12[2] = v14;
      outlined retain of ButtonRepeatModifier(a3);
      outlined retain of ButtonRepeatModifier(a3);
      v15 = specialized static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(v8, 0, (uint64_t)partial apply for closure #1 in closure #1 in ButtonRepeatModifier.body(content:), (uint64_t)v9, (uint64_t)partial apply for closure #2 in closure #1 in ButtonRepeatModifier.body(content:), (uint64_t)v12);
      v17 = v16;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      *(_QWORD *)&v20 = v15;
      BYTE8(v20) = v17;
      outlined init with take of TableCellFormula((uint64_t)v25, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
      if (v22[0])
      {
        outlined retain of ButtonRepeatModifier.RepeatState?(v26);
        v15 = v15;
        outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v25);
        dispatch thunk of AnyLocation.set(_:transaction:)();

      }
      else
      {
        outlined retain of ButtonRepeatModifier.RepeatState?(v26);
      }

      goto LABEL_15;
    }
  }
  v20 = v23;
  v21 = v24;
  State.wrappedValue.getter();
  v18 = v22[0];

  if (v18 && !v5)
  {
    v20 = v23;
    v21 = v24;
    State.wrappedValue.getter();
    v19 = v22[0];
    if (v22[0])
    {
      objc_msgSend(v22[0], sel_invalidate);

    }
    *(_QWORD *)&v20 = 0;
    BYTE8(v20) = 0;
    outlined init with take of TableCellFormula((uint64_t)v25, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
    if (v22[0])
    {
      outlined retain of ButtonRepeatModifier.RepeatState?(v26);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v25);
      dispatch thunk of AnyLocation.set(_:transaction:)();
LABEL_15:
      outlined release of ButtonRepeatModifier.RepeatState?(v26);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v25);
    }
  }
}

uint64_t closure #1 in closure #1 in ButtonRepeatModifier.body(content:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  swift_retain();
  outlined retain of ButtonRepeatModifier(a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ButtonInteractionPhase>, (uint64_t)&type metadata for ButtonInteractionPhase, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v3 = v2;
  swift_retain();
  MEMORY[0x18D75B9C8](&v6, v3);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  v4 = outlined release of ButtonRepeatModifier(a1);
  return (*(uint64_t (**)(uint64_t))(a1 + 24))(v4);
}

uint64_t closure #2 in closure #1 in ButtonRepeatModifier.body(content:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  id v5;
  __int128 v6;
  uint64_t v7;
  _BYTE v8[8];
  id v9[2];
  uint64_t v10;

  v6 = *(_OWORD *)(a3 + 40);
  v7 = *(_QWORD *)(a3 + 56);
  outlined init with take of TableCellFormula((uint64_t)&v7, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
  result = outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)&v10, (uint64_t (*)(_QWORD))type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
  if (v10)
  {
    outlined init with take of ButtonRepeatModifier.RepeatState?((uint64_t)&v6, (uint64_t)v9);
    outlined retain of ButtonRepeatModifier.RepeatState?(v9);
    v5 = a1;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v8);
    dispatch thunk of AnyLocation.set(_:transaction:)();

    outlined release of ButtonRepeatModifier.RepeatState?(v9);
    return outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v8);
  }
  return result;
}

uint64_t closure #2 in ButtonSpringLoadedInteraction.body(content:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ButtonInteractionPhase>, (uint64_t)&type metadata for ButtonInteractionPhase, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v1 = v0;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v3, v1);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t closure #3 in ButtonSpringLoadedInteraction.body(content:)()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ButtonSpringLoadedInteraction@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v1[1];
  v5 = *((_WORD *)v1 + 8);
  v7 = v1[3];
  v6 = v1[4];
  v12 = *v1;
  v4 = v12;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v12;
  *(_QWORD *)(v8 + 24) = v3;
  *(_WORD *)(v8 + 32) = v5;
  *(_DWORD *)(v8 + 34) = *(_DWORD *)((char *)v1 + 18);
  *(_WORD *)(v8 + 38) = *((_WORD *)v1 + 11);
  *(_QWORD *)(v8 + 40) = v7;
  *(_QWORD *)(v8 + 48) = v6;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v3;
  *(_WORD *)(v9 + 32) = v5;
  *(_DWORD *)(v9 + 34) = *(_DWORD *)((char *)v1 + 18);
  *(_WORD *)(v9 + 38) = *((_WORD *)v1 + 11);
  *(_QWORD *)(v9 + 40) = v7;
  *(_QWORD *)(v9 + 48) = v6;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v4;
  *(_QWORD *)(v10 + 24) = v3;
  *(_WORD *)(v10 + 32) = v5;
  *(_DWORD *)(v10 + 34) = *(_DWORD *)((char *)v1 + 18);
  *(_WORD *)(v10 + 38) = *((_WORD *)v1 + 11);
  *(_QWORD *)(v10 + 40) = v7;
  *(_QWORD *)(v10 + 48) = v6;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Gesture.Value, @inout B, @inout Transaction) -> (@out ());
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = partial apply for closure #2 in ButtonSpringLoadedInteraction.body(content:);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = partial apply for closure #3 in ButtonSpringLoadedInteraction.body(content:);
  *(_QWORD *)(a1 + 48) = v10;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v12);
  swift_retain();
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v12);
  swift_retain();
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v12);
  swift_retain();
  return swift_retain();
}

uint64_t type metadata accessor for ButtonBehavior.StateType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ButtonBehavior.StateType);
}

uint64_t type metadata accessor for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WrappedButtonStyleBody.ArchiveBody);
}

unint64_t lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableLinkModifier.CodingKeys, &unk_1E1ADB080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableLinkModifier.CodingKeys, &unk_1E1ADB080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableLinkModifier.CodingKeys, &unk_1E1ADB080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableLinkModifier.CodingKeys, &unk_1E1ADB080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys);
  }
  return result;
}

uint64_t destroy for ArchivableButtonAppIntentModifier(uint64_t a1)
{
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));

  return swift_release();
}

uint64_t initializeWithCopy for ArchivableButtonAppIntentModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  id v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = (id)v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArchivableButtonAppIntentModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  v10 = *(void **)(a2 + 24);
  v11 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  v12 = v10;

  v13 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v13;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for ArchivableButtonAppIntentModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);

  v8 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v8;
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableButtonAppIntentModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivableButtonAppIntentModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivableButtonAppIntentModifier()
{
  return &type metadata for ArchivableButtonAppIntentModifier;
}

uint64_t storeEnumTagSinglePayload for ArchivableLinkModifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_18752F518 + 4 * byte_187C3D33E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_18752F538 + 4 * byte_187C3D343[v4]))();
}

_BYTE *sub_18752F518(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_18752F538(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18752F540(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18752F548(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_18752F550(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_18752F558(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for ArchivableLinkModifier.CodingKeys()
{
  return &unk_1E1ADB080;
}

uint64_t getEnumTagSinglePayload for ButtonStyleConfiguration(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *((unsigned __int8 *)a1 + 2);
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ButtonStyleConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for LinkButtonModifierBody(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for LinkDestination();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 34);
    v12 = *(_WORD *)(a2 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v8, v9, v10, v12, v11);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_WORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 34) = v11;
    v13 = *(_QWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 48);
    v15 = *(_QWORD *)(a2 + 56);
    v16 = *(_QWORD *)(a2 + 64);
    v17 = *(_BYTE *)(a2 + 74);
    v18 = *(_WORD *)(a2 + 72);
    outlined copy of Environment<OpenURLAction>.Content(v13, v14, v15, v16, v18, v17);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v16;
    *(_WORD *)(a1 + 72) = v18;
    *(_BYTE *)(a1 + 74) = v17;
    v19 = *(int *)(v6 + 24);
    v20 = a1 + v19;
    v21 = a2 + v19;
    v22 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = type metadata accessor for LinkDestination.Configuration();
    *(_BYTE *)(v20 + *(int *)(v23 + 20)) = *(_BYTE *)(v21 + *(int *)(v23 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for LinkButtonModifierBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 34);
  v9 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v5, v6, v7, v9, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 34) = v8;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_BYTE *)(a2 + 74);
  v15 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v10, v11, v12, v13, v15, v14);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  *(_WORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 74) = v14;
  v16 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v17 + *(int *)(v20 + 20)) = *(_BYTE *)(v18 + *(int *)(v20 + 20));
  return a1;
}

uint64_t assignWithCopy for LinkButtonModifierBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 34);
  v9 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v5, v6, v7, v9, v8);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_BYTE *)(a1 + 34);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v15 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 34) = v8;
  outlined consume of Environment<OpenURLAction>.Content(v10, v11, v12, v13, v15, v14);
  v16 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 48);
  v18 = *(_QWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  v20 = *(_BYTE *)(a2 + 74);
  v21 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v21, v20);
  v22 = *(_QWORD *)(a1 + 40);
  v23 = *(_QWORD *)(a1 + 48);
  v24 = *(_QWORD *)(a1 + 56);
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *(_BYTE *)(a1 + 74);
  *(_QWORD *)(a1 + 40) = v16;
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  v27 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v21;
  *(_BYTE *)(a1 + 74) = v20;
  outlined consume of Environment<OpenURLAction>.Content(v22, v23, v24, v25, v27, v26);
  v28 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  v32 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v29 + *(int *)(v32 + 20)) = *(_BYTE *)(v30 + *(int *)(v32 + 20));
  return a1;
}

uint64_t initializeWithTake for LinkButtonModifierBody(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
  v5 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  v9 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v6 + *(int *)(v9 + 20)) = *(_BYTE *)(v7 + *(int *)(v9 + 20));
  return a1;
}

uint64_t assignWithTake for LinkButtonModifierBody(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int16 v12;
  __int16 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_WORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 34);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 34);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  v12 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 34) = v5;
  outlined consume of Environment<OpenURLAction>.Content(v6, v7, v8, v9, v12, v10);
  v13 = *(_WORD *)(a2 + 72);
  v14 = *(_BYTE *)(a2 + 74);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_BYTE *)(a1 + 74);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v20 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 74) = v14;
  outlined consume of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v20, v19);
  v21 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  v25 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v22 + *(int *)(v25 + 20)) = *(_BYTE *)(v23 + *(int *)(v25 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkButtonModifierBody()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18752FB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_4(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
}

uint64_t __swift_get_extra_inhabitant_indexTm_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for LinkButtonModifierBody()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18752FBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_4(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
}

uint64_t __swift_store_extra_inhabitant_indexTm_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t type metadata completion function for LinkButtonModifierBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ArchivableLinkModifier(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2E18]);
}

uint64_t type metadata completion function for ArchivableLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResolvedButtonStyleBody(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  char *v11;
  char v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 3) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    v11 = (char *)v4 + v6;
    v12 = *((_BYTE *)a2 + v6 + 2);
    *(_WORD *)v11 = *(_WORD *)((char *)a2 + v6);
    v11[2] = v12;
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithTake for ResolvedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = *(_BYTE *)(v8 + 2);
  *(_WORD *)v7 = *(_WORD *)v8;
  *(_BYTE *)(v7 + 2) = v9;
  return a1;
}

uint64_t assignWithTake for ResolvedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_WORD *)v7 = *(_WORD *)v8;
  *(_BYTE *)(v7 + 2) = *(_BYTE *)(v8 + 2);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedButtonStyleBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 3;
  v10 = 8 * (v7 + 3);
  if ((_DWORD)v7 != 0 && v7 < 0xFFFFFFFD)
    goto LABEL_8;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_15;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_22;
LABEL_8:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_22;
LABEL_15:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -3)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_18752FE74 + 4 * byte_187C3D348[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_15;
  }
LABEL_22:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1 + 2);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for ResolvedButtonStyleBody(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 3;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -3)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 3);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 3);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t assignWithTake for ButtonBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  v4 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v4;
      *(_QWORD *)(a1 + 64) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  swift_release();
LABEL_8:
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonBehavior(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ButtonBehavior(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WrappedButtonStyleBody(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 | 7;
  v12 = (v10 | 7) + v7;
  v13 = (v10 | 7) + 2;
  v14 = *(_QWORD *)(v9 + 64) + ((v10 + 75) & ~v10);
  if ((unint64_t)(v14 + 1) > 0x30)
    v15 = v14 + 1;
  else
    v15 = 48;
  v16 = v11 | *(_DWORD *)(v6 + 80);
  if (v16 != 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || v15 + (v12 & ~(v10 | 7)) + (v13 & ~(v10 | 7uLL)) + 1 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
LABEL_23:
    swift_retain();
    return a1;
  }
  v51 = *(_QWORD *)(v9 + 64);
  v52 = v8;
  v20 = ~v11;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
  v21 = (_WORD *)(((unint64_t)a1 + v12) & v20);
  v22 = (_WORD *)(((unint64_t)a2 + v12) & v20);
  *v21 = *v22;
  v23 = ((unint64_t)v21 + v13) & v20;
  v24 = ((unint64_t)v22 + v13) & v20;
  v25 = *(unsigned __int8 *)(v24 + v15);
  if (v25 >= 3)
  {
    if (v15 <= 3)
      v26 = v15;
    else
      v26 = 4;
    __asm { BR              X12 }
  }
  if (v25 == 2)
  {
    v38 = *(_QWORD *)v24;
    v39 = *(_QWORD *)(v24 + 8);
    v40 = *(_BYTE *)(v24 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v24, v39, v40);
    *(_QWORD *)v23 = v38;
    *(_QWORD *)(v23 + 8) = v39;
    *(_BYTE *)(v23 + 16) = v40;
    v41 = *(void **)(v24 + 24);
    *(_QWORD *)(v23 + 24) = v41;
    v42 = *(_QWORD *)(v24 + 40);
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
    *(_QWORD *)(v23 + 40) = v42;
    *(_BYTE *)(v23 + v15) = 2;
    v43 = v41;
    goto LABEL_23;
  }
  if (v25 != 1)
  {
    v44 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_QWORD *)((((unint64_t)v21 + v13) & v20) + 8) = v44;
    *(_BYTE *)(v23 + v15) = 0;
    goto LABEL_23;
  }
  v27 = *(_QWORD *)v24;
  v28 = *(_QWORD *)(v24 + 8);
  v29 = *(_QWORD *)(v24 + 24);
  v47 = *(_QWORD *)(v24 + 16);
  v49 = *(_BYTE *)(v24 + 34);
  v30 = *(_WORD *)(v24 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v24, v28, v47, v29, v30, v49);
  *(_QWORD *)v23 = v27;
  *(_QWORD *)(v23 + 8) = v28;
  *(_QWORD *)(v23 + 16) = v47;
  *(_QWORD *)(v23 + 24) = v29;
  *(_WORD *)(v23 + 32) = v30;
  *(_BYTE *)(v23 + 34) = v49;
  v31 = (v23 + 42) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v24 + 42) & 0xFFFFFFFFFFFFFFF8;
  v46 = *(_QWORD *)(v32 + 8);
  v48 = *(_QWORD *)v32;
  v33 = *(_QWORD *)(v32 + 16);
  v34 = *(_QWORD *)(v32 + 24);
  v50 = *(_BYTE *)(v32 + 34);
  v35 = *(_WORD *)(v32 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v32, v46, v33, v34, v35, v50);
  *(_QWORD *)v31 = v48;
  *(_QWORD *)(v31 + 8) = v46;
  *(_QWORD *)(v31 + 16) = v33;
  *(_QWORD *)(v31 + 24) = v34;
  *(_WORD *)(v31 + 32) = v35;
  *(_BYTE *)(v31 + 34) = v50;
  v36 = (v10 + 35 + v31) & ~v10;
  v37 = (v10 + 35 + v32) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v36, v37, v52);
  *(_BYTE *)(v36 + v51) = *(_BYTE *)(v37 + v51);
  *(_BYTE *)(v23 + v15) = 1;
  return a1;
}

uint64_t initializeWithTake for WrappedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_WORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_WORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  v13 = (v9 | 7) + 2;
  v14 = ((unint64_t)v11 + v13) & ~(v9 | 7);
  v15 = ((unint64_t)v12 + v13) & ~(v9 | 7);
  v16 = *(_QWORD *)(v8 + 64);
  v17 = v16 + ((v9 + 75) & ~v9);
  if ((unint64_t)(v17 + 1) > 0x30)
    v18 = v17 + 1;
  else
    v18 = 48;
  v19 = *(unsigned __int8 *)(v15 + v18);
  if (v19 >= 3)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X15 }
  }
  if (v19 == 2)
  {
    v32 = *(_OWORD *)v15;
    v33 = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
    *(_OWORD *)(v14 + 32) = v33;
    *(_OWORD *)v14 = v32;
    v31 = 2;
  }
  else if (v19 == 1)
  {
    v21 = ~v9;
    v22 = *(_OWORD *)v15;
    v23 = *(_OWORD *)(v15 + 16);
    *(_DWORD *)(v14 + 31) = *(_DWORD *)(v15 + 31);
    *(_OWORD *)v14 = v22;
    *(_OWORD *)(v14 + 16) = v23;
    v24 = (v14 + 42) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v15 + 42) & 0xFFFFFFFFFFFFFFF8;
    v26 = *(_OWORD *)v25;
    v27 = *(_OWORD *)(v25 + 16);
    *(_DWORD *)(v24 + 31) = *(_DWORD *)(v25 + 31);
    *(_OWORD *)v24 = v26;
    *(_OWORD *)(v24 + 16) = v27;
    v28 = v9 + 35;
    v29 = (v28 + v24) & v21;
    v30 = (v28 + v25) & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(v29, v30, v7);
    *(_BYTE *)(v29 + v16) = *(_BYTE *)(v30 + v16);
    v31 = 1;
  }
  else
  {
    v31 = 0;
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  *(_BYTE *)(v14 + v18) = v31;
  return a1;
}

uint64_t assignWithTake for WrappedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_WORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_WORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  v13 = (v9 | 7) + 2;
  v14 = ((unint64_t)v11 + v13) & ~(v9 | 7);
  v15 = ((unint64_t)v12 + v13) & ~(v9 | 7);
  if (v14 == v15)
    return a1;
  v16 = v7;
  v17 = *(_QWORD *)(v8 + 64);
  v18 = ((v9 + 75) & ~v9) + v17;
  if ((unint64_t)(v18 + 1) > 0x30)
    v19 = v18 + 1;
  else
    v19 = 48;
  v20 = *(unsigned __int8 *)(v14 + v19);
  if (v20 >= 3)
  {
    if (v19 <= 3)
      v21 = v19;
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  v22 = ~v9;
  if (v20 == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v14, *(_QWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 8), *(_BYTE *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x10));

    goto LABEL_14;
  }
  if (v20 != 1)
  {
LABEL_14:
    swift_release();
    goto LABEL_15;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v14, *(_QWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 8), *(_QWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x10), *(_QWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x18), *(_WORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x20), *(_BYTE *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x22));
  v23 = (v14 + 42) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_QWORD *)(v23 + 16), *(_QWORD *)(v23 + 24), *(_WORD *)(v23 + 32), *(_BYTE *)(v23 + 34));
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))((v9 + v23 + 35) & v22, v16);
LABEL_15:
  v24 = *(unsigned __int8 *)(v15 + v19);
  if (v24 >= 3)
  {
    if (v19 <= 3)
      v25 = v19;
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  if (v24 == 2)
  {
    v35 = *(_OWORD *)v15;
    v36 = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
    *(_OWORD *)(v14 + 32) = v36;
    *(_OWORD *)v14 = v35;
    v34 = 2;
  }
  else if (v24 == 1)
  {
    v26 = *(_OWORD *)v15;
    v27 = *(_OWORD *)(v15 + 16);
    *(_DWORD *)(v14 + 31) = *(_DWORD *)(v15 + 31);
    *(_OWORD *)v14 = v26;
    *(_OWORD *)(v14 + 16) = v27;
    v28 = (v14 + 42) & 0xFFFFFFFFFFFFFFF8;
    v29 = (v15 + 42) & 0xFFFFFFFFFFFFFFF8;
    v30 = *(_OWORD *)v29;
    v31 = *(_OWORD *)(v29 + 16);
    *(_DWORD *)(v28 + 31) = *(_DWORD *)(v29 + 31);
    *(_OWORD *)v28 = v30;
    *(_OWORD *)(v28 + 16) = v31;
    v32 = (v9 + 35 + v28) & v22;
    v33 = (v9 + 35 + v29) & v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v32, v33, v16);
    *(_BYTE *)(v17 + v32) = *(_BYTE *)(v17 + v33);
    v34 = 1;
  }
  else
  {
    v34 = 0;
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  *(_BYTE *)(v14 + v19) = v34;
  return a1;
}

uint64_t getEnumTagSinglePayload for WrappedButtonStyleBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64) + ((v9 + 75) & ~v9);
  v11 = 48;
  if ((unint64_t)(v10 + 1) > 0x30)
    v11 = v10 + 1;
  if (v7 <= 0xFD)
    v12 = 253;
  else
    v12 = v7;
  if (!a2)
    return 0;
  v13 = v9 | 7;
  v14 = (v9 | 7) + *(_QWORD *)(v6 + 64);
  v15 = (v9 | 7) + 2;
  if (a2 <= v12)
    goto LABEL_26;
  v16 = v11 + (v14 & ~v13) + (v15 & ~v13) + 1;
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v20 = ((a2 - v12 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v20 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v20 < 2)
    {
LABEL_26:
      if (v7 >= 0xFD)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
      v23 = *(unsigned __int8 *)(((v15 + ((v14 + a1) & ~v13)) & ~v13) + v11);
      if (v23 >= 3)
        return (v23 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_26;
LABEL_17:
  v21 = (v18 - 1) << v17;
  if (v16 > 3)
    v21 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v22 = v16;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v12 + v21 + 1;
}

void storeEnumTagSinglePayload for WrappedButtonStyleBody(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  size_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64) + ((v10 + 75) & ~v10);
  if ((unint64_t)(v11 + 1) > 0x30)
    v12 = v11 + 1;
  else
    v12 = 48;
  if (v8 <= 0xFD)
    v13 = 253;
  else
    v13 = v8;
  v14 = v12 + (((v10 | 7) + 2) & ~(v10 | 7)) + 1 + (((v10 | 7) + *(_QWORD *)(v7 + 64)) & ~(v10 | 7));
  if (a3 <= v13)
  {
    v15 = 0u;
  }
  else if (v14 <= 3)
  {
    v17 = ((a3 - v13 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v15 = 4u;
    }
    else if (v17 >= 0x100)
    {
      v15 = 2;
    }
    else
    {
      v15 = v17 > 1;
    }
  }
  else
  {
    v15 = 1u;
  }
  if (v13 < a2)
  {
    v16 = ~v13 + a2;
    if (v14 < 4)
    {
      if ((_DWORD)v14)
      {
        v18 = v16 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if ((_DWORD)v14 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if ((_DWORD)v14 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_187530E38()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187530E20);
}

void sub_187530E48()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187530E20);
}

void sub_187530E50()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187530E20);
}

uint64_t type metadata completion function for WrappedButtonStyleBody.ArchiveBody()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 | 7;
  v14 = (v12 | 7) + 2;
  v15 = *(_QWORD *)(v11 + 64) + ((v12 + 75) & ~v12);
  if ((unint64_t)(v15 + 1) > 0x30)
    v16 = v15 + 1;
  else
    v16 = 48;
  v60 = *(_DWORD *)(v11 + 80);
  if ((v12 | (unint64_t)v7) <= 7
    && ((*(_DWORD *)(v11 + 80) | v7) & 0x100000) == 0
    && v16
     + (v14 & ~(v12 | 7))
     + (((v12 | 7) + v9 + ((v7 + 25) & ~(unint64_t)v7)) & ~(v12 | 7))
     + 1 <= 0x18)
  {
    v55 = *(_QWORD *)(v11 + 64);
    v56 = *(_QWORD *)(v10 - 8);
    v57 = v10;
    v59 = v9;
    v21 = ~v13;
    v22 = *(_QWORD *)a2;
    v61 = v16;
    v23 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v23);
    *(_QWORD *)a1 = v22;
    *(_BYTE *)(a1 + 8) = v23;
    v58 = a1;
    v24 = a1 & 0xFFFFFFFFFFFFFFF8;
    v25 = a2 & 0xFFFFFFFFFFFFFFF8;
    v26 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    LOBYTE(v22) = *(_BYTE *)(v25 + 24);
    outlined copy of Environment<Bool>.Content(v26, v22);
    *(_QWORD *)(v24 + 16) = v26;
    *(_BYTE *)(v24 + 24) = v22;
    v27 = (v24 + v8 + 25) & ~v8;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v27, (v25 + v8 + 25) & ~v8, v5);
    v28 = (_WORD *)((v27 + v59 + v13) & v21);
    v29 = (_WORD *)((((v25 + v8 + 25) & ~v8) + v59 + v13) & v21);
    *v28 = *v29;
    v30 = ((unint64_t)v28 + v14) & v21;
    v31 = ((unint64_t)v29 + v14) & v21;
    v32 = *(unsigned __int8 *)(v31 + v61);
    if (v32 >= 3)
    {
      if (v61 <= 3)
        v33 = v61;
      else
        v33 = 4;
      __asm { BR              X12 }
    }
    if (v32 == 2)
    {
      v47 = *(_QWORD *)v31;
      v48 = *(_QWORD *)((((unint64_t)v29 + v14) & v21) + 8);
      v49 = *(_BYTE *)((((unint64_t)v29 + v14) & v21) + 0x10);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(((unint64_t)v29 + v14) & v21), v48, v49);
      *(_QWORD *)v30 = v47;
      *(_QWORD *)(v30 + 8) = v48;
      *(_BYTE *)(v30 + 16) = v49;
      v50 = *(void **)(v31 + 24);
      *(_QWORD *)(v30 + 24) = v50;
      v51 = *(_QWORD *)(v31 + 40);
      *(_QWORD *)(v30 + 32) = *(_QWORD *)(v31 + 32);
      *(_QWORD *)(v30 + 40) = v51;
      *(_BYTE *)(v30 + v61) = 2;
      v52 = v50;
    }
    else
    {
      if (v32 == 1)
      {
        v34 = *(_QWORD *)v31;
        v35 = *(_QWORD *)((((unint64_t)v29 + v14) & v21) + 8);
        v36 = *(_QWORD *)((((unint64_t)v29 + v14) & v21) + 0x10);
        v37 = *(_QWORD *)((((unint64_t)v29 + v14) & v21) + 0x18);
        v38 = *(_BYTE *)((((unint64_t)v29 + v14) & v21) + 0x22);
        v39 = *(_WORD *)((((unint64_t)v29 + v14) & v21) + 0x20);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v31, *(_QWORD *)(v31 + 8), *(_QWORD *)(v31 + 16), *(_QWORD *)(v31 + 24), *(_WORD *)(v31 + 32), *(_BYTE *)(v31 + 34));
        *(_QWORD *)v30 = v34;
        *(_QWORD *)(v30 + 8) = v35;
        *(_QWORD *)(v30 + 16) = v36;
        *(_QWORD *)(v30 + 24) = v37;
        *(_WORD *)(v30 + 32) = v39;
        *(_BYTE *)(v30 + 34) = v38;
        v40 = (v30 + 42) & 0xFFFFFFFFFFFFFFF8;
        v41 = (v31 + 42) & 0xFFFFFFFFFFFFFFF8;
        v42 = *(_QWORD *)v41;
        v43 = *(_QWORD *)(v41 + 8);
        v44 = *(_QWORD *)(v41 + 16);
        v45 = *(_QWORD *)(v41 + 24);
        LOBYTE(v36) = *(_BYTE *)(v41 + 34);
        v46 = *(_WORD *)(v41 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v41, v43, v44, v45, v46, v36);
        *(_QWORD *)v40 = v42;
        *(_QWORD *)(v40 + 8) = v43;
        *(_QWORD *)(v40 + 16) = v44;
        *(_QWORD *)(v40 + 24) = v45;
        *(_WORD *)(v40 + 32) = v46;
        *(_BYTE *)(v40 + 34) = v36;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v56 + 16))((v60 + 35 + v40) & ~v60, (v60 + 35 + v41) & ~v60, v57);
        *(_BYTE *)(((v60 + 35 + v40) & ~v60) + v55) = *(_BYTE *)(((v60 + 35 + v41) & ~v60) + v55);
        *(_BYTE *)(v30 + v61) = 1;
        return v58;
      }
      v53 = *(_QWORD *)((((unint64_t)v29 + v14) & v21) + 8);
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_QWORD *)(v30 + 8) = v53;
      *(_BYTE *)(v30 + v61) = 0;
    }
    swift_retain();
    return v58;
  }
  v19 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v20 = v19 + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16));
  swift_retain();
  return v20;
}

uint64_t destroy for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;

  v3 = a1;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v3 &= 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24));
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (((v5 + v6 + (v9 | 7)) | v9 | 7) + 2) & ~(v9 | 7);
  v11 = *(_QWORD *)(v8 + 64) + ((v9 + 75) & ~v9);
  if ((unint64_t)(v11 + 1) > 0x30)
    v12 = v11 + 1;
  else
    v12 = 48;
  v13 = *(unsigned __int8 *)(v10 + v12);
  if (v13 >= 3)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  if (v13 == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));

  }
  else if (v13 == 1)
  {
    outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), *(_WORD *)(v10 + 32), *(_BYTE *)(v10 + 34));
    v15 = (v10 + 42) & 0xFFFFFFFFFFFFFFF8;
    outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 24), *(_WORD *)(v15 + 32), *(_BYTE *)(v15 + 34));
    return (*(uint64_t (**)(unint64_t, uint64_t))(v8 + 8))((v9 + v15 + 35) & ~v9, v7);
  }
  return swift_release();
}

uint64_t initializeWithCopy for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int16 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(_BYTE *)(v9 + 24);
  outlined copy of Environment<Bool>.Content(v10, v6);
  *(_QWORD *)(v8 + 16) = v10;
  *(_BYTE *)(v8 + 24) = v6;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v12;
  v14 = (v12 + 25 + v9) & ~v12;
  (*(void (**)(unint64_t, uint64_t))(v11 + 16))(v13, v14);
  v15 = *(_QWORD *)(v11 + 64);
  v16 = type metadata accessor for URL();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 | 7) + v15;
  v20 = (_WORD *)((v19 + v13) & ~(v18 | 7));
  v21 = (_WORD *)((v19 + v14) & ~(v18 | 7));
  *v20 = *v21;
  v22 = (v18 | 7) + 2;
  v23 = (unint64_t)v20 + v22;
  v24 = v23 & ~(v18 | 7);
  v25 = ((unint64_t)v21 + v22) & ~(v18 | 7);
  v26 = *(_QWORD *)(v17 + 64) + ((v18 + 75) & ~v18);
  if ((unint64_t)(v26 + 1) > 0x30)
    v27 = v26 + 1;
  else
    v27 = 48;
  v28 = *(unsigned __int8 *)(v25 + v27);
  if (v28 >= 3)
  {
    if (v27 <= 3)
      v29 = v27;
    else
      v29 = 4;
    __asm { BR              X12 }
  }
  if (v28 == 2)
  {
    v43 = *(_QWORD *)v25;
    v44 = *(_QWORD *)(v25 + 8);
    v45 = *(_BYTE *)(v25 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v25, v44, v45);
    *(_QWORD *)v24 = v43;
    *(_QWORD *)(v24 + 8) = v44;
    *(_BYTE *)(v24 + 16) = v45;
    v46 = *(void **)(v25 + 24);
    *(_QWORD *)(v24 + 24) = v46;
    v47 = *(_QWORD *)(v25 + 40);
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(v25 + 32);
    *(_QWORD *)(v24 + 40) = v47;
    *(_BYTE *)(v24 + v27) = 2;
    v48 = v46;
LABEL_14:
    swift_retain();
    return a1;
  }
  if (v28 != 1)
  {
    v49 = *(_QWORD *)(v25 + 8);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *(_QWORD *)((v23 & ~(v18 | 7)) + 8) = v49;
    *(_BYTE *)(v24 + v27) = 0;
    goto LABEL_14;
  }
  v55 = a1;
  v30 = *(_QWORD *)v25;
  v31 = *(_QWORD *)(v25 + 8);
  v32 = *(_QWORD *)(v25 + 16);
  v33 = *(_QWORD *)(v25 + 24);
  v34 = *(_BYTE *)(v25 + 34);
  v35 = *(_WORD *)(v25 + 32);
  v53 = *(_QWORD *)(v17 + 64);
  v54 = v16;
  v52 = v17;
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v25, v31, v32, v33, v35, v34);
  *(_QWORD *)v24 = v30;
  *(_QWORD *)(v24 + 8) = v31;
  *(_QWORD *)(v24 + 16) = v32;
  *(_QWORD *)(v24 + 24) = v33;
  *(_WORD *)(v24 + 32) = v35;
  *(_BYTE *)(v24 + 34) = v34;
  v36 = (v24 + 42) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v25 + 42) & 0xFFFFFFFFFFFFFFF8;
  v38 = *(_QWORD *)v37;
  v39 = *(_QWORD *)(v37 + 8);
  v40 = *(_QWORD *)(v37 + 16);
  v41 = *(_QWORD *)(v37 + 24);
  v51 = *(_BYTE *)(v37 + 34);
  v42 = *(_WORD *)(v37 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v37, v39, v40, v41, v42, v51);
  *(_QWORD *)v36 = v38;
  *(_QWORD *)(v36 + 8) = v39;
  *(_QWORD *)(v36 + 16) = v40;
  *(_QWORD *)(v36 + 24) = v41;
  a1 = v55;
  *(_WORD *)(v36 + 32) = v42;
  *(_BYTE *)(v36 + 34) = v51;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v52 + 16))((v18 + 35 + v36) & ~v18, (v18 + 35 + v37) & ~v18, v54);
  *(_BYTE *)(((v18 + 35 + v36) & ~v18) + v53) = *(_BYTE *)(((v18 + 35 + v37) & ~v18) + v53);
  *(_BYTE *)(v24 + v27) = 1;
  return a1;
}

uint64_t assignWithCopy for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(_BYTE *)(v11 + 24);
  outlined copy of Environment<Bool>.Content(v12, v6);
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  v14 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v10 + 16) = v12;
  *(_BYTE *)(v10 + 24) = v6;
  outlined consume of Environment<Bool>.Content(v13, v14);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v16 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  v18 = (v16 + 25 + v11) & ~v16;
  (*(void (**)(unint64_t, uint64_t))(v15 + 24))(v17, v18);
  v19 = *(_QWORD *)(v15 + 64);
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (v22 | 7) + v19;
  v24 = (_WORD *)((v23 + v17) & ~(v22 | 7));
  v25 = (_WORD *)((v23 + v18) & ~(v22 | 7));
  *v24 = *v25;
  v26 = (v22 | 7) + 2;
  v27 = ((unint64_t)v24 + v26) & ~(v22 | 7);
  v28 = ((unint64_t)v25 + v26) & ~(v22 | 7);
  if (v27 != v28)
  {
    v29 = v20;
    v30 = *(_QWORD *)(v21 + 64);
    v31 = ((v22 + 75) & ~v22) + v30;
    if ((unint64_t)(v31 + 1) > 0x30)
      v32 = v31 + 1;
    else
      v32 = 48;
    v33 = *(unsigned __int8 *)(v27 + v32);
    if (v33 >= 3)
    {
      if (v32 <= 3)
        v34 = v32;
      else
        v34 = 4;
      __asm { BR              X12 }
    }
    if (v33 == 2)
    {
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v27, *(_QWORD *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 8), *(_BYTE *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 0x10));

    }
    else if (v33 == 1)
    {
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v27, *(_QWORD *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 8), *(_QWORD *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 0x10), *(_QWORD *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 0x18), *(_WORD *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 0x20), *(_BYTE *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 0x22));
      v35 = (v27 + 42) & 0xFFFFFFFFFFFFFFF8;
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v35, *(_QWORD *)(v35 + 8), *(_QWORD *)(v35 + 16), *(_QWORD *)(v35 + 24), *(_WORD *)(v35 + 32), *(_BYTE *)(v35 + 34));
      (*(void (**)(unint64_t, uint64_t))(v21 + 8))((v22 + v35 + 35) & ~v22, v29);
      goto LABEL_15;
    }
    swift_release();
LABEL_15:
    v36 = *(unsigned __int8 *)(v28 + v32);
    if (v36 >= 3)
    {
      if (v32 <= 3)
        v37 = v32;
      else
        v37 = 4;
      __asm { BR              X12 }
    }
    if (v36 == 2)
    {
      v51 = *(_QWORD *)v28;
      v52 = *(_QWORD *)(v28 + 8);
      v53 = *(_BYTE *)(v28 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v28, v52, v53);
      *(_QWORD *)v27 = v51;
      *(_QWORD *)(v27 + 8) = v52;
      *(_BYTE *)(v27 + 16) = v53;
      v54 = *(void **)(v28 + 24);
      *(_QWORD *)(v27 + 24) = v54;
      v55 = *(_QWORD *)(v28 + 40);
      *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
      *(_QWORD *)(v27 + 40) = v55;
      *(_BYTE *)(v27 + v32) = 2;
      v56 = v54;
    }
    else
    {
      if (v36 == 1)
      {
        v63 = v29;
        v64 = v30;
        v61 = ~v22;
        v62 = v21;
        v38 = *(_QWORD *)v28;
        v39 = *(_QWORD *)(v28 + 8);
        v40 = *(_QWORD *)(v28 + 16);
        v41 = *(_QWORD *)(v28 + 24);
        v42 = *(_BYTE *)(v28 + 34);
        v60 = v22;
        v43 = *(_WORD *)(v28 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v28, v39, v40, v41, v43, v42);
        *(_QWORD *)v27 = v38;
        *(_QWORD *)(v27 + 8) = v39;
        *(_QWORD *)(v27 + 16) = v40;
        *(_QWORD *)(v27 + 24) = v41;
        *(_WORD *)(v27 + 32) = v43;
        *(_BYTE *)(v27 + 34) = v42;
        v44 = (v27 + 42) & 0xFFFFFFFFFFFFFFF8;
        v45 = (v28 + 42) & 0xFFFFFFFFFFFFFFF8;
        v46 = *(_QWORD *)v45;
        v47 = *(_QWORD *)(v45 + 8);
        v48 = *(_QWORD *)(v45 + 16);
        v49 = *(_QWORD *)(v45 + 24);
        v59 = *(_BYTE *)(v45 + 34);
        v50 = *(_WORD *)(v45 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v45, v47, v48, v49, v50, v59);
        *(_QWORD *)v44 = v46;
        *(_QWORD *)(v44 + 8) = v47;
        *(_QWORD *)(v44 + 16) = v48;
        *(_QWORD *)(v44 + 24) = v49;
        *(_WORD *)(v44 + 32) = v50;
        *(_BYTE *)(v44 + 34) = v59;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v62 + 16))((v60 + 35 + v44) & v61, (v60 + 35 + v45) & v61, v63);
        *(_BYTE *)(v64 + ((v60 + 35 + v44) & v61)) = *(_BYTE *)(v64 + ((v60 + 35 + v45) & v61));
        *(_BYTE *)(v27 + v32) = 1;
        return a1;
      }
      v57 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = v57;
      *(_BYTE *)(v27 + v32) = 0;
    }
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithTake for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v4 + 16) = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  v9 = (v7 + 25 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 | 7) + v10;
  v15 = (_WORD *)((v14 + v8) & ~(v13 | 7));
  v16 = (_WORD *)((v14 + v9) & ~(v13 | 7));
  *v15 = *v16;
  v17 = (v13 | 7) + 2;
  v18 = ((unint64_t)v15 + v17) & ~(v13 | 7);
  v19 = ((unint64_t)v16 + v17) & ~(v13 | 7);
  v20 = *(_QWORD *)(v12 + 64);
  v21 = v20 + ((v13 + 75) & ~v13);
  if ((unint64_t)(v21 + 1) > 0x30)
    v22 = v21 + 1;
  else
    v22 = 48;
  v23 = *(unsigned __int8 *)(v19 + v22);
  if (v23 >= 3)
  {
    if (v22 <= 3)
      v24 = v22;
    else
      v24 = 4;
    __asm { BR              X15 }
  }
  if (v23 == 2)
  {
    v36 = *(_OWORD *)v19;
    v37 = *(_OWORD *)(v19 + 32);
    *(_OWORD *)(v18 + 16) = *(_OWORD *)(v19 + 16);
    *(_OWORD *)(v18 + 32) = v37;
    *(_OWORD *)v18 = v36;
    v35 = 2;
  }
  else if (v23 == 1)
  {
    v25 = ~v13;
    v26 = *(_OWORD *)v19;
    v27 = *(_OWORD *)(v19 + 16);
    *(_DWORD *)(v18 + 31) = *(_DWORD *)(v19 + 31);
    *(_OWORD *)v18 = v26;
    *(_OWORD *)(v18 + 16) = v27;
    v28 = (v18 + 42) & 0xFFFFFFFFFFFFFFF8;
    v29 = (v19 + 42) & 0xFFFFFFFFFFFFFFF8;
    v30 = *(_OWORD *)v29;
    v31 = *(_OWORD *)(v29 + 16);
    *(_DWORD *)(v28 + 31) = *(_DWORD *)(v29 + 31);
    *(_OWORD *)v28 = v30;
    *(_OWORD *)(v28 + 16) = v31;
    v32 = v13 + 35;
    v33 = (v32 + v28) & v25;
    v34 = (v32 + v29) & v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 32))(v33, v34, v11);
    *(_BYTE *)(v33 + v20) = *(_BYTE *)(v34 + v20);
    v35 = 1;
  }
  else
  {
    v35 = 0;
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  *(_BYTE *)(v18 + v22) = v35;
  return a1;
}

uint64_t assignWithTake for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  v14 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v10 + 24) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v16 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  v18 = (v16 + 25 + v11) & ~v16;
  (*(void (**)(unint64_t, uint64_t))(v15 + 40))(v17, v18);
  v19 = *(_QWORD *)(v15 + 64);
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (v22 | 7) + v19;
  v24 = (_WORD *)((v23 + v17) & ~(v22 | 7));
  v25 = (_WORD *)((v23 + v18) & ~(v22 | 7));
  *v24 = *v25;
  v26 = (v22 | 7) + 2;
  v27 = ((unint64_t)v24 + v26) & ~(v22 | 7);
  v28 = ((unint64_t)v25 + v26) & ~(v22 | 7);
  if (v27 == v28)
    return a1;
  v29 = v20;
  v30 = *(_QWORD *)(v21 + 64);
  v31 = ((v22 + 75) & ~v22) + v30;
  if ((unint64_t)(v31 + 1) > 0x30)
    v32 = v31 + 1;
  else
    v32 = 48;
  v33 = *(unsigned __int8 *)(v27 + v32);
  if (v33 >= 3)
  {
    if (v32 <= 3)
      v34 = v32;
    else
      v34 = 4;
    __asm { BR              X12 }
  }
  v35 = ~v22;
  if (v33 == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v27, *(_QWORD *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 8), *(_BYTE *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 0x10));

    goto LABEL_14;
  }
  if (v33 != 1)
  {
LABEL_14:
    swift_release();
    goto LABEL_15;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v27, *(_QWORD *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 8), *(_QWORD *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 0x10), *(_QWORD *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 0x18), *(_WORD *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 0x20), *(_BYTE *)((((unint64_t)v24 + v26) & ~(v22 | 7)) + 0x22));
  v36 = (v27 + 42) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v36, *(_QWORD *)(v36 + 8), *(_QWORD *)(v36 + 16), *(_QWORD *)(v36 + 24), *(_WORD *)(v36 + 32), *(_BYTE *)(v36 + 34));
  (*(void (**)(unint64_t, uint64_t))(v21 + 8))((v22 + v36 + 35) & v35, v29);
LABEL_15:
  v37 = *(unsigned __int8 *)(v28 + v32);
  if (v37 >= 3)
  {
    if (v32 <= 3)
      v38 = v32;
    else
      v38 = 4;
    __asm { BR              X12 }
  }
  if (v37 == 2)
  {
    v48 = *(_OWORD *)v28;
    v49 = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(v27 + 16) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(v27 + 32) = v49;
    *(_OWORD *)v27 = v48;
    v47 = 2;
  }
  else if (v37 == 1)
  {
    v39 = *(_OWORD *)v28;
    v40 = *(_OWORD *)(v28 + 16);
    *(_DWORD *)(v27 + 31) = *(_DWORD *)(v28 + 31);
    *(_OWORD *)v27 = v39;
    *(_OWORD *)(v27 + 16) = v40;
    v41 = (v27 + 42) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v28 + 42) & 0xFFFFFFFFFFFFFFF8;
    v43 = *(_OWORD *)v42;
    v44 = *(_OWORD *)(v42 + 16);
    *(_DWORD *)(v41 + 31) = *(_DWORD *)(v42 + 31);
    *(_OWORD *)v41 = v43;
    *(_OWORD *)(v41 + 16) = v44;
    v45 = (v22 + 35 + v41) & v35;
    v46 = (v22 + 35 + v42) & v35;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v45, v46, v29);
    *(_BYTE *)(v30 + v45) = *(_BYTE *)(v30 + v46);
    v47 = 1;
  }
  else
  {
    v47 = 0;
    *(_OWORD *)v27 = *(_OWORD *)v28;
  }
  *(_BYTE *)(v27 + v32) = v47;
  return a1;
}

uint64_t getEnumTagSinglePayload for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  unsigned int v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64) + ((v10 + 75) & ~v10);
  v12 = 48;
  if ((unint64_t)(v11 + 1) > 0x30)
    v12 = v11 + 1;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v6 + 80);
  if (a2 <= v8)
    goto LABEL_24;
  v14 = v12
      + (((v10 | 7) + 2) & ~(v10 | 7))
      + (((v10 | 7) + *(_QWORD *)(v6 + 64) + ((v13 + 25) & ~v13)) & ~(v10 | 7))
      + 1;
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v18 < 2)
    {
LABEL_24:
      if (v7 > 0xFE)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v13 + 25) & ~v13, v7, v5);
      v20 = *(unsigned __int8 *)(a1 + 8);
      if (v20 > 1)
        return (v20 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_24;
LABEL_17:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 > 3)
      LODWORD(v14) = 4;
    __asm { BR              X11 }
  }
  return v8 + v19 + 1;
}

void storeEnumTagSinglePayload for WrappedButtonStyleBody.ArchiveBody(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0xFEu)
    v8 = 254;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64) + ((v10 + 75) & ~v10);
  v12 = 48;
  if ((unint64_t)(v11 + 1) > 0x30)
    v12 = v11 + 1;
  v13 = v12
      + (((v10 | 7) + 2) & ~(v10 | 7))
      + (((v10 | 7)
        + *(_QWORD *)(v7 + 64)
        + ((*(unsigned __int8 *)(v7 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(v10 | 7))
      + 1;
  if (a3 <= v8)
  {
    v14 = 0u;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v8 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v8 < a2)
  {
    v15 = ~v8 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

void sub_187532470(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for WrappedButtonStyleBody(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody>, type metadata accessor for _ViewModifier_Content<ArchivableLinkModifier>, (void (*)(uint64_t))type metadata accessor for LinkButtonModifierBody);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableLinkModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ArchivableLinkModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LinkButtonModifierBody and conformance LinkButtonModifierBody, type metadata accessor for LinkButtonModifierBody, (uint64_t)&protocol conformance descriptor for LinkButtonModifierBody);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<ArchivableLinkModifier>(uint64_t a1)
{
  type metadata accessor for _ViewModifier_Content<ArchivableLinkModifier>(a1, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableLinkModifier>, type metadata accessor for ArchivableLinkModifier, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
}

void sub_187532578(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, MEMORY[0x1E0CE5968], MEMORY[0x1E0CE5958], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  v4 = type metadata accessor for ResolvedButtonStyleBody(255, v1, v2, v3);
  type metadata accessor for ButtonBehavior(255, v4, (uint64_t)&protocol witness table for ResolvedButtonStyleBody<A>, v5);
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

uint64_t sub_1875325FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD v4[12];

  v4[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBehavior<A>, v1);
  v4[1] = v4[0];
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v4);
}

uint64_t sub_18753263C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v4 = type metadata accessor for WrappedButtonStyleBody.ArchiveBody(255, *a1, a1[1], a4);
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  v10[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyleBody<A>.ArchiveBody, v4);
  v10[1] = &protocol witness table for ArchivesInteractiveControlsEffect;
  v7 = MEMORY[0x1E0CE2E70];
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v10);
  v9[1] = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl();
  return MEMORY[0x18D75FFDC](v7, v6, v9);
}

_UNKNOWN **base witness table accessor for View in ResolvedButtonStyleBody<A>()
{
  return &protocol witness table for ResolvedButtonStyleBody<A>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in LinkButtonModifierBody()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for ArchivableButtonAppIntentModifier(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
  a1[2] = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
  result = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivableButtonAppIntentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in WrappedButtonStyleBody<A>.ArchiveBody()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Gesture.debugLabel(_:)>>.0(255);
    v3 = v2;
    type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>, MEMORY[0x1E0CE2E88]);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v6 = type metadata accessor for ButtonActionModifier(a1, v3, OpaqueTypeConformance2, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>);
  }
}

void type metadata accessor for <<opaque return type of Gesture.debugLabel(_:)>>.0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.debugLabel(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>();
    v5[0] = v2;
    v5[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>, MEMORY[0x1E0CE2E88]);
    v3 = MEMORY[0x18D75FF88](a1, v5, MEMORY[0x1E0CE76C0], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.debugLabel(_:)>>.0);
  }
}

unint64_t lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonInteractionPhase and conformance ButtonInteractionPhase;
  if (!lazy protocol witness table cache variable for type ButtonInteractionPhase and conformance ButtonInteractionPhase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonInteractionPhase, &type metadata for ButtonInteractionPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonInteractionPhase and conformance ButtonInteractionPhase);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>)
    type metadata accessor for StaticIf();
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonRepeatBehavior.HasCustomRepeatBehavior, &type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonRepeatBehavior.HasCustomRepeatBehavior, &type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonRepeatBehavior.HasCustomRepeatBehavior, &type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonRepeatBehavior.HasCustomRepeatBehavior, &type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonRepeatBehavior.HasCustomRepeatBehavior, &type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t partial apply for closure #1 in ButtonBehavior.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in ButtonBehavior.body.getter(v4 + 32, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for closure #4 in ButtonBehavior.body.getter(char a1)
{
  uint64_t v1;

  return closure #4 in ButtonBehavior.body.getter(a1, v1 + 32, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>;
  if (!lazy protocol witness table cache variable for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _AnimationModifier<ButtonInteractionPhase>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase, (uint64_t)&type metadata for ButtonInteractionPhase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE45E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>);
  }
  return result;
}

uint64_t sub_187532B8C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.effectiveButtonRepeatTiming.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in ButtonBehavior.body.getter(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for ButtonBehavior(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return ButtonBehavior.pressing(_:)(a1, v6);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ButtonBehavior.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for ButtonBehavior(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return ButtonBehavior.ended()(v5, v6, v7, v8);
}

uint64_t sub_187532C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for WrappedButtonStyleBody.ArchiveBody(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)v8, *(_BYTE *)(v8 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v8 + 16), *(_BYTE *)(v8 + 24));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 40), v5);
  v9 = *(int *)(v6 + 44);
  v10 = v8 + v9 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));

LABEL_6:
      swift_release();
      return swift_deallocObject();
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), *(_WORD *)(v10 + 32), *(_BYTE *)(v10 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v10 + 40), *(_QWORD *)(v10 + 48), *(_QWORD *)(v10 + 56), *(_QWORD *)(v10 + 64), *(_WORD *)(v10 + 72), *(_BYTE *)(v10 + 74));
      v12 = v10 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v13 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      return swift_deallocObject();
    case 0:
      goto LABEL_6;
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in WrappedButtonStyleBody.ArchiveBody.temporalStack.getter@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WrappedButtonStyleBody.ArchiveBody(0, v6, v7, a2)
                                      - 8)
                          + 80);
  return closure #1 in WrappedButtonStyleBody.ArchiveBody.temporalStack.getter(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

void specialized ArchivableButtonAppIntentModifier.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;

  v21 = a2;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableButtonAppIntentModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys, (uint64_t)&unk_1E1B02480, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v18 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v10 = v6;
    v28 = 0;
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v22;
    v12 = v23;
    v20 = v25;
    v13 = v26;
    LOBYTE(v22) = 1;
    v27 = v24;
    outlined copy of Environment<AppIntentExecutor?>.Content(v11, v23, v24);
    v19 = (id)v20;
    v14 = v13;
    swift_retain();
    LOBYTE(v13) = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v15 = v27;
    outlined consume of Environment<AppIntentExecutor?>.Content(v11, v12, v27);
    v16 = v14;
    swift_release();

    v17 = v21;
    *v21 = v11;
    v17[1] = v12;
    *((_BYTE *)v17 + 16) = v15;
    *(_OWORD *)(v17 + 3) = v20;
    v17[5] = v16;
    *((_BYTE *)v17 + 48) = v13 & 1;
  }
}

unint64_t lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableButtonAppIntentModifier.CodingKeys, &unk_1E1B02480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableButtonAppIntentModifier.CodingKeys, &unk_1E1B02480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableButtonAppIntentModifier.CodingKeys, &unk_1E1B02480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableButtonAppIntentModifier.CodingKeys, &unk_1E1B02480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys);
  }
  return result;
}

uint64_t sub_1875330A4()
{
  uint64_t v0;

  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ArchivableButtonAppIntentModifier.body(content:)()
{
  uint64_t v0;

  return closure #1 in ArchivableButtonAppIntentModifier.body(content:)(v0 + 16);
}

uint64_t partial apply for closure #2 in ArchivableButtonAppIntentModifier.body(content:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1875330EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for LinkDestination();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_WORD *)(v3 + 32), *(_BYTE *)(v3 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_WORD *)(v3 + 72), *(_BYTE *)(v3 + 74));
  v4 = v3 + *(int *)(v1 + 24);
  v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in LinkButtonModifierBody.body(content:)()
{
  type metadata accessor for LinkDestination();
  LinkDestination.open()();
}

uint64_t partial apply for closure #1 in LinkButtonModifierBody.body(content:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t result;

  *(_BYTE *)a2 = a1;
  result = swift_getKeyPath();
  *(_BYTE *)(a2 + 8) = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_WORD *)(a2 + 24) = 0;
  return result;
}

uint64_t storeEnumTagSinglePayload for ArchivableButtonAppIntentModifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187533260 + 4 * byte_187C3D3CB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187533294 + 4 * byte_187C3D3C6[v4]))();
}

uint64_t sub_187533294(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18753329C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1875332A4);
  return result;
}

uint64_t sub_1875332B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1875332B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1875332BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875332C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ArchivableButtonAppIntentModifier.CodingKeys()
{
  return &unk_1E1B02480;
}

uint64_t assignWithTake for ButtonSpringLoadedInteraction(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t assignWithTake for ButtonRepeatModifier(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  uint64_t v6;
  char v7;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  v4 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  v5 = *(_BYTE *)(a2 + 72);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v5;
  outlined consume of ResolvedTableRowIDs.Storage(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonRepeatModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ButtonRepeatModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ButtonInteractionPhase(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 65282;
    if (a2 + 65282 <= 0xFFFEFFFF)
      v3 = 2;
    else
      v3 = 4;
    if (v2 < 0xFF0000)
      v3 = 1;
    if (v2 >= 0x10000)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1875334B8 + 4 * byte_187C3D3D0[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for ButtonInteractionPhase(_WORD *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 65282;
  if (a3 + 65282 <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187533574 + 4 * byte_187C3D3DA[v5]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_1875335A8 + 4 * byte_187C3D3D5[v5]))();
}

uint64_t sub_1875335A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1875335B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1875335B8);
  return result;
}

uint64_t sub_1875335C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1875335CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1875335D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1875335D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

_WORD *destructiveInjectEnumTag for ButtonInteractionPhase(_WORD *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *result = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonInteractionPhase()
{
  return &type metadata for ButtonInteractionPhase;
}

void sub_187533618()
{
  type metadata accessor for VStack();
  type metadata accessor for StaticIf();
}

uint64_t sub_187533670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>(255);
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _AnimationModifier<ButtonInteractionPhase>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase, (uint64_t)&type metadata for ButtonInteractionPhase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
  v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>();
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  v8 = type metadata accessor for ModifiedContent();
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v2);
  v17 = v1;
  v15[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, &v16);
  v15[1] = &protocol witness table for ButtonActionModifier<A>;
  v9 = MEMORY[0x1E0CE2E70];
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v15);
  v14[1] = lazy protocol witness table accessor for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>();
  v13[0] = MEMORY[0x18D75FFDC](v9, v5, v14);
  v13[1] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v12[0] = MEMORY[0x18D75FFDC](v9, v6, v13);
  v12[1] = lazy protocol witness table accessor for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v11[0] = MEMORY[0x18D75FFDC](v9, v7, v12);
  v11[1] = lazy protocol witness table accessor for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return MEMORY[0x18D75FFDC](v9, v8, v11);
}

void sub_187533838(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(void);

  type metadata accessor for ResolvedButtonStyleBody(255, *a1, a1[1], a4);
  v4 = MEMORY[0x1E0DEAEC8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [Bool], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type External<Bool> and conformance External<A>(&lazy protocol witness table cache variable for type [Bool] and conformance [A], &lazy cache variable for type metadata for [Bool], (uint64_t (*)(_QWORD, uint64_t))v4, MEMORY[0x1E0DEAF50]);
  type metadata accessor for TemporalStack();
}

uint64_t sub_1875338DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[18];

  type metadata accessor for ArchivableLinkModifier(255);
  v1 = type metadata accessor for ModifiedContent();
  v2 = type metadata accessor for _ConditionalContent();
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for _ConditionalContent();
  v12[0] = &protocol witness table for TemporalStack<A, B>;
  v12[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
  v5 = MEMORY[0x1E0CE2E70];
  v11[0] = v0;
  v11[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v12);
  v6 = MEMORY[0x1E0CE4BD0];
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v11);
  v10[0] = &protocol witness table for TemporalStack<A, B>;
  v10[1] = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
  v9[0] = v7;
  v9[1] = MEMORY[0x18D75FFDC](v5, v3, v10);
  return MEMORY[0x18D75FFDC](v6, v4, v9);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>> and conformance ButtonBehavior<A>, (uint64_t (*)(uint64_t))type metadata accessor for ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, (uint64_t)&protocol conformance descriptor for ButtonBehavior<A>);
    v3[1] = lazy protocol witness table accessor for type External<Bool> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8], MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>>);
  }
}

void type metadata accessor for ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableButtonAppIntentModifier> and conformance _ViewModifier_Content<A>, (uint64_t)&protocol witness table for TemporalStateViewModifier<A>);
    v6 = type metadata accessor for ButtonBehavior(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableButtonAppIntentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier, (uint64_t)&type metadata for ArchivableButtonAppIntentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TemporalStateViewModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0CE80E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TemporalStateViewModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableButtonAppIntentModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableButtonAppIntentModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableButtonAppIntentModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableButtonAppIntentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier, (uint64_t)&type metadata for ArchivableButtonAppIntentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableButtonAppIntentModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t sub_187533C94()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ButtonBehavior<StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>> and conformance ButtonBehavior<A>, (uint64_t (*)(uint64_t))type metadata accessor for ButtonBehavior<StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>>, (uint64_t)&protocol conformance descriptor for ButtonBehavior<A>);
}

void type metadata accessor for ButtonBehavior<StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for ButtonBehavior<StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>>)
  {
    v2 = type metadata accessor for StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>();
    v3 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance <> StaticIf<A, B, C>();
    v5 = type metadata accessor for ButtonBehavior(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for ButtonBehavior<StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>>);
  }
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>();
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>)
  {
    type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TemporalStateViewModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0CE80E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TemporalStateViewModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>);
  }
}

void type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>(uint64_t a1)
{
  type metadata accessor for _ViewModifier_Content<ArchivableLinkModifier>(a1, &lazy cache variable for type metadata for _ViewModifier_Content<LinkButtonModifierBody>, type metadata accessor for LinkButtonModifierBody, &lazy protocol witness table cache variable for type LinkButtonModifierBody and conformance LinkButtonModifierBody, (uint64_t)&protocol conformance descriptor for LinkButtonModifierBody);
}

void type metadata accessor for _ViewModifier_Content<ArchivableLinkModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, a5);
    v9 = type metadata accessor for _ViewModifier_Content();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>);
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _ContentShapeModifier<A>);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<LinkButtonModifierBody> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>, MEMORY[0x1E0CE5318]);
    v3[1] = &protocol witness table for TemporalStateViewModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<LinkButtonModifierBody> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonSpringLoadedInteraction()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonRepeatModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonFocusInteractionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in ButtonFocusInteractionModifier.physicalButtonPressGesture.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 32))(1);
}

uint64_t objectdestroy_56Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ButtonFocusInteractionModifier.physicalButtonPressGesture.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 16);
  v2 = (*(uint64_t (**)(_QWORD))(v0 + 32))(0);
  return v1(v2);
}

void partial apply for closure #1 in ButtonRepeatModifier.body(content:)(uint64_t a1, __int16 *a2)
{
  uint64_t v2;

  closure #1 in ButtonRepeatModifier.body(content:)(a1, a2, v2 + 16);
}

uint64_t outlined retain of ButtonRepeatModifier(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;
  id v5;

  v2 = *(void **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE *)(a1 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v5 = v2;
  outlined copy of ResolvedTableRowIDs.Storage(v3, v4);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonRepeatModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonRepeatModifier and conformance ButtonRepeatModifier, (uint64_t)&unk_1E1AD2198, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t outlined init with take of ButtonRepeatModifier.RepeatState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ButtonRepeatModifier.RepeatState?, (uint64_t)&unk_1E1AD2118, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyLocation<ButtonRepeatModifier.RepeatState?>?)
  {
    type metadata accessor for State<ButtonRepeatModifier.RepeatState?>(255, &lazy cache variable for type metadata for AnyLocation<ButtonRepeatModifier.RepeatState?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0EF8]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
  }
}

void type metadata accessor for State<ButtonRepeatModifier.RepeatState?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ButtonRepeatModifier.RepeatState?, (uint64_t)&unk_1E1AD2118, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

id *outlined retain of ButtonRepeatModifier.RepeatState?(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

id *outlined release of ButtonRepeatModifier.RepeatState?(id *a1)
{

  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in ButtonRepeatModifier.body(content:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in ButtonRepeatModifier.body(content:)(v0 + 16);
}

uint64_t objectdestroy_62Tm()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  outlined consume of ResolvedTableRowIDs.Storage(*(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ButtonRepeatModifier.body(content:)(void *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in closure #1 in ButtonRepeatModifier.body(content:)(a1, a2, v2 + 16);
}

uint64_t sub_187534570()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_187534594()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(uint64_t a1)
{
  uint64_t v1;

  specialized closure #1 in static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(void *, uint64_t))(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t outlined release of ButtonRepeatModifier(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  v2 = *(void **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE *)(a1 + 72);
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  outlined consume of ResolvedTableRowIDs.Storage(v3, v4);
  return a1;
}

uint64_t partial apply for closure #2 in ButtonSpringLoadedInteraction.body(content:)()
{
  return closure #2 in ButtonSpringLoadedInteraction.body(content:)();
}

uint64_t partial apply for closure #3 in ButtonSpringLoadedInteraction.body(content:)()
{
  return closure #3 in ButtonSpringLoadedInteraction.body(content:)();
}

uint64_t partial apply for closure #1 in ResolvedButtonStyleBody.StyleBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  _BYTE v12[3];

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[5];
  v8 = (char *)(v7 + *(int *)(type metadata accessor for ResolvedButtonStyleBody(0, v5, v6, a4) + 36));
  v9 = *v8;
  v10 = v8[1];
  LOBYTE(v8) = v8[2];
  v12[0] = v9;
  v12[1] = v10;
  v12[2] = (_BYTE)v8;
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 24))(v12, v5, v6);
}

uint64_t specialized ArchivableButtonAppIntentModifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F69746361 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C62616E457369 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ButtonRepeatModifier.RepeatState(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ButtonRepeatModifier.RepeatState(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ButtonRepeatModifier.RepeatState(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>> and conformance AddGestureModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>, MEMORY[0x1E0CE41B8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>, AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<ButtonFocusInteractionModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ButtonFocusInteractionModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonFocusInteractionModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonFocusInteractionModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonFocusInteractionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier, (uint64_t)&type metadata for ButtonFocusInteractionModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonFocusInteractionModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>();
    v2[0] = &protocol witness table for _FocusableModifier;
    v2[1] = &protocol witness table for FocusEventProxyModifier;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>, _AppearanceActionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE5EF8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonRepeatModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonRepeatModifier and conformance ButtonRepeatModifier, (uint64_t)&unk_1E1AD2198, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ValueActionModifier2<ButtonInteractionPhase>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase, (uint64_t)&type metadata for ButtonInteractionPhase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type _ValueActionModifier2<ButtonInteractionPhase> and conformance _ValueActionModifier2<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ValueActionModifier2<ButtonInteractionPhase> and conformance _ValueActionModifier2<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ValueActionModifier2<ButtonInteractionPhase> and conformance _ValueActionModifier2<A>;
  if (!lazy protocol witness table cache variable for type _ValueActionModifier2<ButtonInteractionPhase> and conformance _ValueActionModifier2<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ValueActionModifier2<ButtonInteractionPhase>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase, (uint64_t)&type metadata for ButtonInteractionPhase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ValueActionModifier2<ButtonInteractionPhase> and conformance _ValueActionModifier2<A>);
  }
  return result;
}

uint64_t sub_187534C6C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonSpringLoadedInteraction>, SpringLoadingInteractionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonSpringLoadedInteraction>, SpringLoadingInteractionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<ButtonSpringLoadedInteraction> and conformance _ViewModifier_Content<A>, (uint64_t)&protocol witness table for SpringLoadingInteractionModifier);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonSpringLoadedInteraction>, SpringLoadingInteractionModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonSpringLoadedInteraction>, SpringLoadingInteractionModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonSpringLoadedInteraction>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction, (uint64_t)&unk_1E1AF92E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonSpringLoadedInteraction>, SpringLoadingInteractionModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ButtonSpringLoadedInteraction> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonSpringLoadedInteraction> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonSpringLoadedInteraction> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonSpringLoadedInteraction>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction, (uint64_t)&unk_1E1AF92E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonSpringLoadedInteraction> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void base witness table accessor for Collection in <> CoalescingAdjacentDuplicates<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> CoalescingAdjacentDuplicates<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> CoalescingAdjacentDuplicates<A>(a1, a2, a3, MEMORY[0x1E0DEA210]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <> CoalescingAdjacentDuplicates<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> CoalescingAdjacentDuplicates<A>(a1, a2, a3, MEMORY[0x1E0DEDE28]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> CoalescingAdjacentDuplicates<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> CoalescingAdjacentDuplicates<A>, a2, &v8);
  return MEMORY[0x18D75FFDC](a4, a1, &v7);
}

uint64_t CoalescingAdjacentDuplicates.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t CoalescingAdjacentDuplicates.endIndex.getter()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t CoalescingAdjacentDuplicates.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, a1, AssociatedTypeWitness);
  return CoalescingAdjacentDuplicates.formIndex(after:)(a3, a2);
}

uint64_t CoalescingAdjacentDuplicates.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(_BYTE *, _QWORD);
  void (*v31)(char *);
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  char *v38;
  void (*v39)(_QWORD, _QWORD, _QWORD);
  uint64_t v40;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *);
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v53;
  uint64_t AssociatedTypeWitness;
  void (*v55)(_QWORD, _QWORD, _QWORD);
  void (*v56)(char *, uint64_t);
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *);
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t (*v67)(char *, char *);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[40];

  v3 = v2;
  v69 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v68 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v6 + 24);
  v73 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v66 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v63 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v53 = (char *)&v53 - v13;
  v70 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v60 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v53 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v53 - v28;
  v30 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v61 = v19;
  v31 = *(void (**)(char *))(v19 + 16);
  v64 = v18;
  v65 = v29;
  v32 = v29;
  v33 = v53;
  v34 = AssociatedTypeWitness;
  v62 = v31;
  v31(v32);
  v30(v74, 0);
  v35 = v70;
  v57 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  v57(v17, v3, v7);
  v71 = v8;
  v72 = a1;
  dispatch thunk of Collection.formIndex(after:)();
  v36 = *(void (**)(char *, uint64_t))(v35 + 8);
  v59 = v17;
  v37 = v17;
  v38 = v25;
  v70 = v7;
  v56 = v36;
  v36(v37, v7);
  v39 = *(void (**)(_QWORD, _QWORD, _QWORD))(v66 + 16);
  v58 = v3;
  v55 = v39;
  v40 = v64;
  v39(v33, v72, v34);
  while (1)
  {
    v41 = v63;
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    v42 = dispatch thunk of static Equatable.== infix(_:_:)();
    v43 = *(void (**)(char *, uint64_t))(v66 + 8);
    v43(v41, v34);
    v43(v33, v34);
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v68, v3, v73);
    v44 = v62;
    ((void (*)(char *, char *, uint64_t))v62)(v38, v65, v40);
    if ((v42 & 1) != 0)
    {
      v51 = *(void (**)(char *, uint64_t))(v61 + 8);
      v51(v38, v40);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v73);
      return ((uint64_t (*)(char *, uint64_t))v51)(v65, v40);
    }
    v45 = v68;
    v67 = *(uint64_t (**)(char *, char *))&v68[*(int *)(v73 + 36)];
    v39(v33, v72, v34);
    swift_retain();
    v46 = dispatch thunk of Collection.subscript.read();
    v47 = v60;
    v44(v60);
    ((void (*)(_BYTE *, _QWORD))v46)(v74, 0);
    v43(v33, v34);
    LOBYTE(v46) = v67(v38, v47);
    swift_release();
    v48 = *(void (**)(char *, uint64_t))(v61 + 8);
    v48(v47, v40);
    v48(v38, v40);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v45, v73);
    if ((v46 & 1) == 0)
      break;
    v3 = v58;
    v49 = v59;
    v50 = v70;
    v57(v59, v58, v70);
    dispatch thunk of Collection.formIndex(after:)();
    v56(v49, v50);
    v39 = v55;
    v55(v33, v72, v34);
  }
  return ((uint64_t (*)(char *, uint64_t))v48)(v65, v64);
}

uint64_t CoalescingAdjacentDuplicates.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v2)(uint64_t *, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  v2 = (uint64_t (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v4, AssociatedTypeWitness);
  return v2(&v7, 0);
}

void (*protocol witness for Collection.subscript.read in conformance CoalescingAdjacentDuplicates<A>(uint64_t **a1))(_QWORD *a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)CoalescingAdjacentDuplicates.subscript.read(v2);
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

void (*CoalescingAdjacentDuplicates.subscript.read(uint64_t *a1))(_QWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  void *v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v3;
  v4 = malloc(*(_QWORD *)(v3 + 64));
  a1[2] = (uint64_t)v4;
  CoalescingAdjacentDuplicates.subscript.getter((uint64_t)v4);
  return CoalescingAdjacentDuplicates.subscript.read;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance CoalescingAdjacentDuplicates<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance CoalescingAdjacentDuplicates<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v14 - v9;
  v11 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v11 + 16))(a2, v2, a1, v8);
  CoalescingAdjacentDuplicates.startIndex.getter();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, a1);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CoalescingAdjacentDuplicates<A>, a1);
  v12 = type metadata accessor for IndexingIterator();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2 + *(int *)(v12 + 36), v10, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CoalescingAdjacentDuplicates<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CoalescingAdjacentDuplicates<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CoalescingAdjacentDuplicates<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for CoalescingAdjacentDuplicates<A>, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t CoalescingAdjacentDuplicates<>.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, a1, AssociatedTypeWitness);
  return CoalescingAdjacentDuplicates<>.formIndex(before:)(a4, a2, a3);
}

uint64_t CoalescingAdjacentDuplicates<>.formIndex(before:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(_BYTE *, _QWORD);
  void (*v26)(char *);
  char *v27;
  char *v28;
  char v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, uint64_t);
  void (*v35)(_BYTE *, _QWORD);
  uint64_t v36;
  char *v37;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  void (*v41)(char *);
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, char *);
  uint64_t v55;
  _BYTE v56[40];

  v4 = v3;
  v51 = a2;
  v52 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v45 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v44 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v53 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v47 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v39 - v15;
  v17 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v42 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v39 - v23;
  dispatch thunk of BidirectionalCollection.formIndex(before:)();
  v55 = v9;
  v25 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v48 = v24;
  v49 = v18;
  v26 = *(void (**)(char *))(v18 + 16);
  v50 = v17;
  v41 = v26;
  v26(v24);
  v25(v56, 0);
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  v40 = a1;
  v39(v16, (uint64_t)a1, AssociatedTypeWitness);
  v46 = *(_QWORD *)(v51 + 24);
  v43 = AssociatedTypeWitness;
  v27 = v42;
  while (1)
  {
    v28 = v47;
    dispatch thunk of Collection.startIndex.getter();
    swift_getAssociatedConformanceWitness();
    v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    v30 = *(void (**)(char *, uint64_t))(v53 + 8);
    v30(v28, AssociatedTypeWitness);
    if ((v29 & 1) != 0)
      break;
    v31 = v44;
    v32 = v45;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v33(v44, v4, v6);
    dispatch thunk of BidirectionalCollection.formIndex(before:)();
    v34 = *(void (**)(char *, uint64_t))(v32 + 8);
    v34(v31, v6);
    v54 = *(uint64_t (**)(char *, char *))(v4 + *(int *)(v51 + 36));
    v33(v31, v4, v6);
    v35 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v36 = v50;
    v41(v27);
    v35(v56, 0);
    v34(v31, v6);
    AssociatedTypeWitness = v43;
    LOBYTE(v31) = v54(v48, v27);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v27, v36);
    if ((v31 & 1) == 0)
      break;
    v37 = v40;
    v30(v40, AssociatedTypeWitness);
    v39(v37, (uint64_t)v16, AssociatedTypeWitness);
  }
  v30(v16, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v48, v50);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> CoalescingAdjacentDuplicates<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  return CoalescingAdjacentDuplicates<>.index(before:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> CoalescingAdjacentDuplicates<A>(char *a1, uint64_t a2, uint64_t a3)
{
  return CoalescingAdjacentDuplicates<>.formIndex(before:)(a1, a2, *(_QWORD *)(a3 - 8));
}

void base witness table accessor for Sequence in CoalescingAdjacentDuplicates<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in CoalescingAdjacentDuplicates<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t getEnumTagSinglePayload for CoalescingAdjacentDuplicates(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187535B2C + 4 * byte_187C3DD40[v10]))();
  }
}

void storeEnumTagSinglePayload for CoalescingAdjacentDuplicates(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187535CA4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187535D1CLL);
}

void sub_187535CAC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187535CB4);
  JUMPOUT(0x187535D1CLL);
}

void sub_187535CF4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187535D1CLL);
}

void sub_187535CFC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187535D1CLL);
}

uint64_t sub_187535D04(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187535D1CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187535D18);
    JUMPOUT(0x187535D10);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for CoalescingAdjacentDuplicates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoalescingAdjacentDuplicates);
}

void CircularGaugeStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CircularGaugeStyle.init(tint:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CircularGaugeStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ComplicationCircularGaugeStyle.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ComplicationCircularGaugeStyle.init(tint:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  type metadata accessor for _ContiguousArrayStorage<Color>();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v4 + 32) = a1;
  v6 = v4;
  specialized Array._endMutation()();
  result = MEMORY[0x18D75BC98](v6);
  *a2 = result;
  return result;
}

uint64_t ComplicationCircularGaugeStyle.init(tint:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ComplicationCircularGaugeStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  char v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  v6 = *((_BYTE *)a1 + 10);
  v7 = *v2;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5;
  *(_WORD *)(a2 + 10) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return swift_bridgeObjectRetain();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in CircularGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in ComplicationCircularGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for GaugeStyle.makeBody(configuration:) in conformance ComplicationCircularGaugeStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  char v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  v6 = *((_BYTE *)a1 + 10);
  v7 = *v2;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5;
  *(_WORD *)(a2 + 10) = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return swift_bridgeObjectRetain();
}

_QWORD *initializeBufferWithCopyOfBuffer for CircularGaugeStyle(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CircularGaugeStyle(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for CircularGaugeStyle(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CircularGaugeStyle()
{
  return &type metadata for CircularGaugeStyle;
}

uint64_t getEnumTagSinglePayload for CircularGaugeStyle(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CircularGaugeStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ComplicationCircularGaugeStyle()
{
  return &type metadata for ComplicationCircularGaugeStyle;
}

uint64_t View.textFieldStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TextFieldStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for TextFieldStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextFieldStyleModifier);
}

void protocol witness for View.body.getter in conformance _TextFieldStyleLabel()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t instantiation function for generic protocol witness table for _TextFieldStyleLabel(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in _TextFieldStyleLabel()
{
  return &protocol witness table for _TextFieldStyleLabel;
}

uint64_t dispatch thunk of TextFieldStyle._body(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for _TextFieldStyleLabel()
{
  return &type metadata for _TextFieldStyleLabel;
}

uint64_t sub_187536220(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for TextFieldStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for TextFieldStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedTextFieldStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unsigned __int8 v45;
  int v46;
  uint64_t v47;
  char *v48;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v5 = v4;
  v6 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v7 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v6 & 0x20000) != 0)
  {
    a1 = v7 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain();
  }
  else
  {
    v47 = v5;
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      v10 = a2[5];
      v11 = a2[6];
      v12 = *((_BYTE *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v11;
      *(_BYTE *)(a1 + 56) = v12;
      *(_QWORD *)(a1 + 64) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    v14 = a2[9];
    v15 = a2[10];
    v16 = a2[11];
    v17 = a2[12];
    v18 = a2[13];
    v19 = a2[14];
    v20 = a2[15];
    v21 = a2[16];
    v39 = a2[17];
    v40 = a2[18];
    v41 = a2[19];
    v42 = a2[20];
    v43 = a2[21];
    v45 = *((_BYTE *)a2 + 178);
    v46 = *((unsigned __int16 *)a2 + 88);
    v44 = *((_BYTE *)a2 + 179);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v20, v21, v39, v40, v41, v42, v43, v46 | (v45 << 16), v44);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = v17;
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)(a1 + 120) = v20;
    *(_QWORD *)(a1 + 128) = v21;
    *(_QWORD *)(a1 + 136) = v39;
    *(_QWORD *)(a1 + 144) = v40;
    *(_QWORD *)(a1 + 152) = v41;
    *(_QWORD *)(a1 + 160) = v42;
    *(_QWORD *)(a1 + 168) = v43;
    *(_BYTE *)(a1 + 178) = v45;
    *(_WORD *)(a1 + 176) = v46;
    *(_BYTE *)(a1 + 179) = v44;
    v22 = *(int *)(v47 + 56);
    v23 = (_QWORD *)(a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    type metadata accessor for Binding<TextSelection?>(0);
    v26 = v25;
    v27 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = v24[1];
      *v23 = *v24;
      v23[1] = v29;
      v30 = *(int *)(v26 + 32);
      v48 = (char *)v23 + v30;
      v31 = (char *)v24 + v30;
      v32 = type metadata accessor for TextSelection(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_retain();
      swift_retain();
      if (v34(v31, 1, v32))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v48, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v36 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v48, v31, v37);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v48, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        v48[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v48, 0, 1, v32);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t destroy for ResolvedTextFieldStyle(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16), *(_BYTE *)(a1 + 179));
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v3 = a1 + *(int *)(v2 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  v5 = v4;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4);
  if (!(_DWORD)result)
  {
    swift_release();
    swift_release();
    v7 = v3 + *(int *)(v5 + 32);
    v8 = type metadata accessor for TextSelection(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
    if (!(_DWORD)result)
    {
      type metadata accessor for TextSelection.Indices(0);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for ResolvedTextFieldStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  int v44;
  char *v45;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 48);
    v9 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v7, v8, v9);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
  }
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a2 + 128);
  v37 = *(_QWORD *)(a2 + 136);
  v38 = *(_QWORD *)(a2 + 144);
  v39 = *(_QWORD *)(a2 + 152);
  v40 = *(_QWORD *)(a2 + 160);
  v41 = *(_QWORD *)(a2 + 168);
  v43 = *(unsigned __int8 *)(a2 + 178);
  v44 = *(unsigned __int16 *)(a2 + 176);
  v42 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v11, v12, v13, v14, v15, v16, v18, v17, v37, v38, v39, v40, v41, v44 | (v43 << 16), v42);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = v37;
  *(_QWORD *)(a1 + 144) = v38;
  *(_QWORD *)(a1 + 152) = v39;
  *(_QWORD *)(a1 + 160) = v40;
  *(_QWORD *)(a1 + 168) = v41;
  *(_BYTE *)(a1 + 178) = v43;
  *(_WORD *)(a1 + 176) = v44;
  *(_BYTE *)(a1 + 179) = v42;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v20 = *(int *)(v19 + 56);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  type metadata accessor for Binding<TextSelection?>(0);
  v24 = v23;
  v25 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = v22[1];
    *v21 = *v22;
    v21[1] = v27;
    v28 = *(int *)(v24 + 32);
    v45 = (char *)v21 + v28;
    v29 = (char *)v22 + v28;
    v30 = type metadata accessor for TextSelection(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_retain();
    swift_retain();
    if (v32(v29, 1, v30))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v45, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v34 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v45, v29, v35);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v45, v29, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      v45[*(int *)(v30 + 20)] = v29[*(int *)(v30 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v45, 0, 1, v30);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithCopy for ResolvedTextFieldStyle(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  int v83;
  int v84;
  char *v85;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v4 = (_OWORD *)(a1 + 40);
  v5 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(_QWORD *)(a2 + 48);
      v9 = *(_BYTE *)(a2 + 56);
      outlined copy of Text.Storage(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_BYTE *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = v8;
      *(_BYTE *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      v16 = *(_OWORD *)(a2 + 56);
      *v4 = *v5;
      *(_OWORD *)(a1 + 56) = v16;
    }
  }
  else if (v6)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 48);
    v15 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v13, v14, v15);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_BYTE *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 56);
    *v4 = *v5;
    *(_OWORD *)(a1 + 56) = v17;
  }
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a2 + 80);
  v20 = *(_QWORD *)(a2 + 88);
  v21 = *(_QWORD *)(a2 + 96);
  v22 = *(_QWORD *)(a2 + 104);
  v23 = *(_QWORD *)(a2 + 112);
  v24 = *(_QWORD *)(a2 + 120);
  v25 = *(_QWORD *)(a2 + 128);
  v77 = *(_QWORD *)(a2 + 136);
  v78 = *(_QWORD *)(a2 + 144);
  v79 = *(_QWORD *)(a2 + 152);
  v80 = *(_QWORD *)(a2 + 160);
  v81 = *(_QWORD *)(a2 + 168);
  v83 = *(unsigned __int16 *)(a2 + 176);
  v84 = *(unsigned __int8 *)(a2 + 178);
  v82 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v18, v19, v20, v21, v22, v23, v24, v25, v77, v78, v79, v80, v81, v83 | (v84 << 16), v82);
  v26 = *(_QWORD *)(a1 + 72);
  v27 = *(_QWORD *)(a1 + 80);
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_QWORD *)(a1 + 96);
  v30 = *(_QWORD *)(a1 + 104);
  v31 = *(_QWORD *)(a1 + 112);
  v32 = *(_QWORD *)(a1 + 120);
  v33 = *(_QWORD *)(a1 + 128);
  v34 = *(_OWORD *)(a1 + 136);
  v35 = *(_OWORD *)(a1 + 152);
  v36 = *(_QWORD *)(a1 + 168);
  v37 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v38 = *(_BYTE *)(a1 + 179);
  *(_QWORD *)(a1 + 72) = v18;
  *(_QWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = v22;
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v25;
  *(_QWORD *)(a1 + 136) = v77;
  *(_QWORD *)(a1 + 144) = v78;
  *(_QWORD *)(a1 + 152) = v79;
  *(_QWORD *)(a1 + 160) = v80;
  *(_QWORD *)(a1 + 168) = v81;
  *(_WORD *)(a1 + 176) = v83;
  *(_BYTE *)(a1 + 178) = v84;
  *(_BYTE *)(a1 + 179) = v82;
  outlined consume of StateOrBinding<TextFieldState>(v26, v27, v28, v29, v30, v31, v32, v33, v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36, v37, v38);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v40 = *(int *)(v39 + 56);
  v41 = (char *)(a1 + v40);
  v42 = (char *)(a2 + v40);
  type metadata accessor for Binding<TextSelection?>(0);
  v44 = v43;
  v45 = *(_QWORD *)(v43 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  LODWORD(v19) = v46(v41, 1, v43);
  v47 = v46(v42, 1, v44);
  if (!(_DWORD)v19)
  {
    if (v47)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v48 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_13;
    }
    *(_QWORD *)v41 = *(_QWORD *)v42;
    swift_retain();
    swift_release();
    *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
    swift_retain();
    swift_release();
    v59 = *(int *)(v44 + 32);
    v60 = &v41[v59];
    v61 = &v42[v59];
    v62 = type metadata accessor for TextSelection(0);
    v63 = *(_QWORD *)(v62 - 8);
    v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
    v65 = v64(v60, 1, v62);
    v66 = v64(v61, 1, v62);
    if (v65)
    {
      if (!v66)
      {
        v67 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v60, v61, v68);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
        }
        v60[*(int *)(v62 + 20)] = v61[*(int *)(v62 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
        return a1;
      }
    }
    else
    {
      if (!v66)
      {
        if (a1 != a2)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v60, type metadata accessor for TextSelection.Indices);
          v75 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v60, v61, v76);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
          }
        }
        v60[*(int *)(v62 + 20)] = v61[*(int *)(v62 + 20)];
        return a1;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v60, type metadata accessor for TextSelection);
    }
    type metadata accessor for TextSelection?(0);
    v50 = *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64);
    v51 = v60;
    v52 = v61;
    goto LABEL_14;
  }
  if (v47)
  {
    v48 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_13:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v48);
    v50 = *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64);
    v51 = v41;
    v52 = v42;
LABEL_14:
    memcpy(v51, v52, v50);
    return a1;
  }
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
  v53 = *(int *)(v44 + 32);
  v85 = &v41[v53];
  v54 = &v42[v53];
  v55 = type metadata accessor for TextSelection(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  swift_retain();
  swift_retain();
  if (v57(v54, 1, v55))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v85, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v69 = v56;
    v70 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      v72 = v85;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v85, v54, v71);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v72 = v85;
      memcpy(v85, v54, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    v72[*(int *)(v55 + 20)] = v54[*(int *)(v55 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v72, 0, 1, v55);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
  return a1;
}

uint64_t initializeWithTake for ResolvedTextFieldStyle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v6 = *(int *)(v5 + 56);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v8[1];
    *v7 = *v8;
    v7[1] = v13;
    v14 = *(int *)(v10 + 32);
    v15 = (char *)v7 + v14;
    v16 = (char *)v8 + v14;
    v17 = type metadata accessor for TextSelection(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v20 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v15, v16, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      v15[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for ResolvedTextFieldStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  if (*(_QWORD *)(a1 + 64))
  {
    v5 = *(_QWORD *)(a2 + 64);
    if (v5)
    {
      v6 = *(_BYTE *)(a2 + 56);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 48);
      v9 = *(_BYTE *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(_QWORD *)(a1 + 64) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  v11 = *(_QWORD *)(a2 + 168);
  v12 = *(_WORD *)(a2 + 176);
  v13 = *(_BYTE *)(a2 + 178);
  v14 = *(_BYTE *)(a2 + 179);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a1 + 112);
  v21 = *(_QWORD *)(a1 + 120);
  v22 = *(_QWORD *)(a1 + 128);
  v23 = *(_OWORD *)(a1 + 136);
  v24 = *(_OWORD *)(a1 + 152);
  v25 = *(_QWORD *)(a1 + 168);
  v26 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v27 = *(_BYTE *)(a1 + 179);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v11;
  *(_BYTE *)(a1 + 178) = v13;
  *(_WORD *)(a1 + 176) = v12;
  *(_BYTE *)(a1 + 179) = v14;
  outlined consume of StateOrBinding<TextFieldState>(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, v26, v27);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v29 = *(int *)(v28 + 56);
  v30 = (char *)(a1 + v29);
  v31 = (char *)(a2 + v29);
  type metadata accessor for Binding<TextSelection?>(0);
  v33 = v32;
  v34 = *(_QWORD *)(v32 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v30, 1, v32);
  v37 = v35(v31, 1, v33);
  if (!v36)
  {
    if (v37)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v38 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_11;
    }
    *(_QWORD *)v30 = *(_QWORD *)v31;
    swift_release();
    *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
    swift_release();
    v50 = *(int *)(v33 + 32);
    v51 = &v30[v50];
    v52 = &v31[v50];
    v53 = type metadata accessor for TextSelection(0);
    v54 = *(_QWORD *)(v53 - 8);
    v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    v56 = v55(v51, 1, v53);
    v57 = v55(v52, 1, v53);
    if (v56)
    {
      if (!v57)
      {
        v58 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v51, v52, v59);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        }
        v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
        return a1;
      }
    }
    else
    {
      if (!v57)
      {
        if (a1 != a2)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, type metadata accessor for TextSelection.Indices);
          v64 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v51, v52, v65);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
          }
        }
        v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
        return a1;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, type metadata accessor for TextSelection);
    }
    type metadata accessor for TextSelection?(0);
    v40 = *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64);
    v41 = v51;
    v42 = v52;
    goto LABEL_12;
  }
  if (v37)
  {
    v38 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_11:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v38);
    v40 = *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64);
    v41 = v30;
    v42 = v31;
LABEL_12:
    memcpy(v41, v42, v40);
    return a1;
  }
  v43 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v43;
  v44 = *(int *)(v33 + 32);
  v45 = &v30[v44];
  v46 = &v31[v44];
  v47 = type metadata accessor for TextSelection(0);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v60 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v45, v46, v61);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    v45[*(int *)(v47 + 20)] = v46[*(int *)(v47 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTextFieldStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187537960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedTextFieldStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1875379C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ResolvedTextFieldStyle()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ResolvedTextFieldStyle;
  if (!type metadata singleton initialization cache for ResolvedTextFieldStyle)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for ResolvedTextFieldStyle()
{
  unint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(319, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t getEnumTagSinglePayload for TextFieldStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187537B9C + 4 * byte_187C3DFC0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TextFieldStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in TextFieldStyleModifier<A>()
{
  return &protocol witness table for TextFieldStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in TextFieldStyleModifier<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedTextFieldStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TextField<_TextFieldStyleLabel>(v1, a1);
}

uint64_t TextFieldStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v20 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v5 + 24))(a1, v6, v5, v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for TextFieldStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextFieldStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextFieldStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedTextFieldStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextFieldStyleModifier<DefaultTextFieldStyle> and conformance TextFieldStyleModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for TextFieldStyleModifier<DefaultTextFieldStyle>, (uint64_t)&protocol conformance descriptor for TextFieldStyleModifier<A>);
}

void type metadata accessor for TextFieldStyleModifier<DefaultTextFieldStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TextFieldStyleModifier<DefaultTextFieldStyle>)
  {
    v2 = lazy protocol witness table accessor for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle();
    v4 = type metadata accessor for TextFieldStyleModifier(a1, (uint64_t)&type metadata for DefaultTextFieldStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TextFieldStyleModifier<DefaultTextFieldStyle>);
  }
}

uint64_t instantiation function for generic protocol witness table for ResolvedTextFieldStyle(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextFieldStyle);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedTextFieldStyle()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextFieldStyle);
  return swift_getOpaqueTypeConformance2();
}

_DWORD *protocol witness for Rule.value.getter in conformance AccessibilityGestureAttachment@<X0>(_DWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t AccessibilityGestureModifier.initialAttachment(for:)(unint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13;

  v12[0] = MEMORY[0x1E0DEE9D8];
  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_24:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
    if (a2)
      goto LABEL_15;
LABEL_25:
    swift_release();
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4)
    goto LABEL_24;
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_29;
  }
  for (i = 0; i != v4; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x18D75E3BC](i, a1);
    else
      v6 = *(id *)(a1 + 8 * i + 32);
    v7 = v6;
    AccessibilityNode.visibility.getter((int *)&v13);
    if ((v13 & 4) != 0 || (v13 & 8) != 0 && (v13 & 0x400000000) == 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  v8 = v12[0];
  if (!a2)
    goto LABEL_25;
LABEL_15:
  if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    v9 = *(_QWORD *)(v8 + 16);
    goto LABEL_18;
  }
LABEL_29:
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
LABEL_18:
  swift_release();
  if (v9 >= 2)
  {
LABEL_26:
    LOBYTE(v13) = 20;
    AccessibilityNullableOptionSet<>.init(removing:)();
    goto LABEL_27;
  }
  if ((a2 | 2) != 3 || v9 != 1)
    return AccessibilityAttachment.init()();
  LOBYTE(v13) = 20;
  AccessibilityNullableOptionSet<>.init(adding:)();
LABEL_27:
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v13 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>(0);
  v12[3] = v11;
  v12[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>();
  specialized Dictionary.subscript.setter((uint64_t)v12, MEMORY[0x1E0CE58B8]);
  v12[0] = v13;
  static AccessibilityAttachment.properties(_:)();
  return swift_bridgeObjectRelease();
}

void AccessibilityGestureModifier.updatedAttachment(for:nodes:atIndex:)(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  id v6;
  void *v7;
  int v8;
  int v9;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x18D75E3BC](a3, a2);
    goto LABEL_5;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10) <= a3)
  {
LABEL_12:
    __break(1u);
    return;
  }
  v6 = *(id *)(a2 + 8 * a3 + 32);
LABEL_5:
  v7 = v6;
  AccessibilityNode.visibility.getter(&v8);

  if ((v8 & 4) != 0 || (v8 & 8) != 0 && (v9 & 4) == 0)
    AccessibilityAttachment.init()();
  else
    AccessibilityGestureModifier.initialAttachment(for:)(a2, a4);
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance AccessibilityGestureModifier(unint64_t a1)
{
  int *v1;

  return AccessibilityGestureModifier.initialAttachment(for:)(a1, *v1);
}

void protocol witness for AccessibilityViewModifier.updatedAttachment(for:nodes:atIndex:) in conformance AccessibilityGestureModifier(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int *v3;

  AccessibilityGestureModifier.updatedAttachment(for:nodes:atIndex:)(a1, a2, a3, *v3);
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityGestureModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

ValueMetadata *type metadata accessor for AccessibilityGestureAttachment()
{
  return &type metadata for AccessibilityGestureAttachment;
}

ValueMetadata *type metadata accessor for AccessibilityGestureModifier()
{
  return &type metadata for AccessibilityGestureModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityGestureModifier()
{
  return &protocol witness table for AccessibilityGestureModifier;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityGestureModifier(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier();
  result = lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

Swift::Void __swiftcall UIKitTabBarItem.updateAccessibility()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;

  if (*(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI15UIKitTabBarItem_resolvedAccessibilityLabel])
    objc_msgSend(v0, sel_setAccessibilityAttributedLabel_);
  v1 = &v0[OBJC_IVAR____TtC7SwiftUI15UIKitTabBarItem_accessibility];
  swift_beginAccess();
  if (*(_QWORD *)v1
    && (v2 = swift_bridgeObjectRetain(),
        specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)&v13),
        swift_bridgeObjectRelease(),
        (v3 = v14) != 0))
  {
    v4 = v13;
    v5 = v15;
    swift_endAccess();
    if (v5 >= 2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = (void *)MEMORY[0x18D75CC88](v4, v3);
      swift_bridgeObjectRelease();
      objc_msgSend(v0, sel_setAccessibilityIdentifier_, v6);

    }
  }
  else
  {
    swift_endAccess();
  }
  v7 = objc_msgSend(v0, sel___view);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v0, sel_accessibilityAttributedLabel);
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v8, sel_setAccessibilityAttributedLabel_, v9);

    }
    v11 = objc_msgSend(v0, sel_accessibilityIdentifier);
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v8, sel_setAccessibilityIdentifier_, v11);

    }
  }
}

uint64_t type metadata accessor for UIKitTabBarItem()
{
  return objc_opt_self();
}

uint64_t EnvironmentValues.sceneAllowsSecureDrawing.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t View.allowsSecureDrawing()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD v12[2];
  char v13;

  type metadata accessor for ViewInputFlagModifier<IsInSecureDrawingHierarchy>(255);
  v4 = type metadata accessor for ModifiedContent();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v12[-1] - v7;
  v9 = lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy();
  View.input<A>(_:)((uint64_t)&type metadata for IsInSecureDrawingHierarchy, a1, (uint64_t)&type metadata for IsInSecureDrawingHierarchy, a2, v9);
  v13 = 1;
  v12[0] = a2;
  v12[1] = &protocol witness table for ViewInputFlagModifier<A>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v12);
  View.preference<A>(key:value:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void type metadata accessor for ViewInputFlagModifier<IsInSecureDrawingHierarchy>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<IsInSecureDrawingHierarchy>)
  {
    v2 = lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for IsInSecureDrawingHierarchy, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInSecureDrawingHierarchy>);
  }
}

unint64_t lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy;
  if (!lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInSecureDrawingHierarchy, &type metadata for IsInSecureDrawingHierarchy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy;
  if (!lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInSecureDrawingHierarchy, &type metadata for IsInSecureDrawingHierarchy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy;
  if (!lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInSecureDrawingHierarchy, &type metadata for IsInSecureDrawingHierarchy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy;
  if (!lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInSecureDrawingHierarchy, &type metadata for IsInSecureDrawingHierarchy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy;
  if (!lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInSecureDrawingHierarchy, &type metadata for IsInSecureDrawingHierarchy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy);
  }
  return result;
}

uint64_t Scene.allowsSecureDrawing(_:)(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD *KeyPath;
  char v8;

  KeyPath = (_QWORD *)swift_getKeyPath();
  v8 = a1;
  Scene.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t sub_187538B2C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.sceneAllowsSecureDrawing.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187538B68()
{
  return EnvironmentValues.sceneAllowsSecureDrawing.setter();
}

uint64_t sub_187538B8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for ViewInputFlagModifier<IsInSecureDrawingHierarchy>(255);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<AllowsSecureDrawingKey>, (uint64_t)&type metadata for AllowsSecureDrawingKey, (uint64_t)&protocol witness table for AllowsSecureDrawingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<AllowsSecureDrawingKey> and conformance _PreferenceWritingModifier<A>();
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<AllowsSecureDrawingKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<AllowsSecureDrawingKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<AllowsSecureDrawingKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<AllowsSecureDrawingKey>, (uint64_t)&type metadata for AllowsSecureDrawingKey, (uint64_t)&protocol witness table for AllowsSecureDrawingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<AllowsSecureDrawingKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187538CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

ValueMetadata *type metadata accessor for SecureDrawingViewGraphFeature()
{
  return &type metadata for SecureDrawingViewGraphFeature;
}

ValueMetadata *type metadata accessor for AllowsSecureDrawingKey()
{
  return &type metadata for AllowsSecureDrawingKey;
}

ValueMetadata *type metadata accessor for IsInSecureDrawingHierarchy()
{
  return &type metadata for IsInSecureDrawingHierarchy;
}

uint64_t EnvironmentValues.sceneAllowsSecureDrawing.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInSecureDrawingHierarchy()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInSecureDrawingHierarchy()
{
  lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy();
  return PropertyList.subscript.setter();
}

char *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AllowsSecureDrawingKey(char *result, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  char *v2;
  int v3;
  char v4;
  uint64_t v5;

  v2 = result;
  v3 = *result;
  if (v3 == 2)
  {
    result = (char *)a2((uint64_t *)((char *)&v5 + 1));
    v4 = BYTE1(v5);
  }
  else if ((v3 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    result = (char *)a2(&v5);
    v4 = v5 & 1;
  }
  *v2 = v4;
  return result;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance SecureDrawingViewGraphFeature()
{
  lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy();
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInSecureDrawingHierarchy()
{
  return &protocol witness table for IsInSecureDrawingHierarchy;
}

ValueMetadata *type metadata accessor for SceneAllowsSecureDrawingKey()
{
  return &type metadata for SceneAllowsSecureDrawingKey;
}

uint64_t EnvironmentValues.multimodalListGridBadgeInfos.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey>, (uint64_t)&type metadata for GridBadgeInfoEnvironmentKey, (uint64_t)&protocol witness table for GridBadgeInfoEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey>, (uint64_t)&type metadata for GridBadgeInfoEnvironmentKey, (uint64_t)&protocol witness table for GridBadgeInfoEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.multimodalListGridBadgeInfos : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multimodalListGridBadgeInfos.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.multimodalListGridBadgeInfos : EnvironmentValues()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_bridgeObjectRelease();
}

SwiftUI::MultimodalListStyle __swiftcall MultimodalListStyle.init(layout:iconStyle:)(SwiftUI::MultimodalListStyle::Layout_optional layout, SwiftUI::MultimodalListStyle::IconStyle iconStyle)
{
  _BYTE *v2;
  char v3;
  SwiftUI::MultimodalListStyle result;

  v3 = *(_BYTE *)iconStyle;
  *v2 = *(_BYTE *)layout.value;
  v2[1] = v3;
  result.layout = layout;
  return result;
}

SwiftUI::MultimodalListStyle::Layout_optional __swiftcall MultimodalListStyle.Layout.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (SwiftUI::MultimodalListStyle::Layout_optional)rawValue;
}

void *static MultimodalListStyle.Layout.allCases.getter()
{
  return &outlined read-only object #0 of static MultimodalListStyle.Layout.allCases.getter;
}

uint64_t MultimodalListStyle.Layout.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance MultimodalListStyle.Layout@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MultimodalListStyle.Layout(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void protocol witness for static CaseIterable.allCases.getter in conformance MultimodalListStyle.Layout(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance MultimodalListStyle.Layout;
}

BOOL static MultimodalListStyle.IconStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void MultimodalListStyle.IconStyle.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int MultimodalListStyle.IconStyle.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static MultimodalListStyle._makeView<A>(value:inputs:)()
{
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  type metadata accessor for _ListValue();
}

uint64_t sub_18753940C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for ModifiedContent<_VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>, StyleContextWriter<MultimodalListContext>>();
  v3 = type metadata accessor for MultimodalListStyle.Body(0, v1, v0, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalListStyle.Body<A>, v3);
  _GraphValue.init<A>(_:)();
  type metadata accessor for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListContext>, MEMORY[0x1E0CE5130], MEMORY[0x1E0CE5120], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  lazy protocol witness table accessor for type _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>> and conformance <> _VariadicView.Tree<A, B>();
  lazy protocol witness table accessor for type StyleContextWriter<MultimodalListContext> and conformance StyleContextWriter<A>();
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t key path getter for EnvironmentValues.multimodalListLayout : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.multimodalListLayout : EnvironmentValues(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.multimodalListLayout.setter((uint64_t)&v2);
}

uint64_t sub_1875396B0(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.multimodalListLayout.setter((uint64_t)&v2);
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>, StyleContextWriter<MultimodalListContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>, StyleContextWriter<MultimodalListContext>>)
  {
    type metadata accessor for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListContext>, MEMORY[0x1E0CE5130], MEMORY[0x1E0CE5120], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>, StyleContextWriter<MultimodalListContext>>);
  }
}

void type metadata accessor for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>, (uint64_t)&type metadata for MultimodalListStyle.IconStyle);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>);
  }
}

uint64_t type metadata accessor for MultimodalListStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultimodalListStyle.Body);
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Root and conformance Root();
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Root and conformance Root()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Root and conformance Root;
  if (!lazy protocol witness table cache variable for type Root and conformance Root)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Root, &unk_1E1B0A488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Root and conformance Root);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Root and conformance Root;
  if (!lazy protocol witness table cache variable for type Root and conformance Root)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Root, &unk_1E1B0A488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Root and conformance Root);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>, (uint64_t)&type metadata for MultimodalListStyle.IconStyle);
    v2 = v1;
    v3[0] = &protocol witness table for ListStyleContent;
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>, (uint64_t)&type metadata for MultimodalListStyle.IconStyle);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<MultimodalListContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListContext>, MEMORY[0x1E0CE5130], MEMORY[0x1E0CE5120], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void static MultimodalListStyle._makeViewList<A>(value:inputs:)()
{
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for _ListValue();
}

uint64_t sub_187539AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for ModifiedContent<_VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>, StyleContextWriter<MultimodalListContext>>();
  v3 = type metadata accessor for MultimodalListStyle.Body(0, v1, v0, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalListStyle.Body<A>, v3);
  _GraphValue.init<A>(_:)();
  type metadata accessor for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListContext>, MEMORY[0x1E0CE5130], MEMORY[0x1E0CE5120], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  lazy protocol witness table accessor for type _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>> and conformance <> _VariadicView.Tree<A, B>();
  lazy protocol witness table accessor for type StyleContextWriter<MultimodalListContext> and conformance StyleContextWriter<A>();
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

void MultimodalListStyle.Body.base.getter()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_187539C3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void MultimodalListStyle.Body.value.getter()
{
  type metadata accessor for _ListValue();
}

void sub_187539CCC(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  MultimodalListStyle.Body.base.getter();
}

void sub_187539D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  AGGraphGetValue();
  closure #1 in MultimodalListStyle.Body.value.getter();
}

void sub_187539D4C()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)(v3 - 96);
  v5 = *(_BYTE *)(v3 - 88);
  *(_BYTE *)v0 = v2;
  *(_BYTE *)(v0 + 1) = v1;
  *(_QWORD *)(v0 + 8) = v4;
  *(_BYTE *)(v0 + 16) = v5;
}

void closure #1 in MultimodalListStyle.Body.value.getter()
{
  type metadata accessor for _ListValue();
}

void sub_187539DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  MultimodalListStyle.Body.base.getter();
}

void sub_187539E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  swift_getKeyPath();
  MultimodalListStyle.Body.base.getter();
}

uint64_t sub_187539E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  char v5;
  uint64_t result;

  v5 = *(_BYTE *)(v2 + 1);
  result = v4(v2, v1);
  *(_QWORD *)v0 = v3;
  *(_BYTE *)(v0 + 8) = v5;
  return result;
}

uint64_t EnvironmentValues.multimodalListIconStyle.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.multimodalListIconStyle.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void protocol witness for Rule.value.getter in conformance MultimodalListStyle.Body<A>()
{
  MultimodalListStyle.Body.value.getter();
}

__n128 GridScrollViewContent.body.getter@<Q0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  double v37;
  double v38;
  double v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __n128 result;
  int v54;
  int v55;
  unsigned __int32 v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  __int128 v65;
  _QWORD v67[5];
  char v68;
  unint64_t v69;
  __int128 v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __n128 v89;
  __int128 v90;
  _OWORD v91[6];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[3];

  v2 = (uint64_t)v1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridItem>, (uint64_t)&type metadata for GridItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_187BF9830;
  v4 = v1[9];
  v96 = v1[8];
  v97[0] = v4;
  *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)((char *)v1 + 153);
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v96, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  v5 = specialized ScaledClarityUIMetric.wrappedValue.getter();
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v96, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  if (one-time initialization token for gridCellSpacing != -1)
    swift_once();
  v6 = static ClarityUIMetrics.gridCellSpacing;
  v7 = static Alignment.top.getter();
  *(double *)(v3 + 32) = v5;
  *(_QWORD *)(v3 + 40) = 0x7FF0000000000000;
  *(_BYTE *)(v3 + 48) = 2;
  *(_QWORD *)(v3 + 56) = v6;
  *(_BYTE *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = v7;
  *(_QWORD *)(v3 + 80) = v8;
  *(_BYTE *)(v3 + 88) = 0;
  v9 = static HorizontalAlignment.center.getter();
  outlined init with copy of _VariadicView_Children(v2, (uint64_t)&v73);
  v69 = v3;
  *(_QWORD *)&v70 = v9;
  *((_QWORD *)&v70 + 1) = v6;
  LOBYTE(v71) = 0;
  v72 = 0;
  lazy protocol witness table accessor for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace();
  AnyHashable.init<A>(_:)();
  v68 = 0;
  outlined init with copy of NamedCoordinateSpace((uint64_t)v67, (uint64_t)v91 + 8);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v69, (uint64_t)&v86, (uint64_t (*)(_QWORD))type metadata accessor for LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>);
  outlined destroy of NamedCoordinateSpace((uint64_t)v67);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v69, (uint64_t (*)(_QWORD))type metadata accessor for LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>);
  v10 = static Edge.Set.horizontal.getter();
  v11 = *(_DWORD *)(v2 + 60);
  v12 = *(_DWORD *)(v2 + 64);
  v13 = *(_DWORD *)(v2 + 68);
  v14 = *(_DWORD *)(v2 + 72);
  v15 = *(_DWORD *)(v2 + 76);
  v17 = *(_DWORD *)(v2 + 80);
  v16 = *(_DWORD *)(v2 + 84);
  v61 = *(_DWORD *)(v2 + 88);
  v63 = v10;
  v57 = *(_DWORD *)(v2 + 96);
  v59 = *(_DWORD *)(v2 + 92);
  v54 = *(_DWORD *)(v2 + 104);
  v55 = *(_DWORD *)(v2 + 100);
  LODWORD(v69) = *(_DWORD *)(v2 + 56);
  LODWORD(v6) = v69;
  HIDWORD(v69) = v11;
  *(_QWORD *)&v70 = __PAIR64__(v13, v12);
  *((_QWORD *)&v70 + 1) = __PAIR64__(v15, v14);
  v71 = v17;
  v72 = v16;
  v73 = v61;
  v74 = v59;
  v75 = v57;
  v76 = v55;
  v77 = v54;
  GeometryProxy.size.getter();
  v19 = v18;
  v69 = __PAIR64__(v11, v6);
  *(_QWORD *)&v70 = __PAIR64__(v13, v12);
  *((_QWORD *)&v70 + 1) = __PAIR64__(v15, v14);
  v71 = v17;
  v72 = v16;
  v73 = v61;
  v74 = v59;
  v75 = v57;
  v76 = v55;
  v77 = v54;
  GeometryProxy.size.getter();
  if (v20 >= v19)
  {
    if (one-time initialization token for gridHorizontalPaddingPortrait == -1)
      goto LABEL_7;
    goto LABEL_15;
  }
  if (one-time initialization token for gridHorizontalPaddingLandscape != -1)
LABEL_15:
    swift_once();
LABEL_7:
  EdgeInsets.init(_all:)();
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v86, (uint64_t)&v69, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>);
  v78 = v63;
  v79 = v22;
  v80 = v24;
  v81 = v26;
  v82 = v28;
  v83 = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v86, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>);
  v30 = *(_DWORD *)(v2 + 60);
  v31 = *(_DWORD *)(v2 + 64);
  v32 = *(_DWORD *)(v2 + 68);
  v33 = *(_DWORD *)(v2 + 72);
  v34 = *(_DWORD *)(v2 + 76);
  v35 = *(_DWORD *)(v2 + 80);
  v36 = *(_DWORD *)(v2 + 84);
  v62 = *(_DWORD *)(v2 + 92);
  v64 = *(_DWORD *)(v2 + 88);
  v58 = *(_DWORD *)(v2 + 100);
  v60 = *(_DWORD *)(v2 + 96);
  v56 = *(_DWORD *)(v2 + 104);
  LODWORD(v86) = *(_DWORD *)(v2 + 56);
  v29 = v86;
  *(_QWORD *)((char *)&v86 + 4) = __PAIR64__(v31, v30);
  HIDWORD(v86) = v32;
  *(_QWORD *)&v87 = __PAIR64__(v34, v33);
  *((_QWORD *)&v87 + 1) = __PAIR64__(v36, v35);
  *(_QWORD *)&v88 = __PAIR64__(v62, v64);
  *((_QWORD *)&v88 + 1) = __PAIR64__(v58, v60);
  v89.n128_u32[0] = v56;
  GeometryProxy.size.getter();
  v38 = v37;
  *(_QWORD *)&v86 = __PAIR64__(v30, v29);
  *((_QWORD *)&v86 + 1) = __PAIR64__(v32, v31);
  *(_QWORD *)&v87 = __PAIR64__(v34, v33);
  *((_QWORD *)&v87 + 1) = __PAIR64__(v36, v35);
  *(_QWORD *)&v88 = __PAIR64__(v62, v64);
  *((_QWORD *)&v88 + 1) = __PAIR64__(v58, v60);
  v89.n128_u32[0] = v56;
  GeometryProxy.size.getter();
  if (v39 >= v38)
  {
    if (one-time initialization token for gridHorizontalPaddingPortrait != -1)
      swift_once();
    v40 = &static ClarityUIMetrics.gridHorizontalPaddingPortrait;
  }
  else
  {
    if (one-time initialization token for gridHorizontalPaddingLandscape != -1)
      swift_once();
    v40 = &static ClarityUIMetrics.gridHorizontalPaddingLandscape;
  }
  v41 = *v40;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v69, (uint64_t)&v86, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>);
  *((_QWORD *)&v92 + 1) = v41;
  LOBYTE(v93) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v69, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>);
  v42 = *(_QWORD *)(v2 + 120);
  v67[0] = *(_QWORD *)(v2 + 112);
  v67[1] = v42;
  type metadata accessor for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>(0, &lazy cache variable for type metadata for State<[MultimodalBadgeInfo]>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  v43 = v69;
  v65 = v70;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v86, (uint64_t)&v69, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>);
  v84 = v43;
  v85 = v65;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v86, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>);
  KeyPath = swift_getKeyPath();
  v45 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)&v86 = *(_QWORD *)(v2 + 112);
  *((_QWORD *)&v86 + 1) = v45;
  State.wrappedValue.getter();
  v46 = v67[0];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v69, (uint64_t)&v86, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>);
  *(_QWORD *)&v95 = KeyPath;
  *((_QWORD *)&v95 + 1) = v46;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v69, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>);
  v47 = v94;
  *(_OWORD *)(a1 + 192) = v93;
  *(_OWORD *)(a1 + 208) = v47;
  *(_OWORD *)(a1 + 224) = v95;
  v48 = v91[4];
  *(_OWORD *)(a1 + 128) = v91[3];
  *(_OWORD *)(a1 + 144) = v48;
  v49 = v92;
  *(_OWORD *)(a1 + 160) = v91[5];
  *(_OWORD *)(a1 + 176) = v49;
  v50 = v91[0];
  *(_OWORD *)(a1 + 64) = v90;
  *(_OWORD *)(a1 + 80) = v50;
  v51 = v91[2];
  *(_OWORD *)(a1 + 96) = v91[1];
  *(_OWORD *)(a1 + 112) = v51;
  v52 = v87;
  *(_OWORD *)a1 = v86;
  *(_OWORD *)(a1 + 16) = v52;
  result = v89;
  *(_OWORD *)(a1 + 32) = v88;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GridScrollViewContent()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>(0);
  type metadata accessor for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>(0, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for OnBadgeInfoChange);
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]> and conformance _EnvironmentKeyWritingModifier<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t MultimodalListGridLabelStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

double MultimodalListGridLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  double result;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  char v16[8];
  double v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  char v22;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v7 = static HorizontalAlignment.center.getter();
  v8 = static HorizontalAlignment.center.getter();
  if (one-time initialization token for gridIconToTextSpacing != -1)
    swift_once();
  v9 = static ClarityUIMetrics.gridIconToTextSpacing;
  v16[0] = v4;
  v22 = v6;
  closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)(v3, v4, v5, v6, (uint64_t)v16);
  v10 = v16[0];
  result = v17;
  v12 = v20;
  v13 = v21;
  v15 = v18;
  v14 = v19;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = v10;
  *(double *)(a1 + 56) = result;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 96) = v12;
  *(_BYTE *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

double closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  double result;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[8];
  double v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v10 = static HorizontalAlignment.center.getter();
  if (one-time initialization token for gridIconToTextSpacing != -1)
    swift_once();
  v11 = static ClarityUIMetrics.gridIconToTextSpacing;
  v18[0] = a2 & 1;
  closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)(a1, a2 & 1, a3, a4 & 1, (uint64_t)v18);
  v12 = v18[0];
  result = v19;
  v14 = v22;
  v15 = v23;
  v17 = v20;
  v16 = v21;
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v11;
  *(_BYTE *)(a5 + 16) = 0;
  *(_BYTE *)(a5 + 24) = v12;
  *(double *)(a5 + 32) = result;
  *(_OWORD *)(a5 + 40) = v17;
  *(_OWORD *)(a5 + 56) = v16;
  *(_QWORD *)(a5 + 72) = v14;
  *(_BYTE *)(a5 + 80) = v15;
  *(_QWORD *)(a5 + 88) = 0;
  *(_BYTE *)(a5 + 96) = 0;
  return result;
}

uint64_t closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v9;
  char v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  char v17;

  v9 = a2 & 1;
  outlined copy of Environment<Bool>.Content(a1, a2 & 1);
  a4 &= 1u;
  outlined copy of Environment<Bool>.Content(a3, a4);
  outlined copy of Environment<Bool>.Content(a1, v9);
  specialized Environment.wrappedValue.getter(a1, v9, &v17);
  outlined consume of Environment<Bool>.Content(a1, v9);
  outlined consume of Environment<Bool>.Content(a1, v9);
  outlined consume of Environment<Bool>.Content(a3, a4);
  v10 = v17;
  outlined copy of Environment<Bool>.Content(a1, v9);
  outlined copy of Environment<Bool>.Content(a3, a4);
  outlined copy of Environment<Bool>.Content(a3, a4);
  v11 = specialized Environment.wrappedValue.getter(a3, a4);
  outlined consume of Environment<Bool>.Content(a3, a4);
  outlined consume of Environment<Bool>.Content(a1, v9);
  outlined consume of Environment<Bool>.Content(a3, a4);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a1;
  *(_BYTE *)(v12 + 24) = v9;
  *(_QWORD *)(v12 + 32) = a3;
  *(_BYTE *)(v12 + 40) = a4;
  outlined copy of Environment<Bool>.Content(a1, v9);
  outlined copy of Environment<Bool>.Content(a3, a4);
  if (one-time initialization token for clarityUIGridCellTitle != -1)
    swift_once();
  v13 = static Font.clarityUIGridCellTitle;
  KeyPath = swift_getKeyPath();
  v15 = swift_getKeyPath();
  *(_BYTE *)a5 = v10;
  *(double *)(a5 + 8) = v11;
  *(_QWORD *)(a5 + 16) = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:);
  *(_QWORD *)(a5 + 24) = v12;
  *(_QWORD *)(a5 + 32) = KeyPath;
  *(_QWORD *)(a5 + 40) = v13;
  *(_QWORD *)(a5 + 48) = v15;
  *(_BYTE *)(a5 + 56) = 1;
  return swift_retain();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  int v9;
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t result;
  char v16;
  _OWORD v17[3];
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v9 = *(_DWORD *)(a1 + 48);
  v19 = a2;
  v10 = a3 & 1;
  v20 = a3 & 1;
  v21 = a4;
  v11 = a5 & 1;
  v22 = a5 & 1;
  v12 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v12;
  v17[2] = *(_OWORD *)(a1 + 32);
  v18 = v9;
  v13 = MultimodalListGridLabelStyle.gridIconFont(geom:)();
  KeyPath = swift_getKeyPath();
  outlined copy of Environment<Bool>.Content(a2, v10);
  outlined copy of Environment<Bool>.Content(a4, v11);
  outlined copy of Environment<Bool>.Content(a2, v10);
  specialized Environment.wrappedValue.getter(a2, v10, v17);
  outlined consume of Environment<Bool>.Content(a2, v10);
  outlined consume of Environment<Bool>.Content(a2, v10);
  result = outlined consume of Environment<Bool>.Content(a4, v11);
  v16 = v17[0];
  *(_QWORD *)a6 = KeyPath;
  *(_QWORD *)(a6 + 8) = v13;
  *(_BYTE *)(a6 + 16) = v16;
  return result;
}

uint64_t MultimodalListGridLabelStyle.gridIconFont(geom:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v6;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_BYTE *)(v0 + 24);
  outlined copy of Environment<Bool>.Content(v1, v2);
  outlined copy of Environment<Bool>.Content(v3, v4);
  outlined copy of Environment<Bool>.Content(v1, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v6);
  outlined consume of Environment<Bool>.Content(v1, v2);
  outlined consume of Environment<Bool>.Content(v1, v2);
  outlined consume of Environment<Bool>.Content(v3, v4);
  if (v6 == 1)
  {
    GeometryProxy.size.getter();
    if (one-time initialization token for buttonHorizontalPadding != -1)
      swift_once();
  }
  else
  {
    GeometryProxy.size.getter();
  }
  return static Font.system(size:weight:design:)();
}

double protocol witness for LabelStyle.makeBody(configuration:) in conformance MultimodalListGridLabelStyle@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  double result;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  double v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v7 = static HorizontalAlignment.center.getter();
  LOBYTE(v18) = v4;
  v28 = v6;
  closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)(v3, v4, v5, v6, (uint64_t)&v18);
  v8 = v19;
  v9 = v20;
  result = v21;
  v11 = v23;
  v12 = v24;
  v13 = v25;
  v14 = v26;
  v15 = v27;
  v16 = v22;
  v17 = v18;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v17;
  *(_BYTE *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  *(double *)(a1 + 56) = result;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 96) = v12;
  *(_BYTE *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  *(_BYTE *)(a1 + 120) = v15;
  return result;
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance GridIconLayout()
{
  return specialized GridIconLayout.sizeThatFits(proposal:subviews:cache:)();
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance GridIconLayout(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return specialized GridIconLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2, a3, a4);
}

uint64_t StackScrollViewContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  char v17;
  int v18;
  uint64_t v19;
  _BYTE v20[88];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  if (one-time initialization token for stackCellSpacing != -1)
    swift_once();
  v3 = static ClarityUIMetrics.stackCellSpacing;
  v4 = static HorizontalAlignment.center.getter();
  outlined init with copy of _VariadicView_Children(v1, (uint64_t)&v19);
  v16[0] = v4;
  v16[1] = v3;
  v17 = 0;
  v18 = 0;
  LOBYTE(v4) = static Edge.Set.horizontal.getter();
  StackScrollViewContent.horizontalPadding.getter();
  EdgeInsets.init(_all:)();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>);
  v20[80] = v4;
  v21 = v6;
  v22 = v8;
  v23 = v10;
  v24 = v12;
  v25 = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>);
  StackScrollViewContent.horizontalPadding.getter();
  v14 = v13;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>);
  *(_QWORD *)(a1 + 128) = v14;
  *(_BYTE *)(a1 + 136) = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>);
}

void StackScrollViewContent.horizontalPadding.getter()
{
  id v0;

  if (one-time initialization token for isPad != -1)
    swift_once();
  if (static ClarityUIMetrics.isPad == 1)
  {
    v0 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
    objc_msgSend(v0, sel_bounds);

    GeometryProxy.size.getter();
  }
  else if (one-time initialization token for componentHorizontalPadding != -1)
  {
    swift_once();
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance StackScrollViewContent()
{
  type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>(0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
  lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, (uint64_t)&protocol witness table for LazyVStack<A>, MEMORY[0x1E0CE2BC0]);
  lazy protocol witness table accessor for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double closure #1 in MultimodalListStackLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  double result;
  uint64_t KeyPath;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  __int128 v23;

  v5 = a2 & 1;
  outlined copy of Environment<Bool>.Content(a1, a2 & 1);
  specialized Environment.wrappedValue.getter(a1, v5, &v19);
  outlined consume of Environment<Bool>.Content(a1, v5);
  v6 = v19;
  KeyPath = swift_getKeyPath();
  v18 = 2;
  type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(0, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E0CE7228]);
  lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
  View.dynamicTypeSize(_:)();
  swift_release();
  v7 = v19;
  v8 = v20;
  v9 = v21;
  v10 = v22;
  outlined copy of Environment<Bool>.Content(a1, v5);
  specialized Environment.wrappedValue.getter(a1, v5, &KeyPath);
  outlined consume of Environment<Bool>.Content(a1, v5);
  v11 = KeyPath;
  outlined copy of Environment<Bool>.Content(a1, v5);
  specialized Environment.wrappedValue.getter(a1, v5, &v19);
  outlined consume of Environment<Bool>.Content(a1, v5);
  if (v19 != 1)
  {
    if (one-time initialization token for stackCircularIconWidth == -1)
      goto LABEL_7;
LABEL_8:
    swift_once();
    goto LABEL_7;
  }
  if (one-time initialization token for stackCircularIconWidth != -1)
    swift_once();
  if (one-time initialization token for buttonHorizontalPadding != -1)
    goto LABEL_8;
LABEL_7:
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v12 = v19;
  v13 = v20;
  v14 = v21;
  v15 = v22;
  *(_BYTE *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v9;
  *(_BYTE *)(a3 + 32) = v10;
  *(_BYTE *)(a3 + 33) = v11;
  *(_QWORD *)(a3 + 40) = v12;
  *(_BYTE *)(a3 + 48) = v13;
  *(_QWORD *)(a3 + 56) = v14;
  *(_BYTE *)(a3 + 64) = v15;
  result = *(double *)&v23;
  *(_OWORD *)(a3 + 72) = v23;
  *(_QWORD *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 96) = 0;
  return result;
}

__n128 protocol witness for LabelStyle.makeBody(configuration:) in conformance MultimodalListStackLabelStyle@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  unsigned __int16 v12;
  unint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  unsigned __int8 v18;
  __n128 result;
  char v20[8];
  unint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  unsigned __int16 v24;
  unint64_t v25;
  unsigned __int8 v26;
  unint64_t v27;
  unsigned __int8 v28;
  __n128 v29;
  unint64_t v30;
  unsigned __int8 v31;
  char v32;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = static VerticalAlignment.center.getter();
  if (one-time initialization token for stackIconToTextSpacing != -1)
    swift_once();
  v7 = static ClarityUIMetrics.stackIconToTextSpacing;
  v20[0] = v4;
  v32 = v5;
  closure #1 in MultimodalListStackLabelStyle.makeBody(configuration:)(v3, v4, (uint64_t)v20);
  v8 = v20[0];
  v9 = v21;
  v10 = v22;
  v11 = v23;
  v12 = v24;
  v13 = v25;
  v14 = v26;
  v15 = v27;
  v16 = v28;
  v17 = v30;
  v18 = v31;
  result = v29;
  a1->n128_u64[0] = v6;
  a1->n128_u64[1] = v7;
  a1[1].n128_u8[0] = 0;
  a1[1].n128_u8[8] = v8;
  a1[2].n128_u64[0] = v9;
  a1[2].n128_u8[8] = v10;
  a1[3].n128_u64[0] = v11;
  a1[3].n128_u16[4] = v12;
  a1[4].n128_u64[0] = v13;
  a1[4].n128_u8[8] = v14;
  a1[5].n128_u64[0] = v15;
  a1[5].n128_u8[8] = v16;
  a1[6] = result;
  a1[7].n128_u64[0] = v17;
  a1[7].n128_u8[8] = v18;
  return result;
}

double EnvironmentValues.fontBodyLeading.getter()
{
  double v1;

  lazy protocol witness table accessor for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey();
  EnvironmentValues.subscript.getter();
  return v1;
}

void protocol witness for static DerivedEnvironmentKey.value(in:) in conformance EnvironmentValues.FontBodyLeadingKey(_QWORD *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  EnvironmentValues.effectiveFont.getter();
  v2 = (void *)Font.platformFont(in:)();
  swift_release();
  CTFontRef.bodyLeading.getter();
  v4 = v3;

  *a1 = v4;
}

double StackIconLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BYTE *v4;
  double v5;
  double v6;

  if (*v4 == 1)
  {
    if ((a4 & 1) != 0)
    {
      if ((a2 & 1) != 0)
        return 0.0;
      else
        return *(double *)&a1;
    }
    else
    {
      if (one-time initialization token for stackCircularIconWidth != -1)
        swift_once();
      v5 = *(double *)&static ClarityUIMetrics.stackCircularIconWidth;
      if (one-time initialization token for buttonHorizontalPadding != -1)
        swift_once();
      return v5 + *(double *)&static ClarityUIMetrics.buttonHorizontalPadding;
    }
  }
  else
  {
    if (one-time initialization token for stackCircularIconWidth != -1)
      swift_once();
    v6 = *(double *)&static ClarityUIMetrics.stackCircularIconWidth;
    if (one-time initialization token for stackCircularIconHeight != -1)
      swift_once();
  }
  return v6;
}

uint64_t StackIconLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unsigned __int8 *v8;
  int v14;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  v14 = *v8;
  swift_bridgeObjectRetain();
  if (!LayoutSubviews.endIndex.getter())
    return swift_bridgeObjectRelease();
  LayoutSubviews.subscript.getter();
  swift_bridgeObjectRelease();
  if (v14 == 1)
  {
    v16.origin.x = a1;
    v16.origin.y = a2;
    v16.size.width = a3;
    v16.size.height = a4;
    CGRectGetWidth(v16);
    if (one-time initialization token for buttonHorizontalPadding != -1)
      swift_once();
    v17.origin.x = a1;
    v17.origin.y = a2;
    v17.size.width = a3;
    v17.size.height = a4;
    CGRectGetHeight(v17);
    if (one-time initialization token for buttonVerticalPadding != -1)
      swift_once();
    v18.origin.x = a1;
    v18.origin.y = a2;
    v18.size.width = a3;
    v18.size.height = a4;
    CGRectGetMidY(v18);
  }
  else
  {
    v19.origin.x = a1;
    v19.origin.y = a2;
    v19.size.width = a3;
    v19.size.height = a4;
    CGRectGetMidY(v19);
    if ((a8 & 1) == 0)
    {
      v20.origin.x = a1;
      v20.origin.y = a2;
      v20.size.width = a3;
      v20.size.height = a4;
      CGRectGetHeight(v20);
    }
  }
  static UnitPoint.leading.getter();
  return LayoutSubview.place(at:anchor:proposal:)();
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance StackIconLayout(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return StackIconLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance StackIconLayout(uint64_t a1, char a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  return StackIconLayout.placeSubviews(in:proposal:subviews:cache:)(a5, a6, a7, a8, a1, a2 & 1, a3, a4 & 1);
}

uint64_t closure #1 in Root.body(children:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v6;
  char v7;
  _OWORD v9[3];
  int v10;

  v6 = *(_OWORD *)(a1 + 16);
  v7 = a2 & 1;
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  v9[2] = *(_OWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 48);
  *(_WORD *)(a4 + 176) = 258;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_BYTE *)(a4 + 216) = 2;
  *(_QWORD *)(a4 + 248) = 0;
  *(_QWORD *)(a4 + 224) = 0;
  *(_QWORD *)(a4 + 232) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a4 + 288) = 0;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  return closure #1 in closure #1 in Root.body(children:)(v7, a3, (uint64_t)v9, a4);
}

uint64_t closure #1 in closure #1 in Root.body(children:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  __int128 v11;
  _OWORD v12[3];
  _BYTE v13[64];
  __int128 v14;
  __int128 v15;
  _BYTE v16[25];
  _OWORD v17[3];
  _BYTE v18[64];
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];

  if ((a1 & 1) != 0)
  {
    outlined init with copy of _VariadicView_Children(a2, (uint64_t)v17);
    v11 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v18[8] = *(_OWORD *)a3;
    *(_OWORD *)&v18[24] = v11;
    *(_OWORD *)&v18[40] = *(_OWORD *)(a3 + 32);
    *(_DWORD *)&v18[56] = *(_DWORD *)(a3 + 48);
    outlined init with copy of StackScrollViewContent((uint64_t)v17, a4);
    *(_BYTE *)(a4 + 169) = 1;
    return outlined destroy of StackScrollViewContent((uint64_t)v17);
  }
  else
  {
    outlined init with copy of _VariadicView_Children(a2, (uint64_t)v12);
    v6 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v13[8] = *(_OWORD *)a3;
    *(_OWORD *)&v13[24] = v6;
    *(_OWORD *)&v13[40] = *(_OWORD *)(a3 + 32);
    *(_DWORD *)&v13[56] = *(_DWORD *)(a3 + 48);
    v14 = MEMORY[0x1E0DEE9D8];
    if (one-time initialization token for defaultGridCellMinWidth != -1)
      swift_once();
    v7 = static ClarityUIMetrics.defaultGridCellMinWidth;
    KeyPath = swift_getKeyPath();
    v9 = swift_getKeyPath();
    *(_QWORD *)&v15 = KeyPath;
    BYTE8(v15) = 0;
    *(_QWORD *)v16 = v9;
    v16[8] = 0;
    *(_QWORD *)&v16[16] = v7;
    v16[24] = 6;
    *(_OWORD *)&v18[16] = *(_OWORD *)&v13[16];
    *(_OWORD *)&v18[32] = *(_OWORD *)&v13[32];
    *(_OWORD *)&v18[48] = *(_OWORD *)&v13[48];
    v19 = v14;
    v17[0] = v12[0];
    v17[1] = v12[1];
    v17[2] = v12[2];
    *(_OWORD *)v18 = *(_OWORD *)v13;
    v20 = v15;
    v21[0] = *(_OWORD *)v16;
    *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)&v16[9];
    outlined init with copy of GridScrollViewContent((uint64_t)v17, a4);
    *(_BYTE *)(a4 + 169) = 0;
    return outlined destroy of GridScrollViewContent((uint64_t)v17);
  }
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance Root()
{
  lazy protocol witness table accessor for type Root and conformance Root();
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance Root@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v4 = v2[1];
  if (*v2 == 2)
    v5 = v2[1];
  else
    v5 = *v2;
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v11);
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = v5 & 1;
  v7 = v11[1];
  *(_OWORD *)(v6 + 24) = v11[0];
  *(_OWORD *)(v6 + 40) = v7;
  *(_OWORD *)(v6 + 56) = v11[2];
  *(_QWORD *)(v6 + 72) = v12;
  result = static Animation.default.getter();
  v9 = result;
  if (one-time initialization token for listTitleBottomPadding != -1)
    result = swift_once();
  v10 = static ClarityUIMetrics.listTitleBottomPadding;
  *(_QWORD *)a2 = partial apply for closure #1 in Root.body(children:);
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v10;
  *(_BYTE *)(a2 + 40) = 0;
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance GridBadgeInfoEnvironmentKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static GridBadgeInfoEnvironmentKey.defaultValue;
  return swift_bridgeObjectRetain();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance GridBadgeInfoEnvironmentKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t IconContainerView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  _QWORD v54[2];
  char v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[3];

  v51 = a2;
  type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>();
  v4 = MEMORY[0x1E0CE7170];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  v5 = type metadata accessor for ModifiedContent();
  v61[0] = *(_QWORD *)(a1 + 24);
  v61[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, v4);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v61);
  v52 = type metadata accessor for _OverlayModifier();
  v6 = type metadata accessor for ModifiedContent();
  v48 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v47 - v12;
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ClipEffect<IconShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconShape and conformance IconShape, (uint64_t)&unk_1E1B0D1E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
  v14 = type metadata accessor for ModifiedContent();
  v47 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v47 - v20;
  v22 = type metadata accessor for _ConditionalContent();
  v49 = *(_QWORD *)(v22 - 8);
  v50 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v47 - v24;
  v26 = *(unsigned __int8 *)(v2 + *(int *)(a1 + 36));
  IconContainerView.styledIcon.getter(a1);
  if (v26 > 1)
  {
    v34 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, TintShapeStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>, MEMORY[0x1E0CE0E50]);
    v35 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3620], v52);
    v60[0] = v34;
    v60[1] = v35;
    v36 = MEMORY[0x1E0CE2E70];
    v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v60);
    static ViewBuilder.buildExpression<A>(_:)(v9, v6, v37);
    v38 = *(void (**)(char *, uint64_t))(v48 + 8);
    v38(v9, v6);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v13, v6, (uint64_t)v9);
    v39 = lazy protocol witness table accessor for type _ClipEffect<IconShape> and conformance _ClipEffect<A>();
    v59[0] = v37;
    v59[1] = v39;
    MEMORY[0x18D75FFDC](v36, v14, v59);
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v9, v14, v6);
    v38(v9, v6);
    v38(v13, v6);
  }
  else
  {
    v55 = v26;
    v27 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, TintShapeStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>, MEMORY[0x1E0CE0E50]);
    v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3620], v52);
    v54[0] = v27;
    v54[1] = v28;
    v29 = MEMORY[0x1E0CE2E70];
    v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v54);
    lazy protocol witness table accessor for type IconShape and conformance IconShape();
    View.clipShape<A>(_:style:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v6);
    v31 = lazy protocol witness table accessor for type _ClipEffect<IconShape> and conformance _ClipEffect<A>();
    v53[0] = v30;
    v53[1] = v31;
    v32 = MEMORY[0x18D75FFDC](v29, v14, v53);
    static ViewBuilder.buildExpression<A>(_:)(v17, v14, v32);
    v33 = *(void (**)(char *, uint64_t))(v47 + 8);
    v33(v17, v14);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, v14, (uint64_t)v17);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v17, v14);
    v33(v17, v14);
    v33(v21, v14);
  }
  v40 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, TintShapeStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>, MEMORY[0x1E0CE0E50]);
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3620], v52);
  v58[0] = v40;
  v58[1] = v41;
  v42 = MEMORY[0x1E0CE2E70];
  v43 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v58);
  v44 = lazy protocol witness table accessor for type _ClipEffect<IconShape> and conformance _ClipEffect<A>();
  v57[0] = v43;
  v57[1] = v44;
  v56[0] = MEMORY[0x18D75FFDC](v42, v14, v57);
  v56[1] = v43;
  v45 = v50;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v50, v56);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v25, v45, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v25, v45);
}

uint64_t IconContainerView.styledIcon.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v11[2];
  __int16 v12;

  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  v2 = type metadata accessor for ModifiedContent();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v11[-1] - v5;
  v12 = 256;
  static Color.white.getter();
  v7 = *(_QWORD *)(a1 + 24);
  View.foregroundColor(_:)();
  swift_release();
  static Alignment.center.getter();
  type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, TintShapeStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>, MEMORY[0x1E0CE0E50]);
  v8 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  v11[0] = v7;
  v11[1] = v8;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v11);
  View.overlay<A>(_:alignment:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t protocol witness for Shape.path(in:) in conformance IconShape@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  char v6;

  if (!*v1)
  {
    result = Circle.path(in:)();
LABEL_5:
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 32) = v6;
    return result;
  }
  if (*v1 == 1)
  {
    result = Rectangle.path(in:)();
    goto LABEL_5;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for View.body.getter in conformance IconShape(uint64_t a1@<X8>)
{
  _BYTE *v1;

  *(_BYTE *)a1 = *v1;
  *(_WORD *)(a1 + 1) = 256;
}

uint64_t static OnBadgeInfoChange._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  unint64_t v31;
  uint64_t result;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v48;
  unint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  _BYTE v55[12];
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  unint64_t v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v33 = *a1;
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 24);
  v8 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_DWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 60);
  v15 = *(_DWORD *)(a2 + 64);
  v16 = *(_DWORD *)(a2 + 68);
  v18 = *(_DWORD *)(a2 + 72);
  v17 = *(_DWORD *)(a2 + 76);
  v19 = *(_DWORD *)(a2 + 80);
  v62 = v4;
  v44 = v7;
  v45 = v5;
  v63 = v5;
  v64 = v6;
  *(_QWORD *)&v65 = __PAIR64__(v8, v7);
  v42 = v9;
  v43 = v8;
  *((_QWORD *)&v65 + 1) = __PAIR64__(v10, v9);
  v40 = v13;
  v41 = v10;
  v66 = v11;
  v67 = v12;
  *(_QWORD *)&v68 = __PAIR64__(v14, v13);
  v38 = v15;
  v39 = v14;
  *((_QWORD *)&v68 + 1) = __PAIR64__(v16, v15);
  v36 = v18;
  v37 = v16;
  v69 = __PAIR64__(v17, v18);
  v34 = v19;
  v35 = v17;
  v70 = v19;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<MultimodalBadgeInfoKey>, (uint64_t)&type metadata for MultimodalBadgeInfoKey, (uint64_t)&protocol witness table for MultimodalBadgeInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<MultimodalBadgeInfoKey> and conformance _AnyPreferenceKey<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  v53 = v4;
  v54 = v63;
  *(_QWORD *)&v55[4] = v6;
  v56 = v65;
  v57 = v11;
  v58 = v12;
  v59 = v68;
  v60 = v69;
  v61 = v70;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  a3(&v50, v20, &v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v21 = v50;
  v53 = v50;
  v48 = v51;
  v54 = v51;
  *(_DWORD *)v55 = v52;
  v46 = v52;
  v22 = _ViewOutputs.subscript.getter();
  if ((v22 & 0x100000000) == 0)
  {
    v23 = v22;
    LODWORD(v53) = v33;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<OnBadgeInfoChange>, (uint64_t)&unk_1E1AC5CF8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    v24 = _GraphValue.value.getter();
    v25 = v6;
    v26 = v21;
    v27 = v24;
    v53 = v4;
    v54 = v45;
    *(_QWORD *)&v55[4] = v25;
    *(_QWORD *)&v56 = __PAIR64__(v43, v44);
    *((_QWORD *)&v56 + 1) = __PAIR64__(v41, v42);
    v57 = v11;
    v58 = v12;
    *(_QWORD *)&v59 = __PAIR64__(v39, v40);
    *((_QWORD *)&v59 + 1) = __PAIR64__(v37, v38);
    v60 = __PAIR64__(v35, v36);
    v61 = v34;
    v28 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    v29 = v54;
    v30 = v55[0];
    v31 = v53;
    v53 = __PAIR64__(v23, v27);
    v21 = v26;
    v54 = v28;
    *(_QWORD *)v55 = v31;
    *(_DWORD *)&v55[8] = v29;
    LOBYTE(v56) = v30;
    DWORD1(v56) = 0;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type BadgeInfoActionBinding and conformance BadgeInfoActionBinding();
    Attribute.init<A>(body:value:flags:update:)();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v48;
  *(_DWORD *)(a4 + 12) = v46;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance OnBadgeInfoChange()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t *BadgeInfoActionBinding.updateValue()()
{
  uint64_t v0;
  int v1;
  uint64_t *result;
  char v3;
  uint64_t v4;
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v1 != *(_DWORD *)(v0 + 28))
  {
    *(_DWORD *)(v0 + 28) = v1;
    *(_QWORD *)(v0 + 16) = 0xFFFFFFFFLL;
    *(_BYTE *)(v0 + 24) = 0;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [MultimodalBadgeInfo], (uint64_t)&type metadata for MultimodalBadgeInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = (uint64_t *)AGGraphGetValue();
  if ((v3 & 1) != 0)
  {
    v4 = *result;
    swift_bridgeObjectRetain();
    if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
    {
      AGGraphClearUpdate();
      Value = (uint64_t *)AGGraphGetValue();
      v6 = *Value;
      v7 = Value[1];
      v8 = Value[2];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      AGGraphSetUpdate();
      v9 = (_QWORD *)swift_allocObject();
      v9[2] = v6;
      v9[3] = v7;
      v9[4] = v8;
      v9[5] = v4;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      static Update.enqueueAction(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return (uint64_t *)swift_release();
    }
    else
    {
      return (uint64_t *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

unint64_t implicit closure #1 in BadgeInfoActionBinding.updateValue()()
{
  return 0xD000000000000021;
}

uint64_t closure #2 in BadgeInfoActionBinding.updateValue()()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout;
  if (!lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalListStyle.Layout, &type metadata for MultimodalListStyle.Layout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout;
  if (!lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalListStyle.Layout, &type metadata for MultimodalListStyle.Layout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [MultimodalListStyle.Layout] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [MultimodalListStyle.Layout] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MultimodalListStyle.Layout] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [MultimodalListStyle.Layout], (uint64_t)&type metadata for MultimodalListStyle.Layout, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [MultimodalListStyle.Layout] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalListStyle.IconStyle and conformance MultimodalListStyle.IconStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalListStyle.IconStyle and conformance MultimodalListStyle.IconStyle;
  if (!lazy protocol witness table cache variable for type MultimodalListStyle.IconStyle and conformance MultimodalListStyle.IconStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalListStyle.IconStyle, &type metadata for MultimodalListStyle.IconStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStyle.IconStyle and conformance MultimodalListStyle.IconStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in MultimodalListGridLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for MultimodalListStyle(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  if (*(unsigned __int8 *)a1 <= 2u)
    v6 = 2;
  else
    v6 = *(unsigned __int8 *)a1;
  v7 = v6 - 3;
  if (*(unsigned __int8 *)a1 < 2u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MultimodalListStyle(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18753CC30 + 4 * byte_187C3E585[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_18753CC64 + 4 * byte_187C3E580[v4]))();
}

uint64_t sub_18753CC64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_18753CC6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x18753CC74);
  return result;
}

uint64_t sub_18753CC80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x18753CC88);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18753CC8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_18753CC94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MultimodalListStyle()
{
  return &type metadata for MultimodalListStyle;
}

uint64_t storeEnumTagSinglePayload for MultimodalListStyle.Layout(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18753CCFC + 4 * byte_187C3E58F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18753CD30 + 4 * byte_187C3E58A[v4]))();
}

uint64_t sub_18753CD30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18753CD38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18753CD40);
  return result;
}

uint64_t sub_18753CD4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18753CD54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18753CD58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18753CD60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MultimodalListStyle.IconStyle()
{
  return &type metadata for MultimodalListStyle.IconStyle;
}

ValueMetadata *type metadata accessor for MultimodalListGridLabelStyle()
{
  return &type metadata for MultimodalListGridLabelStyle;
}

uint64_t sub_18753CDA8()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>>, MEMORY[0x1E0CE74B8]);
}

void type metadata accessor for VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer));
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer));
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>>);
  }
}

void type metadata accessor for (VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer))
  {
    type metadata accessor for VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer));
  }
}

void type metadata accessor for VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (void (*)(uint64_t))type metadata accessor for (_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>));
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (void (*)(uint64_t))type metadata accessor for (_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>));
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>);
  }
}

void type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for TupleView();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for (_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>))
  {
    type metadata accessor for _VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>();
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>));
  }
}

void type metadata accessor for _VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<GridIconLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type GridIconLayout and conformance GridIconLayout, (uint64_t)&unk_1E1AB8150, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    type metadata accessor for GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>(255, &lazy cache variable for type metadata for GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>, (uint64_t (*)(uint64_t))type metadata accessor for IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>, &lazy protocol witness table cache variable for type IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>> and conformance IconContainerView<A>, (uint64_t)&protocol conformance descriptor for IconContainerView<A>);
    lazy protocol witness table accessor for type _LayoutRoot<GridIconLayout> and conformance _LayoutRoot<A>();
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>);
  }
}

unint64_t lazy protocol witness table accessor for type GridIconLayout and conformance GridIconLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout;
  if (!lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GridIconLayout, &unk_1E1AB8150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout;
  if (!lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GridIconLayout, &unk_1E1AB8150);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout);
  }
  return result;
}

void type metadata accessor for IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for IconContainerView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>);
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v3 = type metadata accessor for ModifiedContent();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>);
    v2 = v1;
    v3[0] = &protocol witness table for LabelStyleConfiguration.Icon;
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for IconContainerView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IconContainerView);
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<GridIconLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutRoot<GridIconLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<GridIconLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<GridIconLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type GridIconLayout and conformance GridIconLayout, (uint64_t)&unk_1E1AB8150, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE14B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<GridIconLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>);
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for IconContainerView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IconContainerView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFD)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      if (v15 >= 3)
        return v15 - 2;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18753D504 + 4 * byte_187C3E594[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for IconContainerView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t getEnumTagSinglePayload for GridIconLayout(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[16])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GridIconLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

void *type metadata accessor for GridIconLayout()
{
  return &unk_1E1AB8150;
}

ValueMetadata *type metadata accessor for MultimodalListStackLabelStyle()
{
  return &type metadata for MultimodalListStackLabelStyle;
}

uint64_t getEnumTagSinglePayload for Root(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Root(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18753D8BC + 4 * byte_187C3E5A7[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_18753D8F0 + 4 * byte_187C3E5A2[v4]))();
}

uint64_t sub_18753D8F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_18753D8F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x18753D900);
  return result;
}

uint64_t sub_18753D90C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x18753D914);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_18753D918(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_18753D920(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

void *type metadata accessor for Root()
{
  return &unk_1E1B0A488;
}

unint64_t instantiation function for generic protocol witness table for Root(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type Root and conformance Root();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in IconContainerView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for GridIconLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GridIconLayout and conformance GridIconLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in MultimodalListStackLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in Root()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in MultimodalListStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_18753DA2C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Root.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Root.body(children:)(a1, *(_BYTE *)(v2 + 16), v2 + 24, a2);
}

uint64_t outlined init with copy of StackScrollViewContent(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for StackScrollViewContent(a2, a1);
  return a2;
}

uint64_t outlined destroy of StackScrollViewContent(uint64_t a1)
{
  destroy for DataSource(a1);
  return a1;
}

uint64_t outlined init with copy of GridScrollViewContent(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for GridScrollViewContent(a2, a1);
  return a2;
}

uint64_t outlined destroy of GridScrollViewContent(uint64_t a1)
{
  destroy for GridScrollViewContent(a1);
  return a1;
}

void type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v5 = type metadata accessor for ModifiedContent();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = MEMORY[0x1E0CE7228];
    type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E0CE7228]);
    v3 = v2;
    v4[0] = &protocol witness table for LabelStyleConfiguration.Icon;
    v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, v1);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

double specialized GridIconLayout.sizeThatFits(proposal:subviews:cache:)()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  double v7;
  id v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double Width;
  double v18;
  uint64_t *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v28;
  double v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  v1 = type metadata accessor for FloatingPointRoundingRule();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(unsigned __int8 *)v0;
  v7 = v0[1];
  v8 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  objc_msgSend(v8, sel_bounds);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;

  v30.origin.x = v10;
  v30.origin.y = v12;
  v30.size.width = v14;
  v30.size.height = v16;
  Width = CGRectGetWidth(v30);
  v31.origin.x = v10;
  v31.origin.y = v12;
  v31.size.width = v14;
  v31.size.height = v16;
  v18 = CGRectGetWidth(v31);
  v32.origin.x = v10;
  v32.origin.y = v12;
  v32.size.width = v14;
  v32.size.height = v16;
  if (CGRectGetHeight(v32) >= v18)
  {
    if (one-time initialization token for gridHorizontalPaddingPortrait != -1)
      swift_once();
    v19 = &static ClarityUIMetrics.gridHorizontalPaddingPortrait;
  }
  else
  {
    if (one-time initialization token for gridHorizontalPaddingLandscape != -1)
      swift_once();
    v19 = &static ClarityUIMetrics.gridHorizontalPaddingLandscape;
  }
  v20 = *(double *)v19 + *(double *)v19;
  if (one-time initialization token for gridCellSpacing != -1)
    swift_once();
  v21 = Width - v20;
  v22 = *(double *)&static ClarityUIMetrics.gridCellSpacing;
  if (one-time initialization token for defaultGridCellMinWidth != -1)
    swift_once();
  v23 = floor((v21 + v22) / (v22 + *(double *)&static ClarityUIMetrics.defaultGridCellMinWidth));
  v24 = (v21 - v22 * (v23 + -1.0)) / v23;
  if (one-time initialization token for buttonHorizontalPadding != -1)
    swift_once();
  v25 = v24
      - (*(double *)&static ClarityUIMetrics.buttonHorizontalPadding
       + *(double *)&static ClarityUIMetrics.buttonHorizontalPadding);
  v26 = v25;
  if (v6 == 1)
  {
    if (one-time initialization token for buttonVerticalPadding != -1)
      swift_once();
    v26 = v25 + *(double *)&static ClarityUIMetrics.buttonVerticalPadding;
  }
  v28 = v26;
  v29 = v25;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E0DED4F0], v1);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v5, v7);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v5, v7);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v29;
}

uint64_t specialized GridIconLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  unsigned __int8 *v4;
  int v9;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  v9 = *v4;
  swift_bridgeObjectRetain();
  if (!LayoutSubviews.endIndex.getter())
    return swift_bridgeObjectRelease();
  LayoutSubviews.subscript.getter();
  swift_bridgeObjectRelease();
  if (v9 == 1)
  {
    v11.origin.x = a1;
    v11.origin.y = a2;
    v11.size.width = a3;
    v11.size.height = a4;
    CGRectGetWidth(v11);
    if (one-time initialization token for buttonHorizontalPadding != -1)
      swift_once();
    v12.origin.x = a1;
    v12.origin.y = a2;
    v12.size.width = a3;
    v12.size.height = a4;
    CGRectGetHeight(v12);
    if (one-time initialization token for buttonVerticalPadding != -1)
      swift_once();
  }
  v13.origin.x = a1;
  v13.origin.y = a2;
  v13.size.width = a3;
  v13.size.height = a4;
  CGRectGetMidX(v13);
  static UnitPoint.top.getter();
  return LayoutSubview.place(at:anchor:proposal:)();
}

void type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, TintShapeStyle>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, TintShapeStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type IconShape and conformance IconShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IconShape and conformance IconShape;
  if (!lazy protocol witness table cache variable for type IconShape and conformance IconShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IconShape, &unk_1E1B0D1E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IconShape and conformance IconShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IconShape and conformance IconShape;
  if (!lazy protocol witness table cache variable for type IconShape and conformance IconShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IconShape, &unk_1E1B0D1E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IconShape and conformance IconShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IconShape and conformance IconShape;
  if (!lazy protocol witness table cache variable for type IconShape and conformance IconShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IconShape, &unk_1E1B0D1E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IconShape and conformance IconShape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ClipEffect<IconShape> and conformance _ClipEffect<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ClipEffect<IconShape> and conformance _ClipEffect<A>;
  if (!lazy protocol witness table cache variable for type _ClipEffect<IconShape> and conformance _ClipEffect<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ClipEffect<IconShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconShape and conformance IconShape, (uint64_t)&unk_1E1B0D1E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1450], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<IconShape> and conformance _ClipEffect<A>);
  }
  return result;
}

uint64_t sub_18753E288()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)(a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), a2);
}

ValueMetadata *type metadata accessor for IconStyleKey()
{
  return &type metadata for IconStyleKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FontBodyLeadingKey()
{
  return &type metadata for EnvironmentValues.FontBodyLeadingKey;
}

uint64_t initializeWithCopy for StackScrollViewContent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  id v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StackScrollViewContent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy108_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 92) = *(__int128 *)((char *)a2 + 92);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for StackScrollViewContent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackScrollViewContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 108))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StackScrollViewContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 108) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 108) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for StackScrollViewContent()
{
  return &unk_1E1ADE2A0;
}

uint64_t destroy for GridScrollViewContent(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 128), *(_BYTE *)(a1 + 136));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 144), *(_BYTE *)(a1 + 152));
}

uint64_t initializeWithCopy for GridScrollViewContent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  uint64_t v11;
  char v12;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  v8 = *(_QWORD *)(a2 + 128);
  v9 = *(_BYTE *)(a2 + 136);
  v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 128) = v8;
  *(_BYTE *)(a1 + 136) = v9;
  v11 = *(_QWORD *)(a2 + 144);
  v12 = *(_BYTE *)(a2 + 152);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(_QWORD *)(a1 + 144) = v11;
  *(_BYTE *)(a1 + 152) = v12;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t assignWithCopy for GridScrollViewContent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a2 + 128);
  v8 = *(_BYTE *)(a2 + 136);
  outlined copy of Environment<Bool>.Content(v7, v8);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v7;
  *(_BYTE *)(a1 + 136) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *(_QWORD *)(a2 + 144);
  v12 = *(_BYTE *)(a2 + 152);
  outlined copy of Environment<Bool>.Content(v11, v12);
  v13 = *(_QWORD *)(a1 + 144);
  v14 = *(_BYTE *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v11;
  *(_BYTE *)(a1 + 152) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

__n128 __swift_memcpy169_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 153) = *(__int128 *)((char *)a2 + 153);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for GridScrollViewContent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release();
  v7 = *(_BYTE *)(a2 + 136);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(_BYTE *)(a2 + 152);
  v11 = *(_QWORD *)(a1 + 144);
  v12 = *(_BYTE *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for GridScrollViewContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 169))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GridScrollViewContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 168) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 169) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 169) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for GridScrollViewContent()
{
  return &unk_1E1AD74D8;
}

void *type metadata accessor for StackIconLayout()
{
  return &unk_1E1ABD200;
}

uint64_t storeEnumTagSinglePayload for MultimodalListStyle.IconStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18753EA5C + 4 * byte_187C3E5B1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18753EA90 + 4 * byte_187C3E5AC[v4]))();
}

uint64_t sub_18753EA90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18753EA98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18753EAA0);
  return result;
}

uint64_t sub_18753EAAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18753EAB4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18753EAB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18753EAC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for IconShape()
{
  return &unk_1E1B0D1E0;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>>)
  {
    type metadata accessor for ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleBottomPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleBottomPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>>);
  }
}

void type metadata accessor for ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>)
  {
    type metadata accessor for GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _AnimationModifier<MultimodalListStyle.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout, (uint64_t)&type metadata for MultimodalListStyle.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>);
  }
}

void type metadata accessor for GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>(uint64_t a1)
{
  type metadata accessor for GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>(a1, &lazy cache variable for type metadata for GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, (uint64_t (*)(uint64_t))type metadata accessor for ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>, &lazy protocol witness table cache variable for type ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>> and conformance ScrollView<A>, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
}

void type metadata accessor for GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, a5);
    v9 = type metadata accessor for GeometryReader();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ConditionalContent<GridScrollViewContent, StackScrollViewContent>, (uint64_t)&unk_1E1AD74D8, (uint64_t)&unk_1E1ADE2A0, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type _ConditionalContent<GridScrollViewContent, StackScrollViewContent> and conformance <> _ConditionalContent<A, B>();
    v6 = type metadata accessor for ScrollView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<GridScrollViewContent, StackScrollViewContent> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<GridScrollViewContent, StackScrollViewContent> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<GridScrollViewContent, StackScrollViewContent> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ConditionalContent<GridScrollViewContent, StackScrollViewContent>, (uint64_t)&unk_1E1AD74D8, (uint64_t)&unk_1E1ADE2A0, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type GridScrollViewContent and conformance GridScrollViewContent();
    v3[1] = lazy protocol witness table accessor for type StackScrollViewContent and conformance StackScrollViewContent();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<GridScrollViewContent, StackScrollViewContent> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GridScrollViewContent and conformance GridScrollViewContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GridScrollViewContent and conformance GridScrollViewContent;
  if (!lazy protocol witness table cache variable for type GridScrollViewContent and conformance GridScrollViewContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GridScrollViewContent, &unk_1E1AD74D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridScrollViewContent and conformance GridScrollViewContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StackScrollViewContent and conformance StackScrollViewContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StackScrollViewContent and conformance StackScrollViewContent;
  if (!lazy protocol witness table cache variable for type StackScrollViewContent and conformance StackScrollViewContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StackScrollViewContent, &unk_1E1ADE2A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackScrollViewContent and conformance StackScrollViewContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>> and conformance GeometryReader<A>, (uint64_t (*)(uint64_t))type metadata accessor for GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, MEMORY[0x1E0CE2768]);
    v3[1] = lazy protocol witness table accessor for type _AnimationModifier<MultimodalListStyle.Layout> and conformance _AnimationModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnimationModifier<MultimodalListStyle.Layout> and conformance _AnimationModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnimationModifier<MultimodalListStyle.Layout> and conformance _AnimationModifier<A>;
  if (!lazy protocol witness table cache variable for type _AnimationModifier<MultimodalListStyle.Layout> and conformance _AnimationModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _AnimationModifier<MultimodalListStyle.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout, (uint64_t)&type metadata for MultimodalListStyle.Layout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE45E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnimationModifier<MultimodalListStyle.Layout> and conformance _AnimationModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleBottomPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleBottomPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

uint64_t sub_18753EFD4()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>>, MEMORY[0x1E0CE73D0]);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer));
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer));
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>>);
  }
}

void type metadata accessor for (ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for _VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer));
  }
}

void type metadata accessor for _VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<StackIconLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackIconLayout and conformance StackIconLayout, (uint64_t)&unk_1E1ABD200, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    type metadata accessor for IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>(255);
    lazy protocol witness table accessor for type _LayoutRoot<StackIconLayout> and conformance _LayoutRoot<A>();
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>);
  }
}

unint64_t lazy protocol witness table accessor for type StackIconLayout and conformance StackIconLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout;
  if (!lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StackIconLayout, &unk_1E1ABD200);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout;
  if (!lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StackIconLayout, &unk_1E1ABD200);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout);
  }
  return result;
}

void type metadata accessor for IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for IconContainerView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E0CE7228]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DynamicTypeSize>, MEMORY[0x1E0CE2D18], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DynamicTypeSize> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DynamicTypeSize>, MEMORY[0x1E0CE2D18]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<StackIconLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutRoot<StackIconLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<StackIconLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<StackIconLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackIconLayout and conformance StackIconLayout, (uint64_t)&unk_1E1ABD200, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE14B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<StackIconLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

uint64_t sub_18753F3D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>();
  v2 = MEMORY[0x1E0CE7170];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  v3 = type metadata accessor for ModifiedContent();
  v14[0] = v1;
  v14[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, v2);
  v4 = MEMORY[0x1E0CE2E70];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v14);
  v5 = type metadata accessor for _OverlayModifier();
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ClipEffect<IconShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconShape and conformance IconShape, (uint64_t)&unk_1E1B0D1E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for _ConditionalContent();
  v13[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, TintShapeStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>, MEMORY[0x1E0CE0E50]);
  v13[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3620], v5);
  v9 = MEMORY[0x18D75FFDC](v4, v6, v13);
  v12[0] = v9;
  v12[1] = lazy protocol witness table accessor for type _ClipEffect<IconShape> and conformance _ClipEffect<A>();
  v11[0] = MEMORY[0x18D75FFDC](v4, v7, v12);
  v11[1] = v9;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v8, v11);
}

uint64_t associated type witness table accessor for View.Body : View in IconShape()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<IconShape, ForegroundStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<IconShape, ForegroundStyle>, MEMORY[0x1E0CE0E50]);
}

void type metadata accessor for _ShapeView<IconShape, ForegroundStyle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<IconShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type IconShape and conformance IconShape();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<IconShape, ForegroundStyle>);
  }
}

unint64_t instantiation function for generic protocol witness table for StackIconLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type StackIconLayout and conformance StackIconLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in GridScrollViewContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in StackScrollViewContent()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for IconShape(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type IconShape and conformance IconShape();
  result = lazy protocol witness table accessor for type IconShape and conformance IconShape();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void type metadata accessor for LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListStackContext>, MEMORY[0x1E0CE6040], MEMORY[0x1E0CE6030]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for LazyVStack(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>);
  }
}

void type metadata accessor for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    v6 = type metadata accessor for ModifiedContent();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListStackContext>, MEMORY[0x1E0CE6040], MEMORY[0x1E0CE6030]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type StyleContextWriter<MultimodalListStackContext> and conformance StyleContextWriter<A>();
    v4[0] = MEMORY[0x1E0CE55F0];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<MultimodalListStackContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListStackContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListStackContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListStackContext>, MEMORY[0x1E0CE6040], MEMORY[0x1E0CE6030], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListStackContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, type metadata accessor for LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>);
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

uint64_t outlined retain of ScaledClarityUIMetric<CGFloat>(uint64_t a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a1 + 24);
  a2(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  a3(v5, v6);
  return a1;
}

uint64_t outlined init with copy of NamedCoordinateSpace(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE4DD8] - 8) + 16))(a2, a1);
  return a2;
}

void type metadata accessor for LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListGridContext>, MEMORY[0x1E0CE5E88], MEMORY[0x1E0CE5E78]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for LazyVGrid(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListGridContext>, MEMORY[0x1E0CE5E88], MEMORY[0x1E0CE5E78]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type StyleContextWriter<MultimodalListGridContext> and conformance StyleContextWriter<A>();
    v4[0] = MEMORY[0x1E0CE55F0];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<MultimodalListGridContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListGridContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListGridContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListGridContext>, MEMORY[0x1E0CE5E88], MEMORY[0x1E0CE5E78], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListGridContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, type metadata accessor for LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, type metadata accessor for ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [MultimodalBadgeInfo], (uint64_t)&type metadata for MultimodalBadgeInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>);
  }
}

uint64_t sub_18753FCF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multimodalListGridBadgeInfos.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18753FD28()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_bridgeObjectRelease();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey>, (uint64_t)&type metadata for GridBadgeInfoEnvironmentKey, (uint64_t)&protocol witness table for GridBadgeInfoEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BC0]);
    v3[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, (uint64_t)&protocol witness table for LazyVGrid<A>, (uint64_t)&protocol witness table for CoordinateSpaceNameModifier);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for GridBadgeInfoEnvironmentKey()
{
  return &type metadata for GridBadgeInfoEnvironmentKey;
}

ValueMetadata *type metadata accessor for MultimodalListStyleGridContentCoordinateSpace()
{
  return &type metadata for MultimodalListStyleGridContentCoordinateSpace;
}

uint64_t destroy for OnBadgeInfoChange()
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for OnBadgeInfoChange(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for OnBadgeInfoChange(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for OnBadgeInfoChange(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for OnBadgeInfoChange()
{
  return &unk_1E1AC5CF8;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, (uint64_t)&protocol witness table for LazyVStack<A>, MEMORY[0x1E0CE2BC0]);
    v3[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>)
  {
    type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE60E0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for OnBadgeInfoChange);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>>);
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in OnBadgeInfoChange()
{
  return &protocol witness table for OnBadgeInfoChange;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<MultimodalBadgeInfoKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<MultimodalBadgeInfoKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<MultimodalBadgeInfoKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<MultimodalBadgeInfoKey>, (uint64_t)&type metadata for MultimodalBadgeInfoKey, (uint64_t)&protocol witness table for MultimodalBadgeInfoKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<MultimodalBadgeInfoKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BadgeInfoActionBinding and conformance BadgeInfoActionBinding()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BadgeInfoActionBinding and conformance BadgeInfoActionBinding;
  if (!lazy protocol witness table cache variable for type BadgeInfoActionBinding and conformance BadgeInfoActionBinding)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BadgeInfoActionBinding, &unk_1E1ADB2D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeInfoActionBinding and conformance BadgeInfoActionBinding);
  }
  return result;
}

uint64_t sub_187540360()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in BadgeInfoActionBinding.updateValue()()
{
  return closure #2 in BadgeInfoActionBinding.updateValue()();
}

void *type metadata accessor for BadgeInfoActionBinding()
{
  return &unk_1E1ADB2D8;
}

void UIHostingConfiguration.background<A>(content:)(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;

  MEMORY[0x1E0C80A78](a1, a2);
  v9 = *(_QWORD *)(v8 + 16);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v4, v9, v12);
  a1(v16);
  v17 = (uint64_t *)(v4 + *(int *)(a3 + 60));
  v18 = *((_BYTE *)v17 + 8);
  v19 = v17[2];
  v20 = *((_BYTE *)v17 + 24);
  v21 = v17[4];
  v22 = *((_BYTE *)v17 + 40);
  v25 = *v17;
  v23 = v17[6];
  LOBYTE(v17) = *((_BYTE *)v17 + 56);
  v26 = v18;
  v27 = v19;
  v28 = v20;
  v29 = v21;
  v30 = v22;
  v31 = v23;
  v32 = (char)v17;
  LOWORD(v24) = 1;
  UIHostingConfiguration.init(rootView:backgroundView:wantsBackground:margins:_minSize:createsUIInteractions:disablesAnimatedSizeInvalidation:)((uint64_t)v14, a4, v24, v9);
}

void UIHostingConfiguration.init(rootView:backgroundView:wantsBackground:margins:_minSize:createsUIInteractions:disablesAnimatedSizeInvalidation:)(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a2, a1, a4);
  type metadata accessor for UIHostingConfiguration();
}

uint64_t sub_1875405D0(int *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v2 + a1[13], v15, v7);
  *(_BYTE *)(v2 + a1[14]) = v16;
  v10 = v2 + a1[15];
  *(_QWORD *)v10 = v3;
  *(_BYTE *)(v10 + 8) = v1;
  *(_QWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 24) = v5;
  *(_QWORD *)(v10 + 32) = v6;
  *(_BYTE *)(v10 + 40) = v14;
  *(_QWORD *)(v10 + 48) = v13;
  *(_BYTE *)(v10 + 56) = v12;
  v11 = v2 + a1[16];
  *(_QWORD *)v11 = v18;
  *(_BYTE *)(v11 + 8) = v19 & 1;
  *(_QWORD *)(v11 + 16) = v21;
  *(_BYTE *)(v11 + 24) = v22 & 1;
  *(_BYTE *)(v2 + a1[17]) = v17;
  *(_BYTE *)(v2 + a1[18]) = v20;
  return result;
}

void UIHostingConfiguration.background<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_OWORD *)(a2 + 32);
  v9[1] = *(_OWORD *)(a2 + 16);
  v10 = a3;
  v11 = v7;
  v12 = a4;
  v13 = a1;
  v8 = type metadata accessor for _UIHostingConfigurationBackgroundView(0, a3, a4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingConfigurationBackgroundView<A>, v8);
  UIHostingConfiguration.background<A>(content:)((void (*)(uint64_t))partial apply for closure #1 in UIHostingConfiguration.background<A>(_:), (uint64_t)v9, a2, a5);
}

uint64_t closure #1 in UIHostingConfiguration.background<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for _UIHostingConfigurationBackgroundView(0, v11, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v25 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a3, v19);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v9, a3);
  v22 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingConfigurationBackgroundView<A>, v12);
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v22);
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, v12, a4);
  return ((uint64_t (*)(char *, uint64_t))v23)(v21, v12);
}

uint64_t partial apply for closure #1 in UIHostingConfiguration.background<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in UIHostingConfiguration.background<A>(_:)(v1[8], v1[2], v1[4], a1);
}

uint64_t type metadata accessor for _UIHostingConfigurationBackgroundView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _UIHostingConfigurationBackgroundView);
}

uint64_t UIHostingConfiguration.minSize(width:height:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v14;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(a6, v6, a5);
  v14 = a6 + *(int *)(a5 + 64);
  *(_QWORD *)v14 = a1;
  *(_BYTE *)(v14 + 8) = a2 & 1;
  *(_QWORD *)(v14 + 16) = a3;
  *(_BYTE *)(v14 + 24) = a4 & 1;
  return result;
}

void type metadata accessor for UIHostingContentViewWithoutInteractions()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t UIHostingConfiguration.animatedSizeInvalidationDisabled()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v3 = v2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v3, a1);
  *(_BYTE *)(a2 + *(int *)(a1 + 72)) = 1;
  return result;
}

uint64_t _UIHostingConfigurationBackgroundView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v4 = v3;
  v26 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  v11 = *(_QWORD *)(a1 + 24);
  v27 = MEMORY[0x1E0CE7E28];
  v28 = v6;
  v29 = v10;
  v30 = v11;
  v12 = type metadata accessor for _ShapeView();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v25 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v4, v6, v19);
  _ShapeView.init(shape:style:fillStyle:)();
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0E50], v12);
  static ViewBuilder.buildExpression<A>(_:)(v16, v12, v22);
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, v12, v26);
  return ((uint64_t (*)(char *, uint64_t))v23)(v21, v12);
}

double @objc UIHostingBackgroundView.frame.getter(void *a1, uint64_t a2)
{
  return @objc UIHostingBackgroundView.frame.getter(a1, a2, (uint64_t)&selRef_frame, (double (*)(uint64_t))UIHostingBackgroundView.frame.getter);
}

void @objc UIHostingBackgroundView.frame.setter(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;

  v9 = a1;
  UIHostingBackgroundView.frame.setter(a2, a3, a4, a5);

}

id UIHostingBackgroundView.frame.setter(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  objc_class *ObjectType;
  double v10;
  double v11;
  double v12;
  double v13;
  objc_class *v14;
  id result;
  double v16;
  double v17;
  objc_super v19;
  objc_super v20;

  ObjectType = (objc_class *)swift_getObjectType();
  v20.receiver = v4;
  v20.super_class = ObjectType;
  objc_msgSendSuper2(&v20, sel_bounds);
  v11 = v10;
  v13 = v12;
  v19.receiver = v4;
  v19.super_class = ObjectType;
  objc_msgSendSuper2(&v19, sel_setFrame_, a1, a2, a3, a4);
  v14 = (objc_class *)swift_getObjectType();
  v20.receiver = v4;
  v20.super_class = v14;
  result = objc_msgSendSuper2(&v20, sel_bounds);
  if (v11 != v17 || v13 != v16)
    *((_BYTE *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xB8)) = 1;
  return result;
}

id UIHostingBackgroundView.frame.getter(SEL *a1)
{
  void *v1;
  objc_super v4;

  v4.receiver = v1;
  v4.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v4, *a1);
}

double @objc UIHostingBackgroundView.bounds.getter(void *a1, uint64_t a2)
{
  return @objc UIHostingBackgroundView.frame.getter(a1, a2, (uint64_t)&selRef_bounds, (double (*)(uint64_t))UIHostingBackgroundView.frame.getter);
}

void @objc UIHostingBackgroundView.bounds.setter(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;

  v9 = a1;
  UIHostingBackgroundView.bounds.setter(a2, a3, a4, a5);

}

id UIHostingBackgroundView.bounds.setter(double a1, double a2, double a3, double a4)
{
  void *v4;
  objc_class *ObjectType;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  objc_super v19;
  objc_super v20;

  ObjectType = (objc_class *)swift_getObjectType();
  v20.receiver = v4;
  v20.super_class = ObjectType;
  objc_msgSendSuper2(&v20, sel_bounds);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19.receiver = v4;
  v19.super_class = ObjectType;
  objc_msgSendSuper2(&v19, sel_setBounds_, a1, a2, a3, a4);
  return UIHostingBackgroundView.bounds.didset(v11, v13, v15, v17);
}

id UIHostingBackgroundView.bounds.didset(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  id result;
  double v8;
  double v9;
  objc_super v11;

  v11.receiver = v4;
  v11.super_class = (Class)swift_getObjectType();
  result = objc_msgSendSuper2(&v11, sel_bounds);
  if (v9 != a3 || v8 != a4)
    *((_BYTE *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xB8)) = 1;
  return result;
}

void UIHostingBackgroundView.__allocating_init(rootView:)()
{
  specialized UIHostingBackgroundView.__allocating_init(rootView:)();
}

uint64_t sub_187540F98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 2448) - 8) + 8))(v1);
  return a1;
}

id @objc UIHostingBackgroundView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return StyleContextSplitViewNavigationController.init(coder:)(a3);
}

void UIHostingContentViewWithoutInteractions.__allocating_init(rootView:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  specialized UIHostingContentView.init(rootView:)();
}

uint64_t sub_18754101C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModifiedContent();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  return a1;
}

uint64_t UIHostingContentView.isInList.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9B0));
}

void UIHostingContentView.configuration.getter()
{
  type metadata accessor for UIHostingConfiguration();
}

void sub_1875410BC(uint64_t a1)
{
  uint64_t *v1;

  v1[3] = a1;
  v1[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIHostingConfiguration<A, B>, a1);
  __swift_allocate_boxed_opaque_existential_1(v1);
  UIHostingContentView._configuration.getter();
}

void UIHostingContentView.configuration.setter()
{
  type metadata accessor for UIHostingConfiguration();
}

void sub_187541148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  _BYTE v21[96];

  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v21[-v7];
  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v21[-v14];
  outlined init with copy of TableColumnList(v1, v2 - 128);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for UIContentConfiguration);
  v16 = swift_dynamicCast();
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v16)
  {
    v17(v8, 0, 1, a1);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v15, v8, a1);
    specialized UIHostingContentView._configuration.setter();
  }
  v17(v8, 1, 1, a1);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  outlined init with copy of TableColumnList(v1, v2 - 128);
  *(_QWORD *)(v2 - 144) = 0;
  *(_QWORD *)(v2 - 136) = 0xE000000000000000;
  _StringGuts.grow(_:)(256);
  v18 = *(_QWORD *)(v2 - 136);
  *(_QWORD *)(v2 - 144) = *(_QWORD *)(v2 - 144);
  *(_QWORD *)(v2 - 136) = v18;
  v19._countAndFlagsBits = 0xD0000000000000DELL;
  v19._object = (void *)0x8000000187BE29A0;
  String.append(_:)(v19);
  _print_unlocked<A, B>(_:_:)();
  v20._object = (void *)0x8000000187BE2A80;
  v20._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v20);
  UIHostingContentView._configuration.getter();
}

void sub_187541334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void UIHostingContentView.configuration.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  UIHostingContentView.configuration.getter();
}

void (*sub_1875413C4())(uint64_t *a1, char a2)
{
  return UIHostingContentView.configuration.modify;
}

void UIHostingContentView.configuration.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    outlined init with copy of TableColumnList(*a1, *a1 + 40);
    UIHostingContentView.configuration.setter();
  }
  UIHostingContentView.configuration.setter();
}

void UIHostingContentView.backgroundHost.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x9C8);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

__n128 UIHostingContentView.lastObservedSize.getter@<Q0>(__n128 *a1@<X8>)
{
  _QWORD *v1;
  __n128 *v2;
  unint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  __n128 result;

  v2 = (__n128 *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x9F0));
  v3 = v2[1].n128_u64[0];
  v4 = v2[1].n128_u8[8];
  v5 = v2[1].n128_u8[9];
  result = *v2;
  *a1 = *v2;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u8[8] = v4;
  a1[1].n128_u8[9] = v5;
  return result;
}

__n128 UIHostingContentView.lastObservedSize.setter(__n128 *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  __n128 *v5;
  __n128 result;

  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u8[8];
  v4 = a1[1].n128_u8[9];
  v5 = (__n128 *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x9F0));
  result = *a1;
  *v5 = *a1;
  v5[1].n128_u64[0] = v2;
  v5[1].n128_u8[8] = v3;
  v5[1].n128_u8[9] = v4;
  return result;
}

uint64_t UIHostingContentView.lastSizeThatFits.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9F8));
}

uint64_t UIHostingContentView.lastSizeThatFits.setter(uint64_t result, uint64_t a2, char a3)
{
  _QWORD *v3;
  char *v4;

  v4 = (char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x9F8);
  *(_QWORD *)v4 = result;
  *((_QWORD *)v4 + 1) = a2;
  v4[16] = a3 & 1;
  return result;
}

void UIHostingContentView.makeBackgroundHost()()
{
  type metadata accessor for UIHostingConfiguration();
}

void sub_1875415A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  UIHostingContentView._configuration.getter();
}

void sub_187541604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v4 + *(int *)(v3 + 52), v0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v3);
  v8 = objc_allocWithZone((Class)type metadata accessor for UIHostingBackgroundView(0, v0, v2, v7));
  specialized _UIHostingView.init(rootView:)();
}

void *sub_18754164C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  char v6;
  id v7;

  v5 = _UIHostingView.isHiddenForReuse.getter() & 1;
  if (v5 != (_UIHostingView.isHiddenForReuse.getter() & 1))
  {
    v6 = _UIHostingView.isHiddenForReuse.getter();
    v7 = a1;
    _UIHostingView.isHiddenForReuse.setter(v6 & 1);

  }
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return a1;
}

uint64_t UIHostingContentView.setupSizeInvalidationHandler(_:)(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = *a1;
  v5 = *((unsigned __int8 *)a1 + 8);
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 24);
  v8 = *(_QWORD *)(v3 + 0x9F0);
  v9 = (char *)v1 + v8;
  if ((*((_BYTE *)v1 + v8 + 25) & 1) == 0)
  {
    v10 = v9[24];
    v11 = *((_QWORD *)v9 + 2);
    v20 = *(_OWORD *)v9;
    v21 = v11;
    v22 = v10;
    v23 = 0;
    v16 = v4;
    v17 = v5;
    v18 = v6;
    v19 = v7;
    result = MEMORY[0x18D757594](&v20, &v16);
    if ((result & 1) != 0)
      return result;
    v8 = *(_QWORD *)((*v2 & *v1) + 0x9F0);
  }
  v13 = (char *)v1 + v8;
  *(_QWORD *)v13 = v4;
  *((_QWORD *)v13 + 1) = v5;
  *((_QWORD *)v13 + 2) = v6;
  v13[24] = v7;
  v13[25] = 0;
  *(_QWORD *)&v20 = v4;
  BYTE8(v20) = v5;
  v21 = v6;
  v22 = v7;
  v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v3 + 2448);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v3 + 2456);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(v3 + 2472);
  *(_QWORD *)(v15 + 48) = v14;
  swift_beginAccess();
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
  ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
  swift_endAccess();
  return swift_release();
}

double UIHostingContentView.roundSize(_:)(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  double v12;
  _QWORD v14[2];
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;

  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, double))(v5 + 104))(v9, *MEMORY[0x1E0DED500], v4, v7);
  GraphHost.environment.getter();
  v15 = v17;
  v16 = v18;
  EnvironmentValues.pixelLength.getter();
  v11 = v10;
  swift_release();
  swift_release();
  *(double *)&v14[1] = a2;
  v15 = a1;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v11);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v11);
  v12 = v15;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  return v12;
}

uint64_t UIHostingContentView.hasBeenVisible.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA00));
}

uint64_t UIHostingContentView.hasBeenVisible.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xA00)) = result;
  return result;
}

uint64_t UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xA08));
  v4 = *v3;
  *v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
}

void UIHostingContentView._preferredLeadingSeparatorInset()()
{
  void *v0;

  if (one-time initialization token for listRowSeparatorLeading != -1)
    swift_once();
  objc_msgSend(v0, sel_bounds);
  type metadata accessor for UIHostingContentView();
}

void UIHostingContentView._preferredTrailingSeparatorInset()()
{
  void *v0;

  if (one-time initialization token for listRowSeparatorTrailing != -1)
    swift_once();
  objc_msgSend(v0, sel_bounds);
  type metadata accessor for UIHostingContentView();
}

id UIHostingContentView._leadingSwipeActionsConfiguration()()
{
  int v0;
  id result;
  __int16 v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[224];
  uint64_t v31[28];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?);
  static Update.dispatchImmediately<A>(_:)();
  outlined init with take of SwipeActions.Value?((uint64_t)v30, (uint64_t)v31);
  outlined init with take of SwipeActions.Value?((uint64_t)v31, (uint64_t)&v32);
  v0 = _s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)&v32);
  result = 0;
  if (v0 != 1)
  {
    v2 = v32;
    v3 = v33;
    v4 = v34;
    v5 = v35;
    v6 = v36;
    v7 = v37;
    v8 = v38;
    v9 = v39;
    v10 = v40;
    v11 = v41;
    v12 = v45;
    v13 = v44;
    v14 = v43;
    v15 = v42;
    outlined copy of SwipeActions.Configuration?(v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
    outlined release of SwipeActions.Value?(v31);
    if (v5)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
      v16 = v2 & 0x101;
      v17 = v3;
      v18 = v4 & 0x1FF;
      v19 = v5;
      v20 = v6;
      v21 = v7;
      v22 = v8;
      v23 = v9;
      v24 = v10;
      v25 = v11;
      v26 = v15;
      v27 = v14;
      v28 = v13;
      v29 = v12;
      return UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)((unsigned __int8 *)&v16, (uint64_t)closure #1 in closure #1 in TabItem.swipeActionsConfiguration(for:), 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t UIHostingContentView._trailingSwipeActionsConfiguration()()
{
  _QWORD *v0;
  int v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[224];
  uint64_t v32[28];
  _BYTE v33[112];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?);
  static Update.dispatchImmediately<A>(_:)();
  outlined init with take of SwipeActions.Value?((uint64_t)v31, (uint64_t)v32);
  outlined init with take of SwipeActions.Value?((uint64_t)v32, (uint64_t)v33);
  v1 = _s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)v33);
  result = 0;
  if (v1 != 1)
  {
    v3 = v37;
    v12 = v47;
    v13 = v45;
    v4 = v46;
    v14 = v44;
    v5 = v43;
    v15 = v35;
    v16 = v42;
    v6 = v34;
    v7 = v36;
    v8 = v38;
    v9 = v39;
    v10 = v40;
    v11 = v41;
    outlined copy of SwipeActions.Configuration?(v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46);
    outlined release of SwipeActions.Value?(v32);
    if (v3)
    {
      LOWORD(v18) = v6 & 0x101;
      *((_QWORD *)&v18 + 1) = v15;
      v19 = v7 & 0x1FF;
      v20 = v3;
      v21 = v8;
      v22 = v9;
      v23 = v10;
      v24 = v11;
      v25 = v16;
      v26 = v5;
      v27 = v14;
      v28 = v13;
      v29 = v4;
      v30 = v12;
      swift_bridgeObjectRetain();
      outlined copy of Binding<NavigationSplitViewColumn>?(v8, v9);
      outlined copy of Binding<SwipeActionResultToken?>?(v11, v16, v5, v14, v13, v4);
      closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration()(&v18, v0, &v17);
      outlined consume of SwipeActions.Configuration?(v6, v15, v7, v3, v8, v9, v10, v11, v16, v5, v14, v13, v4);
      outlined consume of SwipeActions.Configuration?(v6, v15, v7, v3, v8, v9, v10, v11, v16, v5, v14, v13, v4);
      return v17;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void @objc UIHostingContentView.bounds.setter(void *a1)
{
  a1;
  UIHostingContentView.bounds.setter();
}

void sub_1875420A4()
{
  void *v0;

}

void UIHostingContentView.bounds.setter()
{
  type metadata accessor for UIHostingContentView();
}

id sub_18754211C(objc_class *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, objc_super a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  _QWORD *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v34;
  double v35;
  double v36;
  double v37;
  id result;
  double v39;
  double v40;
  objc_super v42;
  objc_super v43;

  v43.receiver = v27;
  v43.super_class = a1;
  -[objc_class bounds](&v43, sel_bounds);
  v35 = v34;
  v37 = v36;
  v42.receiver = v27;
  v42.super_class = a1;
  -[objc_class setBounds:](&v42, sel_setBounds_, v32, v31, v30, v29);
  result = objc_msgSend(v27, sel_bounds);
  if (v40 != v35 || v39 != v37)
    *((_BYTE *)v27 + *(_QWORD *)((*v28 & *v27) + 0xB8)) = 1;
  return result;
}

id @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.getter(uint64_t a1, uint64_t a2)
{
  return @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.getter(a1, a2, specialized UIHostingContentView._containerBackgroundViewDidChangeHandler.getter, (uint64_t)thunk for @escaping @callee_guaranteed () -> (), (uint64_t)&block_descriptor_52_0, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
}

id @objc UIHostingContentView._defaultListContentConfigurationProvider.getter(uint64_t a1, uint64_t a2)
{
  return @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.getter(a1, a2, specialized UIHostingContentView._defaultListContentConfigurationProvider.getter, (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?), (uint64_t)&block_descriptor_45, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

void @objc UIHostingContentView._defaultListContentConfigurationProvider.setter(void *a1, int a2, void *aBlock)
{
  void *v4;
  void *v5;
  uint64_t v6;
  id (*v7)();

  v4 = _Block_copy(aBlock);
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    v7 = partial apply for thunk for @escaping @callee_unowned @convention(block) () -> (@autoreleased UIListContentConfiguration?);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  a1;
  specialized UIHostingContentView._defaultListContentConfigurationProvider.setter((uint64_t)v7, v6);
}

void sub_18754226C()
{
  uint64_t v0;
  void *v1;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v0);

}

void @objc UIHostingContentView._defaultListContentConfigurationMayHaveChanged()(void *a1)
{
  a1;
  UIHostingContentView._defaultListContentConfigurationMayHaveChanged()();
}

void sub_1875422B0()
{
  void *v0;

}

id @objc UIHostingContentView._popupMenuButtonDidChangeHandler.getter(uint64_t a1, uint64_t a2)
{
  return @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.getter(a1, a2, specialized UIHostingContentView._popupMenuButtonDidChangeHandler.getter, (uint64_t)thunk for @escaping @callee_guaranteed () -> (), (uint64_t)&block_descriptor_39, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
}

void @objc UIHostingContentView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized UIHostingContentView.init(rootView:)();
}

void UIHostingContentView.__allocating_init(rootView:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  specialized UIHostingContentView.init(rootView:)();
}

void closure #1 in UIHostingContentView.setupSizeInvalidationHandler(_:)()
{
  type metadata accessor for UIHostingConfiguration();
}

void sub_18754239C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double *v16;

  MEMORY[0x1E0C80A78](a1, a2);
  v5 = *v4;
  v6 = v4[1];
  v8 = *v3;
  v7 = v3[1];
  swift_beginAccess();
  v9 = MEMORY[0x18D760234](v2 + 16);
  if (v9)
  {
    v10 = (_QWORD *)v9;
    v11 = UIHostingContentView.roundSize(_:)(v8, v7);
    v13 = v12;
    if (UIHostingContentView.roundSize(_:)(v5, v6) != v11 || v14 != v13)
    {
      v16 = (double *)((char *)v10 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v10) + 0x9F8));
      *v16 = v11;
      v16[1] = v13;
      *((_BYTE *)v16 + 16) = 0;
      UIHostingContentView._configuration.getter();
    }

  }
}

void UIHostingContentView.systemLayoutSizeFitting(_:withHorizontalFittingPriority:verticalFittingPriority:)(double a1, double a2, float a3, float a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  v7 = *v4;
  v8 = *MEMORY[0x1E0DEEDD8];
  _ProposedSize.init(width:height:)();
  if (a3 == 1000.0)
    _ProposedSize.width.setter();
  if (a4 == 1000.0)
    _ProposedSize.height.setter();
  v9 = v8 & v7;
  v10 = v21;
  v11 = v22;
  v12 = v23;
  v13 = v24;
  *(_QWORD *)&v15 = v21;
  BYTE8(v15) = v22;
  *(_QWORD *)&v16 = v23;
  BYTE8(v16) = v24;
  UIHostingContentView.setupSizeInvalidationHandler(_:)((uint64_t *)&v15);
  v17 = v10;
  v18 = v11;
  v19 = v12;
  v20 = v13;
  v14 = *(_OWORD *)(v9 + 2464);
  v15 = *(_OWORD *)(v9 + 2448);
  v16 = v14;
  type metadata accessor for UIHostingContentView();
}

void sub_1875426A8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  double v3;
  double v4;
  double v5;
  char *v6;
  uint64_t v7;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a1);
  ViewRendererHost.sizeThatFits(_:)();
  v5 = UIHostingContentView.roundSize(_:)(v3, v4);
  v6 = (char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x9F8);
  *(double *)v6 = v5;
  *((_QWORD *)v6 + 1) = v7;
  v6[16] = 0;
}

void @objc UIHostingContentView.systemLayoutSizeFitting(_:withHorizontalFittingPriority:verticalFittingPriority:)(void *a1, double a2, double a3, float a4, float a5)
{
  id v9;

  v9 = a1;
  UIHostingContentView.systemLayoutSizeFitting(_:withHorizontalFittingPriority:verticalFittingPriority:)(a2, a3, a4, a5);
}

double sub_187542754(double a1)
{
  void *v1;

  return a1;
}

void UIHostingContentView.layoutMarginsDidChange()()
{
  type metadata accessor for UIHostingContentView();
}

void sub_1875427B8(objc_class *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, objc_super a13)
{
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  a13.super_class = a1;
  -[objc_class layoutMarginsDidChange](&a13, sel_layoutMarginsDidChange);
  *((_BYTE *)v14 + *(_QWORD *)((*v13 & *v14) + 0xB8)) = 1;
  v15 = *(_QWORD **)((char *)v14 + *(_QWORD *)((*v13 & *v14) + 0x9C8));
  if (v15)
    *((_BYTE *)v15 + *(_QWORD *)((*v15 & *v13) + 0xB8)) = 1;
  UIHostingContentView.updateHostedViews()();
}

void @objc UIHostingContentView.layoutMarginsDidChange()(void *a1)
{
  a1;
  UIHostingContentView.layoutMarginsDidChange()();
}

void sub_187542840()
{
  void *v0;

}

id @objc UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.getter(uint64_t a1, uint64_t a2)
{
  return @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.getter(a1, a2, specialized UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.getter, (uint64_t)thunk for @escaping @callee_guaranteed () -> (), (uint64_t)&block_descriptor_32, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
}

id @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[6];

  v9 = a3();
  if (!v9)
    return 0;
  v11 = v9;
  v12 = v10;
  v15[4] = v9;
  v15[5] = v10;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = a4;
  v15[3] = a5;
  v13 = _Block_copy(v15);
  a6(v11, v12);
  swift_release();
  return v13;
}

void @objc UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.setter(void *a1, int a2, void *aBlock)
{
  void *v4;
  uint64_t v5;
  id v6;

  v4 = _Block_copy(aBlock);
  if (v4)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    v4 = partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ();
  }
  else
  {
    v5 = 0;
  }
  v6 = a1;
  UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.setter((uint64_t)v4, v5);

}

void @objc UIHostingContentView._preferredLeadingSeparatorInset()(void *a1)
{
  id v1;

  v1 = a1;
  UIHostingContentView._preferredLeadingSeparatorInset()();
}

double sub_1875429BC(double a1)
{
  void *v1;

  return a1;
}

void @objc UIHostingContentView._preferredTrailingSeparatorInset()(void *a1)
{
  id v1;

  v1 = a1;
  UIHostingContentView._preferredTrailingSeparatorInset()();
}

double sub_1875429F4(double a1)
{
  void *v1;

  return a1;
}

id @objc UIHostingContentView._leadingSwipeActionsConfiguration()(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = UIHostingContentView._leadingSwipeActionsConfiguration()();

  return v2;
}

id closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration()@<X0>(_OWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id result;
  _OWORD v19[7];
  _OWORD v20[7];

  v5 = *MEMORY[0x1E0DEEDD8] & *a2;
  v6 = a1[5];
  v20[4] = a1[4];
  v20[5] = v6;
  v20[6] = a1[6];
  v7 = a1[1];
  v20[0] = *a1;
  v20[1] = v7;
  v8 = a1[3];
  v20[2] = a1[2];
  v20[3] = v8;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
  v9 = a1[5];
  v19[4] = a1[4];
  v19[5] = v9;
  v19[6] = a1[6];
  v10 = a1[1];
  v19[0] = *a1;
  v19[1] = v10;
  v11 = a1[3];
  v19[2] = a1[2];
  v19[3] = v11;
  v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v5 + 2448);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(v5 + 2456);
  v14 = *(_QWORD *)(v5 + 2472);
  v15 = a1[2];
  *(_OWORD *)(v13 + 104) = a1[3];
  v16 = a1[5];
  *(_OWORD *)(v13 + 120) = a1[4];
  *(_OWORD *)(v13 + 136) = v16;
  *(_OWORD *)(v13 + 152) = a1[6];
  v17 = a1[1];
  *(_OWORD *)(v13 + 56) = *a1;
  *(_OWORD *)(v13 + 72) = v17;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = v12;
  *(_OWORD *)(v13 + 88) = v15;
  outlined retain of SwipeActions.Configuration(v20);
  outlined retain of SwipeActions.Configuration(v20);
  result = UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)((unsigned __int8 *)v19, (uint64_t)partial apply for closure #1 in closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration(), v13);
  *a3 = result;
  return result;
}

_QWORD *closure #1 in closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration()(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  _QWORD v10[7];

  v6 = a3 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x18D760234](v6);
  if (v7)
  {

    outlined init with take of Binding<SwipeActionResultToken?>?(a4 + 56, (uint64_t)v9);
    outlined init with take of Binding<SwipeActionResultToken?>?((uint64_t)v9, (uint64_t)v10);
    if (v10[1])
    {
      outlined retain of ActiveEditMenu?(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Binding<SwipeActionResultToken?>?);
      outlined retain of ActiveEditMenu?(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Binding<SwipeActionResultToken?>?);
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)a1);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
      outlined retain of ActiveEditMenu?(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Binding<SwipeActionResultToken?>?);
      return outlined retain of ActiveEditMenu?(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Binding<SwipeActionResultToken?>?);
    }
    v7 = 1;
  }
  return (_QWORD *)a1(v7);
}

id @objc UIHostingContentView._trailingSwipeActionsConfiguration()(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = (void *)UIHostingContentView._trailingSwipeActionsConfiguration()();

  return v2;
}

void UIHostingContentView.__ivar_destroyer()
{
  type metadata accessor for UIHostingConfiguration();
}

uint64_t sub_187542D38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v2 + *(_QWORD *)((*v3 & *v2) + 0x9C0)));

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v2 + *(_QWORD *)((*v3 & *v2) + 0x9D0)));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v2 + *(_QWORD *)((*v3 & *v2) + 0x9D8)));
  outlined destroy of WeakBox<UIButton>?((uint64_t)v2 + *(_QWORD *)((*v3 & *v2) + 0x9E0));
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v2 + *(_QWORD *)((*v3 & *v2) + 0xA08)));
}

void UIHostingContentView.__deallocating_deinit()
{
  type metadata accessor for UIHostingContentView();
}

id sub_187542E38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 16) = v1;
  *(_QWORD *)(v2 - 8) = a1;
  return objc_msgSendSuper2((objc_super *)(v2 - 16), sel_dealloc);
}

void @objc UIHostingContentView.__ivar_destroyer()
{
  type metadata accessor for UIHostingConfiguration();
}

uint64_t sub_187542EA4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x9C0)));

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x9D0)));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x9D8)));
  outlined destroy of WeakBox<UIButton>?((uint64_t)v1 + *(_QWORD *)((*v3 & *v1) + 0x9E0));
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0xA08)));
}

void protocol witness for UIContentView.configuration.modify in conformance UIHostingContentView<A, B>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  UIHostingContentView.configuration.modify(v2);
}

void (*sub_187542F9C(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

void protocol witness for UIContentView.supports(_:) in conformance UIHostingContentView<A, B>()
{
  specialized UIHostingContentView.supports(_:)();
}

double HostingContentViewRootModifier.effectivePadding.getter()
{
  double *v0;
  double v1;
  double v2;
  char v3;

  v1 = *v0;
  v2 = COERCE_DOUBLE(OptionalEdgeInsets.top.getter());
  if ((v3 & 1) == 0)
    v1 = v2;
  OptionalEdgeInsets.leading.getter();
  OptionalEdgeInsets.bottom.getter();
  OptionalEdgeInsets.trailing.getter();
  return v1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInHostingConfiguration()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInHostingConfiguration()
{
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  return PropertyList.subscript.setter();
}

uint64_t specialized UIHostingContentView._popupMenuButtonDidChangeHandler.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9D8));
}

uint64_t *specialized UIHostingContentView.hostingView<A>(_:didChangePreferences:)(uint64_t *result)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  _QWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v9;
  _BYTE v10[12];
  int v11;
  _QWORD v12[2];

  v2 = *MEMORY[0x1E0DEEDD8] & *v1;
  v3 = *(void (**)(uint64_t))((char *)v1 + *(_QWORD *)(v2 + 0x9D8));
  if (v3)
  {
    v4 = v1;
    v5 = *result;
    v6 = (_DWORD *)((char *)v4 + *(_QWORD *)(v2 + 2536));
    swift_beginAccess();
    v12[0] = v5;
    swift_retain();
    PreferenceList.subscript.getter();
    if (*v6 == -1 || v11 == -1 || *v6 != v11)
    {
      *v6 = v11;
      outlined init with copy of WeakBox<UIButton>?((uint64_t)v10, (uint64_t)v12);
      v9 = UIHostingContentView.popUpButton.setter((uint64_t)v12);
      v3(v9);
    }
    outlined destroy of PreferenceList.Value<WeakBox<UIButton>?>((uint64_t)v10);
    swift_endAccess();
    return (uint64_t *)outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v3);
  }
  return result;
}

uint64_t specialized UIHostingContentView._defaultListContentConfigurationProvider.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9D0));
}

uint64_t specialized UIHostingContentView._containerBackgroundViewDidChangeHandler.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9C0));
}

void specialized UIHostingBackgroundView.__allocating_init(rootView:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  specialized _UIHostingView.init(rootView:)();
}

void specialized UIHostingContentView.init(configuration:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  _QWORD *v14;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *MEMORY[0x1E0DEEDD8] & *v0;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UIListContentConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC23A0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v6, v7);
  *((_BYTE *)v0 + *(_QWORD *)(v3 + 2480)) = 0;
  v8 = (_QWORD *)((char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x9C0));
  *v8 = 0;
  v8[1] = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x9C8)) = 0;
  v9 = (_QWORD *)((char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x9D0));
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)((char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x9D8));
  *v10 = 0;
  v10[1] = 0;
  v11 = (char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x9E0);
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  *(_DWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x9E8)) = -1;
  v12 = (char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x9F0);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = 0;
  *((_WORD *)v12 + 12) = 256;
  v13 = (char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x9F8);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0xA00)) = 0;
  v14 = (_QWORD *)((char *)v1 + *(_QWORD *)((*v2 & *v1) + 0xA08));
  *v14 = 0;
  v14[1] = 0;
  type metadata accessor for UIHostingConfiguration();
}

void sub_187543574(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;

  v9 = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v6, v2, a1);
  v10 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
  *(_QWORD *)(v8 - 160) = v7;
  *(_BYTE *)(v8 - 152) = 0;
  static EdgeInsets.zero.getter();
  ListContentStyling.init(configuration:insets:minHeight:tint:)(v5, v8 - 160, (uint64_t)(v1 + 8), v11, v12, v13, v14, 0.0);
  v15 = v1[12];
  v17 = v1[13];
  v16 = v1[14];
  v18 = *((_BYTE *)v1 + 120);
  v19 = v1[16];
  v20 = v1[17];
  v21 = (uint64_t *)(v2 + *(int *)(v9 + 60));
  v22 = *v21;
  v23 = *((_BYTE *)v21 + 8);
  v24 = v21[2];
  v25 = *((_BYTE *)v21 + 24);
  v26 = v21[4];
  v27 = *((_BYTE *)v21 + 40);
  v28 = v21[6];
  v29 = *((_BYTE *)v21 + 56);
  v30 = (uint64_t *)(v2 + *(int *)(v9 + 64));
  v31 = *v30;
  v32 = *((_BYTE *)v30 + 8);
  v33 = v30[2];
  LOBYTE(v30) = *((_BYTE *)v30 + 24);
  v34 = *((_OWORD *)v1 + 4);
  v35 = *((_OWORD *)v1 + 5);
  LOBYTE(v9) = *((_BYTE *)v1 + 144);
  *(_BYTE *)(v8 - 104) = v23;
  *(_BYTE *)(v8 - 112) = v25;
  *(_BYTE *)(v8 - 120) = v27;
  *(_BYTE *)(v8 - 128) = v29;
  *(_BYTE *)(v8 - 136) = v32;
  *(_BYTE *)(v8 - 144) = (_BYTE)v30;
  *((_OWORD *)v1 + 4) = v34;
  *((_OWORD *)v1 + 5) = v35;
  v1[12] = v15;
  v1[13] = v17;
  v1[14] = v16;
  *((_BYTE *)v1 + 120) = v18;
  *(_DWORD *)((char *)v1 + 121) = *(_DWORD *)(v8 - 160);
  *((_DWORD *)v1 + 31) = *(_DWORD *)((char *)v3 + 195);
  v1[16] = v19;
  v1[17] = v20;
  *((_BYTE *)v1 + 144) = v9;
  *(_DWORD *)((char *)v1 + 145) = *(_DWORD *)((char *)v3 + 249);
  *((_DWORD *)v1 + 37) = v3[63];
  v1[19] = v22;
  *((_BYTE *)v1 + 160) = *(_BYTE *)(v8 - 104);
  v36 = *(_DWORD *)((char *)v3 + 241);
  *((_DWORD *)v1 + 41) = v3[61];
  *(_DWORD *)((char *)v3 + 97) = v36;
  v1[21] = v24;
  *((_BYTE *)v1 + 176) = *(_BYTE *)(v8 - 112);
  v37 = *(_DWORD *)((char *)v3 + 233);
  *((_DWORD *)v1 + 45) = v3[59];
  *(_DWORD *)((char *)v3 + 113) = v37;
  v1[23] = v26;
  *((_BYTE *)v1 + 192) = *(_BYTE *)(v8 - 120);
  v38 = *(_DWORD *)((char *)v3 + 225);
  *((_DWORD *)v1 + 49) = v3[57];
  *(_DWORD *)((char *)v3 + 129) = v38;
  v1[25] = v28;
  *((_BYTE *)v1 + 208) = *(_BYTE *)(v8 - 128);
  v39 = *(_DWORD *)((char *)v3 + 217);
  *((_DWORD *)v1 + 53) = v3[55];
  *(_DWORD *)((char *)v3 + 145) = v39;
  v1[27] = v31;
  *((_BYTE *)v1 + 224) = *(_BYTE *)(v8 - 136);
  v40 = *(_DWORD *)((char *)v3 + 209);
  *((_DWORD *)v1 + 57) = v3[53];
  *(_DWORD *)((char *)v3 + 161) = v40;
  v1[29] = v33;
  *((_BYTE *)v1 + 240) = *(_BYTE *)(v8 - 144);
  v41 = *v1;
  *((_BYTE *)v1 + 241) = 0;
  MEMORY[0x18D75B4AC](v1 + 8, v4, &unk_1E1B19BE0, v41);
  swift_release();
  swift_release();
  outlined consume of Transaction?(v20);
  specialized _UIHostingView.init(rootView:)();
}

void sub_187543764(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 16) + 8))(v2, *(_QWORD *)(v1 + 24));
  v4 = a1;
  UIHostingContentView.updateHostedViews()();
}

id sub_187543784()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  *(_QWORD *)(v0 + 48) = v1;
  static Update.ensure<A>(_:)();
  specialized _UIHostingView.delegate.setter((uint64_t)v1, (uint64_t)&protocol witness table for UIHostingContentView<A, B>);
  objc_msgSend(v1, sel_setPreservesSuperviewLayoutMargins_, 1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>, (uint64_t (*)(uint64_t))type metadata accessor for UITraitDefinition.Type, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_187BF9830;
  v3 = type metadata accessor for UITraitUserInterfaceStyle();
  v4 = MEMORY[0x1E0DC2160];
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = v4;
  v5 = v1;
  MEMORY[0x18D75DD2C](v2, sel_setNeedsLayout);

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v5;
}

void specialized UIHostingContentView.__allocating_init(configuration:)()
{
  type metadata accessor for UIHostingContentView();
}

void sub_1875438A4(objc_class *a1)
{
  id v1;

  v1 = objc_allocWithZone(a1);
  specialized UIHostingContentView.init(configuration:)();
}

uint64_t associated type witness table accessor for View.Body : View in _UIHostingConfigurationBackgroundView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t assignWithCopy for UIHostingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  v16 = *(_BYTE *)(v15 + 16);
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_BYTE *)(v14 + 16) = v16;
  v17 = *(_BYTE *)(v15 + 32);
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  *(_BYTE *)(v14 + 32) = v17;
  v18 = *(_BYTE *)(v15 + 48);
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(v15 + 40);
  *(_BYTE *)(v14 + 48) = v18;
  v19 = *(_BYTE *)(v15 + 64);
  *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
  *(_BYTE *)(v14 + 64) = v19;
  v20 = *(_BYTE *)(v15 + 80);
  *(_QWORD *)(v14 + 72) = *(_QWORD *)(v15 + 72);
  *(_BYTE *)(v14 + 80) = v20;
  v21 = *(_BYTE *)(v15 + 96);
  *(_QWORD *)(v14 + 88) = *(_QWORD *)(v15 + 88);
  *(_BYTE *)(v14 + 96) = v21;
  *(_BYTE *)(v14 + 97) = *(_BYTE *)(v15 + 97);
  *(_BYTE *)(v14 + 98) = *(_BYTE *)(v15 + 98);
  return a1;
}

uint64_t initializeWithTake for UIHostingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)(v15 + 49);
  v17 = *(_OWORD *)(v15 + 40);
  v18 = *(_OWORD *)(v15 + 24);
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
  *(_OWORD *)(v14 + 24) = v18;
  *(_OWORD *)(v14 + 40) = v17;
  *(_OWORD *)(v14 + 49) = v16;
  v19 = *(_OWORD *)(v15 + 72);
  *(_OWORD *)(v14 + 81) = *(_OWORD *)(v15 + 81);
  *(_OWORD *)(v14 + 72) = v19;
  *(_BYTE *)(v14 + 97) = *(_BYTE *)(v15 + 97);
  *(_BYTE *)(v14 + 98) = *(_BYTE *)(v15 + 98);
  return a1;
}

uint64_t assignWithTake for UIHostingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  v16 = *(_BYTE *)(v15 + 16);
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_BYTE *)(v14 + 16) = v16;
  v17 = *(_BYTE *)(v15 + 32);
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  *(_BYTE *)(v14 + 32) = v17;
  v18 = *(_BYTE *)(v15 + 48);
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(v15 + 40);
  *(_BYTE *)(v14 + 48) = v18;
  v19 = *(_BYTE *)(v15 + 64);
  *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
  *(_BYTE *)(v14 + 64) = v19;
  v20 = *(_BYTE *)(v15 + 80);
  *(_QWORD *)(v14 + 72) = *(_QWORD *)(v15 + 72);
  *(_BYTE *)(v14 + 80) = v20;
  v21 = *(_BYTE *)(v15 + 96);
  *(_QWORD *)(v14 + 88) = *(_QWORD *)(v15 + 88);
  *(_BYTE *)(v14 + 96) = v21;
  *(_BYTE *)(v14 + 97) = *(_BYTE *)(v15 + 97);
  *(_BYTE *)(v14 + 98) = *(_BYTE *)(v15 + 98);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIHostingConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0xFE)
    v9 = 254;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64);
  if (v9 >= a2)
  {
    if (v6 == v9)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    v18 = (v11 + a1) & ~v10;
    if (v8 == v9)
      return (*(uint64_t (**)(uint64_t))(v7 + 48))(v18);
    v19 = *(unsigned __int8 *)(v18 + v12);
    if (v19 >= 2)
      return ((v19 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  v13 = (a2 - v9 + 0xFFFFFF) >> (8 * ((((v11 & ~(_BYTE)v10) + v12) & 0xF8) + 99));
  if ((((v11 & ~(_DWORD)v10) + (_DWORD)v12) & 0xFFFFFFF8) == 0xFFFFFFA0)
    v14 = v13 + 1;
  else
    v14 = 2;
  if (v14 >= 0x10000)
    v15 = 4;
  else
    v15 = 2;
  if (v14 < 0x100)
    v15 = 1;
  if (v14 >= 2)
    v16 = v15;
  else
    v16 = 0;
  return ((uint64_t (*)(void))((char *)&loc_187543C74 + 4 * byte_187C3EE50[v16]))();
}

void storeEnumTagSinglePayload for UIHostingConfiguration(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = v7;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((((*(_QWORD *)(v5 + 64) + v9) & ~v9) + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + 99;
  if (v8 >= a3)
  {
    v13 = 0u;
    if (v8 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + (_DWORD)v9) & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64)) & 0xFFFFFFF8) == 0xFFFFFFA0)
      v11 = ((a3 - v8 + 0xFFFFFF) >> 24) + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (v8 >= a2)
LABEL_20:
      __asm { BR              X0 }
  }
  v14 = ~v8 + a2;
  bzero(a1, ((((*(_QWORD *)(v5 + 64) + v9) & ~v9) + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + 99);
  if ((_DWORD)v10 == 3)
  {
    *a1 = v14;
    *((_BYTE *)a1 + 2) = BYTE2(v14);
  }
  else
  {
    *(_DWORD *)a1 = v14;
  }
  __asm { BR              X11 }
}

void sub_187543E68(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x187543EE4);
}

void sub_187543E70(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187543E78);
  JUMPOUT(0x187543EE4);
}

void sub_187543EBC(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x187543EE4);
}

void sub_187543EC4(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x187543EE4);
}

uint64_t sub_187543ECC(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x187543EE4);
  if (v6 == v10)
  {
    v3 = *(uint64_t (**)(uint64_t))(v9 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v10)
      JUMPOUT(0x187543ED8);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

uint64_t getEnumTagSinglePayload for _UIHostingConfigurationBackgroundView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187543FAC + 4 * byte_187C3EE5F[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _UIHostingConfigurationBackgroundView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for UIHostingBackgroundView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIHostingBackgroundView);
}

uint64_t type metadata completion function for UIHostingContentViewWithoutInteractions()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1875441EC()
{
  uint64_t v0;

  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  v0 = type metadata accessor for _ShapeView();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0E50], v0);
}

uint64_t assignWithCopy for HostingContentViewRootModifier(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  v4 = (uint64_t *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = (uint64_t *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 72);
  if (v5 == 1)
  {
    if (v6 == 1)
    {
      v8 = *v7;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *v4 = v8;
    }
    else
    {
      *(_QWORD *)(a1 + 72) = v6;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      swift_retain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of ListItemTint(a1 + 72);
    v9 = *(_BYTE *)(a2 + 80);
    *v4 = *v7;
    *(_BYTE *)(a1 + 80) = v9;
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v6;
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  }
  v10 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v11;
  v12 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v12;
  v13 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v13;
  v14 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v14;
  v15 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v15;
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  return a1;
}

uint64_t getEnumTagSinglePayload for HostingContentViewRootModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 178))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HostingContentViewRootModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 176) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 178) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 178) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IsInHostingConfiguration()
{
  return &type metadata for IsInHostingConfiguration;
}

unint64_t lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration;
  if (!lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInHostingConfiguration, &type metadata for IsInHostingConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration;
  if (!lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInHostingConfiguration, &type metadata for IsInHostingConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration;
  if (!lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInHostingConfiguration, &type metadata for IsInHostingConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration;
  if (!lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInHostingConfiguration, &type metadata for IsInHostingConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration;
  if (!lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInHostingConfiguration, &type metadata for IsInHostingConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInHostingConfiguration and conformance IsInHostingConfiguration);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInHostingConfiguration()
{
  return &protocol witness table for IsInHostingConfiguration;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HostingContentViewRootModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void specialized UIHostingContentView.supports(_:)()
{
  type metadata accessor for UIHostingConfiguration();
}

uint64_t sub_18754466C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v10 - v6;
  outlined init with copy of TableColumnList(v2, v3 - 72);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for UIContentConfiguration);
  v8 = swift_dynamicCast();
  if ((_DWORD)v8)
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
  return v8;
}

uint64_t outlined destroy of PreferenceList.Value<WeakBox<UIButton>?>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for PreferenceList.Value<WeakBox<UIButton>?>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<UIButton>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE28C0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SwipeActions.Value?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1875447AC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1875447D0()
{
  _QWORD *v0;
  uint64_t v1;

  swift_release();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_release();
    swift_release();
  }
  if (v0[15])
  {
    swift_release();
    swift_release();
    v1 = v0[17];
    if (v1)
    {
      if (v1 == 1)
        return swift_deallocObject();
      swift_release();
    }
    if (v0[19])
      swift_release();
  }
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration()(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration()(a1, a2, *(_QWORD *)(v2 + 48), v2 + 56);
}

_QWORD *outlined retain of SwipeActions.Configuration(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[8];
  v10 = a1[7];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v2, v3);
  outlined copy of Binding<SwipeActionResultToken?>?(v10, v4, v5, v6, v7, v8);
  return a1;
}

uint64_t outlined init with take of Binding<SwipeActionResultToken?>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SwipeActionResultToken?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SwipeActionResultToken?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Binding<SwipeActionResultToken?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<SwipeActionResultToken?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for SwipeActionResultToken?);
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<SwipeActionResultToken?>);
  }
}

id partial apply for closure #2 in UIHostingContentView.updateViewGraphForDisplay(isHidden:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_invalidateIntrinsicContentSize);
}

uint64_t sub_1875449D4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in UIHostingContentView.updateViewGraphForDisplay(isHidden:)()
{
  GraphHost.incrementPhase()();
}

uint64_t sub_187544A28()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UIHostingContentView.setupSizeInvalidationHandler(_:)()
{
  closure #1 in UIHostingContentView.setupSizeInvalidationHandler(_:)();
}

uint64_t sub_187544A5C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_187544A80()
{
  return swift_deallocObject();
}

void specialized UIHostingContentView._configuration.setter()
{
  swift_beginAccess();
  type metadata accessor for UIHostingConfiguration();
}

void sub_187544AF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 24))(v2, v1, a1);
  swift_endAccess();
  UIHostingContentView.updateHostedViews()();
}

void partial apply for closure #1 in UIHostingContentView.isInList.didset()
{
  GraphHost.uninstantiate(immediately:)(0);
}

uint64_t sub_187544B70()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void specialized UIHostingContentView._containerBackgroundView.getter()
{
  UIHostingContentView.updateBackgroundHostIfNeeded(_:)(0, 0);
}

uint64_t sub_187544BA8()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9C8));
}

void specialized UIHostingContentView._defaultListContentConfigurationProvider.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x9D0));
  v4 = *v3;
  *v3 = a1;
  v3[1] = a2;
  outlined copy of AppIntentExecutor?(a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
  UIHostingContentView.updateHostedViews()();
}

uint64_t specialized UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA08));
}

void specialized UIHostingContentView.init(rootView:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  _QWORD *v8;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9B0)) = 0;
  v2 = (_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x9C0));
  *v2 = 0;
  v2[1] = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x9C8)) = 0;
  v3 = (_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x9D0));
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x9D8));
  *v4 = 0;
  v4[1] = 0;
  v5 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x9E0);
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *(_DWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x9E8)) = -1;
  v6 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x9F0);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = 0;
  *((_WORD *)v6 + 12) = 256;
  v7 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x9F8);
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  *((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0xA00)) = 0;
  v8 = (_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xA08));
  *v8 = 0;
  v8[1] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id partial apply for thunk for @escaping @callee_unowned @convention(block) () -> (@autoreleased UIListContentConfiguration?)()
{
  uint64_t v0;

  return (id)(*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t partial apply for closure #1 in UIHostingContentView.init(configuration:)()
{
  return closure #1 in UIHostingContentView.init(configuration:)();
}

uint64_t sub_187544DF4()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for ViewInputFlagModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<IsInHostingConfiguration>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration, (uint64_t)&type metadata for IsInHostingConfiguration, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35E0]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for ContentConfigurationBasedRootEnvironment);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BC0]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<HostingContentViewRootModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<HostingContentViewRootModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<HostingContentViewRootModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<HostingContentViewRootModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HostingContentViewRootModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier, (uint64_t)&unk_1E1B19BE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<HostingContentViewRootModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t destroy for PickerContentView(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PickerContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  id v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 24, a2 + 24, v7);
  v9 = *(void **)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PickerContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  void *v8;
  void *v9;
  id v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  v8 = *(void **)(a2 + 64);
  v9 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  v10 = v8;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PickerContentView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v8 = a2[8];
  v9 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v8;

  *(_QWORD *)(a1 + 72) = a2[9];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PickerContentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PickerContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for PickerContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PickerContentView);
}

uint64_t associated type witness table accessor for View.Body : View in PickerContentView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 PickerContentView.init(selection:items:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __n128 result;

  *(_QWORD *)a3 = swift_getKeyPath();
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 40) = v6;
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a3 + 56) = result;
  *(_QWORD *)(a3 + 72) = *(_QWORD *)(a2 + 48);
  return result;
}

uint64_t PickerContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v12[56];
  _OWORD v13[6];

  outlined init with copy of SubviewsCollection(v2 + 24, (uint64_t)v12);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v13, v2, a1);
  v5 = (_OWORD *)swift_allocObject();
  v6 = *(_OWORD *)(a1 + 16);
  v7 = v13[2];
  v8 = v13[3];
  v9 = v13[0];
  v5[3] = v13[1];
  v5[4] = v7;
  v10 = v13[4];
  v5[5] = v8;
  v5[6] = v10;
  v5[1] = v6;
  v5[2] = v9;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>();
  lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type Subview and conformance Subview();
  ForEach<>.init(_:content:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, a2, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>);
  *(_QWORD *)(a2 + 96) = closure #1 in View.collapsingInlinePickerSections();
  *(_QWORD *)(a2 + 104) = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>);
}

uint64_t closure #1 in PickerContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v31[11];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[7];
  uint64_t v37;
  _BYTE *(*v38)(_BYTE *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v8 = type metadata accessor for PickerContentView(0, a3, a4, a4);
  v9 = PickerContentView.isItemSelected(_:)();
  v10 = *(_QWORD *)(a1 + 88);
  LOBYTE(v36[0]) = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v40 = v9;
  LOBYTE(v41) = v31[0];
  outlined init with copy of Subview(a1, (uint64_t)&v42);
  *(_QWORD *)&v31[0] = v10;
  LOBYTE(v32) = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  KeyPath = swift_getKeyPath();
  v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = 1;
  outlined init with copy of PickerItemView<Subview>((uint64_t)&v40, (uint64_t)v36);
  v37 = KeyPath;
  v38 = partial apply for closure #1 in View.hoverEffectDisabled(_:);
  v39 = v12;
  outlined destroy of PickerItemView<Subview>((uint64_t)&v40);
  *(_QWORD *)&v31[0] = *(_QWORD *)(a1 + 88);
  v40 = 0;
  v41 = 0;
  v43 = 0;
  v42 = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v14 = v32;
  v13 = v33;
  v15 = v34;
  v16 = v35;
  v17 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v36, (uint64_t)&v40, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>);
  v44 = v17;
  v45 = v32;
  v46 = v33;
  v47 = v34;
  v48 = v35;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v40, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>);
  swift_bridgeObjectRetain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v40, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, (uint64_t)&v40, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
  v49 = v14;
  v50 = v13;
  v51 = v15;
  v52 = v16;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>);
  v18 = swift_getKeyPath();
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v36, a2, v8);
  outlined init with copy of Subview(a1, (uint64_t)v31);
  v19 = swift_allocObject();
  v20 = v36[3];
  *(_OWORD *)(v19 + 64) = v36[2];
  *(_OWORD *)(v19 + 80) = v20;
  v21 = v36[4];
  v22 = v36[1];
  *(_OWORD *)(v19 + 32) = v36[0];
  *(_OWORD *)(v19 + 48) = v22;
  v23 = v31[2];
  v24 = v31[4];
  v25 = v31[5];
  *(_OWORD *)(v19 + 160) = v31[3];
  *(_OWORD *)(v19 + 176) = v24;
  *(_OWORD *)(v19 + 192) = v25;
  v26 = v31[0];
  v27 = v31[1];
  *(_OWORD *)(v19 + 96) = v21;
  *(_OWORD *)(v19 + 112) = v26;
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a4;
  *(_OWORD *)(v19 + 128) = v27;
  *(_OWORD *)(v19 + 144) = v23;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v40, (uint64_t)a5, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
  a5[26] = v18;
  a5[27] = partial apply for closure #2 in closure #1 in PickerContentView.body.getter;
  a5[28] = v19;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v40, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
}

uint64_t PickerContentView.isItemSelected(_:)()
{
  uint64_t (*v0)(void);
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for Binding();
  v0 = MEMORY[0x1E0CE75A0];
  v1 = type metadata accessor for Array();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))v0);
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v1);
  v2 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t closure #2 in closure #1 in PickerContentView.body.getter(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *i;
  char v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;

  v8 = *(_QWORD *)a2;
  v9 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v9);
  specialized Environment.wrappedValue.getter(v8, v9, v21);
  result = outlined consume of Environment<Bool>.Content(v8, v9);
  v12 = v21[0];
  v13 = HIBYTE(LOWORD(v21[0]));
  if ((BYTE1(v21[0]) & 0xFE) != 4)
  {
    type metadata accessor for PickerContentView(0, a4, a5, v11);
    v14 = PickerContentView.isItemSelected(_:)();
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v17 = v16;
      for (i = (_BYTE *)(v14 + 48); ; i += 24)
      {
        v19 = *i;
        v20 = *((_QWORD *)i - 1);
        v21[0] = *((_QWORD *)i - 2);
        v21[1] = v20;
        v22 = v19;
        MEMORY[0x18D75B9C8](&v23, v17);
        if ((v23 & 1) != 0)
          break;
        if (!--v15)
          return swift_bridgeObjectRelease();
      }
      result = swift_bridgeObjectRelease();
      *a1 = v12;
      a1[1] = v13;
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t closure #1 in PickerContentView.isItemSelected(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  _QWORD v15[2];

  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v15 - v7;
  v15[1] = *(_QWORD *)(a1 + 88);
  TraitValues.tag<A>(for:)();
  type metadata accessor for Binding();
  v9 = Binding.selecting<A>(_:)();
  v11 = v10;
  v13 = v12;
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v13 & 1;
  return result;
}

uint64_t sub_187545A8C()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PickerContentView.body.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in PickerContentView.body.getter(a1, v2 + 32, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E0CE2A78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>, (uint64_t)&type metadata for KeyboardShortcutPickerOptionTraitKey, (uint64_t)&protocol witness table for KeyboardShortcutPickerOptionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, type metadata accessor for ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, type metadata accessor for ViewInputFlagModifier<HasKeyboardShortcut>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>);
}

void type metadata accessor for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PickerItemView<Subview>, (uint64_t)&type metadata for Subview, (uint64_t)&protocol witness table for Subview, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PickerItemView);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>);
  }
}

uint64_t type metadata accessor for PickerItemView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PickerItemView);
}

void type metadata accessor for ViewInputFlagModifier<HasKeyboardShortcut>(uint64_t a1)
{
  unint64_t HasKeyboardShortcut;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<HasKeyboardShortcut>)
  {
    HasKeyboardShortcut = lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for HasKeyboardShortcut, HasKeyboardShortcut, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HasKeyboardShortcut>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E0CE2A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for ViewInputFlagModifier<A>);
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type PickerItemView<Subview> and conformance PickerItemView<A>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PickerItemView<Subview> and conformance PickerItemView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PickerItemView<Subview> and conformance PickerItemView<A>;
  if (!lazy protocol witness table cache variable for type PickerItemView<Subview> and conformance PickerItemView<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PickerItemView<Subview>, (uint64_t)&type metadata for Subview, (uint64_t)&protocol witness table for Subview, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PickerItemView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerItemView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PickerItemView<Subview> and conformance PickerItemView<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in View.collapsingInlinePickerSections()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  _QWORD *v34;
  void (*v35)(double);
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t (*v41)();
  uint64_t v42;
  void (*v43)();
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int (*v61)(char *, uint64_t, int *);
  char v62;
  _QWORD *v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _OWORD *v68;
  int *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _OWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _OWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void (*v92)();
  uint64_t v93;
  int64_t v94;
  int64_t v95;
  _QWORD *v96;
  int64_t v97;
  int64_t v98;
  _QWORD *v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  int64_t v110;
  _QWORD *v111;
  __int128 v112;
  _OWORD *v113;
  _QWORD *v114;
  _OWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  _BYTE *v118;
  _QWORD *v119;
  uint64_t v120;
  _OWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  char *v124;
  uint64_t v125;
  _QWORD *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(double);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152[8];
  _QWORD *v153;

  v2 = type metadata accessor for PlatformItemList.Item();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v151 = (uint64_t)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v110 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v110 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v131 = (uint64_t)&v110 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v130 = (uint64_t)&v110 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v129 = (uint64_t)&v110 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (int64_t *)((char *)&v110 - v25);
  type metadata accessor for PlatformItemList.Item?();
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v110 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v153 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v35 = *(void (**)(double))(v3 + 56);
  v145 = (uint64_t)&v110 - v36;
  v143 = (int *)v2;
  v132 = v35;
  v35(v33);
  v144 = a1;
  result = *a1;
  v38 = *(_QWORD *)(*a1 + 16);
  if (!v38)
  {
LABEL_60:
    swift_bridgeObjectRelease();
    if (v34[2])
      specialized Array.append<A>(contentsOf:)((uint64_t)v34);
    else
      swift_bridgeObjectRelease();
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v145, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
    *v144 = v153;
    return result;
  }
  v124 = v9;
  LODWORD(v133) = 0;
  v39 = (uint64_t)v13;
  v40 = 0;
  v147 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v149 = result + v147;
  v123 = (_QWORD *)(v39 + 8);
  v122 = v39 + 64;
  v121 = (_OWORD *)(v39 + 248);
  v120 = v39 + 472;
  v119 = (_QWORD *)(v39 + 504);
  v118 = (_BYTE *)(v39 + 521);
  v117 = (_QWORD *)(v39 + 528);
  v116 = v39 + 560;
  v115 = (_OWORD *)(v39 + 416);
  v114 = (_QWORD *)(v39 + 304);
  v126 = (_QWORD *)v39;
  v113 = (_OWORD *)(v39 + 336);
  v41 = type metadata accessor for PlatformItemList.Item;
  v128 = v38 - 1;
  v112 = xmmword_187BF9840;
  v148 = result;
  v146 = v38;
  v150 = v3;
  while (v40 < *(_QWORD *)(result + 16))
  {
    v42 = *(_QWORD *)(v3 + 72);
    v43 = (void (*)())v41;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v149 + v42 * v40, (uint64_t)v26, (uint64_t (*)(_QWORD))v41);
    v44 = v26[41];
    if (v44 >> 62 != 3 || (v44 & 0xFFFFFFFFFFFFFFFCLL) == 0x3FFFFFFFCLL)
      goto LABEL_16;
    v46 = v26[37];
    v45 = v26[38];
    v47 = v26[39];
    v48 = v26[40];
    v49 = v26[42];
    v50 = v26[43];
    v51 = v26[44];
    v52 = v26[45];
    v53 = v26[46];
    v54 = v26[47];
    v56 = v26[48];
    v55 = v26[49];
    v57 = v44 == 0xC000000000000000 && (v45 | v46 | v47 | v48 | v49 | v50 | v51 | v52 | v53 | v54 | v56 | v55) == 0;
    v58 = v57;
    if (v57)
    {
      v125 = v26[48];
      v134 = v54;
      v135 = v53;
      v136 = v52;
      v137 = v45;
      v138 = v47;
      v139 = v48;
      v140 = v49;
      v141 = v50;
      v142 = v51;
      v127 = v58;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v145, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
      v61 = *(unsigned int (**)(char *, uint64_t, int *))(v150 + 48);
      v133 = (uint64_t)v30;
      if (v61(v30, 1, v143) == 1)
      {
        v62 = v125;
        outlined copy of PlatformItemList.Item.SystemItem((id)v46, v137, v138, v139, 0xC000000000000000, v140, v141, v142, v136, v135, v134, v125, v55);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v133, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
        if (v34[2])
        {
          _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v152);
          v63 = v123;
          *v123 = 0;
          v63[1] = 0;
          *((_BYTE *)v63 + 24) = 0;
          v63[2] = 0;
          v64 = (uint64_t)v126;
          v126[5] = -1;
          v65 = v121;
          *v121 = 0u;
          v65[1] = 0u;
          v65[2] = 0u;
          v66 = v120;
          *(_QWORD *)(v120 + 8) = 0;
          *(_QWORD *)(v66 + 16) = 0;
          *(_QWORD *)v66 = 0;
          *(_BYTE *)(v66 + 24) = 0;
          v67 = v119;
          *v119 = 0;
          v67[1] = 0;
          *((_BYTE *)v67 + 16) = 0;
          *v118 = 1;
          *(_QWORD *)(v64 + 552) = 1;
          *(_QWORD *)(v64 + 624) = 0;
          v68 = (_OWORD *)v116;
          *(_QWORD *)(v116 + 48) = 0;
          v68[1] = 0u;
          v68[2] = 0u;
          *v68 = 0u;
          *(_WORD *)(v64 + 633) = 773;
          v69 = v143;
          v133 = v64 + v143[28];
          *(_BYTE *)(v64 + 56) = 1;
          v70 = type metadata accessor for CommandOperation();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v133, 1, 1, v70);
          v71 = v126;
          *((_BYTE *)v126 + v69[29]) = 0;
          *((_BYTE *)v71 + v69[30]) = 0;
          *((_BYTE *)v71 + v69[31]) = 2;
          *((_BYTE *)v71 + v69[32]) = 0;
          v133 = v69[33];
          *v71 = 0;
          v72 = (uint64_t)v71;
          outlined init with take of Image.Resolved?((uint64_t)v152, v122);
          *(_OWORD *)(v72 + 400) = v112;
          v73 = v115;
          *v115 = 0u;
          v73[1] = 0u;
          v73[2] = 0u;
          *((_BYTE *)v73 + 48) = 0;
          v74 = v117;
          v117[1] = 0;
          v74[2] = 0;
          *v74 = 0;
          *(_QWORD *)(v72 + v133) = 0;
          *(_QWORD *)(v72 + 48) = 0;
          *(_QWORD *)(v72 + 616) = v34;
          *(_BYTE *)(v72 + 632) = 0;
          *(_QWORD *)(v72 + 296) = 2;
          v75 = v114;
          v114[1] = 0;
          v75[2] = 0;
          *v75 = 0;
          *(_QWORD *)(v72 + 328) = 0xC000000000000000;
          v76 = v113;
          *v113 = 0u;
          v76[1] = 0u;
          v76[2] = 0u;
          v76[3] = 0u;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v72, (uint64_t)v124, (uint64_t (*)(_QWORD))v43);
          v77 = v153;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v77 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
          v79 = v77[2];
          v78 = v77[3];
          v80 = v79 + 1;
          v62 = v125;
          if (v79 >= v78 >> 1)
          {
            v133 = v79 + 1;
            v107 = v77;
            v108 = v79;
            v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1, v107);
            v80 = v133;
            v79 = v108;
            v77 = (_QWORD *)v109;
          }
          v77[2] = v80;
          outlined init with take of PlatformItemList.Item((uint64_t)v124, (uint64_t)v77 + v147 + v79 * v42);
          v153 = v77;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v126, (uint64_t (*)(_QWORD))v43);
          v81 = v145;
          v82 = v145;
        }
        else
        {
          swift_bridgeObjectRelease();
          v81 = v145;
          v82 = v145;
        }
        v92 = type metadata accessor for PlatformItemList.Item?;
      }
      else
      {
        v87 = v130;
        outlined init with take of PlatformItemList.Item(v133, v130);
        v133 = *(_QWORD *)(v87 + 616);
        outlined copy of PlatformItemList.Item.SystemItem((id)v46, v137, v138, v139, 0xC000000000000000, v140, v141, v142, v136, v135, v134, v125, v55);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v87 + 616) = v34;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v87, v131, (uint64_t (*)(_QWORD))v43);
        v88 = v153;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v88 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88[2] + 1, 1, v88);
        v90 = v88[2];
        v89 = v88[3];
        v91 = v90 + 1;
        v62 = v125;
        if (v90 >= v89 >> 1)
        {
          v133 = v90 + 1;
          v103 = v88;
          v104 = v90;
          v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1, v103);
          v91 = v133;
          v90 = v104;
          v88 = (_QWORD *)v105;
        }
        v88[2] = v91;
        outlined init with take of PlatformItemList.Item(v131, (uint64_t)v88 + v147 + v90 * v42);
        v153 = v88;
        v81 = v145;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v145, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
        v82 = v130;
        v92 = v43;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v82, (uint64_t (*)(_QWORD))v92);
      ((void (*)(uint64_t, uint64_t, uint64_t, int *))v132)(v81, 1, 1, v143);
      outlined consume of PlatformItemList.Item.SystemItem?((void *)v46, v137, v138, v139, 0xC000000000000000, v140, v141, v142, v136, v135, v134, v62, v55);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))v43);
      v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v3 = v150;
      result = v148;
      v41 = (uint64_t (*)())v43;
      if (v128 == v40)
        goto LABEL_60;
      goto LABEL_59;
    }
    if (v44 == 0xC000000000000000 && v46 == 2 && !(v47 | v45 | v48 | v49 | v50 | v51 | v52 | v53 | v54 | v56 | v55))
    {
      v127 = v58;
      v142 = v51;
      v141 = v50;
      v140 = v49;
      v139 = v48;
      v138 = v47;
      v137 = v45;
      v136 = v52;
      v135 = v53;
      v134 = v54;
      if ((v133 & 1) != 0)
      {
        v83 = v54;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v26, v129, (uint64_t (*)(_QWORD))v43);
        outlined copy of PlatformItemList.Item.SystemItem((id)2, v137, v138, v139, 0xC000000000000000, v140, v141, v142, v136, v135, v83, v56, v55);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v34 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
        v85 = v34[2];
        v84 = v34[3];
        v86 = v85 + 1;
        if (v85 >= v84 >> 1)
        {
          v133 = v85 + 1;
          v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v84 > 1, v85 + 1, 1, v34);
          v86 = v133;
          v34 = (_QWORD *)v106;
        }
        v34[2] = v86;
        outlined init with take of PlatformItemList.Item(v129, (uint64_t)v34 + v147 + v85 * v42);
        outlined consume of PlatformItemList.Item.SystemItem?((void *)2, v137, v138, v139, 0xC000000000000000, v140, v141, v142, v136, v135, v134, v56, v55);
        v41 = (uint64_t (*)())v43;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))v43);
      }
      else
      {
        outlined copy of PlatformItemList.Item.SystemItem((id)2, v45, v47, v48, 0xC000000000000000, v49, v50, v51, v52, v53, v54, v56, v55);
        v93 = v145;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v145, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v26, v93, (uint64_t (*)(_QWORD))v43);
        ((void (*)(uint64_t, _QWORD, uint64_t, int *))v132)(v93, 0, 1, v143);
        result = (uint64_t)v153;
        v94 = v153[2];
        v133 = v34[2];
        v110 = v94;
        v95 = v94 + v133;
        if (__OFADD__(v94, v133))
          goto LABEL_65;
        v111 = v153;
        result = swift_isUniquelyReferenced_nonNull_native();
        v96 = v111;
        if (!(_DWORD)result || (v97 = v111[3] >> 1, v97 < v95))
        {
          if (v110 <= v95)
            v98 = v95;
          else
            v98 = v110;
          result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v98, 1, v111);
          v96 = (_QWORD *)result;
          v97 = *(_QWORD *)(result + 24) >> 1;
        }
        v41 = (uint64_t (*)())v43;
        if (v34[2])
        {
          if (v97 - v96[2] < v133)
            goto LABEL_67;
          v99 = v96;
          result = swift_arrayInitWithCopy();
          if (v133)
          {
            v100 = v99[2];
            v101 = __OFADD__(v100, v133);
            v102 = v100 + v133;
            if (v101)
              goto LABEL_68;
            v99[2] = v102;
          }
        }
        else
        {
          v99 = v96;
          if (v133)
            goto LABEL_66;
        }
        swift_bridgeObjectRelease();
        outlined consume of PlatformItemList.Item.SystemItem?((void *)2, v137, v138, v139, 0xC000000000000000, v140, v141, v142, v136, v135, v134, v56, v55);
        v153 = v99;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))v41);
        v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v3 = v150;
      result = v148;
      if (v128 == v40)
        goto LABEL_60;
LABEL_59:
      LODWORD(v133) = v127 ^ 1;
      ++v40;
    }
    else
    {
LABEL_16:
      v41 = (uint64_t (*)())v43;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v26, v151, (uint64_t (*)(_QWORD))v43);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v34 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
      v60 = v34[2];
      v59 = v34[3];
      if (v60 >= v59 >> 1)
        v34 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1, v34);
      v3 = v150;
      ++v40;
      v34[2] = v60 + 1;
      outlined init with take of PlatformItemList.Item(v151, (uint64_t)v34 + v147 + v60 * v42);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))v41);
      result = v148;
      if (v146 == v40)
        goto LABEL_60;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

void type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>();
    lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
    lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>);
  }
}

void type metadata accessor for PlatformItemList.Item?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PlatformItemList.Item?)
  {
    type metadata accessor for PlatformItemList.Item();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?);
  }
}

uint64_t PickerItemView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t KeyPath;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[2];
  _QWORD v111[2];
  _QWORD v112[2];
  _QWORD v113[2];
  _QWORD v114[2];
  _QWORD v115[2];
  _QWORD v116[2];
  _QWORD v117[2];
  char v118;
  char v119;
  uint64_t v120;

  v109 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for Toggle(0, v4, v5, a2);
  v100 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v99 = (uint64_t *)((char *)&v89 - v8);
  v9 = type metadata accessor for ModifiedContent();
  v98 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v97 = (uint64_t)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v96 = (uint64_t)&v89 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v89 - v17;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v107 = v9;
  v19 = type metadata accessor for ModifiedContent();
  v102 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v104 = (uint64_t)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v101 = (char *)&v89 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v103 = (char *)&v89 - v27;
  v28 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v89 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v89 - v35;
  v105 = type metadata accessor for _ConditionalContent();
  v108 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105, v37);
  v39 = (char *)&v89 - v38;
  if (*((_BYTE *)v106 + 8) == 1)
  {
    static ViewBuilder.buildExpression<A>(_:)((char *)v106 + *(int *)(a1 + 40), v4, v5);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v36, v4, (uint64_t)v32);
    v111[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Toggle<A>, v6);
    v111[1] = &protocol witness table for AccessibilityAttachmentModifier;
    v40 = v4;
    v41 = MEMORY[0x1E0CE2E70];
    v42 = v107;
    v110[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v107, v111);
    v110[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    MEMORY[0x18D75FFDC](v41, v19, v110);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v32, v40);
    v43 = *(void (**)(char *, uint64_t))(v28 + 8);
    v43(v32, v40);
    v43(v36, v40);
    v44 = v6;
    v45 = v42;
    v46 = v105;
    v47 = (uint64_t)v39;
    v49 = v108;
    v48 = v109;
  }
  else
  {
    v91 = v18;
    v90 = v19;
    v93 = (char *)&v89 - v38;
    v120 = *v106;
    v50 = v106;
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath, v52);
    type metadata accessor for [Binding<Bool>]();
    v54 = v53;
    v55 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [Binding<Bool>] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [Binding<Bool>], MEMORY[0x1E0DEAF48]);
    swift_bridgeObjectRetain();
    v56 = v99;
    v94 = v4;
    v95 = v5;
    Toggle.init<A>(sources:isOn:label:)((uint64_t)&v120, KeyPath, (void (*)(void))partial apply for closure #1 in PickerItemView.body.getter, (uint64_t)(&v89 - 6), v4, v54, v5, v55, v99);
    v57 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Toggle<A>, v6);
    v58 = lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    v59 = lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    v60 = lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    v87 = v59;
    v88 = v60;
    v86 = v58;
    v61 = v97;
    v89 = v57;
    View.accessibilityValue<A>(_:description:)(v60, 0, 0, 0, 0, v6, MEMORY[0x1E0CE56A0], v57, v97, v86);
    (*(void (**)(_QWORD *, uint64_t))(v100 + 8))(v56, v6);
    v62 = v96;
    v63 = v107;
    ModifiedContent<>.accessibilityRemoveTraits(_:)(v107, v96);
    v64 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
    v64(v61, v63);
    v65 = *v50;
    v66 = *(_QWORD *)(*v50 + 16);
    v67 = v6;
    v45 = v63;
    v92 = v67;
    if (v66)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      v69 = v68;
      swift_bridgeObjectRetain();
      v70 = (_BYTE *)(v65 + 48);
      v71 = 4;
      while (1)
      {
        v72 = *v70;
        v73 = *((_QWORD *)v70 - 1);
        v117[0] = *((_QWORD *)v70 - 2);
        v117[1] = v73;
        v118 = v72;
        MEMORY[0x18D75B9C8](&v119, v69);
        if ((v119 & 1) != 0)
          break;
        v70 += 24;
        if (!--v66)
        {
          v71 = 0;
          break;
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v71 = 0;
    }
    v46 = v105;
    v74 = v89;
    v117[0] = v71;
    v75 = (uint64_t)v91;
    ModifiedContent<>.accessibilityAddTraits(_:)(v117, v45, (uint64_t)v91);
    v64(v62, v45);
    v116[0] = v74;
    v116[1] = &protocol witness table for AccessibilityAttachmentModifier;
    v76 = MEMORY[0x1E0CE2E70];
    v77 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v45, v116);
    v78 = v101;
    View.transformPlatformItemList<A>(_:_:)((uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)closure #3 in PickerItemView.body.getter, 0, v45, (uint64_t)&type metadata for SelectionPlatformItemListFlags, v77, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags);
    v64(v75, v45);
    v115[0] = v77;
    v115[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    v19 = v90;
    v79 = MEMORY[0x18D75FFDC](v76, v90, v115);
    v80 = (uint64_t)v103;
    static ViewBuilder.buildExpression<A>(_:)(v78, v19, v79);
    v81 = *(void (**)(char *, uint64_t))(v102 + 8);
    v81(v78, v19);
    v82 = v104;
    static ViewBuilder.buildBlock<A>(_:)(v80, v19, v104);
    v47 = (uint64_t)v93;
    v5 = v95;
    static ViewBuilder.buildEither<A, B>(second:)(v82, v94, v19);
    v81((char *)v82, v19);
    v81((char *)v80, v19);
    v49 = v108;
    v48 = v109;
    v44 = v92;
  }
  v114[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Toggle<A>, v44);
  v114[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v83 = MEMORY[0x1E0CE2E70];
  v113[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v45, v114);
  v113[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  v84 = MEMORY[0x18D75FFDC](v83, v19, v113);
  v112[0] = v5;
  v112[1] = v84;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v46, v112);
  static ViewBuilder.buildBlock<A>(_:)(v47, v46, v48);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v47, v46);
}

uint64_t closure #1 in PickerItemView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PickerItemView(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 40), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t closure #3 in PickerItemView.body.getter(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t i;
  unint64_t v5;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2)
  {
    v3 = (_QWORD *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_11:
      v1 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    for (i = 0; i != v2; ++i)
    {
      if (i >= v1[2])
      {
        __break(1u);
        goto LABEL_11;
      }
      result = type metadata accessor for PlatformItemList.Item();
      v5 = (unint64_t)v1
         + ((*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
         + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * i;
      if (*(_QWORD *)(v5 + 408) != 1)
        *(_BYTE *)(v5 + 403) = 1;
    }
    *v3 = v1;
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.isEnabled : EnvironmentValues, serialized@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187547910@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18754793C()
{
  return EnvironmentValues.isEnabled.setter();
}

_BYTE *closure #1 in View.disabled(_:)(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_187547974()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of PickerItemView<Subview>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PickerItemView<Subview>, (uint64_t)&type metadata for Subview, (uint64_t)&protocol witness table for Subview, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PickerItemView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PickerItemView<Subview>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PickerItemView<Subview>, (uint64_t)&type metadata for Subview, (uint64_t)&protocol witness table for Subview, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PickerItemView);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_187547A4C@<X0>(_WORD *a1@<X8>)
{
  uint64_t result;
  __int16 v3;

  result = EnvironmentValues.symbolVariants.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187547A8C()
{
  return EnvironmentValues.symbolVariants.setter();
}

uint64_t sub_187547AC0()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in PickerContentView.body.getter(_BYTE *a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in PickerContentView.body.getter(a1, v1 + 32, v1 + 112, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in PickerContentView.isItemSelected(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PickerContentView.isItemSelected(_:)(*(_QWORD *)(v1 + 32), a1);
}

uint64_t type metadata completion function for PickerItemView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PickerItemView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 9) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v12 = (a1 + v6 + 9) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 9) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t destroy for PickerItemView(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for PickerItemView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 9 + a1) & ~v6;
  v8 = (v6 + 9 + a2) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  v9(v7, v8, v4);
  return a1;
}

uint64_t assignWithCopy for PickerItemView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))((*(unsigned __int8 *)(v6 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t initializeWithTake for PickerItemView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for PickerItemView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))((*(unsigned __int8 *)(v6 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PickerItemView(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 9) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 9) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187547F7C + 4 * byte_187C3F2F0[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for PickerItemView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1875481E0()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>> and conformance <> ForEach<A, B, C>, (uint64_t)&protocol witness table for PlatformItemListTransformModifier<A>);
}

void type metadata accessor for ModifiedContent<ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
  }
}

unint64_t lazy protocol witness table accessor for type ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t HasKeyboard;

  result = lazy protocol witness table cache variable for type ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>();
    v2 = v1;
    HasKeyboard = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v2, &HasKeyboard);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in PickerItemView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in PickerItemView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in PickerItemView.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_187548338(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v4 = a1[1];
  v5 = type metadata accessor for Toggle(255, *a1, v4, a4);
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for _ConditionalContent();
  v13[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Toggle<A>, v5);
  v13[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v9 = MEMORY[0x1E0CE2E70];
  v12[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v13);
  v12[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  v11[0] = v4;
  v11[1] = MEMORY[0x18D75FFDC](v9, v7, v12);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v8, v11);
}

void specialized closure #1 in ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.observeListLayout(handler:)(uint64_t a1, _BYTE *a2)
{
  if (a2)
    *a2 = 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned BSSettingDiffTypes, @unowned UnsafeMutableRawPointer?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

id ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.__deallocating_deinit()
{
  return ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.__deallocating_deinit(0, type metadata accessor for ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector);
}

id ClarityUIListLayoutSettingsDiffAction.diffInspector.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v9[6];

  v1 = OBJC_IVAR____TtC7SwiftUI37ClarityUIListLayoutSettingsDiffAction____lazy_storage___diffInspector;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI37ClarityUIListLayoutSettingsDiffAction____lazy_storage___diffInspector);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7SwiftUI37ClarityUIListLayoutSettingsDiffAction____lazy_storage___diffInspector);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector()), sel_init);
    v9[4] = specialized closure #1 in ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.observeListLayout(handler:);
    v9[5] = 0;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed (@unowned BSSettingDiffTypes, @unowned UnsafeMutableRawPointer?) -> ();
    v9[3] = &block_descriptor_38;
    v5 = _Block_copy(v9);
    swift_release();
    objc_msgSend(v4, sel_observeOtherSetting_withBlock_, 312002, v5);
    _Block_release(v5);
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id ClarityUIListLayoutSettingsDiffAction.__deallocating_deinit(uint64_t a1)
{
  return ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.__deallocating_deinit(a1, type metadata accessor for ClarityUIListLayoutSettingsDiffAction);
}

id ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t type metadata accessor for ClarityUIListLayoutSettingsDiffAction()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector()
{
  return objc_opt_self();
}

void specialized ClarityUIListLayoutSettingsDiffAction._performActions(for:withUpdatedFBSScene:settingsDiff:from:transitionContext:lifecycleActionType:)(void *a1)
{
  id v1;
  id v2;
  id v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  if (a1)
  {
    v1 = a1;
    v2 = ClarityUIListLayoutSettingsDiffAction.diffInspector.getter();
    objc_msgSend(v2, sel_inspectDiff_withContext_, v1, &v4);

    if (v4 == 1)
    {
      v3 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      if (one-time initialization token for didUpdateListLayout != -1)
        swift_once();
      objc_msgSend(v3, sel_postNotificationName_object_, static ClarityUI.didUpdateListLayout, 0);

    }
  }
}

uint64_t NavigationColumnState.hasDismissableColumnContent.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;

  v2 = v0[14];
  v1 = v0[15];
  v3 = v0[16];
  v4 = v0[17];
  v5 = v0[18];
  v6 = v0[19];
  v8 = v0[20];
  v7 = v0[21];
  v9 = v0[22];
  if (v0[6])
  {
    v25 = v0[21];
    v10 = v0[22];
    v11 = v0[14];
    v12 = v0[20];
    v13 = v0[19];
    v14 = v0[18];
    v15 = v0[17];
    v16 = v0[16];
    v17 = v0[15];
    v18 = NavigationListState.hasNonEmptySelection.getter();
    v1 = v17;
    v3 = v16;
    v4 = v15;
    v5 = v14;
    v6 = v13;
    v8 = v12;
    v2 = v11;
    v9 = v10;
    v7 = v25;
    if ((v18 & 1) != 0)
      return 1;
  }
  v19 = v2 & 0xF000000000000007;
  if (v7 < 0)
  {
    result = 1;
    if (v19 != 0xF000000000000007)
      return result;
    return result > 1;
  }
  if (v19 != 0xF000000000000007)
    return 1;
  v24 = v1;
  v26 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88);
  outlined copy of NavigationColumnState.ColumnContent(v2, v1, v3, v4, v5, v6, v8, v7);
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  v21 = v26(v20);
  result = swift_release();
  v27 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
    return result;
  }
  v23 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ColumnContent(v2, v24, v3, v4, v5, v6, v8, v7);
  result = v27 + v23;
  if (__OFADD__(v27, v23))
  {
    __break(1u);
    return 1;
  }
  return result > 1;
}

void NavigationColumnState.update(for:shouldAnimate:splitViewState:)(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 64);
  v2 = HIBYTE(*(_OWORD *)(a2 + 233));
  if (v2 == 255)
  {
    v2 = v3;
    outlined copy of NavigationRequest.Action(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), v3);
  }
  __asm { BR              X10 }
}

unint64_t sub_187548BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  id v35;
  void *v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  int v53;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _OWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  void *v74;
  uint64_t v75;
  __int128 v76[19];
  id v77;
  __int128 v78;
  _OWORD v79[3];
  uint64_t v80;
  char v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  id v87;
  unint64_t v88;
  __int128 v89[16];
  __int128 v90[24];
  uint64_t v91;

  v63 = v10;
  v65 = v8;
  v67 = v14;
  v58 = v13;
  v19 = v7;
  memcpy(v76, v73, 0x12BuLL);
  v78 = v76[12];
  v79[0] = v76[13];
  v79[1] = v76[14];
  v79[2] = v76[15];
  v80 = *(_QWORD *)&v76[16];
  v81 = BYTE8(v76[16]);
  v82 = *(_QWORD *)&v76[17];
  outlined copy of NavigationRequest.Action?(a1, v71, a3, a4, v11, a6, a7, v72, v19);
  outlined retain of NavigationColumnState((uint64_t *)v76);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v20 = (*(uint64_t (**)(__int128 *))(v15 - 72))(&v78);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v21)
  {
    swift_bridgeObjectRelease();
    outlined release of NavigationColumnState((uint64_t *)v76);
    outlined consume of NavigationRequest.Action(*(_QWORD *)(v15 - 72), v75, v67, v9, v65, v63, v58, v12, 0);
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v78);
    outlined init with take of NavigationState.UpdateResult(&v78, v90);
    v41 = 0;
    v22 = 2;
    v20 = 1;
    v23 = v73;
LABEL_29:
    v76[0] = v20;
    LOBYTE(v76[1]) = v22;
    outlined init with take of NavigationState.UpdateResult(v90, (__int128 *)((char *)&v76[1] + 8));
    *(_QWORD *)((char *)&v76[17] + 4) = 0;
    v27 = v21 | (v41 << 32);
    NavigationColumnState.updateAnimationState(requestAnimation:disablesAnimations:seedDelta:)(v91, (v69 & 1) == 0, v27);
    outlined release of NavigationState.RequestResults((uint64_t)v76);
    v53 = *((_DWORD *)v23 + 1) + v41;
    *(_DWORD *)v23 += v21;
    *((_DWORD *)v23 + 1) = v53;
    outlined init with take of NavigationState.UpdateResult(v90, v70);
    return v27;
  }
  outlined release of NavigationColumnState((uint64_t *)v76);
  outlined consume of NavigationRequest.Action(*(_QWORD *)(v15 - 72), v75, v67, v9, v65, v63, v58, v12, 0);
  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v78);
  swift_bridgeObjectRetain();
  outlined init with take of NavigationState.UpdateResult(&v78, v89);
  v22 = 0;
  v23 = v73;
  if (v73[21] < 0)
  {
    *(_QWORD *)&v76[1] = 0;
    v76[0] = MEMORY[0x1E0DEE9D8];
    BYTE8(v76[1]) = 0;
    v76[2] = MEMORY[0x1E0DEE9D8];
    v42 = ResolvedNavigationDestinations.updatePossibilities(for:over:)(v20, 0, 0, (uint64_t)v76);
    if (v74)
    {
      outlined consume of ResolvedNavigationDestinations.ChangeRequest(v20, 0, 0);

      outlined consume of NavigationPath.Representation(*(uint64_t *)&v76[0], *((uint64_t *)&v76[0] + 1), *(uint64_t *)&v76[1], SBYTE8(v76[1]));
      swift_bridgeObjectRelease();
      v43 = 0;
      LODWORD(v41) = 0;
    }
    else
    {
      v43 = v42;
      v41 = HIDWORD(v42);
      outlined consume of NavigationPath.Representation(*(uint64_t *)&v76[0], *((uint64_t *)&v76[0] + 1), *(uint64_t *)&v76[1], SBYTE8(v76[1]));
      swift_bridgeObjectRelease();
      outlined consume of ResolvedNavigationDestinations.ChangeRequest(v20, 0, 0);
    }
    LODWORD(v21) = v43;
    v41 = v41;
    outlined init with take of NavigationState.UpdateResult(v89, v90);
    v22 = 0;
    goto LABEL_29;
  }
  LODWORD(v21) = 0;
  v24 = specialized NavigationColumnState.ColumnContent.mutatePath<A>(transform:)(v73 + 14, v20, 0, 0, (uint64_t)v73);
  if (!v74)
  {
    v37 = v24;
    v38 = v25;
    outlined consume of ResolvedNavigationDestinations.ChangeRequest(v20, 0, 0);
    v39 = HIDWORD(v37);
    if ((v38 & 1) != 0)
      v40 = 0;
    else
      v40 = v37;
    if ((v38 & 1) != 0)
      LODWORD(v39) = 0;
    LODWORD(v21) = v40;
    v41 = v39;
    outlined init with take of NavigationState.UpdateResult(v89, v90);
    goto LABEL_29;
  }
  outlined consume of ResolvedNavigationDestinations.ChangeRequest(v20, 0, 0);
  *(_QWORD *)(v15 - 72) = v20;
  v78 = v20;
  LOBYTE(v79[0]) = 0;
  outlined init with take of NavigationState.UpdateResult(v89, (_OWORD *)((char *)v79 + 8));
  v83 = 0;
  v84 = 0;
  v87 = v74;
  v26 = v74;
  v27 = type metadata accessor for Error();
  if ((swift_dynamicCast() & 1) != 0 && v86 >> 62 == 1)
  {
    v28 = v85;

    *(_QWORD *)&v76[0] = v28;
    type metadata accessor for Any.Type();
    v29 = String.init<A>(describing:)();
    v31 = v30;
    *(_QWORD *)&v76[0] = 0;
    *((_QWORD *)&v76[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(310);
    v32._object = (void *)0x8000000187BE2C70;
    v32._countAndFlagsBits = 0x1000000000000032;
    String.append(_:)(v32);
    v33._countAndFlagsBits = v29;
    v33._object = v31;
    String.append(_:)(v33);
    v34._countAndFlagsBits = 0x1000000000000102;
    v34._object = (void *)0x8000000187BE2CB0;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    MEMORY[0x18D75AC90](*(_QWORD *)&v76[0], *((_QWORD *)&v76[0] + 1));
    outlined release of NavigationState.RequestResults((uint64_t)&v78);
    outlined retain of NavigationState.UpdateResult((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of NavigationState.UpdateResult);
    swift_bridgeObjectRelease();
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v76);
    outlined init with take of NavigationState.UpdateResult(v76, v70);

    return 0;
  }
  else
  {

    v77 = v74;
    v35 = v74;
    if (swift_dynamicCast())
    {
      v27 = v85;
      v36 = (void *)v86;
      if (v86 >= 2)
      {

        memcpy(v76, v73, 0x12BuLL);
        v44 = *((_QWORD *)&v76[10] + 1);
        if ((*((_QWORD *)&v76[10] + 1) & 0x8000000000000000) == 0)
        {
          v68 = *(_QWORD *)&v76[10];
          v64 = v27;
          v66 = *((_QWORD *)&v76[9] + 1);
          v21 = *((_QWORD *)&v76[8] + 1);
          v45 = *(_QWORD *)&v76[9];
          v46 = *((_QWORD *)&v76[7] + 1);
          v47 = *(_QWORD *)&v76[8];
          v57 = *(_QWORD *)&v76[8];
          v56 = *((_QWORD *)&v76[7] + 1);
          v62 = *(_QWORD *)&v76[6];
          v48 = *(_QWORD *)&v76[7];
          v59 = *((_QWORD *)&v76[5] + 1);
          v61 = *((_QWORD *)&v76[6] + 1);
          outlined retain of NavigationColumnState((uint64_t *)v76);
          outlined copy of NavigationColumnState.ColumnContent(v48, v46, v47, v21, v45, v66, v68, v44);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v23 = v73;
          outlined consume of NavigationColumnState.ReplacedRoot?(v48, v56, v57, v21);
          outlined release of NavigationColumnState((uint64_t *)v76);
          v49 = (_QWORD *)swift_allocObject();
          v49[2] = v59;
          v49[3] = v62;
          v49[4] = v61;
          v49[5] = v44;
          outlined copy of Binding<AnyNavigationPath>?(v59, v62);
          outlined copy of Binding<AnyNavigationPath>?(v59, v62);
          swift_retain();
          static Update.enqueueAction(_:)();
          v27 = v64;
          swift_release();
          swift_release();
          outlined consume of Binding<AnyNavigationPath>?(v59, v62);
          LODWORD(v21) = 1;
        }
        v87 = 0;
        v88 = 0xE000000000000000;
        _StringGuts.grow(_:)(151);
        v50._countAndFlagsBits = 0xD00000000000005FLL;
        v50._object = (void *)0x8000000187BE2BD0;
        String.append(_:)(v50);
        v51._countAndFlagsBits = v27;
        v51._object = v36;
        String.append(_:)(v51);
        outlined consume of NavigationPath.Error(v27, (unint64_t)v36);
        v52._countAndFlagsBits = 0x1000000000000036;
        v52._object = (void *)0x8000000187BE2C30;
        String.append(_:)(v52);
        MEMORY[0x18D75AC90](v87, v88);
        swift_bridgeObjectRelease();

        outlined init with take of NavigationState.UpdateResult(v89, v90);
        v41 = 0;
        v20 = *(_QWORD *)(v15 - 72);
        goto LABEL_29;
      }
      outlined release of NavigationState.RequestResults((uint64_t)&v78);
      outlined consume of NavigationPath.Error(v27, (unint64_t)v36);
      outlined retain of NavigationState.UpdateResult((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of NavigationState.UpdateResult);
    }
    else
    {
      outlined retain of NavigationState.UpdateResult((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of NavigationState.UpdateResult);
      outlined release of NavigationState.RequestResults((uint64_t)&v78);
    }

  }
  return v27;
}

void NavigationColumnState.change(from:)(uint64_t a1)
{
  const void *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79[38];
  _BYTE v80[304];
  uint64_t __dst[38];
  _BYTE v82[112];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;

  outlined init with take of Image.Resolved?(a1, (uint64_t)v80, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  memcpy(__dst, v1, 0x12BuLL);
  outlined init with take of Image.Resolved?((uint64_t)v80, (uint64_t)v82, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  v2 = _s7SwiftUI21NavigationColumnStateVSgWOg((uint64_t)v82);
  v3 = __dst[14];
  v4 = __dst[15];
  v5 = __dst[16];
  v73 = __dst[18];
  v74 = __dst[17];
  v72 = __dst[19];
  v6 = __dst[20];
  v7 = __dst[21];
  v75 = __dst[22];
  v76 = __dst[21];
  v8 = __dst[14] & 0xF000000000000007;
  if (v2 != 1)
  {
    v67 = __dst[20];
    v68 = __dst[23];
    if (v8 == 0xF000000000000007)
    {
      if (LOBYTE(__dst[37]) == 1)
      {
        outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of NavigationColumnState?);
        outlined retain of NavigationColumnState(__dst);
        MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
        v13 = (uint64_t)outlined release of NavigationColumnState(__dst);
        goto LABEL_11;
      }
      outlined init with take of Image.Resolved?((uint64_t)v80, (uint64_t)v79, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
      v13 = (uint64_t)outlined retain of NavigationColumnState(v79);
    }
    else
    {
      if (LOBYTE(__dst[37]) == 1)
      {
        outlined init with take of Image.Resolved?((uint64_t)v80, (uint64_t)v79, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
        v13 = (uint64_t)outlined retain of NavigationColumnState(v79);
LABEL_11:
        v14 = v92;
        if ((~v83 & 0xF000000000000007) != 0)
        {
          if (v92 != 1)
          {
            outlined init with take of Image.Resolved?((uint64_t)v80, (uint64_t)v79, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            outlined retain of NavigationColumnState(v79);
            MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
            outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
            goto LABEL_86;
          }
        }
        else
        {
          if (v92 != 1)
            goto LABEL_86;
          outlined init with take of Image.Resolved?((uint64_t)v80, (uint64_t)v79, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
          outlined retain of NavigationColumnState(v79);
          MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
          v13 = outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
          v14 = 1;
        }
LABEL_29:
        v19 = v76;
        v71 = v4;
        v65 = v5;
        if (v76 < 0)
        {
          if (v8 == 0xF000000000000007)
          {
            if ((v14 & 1) != 0)
            {
              outlined retain of NavigationColumnState(__dst);
              MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
              v20 = 0;
LABEL_45:
              v60 = v20;
              v70 = v3;
              v13 = (uint64_t)outlined release of NavigationColumnState(__dst);
              goto LABEL_47;
            }
            goto LABEL_38;
          }
        }
        else if (v8 == 0xF000000000000007)
        {
          if ((v14 & 1) != 0)
          {
            outlined retain of NavigationColumnState(__dst);
            MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
            outlined release of NavigationColumnState(__dst);
            v20 = v76;
LABEL_44:
            outlined retain of NavigationColumnState(__dst);
            outlined copy of NavigationColumnState.ColumnContent(v3, v4, v5, v74, v73, v72, v67, v20);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of NavigationColumnState.ReplacedRoot?(v3, v4, v5, v74);
            goto LABEL_45;
          }
          goto LABEL_38;
        }
        if ((v14 & 1) != 0)
          goto LABEL_43;
        outlined retain of NavigationColumnState(__dst);
        MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
        v13 = (uint64_t)outlined release of NavigationColumnState(__dst);
LABEL_38:
        if ((~v83 & 0xF000000000000007) != 0)
        {
          if (v92 == 1)
            goto LABEL_84;
          outlined init with take of Image.Resolved?((uint64_t)v80, (uint64_t)v79, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
          outlined retain of NavigationColumnState(v79);
          MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
          v13 = outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
          v19 = v76;
        }
        else
        {
          v19 = v76;
          if (v92 == 1)
          {
            outlined init with take of Image.Resolved?((uint64_t)v80, (uint64_t)v79, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            outlined retain of NavigationColumnState(v79);
            MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
            outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
            goto LABEL_84;
          }
        }
LABEL_43:
        v20 = v19;
        if (v19 < 0)
        {
          v70 = v3;
          v60 = 0;
LABEL_47:
          v21 = v83;
          v22 = v85;
          v23 = v86;
          v24 = v87;
          v25 = v89;
          v26 = v90;
          v62 = v91;
          v63 = v86;
          v64 = v90;
          v56 = v85;
          v57 = v83;
          v66 = v84;
          v54 = v88;
          v55 = v87;
          v53 = v89;
          if (v90 < 0)
          {
            v28 = v60;
            if (v60)
            {
              v29 = v90;
              v33 = v91;
              goto LABEL_60;
            }
            v38 = 1;
            v59 = 1;
            v40 = v76;
            v29 = v90;
            v33 = v91;
          }
          else
          {
            v27 = v88;
            outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of NavigationColumnState?);
            outlined copy of NavigationColumnState.ColumnContent(v21, v66, v22, v23, v24, v27, v25, v26);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of NavigationColumnState.ReplacedRoot?(v21, v66, v22, v63);
            v13 = outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
            v28 = v60;
            if (v60)
            {
              v29 = v64;
              if (v64)
              {
                v30 = v93;
                v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 136))(v64);
                v93 = v30;
                if (v30)
                {
                  outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
                  swift_release();
                  swift_release();
                  return;
                }
                v41 = v32;
                v59 = v31;
                swift_release();
                swift_release();
                v38 = v41 & 1;
                v40 = v76;
                v33 = v62;
                goto LABEL_68;
              }
              v33 = v62;
LABEL_60:
              v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 80))(v13);
              if ((v36 & 1) == 0)
              {
                v39 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 88))(v36, v37) != 1;
                swift_release();
                v59 = 2 * v39;
                v38 = 1;
                goto LABEL_67;
              }
LABEL_61:
              swift_release();
              v38 = 1;
              v59 = 1;
LABEL_67:
              v40 = v76;
              goto LABEL_68;
            }
            v29 = v64;
            if (v64)
            {
              v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 80))(v13);
              v33 = v62;
              if ((v34 & 1) == 0)
              {
                v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 88))(v34, v35);
                swift_release();
                v38 = 0;
                goto LABEL_67;
              }
              goto LABEL_61;
            }
            v38 = 1;
            v59 = 1;
            v40 = v76;
            v33 = v62;
          }
LABEL_68:
          v61 = v38;
          if (v40 < 0)
          {
            v42 = MEMORY[0x1E0DEE9D8];
            specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
          }
          else
          {
            outlined retain of NavigationColumnState(__dst);
            outlined copy of NavigationColumnState.ColumnContent(v70, v71, v65, v74, v73, v72, v67, v40);
            swift_release();
            v29 = v64;
            outlined consume of NavigationColumnState.ReplacedRoot?(v70, v71, v65, v74);
            outlined release of NavigationColumnState(__dst);
            v42 = v75;
            v33 = v62;
          }
          v58 = *(_QWORD *)(v42 + 16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v29 < 0)
          {
            v43 = MEMORY[0x1E0DEE9D8];
            specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
          }
          else
          {
            outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of NavigationColumnState?);
            outlined copy of NavigationColumnState.ColumnContent(v57, v66, v56, v63, v55, v54, v53, v29);
            swift_release();
            outlined consume of NavigationColumnState.ReplacedRoot?(v57, v66, v56, v63);
            outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
            v43 = v33;
          }
          v44 = *(_QWORD *)(v43 + 16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for (Int, Int, NavigationState.StackContent.ChangeKind)();
          if (!v61)
          {
            if (v58 | v44)
            {
              outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
              if (v44 && !v58 && __OFADD__(v59, v44))
              {
LABEL_108:
                __break(1u);
                goto LABEL_109;
              }
              return;
            }
LABEL_80:
            outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
            return;
          }
          if (v59 < 2)
          {
            if (!(v58 | v44))
              goto LABEL_80;
            if (v59)
            {
              if (v58 == 1)
              {
                v45 = v71;
                v46 = v65;
                v47 = v74;
                v48 = v76;
                if (!v44)
                  goto LABEL_80;
              }
              else
              {
                v45 = v71;
                v46 = v65;
                v47 = v74;
                v48 = v76;
                if (!v44)
                  goto LABEL_84;
                if (!v58)
                  goto LABEL_80;
              }
              v49 = v44 - v58;
              if (__OFSUB__(v44, v58))
              {
LABEL_109:
                __break(1u);
LABEL_110:
                __break(1u);
                return;
              }
              if (v49 < 0)
              {
                v50 = __OFSUB__(0, v49);
                v49 = v58 - v44;
                if (v50)
                  goto LABEL_110;
              }
              if (v49 < 2)
              {
                if (v48 < 0)
                {
                  v75 = MEMORY[0x1E0DEE9D8];
                  v68 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
                }
                else
                {
                  outlined retain of NavigationColumnState(__dst);
                  outlined copy of NavigationColumnState.ColumnContent(v70, v45, v46, v47, v73, v72, v67, v48);
                  swift_release();
                  outlined consume of NavigationColumnState.ReplacedRoot?(v70, v45, v46, v47);
                  outlined release of NavigationColumnState(__dst);
                }
                v51 = v62;
                if (v64 < 0)
                {
                  v51 = MEMORY[0x1E0DEE9D8];
                  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
                }
                else
                {
                  outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of NavigationColumnState?);
                  outlined copy of NavigationColumnState.ColumnContent(v57, v66, v56, v63, v55, v54, v53, v64);
                  swift_release();
                  outlined consume of NavigationColumnState.ReplacedRoot?(v57, v66, v56, v63);
                  outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
                }
                v52 = v93;
                specialized Sequence.allSatisfy(_:)(v75, v68, v51);
                v93 = v52;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
                return;
              }
            }
LABEL_84:
            outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
            return;
          }
          if (v59 == 2)
            goto LABEL_84;
LABEL_86:
          outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of NavigationColumnState?);
          return;
        }
        goto LABEL_44;
      }
      outlined retain of NavigationColumnState?((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of NavigationColumnState?);
      outlined retain of NavigationColumnState(__dst);
      MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
      v13 = (uint64_t)outlined release of NavigationColumnState(__dst);
    }
    v14 = 0;
    goto LABEL_29;
  }
  if (__dst[21] < 0)
  {
    if (v8 == 0xF000000000000007)
    {
      v12 = 1;
      if (LOBYTE(__dst[37]) != 1)
        return;
      v9 = __dst[18];
      v10 = __dst[17];
      v11 = __dst[22];
      goto LABEL_19;
    }
LABEL_17:
    if (LOBYTE(__dst[37]) == 1)
      return;
    v9 = __dst[18];
    v10 = __dst[17];
    v11 = __dst[22];
    v12 = 0;
    goto LABEL_19;
  }
  if (v8 != 0xF000000000000007)
    goto LABEL_17;
  v9 = __dst[18];
  v10 = __dst[17];
  v11 = __dst[22];
  if (LOBYTE(__dst[37]) != 1)
  {
LABEL_21:
    v77 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88);
    v15 = v7;
    outlined retain of NavigationColumnState(__dst);
    v69 = v3;
    outlined copy of NavigationColumnState.ColumnContent(v3, v4, v5, v10, v9, v72, v6, v15);
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    v17 = v77(v16);
    swift_release();
    v78 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
    }
    else
    {
      v18 = *(_QWORD *)(v11 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NavigationColumnState.ColumnContent(v69, v4, v5, v10, v9, v72, v6, v15);
      outlined release of NavigationColumnState(__dst);
      if (!__OFADD__(v78, v18))
        return;
    }
    __break(1u);
    goto LABEL_108;
  }
  v12 = 1;
LABEL_19:
  outlined retain of NavigationColumnState(__dst);
  MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
  outlined release of NavigationColumnState(__dst);
  v7 = v76;
  if ((v76 & 0x8000000000000000) == 0 && (v12 & 1) == 0)
    goto LABEL_21;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  BOOL v10;

  v5 = *v3;
  v4 = v3[1];
  if (v4 < a3 || v5 > a3 || v5 > result || v4 < result)
  {
    __break(1u);
    goto LABEL_24;
  }
  v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a2 >= 1)
  {
    if (v9 < 0 || v9 >= (unint64_t)a2)
      goto LABEL_19;
    return 0;
  }
  if (v9 <= 0 && v9 > a2)
    return 0;
LABEL_19:
  v10 = __OFADD__(result, a2);
  result += a2;
  if (v10)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  if (result < v5 || v4 < result)
    goto LABEL_26;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v4 = *(_QWORD *)(v3 + 64);
  if (v4 < a3 || (a3 | result) < 0 || v4 < result)
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = a3 - result;
  if (a2 >= 1)
  {
    if (v5 < 0 || v5 >= a2)
      goto LABEL_11;
    return 0;
  }
  if (v5 <= 0 && v5 > a2)
    return 0;
LABEL_11:
  v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v4 < result)
    goto LABEL_17;
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t result;
  unint64_t v8;
  uint64_t v10;

  result = type metadata accessor for _ArchivedViewStates(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + *(int *)(result + 20) + 8) + 16);
  if (v8 < a1 || v8 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = a3 - a1;
  if (a2 >= 1)
  {
    if (v10 < 0 || v10 >= (unint64_t)a2)
      goto LABEL_13;
    return 0;
  }
  if (v10 <= 0 && v10 > a2)
    return 0;
LABEL_13:
  result = a1 + a2;
  if (__OFADD__(a1, a2))
    goto LABEL_16;
  if (result > v8)
LABEL_17:
    __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4)
  {
    v5 = a4 + 48 * v4;
    v7 = *(_QWORD *)(v5 + 16);
    v6 = *(_QWORD *)(v5 + 24);
    v8 = __OFADD__(v6, v7);
    v9 = v6 + v7;
    if (v8)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v10 = *(_QWORD *)(a4 + 72);
    if (v9 < result || v10 > result)
      goto LABEL_29;
    if (v9 < a3)
      goto LABEL_30;
  }
  else
  {
    if (result)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v10 = 0;
    if (a3 > 0)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
  }
  if (v10 > a3)
    goto LABEL_30;
  v12 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (a2 >= 1)
  {
    if (v12 < 0 || v12 >= a2)
      goto LABEL_21;
    return 0;
  }
  if (v12 <= 0 && v12 > a2)
    return 0;
LABEL_21:
  v8 = __OFADD__(result, a2);
  result += a2;
  if (v8)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v4)
  {
    v13 = a4 + 48 * v4;
    v15 = *(_QWORD *)(v13 + 16);
    v14 = *(_QWORD *)(v13 + 24);
    v8 = __OFADD__(v14, v15);
    v16 = v14 + v15;
    if (v8)
    {
LABEL_35:
      __break(1u);
      return result;
    }
    v17 = *(_QWORD *)(a4 + 72);
    if (v16 < result)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  else
  {
    v17 = 0;
    if (result > 0)
      goto LABEL_34;
  }
  if (result < v17)
    goto LABEL_34;
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (a1 < 0 || result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if (a3 < 0 || result < a3)
    goto LABEL_17;
  v7 = a3 - a1;
  if (a2 >= 1)
  {
    if (v7 < 0 || v7 >= a2)
      goto LABEL_12;
    return 0;
  }
  if (v7 <= 0 && v7 > a2)
    return 0;
LABEL_12:
  v9 = __OFADD__(a1, a2);
  v8 = a1 + a2;
  if (v9)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  if ((v8 & 0x8000000000000000) == 0 && result >= v8)
    return v8;
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = _VariadicView_Children.endIndex.getter();
  if (a1 < 0 || result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = _VariadicView_Children.endIndex.getter();
  if (a3 < 0 || result < a3)
    goto LABEL_17;
  v7 = a3 - a1;
  if (a2 >= 1)
  {
    if (v7 < 0 || v7 >= a2)
      goto LABEL_12;
    return 0;
  }
  if (v7 <= 0 && v7 > a2)
    return 0;
LABEL_12:
  v9 = __OFADD__(a1, a2);
  v8 = a1 + a2;
  if (v9)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = _VariadicView_Children.endIndex.getter();
  if ((v8 & 0x8000000000000000) == 0 && result >= v8)
    return v8;
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t result;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v7 = *(uint64_t (**)(void))(*(_QWORD *)v3 + 88);
  v8 = v7();
  v9 = *(uint64_t (**)(void))(*(_QWORD *)v3 + 96);
  result = v9();
  if (v8 > a1 || result < a1)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = ((uint64_t (*)(uint64_t))v7)(result);
  result = v9();
  if (v12 > a3 || result < a3)
    goto LABEL_22;
  v14 = a3 - a1;
  if (__OFSUB__(a3, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (a2 >= 1)
  {
    if (v14 < 0 || v14 >= (unint64_t)a2)
      goto LABEL_17;
    return 0;
  }
  if (v14 <= 0 && v14 > a2)
    return 0;
LABEL_17:
  v16 = __OFADD__(a1, a2);
  v15 = a1 + a2;
  if (v16)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v17 = ((uint64_t (*)(uint64_t))v7)(result);
  result = v9();
  if (v15 >= v17 && result >= v15)
    return v15;
LABEL_25:
  __break(1u);
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v8;
  BOOL v9;

  v6 = *(_QWORD *)(a6 + 16);
  if (v6 < result || v6 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = a3 - result;
  if (a2 >= 1)
  {
    if (v8 < 0 || v8 >= (unint64_t)a2)
      goto LABEL_13;
    return 0;
  }
  if (v8 <= 0 && v8 > a2)
    return 0;
LABEL_13:
  v9 = __OFADD__(result, a2);
  result += a2;
  if (v9)
    goto LABEL_16;
  if (result > v6)
LABEL_17:
    __break(1u);
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int8 v9;

  if (((a3 ^ result) & 0x80000000) != 0)
  {
    if ((result & 0x80000000) == 0)
      v5 = result;
    else
      v5 = -(int)result;
    if (a3 >= 0)
      v6 = a3;
    else
      v6 = -a3;
    v7 = __CFADD__(v5, v6);
    v4 = (v5 + v6);
    if (v7)
      goto LABEL_33;
    if ((result & 0x80000000) == 0)
      v4 = -v4;
    if (a2 > 0)
      goto LABEL_4;
  }
  else
  {
    LODWORD(v4) = a3 - result;
    if (__OFSUB__(a3, (_DWORD)result))
    {
      __break(1u);
      goto LABEL_28;
    }
    v4 = (int)v4;
    if (a2 > 0)
    {
LABEL_4:
      if (v4 < 0 || v4 >= a2)
        goto LABEL_20;
LABEL_19:
      LODWORD(v8) = 0;
      v9 = 1;
      return v8 | ((unint64_t)v9 << 32);
    }
  }
  if (v4 <= 0 && v4 > a2)
    goto LABEL_19;
LABEL_20:
  v8 = a2 + (int)result;
  if (__OFADD__(a2, (int)result))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v8 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v8 > 0x7FFFFFFF)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if ((int)v8 >= (int)a4)
  {
    if (SHIDWORD(a4) >= (int)v8)
    {
      v9 = 0;
      return v8 | ((unint64_t)v9 << 32);
    }
    goto LABEL_32;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.dismiss(from:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  unint64_t v4;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 < result)
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = result;
  if (result < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = specialized Sequence.reversed()(v4, v3, a2, a3);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = v17;
    v10 = (uint64_t *)(v7 + 80);
    do
    {
      v12 = *(v10 - 1);
      v11 = *v10;
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = v11;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v17;
      }
      v15 = *(_QWORD *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1);
        v9 = v17;
      }
      *(_QWORD *)(v9 + 16) = v15 + 1;
      v16 = v9 + 16 * v15;
      *(_QWORD *)(v16 + 32) = partial apply for thunk for @callee_guaranteed () -> ();
      *(_QWORD *)(v16 + 40) = v13;
      v10 += 7;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_11;
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    {
LABEL_11:
      *(_QWORD *)(swift_allocObject() + 16) = v9;
      static Update.enqueueAction(_:)();
      return swift_release();
    }
  }
  return swift_bridgeObjectRelease();
}

void *NavigationColumnState.setPath(_:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  char v115;
  __int16 v116;
  _BYTE __src[284];
  unsigned int v118;
  uint64_t v119;
  char v120;
  __int16 v121;

  v6 = v5;
  v60 = a4[1];
  v61 = *a4;
  v7 = *((_QWORD *)v5 + 14);
  v8 = *((_QWORD *)v5 + 17);
  v72 = *((_QWORD *)v5 + 16);
  v9 = *((_QWORD *)v5 + 18);
  v73 = *((_QWORD *)v5 + 19);
  v74 = *((_QWORD *)v5 + 15);
  v10 = *((_QWORD *)v5 + 21);
  v75 = *((_QWORD *)v5 + 20);
  if (v10 < 0)
  {
    v18 = *((_QWORD *)v5 + 11);
    v19 = *((_QWORD *)v6 + 12);
    swift_retain();
    swift_retain();
    swift_retain();
    outlined consume of Binding<AnyNavigationPath>?(v18, v19);
    *((_QWORD *)v6 + 11) = a1;
    *((_QWORD *)v6 + 12) = a2;
    *((_QWORD *)v6 + 13) = a3;
    ++v6[21];
    *(_QWORD *)__src = a1;
    *(_QWORD *)&__src[8] = a2;
    *(_QWORD *)&__src[16] = a3;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v21 = v20;
    MEMORY[0x18D75B9C8](&v77);
    v22 = v77;
    v23 = MEMORY[0x1E0DEE9D8];
    v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    *((_QWORD *)v6 + 14) = v7;
    *((_QWORD *)v6 + 15) = v74;
    *((_QWORD *)v6 + 16) = v72;
    *((_QWORD *)v6 + 17) = v8;
    *((_QWORD *)v6 + 18) = v9;
    *((_QWORD *)v6 + 19) = v73;
    *((_QWORD *)v6 + 20) = v75;
    *((_QWORD *)v6 + 21) = v22;
    *((_QWORD *)v6 + 22) = v23;
    *((_QWORD *)v6 + 23) = v24;
    *((_BYTE *)v6 + 296) = 0;
    *(_QWORD *)__src = a1;
    *(_QWORD *)&__src[8] = a2;
    *(_QWORD *)&__src[16] = a3;
    v25 = MEMORY[0x18D75B9C8](&v77, v21);
    v26 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v77 + 80))(v25);
    swift_release();
    if ((v26 & 1) != 0)
      goto LABEL_5;
LABEL_7:
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    *((_QWORD *)v6 + 29) = v61;
    *((_QWORD *)v6 + 30) = v60;
    v27 = 1;
    v28 = 2;
    goto LABEL_8;
  }
  v70 = *((_QWORD *)v5 + 23);
  v71 = *((_QWORD *)v5 + 22);
  v36 = v5[1];
  v37 = *v5;
  v38 = v5[2];
  v39 = *((_QWORD *)v5 + 2);
  v11 = *((_BYTE *)v5 + 24);
  v40 = *((_QWORD *)v5 + 4);
  v41 = *((_QWORD *)v5 + 5);
  v12 = *((_QWORD *)v5 + 6);
  v42 = *((_QWORD *)v5 + 7);
  v62 = *((_QWORD *)v5 + 17);
  v43 = *((_QWORD *)v5 + 8);
  v44 = *((_QWORD *)v5 + 9);
  v45 = v5[20];
  v34 = v5[21];
  v32 = *((_QWORD *)v5 + 12);
  v33 = *((_QWORD *)v5 + 11);
  v35 = *((_QWORD *)v5 + 13);
  v63 = *((_QWORD *)v5 + 24);
  v64 = *((_QWORD *)v5 + 25);
  v65 = *((_QWORD *)v5 + 26);
  v46 = *((_QWORD *)v5 + 27);
  v47 = *((_QWORD *)v5 + 28);
  v48 = *((_QWORD *)v5 + 29);
  v49 = *((_QWORD *)v5 + 30);
  v50 = *((_QWORD *)v5 + 31);
  v51 = *((_QWORD *)v5 + 32);
  v13 = *((_BYTE *)v5 + 264);
  v52 = v13;
  v53 = *((_QWORD *)v5 + 34);
  v116 = *(_WORD *)((char *)v5 + 297);
  v58 = v116;
  v57 = v5[70];
  *(_QWORD *)&v77 = __PAIR64__(v36, v37);
  DWORD2(v77) = v38;
  v78 = v39;
  v79 = v11;
  v80 = v40;
  v81 = v41;
  v82 = v12;
  v83 = v42;
  v84 = v43;
  v85 = v44;
  v86 = v45;
  v87 = v34;
  v88 = v33;
  v89 = v32;
  v90 = v35;
  v91 = v7;
  v92 = v74;
  v93 = v72;
  v94 = v8;
  v95 = v9;
  v96 = v73;
  v97 = v75;
  v98 = v10;
  v99 = v71;
  v100 = v70;
  v101 = v63;
  v102 = v64;
  v103 = v65;
  v104 = v46;
  v105 = v47;
  v106 = v48;
  v107 = v49;
  v108 = v50;
  v109 = v51;
  v110 = v13;
  v111 = v53;
  v112 = v57;
  v113 = v5[71];
  v56 = v113;
  v114 = *((_QWORD *)v5 + 36);
  v55 = v114;
  v115 = *((_BYTE *)v5 + 296);
  v54 = v115;
  outlined copy of NavigationColumnState.ColumnContent(v7, v74, v72, v8, v9, v73, v75, v10);
  outlined retain of NavigationColumnState((uint64_t *)&v77);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ReplacedRoot?(v7, v74, v72, v8);
  outlined release of NavigationColumnState((uint64_t *)&v77);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined consume of Binding<AnyNavigationPath>?(v33, v32);
  *((_QWORD *)v5 + 11) = a1;
  *((_QWORD *)v5 + 12) = a2;
  *((_QWORD *)v5 + 13) = a3;
  v5[21] = v34 + 1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v76);
  swift_release();
  swift_release();
  swift_release();
  *(_DWORD *)__src = v37;
  *(_DWORD *)&__src[4] = v36;
  v14 = v76;
  *((_QWORD *)v6 + 14) = v7;
  *((_QWORD *)v6 + 15) = v74;
  *((_QWORD *)v6 + 16) = v72;
  *((_QWORD *)v6 + 17) = v8;
  *((_QWORD *)v6 + 18) = v9;
  *((_QWORD *)v6 + 19) = v73;
  *((_QWORD *)v6 + 20) = v75;
  *((_QWORD *)v6 + 21) = v14;
  *((_QWORD *)v6 + 22) = v71;
  *((_QWORD *)v6 + 23) = v70;
  *(_DWORD *)&__src[8] = v38;
  *(_QWORD *)&__src[16] = v39;
  __src[24] = v11;
  *(_QWORD *)&__src[32] = v40;
  *(_QWORD *)&__src[40] = v41;
  *(_QWORD *)&__src[48] = v12;
  *(_QWORD *)&__src[56] = v42;
  *(_QWORD *)&__src[64] = v43;
  *(_QWORD *)&__src[72] = v44;
  *(_DWORD *)&__src[80] = v45;
  *(_DWORD *)&__src[84] = v34 + 1;
  *(_QWORD *)&__src[88] = a1;
  *(_QWORD *)&__src[96] = a2;
  *(_QWORD *)&__src[104] = a3;
  *(_QWORD *)&__src[112] = v7;
  *(_QWORD *)&__src[120] = v74;
  *(_QWORD *)&__src[128] = v72;
  *(_QWORD *)&__src[136] = v8;
  *(_QWORD *)&__src[144] = v9;
  *(_QWORD *)&__src[152] = v73;
  *(_QWORD *)&__src[160] = v75;
  *(_QWORD *)&__src[168] = v14;
  *(_QWORD *)&__src[176] = v71;
  *(_QWORD *)&__src[184] = v70;
  *(_QWORD *)&__src[192] = v63;
  *(_QWORD *)&__src[200] = v64;
  *(_QWORD *)&__src[208] = v65;
  *(_QWORD *)&__src[216] = v46;
  *(_QWORD *)&__src[224] = v47;
  *(_QWORD *)&__src[232] = v48;
  *(_QWORD *)&__src[240] = v49;
  *(_QWORD *)&__src[248] = v50;
  *(_QWORD *)&__src[256] = v51;
  __src[264] = v52;
  *(_QWORD *)&__src[272] = v53;
  *(_DWORD *)&__src[280] = v57;
  v118 = v56;
  v119 = v55;
  v120 = v54;
  v121 = v58;
  outlined retain of NavigationColumnState((uint64_t *)__src);
  outlined copy of NavigationColumnState.ReplacedRoot?(v7, v74, v72, v8);
  swift_retain();
  v59 = v7;
  outlined consume of NavigationColumnState.ReplacedRoot?(v7, v74, v72, v8);
  outlined release of NavigationColumnState((uint64_t *)__src);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 96);
  swift_retain();
  v16 = swift_retain();
  LOBYTE(v15) = v15(v16, v17);
  swift_release_n();
  swift_release();
  if ((v15 & 1) == 0)
  {
    outlined copy of NavigationColumnState.ReplacedRoot?(v7, v74, v72, v62);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Collection<>.dismiss(from:)(0, v71, v70);
    outlined consume of NavigationColumnState.ReplacedRoot?(v7, v74, v72, v62);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    v29 = MEMORY[0x1E0DEE9D8];
    v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_release();
    *((_QWORD *)v6 + 14) = v59;
    *((_QWORD *)v6 + 15) = v74;
    *((_QWORD *)v6 + 16) = v72;
    *((_QWORD *)v6 + 17) = v62;
    *((_QWORD *)v6 + 18) = v9;
    *((_QWORD *)v6 + 19) = v73;
    *((_QWORD *)v6 + 20) = v75;
    *((_QWORD *)v6 + 21) = v14;
    *((_QWORD *)v6 + 22) = v29;
    *((_QWORD *)v6 + 23) = v30;
    *((_BYTE *)v6 + 296) = 0;
    goto LABEL_7;
  }
  swift_release();
LABEL_5:
  v27 = 0;
  v28 = 1;
LABEL_8:
  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v77);
  *(_QWORD *)__src = v28;
  *(_QWORD *)&__src[8] = 0;
  __src[16] = 2;
  outlined init with take of NavigationState.UpdateResult(&v77, &__src[24]);
  *(_DWORD *)&__src[276] = v27;
  *(_DWORD *)&__src[280] = 0;
  return memcpy(a5, __src, 0x11CuLL);
}

void *NavigationColumnState.boundPathChange(to:environment:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  void *result;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  __int128 v52[16];
  _OWORD __src[18];
  uint64_t v54;
  int v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  __int16 v84;
  _OWORD __dst[19];

  v4 = v3;
  v25 = *a2;
  v26 = a2[1];
  memcpy(__dst, v3, 0x12BuLL);
  if ((*((_QWORD *)&__dst[10] + 1) & 0x8000000000000000) != 0)
  {
    __break(1u);
    result = (void *)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v6 = *((_QWORD *)&__dst[8] + 1);
    v5 = *(_QWORD *)&__dst[8];
    v7 = __dst[9];
    v8 = *(_QWORD *)&__dst[10];
    v9 = *((_QWORD *)&__dst[11] + 1);
    v10 = *(_QWORD *)&__dst[11];
    v34 = DWORD2(__dst[0]);
    v33 = *(_QWORD *)&__dst[1];
    v32 = BYTE8(__dst[1]);
    v30 = __dst[3];
    v31 = __dst[2];
    v28 = *((_QWORD *)&__dst[4] + 1);
    v29 = *(_QWORD *)&__dst[4];
    v36 = *(_OWORD *)((char *)&__dst[5] + 8);
    v11 = *(_QWORD *)&__dst[7];
    v35 = *((_QWORD *)&__dst[6] + 1);
    v42 = __dst[13];
    v48 = *((_QWORD *)&__dst[14] + 1);
    v12 = __dst[15];
    v41 = *(_QWORD *)&__dst[14];
    v40 = *(_QWORD *)&__dst[16];
    v39 = BYTE8(__dst[16]);
    v38 = *(_QWORD *)&__dst[17];
    v44 = *(_QWORD *)&__dst[18];
    v43 = BYTE8(__dst[18]);
    v45 = *(_WORD *)((char *)&__dst[18] + 9);
    v13 = *((_QWORD *)&__dst[7] + 1);
    v50 = *((_QWORD *)&__dst[7] + 1);
    v51 = *((_QWORD *)&__dst[10] + 1);
    outlined copy of NavigationColumnState.ColumnContent(*(uint64_t *)&__dst[7], *((uint64_t *)&__dst[7] + 1), *(uint64_t *)&__dst[8], *((uint64_t *)&__dst[8] + 1), *(uint64_t *)&__dst[9], *((uint64_t *)&__dst[9] + 1), *(uint64_t *)&__dst[10], *((uint64_t *)&__dst[10] + 1));
    v27 = __dst[12];
    v14 = *(_QWORD *)&__dst[0];
    v15 = *(_QWORD *)&__dst[5];
    v16 = *((_QWORD *)&__dst[17] + 1);
    outlined retain of NavigationColumnState((uint64_t *)__dst);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NavigationColumnState.ReplacedRoot?(v11, v13, v5, v6);
    outlined release of NavigationColumnState((uint64_t *)__dst);
    swift_retain();
    swift_release();
    v4[14] = v11;
    v4[15] = v50;
    *((_OWORD *)v4 + 8) = __PAIR128__(v6, v5);
    *((_OWORD *)v4 + 9) = v7;
    v4[20] = v8;
    v4[21] = a1;
    v4[22] = v10;
    v4[23] = v9;
    v54 = v14;
    v55 = v34;
    v56 = v33;
    v57 = v32;
    v58 = v31;
    v59 = v30;
    v60 = v29;
    v61 = v28;
    v62 = v15;
    v63 = v36;
    v64 = v35;
    v65 = v11;
    v66 = v50;
    v67 = __PAIR128__(v6, v5);
    v68 = v7;
    v69 = v8;
    v70 = a1;
    v37 = v10;
    v71 = v10;
    v72 = v9;
    v73 = v27;
    v74 = v42;
    v75 = v41;
    v76 = v48;
    v77 = v12;
    v78 = v40;
    v79 = v39;
    v80 = v38;
    v81 = v16;
    v82 = v44;
    v83 = v43;
    v84 = v45;
    outlined retain of NavigationColumnState(&v54);
    outlined copy of NavigationColumnState.ReplacedRoot?(v11, v50, v5, v6);
    swift_retain();
    v17 = v5;
    v46 = v6;
    outlined consume of NavigationColumnState.ReplacedRoot?(v11, v50, v5, v6);
    outlined release of NavigationColumnState(&v54);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(v51);
    v20 = v19;
    swift_release();
    if ((v20 & 1) != 0 && v18 == 1)
    {
      swift_release();
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v52);
      __src[0] = xmmword_187BFE310;
      LOBYTE(__src[1]) = 2;
      outlined init with take of NavigationState.UpdateResult(v52, (_OWORD *)((char *)&__src[1] + 8));
      *(_QWORD *)((char *)&__src[17] + 4) = 0;
    }
    else
    {
      outlined copy of NavigationColumnState.ReplacedRoot?(v11, v50, v17, v46);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Collection<>.dismiss(from:)(0, v37, v9);
      outlined consume of NavigationColumnState.ReplacedRoot?(v11, v50, v17, v46);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release();
      v21 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      swift_release();
      v4[14] = v11;
      v4[15] = v50;
      v4[16] = v17;
      v4[17] = v46;
      *((_OWORD *)v4 + 9) = v7;
      v4[20] = v8;
      v4[21] = a1;
      v4[22] = MEMORY[0x1E0DEE9D8];
      v4[23] = v21;
      *((_BYTE *)v4 + 296) = 0;
      v4[29] = v25;
      v4[30] = v26;
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      if ((v20 & 1) != 0)
      {
        v22 = qword_187C3F618[v18];
        v23 = 2;
      }
      else
      {
        v23 = 1;
        v22 = v18;
      }
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v52);
      __src[0] = (unint64_t)v22;
      LOBYTE(__src[1]) = v23;
      outlined init with take of NavigationState.UpdateResult(v52, (_OWORD *)((char *)&__src[1] + 8));
      *(_QWORD *)((char *)&__src[17] + 4) = 1;
    }
    return memcpy(a3, __src, 0x11CuLL);
  }
  return result;
}

uint64_t NavigationColumnState.setSelection(from:splitViewState:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t result;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD v78[4];
  __int16 v79;
  _QWORD v80[8];
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;

  v4 = *(_QWORD *)(a1 + 168);
  if (v4 >> 1 == 0xFFFFFFFF)
  {
    v5 = (uint64_t *)(a1 + 112);
    v6 = (uint64_t *)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 104);
    v7 = (uint64_t *)(a1 + 96);
    v8 = (uint64_t *)(a1 + 88);
    v9 = (uint64_t *)(a1 + 80);
  }
  else
  {
    v6 = (uint64_t *)(a1 + 136);
    v9 = (uint64_t *)(a1 + 144);
    v8 = (uint64_t *)(a1 + 152);
    v7 = (uint64_t *)(a1 + 160);
    v5 = (uint64_t *)(a1 + 176);
  }
  if (v4 >> 62 == 1)
  {
    v10 = *(_QWORD *)(a1 + 184);
    v11 = *(_QWORD *)(a1 + 192);
    v12 = *(_QWORD *)(a1 + 200);
    v13 = *(_QWORD *)(a1 + 240);
    v14 = *(unsigned __int8 *)(a1 + 248);
    v15 = *(_BYTE *)(a1 + 120);
    v16 = *a2;
    v17 = a2[1];
    v18 = a2[2];
    v19 = a2[3];
    v20 = *((_WORD *)a2 + 32);
    v21 = v10;
    v22 = *v5;
    v23 = v11;
    v68 = *(_QWORD *)(a1 + 208);
    v69 = v12;
    v24 = *v7;
    v76 = *(_QWORD *)(a1 + 216);
    v77 = v68;
    v66 = *(_QWORD *)(a1 + 224);
    v67 = v76;
    v25 = *v8;
    v75 = v66;
    v70 = *(_QWORD *)(a1 + 232);
    v72 = v13;
    v73 = v70;
    v26 = *v9;
    v74 = *(_BYTE *)(a1 + 248);
    v27 = *v6;
    if (v14 == 255)
    {
      v49 = *(_QWORD *)a1;
      v28 = *(_QWORD *)a1;
      v51 = *(_QWORD *)(a1 + 8);
      v91 = *(_QWORD *)(a1 + 16);
      v63 = v15;
      v53 = v26;
      v74 = *(_BYTE *)(a1 + 64);
      v76 = *(_QWORD *)(a1 + 32);
      v77 = *(_QWORD *)(a1 + 24);
      v75 = *(_QWORD *)(a1 + 40);
      v72 = *(_QWORD *)(a1 + 56);
      v73 = *(_QWORD *)(a1 + 48);
      v65 = v3;
      v29 = v13;
      v30 = v10;
      v31 = v4;
      v32 = v11;
      v59 = v17;
      v61 = v16;
      v55 = v19;
      v57 = v18;
      v4 = v22;
      v33 = v24;
      v34 = v25;
      v35 = v27;
      outlined copy of NavigationRequest.Action(v28, v51, v91, v77, v76, v75, v73, v72, v74);
      v27 = v35;
      v25 = v34;
      v24 = v33;
      v22 = v4;
      v19 = v55;
      v18 = v57;
      v17 = v59;
      v16 = v61;
      v15 = v63;
      LOBYTE(v14) = -1;
      v13 = v29;
      v3 = v65;
      v21 = v49;
      v11 = v32;
      LOBYTE(v4) = v31;
      v23 = v51;
      v26 = v53;
      v10 = v30;
      v12 = v91;
    }
    v36 = *(_QWORD *)(v3 + 48);
    v91 = v12;
    if (!v36)
    {
      v37 = MEMORY[0x1E0DEE9D8];
      v50 = v11;
      v52 = v10;
      v48 = v13;
      v47 = v14;
      v64 = v15;
      v60 = v17;
      v62 = v16;
      v56 = v19;
      v58 = v18;
      v46 = v22;
      v38 = v24;
      v39 = v25;
      v54 = v26;
      v40 = v27;
      v45 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v44 = specialized Dictionary.init(dictionaryLiteral:)(v37);
      v43 = specialized Dictionary.init(dictionaryLiteral:)(v37);
      v12 = v91;
      v41 = specialized Dictionary.init(dictionaryLiteral:)(v37);
      v27 = v40;
      v10 = v52;
      v26 = v54;
      v25 = v39;
      v24 = v38;
      v22 = v46;
      v19 = v56;
      v18 = v58;
      v17 = v60;
      v16 = v62;
      v15 = v64;
      LOBYTE(v14) = v47;
      v13 = v48;
      v11 = v50;
      *(_QWORD *)(v3 + 40) = 0;
      *(_QWORD *)(v3 + 48) = v45;
      *(_QWORD *)(v3 + 56) = v44;
      *(_QWORD *)(v3 + 64) = v43;
      *(_QWORD *)(v3 + 72) = v41;
      *(_DWORD *)(v3 + 80) = 0;
    }
    v80[0] = v21;
    v80[1] = v23;
    v80[2] = v12;
    v80[3] = v77;
    v80[4] = v76;
    v80[5] = v75;
    v80[6] = v73;
    v80[7] = v72;
    v81 = v74;
    v82 = v27;
    v83 = v26;
    v84 = v25;
    v85 = v24;
    v86 = v4 & 1;
    v87 = v22;
    v88 = v15;
    v89 = xmmword_187C34330;
    v90 = 0;
    v78[0] = v16;
    v78[1] = v17;
    v78[2] = v18;
    v78[3] = v19;
    v79 = v20;
    outlined copy of NavigationRequest.Action?(v10, v11, v69, v68, v67, v66, v70, v13, v14);
    NavigationListState.update(for:splitViewState:)((uint64_t)v80, (uint64_t)v78, a3);
    return outlined consume of NavigationRequest.Action(v21, v23, v91, v77, v76, v75, v73, v72, v74);
  }
  else
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *NavigationColumnState.pop(_:request:splitViewState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int16 v60;
  __int128 v61;
  __int128 v62;
  _QWORD *v63;
  void *result;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  char v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int8x16_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BOOL8 v104;
  SwiftUI::NavigationSplitColumn_optional v105;
  SwiftUI::NavigationSplitColumn_optional v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int8x16_t v115;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  int8x16_t v126;
  int8x16_t v127;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  _OWORD v137[3];
  char v138;
  __int128 v139;
  uint64_t v140;
  char v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  __int16 v167;
  __int128 __dst[19];
  _QWORD v169[6];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  _BYTE v174[64];
  uint64_t v175;

  v5 = v4;
  v6 = a1;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v174[32] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v174[48] = v7;
  v175 = *(_QWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 48);
  v172 = *(_OWORD *)(a2 + 32);
  v173 = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v174 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v174[16] = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v170 = *(_OWORD *)a2;
  v171 = v10;
  v11 = *(int64x2_t *)(a2 + 136);
  v126 = *(int8x16_t *)(a2 + 168);
  v127 = *(int8x16_t *)(a2 + 152);
  v12 = *(_QWORD *)(a3 + 16);
  if (v12 != 1)
  {
    v13 = *(_QWORD *)(a3 + 32);
    if (v13)
    {
      v14 = *(_WORD *)(a3 + 64);
      v128 = *(_QWORD *)(a3 + 56);
      v16 = *(_QWORD *)(a3 + 40);
      v15 = *(_QWORD *)(a3 + 48);
      v17 = *(_QWORD *)(a3 + 24);
      v19 = *(_QWORD *)a3;
      v18 = *(_QWORD *)(a3 + 8);
      v130 = a1;
      v136 = 0;
      if (*((unsigned __int8 *)v5 + 24) >= 3u)
        v20 = 3;
      else
        v20 = *((_BYTE *)v5 + 24);
      outlined init with take of NavigationUpdateEvent.Action((uint64_t)&v130, (uint64_t)v137);
      v138 = v20;
      outlined init with copy of NavigationUpdateEvent((uint64_t)v137, (uint64_t)__dst);
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = v13;
      *(_QWORD *)(v21 + 24) = v16;
      v22 = __dst[1];
      *(_OWORD *)(v21 + 32) = __dst[0];
      *(_OWORD *)(v21 + 48) = v22;
      *(_OWORD *)(v21 + 64) = __dst[2];
      *(_OWORD *)(v21 + 74) = *(__int128 *)((char *)&__dst[2] + 10);
      outlined copy of AppIntentExecutor?(v13);
      outlined copy of AppIntentExecutor?(v13);
      outlined copy of NavigationSplitViewState?(v19, v18, v12, v17, v13, v16, v15, v128, v14, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      static Update.enqueueAction(_:)();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v13);
      outlined destroy of NavigationUpdateEvent((uint64_t)v137);
      outlined copy of NavigationSplitViewState?(v19, v18, v12, v17, v13, v16, v15, v128, v14, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v139);
      __dst[0] = xmmword_187BFE310;
      LOBYTE(__dst[1]) = 2;
      outlined init with take of NavigationState.UpdateResult(&v139, (__int128 *)((char *)&__dst[1] + 8));
      *(_QWORD *)((char *)&__dst[17] + 4) = 0;
      v23 = a4;
      return memcpy(v23, __dst, 0x11CuLL);
    }
  }
  v115 = *(int8x16_t *)(a2 + 136);
  if (a1 < 1)
    goto LABEL_11;
  memcpy(__dst, v5, 0x12BuLL);
  if ((*((_QWORD *)&__dst[10] + 1) & 0x8000000000000000) == 0)
  {
    v24 = __dst[7];
    v25 = __dst[8];
    v26 = __dst[9];
    v124 = *((_QWORD *)&__dst[10] + 1);
    v27 = *(_QWORD *)&__dst[10];
    v28 = __dst[11];
    outlined copy of NavigationColumnState.ColumnContent(*(uint64_t *)&__dst[7], *((uint64_t *)&__dst[7] + 1), *(uint64_t *)&__dst[8], *((uint64_t *)&__dst[8] + 1), *(uint64_t *)&__dst[9], *((uint64_t *)&__dst[9] + 1), *(uint64_t *)&__dst[10], *((uint64_t *)&__dst[10] + 1));
    outlined copy of NavigationColumnState.ColumnContent(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, v124);
    outlined retain of NavigationColumnState((uint64_t *)__dst);
    swift_release();
    outlined consume of NavigationColumnState.ReplacedRoot?(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1));
    v117 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NavigationColumnState.ColumnContent(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, v124);
    outlined release of NavigationColumnState((uint64_t *)__dst);
    if (v117)
    {
      outlined copy of NavigationColumnState.ColumnContent(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, v124);
      outlined retain of NavigationColumnState((uint64_t *)__dst);
      swift_release();
      outlined consume of NavigationColumnState.ReplacedRoot?(v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1));
      outlined release of NavigationColumnState((uint64_t *)__dst);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v139 = v28;
      v5[14] = 0xF000000000000007;
      *(_OWORD *)(v5 + 15) = 0u;
      *(_OWORD *)(v5 + 17) = 0u;
      *(_OWORD *)(v5 + 19) = 0u;
      v5[22] = 0;
      v5[23] = 0;
      v5[21] = 0x8000000000000000;
      v29 = specialized IdentifiedArray.popLast(_:)(*((int64_t *)&v24 + 1));
      v118 = v30;
      v121 = v29;
      v32 = v31;
      v110 = v33;
      v34 = (_QWORD *)swift_allocObject();
      v34[2] = v121;
      v34[3] = v32;
      v34[4] = v118;
      v34[5] = v110;
      static Update.enqueueAction(_:)();
      swift_release();
      *((_OWORD *)v5 + 7) = v24;
      *((_OWORD *)v5 + 8) = v25;
      *((_OWORD *)v5 + 9) = v26;
      v5[20] = v27;
      v5[21] = v124;
      v11.i64[1] = *((_QWORD *)&v139 + 1);
      *((_OWORD *)v5 + 11) = v139;
      v6 = a1 - *((_QWORD *)&v24 + 1);
      if (a1 - *((_QWORD *)&v24 + 1) < 1)
      {
LABEL_11:
        v119 = 2;
        v122 = 1;
        v125 = v6;
        goto LABEL_38;
      }
    }
    else
    {
      v6 = a1;
    }
  }
  v125 = v6;
  memcpy(__dst, v5, 0x12BuLL);
  v112 = *((_QWORD *)&__dst[10] + 1);
  if ((*((_QWORD *)&__dst[10] + 1) & 0x8000000000000000) != 0)
    goto LABEL_15;
  v35 = __dst[7];
  v36 = __dst[8];
  v37 = __dst[9];
  v38 = *(_QWORD *)&__dst[10];
  v39 = __dst[11];
  v120 = *(_QWORD *)&__dst[8];
  outlined copy of NavigationColumnState.ColumnContent(*(uint64_t *)&__dst[7], *((uint64_t *)&__dst[7] + 1), *(uint64_t *)&__dst[8], *((uint64_t *)&__dst[8] + 1), *(uint64_t *)&__dst[9], *((uint64_t *)&__dst[9] + 1), *(uint64_t *)&__dst[10], *((uint64_t *)&__dst[10] + 1));
  outlined copy of NavigationColumnState.ColumnContent(v35, *((uint64_t *)&v35 + 1), v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v38, v112);
  outlined retain of NavigationColumnState((uint64_t *)__dst);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = outlined consume of NavigationColumnState.ReplacedRoot?(v35, *((uint64_t *)&v35 + 1), v120, *((uint64_t *)&v36 + 1));
  v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 80))(v40);
  swift_release();
  outlined consume of NavigationColumnState.ColumnContent(v35, *((uint64_t *)&v35 + 1), v120, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v38, v112);
  outlined release of NavigationColumnState((uint64_t *)__dst);
  if ((v123 & 1) != 0)
  {
LABEL_15:
    v119 = 2;
    v122 = 1;
    goto LABEL_22;
  }
  outlined copy of NavigationColumnState.ColumnContent(v35, *((uint64_t *)&v35 + 1), v120, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v38, v112);
  outlined retain of NavigationColumnState((uint64_t *)__dst);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ReplacedRoot?(v35, *((uint64_t *)&v35 + 1), v120, *((uint64_t *)&v36 + 1));
  v41 = outlined release of NavigationColumnState((uint64_t *)__dst);
  v42 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v112 + 88))(v41);
  swift_release();
  v5[14] = 0xF000000000000007;
  v43 = v6;
  *(_OWORD *)(v5 + 15) = 0u;
  if (v42 < v6)
    v43 = v42;
  v122 = v43;
  *(_OWORD *)(v5 + 17) = 0uLL;
  *(_OWORD *)(v5 + 19) = 0uLL;
  v5[22] = 0;
  v5[23] = 0;
  v5[21] = 0x8000000000000000;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v112 + 104))(isUniquelyReferenced_nonNull_native, v45);
    swift_release();
    v112 = v46;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v112 + 128))(v122);
  *((_OWORD *)v5 + 7) = v35;
  v5[16] = v120;
  v5[17] = *((_QWORD *)&v36 + 1);
  *((_OWORD *)v5 + 9) = v37;
  v5[20] = v38;
  v5[21] = v112;
  *((_OWORD *)v5 + 11) = v39;
  v48 = v5[11];
  v47 = v5[12];
  v49 = v5[13];
  v50 = *((_DWORD *)v5 + 2);
  v51 = v5[2];
  v52 = *((_BYTE *)v5 + 24);
  v53 = v5[28];
  v54 = v5[31];
  v55 = v5[32];
  v56 = *((_BYTE *)v5 + 264);
  v57 = v5[34];
  v58 = v5[36];
  v59 = *((_BYTE *)v5 + 296);
  v60 = *(_WORD *)((char *)v5 + 297);
  *(_QWORD *)&v139 = *v5;
  DWORD2(v139) = v50;
  v140 = v51;
  v141 = v52;
  v61 = *((_OWORD *)v5 + 3);
  v142 = *((_OWORD *)v5 + 2);
  v143 = v61;
  v144 = *((_OWORD *)v5 + 4);
  v145 = v5[10];
  v146 = v48;
  v147 = v47;
  v108 = v49;
  v109 = v47;
  v148 = v49;
  v149 = v35;
  v150 = v120;
  v151 = *((_QWORD *)&v36 + 1);
  v152 = v37;
  v153 = v38;
  v154 = v112;
  v155 = v39;
  v62 = *((_OWORD *)v5 + 13);
  v156 = *((_OWORD *)v5 + 12);
  v157 = v62;
  v158 = v53;
  v159 = *(_OWORD *)(v5 + 29);
  v160 = v54;
  v161 = v55;
  v162 = v56;
  v163 = v57;
  v164 = v5[35];
  v165 = v58;
  v166 = v59;
  v167 = v60;
  outlined copy of Binding<AnyNavigationPath>?(v48, v47);
  outlined retain of NavigationColumnState((uint64_t *)&v139);
  outlined copy of NavigationColumnState.ReplacedRoot?(v35, *((uint64_t *)&v35 + 1), v120, *((uint64_t *)&v36 + 1));
  swift_retain();
  outlined consume of NavigationColumnState.ReplacedRoot?(v35, *((uint64_t *)&v35 + 1), v120, *((uint64_t *)&v36 + 1));
  outlined release of NavigationColumnState((uint64_t *)&v139);
  v63 = (_QWORD *)swift_allocObject();
  v63[2] = v48;
  v63[3] = v109;
  v63[4] = v108;
  v63[5] = v112;
  outlined copy of Binding<AnyNavigationPath>?(v48, v109);
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  result = (void *)outlined consume of Binding<AnyNavigationPath>?(v48, v109);
  if (!__OFSUB__(v6, v122))
  {
    v119 = 1;
    v125 = v6 - v122;
    if (v6 - v122 < 1)
      goto LABEL_38;
LABEL_22:
    memcpy(__dst, v5, 0x12BuLL);
    v65 = __dst[7];
    v66 = __dst[8];
    v67 = __dst[9];
    v68 = __dst[10];
    v69 = *(_QWORD *)&__dst[7] & 0xF000000000000007;
    if ((*(_QWORD *)&__dst[7] & 0xF000000000000007) == 0xF000000000000007)
    {
      if (BYTE8(__dst[18]) != 1)
        goto LABEL_38;
      outlined retain of NavigationColumnState((uint64_t *)__dst);
      MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
      outlined release of NavigationColumnState((uint64_t *)__dst);
    }
    else if (BYTE8(__dst[18]) != 1)
    {
      outlined retain of NavigationColumnState((uint64_t *)__dst);
      MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
      outlined release of NavigationColumnState((uint64_t *)__dst);
      goto LABEL_38;
    }
    outlined consume of ResolvedNavigationDestinations.ChangeRequest(v122, 0, v119);
    if ((*((_QWORD *)&v68 + 1) & 0x8000000000000000) != 0)
    {
      if (v69 == 0xF000000000000007)
        goto LABEL_33;
      if ((v65 & 0x8000000000000000) == 0)
        goto LABEL_34;
      outlined copy of NavigationColumnState.ReplacedRoot?(v65, *((uint64_t *)&v65 + 1), v66, *((uint64_t *)&v66 + 1));
    }
    else
    {
      if ((v65 & 0x8000000000000000) == 0 || v69 == 0xF000000000000007)
      {
LABEL_34:
        v71 = v5[15];
        v72 = v5[14];
        v73 = v5[16];
        v74 = v5[17];
        v75 = v5[21];
        v77 = v5[22];
        v76 = v5[23];
        if (v75 < 0)
        {
          outlined consume of NavigationColumnState.ColumnContent(v72, v71, v73, v74, v5[18], v5[19], v5[20], v75);
          v77 = 0;
          v76 = 0;
          v75 = 0x8000000000000000;
        }
        else
        {
          outlined consume of NavigationColumnState.ReplacedRoot?(v72, v71, v73, v74);
        }
        v5[14] = 0xF000000000000007;
        v11.i64[1] = 0;
        *(_OWORD *)(v5 + 15) = 0u;
        *(_OWORD *)(v5 + 17) = 0u;
        *(_OWORD *)(v5 + 19) = 0u;
        v5[21] = v75;
        v5[22] = v77;
        v122 = 2;
        --v125;
        v119 = 2;
        v5[23] = v76;
LABEL_38:
        v79 = v5[14];
        v78 = v5[15];
        v81 = v5[16];
        v80 = v5[17];
        v83 = v5[18];
        v82 = v5[19];
        v84 = v5[20];
        v85 = v5[21];
        v86 = v5[22];
        if (v85 < 0)
        {
          if ((~v79 & 0xF000000000000007) == 0)
          {
            outlined consume of NavigationColumnState.ColumnContent(v79, v78, v81, v80, v83, v82, v84, v85);
            v90 = 1;
            goto LABEL_46;
          }
        }
        else if ((~v79 & 0xF000000000000007) == 0)
        {
          v87 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 80);
          v111 = v5[19];
          v113 = v5[20];
          outlined copy of NavigationColumnState.ColumnContent(v79, v78, v81, v80, v83, v82, v84, v85);
          swift_retain();
          swift_bridgeObjectRetain();
          v88 = swift_bridgeObjectRetain();
          LOBYTE(v87) = v87(v88);
          swift_release();
          if ((v87 & 1) != 0)
          {
            v89 = *(_QWORD *)(v86 + 16);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of NavigationColumnState.ColumnContent(v79, v78, v81, v80, v83, v111, v113, v85);
            v90 = v89 == 0;
            goto LABEL_46;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of NavigationColumnState.ColumnContent(v79, v78, v81, v80, v83, v111, v113, v85);
        }
        v90 = 0;
LABEL_46:
        if (*((_BYTE *)v5 + 296))
        {
          if (*((_BYTE *)v5 + 296) == 1)
          {
            if (!v90)
            {
LABEL_55:
              if (v125 >= 1)
              {
                v92 = v5[6];
                if (v92)
                {
                  v93 = *((_DWORD *)v5 + 20);
                  v94 = v5[9];
                  LODWORD(__dst[0]) = v5[5];
                  *((_QWORD *)&__dst[0] + 1) = v92;
                  __dst[1] = *(_OWORD *)(v5 + 7);
                  *(_QWORD *)&__dst[2] = v94;
                  DWORD2(__dst[2]) = v93;
                  if (NavigationListState.isAnyEditing()())
                    NavigationListState.clearAllSelections()();
                }
              }
              v11.i64[0] = 0x1FFFFFFFELL;
              v95 = (int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)vandq_s8(v126, (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFELL)), v11).i64[0], 0);
              v137[0] = vbslq_s8(v95, *(int8x16_t *)&v174[8], v115);
              v137[1] = vbslq_s8(v95, *(int8x16_t *)&v174[24], v127);
              v137[2] = vbslq_s8(v95, *(int8x16_t *)&v174[40], v126);
              NavigationRequest.KeyKind.previous.getter(v169);
              outlined init with take of Image.Resolved?((uint64_t)v169, (uint64_t)&v130, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
              v96 = v134;
              if (v134 >> 1 == 0xFFFFFFFF)
              {
                v97 = a4;
                if (v125)
                  _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)__dst);
                else
                  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__dst);
                outlined init with take of NavigationState.UpdateResult(__dst, &v139);
              }
              else
              {
                v99 = v130;
                v98 = v131;
                v100 = v132;
                v101 = v133;
                v102 = v135;
                v103 = *(_QWORD *)(a3 + 16);
                if (v125)
                {
                  if (v103 == 1)
                  {
                    v104 = 0;
                  }
                  else
                  {
                    if (v134 >> 62)
                    {
                      if (v134 >> 62 == 1)
                      {
                        if (v132 == 6)
                          v106.value = SwiftUI_NavigationSplitColumn_unknownDefault;
                        else
                          v106.value = (char)v132;
                      }
                      else
                      {
                        v106.value = SwiftUI_NavigationSplitColumn_unknownDefault;
                      }
                    }
                    else
                    {
                      v106.value = (char)v131;
                    }
                    v104 = NavigationSplitViewState.reduceCompactColumnBindingsIfGreaterThan(_:)(v106);
                  }
                  __dst[6] = *(_OWORD *)&v174[32];
                  __dst[7] = *(_OWORD *)&v174[48];
                  __dst[2] = v172;
                  __dst[3] = v173;
                  __dst[4] = *(_OWORD *)v174;
                  __dst[5] = *(_OWORD *)&v174[16];
                  __dst[0] = v170;
                  __dst[1] = v171;
                  *(_QWORD *)&__dst[8] = v175;
                  *((_QWORD *)&__dst[8] + 1) = v99;
                  *(_QWORD *)&__dst[9] = v98;
                  *((_QWORD *)&__dst[9] + 1) = v100;
                  *(_QWORD *)&__dst[10] = v101;
                  *((_QWORD *)&__dst[10] + 1) = v96;
                  *(_QWORD *)&__dst[11] = v102;
                  *((_QWORD *)&__dst[11] + 1) = v125;
                  *(_QWORD *)&__dst[12] = v104 | ((unint64_t)(v125 < a1) << 8);
                  *(__int128 *)((char *)&__dst[12] + 8) = 0u;
                  *(__int128 *)((char *)&__dst[13] + 8) = 0u;
                  *(__int128 *)((char *)&__dst[14] + 8) = 0u;
                  v107 = 16;
                }
                else
                {
                  if (v103 != 1)
                  {
                    if (v134 >> 62)
                    {
                      if (v134 >> 62 == 1)
                      {
                        if (v132 == 6)
                          v105.value = SwiftUI_NavigationSplitColumn_unknownDefault;
                        else
                          v105.value = (char)v132;
                      }
                      else
                      {
                        v105.value = SwiftUI_NavigationSplitColumn_unknownDefault;
                      }
                    }
                    else
                    {
                      v105.value = (char)v131;
                    }
                    NavigationSplitViewState.reduceCompactColumnBindingsIfGreaterThan(_:)(v105);
                  }
                  __dst[6] = *(_OWORD *)&v174[32];
                  __dst[7] = *(_OWORD *)&v174[48];
                  __dst[2] = v172;
                  __dst[3] = v173;
                  __dst[4] = *(_OWORD *)v174;
                  __dst[5] = *(_OWORD *)&v174[16];
                  __dst[0] = v170;
                  __dst[1] = v171;
                  *(_QWORD *)&__dst[8] = v175;
                  *((_QWORD *)&__dst[8] + 1) = v99;
                  *(_QWORD *)&__dst[9] = v98;
                  *((_QWORD *)&__dst[9] + 1) = v100;
                  *(_QWORD *)&__dst[10] = v101;
                  *((_QWORD *)&__dst[10] + 1) = v96;
                  *(_QWORD *)&__dst[11] = v102;
                  *((_QWORD *)&__dst[11] + 1) = 5;
                  memset(&__dst[12], 0, 56);
                  v107 = 22;
                }
                BYTE8(__dst[15]) = v107;
                destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst);
                outlined retain of NavigationRequest((uint64_t)&v170);
                outlined init with take of NavigationState.UpdateResult(__dst, &v139);
                v97 = a4;
              }
              __dst[0] = (unint64_t)v122;
              LOBYTE(__dst[1]) = v119;
              outlined init with take of NavigationState.UpdateResult(&v139, (__int128 *)((char *)&__dst[1] + 8));
              *(_QWORD *)((char *)&__dst[17] + 4) = 1;
              v23 = v97;
              return memcpy(v23, __dst, 0x11CuLL);
            }
          }
          else if (!v90)
          {
            goto LABEL_55;
          }
          v91 = 0;
        }
        else
        {
          if (v90)
            goto LABEL_55;
          v91 = 2;
        }
        *((_BYTE *)v5 + 296) = v91;
        goto LABEL_55;
      }
      outlined copy of NavigationColumnState.ReplacedRoot(v65, *((uint64_t *)&v65 + 1), v66, *((uint64_t *)&v66 + 1));
    }
    v70 = swift_allocObject();
    *(_QWORD *)(v70 + 16) = v65 & 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v70 + 24) = *((_QWORD *)&v65 + 1);
    *(_OWORD *)(v70 + 32) = v66;
    *(_OWORD *)(v70 + 48) = v67;
    *(_QWORD *)(v70 + 64) = v68;
    outlined copy of NavigationColumnState.ColumnContent(v65, *((uint64_t *)&v65 + 1), v66, *((uint64_t *)&v66 + 1), v67, *((uint64_t *)&v67 + 1), v68, *((uint64_t *)&v68 + 1));
    swift_retain();
    swift_retain();
    outlined copy of _ViewList_ID.Canonical?(v66, *((uint64_t *)&v66 + 1));
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v66, *((uint64_t *)&v66 + 1));
    swift_release();
    swift_release();
LABEL_33:
    outlined consume of NavigationColumnState.ColumnContent(v65, *((uint64_t *)&v65 + 1), v66, *((uint64_t *)&v66 + 1), v67, *((uint64_t *)&v67 + 1), v68, *((uint64_t *)&v68 + 1));
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

void *NavigationColumnState.revealedBySubsequentPop()@<X0>(void *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v19[16];
  _OWORD __src[19];

  v2 = v1;
  v4 = v1[14];
  v3 = v1[15];
  v6 = v1[16];
  v5 = v1[17];
  v8 = v1[18];
  v7 = v1[19];
  v9 = v1[20];
  v10 = v1[21];
  v11 = v2[22];
  if (v10 < 0)
  {
    if ((~v4 & 0xF000000000000007) == 0)
    {
      outlined consume of NavigationColumnState.ColumnContent(v4, v3, v6, v5, v8, v7, v9, v10);
      if (!*((_BYTE *)v2 + 296))
LABEL_9:
        *((_BYTE *)v2 + 296) = 2;
    }
  }
  else if ((~v4 & 0xF000000000000007) == 0)
  {
    v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80);
    v16 = v7;
    v17 = v9;
    outlined copy of NavigationColumnState.ColumnContent(v4, v3, v6, v5, v8, v7, v9, v10);
    swift_retain();
    swift_bridgeObjectRetain();
    v13 = swift_bridgeObjectRetain();
    LOBYTE(v12) = v12(v13);
    swift_release();
    if ((v12 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NavigationColumnState.ColumnContent(v4, v3, v6, v5, v8, v16, v17, v10);
      goto LABEL_11;
    }
    v14 = *(_QWORD *)(v11 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NavigationColumnState.ColumnContent(v4, v3, v6, v5, v8, v16, v17, v10);
    if (!v14 && !*((_BYTE *)v2 + 296))
      goto LABEL_9;
  }
LABEL_11:
  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v19);
  __src[0] = xmmword_187BFE310;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v19, (_OWORD *)((char *)&__src[1] + 8));
  *(_QWORD *)((char *)&__src[17] + 4) = 0;
  return memcpy(a1, __src, 0x11CuLL);
}

uint64_t *NavigationColumnState.popAllForSelectionChange(popReplacedRoots:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *result;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v78;
  int v80;
  uint64_t v81;
  _BYTE __src[288];
  uint64_t v83;
  char v84;
  __int16 v85;
  __int128 v86;
  uint64_t v87;
  _OWORD __dst[20];

  v3 = *(_QWORD *)(v2 + 48);
  v69 = v3
     && (v4 = *(_DWORD *)(v2 + 80),
         v5 = *(_QWORD *)(v2 + 72),
         LODWORD(__dst[0]) = *(_QWORD *)(v2 + 40),
         __dst[1] = *(_OWORD *)(v2 + 56),
         *((_QWORD *)&__dst[0] + 1) = v3,
         *(_QWORD *)&__dst[2] = v5,
         DWORD2(__dst[2]) = v4,
         NavigationListState.isAnyEditing()())
     && NavigationListState.clearAllSelections()();
  v72 = v2;
  memcpy(__dst, (const void *)v2, 0x12BuLL);
  v7 = *((_QWORD *)&__dst[7] + 1);
  v6 = *(_QWORD *)&__dst[7];
  v8 = __dst[8];
  v9 = __dst[9];
  v10 = *((_QWORD *)&__dst[10] + 1);
  v11 = *(_QWORD *)&__dst[10];
  v12 = __dst[11];
  v13 = *(_QWORD *)&__dst[7] & 0xF000000000000007;
  v14 = BYTE8(__dst[18]);
  v75 = *(_QWORD *)&__dst[11];
  if ((*(_QWORD *)&__dst[7] & 0xF000000000000007) != 0xF000000000000007)
  {
    if (BYTE8(__dst[18]) == 1)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (BYTE8(__dst[18]) == 1)
  {
LABEL_9:
    v65 = *(_QWORD *)&__dst[10];
    v15 = *(_QWORD *)&__dst[7];
    v16 = *((_QWORD *)&__dst[10] + 1);
    v17 = BYTE8(__dst[18]);
    outlined retain of NavigationColumnState((uint64_t *)__dst);
    MEMORY[0x18D75AC90](0xD00000000000017BLL, 0x8000000187BD44B0);
    outlined release of NavigationColumnState((uint64_t *)__dst);
    v14 = v17;
    v10 = v16;
    v6 = v15;
    v11 = v65;
    if (v13 != 0xF000000000000007)
      goto LABEL_13;
LABEL_10:
    v18 = *((_QWORD *)&__dst[5] + 1);
    v20 = *((_QWORD *)&__dst[6] + 1);
    v19 = *(_QWORD *)&__dst[6];
    if (v10 < 0)
    {
      *(_QWORD *)__src = *(_QWORD *)&__dst[0];
      *(_DWORD *)&__src[8] = DWORD2(__dst[0]);
      *(_QWORD *)&__src[16] = *(_QWORD *)&__dst[1];
      __src[24] = BYTE8(__dst[1]);
      *(_OWORD *)&__src[32] = __dst[2];
      *(_OWORD *)&__src[48] = __dst[3];
      *(_OWORD *)&__src[64] = __dst[4];
      *(_OWORD *)&__src[80] = __dst[5];
      *(_OWORD *)&__src[96] = __dst[6];
      *(_QWORD *)&__src[112] = v6;
      *(_QWORD *)&__src[120] = v7;
      *(_OWORD *)&__src[128] = v8;
      *(_OWORD *)&__src[144] = v9;
      *(_QWORD *)&__src[160] = v11;
      *(_QWORD *)&__src[168] = v10;
      *(_OWORD *)&__src[176] = v12;
      *(_OWORD *)&__src[192] = __dst[12];
      *(_OWORD *)&__src[208] = __dst[13];
      *(_QWORD *)&__src[224] = *(_QWORD *)&__dst[14];
      *(_OWORD *)&__src[232] = *(_OWORD *)((char *)&__dst[14] + 8);
      *(_QWORD *)&__src[248] = *((_QWORD *)&__dst[15] + 1);
      *(_QWORD *)&__src[256] = *(_QWORD *)&__dst[16];
      __src[264] = BYTE8(__dst[16]);
      *(_OWORD *)&__src[272] = __dst[17];
      v83 = *(_QWORD *)&__dst[18];
      v84 = v14;
      v85 = *(_WORD *)((char *)&__dst[18] + 9);
      outlined retain of NavigationColumnState((uint64_t *)__src);
      outlined release of NavigationColumnState((uint64_t *)__dst);
      v26 = 0;
      v25 = v72;
LABEL_25:
      v80 = v26 + v69;
      v76 = 2;
      v30 = 1;
      v32 = a1;
      if ((a1 & 1) == 0)
        goto LABEL_34;
      goto LABEL_26;
    }
    v21 = v6;
    goto LABEL_12;
  }
LABEL_13:
  if (v10 < 0)
  {
LABEL_54:
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v86);
    *(_OWORD *)__src = xmmword_187BFE310;
    __src[16] = 2;
    outlined init with take of NavigationState.UpdateResult(&v86, &__src[24]);
    *(_DWORD *)&__src[276] = v69;
    goto LABEL_55;
  }
  v66 = v14;
  outlined copy of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined retain of NavigationColumnState((uint64_t *)__dst);
  outlined copy of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  swift_release();
  outlined consume of NavigationColumnState.ReplacedRoot?(v6, v7, v8, *((uint64_t *)&v8 + 1));
  v62 = *(_QWORD *)(v75 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined release of NavigationColumnState((uint64_t *)__dst);
  if (!v62)
  {
    outlined copy of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
    outlined retain of NavigationColumnState((uint64_t *)__dst);
    outlined copy of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v59 = outlined consume of NavigationColumnState.ReplacedRoot?(v6, v7, v8, *((uint64_t *)&v8 + 1));
    v63 = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)v10 + 80))(v59);
    swift_release();
    outlined consume of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
    outlined release of NavigationColumnState((uint64_t *)__dst);
    v14 = v66;
    if ((v63 & 1) != 0)
      goto LABEL_54;
    v21 = v6;
    v18 = *((_QWORD *)&__dst[5] + 1);
    v20 = *((_QWORD *)&__dst[6] + 1);
    v19 = *(_QWORD *)&__dst[6];
LABEL_12:
    v22 = *((_QWORD *)&v12 + 1);
    goto LABEL_16;
  }
  v21 = v6;
  v18 = *((_QWORD *)&__dst[5] + 1);
  v20 = *((_QWORD *)&__dst[6] + 1);
  v19 = *(_QWORD *)&__dst[6];
  v22 = *((_QWORD *)&v12 + 1);
  v14 = v66;
LABEL_16:
  *(_QWORD *)__src = *(_QWORD *)&__dst[0];
  *(_DWORD *)&__src[8] = DWORD2(__dst[0]);
  *(_QWORD *)&__src[16] = *(_QWORD *)&__dst[1];
  __src[24] = BYTE8(__dst[1]);
  *(_OWORD *)&__src[32] = __dst[2];
  *(_OWORD *)&__src[48] = __dst[3];
  *(_OWORD *)&__src[64] = __dst[4];
  *(_QWORD *)&__src[80] = *(_QWORD *)&__dst[5];
  *(_QWORD *)&v61 = v18;
  *((_QWORD *)&v61 + 1) = v19;
  *(_QWORD *)&__src[88] = v18;
  *(_QWORD *)&__src[96] = v19;
  v60 = v20;
  *(_QWORD *)&__src[104] = v20;
  *(_QWORD *)&__src[112] = v21;
  *(_QWORD *)&__src[120] = v7;
  *(_OWORD *)&__src[128] = v8;
  *(_OWORD *)&__src[144] = v9;
  *(_QWORD *)&__src[160] = v11;
  *(_QWORD *)&__src[168] = v10;
  *(_QWORD *)&__src[176] = v75;
  *(_OWORD *)&__src[192] = __dst[12];
  *(_OWORD *)&__src[208] = __dst[13];
  *(_QWORD *)&__src[184] = v22;
  *(_QWORD *)&__src[224] = *(_QWORD *)&__dst[14];
  *(_OWORD *)&__src[232] = *(_OWORD *)((char *)&__dst[14] + 8);
  *(_QWORD *)&__src[248] = *((_QWORD *)&__dst[15] + 1);
  *(_QWORD *)&__src[256] = *(_QWORD *)&__dst[16];
  __src[264] = BYTE8(__dst[16]);
  *(_OWORD *)&__src[272] = __dst[17];
  v83 = *(_QWORD *)&__dst[18];
  v84 = v14;
  v85 = *(_WORD *)((char *)&__dst[18] + 9);
  outlined copy of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined copy of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined retain of NavigationColumnState((uint64_t *)__src);
  swift_release();
  outlined consume of NavigationColumnState.ReplacedRoot?(v21, v7, v8, *((uint64_t *)&v8 + 1));
  v67 = *(_QWORD *)(v75 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined release of NavigationColumnState((uint64_t *)__dst);
  if (v67)
  {
    outlined copy of NavigationColumnState.ReplacedRoot?(v21, v7, v8, *((uint64_t *)&v8 + 1));
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Collection<>.dismiss(from:)(0, v75, v22);
    outlined consume of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
    v64 = 1;
  }
  else
  {
    v64 = 0;
  }
  outlined copy of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined copy of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined retain of NavigationColumnState((uint64_t *)__src);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = outlined consume of NavigationColumnState.ReplacedRoot?(v21, v7, v8, *((uint64_t *)&v8 + 1));
  v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v23);
  swift_release();
  outlined consume of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  result = outlined release of NavigationColumnState((uint64_t *)__dst);
  if ((v68 & 1) != 0)
  {
    v25 = v72;
    v26 = v64;
    goto LABEL_25;
  }
  v25 = v72;
  if (*((_QWORD *)&v61 + 1))
  {
    v86 = v61;
    v87 = v60;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v28 = v27;
    swift_retain();
    swift_retain();
    swift_retain();
    MEMORY[0x18D75B9C8](&v81, v28);
    swift_release();
    swift_release();
    v29 = swift_release();
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 88))(v29);
    swift_release();
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = v61;
    *(_QWORD *)(v31 + 32) = v60;
    swift_retain();
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    v80 = v64 + 1;
    v76 = 1;
    v32 = a1;
    if ((a1 & 1) == 0)
    {
LABEL_34:
      NavigationColumnState.ColumnContent.clearAll(popReplacedRoots:)(v32 & 1);
      v45 = *(_QWORD *)(v25 + 112);
      v44 = *(_QWORD *)(v25 + 120);
      v47 = *(_QWORD *)(v25 + 128);
      v46 = *(_QWORD *)(v25 + 136);
      v49 = *(_QWORD *)(v25 + 144);
      v48 = *(_QWORD *)(v25 + 152);
      v50 = *(_QWORD *)(v25 + 160);
      v51 = *(_QWORD *)(v25 + 168);
      v52 = *(_QWORD *)(v25 + 176);
      if (v51 < 0)
      {
        if ((~v45 & 0xF000000000000007) == 0)
        {
          outlined consume of NavigationColumnState.ColumnContent(v45, v44, v47, v46, v49, v48, v50, v51);
          v56 = 1;
          v57 = *(unsigned __int8 *)(v25 + 296);
          if (!*(_BYTE *)(v25 + 296))
            goto LABEL_49;
          goto LABEL_42;
        }
      }
      else if ((~v45 & 0xF000000000000007) == 0)
      {
        v71 = *(_QWORD *)(v25 + 152);
        v74 = v30;
        v53 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 80);
        v78 = *(_QWORD *)(v25 + 160);
        outlined copy of NavigationColumnState.ColumnContent(v45, v44, v47, v46, v49, v48, v50, v51);
        swift_retain();
        swift_bridgeObjectRetain();
        v54 = swift_bridgeObjectRetain();
        LOBYTE(v53) = v53(v54);
        swift_release();
        if ((v53 & 1) != 0)
        {
          v55 = *(_QWORD *)(v52 + 16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of NavigationColumnState.ColumnContent(v45, v44, v47, v46, v49, v71, v78, v51);
          v56 = v55 == 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of NavigationColumnState.ColumnContent(v45, v44, v47, v46, v49, v71, v78, v51);
          v56 = 0;
        }
        v30 = v74;
        v57 = *(unsigned __int8 *)(v25 + 296);
        if (!*(_BYTE *)(v25 + 296))
        {
LABEL_49:
          if (!v56)
          {
            v58 = 2;
            goto LABEL_51;
          }
LABEL_52:
          _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v86);
          *(_OWORD *)__src = (unint64_t)v30;
          __src[16] = v76;
          outlined init with take of NavigationState.UpdateResult(&v86, &__src[24]);
          *(_DWORD *)&__src[276] = v80;
LABEL_55:
          *(_DWORD *)&__src[280] = 0;
          return (uint64_t *)memcpy(a2, __src, 0x11CuLL);
        }
LABEL_42:
        if (v57 == 1)
        {
          if (!v56)
            goto LABEL_52;
        }
        else if (!v56)
        {
          goto LABEL_52;
        }
        v58 = 0;
LABEL_51:
        *(_BYTE *)(v25 + 296) = v58;
        goto LABEL_52;
      }
      v56 = 0;
      v57 = *(unsigned __int8 *)(v25 + 296);
      if (!*(_BYTE *)(v25 + 296))
        goto LABEL_49;
      goto LABEL_42;
    }
LABEL_26:
    v73 = v30;
    v33 = *(_QWORD *)(v25 + 112);
    v34 = *(_QWORD *)(v25 + 120);
    v35 = *(_QWORD *)(v25 + 128);
    v36 = *(_QWORD *)(v25 + 136);
    v37 = *(_QWORD *)(v25 + 144);
    v38 = *(_QWORD *)(v25 + 152);
    v40 = *(_QWORD *)(v25 + 160);
    v39 = *(_QWORD *)(v25 + 168);
    v41 = v33 & 0xF000000000000007;
    if (v39 < 0)
    {
      if (v41 == 0xF000000000000007)
        goto LABEL_32;
      if ((v33 & 0x8000000000000000) == 0)
        goto LABEL_33;
      v70 = *(_QWORD *)(v25 + 144);
      v42 = *(_QWORD *)(v25 + 152);
      outlined copy of NavigationColumnState.ReplacedRoot?(v33, v34, v35, v36);
    }
    else
    {
      if ((v33 & 0x8000000000000000) == 0 || v41 == 0xF000000000000007)
        goto LABEL_33;
      v70 = *(_QWORD *)(v25 + 144);
      v42 = *(_QWORD *)(v25 + 152);
      outlined copy of NavigationColumnState.ReplacedRoot(v33, v34, v35, v36);
    }
    v43 = (_QWORD *)swift_allocObject();
    v43[2] = v33 & 0x7FFFFFFFFFFFFFFFLL;
    v43[3] = v34;
    v43[4] = v35;
    v43[5] = v36;
    v43[6] = v70;
    v43[7] = v42;
    v43[8] = v40;
    outlined copy of NavigationColumnState.ColumnContent(v33, v34, v35, v36, v70, v42, v40, v39);
    swift_retain();
    swift_retain();
    outlined copy of _ViewList_ID.Canonical?(v35, v36);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v35, v36);
    swift_release();
    swift_release();
    v32 = a1;
    v37 = v70;
    v38 = v42;
LABEL_32:
    outlined consume of NavigationColumnState.ColumnContent(v33, v34, v35, v36, v37, v38, v40, v39);
LABEL_33:
    v30 = v73;
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

void NavigationColumnState.presentValue(_:request:splitViewState:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(id *);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *__dst;
  void *v146;
  id v147[8];
  id v148[7];
  char v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  char v170;
  _OWORD __src[18];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;

  v5 = v4;
  v8 = *(_OWORD *)(a2 + 112);
  v178 = *(_OWORD *)(a2 + 96);
  v179 = v8;
  v9 = *(_QWORD *)(a2 + 136);
  v180 = *(_QWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 48);
  v174 = *(_OWORD *)(a2 + 32);
  v175 = v10;
  v11 = *(_OWORD *)(a2 + 80);
  v176 = *(_OWORD *)(a2 + 64);
  v177 = v11;
  v12 = *(_OWORD *)(a2 + 16);
  v172 = *(_OWORD *)a2;
  v173 = v12;
  v13 = *(_QWORD *)(a2 + 144);
  v14 = *(_QWORD *)(a2 + 152);
  v16 = *(_QWORD *)(a2 + 160);
  v15 = *(_QWORD *)(a2 + 168);
  v17 = *(_QWORD *)(a2 + 184);
  v18 = *(_QWORD *)(a2 + 208);
  v133 = *(_QWORD *)(a2 + 200);
  v134 = *(_QWORD *)(a2 + 192);
  v19 = *(_QWORD *)(a2 + 216);
  v20 = *(_QWORD *)(a2 + 224);
  v137 = *(_QWORD *)(a2 + 240);
  v140 = *(_QWORD *)(a2 + 232);
  v21 = *(unsigned __int8 *)(a2 + 248);
  v22 = *(_QWORD *)a3;
  v23 = *(_QWORD *)(a3 + 8);
  v24 = *(_QWORD *)(a3 + 16);
  v25 = *(_QWORD *)(a3 + 24);
  v27 = *(_QWORD *)(a3 + 32);
  v26 = *(_QWORD *)(a3 + 40);
  v28 = *(_QWORD *)(a3 + 48);
  v143 = *(_QWORD *)(a3 + 56);
  LODWORD(v181) = *(unsigned __int16 *)(a3 + 64);
  __dst = a4;
  if (v24 != 1 && v27)
  {
    v125 = v24;
    v129 = v28;
    v29 = v22;
    (*(void (**)(id *__return_ptr, uint64_t))(*(_QWORD *)a1 + 104))(v147, v17);
    if (*(unsigned __int8 *)(v4 + 24) >= 3u)
      v30 = 3;
    else
      v30 = *(_BYTE *)(v4 + 24);
    outlined init with take of NavigationUpdateEvent.Action((uint64_t)v147, (uint64_t)v148);
    v149 = v30;
    outlined init with copy of NavigationUpdateEvent((uint64_t)v148, (uint64_t)__src);
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v27;
    *(_QWORD *)(v31 + 24) = v26;
    v32 = __src[1];
    *(_OWORD *)(v31 + 32) = __src[0];
    *(_OWORD *)(v31 + 48) = v32;
    *(_OWORD *)(v31 + 64) = __src[2];
    *(_OWORD *)(v31 + 74) = *(_OWORD *)((char *)&__src[2] + 10);
    outlined copy of AppIntentExecutor?(v27);
    outlined copy of AppIntentExecutor?(v27);
    outlined copy of NavigationSplitViewState?(v29, v23, v125, v25, v27, v26, v129, v143, v181, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    static Update.enqueueAction(_:)();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v27);
    outlined destroy of NavigationUpdateEvent((uint64_t)v148);
    outlined copy of NavigationSplitViewState?(v29, v23, v125, v25, v27, v26, v129, v143, v181, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v150);
    __src[0] = xmmword_187BFE310;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(&v150, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = 0;
    memcpy(a4, __src, 0x11CuLL);
    return;
  }
  v126 = v15 & 0xFFFFFFFFFFFFFFFELL;
  v130 = v15;
  if ((v15 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
  {
    v33 = *((_QWORD *)&v176 + 1);
    v34 = v179;
    v35 = v177;
    v119 = v178;
    v120 = *((_QWORD *)&v177 + 1);
    v36 = *((_QWORD *)&v178 + 1);
  }
  else
  {
    v33 = v9;
    v34 = *(_QWORD *)(a2 + 176);
    v35 = v13;
    v119 = v16;
    v120 = v14;
    v36 = v15;
  }
  if (v36 >> 62 == 1)
  {
    v117 = v18;
    v118 = v17;
    v37 = v134;
    v123 = v19;
    v124 = v133;
    v38 = v137;
    v121 = v140;
    v122 = v20;
    v39 = v21;
    v116 = v21;
    if (v21 == 255)
    {
      v37 = *((_QWORD *)&v172 + 1);
      v104 = v17;
      v116 = v176;
      v112 = v25;
      v114 = v22;
      v117 = *((_QWORD *)&v173 + 1);
      v118 = v172;
      v124 = v173;
      v127 = v35;
      v106 = v18;
      v108 = v19;
      v122 = *((_QWORD *)&v174 + 1);
      v123 = v174;
      v110 = v20;
      v131 = v28;
      v121 = v175;
      v40 = v24;
      v41 = v34;
      v42 = v33;
      outlined copy of NavigationRequest.Action(v172, *((uint64_t *)&v172 + 1), v173, *((uint64_t *)&v173 + 1), v174, *((uint64_t *)&v174 + 1), v175, *((uint64_t *)&v175 + 1), v176);
      v39 = -1;
      v35 = v127;
      v28 = v131;
      v33 = v42;
      v38 = *((_QWORD *)&v175 + 1);
      v17 = v104;
      v34 = v41;
      v18 = v106;
      v19 = v108;
      v20 = v110;
      v25 = v112;
      v22 = v114;
      v24 = v40;
    }
    v43 = BYTE8(v179);
    v44 = v36 & 1;
    if (!*(_QWORD *)(v5 + 48))
    {
      v45 = MEMORY[0x1E0DEE9D8];
      v113 = v25;
      v115 = v22;
      v103 = v23;
      v105 = v17;
      v128 = v24;
      v132 = v28;
      v109 = v19;
      v111 = v20;
      v107 = v18;
      v101 = v33;
      v102 = v34;
      v46 = v35;
      v47 = v39;
      v48 = v44;
      v100 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v99 = specialized Dictionary.init(dictionaryLiteral:)(v45);
      v98 = specialized Dictionary.init(dictionaryLiteral:)(v45);
      v49 = specialized Dictionary.init(dictionaryLiteral:)(v45);
      v44 = v48;
      v43 = BYTE8(v179);
      v39 = v47;
      v35 = v46;
      v33 = v101;
      v34 = v102;
      v18 = v107;
      v19 = v109;
      v20 = v111;
      v25 = v113;
      v24 = v128;
      v28 = v132;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = v100;
      *(_QWORD *)(v5 + 56) = v99;
      *(_QWORD *)(v5 + 64) = v98;
      *(_QWORD *)(v5 + 72) = v49;
      v23 = v103;
      v17 = v105;
      v22 = v115;
      *(_DWORD *)(v5 + 80) = 0;
    }
    *(_QWORD *)&__src[0] = v118;
    *((_QWORD *)&__src[0] + 1) = v37;
    *(_QWORD *)&__src[1] = v124;
    *((_QWORD *)&__src[1] + 1) = v117;
    *(_QWORD *)&__src[2] = v123;
    *((_QWORD *)&__src[2] + 1) = v122;
    *(_QWORD *)&__src[3] = v121;
    *((_QWORD *)&__src[3] + 1) = v38;
    LOBYTE(__src[4]) = v116;
    *((_QWORD *)&__src[4] + 1) = v33;
    *(_QWORD *)&__src[5] = v35;
    *((_QWORD *)&__src[5] + 1) = v120;
    *(_QWORD *)&__src[6] = v119;
    BYTE8(__src[6]) = v44;
    *(_QWORD *)&__src[7] = v34;
    BYTE8(__src[7]) = v43;
    __src[8] = xmmword_187C34330;
    *(_QWORD *)&__src[9] = 0;
    *(_QWORD *)&v150 = v22;
    *((_QWORD *)&v150 + 1) = v23;
    *(_QWORD *)&v151 = v24;
    *((_QWORD *)&v151 + 1) = v25;
    *(_QWORD *)&v152 = v27;
    *((_QWORD *)&v152 + 1) = v26;
    *(_QWORD *)&v153 = v28;
    *((_QWORD *)&v153 + 1) = v143;
    LOWORD(v154) = v181;
    outlined copy of NavigationRequest.Action?(v17, v134, v133, v18, v19, v20, v140, v137, v39);
    NavigationListState.update(for:splitViewState:)((uint64_t)__src, (uint64_t)&v150, __dst);
    outlined consume of NavigationRequest.Action(v118, v37, v124, v117, v123, v122, v121, v38, v116);
    return;
  }
  v135 = v9;
  v138 = v13;
  v141 = v16;
  v50 = *(_QWORD *)(v4 + 200);
  v52 = *(_QWORD *)(v5 + 208);
  v51 = *(_QWORD *)(v5 + 216);
  v54 = *(_QWORD *)(v5 + 224);
  v53 = *(_QWORD *)(v5 + 232);
  v55 = *(_QWORD *)(v5 + 240);
  v56 = *(_QWORD *)(v5 + 248);
  v57 = *(_QWORD *)(v5 + 256);
  v58 = *(_BYTE *)(v5 + 264);
  v59 = *(_QWORD *)(v5 + 272);
  *(_QWORD *)&__src[0] = *(_QWORD *)(v5 + 192);
  *((_QWORD *)&__src[0] + 1) = v50;
  *(_QWORD *)&__src[1] = v52;
  *((_QWORD *)&__src[1] + 1) = v51;
  *(_QWORD *)&__src[2] = v54;
  *((_QWORD *)&__src[2] + 1) = v53;
  *(_QWORD *)&__src[3] = v55;
  *((_QWORD *)&__src[3] + 1) = v56;
  *(_QWORD *)&__src[4] = v57;
  BYTE8(__src[4]) = v58;
  *(_QWORD *)&__src[5] = v59;
  swift_retain();
  swift_retain();
  v181 = *(_QWORD *)&__src[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v60 = ResolvedNavigationDestinations.validateValue(_:)(a1);
  if (v146)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v148[0] = v146;
    v61 = v146;
    type metadata accessor for Error();
    if (swift_dynamicCast())
    {
      if (!(*((_QWORD *)&__src[0] + 1) >> 62))
      {

        type metadata accessor for Any.Type();
        v84 = String.init<A>(describing:)();
        v86 = v85;
        *(_QWORD *)&v150 = *(_QWORD *)&__src[0];
        v87 = String.init<A>(describing:)();
        v89 = v88;
        lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError();
        swift_allocError();
        *(_QWORD *)v90 = v84;
        *(_QWORD *)(v90 + 8) = v86;
        *(_QWORD *)(v90 + 16) = v87;
        *(_QWORD *)(v90 + 24) = v89;
        *(_BYTE *)(v90 + 32) = 0;
        goto LABEL_35;
      }
      if (*((_QWORD *)&__src[0] + 1) >> 62 == 1)
      {

        *(_QWORD *)&v150 = *(_QWORD *)&__src[0];
        type metadata accessor for Any.Type();
        v62 = String.init<A>(describing:)();
        v64 = v63;
        lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError();
        swift_allocError();
        *(_QWORD *)v65 = v62;
        *(_QWORD *)(v65 + 8) = v64;
        *(_QWORD *)(v65 + 16) = 0;
        *(_QWORD *)(v65 + 24) = 0;
        *(_BYTE *)(v65 + 32) = 2;
LABEL_35:
        swift_willThrow();

        return;
      }
    }

    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)&v150);
    __src[0] = xmmword_187BFE310;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(&v150, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = 0;
LABEL_22:
    memcpy(__dst, __src, 0x11CuLL);
    return;
  }
  v66 = v60;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v67 = swift_bridgeObjectRelease();
  if ((v66 & 1) != 0 && (*(_QWORD *)(v5 + 168) & 0x8000000000000000) == 0)
  {
    v68 = *(_QWORD *)(v5 + 88);
    v69 = *(_QWORD *)(v5 + 96);
    v70 = *(_QWORD *)(v5 + 104);
    v71 = (_QWORD *)swift_allocObject();
    v71[2] = a1;
    v71[3] = v68;
    v71[4] = v69;
    v71[5] = v70;
    outlined copy of Binding<AnyNavigationPath>?(v68, v69);
    outlined copy of Binding<AnyNavigationPath>?(v68, v69);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    outlined consume of Binding<AnyNavigationPath>?(v68, v69);
    v72 = *(_QWORD *)(v5 + 168);
    if ((v72 & 0x8000000000000000) == 0)
    {
      v74 = *(_QWORD *)(v5 + 112);
      v73 = *(_QWORD *)(v5 + 120);
      v76 = *(_QWORD *)(v5 + 128);
      v75 = *(_QWORD *)(v5 + 136);
      v136 = *(_QWORD *)(v5 + 144);
      v139 = *(_QWORD *)(v5 + 152);
      v142 = *(_QWORD *)(v5 + 160);
      v144 = *(_QWORD *)(v5 + 176);
      v181 = *(_QWORD *)(v5 + 184);
      v148[0] = (id)v72;
      v77 = *(void (**)(id *))(*(_QWORD *)a1 + 128);
      swift_retain();
      v77(v148);
      swift_release();
      v95 = v148[0];
      *(_QWORD *)(v5 + 112) = v74;
      *(_QWORD *)(v5 + 120) = v73;
      *(_QWORD *)(v5 + 128) = v76;
      *(_QWORD *)(v5 + 136) = v75;
      *(_QWORD *)(v5 + 144) = v136;
      *(_QWORD *)(v5 + 152) = v139;
      *(_QWORD *)(v5 + 160) = v142;
      *(_QWORD *)(v5 + 168) = v95;
      v96 = v181;
      *(_QWORD *)(v5 + 176) = v144;
      *(_QWORD *)(v5 + 184) = v96;
    }
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v150);
    if (*(unsigned __int8 *)(v5 + 296) >= 2u)
      *(_BYTE *)(v5 + 296) = 0;
    __src[0] = 0uLL;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(&v150, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = 1;
    goto LABEL_22;
  }
  v78 = v138;
  v79 = v141;
  if (*(unsigned __int8 *)(v5 + 24) > 1u)
    goto LABEL_39;
  v81 = v14;
  v80 = v135;
  v82 = v130;
  if (v126 == 0x1FFFFFFFELL)
  {
    v78 = v177;
    v80 = *((_QWORD *)&v176 + 1);
    v81 = *((_QWORD *)&v177 + 1);
    v82 = *((_QWORD *)&v178 + 1);
    v79 = v178;
  }
  v83 = v82 >> 62;
  if ((_DWORD)v83)
  {
    if ((_DWORD)v83 != 1)
      goto LABEL_39;
    v80 = v78;
    LOBYTE(v78) = v81;
    if (v81 == 6)
      goto LABEL_39;
  }
  else
  {
    v79 = v81;
  }
  if (v78 - 2 < 4)
  {
LABEL_39:
    *(_QWORD *)&__src[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(v67);
    type metadata accessor for Any.Type();
    v91 = String.init<A>(describing:)();
    v93 = v92;
    lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError();
    swift_allocError();
    *(_QWORD *)v94 = v91;
    *(_QWORD *)(v94 + 8) = v93;
    *(_QWORD *)(v94 + 16) = 0;
    *(_QWORD *)(v94 + 24) = 0;
    *(_BYTE *)(v94 + 32) = 3;
    swift_willThrow();
    return;
  }
  if ((_BYTE)v78)
  {
    v97 = 2;
  }
  else
  {
    v97 = 1;
    if (v79 != 3)
      v97 = 2;
  }
  v156 = v178;
  v157 = v179;
  v152 = v174;
  v153 = v175;
  v154 = v176;
  v155 = v177;
  v150 = v172;
  v151 = v173;
  v158 = v180;
  v159 = v80;
  v160 = v97;
  v161 = v79;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v165 = a1;
  v166 = 0u;
  v167 = 0u;
  v168 = 0u;
  v169 = 0;
  v170 = 11;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v150);
  __src[0] = xmmword_187BFE310;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(&v150, (_OWORD *)((char *)&__src[1] + 8));
  *(_QWORD *)((char *)&__src[17] + 4) = 0;
  memcpy(__dst, __src, 0x11CuLL);
  swift_retain();
  outlined retain of NavigationRequest((uint64_t)&v172);
}

void NavigationColumnState.replaceRootValue(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  NavigationColumnState.ejectAll()();
  v3 = *(_QWORD *)(v1 + 120);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 128);
  v6 = *(_QWORD *)(v1 + 136);
  v7 = *(_QWORD *)(v1 + 168);
  v8 = *(_QWORD *)(v1 + 176);
  v9 = *(_QWORD *)(v1 + 184);
  if (v7 < 0)
  {
    outlined consume of NavigationColumnState.ColumnContent(v4, v3, v5, v6, *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160), v7);
    v8 = 0;
    v9 = 0;
    v7 = 0x8000000000000000;
  }
  else
  {
    outlined consume of NavigationColumnState.ReplacedRoot?(v4, v3, v5, v6);
  }
  *(_QWORD *)(v1 + 112) = a1;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_QWORD *)(v1 + 168) = v7;
  *(_QWORD *)(v1 + 176) = v8;
  *(_QWORD *)(v1 + 184) = v9;
  *(_BYTE *)(v1 + 296) = 1;
  __asm { BR              X13 }
}

uint64_t sub_18754FBE0()
{
  void *v0;
  __int128 v2[18];
  __int128 v3[22];

  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v2);
  outlined init with take of NavigationState.UpdateResult(v2, v3);
  v2[0] = xmmword_187C39070;
  LOBYTE(v2[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v3, (__int128 *)((char *)&v2[1] + 8));
  *(_QWORD *)((char *)&v2[17] + 4) = 1;
  memcpy(v0, v2, 0x11CuLL);
  return swift_retain();
}

void NavigationColumnState.replaceRootView(_:identifier:dismiss:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v20 = a2[3];
  NavigationColumnState.ejectAll()();
  v10 = *(_QWORD *)(v4 + 112);
  v18 = *(_QWORD *)(v4 + 128);
  v19 = *(_QWORD *)(v4 + 120);
  v16 = *(_QWORD *)(v4 + 144);
  v17 = *(_QWORD *)(v4 + 136);
  v11 = *(_QWORD *)(v4 + 168);
  v14 = *(_QWORD *)(v4 + 160);
  v15 = *(_QWORD *)(v4 + 152);
  v13 = *(_QWORD *)(v4 + 176);
  v12 = *(_QWORD *)(v4 + 184);
  swift_retain();
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v8, v9);
  swift_retain();
  if (v11 < 0)
  {
    outlined consume of NavigationColumnState.ColumnContent(v10, v19, v18, v17, v16, v15, v14, v11);
    v13 = 0;
    v12 = 0;
    v11 = 0x8000000000000000;
  }
  else
  {
    outlined consume of NavigationColumnState.ReplacedRoot?(v10, v19, v18, v17);
  }
  *(_QWORD *)(v4 + 112) = a1 | 0x8000000000000000;
  *(_QWORD *)(v4 + 120) = v7;
  *(_QWORD *)(v4 + 128) = v8;
  *(_QWORD *)(v4 + 136) = v9;
  *(_QWORD *)(v4 + 144) = v20;
  *(_QWORD *)(v4 + 152) = a3;
  *(_QWORD *)(v4 + 160) = a4;
  *(_QWORD *)(v4 + 168) = v11;
  *(_QWORD *)(v4 + 176) = v13;
  *(_QWORD *)(v4 + 184) = v12;
  *(_BYTE *)(v4 + 296) = 1;
  __asm { BR              X13 }
}

void *sub_18754FDFC()
{
  void *v1;
  __int128 v2[18];
  __int128 v3[22];

  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v2);
  outlined init with take of NavigationState.UpdateResult(v2, v3);
  v2[0] = xmmword_187C39070;
  LOBYTE(v2[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v3, (__int128 *)((char *)&v2[1] + 8));
  *(_QWORD *)((char *)&v2[17] + 4) = 1;
  return memcpy(v1, v2, 0x11CuLL);
}

void *NavigationColumnState.programmaticallyPresentView(_:fromDepth:identifier:dismiss:request:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__dst;
  __int128 v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _OWORD __src[18];
  _OWORD v63[4];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v9 = v7;
  v12 = *a3;
  v11 = a3[1];
  v14 = a3[2];
  v13 = a3[3];
  v15 = *(_OWORD *)(a6 + 112);
  v66 = *(_OWORD *)(a6 + 96);
  v67 = v15;
  v68 = *(_QWORD *)(a6 + 128);
  v16 = *(_OWORD *)(a6 + 48);
  v63[2] = *(_OWORD *)(a6 + 32);
  v63[3] = v16;
  v17 = *(_OWORD *)(a6 + 80);
  v64 = *(_OWORD *)(a6 + 64);
  v65 = v17;
  v18 = *(_OWORD *)(a6 + 16);
  v63[0] = *(_OWORD *)a6;
  v63[1] = v18;
  if (a2 != -1)
  {
    __dst = a7;
    v69 = v8;
    if (*(unsigned __int8 *)(v9 + 296) >= 2u)
      *(_BYTE *)(v9 + 296) = 0;
    *(_QWORD *)&__src[0] = a1;
    *((_QWORD *)&__src[0] + 1) = v12;
    *(_QWORD *)&__src[1] = v11;
    *((_QWORD *)&__src[1] + 1) = v14;
    *(_QWORD *)&__src[2] = v13;
    *((_QWORD *)&__src[2] + 1) = a4;
    *(_QWORD *)&__src[3] = a5;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of _ViewList_ID.Canonical?(v11, v14);
    v20 = NavigationColumnState.ColumnContent.presentView(_:from:)((uint64_t)__src, a2);
    v22 = v21;
    v24 = v23;
    v25 = v23;
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v11, v14);
    swift_release();
    if (v25 == 1)
    {
      v26 = *(_QWORD *)(v9 + 88);
      v27 = *(_QWORD *)(v9 + 96);
      v28 = *(_QWORD *)(v9 + 104);
      v29 = (_QWORD *)swift_allocObject();
      v29[2] = v20;
      v29[3] = v26;
      v29[4] = v27;
      v29[5] = v28;
      outlined copy of Binding<AnyNavigationPath>?(v26, v27);
      static Update.enqueueAction(_:)();
      swift_release();
    }
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v45);
    *(_QWORD *)&__src[0] = v20;
    *((_QWORD *)&__src[0] + 1) = v22;
    LOBYTE(__src[1]) = v24;
    outlined init with take of NavigationState.UpdateResult(v45, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = 1;
    return memcpy(__dst, __src, 0x11CuLL);
  }
  if (*(unsigned __int8 *)(v9 + 24) > 1u)
  {
LABEL_16:
    lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError();
    swift_allocError();
    *(_OWORD *)v37 = 0u;
    *(_OWORD *)(v37 + 16) = 0u;
    *(_BYTE *)(v37 + 32) = 5;
    return (void *)swift_willThrow();
  }
  v31 = *(_QWORD *)(a6 + 168);
  if (v31 >> 1 != 0xFFFFFFFF)
  {
    v32 = *(_QWORD *)(a6 + 136);
    v34 = *(_QWORD *)(a6 + 144);
    v35 = *(_QWORD *)(a6 + 152);
    v33 = *(_QWORD *)(a6 + 160);
    v36 = v31 >> 62;
    if ((_DWORD)v36)
      goto LABEL_10;
LABEL_14:
    v33 = v35;
    goto LABEL_15;
  }
  v32 = *((_QWORD *)&v64 + 1);
  v35 = *((_QWORD *)&v65 + 1);
  v34 = v65;
  v33 = v66;
  v36 = *((_QWORD *)&v66 + 1) >> 62;
  if (!(*((_QWORD *)&v66 + 1) >> 62))
    goto LABEL_14;
LABEL_10:
  if ((_DWORD)v36 != 1)
    goto LABEL_16;
  v32 = v34;
  LOBYTE(v34) = v35;
  if (v35 == 6)
    goto LABEL_16;
LABEL_15:
  if (v34 - 2 < 4)
    goto LABEL_16;
  if ((_BYTE)v34)
  {
    v38 = 2;
  }
  else
  {
    v38 = 1;
    if (v33 != 3)
      v38 = 2;
  }
  v39 = *(_OWORD *)(a6 + 112);
  v45[6] = *(_OWORD *)(a6 + 96);
  v45[7] = v39;
  v40 = *(_QWORD *)(a6 + 128);
  v41 = *(_OWORD *)(a6 + 48);
  v45[2] = *(_OWORD *)(a6 + 32);
  v45[3] = v41;
  v42 = *(_OWORD *)(a6 + 80);
  v45[4] = *(_OWORD *)(a6 + 64);
  v45[5] = v42;
  v43 = *(_OWORD *)(a6 + 16);
  v45[0] = *(_OWORD *)a6;
  v45[1] = v43;
  v46 = v40;
  v47 = v32;
  v48 = v38;
  v49 = v33;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = a1;
  v54 = v12;
  v55 = v11;
  v56 = v14;
  v57 = v13;
  v58 = a4;
  v59 = a5;
  v60 = 0;
  v61 = 12;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v45);
  __src[0] = xmmword_187BFE310;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v45, (_OWORD *)((char *)&__src[1] + 8));
  *(_QWORD *)((char *)&__src[17] + 4) = 0;
  memcpy(a7, __src, 0x11CuLL);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v11, v14);
  return (void *)outlined retain of NavigationRequest((uint64_t)v63);
}

void *NavigationColumnState.programmaticallyDismissView(identifier:request:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  __int16 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  char v38;
  void *result;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE __src[288];
  uint64_t v79;
  char v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v4 = v3;
  v73 = a1[1];
  v5 = a1[3];
  v71 = *a1;
  v72 = a1[2];
  v6 = *(_OWORD *)(a2 + 112);
  v114 = *(_OWORD *)(a2 + 96);
  v115 = v6;
  v63 = *(_QWORD *)(a2 + 136);
  v116 = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 48);
  v110 = *(_OWORD *)(a2 + 32);
  v111 = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v112 = *(_OWORD *)(a2 + 64);
  v113 = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v108 = *(_OWORD *)a2;
  v109 = v9;
  v65 = *(_QWORD *)(a2 + 152);
  v66 = *(_QWORD *)(a2 + 144);
  v61 = *(_QWORD *)(a2 + 160);
  v52 = *(_QWORD *)(a2 + 184);
  v53 = *(_QWORD *)(a2 + 192);
  v54 = *(_QWORD *)(a2 + 200);
  v55 = *(_QWORD *)(a2 + 208);
  v56 = *(_QWORD *)(a2 + 216);
  v57 = *(_QWORD *)(a2 + 224);
  v58 = *(_QWORD *)(a2 + 232);
  v59 = *(_QWORD *)(a2 + 240);
  v10 = v3[14];
  v77 = v3[15];
  v12 = v3[16];
  v11 = v3[17];
  v14 = v3[18];
  v13 = v3[19];
  v15 = v4[20];
  v16 = v4[21];
  v17 = v10 & 0xF000000000000007;
  v75 = v4[22];
  v76 = v15;
  v74 = v4[23];
  v68 = v13;
  v70 = v16;
  v51 = *(_BYTE *)(a2 + 248);
  v62 = *(_QWORD *)(a2 + 168);
  if ((v16 & 0x8000000000000000) == 0)
  {
    if ((v10 & 0x8000000000000000) == 0 || v17 == 0xF000000000000007)
    {
      v22 = *((unsigned __int8 *)v4 + 24);
LABEL_11:
      v23 = *(_WORD *)((char *)v4 + 297);
      v24 = *((_BYTE *)v4 + 296);
      v25 = v4[36];
      v26 = v4[34];
      v27 = *((_BYTE *)v4 + 264);
      v29 = v4[31];
      v28 = v4[32];
      v30 = v4[28];
      v31 = v4[13];
      v32 = v4[2];
      v33 = *((_DWORD *)v4 + 2);
      *(_QWORD *)__src = *v4;
      *(_DWORD *)&__src[8] = v33;
      *(_QWORD *)&__src[16] = v32;
      v64 = v22;
      __src[24] = v22;
      v34 = *((_OWORD *)v4 + 3);
      *(_OWORD *)&__src[32] = *((_OWORD *)v4 + 2);
      *(_OWORD *)&__src[48] = v34;
      *(_OWORD *)&__src[64] = *((_OWORD *)v4 + 4);
      *(_QWORD *)&__src[80] = v4[10];
      *(_OWORD *)&__src[88] = *(_OWORD *)(v4 + 11);
      *(_QWORD *)&__src[104] = v31;
      *(_QWORD *)&__src[112] = v10;
      *(_QWORD *)&__src[120] = v77;
      *(_QWORD *)&__src[128] = v12;
      *(_QWORD *)&__src[136] = v11;
      *(_QWORD *)&__src[144] = v14;
      *(_QWORD *)&__src[152] = v13;
      *(_QWORD *)&__src[160] = v15;
      v35 = v75;
      *(_QWORD *)&__src[168] = v16;
      *(_QWORD *)&__src[176] = v75;
      *(_QWORD *)&__src[184] = v74;
      v36 = *((_OWORD *)v4 + 13);
      *(_OWORD *)&__src[192] = *((_OWORD *)v4 + 12);
      *(_OWORD *)&__src[208] = v36;
      *(_QWORD *)&__src[224] = v30;
      *(_OWORD *)&__src[232] = *(_OWORD *)(v4 + 29);
      *(_QWORD *)&__src[248] = v29;
      *(_QWORD *)&__src[256] = v28;
      __src[264] = v27;
      *(_QWORD *)&__src[272] = v26;
      *(_QWORD *)&__src[280] = v4[35];
      v79 = v25;
      v80 = v24;
      v81 = v23;
      outlined copy of NavigationColumnState.ColumnContent(v10, v77, v12, v11, v14, v13, v15, v16);
      outlined retain of NavigationColumnState((uint64_t *)__src);
      swift_release();
      v60 = v14;
      outlined consume of NavigationColumnState.ReplacedRoot?(v10, v77, v12, v11);
      outlined release of NavigationColumnState((uint64_t *)__src);
      goto LABEL_15;
    }
    v18 = v77;
    outlined copy of NavigationColumnState.ReplacedRoot(v10, v77, v12, v11);
    goto LABEL_5;
  }
  if (v17 == 0xF000000000000007)
  {
    outlined consume of NavigationColumnState.ColumnContent(v10, v77, v12, v11, v14, v13, v15, v16);
LABEL_13:
    v22 = *((unsigned __int8 *)v4 + 24);
    goto LABEL_14;
  }
  if ((v10 & 0x8000000000000000) == 0)
    goto LABEL_13;
  v18 = v77;
  outlined copy of NavigationColumnState.ReplacedRoot?(v10, v77, v12, v11);
LABEL_5:
  *(_QWORD *)__src = v18;
  *(_QWORD *)&__src[8] = v12;
  *(_QWORD *)&__src[16] = v11;
  *(_QWORD *)&__src[24] = v14;
  *(_QWORD *)&v84 = v71;
  *((_QWORD *)&v84 + 1) = v73;
  *(_QWORD *)&v85 = v72;
  *((_QWORD *)&v85 + 1) = v5;
  outlined copy of NavigationColumnState.ColumnContent(v10, v18, v12, v11, v14, v13, v15, v16);
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v12, v11);
  v19 = v13;
  v20 = NavigationLinkSelectionIdentifier.matches(_:)(&v84);
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v12, v11);
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v12, v11);
  v21 = v19;
  v15 = v76;
  outlined consume of NavigationColumnState.ColumnContent(v10, v18, v12, v11, v14, v21, v76, v16);
  if ((v20 & 1) != 0)
  {
    NavigationColumnState.ejectAll()();
    *((_BYTE *)v4 + 296) = 0;
LABEL_36:
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v84);
    *(_OWORD *)__src = xmmword_187BFE310;
    __src[16] = 2;
    outlined init with take of NavigationState.UpdateResult(&v84, &__src[24]);
    *(_QWORD *)&__src[276] = 1;
    return memcpy(a3, __src, 0x11CuLL);
  }
  v22 = *((unsigned __int8 *)v4 + 24);
  v13 = v68;
  if ((v16 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_14:
  v64 = v22;
  v60 = v14;
  v35 = MEMORY[0x1E0DEE9D8];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
LABEL_15:
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v73, v72);
  v67 = specialized Collection.firstIndex(where:)(v35, v71, v73, v72, v5);
  v38 = v37;
  swift_release();
  outlined consume of Text.LineStyle?(v73, v72);
  swift_bridgeObjectRelease();
  result = (void *)swift_bridgeObjectRelease();
  if ((v38 & 1) == 0)
  {
    if (__OFADD__(v67, 1))
    {
      __break(1u);
    }
    else
    {
      if (v16 < 0)
        goto LABEL_36;
      outlined copy of NavigationColumnState.ReplacedRoot?(v10, v77, v12, v11);
      swift_retain();
      v40 = v75;
      swift_bridgeObjectRetain();
      v41 = v74;
      swift_bridgeObjectRetain();
      specialized Collection<>.dismiss(from:)(v67 + 1, v75, v74);
      result = (void *)outlined consume of NavigationColumnState.ColumnContent(v10, v77, v12, v11, v60, v68, v76, v70);
      v82 = v75;
      v83 = v74;
      v42 = *(_QWORD *)(v75 + 16);
      v43 = v42 - v67;
      if (!__OFSUB__(v42, v67))
      {
        if (!v43)
        {
          v47 = v68;
          v44 = v11;
          v45 = v77;
          goto LABEL_35;
        }
        v44 = v11;
        v45 = v77;
        if ((v43 & 0x8000000000000000) == 0)
        {
          result = (void *)specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*(_QWORD *)(v75 + 16), v67 - v42, 0, v75);
          if ((v46 & 1) != 0)
          {
LABEL_49:
            __break(1u);
            return result;
          }
          if (v42 >= (uint64_t)result)
          {
            specialized IdentifiedArray.replaceSubrange<A>(_:with:)((uint64_t)result, v42);
            v40 = v82;
            v41 = v83;
            v47 = v68;
LABEL_35:
            v4[14] = v10;
            v4[15] = v45;
            v4[16] = v12;
            v4[17] = v44;
            v4[18] = v60;
            v4[19] = v47;
            v4[20] = v76;
            v4[21] = v70;
            v4[22] = v40;
            v4[23] = v41;
            goto LABEL_36;
          }
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
    }
    __break(1u);
    goto LABEL_47;
  }
  if (v64 > 1)
  {
LABEL_33:
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)&v84);
    *(_OWORD *)__src = xmmword_187BFE310;
    __src[16] = 2;
    outlined init with take of NavigationState.UpdateResult(&v84, &__src[24]);
    *(_QWORD *)&__src[276] = 0;
    return memcpy(a3, __src, 0x11CuLL);
  }
  if (v62 >> 1 != 0xFFFFFFFF)
  {
    v48 = v61;
    v49 = v62 >> 62;
    if (v62 >> 62)
      goto LABEL_27;
LABEL_31:
    v48 = v65;
    goto LABEL_32;
  }
  v63 = *((_QWORD *)&v112 + 1);
  v48 = v114;
  v65 = *((_QWORD *)&v113 + 1);
  v66 = v113;
  v49 = *((_QWORD *)&v114 + 1) >> 62;
  if (!(*((_QWORD *)&v114 + 1) >> 62))
    goto LABEL_31;
LABEL_27:
  if ((_DWORD)v49 != 1)
    goto LABEL_33;
  v63 = v66;
  LOBYTE(v66) = v65;
  if (v65 == 6)
    goto LABEL_33;
LABEL_32:
  if (v66 - 2 < 4)
    goto LABEL_33;
  if ((_BYTE)v66)
  {
    v50 = 2;
  }
  else
  {
    v50 = 1;
    if (v48 != 3)
      v50 = 2;
  }
  v90 = v114;
  v91 = v115;
  v86 = v110;
  v87 = v111;
  v88 = v112;
  v89 = v113;
  v84 = v108;
  v85 = v109;
  v92 = v116;
  v93 = v63;
  v94 = v50;
  v95 = v48;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v99 = v52;
  v100 = v53;
  v101 = v54;
  v102 = v55;
  v103 = v56;
  v104 = v57;
  v105 = v58;
  v106 = v59;
  v107 = v51;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v84);
  *(_OWORD *)__src = xmmword_187BFE310;
  __src[16] = 2;
  outlined init with take of NavigationState.UpdateResult(&v84, &__src[24]);
  *(_QWORD *)&__src[276] = 0;
  memcpy(a3, __src, 0x11CuLL);
  outlined copy of NavigationRequest.Action?(v52, v53, v54, v55, v56, v57, v58, v59, v51);
  return (void *)outlined retain of NavigationRequest((uint64_t)&v108);
}

void *NavigationColumnState.presentView(_:identifier:dismiss:request:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 __src[18];
  uint64_t v51[7];
  __int128 v52[21];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v7 = (_QWORD *)v6;
  v12 = *a2;
  v11 = a2[1];
  v14 = a2[2];
  v13 = a2[3];
  v15 = *(_OWORD *)(a5 + 112);
  v54 = *(_OWORD *)(a5 + 96);
  v55 = v15;
  v56 = *(_QWORD *)(a5 + 128);
  v16 = *(_OWORD *)(a5 + 48);
  v52[18] = *(_OWORD *)(a5 + 32);
  v52[19] = v16;
  v17 = *(_OWORD *)(a5 + 80);
  v52[20] = *(_OWORD *)(a5 + 64);
  v53 = v17;
  v18 = *(_OWORD *)(a5 + 16);
  v52[16] = *(_OWORD *)a5;
  v52[17] = v18;
  v19 = *(unsigned __int8 *)(v6 + 24);
  if (*((_QWORD *)&v54 + 1) >> 62)
  {
    if (*((_QWORD *)&v54 + 1) >> 62 != 1 || BYTE8(v53) == 6 || v19 != BYTE8(v53))
      goto LABEL_11;
  }
  else if (v19 != v53)
  {
    goto LABEL_11;
  }
  if ((*(_QWORD *)(v6 + 168) & 0x8000000000000000) != 0)
  {
LABEL_11:
    v44 = *(unsigned __int8 *)(v6 + 24);
    v46 = v13;
    v48 = v12;
    *(_BYTE *)(v6 + 296) = 1;
    swift_retain();
    v24 = a1;
    swift_retain();
    v25 = v11;
    v26 = v11;
    v27 = v14;
    outlined copy of _ViewList_ID.Canonical?(v26, v14);
    v28 = a4;
    swift_retain();
    NavigationColumnState.ejectAll()();
    v29 = *(_QWORD *)(v6 + 112);
    v30 = *(_QWORD *)(v6 + 120);
    v31 = *(_QWORD *)(v6 + 128);
    v32 = *(_QWORD *)(v6 + 136);
    v33 = *(_QWORD *)(v6 + 144);
    v34 = *(_QWORD *)(v6 + 152);
    v35 = *(_QWORD *)(v6 + 160);
    v36 = *(_QWORD *)(v6 + 168);
    v37 = v7[22];
    v38 = v7[23];
    if (v36 < 0)
    {
      outlined consume of NavigationColumnState.ColumnContent(v29, v30, v31, v32, v33, v34, v35, v36);
      v37 = 0;
      v38 = 0;
      v36 = 0x8000000000000000;
    }
    else
    {
      outlined consume of NavigationColumnState.ReplacedRoot?(v29, v30, v31, v32);
    }
    v7[14] = v24 | 0x8000000000000000;
    v7[15] = v48;
    v7[16] = v25;
    v7[17] = v27;
    v7[18] = v46;
    v7[19] = a3;
    v7[20] = v28;
    v7[21] = v36;
    v7[22] = v37;
    v7[23] = v38;
    __asm { BR              X12 }
  }
  v49 = *(_QWORD *)(v6 + 168);
  v20 = *(_QWORD *)(v6 + 112);
  v45 = *(_QWORD *)(v6 + 128);
  v47 = *(_QWORD *)(v6 + 120);
  v42 = *(_QWORD *)(v6 + 144);
  v43 = *(_QWORD *)(v6 + 136);
  v40 = *(_QWORD *)(v6 + 160);
  v41 = *(_QWORD *)(v6 + 152);
  v21 = *(_OWORD *)(v6 + 176);
  if (*(unsigned __int8 *)(v6 + 296) >= 2u)
    *(_BYTE *)(v6 + 296) = 0;
  __src[0] = v21;
  v22 = *(_QWORD *)(v21 + 16);
  v51[0] = a1;
  v51[1] = v12;
  v51[2] = v11;
  v51[3] = v14;
  v51[4] = v13;
  v51[5] = a3;
  v51[6] = a4;
  swift_retain();
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v11, v14);
  swift_retain();
  specialized IdentifiedArray.replaceSubrange<A>(_:with:)(v22, v22, v51);
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v11, v14);
  swift_release();
  *(_QWORD *)(v6 + 112) = v20;
  *(_QWORD *)(v6 + 120) = v47;
  *(_QWORD *)(v6 + 128) = v45;
  *(_QWORD *)(v6 + 136) = v43;
  *(_QWORD *)(v6 + 144) = v42;
  *(_QWORD *)(v6 + 152) = v41;
  *(_QWORD *)(v6 + 160) = v40;
  *(_QWORD *)(v6 + 168) = v49;
  *(_OWORD *)(v6 + 176) = __src[0];
  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__src);
  outlined init with take of NavigationState.UpdateResult(__src, v52);
  __src[0] = xmmword_187BFE310;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v52, (__int128 *)((char *)&__src[1] + 8));
  *(_QWORD *)((char *)&__src[17] + 4) = 1;
  return memcpy(a6, __src, 0x11CuLL);
}

void *NavigationColumnState.updateView(_:identifier:request:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v60[8];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _OWORD __src[18];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v5 = *(_OWORD *)(a3 + 112);
  v84 = *(_OWORD *)(a3 + 96);
  v85 = v5;
  v6 = *(_QWORD *)(a3 + 136);
  v86 = *(_QWORD *)(a3 + 128);
  v7 = *(_OWORD *)(a3 + 48);
  v80 = *(_OWORD *)(a3 + 32);
  v81 = v7;
  v8 = *(_OWORD *)(a3 + 80);
  v82 = *(_OWORD *)(a3 + 64);
  v83 = v8;
  v9 = *(_OWORD *)(a3 + 16);
  v78 = *(_OWORD *)a3;
  v79 = v9;
  v54 = *(_QWORD *)(a3 + 144);
  v56 = v6;
  v50 = *(_QWORD *)(a3 + 160);
  v52 = *(_QWORD *)(a3 + 152);
  v49 = *(_QWORD *)(a3 + 168);
  v10 = *(_QWORD *)(a3 + 192);
  v58 = *(_QWORD *)(a3 + 184);
  v12 = *(_QWORD *)(a3 + 200);
  v11 = *(_QWORD *)(a3 + 208);
  v13 = *(_QWORD *)(a3 + 216);
  v14 = *(_QWORD *)(a3 + 224);
  v16 = *(_QWORD *)(a3 + 232);
  v15 = *(_QWORD *)(a3 + 240);
  v17 = *(unsigned __int8 *)(a3 + 248);
  v18 = a2[1];
  v19 = v4;
  __src[0] = *a2;
  __src[1] = v18;
  if ((NavigationColumnState.ColumnContent.replaceViewDestinationView(_:identifier:)(a1, (uint64_t *)__src) & 1) != 0)
  {
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v60);
    __src[0] = xmmword_187BFE310;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v60, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = 0x100000000;
    v20 = a4;
    return memcpy(v20, __src, 0x11CuLL);
  }
  v21 = v54;
  v23 = v56;
  v22 = v58;
  v24 = v17;
  if (*(unsigned __int8 *)(v19 + 24) > 1u)
  {
LABEL_12:
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v60);
    __src[0] = xmmword_187BFE310;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v60, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = 0;
    v20 = a4;
    return memcpy(v20, __src, 0x11CuLL);
  }
  v25 = v10;
  v26 = v12;
  if (v49 >> 1 != 0xFFFFFFFF)
  {
    v28 = v50;
    v27 = v52;
    v29 = v49 >> 62;
    if (v49 >> 62)
      goto LABEL_6;
LABEL_10:
    v28 = v27;
    goto LABEL_11;
  }
  v23 = *((_QWORD *)&v82 + 1);
  v27 = *((_QWORD *)&v83 + 1);
  v21 = v83;
  v28 = v84;
  v29 = *((_QWORD *)&v84 + 1) >> 62;
  if (!(*((_QWORD *)&v84 + 1) >> 62))
    goto LABEL_10;
LABEL_6:
  if ((_DWORD)v29 != 1)
    goto LABEL_12;
  v23 = v21;
  LOBYTE(v21) = v27;
  if (v27 == 6)
    goto LABEL_12;
LABEL_11:
  if (v21 - 2 < 4)
    goto LABEL_12;
  v47 = v14;
  v48 = v16;
  v46 = v13;
  if ((_BYTE)v21)
  {
    v31 = 2;
  }
  else if (v28 == 3)
  {
    v31 = 1;
  }
  else
  {
    v31 = 2;
  }
  v32 = v15;
  v33 = v11;
  v34 = v26;
  v35 = v23;
  v43 = v24;
  v44 = v25;
  v45 = v15;
  v36 = v26;
  v37 = v11;
  v38 = v13;
  v39 = v48;
  v40 = v24;
  if (v24 == 255)
  {
    v51 = v78;
    v53 = v31;
    v37 = *((_QWORD *)&v79 + 1);
    v14 = *((_QWORD *)&v80 + 1);
    v38 = v80;
    v32 = *((_QWORD *)&v81 + 1);
    v39 = v81;
    v40 = v82;
    v55 = v33;
    v57 = v26;
    v41 = *((_QWORD *)&v78 + 1);
    v42 = v79;
    outlined copy of NavigationRequest.Action(v78, *((uint64_t *)&v78 + 1), v79, *((uint64_t *)&v79 + 1), v80, *((uint64_t *)&v80 + 1), v81, *((uint64_t *)&v81 + 1), v82);
    v36 = v42;
    v25 = v41;
    v22 = v51;
    v31 = v53;
    v33 = v55;
    v34 = v57;
    v35 = v23;
  }
  v60[6] = v84;
  v60[7] = v85;
  v60[2] = v80;
  v60[3] = v81;
  v60[4] = v82;
  v60[5] = v83;
  v60[0] = v78;
  v60[1] = v79;
  v61 = v86;
  v62 = v35;
  v63 = v31;
  v64 = v28;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = v22;
  v69 = v25;
  v70 = v36;
  v71 = v37;
  v72 = v38;
  v73 = v14;
  v74 = v39;
  v75 = v32;
  v76 = v40;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v60);
  __src[0] = xmmword_187BFE310;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v60, (_OWORD *)((char *)&__src[1] + 8));
  *(_QWORD *)((char *)&__src[17] + 4) = 0;
  memcpy(a4, __src, 0x11CuLL);
  outlined copy of NavigationRequest.Action?(v58, v44, v34, v33, v46, v47, v48, v45, v43);
  return (void *)outlined retain of NavigationRequest((uint64_t)&v78);
}

void NavigationColumnState.accumulatedDismiss(count:request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v21 = *(_OWORD *)(a2 + 80);
  v3 = *(unsigned __int8 *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 120);
  v5 = *(_QWORD *)(v2 + 128);
  v6 = *(_QWORD *)(v2 + 136);
  v7 = *(_QWORD *)(v2 + 144);
  v8 = *(_QWORD *)(v2 + 168);
  v9 = *(_QWORD *)(v2 + 176);
  if (*(_QWORD *)(a2 + 104) >> 62
    || *(_QWORD *)(v2 + 16) != *(_QWORD *)(a2 + 72)
    || (_DWORD)v3 != v21
    || *(_QWORD *)(v2 + 32) != *((_QWORD *)&v21 + 1))
  {
    if ((v8 & 0x8000000000000000) == 0)
    {
      v16 = *(unsigned __int8 *)(v2 + 24);
      v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88);
      v19 = *(_QWORD *)(v2 + 160);
      v20 = *(_QWORD *)(v2 + 152);
      v18 = *(_QWORD *)(v2 + 112);
      outlined copy of NavigationColumnState.ColumnContent(v18, v4, v5, v6, v7, v20, v19, v8);
      swift_retain();
      swift_bridgeObjectRetain();
      v11 = swift_bridgeObjectRetain();
      v12 = v10(v11);
      swift_release();
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
      {
        __break(1u);
      }
      else
      {
        v15 = *(_QWORD *)(v9 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NavigationColumnState.ColumnContent(v18, v4, v5, v6, v7, v20, v19, v8);
        if (!__OFADD__(v14, v15))
        {
          v3 = v16;
          if (!__OFADD__(a1, v14 + v15))
            goto LABEL_9;
LABEL_12:
          __break(1u);
          JUMPOUT(0x18755129CLL);
        }
      }
      __break(1u);
      JUMPOUT(0x1875513C4);
    }
    if (__OFADD__(a1, 1))
      goto LABEL_12;
  }
LABEL_9:
  __asm { BR              X11 }
}

void *NavigationColumnState.presentValueInList(value:isSelectionChange:request:activeBinding:splitViewState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[8];
  _BYTE v33[64];
  __int128 v34[8];
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  char v45;
  _OWORD __src[18];
  _OWORD v47[8];
  uint64_t v48;

  v9 = *(_OWORD *)(a2 + 112);
  v47[6] = *(_OWORD *)(a2 + 96);
  v47[7] = v9;
  v48 = *(_QWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 48);
  v47[2] = *(_OWORD *)(a2 + 32);
  v47[3] = v10;
  v11 = *(_OWORD *)(a2 + 80);
  v47[4] = *(_OWORD *)(a2 + 64);
  v47[5] = v11;
  v12 = *(_OWORD *)(a2 + 16);
  v47[0] = *(_OWORD *)a2;
  v47[1] = v12;
  v13 = *(_QWORD *)(a6 + 16);
  if (v13 == 1 || (v14 = *(_QWORD *)(a6 + 32)) == 0)
  {
    v24 = *(_OWORD *)(a2 + 112);
    v34[6] = *(_OWORD *)(a2 + 96);
    v34[7] = v24;
    v25 = *(_QWORD *)(a2 + 128);
    v26 = *(_OWORD *)(a2 + 48);
    v34[2] = *(_OWORD *)(a2 + 32);
    v34[3] = v26;
    v27 = *(_OWORD *)(a2 + 80);
    v34[4] = *(_OWORD *)(a2 + 64);
    v34[5] = v27;
    v28 = *(_OWORD *)(a2 + 16);
    v34[0] = *(_OWORD *)a2;
    v34[1] = v28;
    v36 = *(_OWORD *)(a2 + 136);
    v37 = *(_OWORD *)(a2 + 152);
    v38 = *(_OWORD *)(a2 + 168);
    v35 = v25;
    v39 = a1;
    v40 = a3;
    v41 = a4;
    v42 = a5 & 1;
    v43 = 0u;
    v44 = 0u;
    v45 = 10;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v34);
    __src[0] = xmmword_187BFE310;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v34, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = 0;
    memcpy(a7, __src, 0x11CuLL);
    swift_retain();
    swift_retain();
    swift_retain();
    return (void *)outlined retain of NavigationRequest((uint64_t)v47);
  }
  else
  {
    v15 = *(_WORD *)(a6 + 64);
    v29 = *(_QWORD *)(a6 + 56);
    v16 = *(_QWORD *)(a6 + 40);
    v31 = *(_QWORD *)(a6 + 48);
    v17 = *(_QWORD *)(a6 + 24);
    v18 = *(_QWORD *)a6;
    v19 = *(_QWORD *)(a6 + 8);
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 112))(v32);
    if (*(unsigned __int8 *)(v7 + 24) >= 3u)
      v20 = 3;
    else
      v20 = *(_BYTE *)(v7 + 24);
    outlined init with take of NavigationUpdateEvent.Action((uint64_t)v32, (uint64_t)v33);
    v33[57] = v20;
    outlined init with copy of NavigationUpdateEvent((uint64_t)v33, (uint64_t)__src);
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v14;
    *(_QWORD *)(v21 + 24) = v16;
    v22 = __src[1];
    *(_OWORD *)(v21 + 32) = __src[0];
    *(_OWORD *)(v21 + 48) = v22;
    *(_OWORD *)(v21 + 64) = __src[2];
    *(_OWORD *)(v21 + 74) = *(_OWORD *)((char *)&__src[2] + 10);
    outlined copy of AppIntentExecutor?(v14);
    outlined copy of AppIntentExecutor?(v14);
    outlined copy of NavigationSplitViewState?(v18, v19, v13, v17, v14, v16, v31, v29, v15, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    static Update.enqueueAction(_:)();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
    outlined destroy of NavigationUpdateEvent((uint64_t)v33);
    outlined copy of NavigationSplitViewState?(v18, v19, v13, v17, v14, v16, v31, v29, v15, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v34);
    __src[0] = xmmword_187BFE310;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v34, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = 0;
    return memcpy(a7, __src, 0x11CuLL);
  }
}

uint64_t closure #2 in NavigationColumnState.update(for:shouldAnimate:splitViewState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD v17[2];

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  v11 = type metadata accessor for Logger();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    result = outlined destroy of Logger?((uint64_t)v10);
  }
  else
  {
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_186E48000, v14, v15, "<Navigation clientBoundPath>: Enqueueing replacement", v16, 2u);
      MEMORY[0x18D760108](v16, -1, -1);
    }

    result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  if (a2)
  {
    v17[1] = a4;
    outlined copy of Binding<AnyNavigationPath>?(a1, a2);
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NavigationColumnState.updateAnimationState(requestAnimation:disablesAnimations:seedDelta:)(uint64_t result, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v6;
  __int16 v7;
  int v8;
  BOOL v9;
  int v10;
  __int16 v11;

  v4 = *(_WORD *)(v3 + 297);
  if (v4 == 2)
    goto LABEL_15;
  v6 = result;
  if ((a2 & 1) != 0 && a3)
  {
    ++*(_DWORD *)(v3 + 280);
LABEL_9:
    v7 = 1;
    goto LABEL_10;
  }
  v7 = v4 & 1;
  if (result && (a2 & 1) == 0)
  {
    v8 = *(_DWORD *)(v3 + 284);
    v9 = __CFADD__(v8, 1);
    v10 = v8 + 1;
    if (!v9)
    {
      *(_DWORD *)(v3 + 284) = v10;
      swift_retain();
      result = swift_release();
      *(_QWORD *)(v3 + 288) = v6;
      goto LABEL_9;
    }
    __break(1u);
LABEL_15:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_10:
  if (((a2 | ((unsigned __int16)(v4 & 0x100) >> 8)) & 1) != 0)
    v11 = 256;
  else
    v11 = 0;
  *(_WORD *)(v3 + 297) = v11 | v7;
  return result;
}

int64_t specialized IdentifiedArray.popLast(_:)(int64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  char v6;
  int64_t v7;
  char v8;
  uint64_t v9;

  if (result < 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v2 = result;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = -result;
  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(v4, -result, 0, *v1);
  if ((v6 & 1) != 0)
    v7 = 0;
  else
    v7 = result;
  if (v4 < v7)
    goto LABEL_14;
  if (v7 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v7;
  }
  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(v4, v5, 0, v3);
  if ((v8 & 1) == 0)
  {
    v9 = result;
    if (v4 >= result)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized IdentifiedArray.replaceSubrange<A>(_:with:)(v9, v4);
      return v7;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in NavigationColumnState.pop(_:request:splitViewState:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 != result)
  {
    v4 = result;
    v13 = a3 + 32;
    v14 = *(_QWORD *)(a3 + 16);
    v5 = a2 - 1;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v6 = a2;
    while (!__OFSUB__(v6--, 1))
    {
      if (v6 < v4 || v6 >= a2)
        goto LABEL_11;
      if (v6 < 0)
        goto LABEL_12;
      if (v5 >= v14)
        goto LABEL_13;
      v8 = (_QWORD *)(v13 + 56 * v6);
      v9 = v8[2];
      v10 = v8[3];
      v11 = (void (*)(uint64_t))v8[5];
      swift_retain();
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v9, v10);
      v12 = swift_retain();
      v11(v12);
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(v9, v10);
      result = swift_release();
      if (v6 == v4)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

uint64_t closure #3 in NavigationColumnState.pop(_:request:splitViewState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD v17[2];

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  v11 = type metadata accessor for Logger();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    result = outlined destroy of Logger?((uint64_t)v10);
  }
  else
  {
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_186E48000, v14, v15, "<Navigation clientBoundPath>: Enqueueing replacement", v16, 2u);
      MEMORY[0x18D760108](v16, -1, -1);
    }

    result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  if (a2)
  {
    if (a4)
    {
      v17[1] = a4;
      outlined copy of Binding<AnyNavigationPath>?(a1, a2);
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in NavigationColumnState.popAllForSelectionChange(popReplacedRoots:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    result = outlined destroy of Logger?((uint64_t)v9);
  }
  else
  {
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_186E48000, v13, v14, "<Navigation clientBoundPath>: Enqueueing removeAll", v15, 2u);
      MEMORY[0x18D760108](v15, -1, -1);
    }

    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  if (a2)
  {
    v20[0] = a1;
    v20[1] = a2;
    v20[2] = a3;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v17 = v16;
    swift_retain();
    swift_retain();
    swift_retain();
    v18 = MEMORY[0x18D75B9C8](&v21, v17);
    v19 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v21 + 88))(v18);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v21 = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 104))();
      swift_release();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 128))(v19);
    v20[0] = v21;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in NavigationColumnState.presentValue(_:request:splitViewState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  v12 = type metadata accessor for Logger();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    result = outlined destroy of Logger?((uint64_t)v11);
  }
  else
  {
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_186E48000, v15, v16, "<Navigation clientBoundPath>: Enqueueing push", v17, 2u);
      MEMORY[0x18D760108](v17, -1, -1);
    }

    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  }
  if (a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a2, a3, a4);
  __break(1u);
  return result;
}

void NavigationColumnState.ejectAll()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[13];
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  outlined copy of Binding<AnyNavigationPath>?(v1, v2);
  static Update.enqueueAction(_:)();
  swift_release();
  v5 = v0[14];
  v7 = v0[15];
  v6 = v0 + 14;
  v8 = v6[2];
  v9 = v6[3];
  v10 = v6[5];
  v22 = v6[4];
  v11 = v6[6];
  v12 = v6[7];
  v14 = v6[8];
  v13 = v6[9];
  if (v12 < 0)
  {
    if ((~v5 & 0xF000000000000007) == 0)
      goto LABEL_7;
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_8;
    v18 = v6[4];
    v20 = v6[5];
    outlined copy of NavigationColumnState.ReplacedRoot?(v5, v7, v8, v9);
LABEL_5:
    v19 = (_QWORD *)swift_allocObject();
    v19[2] = v5 & 0x7FFFFFFFFFFFFFFFLL;
    v19[3] = v7;
    v19[4] = v8;
    v19[5] = v9;
    v19[6] = v18;
    v19[7] = v20;
    v19[8] = v11;
    outlined copy of NavigationColumnState.ColumnContent(v5, v7, v8, v9, v18, v20, v11, v12);
    swift_retain();
    swift_retain();
    outlined copy of _ViewList_ID.Canonical?(v8, v9);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v8, v9);
    swift_release();
    swift_release();
    v10 = v20;
LABEL_7:
    outlined consume of NavigationColumnState.ColumnContent(v5, v7, v8, v9, v22, v10, v11, v12);
    goto LABEL_8;
  }
  v21 = v6[7];
  v15 = v6[5];
  outlined copy of NavigationColumnState.ReplacedRoot?(v5, v7, v8, v9);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Collection<>.dismiss(from:)(0, v14, v13);
  v16 = v15;
  v17 = v15;
  v12 = v21;
  outlined consume of NavigationColumnState.ColumnContent(v5, v7, v8, v9, v22, v17, v11, v21);
  if (v5 < 0 && (v5 & 0xF000000000000007) != 0xF000000000000007)
  {
    v18 = v22;
    v20 = v16;
    outlined copy of NavigationColumnState.ReplacedRoot(v5, v7, v8, v9);
    goto LABEL_5;
  }
LABEL_8:
  NavigationColumnState.ColumnContent.clearAll(popReplacedRoots:)(1);
}

uint64_t closure #1 in NavigationColumnState.programmaticallyPresentView(_:fromDepth:identifier:dismiss:request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  v12 = type metadata accessor for Logger();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    result = outlined destroy of Logger?((uint64_t)v11);
  }
  else
  {
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v17 = 134217984;
      v20[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v15, v16, "<Navigation clientBoundPath>: Enqueueing pop %ld", v17, 0xCu);
      MEMORY[0x18D760108](v17, -1, -1);
    }

    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  }
  if (a3)
  {
    v20[0] = a2;
    v20[1] = a3;
    v20[2] = a4;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v19 = v18;
    swift_retain();
    swift_retain();
    swift_retain();
    MEMORY[0x18D75B9C8](&v21, v19);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v21 = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 104))();
      swift_release();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 128))(a1);
    v20[0] = v21;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in NavigationColumnState.ejectAll()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    result = outlined destroy of Logger?((uint64_t)v9);
    if (!a2)
      return result;
    goto LABEL_7;
  }
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_186E48000, v13, v14, "<Navigation clientBoundPath>: Enqueueing removeAll", v15, 2u);
    MEMORY[0x18D760108](v15, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  if (a2)
  {
LABEL_7:
    v20[0] = a1;
    v20[1] = a2;
    v20[2] = a3;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v17 = v16;
    swift_retain();
    swift_retain();
    swift_retain();
    v18 = MEMORY[0x18D75B9C8](&v21, v17);
    v19 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v21 + 88))(v18);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v21 = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 104))();
      swift_release();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 128))(v19);
    v20[0] = v21;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance NavigationViewDestinationView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 8) = v2;
  v4 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 16) = v4;
  swift_retain();
  return outlined copy of _ViewList_ID.Canonical?(v2, v4);
}

char *specialized IdentifiedArray.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *result;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  _QWORD *v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v65;
  int64_t v66;
  _QWORD *v68;
  uint64_t v69;
  __int128 v70;

  v4 = v3;
  if (a1 != a2)
  {
    v29 = a1;
    if (a2 < a1)
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    if (a1 >= a2)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v30 = 56 * a1;
    while ((v29 & 0x8000000000000000) == 0)
    {
      if (v29 >= *(_QWORD *)(*v4 + 16))
        goto LABEL_55;
      v31 = (_QWORD *)(*v4 + v30);
      v33 = v31[5];
      v32 = v31[6];
      v35 = v31[7];
      v34 = v31[8];
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v32, v35);
      swift_bridgeObjectRetain();
      v36 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v32, v35, v34);
      LOBYTE(v34) = v37;
      swift_bridgeObjectRelease();
      if ((v34 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v39 = v4[1];
        v4[1] = 0x8000000000000000;
        v40 = v4;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
        v41 = *(_QWORD *)(v39 + 48) + 32 * v36;
        v42 = *(_QWORD *)(v41 + 8);
        v43 = *(_QWORD *)(v41 + 16);
        swift_release();
        outlined consume of Text.LineStyle?(v42, v43);
        specialized _NativeDictionary._delete(at:)(v36, v39);
        v40[1] = v39;
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Text.LineStyle?(v32, v35);
        v4 = v40;
      }
      else
      {
        swift_release();
        outlined consume of Text.LineStyle?(v32, v35);
      }
      ++v29;
      v30 += 56;
      if (a2 == v29)
        goto LABEL_2;
    }
    goto LABEL_54;
  }
LABEL_2:
  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v65 = 1 - v5;
  if (__OFSUB__(1, v5))
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v6 = *(_QWORD *)(*v4 + 16);
  v66 = v6;
  if (v6 < a2)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v68 = v4;
  if (v6 == a2)
  {
LABEL_6:
    v7 = *a3;
    v8 = a3[1];
    v10 = a3[2];
    v9 = a3[3];
    v11 = a3[4];
    outlined retain of NavigationViewDestinationView((uint64_t)a3);
    v12 = a1 + 1;
    if (!__OFADD__(a1, 1))
    {
      v13 = a1;
      do
      {
        if (!v7)
        {
          outlined consume of NavigationViewDestinationView?(0, 0, 0, 0);
          outlined retain of NavigationViewDestinationView((uint64_t)a3);
          return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t)a3);
        }
        swift_retain();
        outlined copy of _ViewList_ID.Canonical?(v10, v9);
        v15 = swift_isUniquelyReferenced_nonNull_native();
        v16 = (_QWORD *)v4[1];
        v4[1] = 0x8000000000000000;
        v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10, v9, v11);
        v19 = v16[2];
        v20 = (v17 & 1) == 0;
        v21 = v19 + v20;
        if (__OFADD__(v19, v20))
          goto LABEL_53;
        v22 = v17;
        if (v16[3] >= v21)
        {
          if ((v15 & 1) != 0)
          {
            if ((v17 & 1) != 0)
              goto LABEL_8;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if ((v22 & 1) != 0)
              goto LABEL_8;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, v15);
          v23 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10, v9, v11);
          if ((v22 & 1) != (v24 & 1))
            goto LABEL_68;
          v18 = v23;
          if ((v22 & 1) != 0)
          {
LABEL_8:
            *(_QWORD *)(v16[7] + 8 * v18) = v13;
            goto LABEL_9;
          }
        }
        v16[(v18 >> 6) + 8] |= 1 << v18;
        v25 = (uint64_t *)(v16[6] + 32 * v18);
        *v25 = v8;
        v25[1] = v10;
        v25[2] = v9;
        v25[3] = v11;
        *(_QWORD *)(v16[7] + 8 * v18) = v13;
        v26 = v16[2];
        v14 = __OFADD__(v26, 1);
        v27 = v26 + 1;
        if (v14)
          goto LABEL_60;
        v16[2] = v27;
        swift_retain();
        outlined copy of _ViewList_ID.Canonical?(v10, v9);
LABEL_9:
        v13 = v12;
        v4 = v68;
        v68[1] = v16;
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Text.LineStyle?(v10, v9);
        swift_release();
        swift_release();
        outlined consume of Text.LineStyle?(v10, v9);
        swift_release();
        v11 = 0;
        v9 = 0;
        v10 = 0;
        v8 = 0;
        v7 = 0;
        v14 = __OFADD__(v12++, 1);
      }
      while (!v14);
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v44 = a2;
  if (v6 > a2)
  {
    v45 = 56 * a2;
    while (1)
    {
      if ((v44 & 0x8000000000000000) != 0)
        goto LABEL_56;
      if (v44 >= *(_QWORD *)(*v4 + 16))
        goto LABEL_57;
      v46 = v44 + v65;
      if (__OFADD__(v44, v65))
        goto LABEL_58;
      v69 = v45;
      v47 = *v4 + v45;
      v49 = *(_QWORD *)(v47 + 40);
      v48 = *(_QWORD *)(v47 + 48);
      v70 = *(_OWORD *)(v47 + 56);
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v48, v70);
      v50 = swift_isUniquelyReferenced_nonNull_native();
      v51 = (_QWORD *)v4[1];
      v4[1] = 0x8000000000000000;
      v53 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48, v70, *((uint64_t *)&v70 + 1));
      v54 = v51[2];
      v55 = (v52 & 1) == 0;
      v56 = v54 + v55;
      if (__OFADD__(v54, v55))
        goto LABEL_59;
      v57 = v52;
      if (v51[3] >= v56)
      {
        v4 = v68;
        if ((v50 & 1) != 0)
        {
          if ((v52 & 1) != 0)
            goto LABEL_36;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if ((v57 & 1) != 0)
            goto LABEL_36;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, v50);
        v58 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48, v70, *((uint64_t *)&v70 + 1));
        if ((v57 & 1) != (v59 & 1))
          goto LABEL_68;
        v53 = v58;
        v4 = v68;
        if ((v57 & 1) != 0)
        {
LABEL_36:
          *(_QWORD *)(v51[7] + 8 * v53) = v46;
          goto LABEL_37;
        }
      }
      v51[(v53 >> 6) + 8] |= 1 << v53;
      v60 = v51[6] + 32 * v53;
      *(_QWORD *)v60 = v49;
      *(_QWORD *)(v60 + 8) = v48;
      *(_OWORD *)(v60 + 16) = v70;
      *(_QWORD *)(v51[7] + 8 * v53) = v46;
      v61 = v51[2];
      v14 = __OFADD__(v61, 1);
      v62 = v61 + 1;
      if (v14)
        goto LABEL_61;
      v51[2] = v62;
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v48, v70);
LABEL_37:
      ++v44;
      v4[1] = v51;
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Text.LineStyle?(v48, v70);
      v45 = v69 + 56;
      if (v66 == v44)
        goto LABEL_6;
    }
  }
LABEL_67:
  __break(1u);
LABEL_68:
  result = (char *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined copy of ResolvedNavigationDestinations.ChangeRequest(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined copy of NavigationState.UpdateResult(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unsigned __int8 a32)
{
  if (a14 >> 2 != 0x7FFFFFFF)
  {
    outlined copy of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
    swift_retain();
    return outlined copy of NavigationRequest.Action?(a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v5 = a4 + a5;
  if (__OFADD__(a4, a5))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v5 < a3 || a3 < a4 || result < a4 || v5 < result)
    goto LABEL_19;
  v6 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_14;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_14:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }
  if (result < a4 || v5 < result)
    goto LABEL_22;
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  BOOL v7;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_13;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_13:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
    goto LABEL_16;
  if (result > v4)
LABEL_17:
    __break(1u);
  return result;
}

uint64_t specialized IdentifiedArray.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  _QWORD *v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  __int128 v48;

  v3 = v2;
  v4 = a2;
  if (a1 != a2)
  {
    v7 = a1;
    if (a2 < a1)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (a1 >= a2)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v8 = 56 * a1;
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v7 >= *(_QWORD *)(*v3 + 16))
        goto LABEL_37;
      v9 = (_QWORD *)(*v3 + v8);
      v11 = v9[5];
      v10 = v9[6];
      v13 = v9[7];
      v12 = v9[8];
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v10, v13);
      swift_bridgeObjectRetain();
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10, v13, v12);
      LOBYTE(v12) = v15;
      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v17 = v3[1];
        v3[1] = 0x8000000000000000;
        v18 = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
        v19 = *(_QWORD *)(v17 + 48) + 32 * v14;
        v20 = *(_QWORD *)(v19 + 8);
        v21 = *(_QWORD *)(v19 + 16);
        swift_release();
        outlined consume of Text.LineStyle?(v20, v21);
        specialized _NativeDictionary._delete(at:)(v14, v17);
        v18[1] = v17;
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Text.LineStyle?(v10, v13);
        v3 = v18;
        v4 = a2;
      }
      else
      {
        swift_release();
        outlined consume of Text.LineStyle?(v10, v13);
      }
      ++v7;
      v8 += 56;
      if (v4 == v7)
        goto LABEL_2;
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_2:
  if (__OFSUB__(v4, a1))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v45 = a1 - v4;
  if (__OFSUB__(0, v4 - a1))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v5 = *(_QWORD *)(*v3 + 16);
  v46 = v5;
  if (v5 < v4)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v5 == v4)
    return specialized Array.replaceSubrange<A>(_:with:)(a1, a2);
  v22 = a2;
  if (v5 > a2)
  {
    v23 = 56 * a2;
    v44 = v3;
    while (1)
    {
      if ((v22 & 0x8000000000000000) != 0)
        goto LABEL_38;
      if (v22 >= *(_QWORD *)(*v3 + 16))
        goto LABEL_39;
      if (__OFADD__(v22, v45))
        goto LABEL_40;
      v47 = v22 + v45;
      v24 = *v3 + v23;
      v26 = *(_QWORD *)(v24 + 40);
      v25 = *(_QWORD *)(v24 + 48);
      v48 = *(_OWORD *)(v24 + 56);
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v25, v48);
      v27 = swift_isUniquelyReferenced_nonNull_native();
      v28 = (_QWORD *)v3[1];
      v3[1] = 0x8000000000000000;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25, v48, *((uint64_t *)&v48 + 1));
      v31 = v28[2];
      v32 = (v29 & 1) == 0;
      v33 = v31 + v32;
      if (__OFADD__(v31, v32))
        goto LABEL_41;
      v34 = v29;
      if (v28[3] >= v33)
      {
        if ((v27 & 1) != 0)
        {
          v37 = v28;
          if ((v29 & 1) != 0)
            goto LABEL_20;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v37 = v28;
          if ((v34 & 1) != 0)
            goto LABEL_20;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, v27);
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25, v48, *((uint64_t *)&v48 + 1));
        if ((v34 & 1) != (v36 & 1))
          goto LABEL_49;
        v30 = v35;
        v37 = v28;
        if ((v34 & 1) != 0)
        {
LABEL_20:
          *(_QWORD *)(v37[7] + 8 * v30) = v47;
          goto LABEL_21;
        }
      }
      v37[(v30 >> 6) + 8] |= 1 << v30;
      v38 = v37[6] + 32 * v30;
      *(_QWORD *)v38 = v26;
      *(_QWORD *)(v38 + 8) = v25;
      *(_OWORD *)(v38 + 16) = v48;
      *(_QWORD *)(v37[7] + 8 * v30) = v47;
      v39 = v37[2];
      v40 = __OFADD__(v39, 1);
      v41 = v39 + 1;
      if (v40)
        goto LABEL_42;
      v37[2] = v41;
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v25, v48);
LABEL_21:
      ++v22;
      v3 = v44;
      v44[1] = v37;
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Text.LineStyle?(v25, v48);
      v23 += 56;
      if (v46 == v22)
        return specialized Array.replaceSubrange<A>(_:with:)(a1, a2);
    }
  }
LABEL_48:
  __break(1u);
LABEL_49:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v17;
  int v18;
  uint64_t v20;
  _DWORD v21[2];
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  v6 = a4;
  v8 = 0;
  v18 = a3;
  v17 = HIDWORD(a3);
  v9 = (_QWORD *)(a1 + 40);
  v24 = a4;
  v20 = v5;
  do
  {
    v12 = v9[1];
    v13 = v9[2];
    if (*v9)
      v14 = a2 == 0;
    else
      v14 = 1;
    if (v14)
    {
      if (v13 == 1 || v6 == 1)
      {
        if (v9[3] == a5)
          return v8;
      }
      else
      {
        v23[0] = v9[1];
        v23[1] = v13;
        v21[0] = v18;
        v21[1] = v17;
        v22 = v6;
        if ((MEMORY[0x18D756E68](v23, v21) & 1) != 0)
          return v8;
      }
    }
    else
    {
      v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 176);
      swift_retain();
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v12, v13);
      swift_retain();
      swift_retain();
      v11 = swift_retain();
      LOBYTE(v10) = v10(v11);
      v5 = v20;
      swift_release();
      swift_release();
      swift_release_n();
      outlined consume of Text.LineStyle?(v12, v13);
      v6 = v24;
      swift_release();
      if ((v10 & 1) != 0)
        return v8;
    }
    ++v8;
    v9 += 7;
  }
  while (v5 != v8);
  return 0;
}

uint64_t outlined retain of NavigationState.UpdateResult(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 248);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    v4);
  return a1;
}

uint64_t partial apply for closure #2 in NavigationColumnState.update(for:shouldAnimate:splitViewState:)()
{
  uint64_t *v0;

  return closure #2 in NavigationColumnState.update(for:shouldAnimate:splitViewState:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_187553608()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18755362C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationColumnState.ColumnContent.dismissReplacedRootView()()
{
  uint64_t v0;

  return closure #1 in NavigationColumnState.ColumnContent.dismissReplacedRootView()(v0 + 16);
}

uint64_t partial apply for closure #3 in NavigationColumnState.pop(_:request:splitViewState:)()
{
  uint64_t *v0;

  return closure #3 in NavigationColumnState.pop(_:request:splitViewState:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_18755366C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NavigationColumnState.pop(_:request:splitViewState:)()
{
  uint64_t *v0;

  return closure #1 in closure #1 in NavigationColumnState.pop(_:request:splitViewState:)(v0[2], v0[3], v0[4]);
}

uint64_t outlined init with take of NavigationUpdateEvent.Action(uint64_t a1, uint64_t a2)
{
  __swift_memcpy57_8(a2, a1);
  return a2;
}

uint64_t outlined init with copy of NavigationUpdateEvent(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NavigationUpdateEvent(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in NavigationSplitViewState.handleEvent(_:)()
{
  uint64_t v0;

  return closure #1 in NavigationSplitViewState.handleEvent(_:)(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + 32);
}

uint64_t outlined destroy of NavigationUpdateEvent(uint64_t a1)
{
  destroy for NavigationUpdateEvent(a1);
  return a1;
}

uint64_t partial apply for closure #1 in NavigationColumnState.popAllForSelectionChange(popReplacedRoots:)()
{
  uint64_t *v0;

  return closure #1 in NavigationColumnState.popAllForSelectionChange(popReplacedRoots:)(v0[2], v0[3], v0[4]);
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationAuthority.RequestError, &type metadata for NavigationAuthority.RequestError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError);
  }
  return result;
}

uint64_t sub_1875537B8()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 32))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationColumnState.presentValue(_:request:splitViewState:)()
{
  uint64_t *v0;

  return closure #1 in NavigationColumnState.presentValue(_:request:splitViewState:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t objectdestroy_17Tm()
{
  uint64_t v0;

  swift_release();
  if (*(unsigned __int8 *)(v0 + 88) - 1 <= 2)
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t objectdestroy_24Tm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationColumnState.ejectAll()()
{
  uint64_t *v0;

  return closure #1 in NavigationColumnState.ejectAll()(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_8Tm_0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 40) != 1)
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1875538DC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationColumnState.programmaticallyPresentView(_:fromDepth:identifier:dismiss:request:)()
{
  uint64_t *v0;

  return closure #1 in NavigationColumnState.programmaticallyPresentView(_:fromDepth:identifier:dismiss:request:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t outlined consume of NavigationViewDestinationView?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t destroy for NavigationColumnState.ColumnContent(uint64_t *a1)
{
  return outlined consume of NavigationColumnState.ColumnContent(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

uint64_t *initializeWithCopy for NavigationColumnState.ColumnContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  outlined copy of NavigationColumnState.ColumnContent(*a2, v4, v5, v6, v7, v8, v9, v10);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  return a1;
}

uint64_t *assignWithCopy for NavigationColumnState.ColumnContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v21 = a2[9];
  outlined copy of NavigationColumnState.ColumnContent(*a2, v4, v5, v6, v7, v8, v9, v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  v19 = a1[7];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v21;
  outlined consume of NavigationColumnState.ColumnContent(v12, v13, v14, v15, v16, v17, v18, v19);
  return a1;
}

uint64_t assignWithTake for NavigationColumnState.ColumnContent(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v11;
  v12 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)(a1 + 64) = a2[4];
  outlined consume of NavigationColumnState.ColumnContent(v3, v5, v4, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationColumnState.ColumnContent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)(a1 + 56) >> 57) >> 6) | (2
                                                           * ((*(_QWORD *)(a1 + 56) >> 57) & 0x38 | *(_QWORD *)(a1 + 56) & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NavigationColumnState.ColumnContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationColumnState.ColumnContent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) >> 63;
}

uint64_t destructiveProjectEnumData for NavigationColumnState.ColumnContent(uint64_t result)
{
  *(_QWORD *)(result + 56) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for NavigationColumnState.ColumnContent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = *(_QWORD *)(result + 56) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for NavigationColumnState.ColumnContent()
{
  return &type metadata for NavigationColumnState.ColumnContent;
}

uint64_t destroy for NavigationViewDestinationView(uint64_t a1)
{
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 24) != 1)
    swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NavigationViewDestinationView(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 2;
  v6 = a2[3];
  swift_retain();
  swift_retain();
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain();
  }
  v7 = a2[5];
  v8 = a2[6];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationViewDestinationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) != 1)
  {
    if (v4 != 1)
    {
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of _ViewList_ID.Canonical(a1 + 16);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NavigationViewDestinationView(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = (_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 24) != 1)
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (v5 != 1)
    {
      *(_QWORD *)(a1 + 16) = *v4;
      *(_QWORD *)(a1 + 24) = v5;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of _ViewList_ID.Canonical(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
LABEL_6:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationViewDestinationView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationViewDestinationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationViewDestinationView()
{
  return &type metadata for NavigationViewDestinationView;
}

uint64_t destroy for NavigationColumnState(_QWORD *a1)
{
  if (a1[6])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[12])
  {
    swift_release();
    swift_release();
    swift_release();
  }
  outlined consume of NavigationColumnState.ColumnContent(a1[14], a1[15], a1[16], a1[17], a1[18], a1[19], a1[20], a1[21]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NavigationColumnState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    v5 = *(_QWORD *)(a2 + 56);
    v6 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = v5;
    v7 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = v7;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v8;
    *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  }
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  v9 = *(_QWORD *)(a2 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v9;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  }
  v10 = *(_QWORD *)(a2 + 112);
  v11 = *(_QWORD *)(a2 + 120);
  v12 = *(_QWORD *)(a2 + 128);
  v13 = *(_QWORD *)(a2 + 136);
  v14 = *(_QWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  v16 = *(_QWORD *)(a2 + 160);
  v17 = *(_QWORD *)(a2 + 168);
  v23 = *(_QWORD *)(a2 + 176);
  v24 = *(_QWORD *)(a2 + 184);
  outlined copy of NavigationColumnState.ColumnContent(v10, v11, v12, v13, v14, v15, v16, v17);
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 120) = v11;
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 136) = v13;
  *(_QWORD *)(a1 + 144) = v14;
  *(_QWORD *)(a1 + 152) = v15;
  *(_QWORD *)(a1 + 160) = v16;
  *(_QWORD *)(a1 + 168) = v17;
  *(_QWORD *)(a1 + 176) = v23;
  *(_QWORD *)(a1 + 184) = v24;
  v18 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v18;
  v19 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v19;
  v20 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v20;
  v21 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v21;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_WORD *)(a1 + 297) = *(_WORD *)(a2 + 297);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationColumnState(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = (_OWORD *)(a1 + 40);
  v5 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    }
    else
    {
      outlined destroy of NavigationListState(a1 + 40);
      v7 = *(_OWORD *)((char *)v5 + 28);
      v8 = v5[1];
      *v4 = *v5;
      v4[1] = v8;
      *(_OWORD *)((char *)v4 + 28) = v7;
    }
  }
  else if (v6)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *v5;
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
    *v4 = v9;
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  v11 = (_OWORD *)(a1 + 88);
  v12 = (_OWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Binding<AnyNavigationPath>(a1 + 88);
      v14 = *(_QWORD *)(a2 + 104);
      *v11 = *v12;
      *(_QWORD *)(a1 + 104) = v14;
    }
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v15 = *v12;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *v11 = v15;
  }
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a2 + 144);
  v21 = *(_QWORD *)(a2 + 152);
  v22 = *(_QWORD *)(a2 + 160);
  v23 = *(_QWORD *)(a2 + 168);
  v33 = *(_QWORD *)(a2 + 176);
  v34 = *(_QWORD *)(a2 + 184);
  outlined copy of NavigationColumnState.ColumnContent(v16, v17, v18, v19, v20, v21, v22, v23);
  v24 = *(_QWORD *)(a1 + 112);
  v25 = *(_QWORD *)(a1 + 120);
  v26 = *(_QWORD *)(a1 + 128);
  v27 = *(_QWORD *)(a1 + 136);
  v28 = *(_QWORD *)(a1 + 144);
  v29 = *(_QWORD *)(a1 + 152);
  v30 = *(_QWORD *)(a1 + 160);
  v31 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v17;
  *(_QWORD *)(a1 + 128) = v18;
  *(_QWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 144) = v20;
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 160) = v22;
  *(_QWORD *)(a1 + 168) = v23;
  *(_QWORD *)(a1 + 176) = v33;
  *(_QWORD *)(a1 + 184) = v34;
  outlined consume of NavigationColumnState.ColumnContent(v24, v25, v26, v27, v28, v29, v30, v31);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_WORD *)(a1 + 297) = *(_WORD *)(a2 + 297);
  return a1;
}

uint64_t outlined destroy of Binding<AnyNavigationPath>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *__swift_memcpy299_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x12BuLL);
}

uint64_t assignWithTake for NavigationColumnState(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = (_OWORD *)(a1 + 40);
  v5 = (_OWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 48))
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      goto LABEL_6;
    }
    outlined destroy of NavigationListState((uint64_t)v4);
  }
  v7 = v5[1];
  *v4 = *v5;
  v4[1] = v7;
  *(_OWORD *)((char *)v4 + 28) = *(_OWORD *)((char *)v5 + 28);
LABEL_6:
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  if (!*(_QWORD *)(a1 + 96))
  {
LABEL_10:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(a2 + 96);
  if (!v8)
  {
    outlined destroy of Binding<AnyNavigationPath>(a1 + 88);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 96) = v8;
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
LABEL_11:
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 136);
  v13 = *(_QWORD *)(a1 + 144);
  v14 = *(_QWORD *)(a1 + 152);
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v17;
  v18 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v18;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  outlined consume of NavigationColumnState.ColumnContent(v9, v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v19;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_release();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_release();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_release();
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_release();
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_WORD *)(a1 + 297) = *(_WORD *)(a2 + 297);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationColumnState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 299))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 192);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationColumnState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 298) = 0;
    *(_WORD *)(result + 296) = 0;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 299) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 192) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 299) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationColumnState()
{
  return &type metadata for NavigationColumnState;
}

uint64_t destroy for NavigationColumnState.ReplacedRoot(uint64_t *a1)
{
  return outlined consume of NavigationColumnState.ReplacedRoot(*a1, a1[1], a1[2], a1[3]);
}

uint64_t *initializeWithCopy for NavigationColumnState.ReplacedRoot(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  outlined copy of NavigationColumnState.ReplacedRoot(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return a1;
}

uint64_t *assignWithCopy for NavigationColumnState.ReplacedRoot(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  outlined copy of NavigationColumnState.ReplacedRoot(*a2, v4, v5, v6);
  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  v13 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  outlined consume of NavigationColumnState.ReplacedRoot(v10, v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for NavigationColumnState.ReplacedRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v3;
  outlined consume of NavigationColumnState.ReplacedRoot(v4, v6, v5, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationColumnState.ReplacedRoot(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NavigationColumnState.ReplacedRoot(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      *(_OWORD *)(result + 40) = 0u;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationColumnState.ReplacedRoot(_QWORD *a1)
{
  return *a1 >> 63;
}

_QWORD *destructiveProjectEnumData for NavigationColumnState.ReplacedRoot(_QWORD *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for NavigationColumnState.ReplacedRoot(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for NavigationColumnState.ReplacedRoot()
{
  return &type metadata for NavigationColumnState.ReplacedRoot;
}

uint64_t storeEnumTagSinglePayload for NavigationColumnState.TransientUpdateState(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187554C88 + 4 * byte_187C3F4E3[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_187554CBC + 4 * byte_187C3F4DE[v4]))();
}

uint64_t sub_187554CBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_187554CC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x187554CCCLL);
  return result;
}

uint64_t sub_187554CD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x187554CE0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187554CE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_187554CEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationColumnState.TransientUpdateState()
{
  return &type metadata for NavigationColumnState.TransientUpdateState;
}

uint64_t storeEnumTagSinglePayload for HysteresisState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187554D54 + 4 * byte_187C3F4ED[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187554D88 + 4 * byte_187C3F4E8[v4]))();
}

uint64_t sub_187554D88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187554D90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187554D98);
  return result;
}

uint64_t sub_187554DA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187554DACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187554DB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187554DB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for HysteresisState()
{
  return &unk_1E1ABB570;
}

unint64_t lazy protocol witness table accessor for type HysteresisState and conformance HysteresisState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HysteresisState and conformance HysteresisState;
  if (!lazy protocol witness table cache variable for type HysteresisState and conformance HysteresisState)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HysteresisState, &unk_1E1ABB570);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HysteresisState and conformance HysteresisState);
  }
  return result;
}

void type metadata accessor for (Int, Int, NavigationState.StackContent.ChangeKind)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Int, Int, NavigationState.StackContent.ChangeKind))
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (Int, Int, NavigationState.StackContent.ChangeKind));
  }
}

uint64_t specialized static NavigationColumnState.change(from:to:previousSplitViewState:splitViewState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD __dst[38];
  _QWORD __src[38];
  _BYTE v12[72];
  _BYTE v13[72];
  _BYTE v14[299];

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  outlined init with take of Image.Resolved?(v8, (uint64_t)v13, &lazy cache variable for type metadata for NavigationSplitViewState?, (uint64_t)&type metadata for NavigationSplitViewState);
  outlined init with take of Image.Resolved?(v3, (uint64_t)v12, &lazy cache variable for type metadata for NavigationSplitViewState?, (uint64_t)&type metadata for NavigationSplitViewState);
  if (*(_QWORD *)(v5 + 16))
  {
    if (*(_QWORD *)(v7 + 16))
    {
      memcpy(__dst, (const void *)(v7 + 32), 0x12BuLL);
      memcpy(__src, (const void *)(v5 + 32), 0x12BuLL);
      memcpy(v14, (const void *)(v7 + 32), sizeof(v14));
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x187556A34);
  }
  return 1;
}

uint64_t type metadata completion function for PlainListBody()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PlainListBody(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  if ((v10 | v7) <= 7
    && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v10 + v8 + 1) & ~v10) + *(_QWORD *)(v9 + 64) <= 0x18)
  {
    v14 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = ~v7;
    v23 = *(_QWORD *)(a3 + 16);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      v16 = ~v10;
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v14 + v7 + 8) & ~v7))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
LABEL_17:
        *((_BYTE *)__dst + v8) = *((_BYTE *)__src + v8);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)__dst + v8 + v10 + 1) & v16, ((unint64_t)__src + v8 + v10 + 1) & v16, v23);
        return __dst;
      }
    }
    else
    {
      v15 = *v14;
      if ((unint64_t)*v14 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      v16 = ~v10;
      if ((_DWORD)v15 != -1)
        goto LABEL_14;
    }
    *__dst = *__src;
    v17 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v17 = *v14;
    v21 = ((unint64_t)v17 + v7 + 8) & v22;
    v18 = ((unint64_t)v14 + v7 + 8) & v22;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v19(v21, v18, v5);
    goto LABEL_17;
  }
  v13 = *__src;
  *__dst = *__src;
  __dst = (_QWORD *)(v13 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)));
  swift_retain();
  return __dst;
}

uint64_t destroy for PlainListBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    if ((*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v9 + v6 + 8) & v7))
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + v8 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + ((v6 + 16) & v7) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
    goto LABEL_5;
  }
  v10 = *v9;
  if ((unint64_t)*v9 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  if ((_DWORD)v10 == -1)
  {
LABEL_5:
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v9 + v6 + 8) & v7, v4);
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + v8 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + ((v6 + 16) & v7) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for PlainListBody(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v20;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ~v8;
  v10 = (v8 + 16) & ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v10 + v11;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v12;
    v20 = ((unint64_t)v15 + v8 + 8) & v9;
    v16 = ((unint64_t)v12 + v8 + 8) & v9;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v17(v20, v16, v6);
    goto LABEL_8;
  }
  v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  *((_BYTE *)__dst + v14) = *((_BYTE *)__src + v14);
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 16))(((unint64_t)__dst + v14 + *(unsigned __int8 *)(v18 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)__src + v14 + *(unsigned __int8 *)(v18 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return __dst;
}

_QWORD *assignWithCopy for PlainListBody(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, unint64_t, uint64_t);
  unint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v27;

  v3 = a3;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v25 = v15(((unint64_t)v11 + v9 + 8) & ~v9, v8, v6);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = v15(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    v3 = a3;
    if (!v25)
    {
LABEL_5:
      if (!v14)
      {
        *a1 = *a2;
        swift_retain();
        swift_release();
        *v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v11 + v9 + 8) & v27, ((unint64_t)v12 + v9 + 8) & v27, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v9 + 8) & v27, v6);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *a1 = *a2;
    *v11 = *v12;
    v16 = ((unint64_t)v11 + v9 + 8) & v27;
    v17 = (unint64_t)v12 + v9 + 8;
    v18 = v10;
    v19 = v17 & v27;
    v20 = v3;
    v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v22 = v19;
    v10 = v18;
    v21(v16, v22, v6);
    v3 = v20;
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v10);
LABEL_12:
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  v23 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v23 + 24))(((unint64_t)a1 + v10 + *(unsigned __int8 *)(v23 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80), ((unint64_t)a2 + v10 + *(unsigned __int8 *)(v23 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  return a1;
}

_QWORD *initializeWithTake for PlainListBody(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ~v8;
  v10 = (v8 + 16) & ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v10 + v11;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v15 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  *((_BYTE *)__dst + v14) = *((_BYTE *)__src + v14);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 32))(((unint64_t)__dst + v14 + *(unsigned __int8 *)(v16 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)__src + v14 + *(unsigned __int8 *)(v16 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return __dst;
}

_QWORD *assignWithTake for PlainListBody(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  uint64_t v16;
  int v18;
  uint64_t v20;

  v3 = a3;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v18 = v15(((unint64_t)v11 + v9 + 8) & ~v9, v8, v6);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = v15(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    v3 = a3;
    if (!v18)
    {
LABEL_5:
      if (!v14)
      {
        *a1 = *a2;
        swift_release();
        *v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)v11 + v9 + 8) & v20, ((unint64_t)v12 + v9 + 8) & v20, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v9 + 8) & v20, v6);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *a1 = *a2;
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v11 + v9 + 8) & v20, ((unint64_t)v12 + v9 + 8) & v20, v6);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v10);
LABEL_12:
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  v16 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 40))(((unint64_t)a1 + v10 + *(unsigned __int8 *)(v16 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)a2 + v10 + *(unsigned __int8 *)(v16 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PlainListBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = v7 - 1;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v8 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v8;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = ((v12 + 16) & ~v12) + *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_27;
  v16 = ((v14 + v13 + 1) & ~v14) + *(_QWORD *)(v9 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v20 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_27:
      if (v8 < v10)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))((a1 + v14 + v13 + 1) & ~v14, *(unsigned int *)(v9 + 84), v4);
      v23 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        v25 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v23 + v12 + 8) & ~v12);
      }
      else
      {
        v24 = *v23;
        if (v24 >= 0xFFFFFFFF)
          LODWORD(v24) = -1;
        v25 = v24 + 1;
      }
      if (v25 >= 2)
        return v25 - 1;
      else
        return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_27;
LABEL_18:
  v21 = (v18 - 1) << v17;
  if (v16 > 3)
    v21 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v22 = ((v14 + v13 + 1) & ~(_DWORD)v14) + *(_DWORD *)(v9 + 64);
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v11 + v21 + 1;
}

void storeEnumTagSinglePayload for PlainListBody(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if ((v6 - 1) <= *(_DWORD *)(v7 + 84))
    v8 = *(_DWORD *)(v7 + 84);
  else
    v8 = v6 - 1;
  v9 = ((*(unsigned __int8 *)(v7 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + *(_QWORD *)(v5 + 64)
       + 1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
     + *(_QWORD *)(v7 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

void type metadata accessor for PlainListBody()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t associated type witness table accessor for View.Body : View in PlainListBody<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void PlainListBody.init(selection:isOutline:content:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for PlainListBody();
}

uint64_t sub_187557C24(uint64_t a1)
{
  uint64_t (*v1)(void);
  char v2;
  uint64_t v3;

  *(_BYTE *)(v3 + *(int *)(a1 + 52)) = v2;
  return v1();
}

void PlainListBody.body.getter()
{
  type metadata accessor for PlainListBody.CollectionViewBody();
}

void sub_187557CA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 352) = a1;
  *(_QWORD *)(v5 - 120) = v1;
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v4;
  *(_QWORD *)(v5 - 96) = v2;
  type metadata accessor for PlainListBody.TableViewRoot();
}

void sub_187557CC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)(v2 - 344) = a1;
  v3 = type metadata accessor for _VariadicView.Tree();
  v4 = lazy protocol witness table accessor for type CollectionViewPlainListsEnabled and conformance CollectionViewPlainListsEnabled();
  *(_QWORD *)(v2 - 328) = v4;
  *(_QWORD *)(v2 - 120) = &unk_1E1AFEEF8;
  *(_QWORD *)(v2 - 112) = v1;
  *(_QWORD *)(v2 - 104) = v3;
  *(_QWORD *)(v2 - 96) = v4;
  type metadata accessor for StaticIf();
}

void sub_187557D14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;

  *(_QWORD *)(v6 - 312) = type metadata accessor for StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier>();
  v8 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v6 - 304) = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)(v6 - 336) = *(_QWORD *)(a1 - 8);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v6 - 208) = v1;
  *(_QWORD *)(v6 - 200) = v4;
  *(_QWORD *)(v6 - 192) = v5;
  *(_QWORD *)(v6 - 184) = v3;
  v15 = *(_QWORD *)(v6 - 320);
  *(_QWORD *)(v6 - 176) = v15;
  *(_QWORD *)(v6 - 272) = v1;
  *(_QWORD *)(v6 - 264) = v4;
  *(_QWORD *)(v6 - 256) = v5;
  *(_QWORD *)(v6 - 248) = v3;
  *(_QWORD *)(v6 - 240) = v15;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>.CollectionViewBody, *(_QWORD *)(v6 - 352), v14);
  *(_QWORD *)(v6 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>.TableViewRoot, *(_QWORD *)(v6 - 344));
  *(_QWORD *)(v6 - 128) = v5;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v2, v6 - 136);
  StaticIf<>.init(_:then:else:)((uint64_t)&unk_1E1AFEEF8, (void (*)(void))partial apply for closure #1 in PlainListBody.body.getter);
}

uint64_t sub_187557E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  *(_BYTE *)(v7 - 120) = 2;
  *(_QWORD *)(v7 - 152) = v0;
  *(_QWORD *)(v7 - 144) = v6;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v5, v7 - 152);
  MEMORY[0x18D75B4AC](v7 - 120, v5, *(_QWORD *)(v7 - 312), v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 336) + 8))(v1, v5);
  v9 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v7 - 168) = v8;
  *(_QWORD *)(v7 - 160) = v9;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v4, v2, v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 304) + 8);
  v11(v4, v2);
  static ViewBuilder.buildBlock<A>(_:)(v3, v2, *(_QWORD *)(v7 - 296));
  return v11(v3, v2);
}

void closure #1 in PlainListBody.body.getter()
{
  type metadata accessor for PlainListBody.CollectionViewBody();
}

void sub_187557FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  *(_QWORD *)(v6 - 112) = v5;
  *(_QWORD *)(v6 - 104) = v4;
  *(_QWORD *)(v6 - 96) = v3;
  *(_QWORD *)(v6 - 88) = v2;
  type metadata accessor for PlainListBody();
}

void sub_187558014(uint64_t a1)
{
  uint64_t v1;

  PlainListBody.collectionViewBody.getter(a1, v1);
}

uint64_t sub_187558020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>.CollectionViewBody, v1);
  static ViewBuilder.buildExpression<A>(_:)(v2, v1, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, v0);
  return v6(v3, v1);
}

void PlainListBody.collectionViewBody.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v3 = v2;
  type metadata accessor for Binding();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v17 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v3 + *(int *)(a1 + 56), v11, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v3, v6);
  PlainListBody.CollectionViewBody.init(content:selection:)(a2);
}

void closure #2 in PlainListBody.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Binding();
  v1 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v1, v0);
  type metadata accessor for PlainListBody.TableViewRoot();
}

void sub_187558230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;

  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&a9 - v12;
  v14 = type metadata accessor for _VariadicView.Tree();
  *(_QWORD *)(v11 - 216) = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  (*(void (**)(uint64_t, _QWORD, _QWORD, double))(v9 + 16))(v10, *(_QWORD *)(v11 - 208), *(_QWORD *)(v11 - 224), v18);
  PlainListBody.TableViewRoot.init(selection:)((uint64_t)v13);
}

uint64_t sub_1875582FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  *(_QWORD *)(v9 - 176) = v2;
  *(_QWORD *)(v9 - 168) = v4;
  *(_QWORD *)(v9 - 160) = v3;
  *(_QWORD *)(v9 - 152) = v0;
  *(_QWORD *)(v9 - 144) = v1;
  _VariadicView.Tree.init(_:content:)();
  *(_QWORD *)(v9 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>.TableViewRoot, v6);
  *(_QWORD *)(v9 - 128) = v3;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v5, v9 - 136);
  static ViewBuilder.buildExpression<A>(_:)(v8, v5, v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 216) + 8);
  v11(v8, v5);
  static ViewBuilder.buildBlock<A>(_:)(v7, v5, *(_QWORD *)(v9 - 200));
  return v11(v7, v5);
}

void PlainListBody.TableViewRoot.init(selection:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = swift_getKeyPath();
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = swift_getKeyPath();
  *(_WORD *)(a1 + 24) = 0;
  type metadata accessor for PlainListBody.TableViewRoot();
}

uint64_t sub_187558430(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 56);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v1, v4);
}

void closure #1 in closure #2 in PlainListBody.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for PlainListBody();
}

uint64_t sub_1875584E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 56), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

void PlainListBody.CollectionViewBody.init(content:selection:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = swift_getKeyPath();
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = swift_getKeyPath();
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = swift_getKeyPath();
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 82) = 0u;
  type metadata accessor for PlainListBody.CollectionViewBody();
}

uint64_t sub_1875585D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v4 + *(int *)(a1 + 60), v3, v2);
  v6 = v4 + *(int *)(a1 + 64);
  type metadata accessor for Binding();
  v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v1, v7);
}

void PlainListBody.CollectionViewBody.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[13];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[12];

  v18 = a2;
  v17 = a1[3];
  v3 = v17;
  type metadata accessor for Binding();
  v16 = type metadata accessor for Optional();
  v13[12] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v4);
  v13[10] = (char *)v13 - v5;
  v6 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v13[2] = *(_QWORD *)(v6 - 8);
  v13[3] = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v19 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = a1[2];
  v9 = type metadata accessor for ModifiedContent();
  v10 = a1[4];
  v11 = lazy protocol witness table accessor for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier();
  v20[0] = v10;
  v20[1] = v11;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v20);
  v14 = a1[5];
  v15 = v12;
  v20[2] = v9;
  v20[3] = v3;
  v20[4] = v12;
  v20[5] = v14;
  type metadata accessor for CollectionViewListRoot();
}

void sub_187558764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;

  *(_QWORD *)(v9 + 136) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v9 + 64) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 + 88) = (char *)&a9 - v15;
  *(_QWORD *)(v9 + 72) = type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier>();
  v16 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 + 152) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v9 + 56) = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v9 + 120) = (char *)&a9 - v21;
  v22 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v9 + 48) = v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&a9 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v9 + 32) = v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&a9 - v29;
  *(_QWORD *)(v9 + 40) = (char *)&a9 - v29;
  View.scrollContentBackground(_:)(0, *(_QWORD *)(v9 + 8), v10);
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v26, v30, v12);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v9 + 16) + 104))(*(_QWORD *)(v9 + 168), *MEMORY[0x1E0DC2890], *(_QWORD *)(v9 + 24));
  v31 = *(_QWORD *)v13;
  v32 = *(unsigned __int8 *)(v13 + 8);
  LODWORD(v26) = *(unsigned __int8 *)(v13 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v13, v32, *(_BYTE *)(v13 + 9));
  *(_QWORD *)(v9 + 24) = specialized Environment.wrappedValue.getter(v31, v32 | ((_DWORD)v26 << 8));
  *(_DWORD *)(v9 + 16) = v33 & 1;
  outlined consume of Environment<CGFloat?>.Content(v31, v32, (char)v26);
  v34 = *(_QWORD *)(v13 + 16);
  v35 = *(unsigned __int8 *)(v13 + 24);
  LODWORD(v26) = *(unsigned __int8 *)(v13 + 25);
  outlined copy of Environment<CGFloat?>.Content(v34, v35, *(_BYTE *)(v13 + 25));
  specialized Environment.wrappedValue.getter(v34, v35 | ((_DWORD)v26 << 8));
  outlined consume of Environment<CGFloat?>.Content(v34, v35, (char)v26);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v9 + 96) + 16))(*(_QWORD *)(v9 + 80), v13 + *(int *)(v11 + 64), *(_QWORD *)(v9 + 128));
  v36 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(v14 - 144) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(v14 - 128) = v36;
  *(_WORD *)(v14 - 112) = *(_WORD *)(v13 + 96);
  v37 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v14 - 176) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v14 - 160) = v37;
  outlined retain of Environment<ListPadding>(v14 - 176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined copy of Environment<ListPadding>.Content);
  specialized Environment.wrappedValue.getter(v9 + 264);
  outlined retain of Environment<ListPadding>(v14 - 176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined consume of Environment<ListPadding>.Content);
  v38 = *(_QWORD *)(v9 + 272);
  v39 = *(_BYTE *)(v9 + 280);
  v40 = *(_QWORD *)(v9 + 288);
  v41 = *(_BYTE *)(v9 + 296);
  v42 = *(_QWORD *)(v9 + 304);
  v43 = *(_BYTE *)(v9 + 312);
  v44 = *(_QWORD *)(v9 + 320);
  v45 = *(_BYTE *)(v9 + 328);
  *(_BYTE *)(v9 + 192) = *(_BYTE *)(v9 + 264);
  *(_QWORD *)(v9 + 200) = v38;
  *(_BYTE *)(v9 + 208) = v39;
  *(_QWORD *)(v9 + 216) = v40;
  *(_BYTE *)(v9 + 224) = v41;
  *(_QWORD *)(v9 + 232) = v42;
  *(_BYTE *)(v9 + 240) = v43;
  *(_QWORD *)(v9 + 248) = v44;
  *(_BYTE *)(v9 + 256) = v45;
  CollectionViewListRoot.init(content:style:minRowHeight:minHeaderHeight:selection:listPadding:)(*(_QWORD *)(v9 + 32), v12, *(_QWORD *)(v9 + 88));
}

uint64_t sub_187558A30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v6 = v1[7];
  v5 = v1[8];
  MEMORY[0x18D75B4AC](a1, v5, v1[9], &protocol witness table for CollectionViewListRoot<A, B>);
  (*(void (**)(uint64_t, uint64_t))(v1[17] + 8))(v3, v5);
  (*(void (**)(_QWORD, uint64_t))(v1[6] + 8))(v1[5], v2);
  v7 = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v1[22] = &protocol witness table for CollectionViewListRoot<A, B>;
  v1[23] = v7;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v1 + 22);
  v9 = v1[15];
  static ViewBuilder.buildExpression<A>(_:)(v6, v4, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v1[19] + 8);
  v10(v6, v4);
  static ViewBuilder.buildBlock<A>(_:)(v9, v4, v1[20]);
  return v10(v9, v4);
}

uint64_t static PlainListBody.TableViewRoot._viewListOptions.getter()
{
  return 44;
}

void PlainListBody.TableViewRoot.body(children:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a2;
  v2 = *(_QWORD *)(a1 + 24);
  v18 = a1;
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v4 - 8);
  v21 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v19 = (char *)&v11 - v6;
  v7 = *(_QWORD *)(a1 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = AssociatedTypeWitness;
  v16 = v2;
  v17 = v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for TableViewListDataSource(255, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v15 = v10;
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListDataSource<A>, v10);
  v23 = v10;
  v24 = v2;
  v25 = v14;
  v26 = v7;
  type metadata accessor for TableViewListCore();
}

void sub_187558C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  double v27;
  double v28;
  uint64_t v29;

  *(_QWORD *)(v9 + 64) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  outlined init with copy of _VariadicView_Children(v11, v9 + 240);
  v17 = *(_QWORD *)v10;
  v18 = *(unsigned __int8 *)(v10 + 8);
  v19 = *(unsigned __int8 *)(v10 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v10, v18, *(_BYTE *)(v10 + 9));
  *(_QWORD *)(v9 + 8) = specialized Environment.wrappedValue.getter(v17, v18 | (v19 << 8));
  *(_DWORD *)(v9 + 4) = v20 & 1;
  outlined consume of Environment<CGFloat?>.Content(v17, v18, v19);
  v21 = *(_QWORD *)(v10 + 16);
  v22 = *(unsigned __int8 *)(v10 + 24);
  v23 = *(unsigned __int8 *)(v10 + 25);
  outlined copy of Environment<CGFloat?>.Content(v21, v22, *(_BYTE *)(v10 + 25));
  v24 = specialized Environment.wrappedValue.getter(v21, v22 | (v23 << 8));
  v26 = v25;
  outlined consume of Environment<CGFloat?>.Content(v21, v22, v23);
  v27 = *(double *)&v24;
  if ((v26 & 1) != 0)
    v27 = 26.0;
  v28 = TableViewListDataSource.init(_:style:minRowHeight:minHeaderHeight:)(v9 + 240, 0, *(_QWORD *)(v9 + 8), *(_DWORD *)(v9 + 4), v12 - 216, v27);
  (*(void (**)(_QWORD, uint64_t, _QWORD, double))(*(_QWORD *)(v9 + 88) + 16))(*(_QWORD *)(v9 + 80), v10 + *(int *)(*(_QWORD *)(v9 + 72) + 56), *(_QWORD *)(v9 + 96), v28);
  v29 = *(_QWORD *)(v9 + 40);
  TableViewListCore.Configuration.init()((_OWORD *)(v9 + 112));
  TableViewListCore.init(dataSource:selection:configuration:)(v12 - 216, v29, (uint64_t)v14);
}

uint64_t sub_187558DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  static ViewBuilder.buildExpression<A>(_:)(v1, v3, &protocol witness table for TableViewListCore<A, B>);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 64) + 8);
  v4(v1, v3);
  static ViewBuilder.buildBlock<A>(_:)(v2, v3, *(_QWORD *)(v0 + 104));
  return v4(v2, v3);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance PlainListBody<A, B>.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>.TableViewRoot, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance PlainListBody<A, B>.TableViewRoot()
{
  return static PlainListBody.TableViewRoot._viewListOptions.getter();
}

void type metadata accessor for PlainListBody.CollectionViewBody()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for PlainListBody.TableViewRoot()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type CollectionViewPlainListsEnabled and conformance CollectionViewPlainListsEnabled()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollectionViewPlainListsEnabled and conformance CollectionViewPlainListsEnabled;
  if (!lazy protocol witness table cache variable for type CollectionViewPlainListsEnabled and conformance CollectionViewPlainListsEnabled)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewPlainListsEnabled, &unk_1E1AFEEF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionViewPlainListsEnabled and conformance CollectionViewPlainListsEnabled);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier>)
    type metadata accessor for StaticIf();
  return result;
}

uint64_t partial apply for closure #1 in PlainListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in PlainListBody.body.getter);
}

uint64_t partial apply for closure #2 in PlainListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in PlainListBody.body.getter);
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in PlainListBody.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #2 in PlainListBody.body.getter);
}

uint64_t type metadata completion function for PlainListBody.TableViewRoot()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  int v32;
  uint64_t v33;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ~(v6 | 7);
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  if (v6 <= 7 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0 && (((v6 | 7) + 26) & ~(v6 | 7)) + v8 <= 0x18)
  {
    v32 = *(_DWORD *)(v5 + 84);
    v33 = *(_QWORD *)(a3 + 24);
    v12 = *(_QWORD *)a2;
    v13 = *(_BYTE *)(a2 + 9);
    v14 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v14, v13);
    *(_QWORD *)a1 = v12;
    *(_BYTE *)(a1 + 8) = v14;
    *(_BYTE *)(a1 + 9) = v13;
    v15 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    v16 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_QWORD *)v16;
    v18 = *(_BYTE *)(v16 + 9);
    v19 = *(_BYTE *)(v16 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v16, v19, v18);
    *(_QWORD *)v15 = v17;
    *(_BYTE *)(v15 + 8) = v19;
    *(_BYTE *)(v15 + 9) = v18;
    v20 = (_QWORD *)((v15 + 17) & v7);
    v21 = (_QWORD *)((v16 + 17) & v7);
    v22 = (uint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v32 < 0)
    {
      v25 = v33;
      v26 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v22 + v6 + 8) & ~v6);
      v24 = ~v6;
      if (v26)
      {
LABEL_14:
        memcpy(v20, v21, v8);
        return a1;
      }
    }
    else
    {
      v23 = *v22;
      if ((unint64_t)*v22 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      v24 = ~v6;
      v25 = v33;
      if ((_DWORD)v23 != -1)
        goto LABEL_14;
    }
    *v20 = *v21;
    v27 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v27 = *v22;
    v28 = ((unint64_t)v27 + v6 + 8) & v24;
    v29 = ((unint64_t)v22 + v6 + 8) & v24;
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v30(v28, v29, v25);
    return a1;
  }
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  a1 = v11 + ((v6 + 16) & v7);
  swift_retain();
  return a1;
}

uint64_t destroy for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;

  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
  v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)v4, *(unsigned __int8 *)(v4 + 8), *(_BYTE *)(v4 + 9));
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + (v7 | 7) + 10) & ~(v7 | 7);
  v9 = ~v7;
  v10 = (uint64_t *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v9);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v10 + v7 + 8) & v9, v5);
  }
  v11 = *v10;
  if ((unint64_t)*v10 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  result = (v11 + 1);
  if ((_DWORD)v11 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(uint64_t, unint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 9);
  v8 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v8, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 9) = v7;
  v9 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v10 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  LOBYTE(v6) = *(_BYTE *)(v10 + 9);
  v12 = *(_BYTE *)(v10 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v10, v12, v6);
  *(_QWORD *)v9 = v11;
  *(_BYTE *)(v9 + 8) = v12;
  *(_BYTE *)(v9 + 9) = v6;
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 | 7) + 10;
  v17 = (_QWORD *)((v16 + v9) & ~(v15 | 7));
  v18 = (_QWORD *)((v16 + v10) & ~(v15 | 7));
  v19 = ~v15;
  v20 = *(_QWORD *)(v14 + 64);
  v21 = (uint64_t *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v14 + 84) & 0x80000000) == 0)
  {
    v22 = *v21;
    if ((unint64_t)*v21 >= 0xFFFFFFFF)
      LODWORD(v22) = -1;
    if ((_DWORD)v22 != -1)
      goto LABEL_5;
LABEL_7:
    *v17 = *v18;
    v23 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v21;
    v24 = ((unint64_t)v23 + v15 + 8) & v19;
    v25 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
    swift_retain();
    swift_retain();
    v25(v24, ((unint64_t)v21 + v15 + 8) & v19, v13);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v14 + 48))(((unint64_t)v21 + v15 + 8) & v19))
    goto LABEL_7;
LABEL_5:
  memcpy(v17, v18, ((v15 + 16) & ~v15) + v20);
  return a1;
}

uint64_t assignWithCopy for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t (*v31)(unint64_t, uint64_t, uint64_t);
  int v32;
  uint64_t (*v33)(unint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t __n;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 9);
  v8 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v8, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = v6;
  v11 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v9, v11, v10);
  v12 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  LOBYTE(v6) = *(_BYTE *)(v13 + 9);
  v15 = *(_BYTE *)(v13 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v13, v15, v6);
  v16 = *(_QWORD *)v12;
  v17 = *(_BYTE *)(v12 + 9);
  *(_QWORD *)v12 = v14;
  v18 = *(unsigned __int8 *)(v12 + 8);
  *(_BYTE *)(v12 + 8) = v15;
  *(_BYTE *)(v12 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v16, v18, v17);
  v19 = *(_QWORD *)(a3 + 24);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = (v21 | 7) + 10;
  v23 = (_QWORD *)((v22 + v12) & ~(v21 | 7));
  v24 = (_QWORD *)((v22 + v13) & ~(v21 | 7));
  v25 = *(unsigned int *)(v20 + 84);
  v26 = ~v21;
  __n = ((v21 + 16) & ~v21) + *(_QWORD *)(v20 + 64);
  v27 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 0x80000000) != 0)
  {
    v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v20 + 48);
    v32 = v31(((unint64_t)v27 + v21 + 8) & ~v21, v25, v19);
    v33 = v31;
    v40 = v32;
    v28 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    v26 = ~v21;
    v30 = v33(((unint64_t)v28 + v21 + 8) & ~v21, v25, v19);
    if (!v40)
    {
LABEL_5:
      if (!v30)
      {
        *v23 = *v24;
        swift_retain();
        swift_release();
        *v27 = *v28;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v20 + 24))(((unint64_t)v27 + v21 + 8) & v26, ((unint64_t)v28 + v21 + 8) & v26, v19);
        return a1;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v20 + 8))(((unint64_t)v27 + v21 + 8) & v26, v19);
      goto LABEL_9;
    }
  }
  else
  {
    v28 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    v29 = *v28;
    if (*v28 >= 0xFFFFFFFFuLL)
      LODWORD(v29) = -1;
    v30 = v29 + 1;
    if (*v27 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v30)
  {
    *v23 = *v24;
    *v27 = *v28;
    v34 = v26;
    v35 = ((unint64_t)v27 + v21 + 8) & v26;
    v36 = ((unint64_t)v28 + v21 + 8) & v34;
    v37 = v19;
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    swift_retain();
    swift_retain();
    v38(v35, v36, v37);
    return a1;
  }
LABEL_9:
  memcpy(v23, v24, __n);
  return a1;
}

uint64_t initializeWithTake for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v5 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_WORD *)(v4 + 8) = *(_WORD *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 10;
  v11 = (char *)((v10 + v4) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + v5) & ~(v9 | 7));
  v13 = ~v9;
  v14 = *(_QWORD *)(v8 + 64);
  v15 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    v16 = *v15;
    if ((unint64_t)*v15 >= 0xFFFFFFFF)
      LODWORD(v16) = -1;
    if ((_DWORD)v16 != -1)
      goto LABEL_5;
LABEL_7:
    *(_QWORD *)v11 = *v12;
    v17 = (unint64_t)(v11 + 15);
    *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) = *v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v9 + 8 + (v17 & 0xFFFFFFFFFFFFFFF8)) & v13, ((unint64_t)v15 + v9 + 8) & v13, v7);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v15 + v9 + 8) & v13))
    goto LABEL_7;
LABEL_5:
  memcpy(v11, v12, ((v9 + 16) & ~v9) + v14);
  return a1;
}

uint64_t assignWithTake for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  size_t v32;
  void *v33;
  const void *v34;
  uint64_t (*v35)(unint64_t, uint64_t, uint64_t);
  int v36;
  uint64_t (*v37)(unint64_t, uint64_t, uint64_t);
  int v39;
  size_t __n;

  v6 = *(_BYTE *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 9);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  v14 = *(_BYTE *)(v12 + 9);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = *(_QWORD *)(a3 + 24);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 | 7) + 10;
  v22 = (_QWORD *)((v21 + v11) & ~(v20 | 7));
  v23 = (_QWORD *)((v21 + v12) & ~(v20 | 7));
  v24 = *(unsigned int *)(v19 + 84);
  v25 = ~v20;
  v26 = *(_QWORD *)(v19 + 64);
  v27 = ((v20 + 16) & ~v20) + v26;
  v28 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 0x80000000) != 0)
  {
    __n = ((v20 + 16) & ~v20) + v26;
    v35 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v19 + 48);
    v36 = v35(((unint64_t)v28 + v20 + 8) & ~v20, v24, v18);
    v37 = v35;
    v39 = v36;
    v29 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    v25 = ~v20;
    v31 = v37(((unint64_t)v29 + v20 + 8) & ~v20, v24, v18);
    v27 = __n;
    if (!v39)
    {
LABEL_5:
      if (!v31)
      {
        *v22 = *v23;
        swift_release();
        *v28 = *v29;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 40))(((unint64_t)v28 + v20 + 8) & v25, ((unint64_t)v29 + v20 + 8) & v25, v18);
        return a1;
      }
      v32 = v27;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v19 + 8))(((unint64_t)v28 + v20 + 8) & v25, v18);
      v33 = v22;
      v34 = v23;
      v27 = v32;
      goto LABEL_10;
    }
  }
  else
  {
    v29 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    v30 = *v29;
    if (*v29 >= 0xFFFFFFFFuLL)
      LODWORD(v30) = -1;
    v31 = v30 + 1;
    if (*v28 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v31)
  {
    *v22 = *v23;
    *v28 = *v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 32))(((unint64_t)v28 + v20 + 8) & v25, ((unint64_t)v29 + v20 + 8) & v25, v18);
    return a1;
  }
  v33 = v22;
  v34 = v23;
LABEL_10:
  memcpy(v33, v34, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlainListBody.TableViewRoot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  if (v6 - 1 >= a2)
    goto LABEL_24;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64) + ((v8 + 26) & ~v8);
  v10 = 8 * v9;
  if (v9 > 3)
    goto LABEL_7;
  v13 = (((1 << v10) + a2 - v6) >> v10) + 1;
  if (HIWORD(v13))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_15;
LABEL_24:
    v16 = (unint64_t *)((((((a1 + 17) & 0xFFFFFFFFFFFFFFF8) + v8 + 10) & ~v8) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v7 + 8) & ~v7);
    }
    else
    {
      v17 = *v16;
      if (v17 >= 0xFFFFFFFF)
        LODWORD(v17) = -1;
      v18 = v17 + 1;
    }
    if (v18 >= 2)
      return v18 - 1;
    else
      return 0;
  }
  if (v13 > 0xFF)
  {
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_15;
    goto LABEL_24;
  }
  if (v13 < 2)
    goto LABEL_24;
LABEL_7:
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_24;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 <= 3)
      v15 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v4 + 64) + ((v8 + 26) & ~(_DWORD)v8);
    else
      v15 = 4;
    __asm { BR              X12 }
  }
  return (v14 + v6);
}

void storeEnumTagSinglePayload for PlainListBody.TableViewRoot(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64);
  v10 = (((v8 | 7) + 26) & ~(v8 | 7)) + v9;
  if (v6 - 1 >= a3)
  {
    v11 = 0u;
  }
  else
  {
    v11 = 1u;
    if (v10 <= 3)
    {
      v12 = (((v11 << (8 * v10)) + a3 - v6) >> (8 * v10)) + 1;
      if (HIWORD(v12))
      {
        v11 = 4u;
        if (v7 >= a2)
          goto LABEL_21;
      }
      else
      {
        if (v12 >= 0x100)
          v11 = 2;
        else
          v11 = v12 > 1;
        if (v7 >= a2)
LABEL_21:
          __asm { BR              X17 }
      }
LABEL_14:
      v13 = a2 - v6;
      if (v10 < 4)
      {
        if ((_DWORD)v10)
        {
          v14 = v13 & ~(-1 << (8 * v10));
          bzero(a1, v10);
          if ((_DWORD)v10 == 3)
          {
            *a1 = v14;
            *((_BYTE *)a1 + 2) = BYTE2(v14);
          }
          else if ((_DWORD)v10 == 2)
          {
            *a1 = v14;
          }
          else
          {
            *(_BYTE *)a1 = v14;
          }
        }
      }
      else
      {
        bzero(a1, (((v8 | 7) + 26) & ~(v8 | 7)) + v9);
        *(_DWORD *)a1 = v13;
      }
      __asm { BR              X10 }
    }
  }
  if (v7 >= a2)
    goto LABEL_21;
  goto LABEL_14;
}

void sub_187559EE8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187559F54);
}

void sub_187559EF0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187559F54);
}

void sub_187559EF8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187559F54);
}

void sub_187559F28()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187559F54);
}

void sub_187559F38()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187559F54);
}

void sub_187559F40()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187559F54);
}

uint64_t type metadata completion function for PlainListBody.CollectionViewBody()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Binding();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t __n;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if ((v9 | v7) <= 7
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + (((v9 | 7) + *(_QWORD *)(v6 + 64) + ((v7 + 98) & ~v7)) & ~(v9 | 7)) <= 0x18)
  {
    __n = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64);
    v56 = *(_QWORD *)(a3 + 24);
    v52 = *(_QWORD *)(v6 + 64);
    v54 = ~(v9 | 7);
    v55 = *(_QWORD *)(v56 - 8);
    v53 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)a2;
    v15 = *(_BYTE *)(a2 + 9);
    v16 = *(_BYTE *)(a2 + 8);
    v49 = *(_QWORD *)(v5 - 8);
    v50 = *(_QWORD *)(a3 + 16);
    v51 = v9 | 7;
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v16, v15);
    *(_QWORD *)a1 = v14;
    *(_BYTE *)(a1 + 8) = v16;
    *(_BYTE *)(a1 + 9) = v15;
    v57 = a1;
    v17 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    v18 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)v18;
    LOBYTE(v14) = *(_BYTE *)(v18 + 9);
    v20 = *(_BYTE *)(v18 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v18, v20, v14);
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = v20;
    *(_BYTE *)(v17 + 9) = v14;
    v21 = (v17 + 17) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v18 + 17) & 0xFFFFFFFFFFFFFFF8;
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(v22 + 8);
    v25 = *(_QWORD *)(v22 + 16);
    v26 = *(_QWORD *)(v22 + 24);
    v28 = *(_QWORD *)(v22 + 32);
    v27 = *(_QWORD *)(v22 + 40);
    v45 = *(_QWORD *)(v22 + 56);
    v46 = *(_QWORD *)(v22 + 48);
    v47 = *(_BYTE *)(v22 + 64);
    v48 = *(_BYTE *)(v22 + 65);
    outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v22, v24, v25, v26, v28, v27, v46, v45, v47, v48);
    *(_QWORD *)v21 = v23;
    *(_QWORD *)(v21 + 8) = v24;
    *(_QWORD *)(v21 + 16) = v25;
    *(_QWORD *)(v21 + 24) = v26;
    *(_QWORD *)(v21 + 32) = v28;
    *(_QWORD *)(v21 + 40) = v27;
    *(_QWORD *)(v21 + 48) = v46;
    *(_QWORD *)(v21 + 56) = v45;
    *(_BYTE *)(v21 + 64) = v47;
    *(_BYTE *)(v21 + 65) = v48;
    v29 = (v21 + v7 + 66) & ~v7;
    v30 = (v22 + v7 + 66) & ~v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v29, v30, v50);
    v31 = (_QWORD *)((v29 + v52 + v51) & v54);
    v32 = (_QWORD *)((v30 + v52 + v51) & v54);
    v33 = (uint64_t *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v53 < 0)
    {
      v35 = v56;
      v38 = (*(uint64_t (**)(unint64_t))(v55 + 48))(((unint64_t)v33 + v9 + 8) & ~v9);
      v36 = v55;
      v37 = ~v9;
      if (v38)
      {
LABEL_14:
        memcpy(v31, v32, __n);
        return v57;
      }
    }
    else
    {
      v34 = *v33;
      if ((unint64_t)*v33 >= 0xFFFFFFFF)
        LODWORD(v34) = -1;
      v35 = v56;
      v36 = v55;
      v37 = ~v9;
      if ((_DWORD)v34 != -1)
        goto LABEL_14;
    }
    *v31 = *v32;
    v39 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v39 = *v33;
    v40 = ((unint64_t)v39 + v9 + 8) & v37;
    v41 = ((unint64_t)v33 + v9 + 8) & v37;
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
    swift_retain();
    swift_retain();
    v42(v40, v41, v35);
    return v57;
  }
  v12 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v13 = v12 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16));
  swift_retain();
  return v13;
}

uint64_t destroy for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;

  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
  v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)v4, *(unsigned __int8 *)(v4 + 8), *(_BYTE *)(v4 + 9));
  v5 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<ListPadding>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_BYTE *)(v5 + 64), *(_BYTE *)(v5 + 65));
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 66) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + (v11 | 7)) & ~(v11 | 7);
  v13 = ~v11;
  v14 = (uint64_t *)((v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v10 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v10 + 48))(((unint64_t)v14 + v11 + 8) & v13);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v10 + 8))(((unint64_t)v14 + v11 + 8) & v13, v9);
  }
  v15 = *v14;
  if ((unint64_t)*v14 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  result = (v15 + 1);
  if ((_DWORD)v15 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(uint64_t, unint64_t, uint64_t);
  char v41;
  char v42;
  uint64_t v44;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 9);
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v7, v6);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v6;
  v44 = a1;
  v8 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  LOBYTE(v5) = *(_BYTE *)(v9 + 9);
  v11 = *(_BYTE *)(v9 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v9, v11, v5);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 9) = v5;
  v12 = (v8 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(_QWORD *)(v13 + 24);
  v18 = *(_QWORD *)(v13 + 32);
  v19 = *(_QWORD *)(v13 + 40);
  v20 = *(_QWORD *)(v13 + 48);
  v21 = *(_QWORD *)(v13 + 56);
  v41 = *(_BYTE *)(v13 + 64);
  v42 = *(_BYTE *)(v13 + 65);
  outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v13, v15, v16, v17, v18, v19, v20, v21, v41, v42);
  *(_QWORD *)v12 = v14;
  *(_QWORD *)(v12 + 8) = v15;
  *(_QWORD *)(v12 + 16) = v16;
  *(_QWORD *)(v12 + 24) = v17;
  *(_QWORD *)(v12 + 32) = v18;
  *(_QWORD *)(v12 + 40) = v19;
  *(_QWORD *)(v12 + 48) = v20;
  *(_QWORD *)(v12 + 56) = v21;
  *(_BYTE *)(v12 + 64) = v41;
  *(_BYTE *)(v12 + 65) = v42;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (v23 + 66 + v12) & ~v23;
  v25 = (v23 + 66 + v13) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v24, v25);
  v26 = *(_QWORD *)(v22 + 64);
  v27 = *(_QWORD *)(a3 + 24);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = (v29 | 7) + v26;
  v31 = (_QWORD *)((v30 + v24) & ~(v29 | 7));
  v32 = (_QWORD *)((v30 + v25) & ~(v29 | 7));
  v33 = ~v29;
  v34 = *(_QWORD *)(v28 + 64);
  v35 = (uint64_t *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v28 + 84) & 0x80000000) == 0)
  {
    v36 = *v35;
    if ((unint64_t)*v35 >= 0xFFFFFFFF)
      LODWORD(v36) = -1;
    if ((_DWORD)v36 != -1)
      goto LABEL_5;
LABEL_7:
    *v31 = *v32;
    v37 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v37 = *v35;
    v38 = ((unint64_t)v37 + v29 + 8) & v33;
    v39 = *(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16);
    swift_retain();
    swift_retain();
    v39(v38, ((unint64_t)v35 + v29 + 8) & v33, v27);
    return v44;
  }
  if (!(*(unsigned int (**)(unint64_t))(v28 + 48))(((unint64_t)v35 + v29 + 8) & v33))
    goto LABEL_7;
LABEL_5:
  memcpy(v31, v32, ((v29 + 16) & ~v29) + v34);
  return v44;
}

uint64_t assignWithCopy for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t (*v56)(unint64_t, uint64_t, uint64_t);
  uint64_t v57;
  void (*v58)(unint64_t, unint64_t, uint64_t);
  uint64_t v60;
  char v61;
  int v62;
  char v63;
  size_t v64;
  _QWORD *v66;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 9);
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v7, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = v5;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v60 = a1;
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  LOBYTE(v5) = *(_BYTE *)(v12 + 9);
  v14 = *(_BYTE *)(v12 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v12, v14, v5);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = v13;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v14;
  *(_BYTE *)(v11 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)(v18 + 8);
  v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(v18 + 16);
  v23 = *(_QWORD *)(v18 + 24);
  v24 = *(_QWORD *)(v18 + 32);
  v25 = *(_QWORD *)(v18 + 40);
  v26 = *(_QWORD *)(v18 + 48);
  v27 = *(_QWORD *)(v18 + 56);
  v61 = *(_BYTE *)(v18 + 64);
  v63 = *(_BYTE *)(v18 + 65);
  outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v18, v20, v22, v23, v24, v25, v26, v27, v61, v63);
  v28 = *(_QWORD *)v21;
  v29 = *(_QWORD *)(v21 + 8);
  v30 = *(_QWORD *)(v21 + 16);
  v31 = *(_QWORD *)(v21 + 24);
  v32 = *(_QWORD *)(v21 + 32);
  v33 = *(_QWORD *)(v21 + 40);
  v34 = *(_QWORD *)(v21 + 48);
  v35 = *(_QWORD *)(v21 + 56);
  v36 = *(_BYTE *)(v21 + 64);
  v37 = *(_BYTE *)(v21 + 65);
  *(_QWORD *)v21 = v19;
  *(_QWORD *)(v21 + 8) = v20;
  *(_QWORD *)(v21 + 16) = v22;
  *(_QWORD *)(v21 + 24) = v23;
  *(_QWORD *)(v21 + 32) = v24;
  *(_QWORD *)(v21 + 40) = v25;
  *(_QWORD *)(v21 + 48) = v26;
  *(_QWORD *)(v21 + 56) = v27;
  *(_BYTE *)(v21 + 64) = v61;
  *(_BYTE *)(v21 + 65) = v63;
  outlined consume of Environment<ListPadding>.Content(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v39 = *(unsigned __int8 *)(v38 + 80);
  v40 = (v39 + 66 + v21) & ~v39;
  v41 = (v39 + 66 + v18) & ~v39;
  (*(void (**)(uint64_t, uint64_t))(v38 + 24))(v40, v41);
  v42 = *(_QWORD *)(a3 + 24);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned __int8 *)(v43 + 80);
  v45 = (v44 | 7) + *(_QWORD *)(v38 + 64);
  v46 = (_QWORD *)((v45 + v40) & ~(v44 | 7));
  v47 = (_QWORD *)((v45 + v41) & ~(v44 | 7));
  v48 = *(unsigned int *)(v43 + 84);
  v49 = ~v44;
  v50 = *(_QWORD *)(v43 + 64);
  v51 = ((v44 + 16) & ~v44) + v50;
  v52 = (_QWORD *)(((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v48 & 0x80000000) != 0)
  {
    v64 = ((v44 + 16) & ~v44) + v50;
    v66 = v47;
    v56 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v43 + 48);
    v62 = v56(((unint64_t)v52 + v44 + 8) & ~v44, v48, v42);
    v53 = (_QWORD *)(((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF8);
    v49 = ~v44;
    v51 = v64;
    v55 = v56(((unint64_t)v53 + v44 + 8) & ~v44, v48, v42);
    v47 = v66;
    if (!v62)
    {
LABEL_5:
      if (!v55)
      {
        *v46 = *v47;
        swift_retain();
        swift_release();
        *v52 = *v53;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v43 + 24))(((unint64_t)v52 + v44 + 8) & v49, ((unint64_t)v53 + v44 + 8) & v49, v42);
        return v60;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v43 + 8))(((unint64_t)v52 + v44 + 8) & v49, v42);
      goto LABEL_9;
    }
  }
  else
  {
    v53 = (_QWORD *)(((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8);
    v54 = *v53;
    if (*v53 >= 0xFFFFFFFFuLL)
      LODWORD(v54) = -1;
    v55 = v54 + 1;
    if (*v52 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v55)
  {
    *v46 = *v47;
    *v52 = *v53;
    v57 = v42;
    v58 = *(void (**)(unint64_t, unint64_t, uint64_t))(v43 + 16);
    swift_retain();
    swift_retain();
    v58(((unint64_t)v52 + v44 + 8) & v49, ((unint64_t)v53 + v44 + 8) & v49, v57);
    return v60;
  }
LABEL_9:
  memcpy(v46, v47, v51);
  return v60;
}

uint64_t initializeWithTake for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v5 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v6 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)v6;
  *(_WORD *)(v5 + 8) = *(_WORD *)(v6 + 8);
  *(_QWORD *)v5 = v7;
  v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v6 + 17) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_OWORD *)(v9 + 32);
  v10 = *(_OWORD *)(v9 + 48);
  v12 = *(_OWORD *)(v9 + 16);
  *(_WORD *)(v8 + 64) = *(_WORD *)(v9 + 64);
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = v10;
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 66 + v8) & ~v14;
  v16 = (v14 + 66 + v9) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v15, v16);
  v17 = *(_QWORD *)(v13 + 64);
  v18 = *(_QWORD *)(a3 + 24);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 | 7) + v17;
  v22 = (char *)((v21 + v15) & ~(v20 | 7));
  v23 = (_QWORD *)((v21 + v16) & ~(v20 | 7));
  v24 = ~v20;
  v25 = *(_QWORD *)(v19 + 64);
  v26 = (uint64_t *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v19 + 84) & 0x80000000) == 0)
  {
    v27 = *v26;
    if ((unint64_t)*v26 >= 0xFFFFFFFF)
      LODWORD(v27) = -1;
    if ((_DWORD)v27 != -1)
      goto LABEL_5;
LABEL_7:
    *(_QWORD *)v22 = *v23;
    v28 = (unint64_t)(v22 + 15);
    *(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8) = *v26;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 32))((v20 + 8 + (v28 & 0xFFFFFFFFFFFFFFF8)) & v24, ((unint64_t)v26 + v20 + 8) & v24, v18);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v19 + 48))(((unint64_t)v26 + v20 + 8) & v24))
    goto LABEL_7;
LABEL_5:
  memcpy(v22, v23, ((v20 + 16) & ~v20) + v25);
  return a1;
}

uint64_t assignWithTake for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  size_t v53;
  void *v54;
  const void *v55;
  uint64_t (*v56)(unint64_t, uint64_t, uint64_t);
  int v57;
  uint64_t (*v58)(unint64_t, uint64_t, uint64_t);
  int v60;
  size_t __n;

  v6 = *(_BYTE *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 9);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  v14 = *(_BYTE *)(v12 + 9);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_BYTE *)(v18 + 64);
  v20 = *(_BYTE *)(v18 + 65);
  v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_QWORD *)(v21 + 16);
  v25 = *(_QWORD *)(v21 + 24);
  v26 = *(_QWORD *)(v21 + 32);
  v27 = *(_QWORD *)(v21 + 40);
  v28 = *(_QWORD *)(v21 + 48);
  v29 = *(_QWORD *)(v21 + 56);
  v30 = *(_BYTE *)(v21 + 64);
  v31 = *(_BYTE *)(v21 + 65);
  v32 = *(_OWORD *)(v18 + 16);
  v33 = *(_OWORD *)(v18 + 32);
  v34 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)v21 = *(_OWORD *)v18;
  *(_OWORD *)(v21 + 16) = v32;
  *(_OWORD *)(v21 + 32) = v33;
  *(_OWORD *)(v21 + 48) = v34;
  *(_BYTE *)(v21 + 64) = v19;
  *(_BYTE *)(v21 + 65) = v20;
  outlined consume of Environment<ListPadding>.Content(v22, v23, v24, v25, v26, v27, v28, v29, v30, v31);
  v35 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v36 = *(unsigned __int8 *)(v35 + 80);
  v37 = (v36 + 66 + v21) & ~v36;
  v38 = (v36 + 66 + v18) & ~v36;
  (*(void (**)(uint64_t, uint64_t))(v35 + 40))(v37, v38);
  v39 = *(_QWORD *)(a3 + 24);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = (v41 | 7) + *(_QWORD *)(v35 + 64);
  v43 = (_QWORD *)((v42 + v37) & ~(v41 | 7));
  v44 = (_QWORD *)((v42 + v38) & ~(v41 | 7));
  v45 = *(unsigned int *)(v40 + 84);
  v46 = ~v41;
  v47 = *(_QWORD *)(v40 + 64);
  v48 = ((v41 + 16) & ~v41) + v47;
  v49 = (_QWORD *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v45 & 0x80000000) != 0)
  {
    __n = ((v41 + 16) & ~v41) + v47;
    v56 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48);
    v57 = v56(((unint64_t)v49 + v41 + 8) & ~v41, v45, v39);
    v58 = v56;
    v60 = v57;
    v50 = (_QWORD *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
    v46 = ~v41;
    v52 = v58(((unint64_t)v50 + v41 + 8) & ~v41, v45, v39);
    v48 = __n;
    if (!v60)
    {
LABEL_5:
      if (!v52)
      {
        *v43 = *v44;
        swift_release();
        *v49 = *v50;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 40))(((unint64_t)v49 + v41 + 8) & v46, ((unint64_t)v50 + v41 + 8) & v46, v39);
        return a1;
      }
      v53 = v48;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v40 + 8))(((unint64_t)v49 + v41 + 8) & v46, v39);
      v54 = v43;
      v55 = v44;
      v48 = v53;
      goto LABEL_10;
    }
  }
  else
  {
    v50 = (_QWORD *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
    v51 = *v50;
    if (*v50 >= 0xFFFFFFFFuLL)
      LODWORD(v51) = -1;
    v52 = v51 + 1;
    if (*v49 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v52)
  {
    *v43 = *v44;
    *v49 = *v50;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 32))(((unint64_t)v49 + v41 + 8) & v46, ((unint64_t)v50 + v41 + 8) & v46, v39);
    return a1;
  }
  v54 = v43;
  v55 = v44;
LABEL_10:
  memcpy(v54, v55, v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlainListBody.CollectionViewBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v7 + 84);
  v10 = v9 - 1;
  if (v6 <= v9 - 1)
    v11 = v9 - 1;
  else
    v11 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = v14 | 7;
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_27;
  v17 = ((v14 + 16) & ~v14) + *(_QWORD *)(v7 + 64) + ((v15 + v13 + ((v12 + 98) & ~v12)) & ~v15);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      v24 = (((((a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v12 + 66) & ~v12;
      if (v6 >= v10)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v5 + 48))(v24, *(unsigned int *)(v5 + 84), v4);
      v25 = (unint64_t *)((((v24 + v13 + v15) & ~v15) + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v8 & 0x80000000) != 0)
      {
        v27 = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v25 + v14 + 8) & ~v14);
      }
      else
      {
        v26 = *v25;
        if (v26 >= 0xFFFFFFFF)
          LODWORD(v26) = -1;
        v27 = v26 + 1;
      }
      if (v27 >= 2)
        return v27 - 1;
      else
        return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = ((v14 + 16) & ~(_DWORD)v14)
          + *(_DWORD *)(v7 + 64)
          + ((v15 + v13 + ((v12 + 98) & ~(_DWORD)v12)) & ~(_DWORD)v15);
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v11 + v22 + 1;
}

void storeEnumTagSinglePayload for PlainListBody.CollectionViewBody(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (*(_DWORD *)(v5 + 84) <= (v7 - 1))
    v8 = v7 - 1;
  else
    v8 = *(_DWORD *)(v5 + 84);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (((v9 | 7)
        + *(_QWORD *)(v5 + 64)
        + ((*(unsigned __int8 *)(v5 + 80) + 98) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(v9 | 7))
      + ((v9 + 16) & ~v9)
      + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v10 <= 3)
    {
      v13 = ((a3 - v8 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v8 < a2)
  {
    v12 = ~v8 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v14 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v10 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X22 }
}

void *type metadata accessor for CollectionViewPlainListsEnabled()
{
  return &unk_1E1AFEEF8;
}

void sub_18755B3DC()
{
  type metadata accessor for PlainListBody.CollectionViewBody();
}

void sub_18755B410()
{
  type metadata accessor for PlainListBody.TableViewRoot();
}

void sub_18755B428()
{
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type CollectionViewPlainListsEnabled and conformance CollectionViewPlainListsEnabled();
  type metadata accessor for StaticIf();
}

uint64_t sub_18755B468(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier>();
  v6 = type metadata accessor for ModifiedContent();
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>.CollectionViewBody, v2);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>.TableViewRoot, v3);
  v12 = v4;
  v10[0] = v7;
  v10[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v1, &v11);
  v9[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v10);
  v9[1] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v9);
}

uint64_t instantiation function for generic protocol witness table for PlainListBody<A, B>.TableViewRoot(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>.TableViewRoot);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in PlainListBody<A, B>.TableViewRoot()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in PlainListBody<A, B>.CollectionViewBody()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance CollectionViewPlainListsEnabled()
{
  char v0;
  char v2;

  PropertyList.subscript.getter();
  if (v2 == 1 && (static InterfaceIdiomPredicate.evaluate(inputs:)() & 1) == 0)
  {
    lazy protocol witness table accessor for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature();
    v0 = static UserDefaultKeyedFeature.isEnabled.getter() ^ 1;
  }
  else
  {
    v0 = 0;
  }
  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewPlainListsFeature, &type metadata for DisableCollectionViewPlainListsFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewPlainListsFeature, &type metadata for DisableCollectionViewPlainListsFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewPlainListsFeature, &type metadata for DisableCollectionViewPlainListsFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewPlainListsFeature, &type metadata for DisableCollectionViewPlainListsFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewPlainListsFeature, &type metadata for DisableCollectionViewPlainListsFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewPlainListsFeature, &type metadata for DisableCollectionViewPlainListsFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewPlainListsFeature, &type metadata for DisableCollectionViewPlainListsFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewPlainListsFeature, &type metadata for DisableCollectionViewPlainListsFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier>)
  {
    type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>();
    type metadata accessor for ViewInputFlagModifier<ListConcatenatesFooters>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>> and conformance InvertedViewInputPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, MEMORY[0x1E0CE6010]);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<ListConcatenatesFooters>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<ListConcatenatesFooters>)
  {
    v2 = lazy protocol witness table accessor for type ListConcatenatesFooters and conformance ListConcatenatesFooters();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for ListConcatenatesFooters, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ListConcatenatesFooters>);
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier>();
    v2[0] = &protocol witness table for ViewInputFlagModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

ValueMetadata *type metadata accessor for DisableCollectionViewPlainListsFeature()
{
  return &type metadata for DisableCollectionViewPlainListsFeature;
}

void sub_18755B814(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for CollectionViewListRoot();
}

uint64_t sub_18755B878()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[14];

  type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier>();
  v1 = type metadata accessor for ModifiedContent();
  v3[0] = &protocol witness table for CollectionViewListRoot<A, B>;
  v3[1] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return MEMORY[0x18D75FFDC](v0, v1, v3);
}

_UNKNOWN **sub_18755B8CC()
{
  return &protocol witness table for TableViewListCore<A, B>;
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance DisableCollectionViewPlainListsFeature()
{
  return 0xD000000000000037;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance DisableCollectionViewPlainListsFeature()
{
  swift_beginAccess();
  return static DisableCollectionViewPlainListsFeature.cachedValue;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance DisableCollectionViewPlainListsFeature(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static DisableCollectionViewPlainListsFeature.cachedValue = a1;
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance DisableCollectionViewPlainListsFeature())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance DisableCollectionViewPlainListsFeature()
{
  lazy protocol witness table accessor for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature();
  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance DisableCollectionViewPlainListsFeature()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisableCollectionViewPlainListsFeature()
{
  lazy protocol witness table accessor for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance DisableCollectionViewPlainListsFeature@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;

  v4 = lazy protocol witness table accessor for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature();
  result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in DisableCollectionViewPlainListsFeature()
{
  return &protocol witness table for DisableCollectionViewPlainListsFeature;
}

void SharePreview.init(_:image:icon:)(_OWORD *a1@<X8>)
{
  *a1 = 0u;
  a1[1] = 0u;
  type metadata accessor for SharePreview();
}

{
  *a1 = 0u;
  a1[1] = 0u;
  type metadata accessor for SharePreview();
}

uint64_t sub_18755BD30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v5 = (char *)v3 + *(int *)(a1 + 56);
  v6 = *(_QWORD *)(v2 - 8);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v7(v5, 1, 1, v2);
  v8 = (char *)v3 + *(int *)(a1 + 60);
  v9 = *(_QWORD *)(v1 - 8);
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v10(v8, 1, 1, v1);
  v3[4] = Text.init(_:tableName:bundle:comment:)();
  v3[5] = v11;
  v3[6] = v12 & 1;
  v3[7] = v13;
  v14 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v5, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v5, v17, v2);
  v7(v5, 0, 1, v2);
  v15 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v8, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v8, v18, v1);
  return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v10)(v8, 0, 1, v1);
}

void type metadata accessor for SharePreview()
{
  JUMPOUT(0x18D75FF28);
}

void SharePreview.init<A>(_:image:icon:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  MEMORY[0x1E0C80A78](a1, a2);
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  type metadata accessor for SharePreview();
}

uint64_t sub_18755BEFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v10 = (char *)v5 + *(int *)(a1 + 56);
  v11 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v8 - 168) = v11;
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  *(_QWORD *)(v8 - 152) = v12;
  v12(v10, 1, 1, v3);
  *(_QWORD *)(v8 - 160) = (char *)v5 + *(int *)(a1 + 60);
  *(_QWORD *)(v8 - 176) = v1;
  v13 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)(v8 - 144) = v13;
  v14 = *(void (**)(void))(v13 + 56);
  *(_QWORD *)(v8 - 136) = v14;
  v14();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, v4, v6);
  v15 = Text.init<A>(_:)();
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  outlined consume of Text?(v5[4], v5[5], v5[6], v5[7]);
  v5[4] = v15;
  v5[5] = v17;
  v5[6] = v21;
  v5[7] = v19;
  v22 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v10, v22);
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 168) + 32))(v10, *(_QWORD *)(v8 - 128), v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 - 152))(v10, 0, 1, v3);
  v23 = *(_QWORD *)(v8 - 176);
  v24 = type metadata accessor for Optional();
  v25 = *(_QWORD *)(v8 - 160);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v25, v24);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 144) + 32))(v25, *(_QWORD *)(v8 - 120), v23);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 - 136))(v25, 0, 1, v23);
}

uint64_t sub_18755C0D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t, uint64_t);
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = (char *)v4 + *(int *)(a1 + 56);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v8(v6, 1, 1, v2);
  v9 = (char *)v4 + *(int *)(a1 + 60);
  v10 = *(_QWORD *)(v1 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v9, 1, 1, v1);
  v4[4] = v3;
  v4[5] = v16;
  v4[6] = v15 & 1;
  v4[7] = v17;
  v12 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v6, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v6, v18, v2);
  v8(v6, 0, 1, v2);
  v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v9, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v9, v19, v1);
  return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v11)(v9, 0, 1, v1);
}

void SharePreview<>.init(_:icon:)(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 64) = 1;
  type metadata accessor for SharePreview();
}

{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 64) = 1;
  type metadata accessor for SharePreview();
}

uint64_t sub_18755C258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (char *)v3 + *(int *)(a1 + 60);
  v5 = *(_QWORD *)(v1 - 8);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v6(v4, 1, 1, v1);
  v3[4] = Text.init(_:tableName:bundle:comment:)();
  v3[5] = v7;
  v3[6] = v8 & 1;
  v3[7] = v9;
  v10 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v4, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v4, v2, v1);
  return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v6)(v4, 0, 1, v1);
}

void SharePreview<>.init<A>(_:icon:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x1E0C80A78](a1, a2);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_BYTE *)(a3 + 64) = 1;
  type metadata accessor for SharePreview();
}

uint64_t sub_18755C3BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v8 = (char *)v2 + *(int *)(a1 + 60);
  v9 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)(v7 - 136) = v9;
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  *(_QWORD *)(v7 - 128) = v10;
  v10(v8, 1, 1, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v3);
  v11 = Text.init<A>(_:)();
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v3);
  outlined consume of Text?(v2[4], v2[5], v2[6], v2[7]);
  v2[4] = v11;
  v2[5] = v13;
  v2[6] = v17;
  v2[7] = v15;
  v18 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v8, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 136) + 32))(v8, *(_QWORD *)(v7 - 120), v1);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v7 - 128))(v8, 0, 1, v1);
}

uint64_t sub_18755C520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v8 = (char *)v7 + *(int *)(a1 + 60);
  v9 = *(_QWORD *)(v1 - 8);
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v10(v8, 1, 1, v1);
  v7[4] = v6;
  v7[5] = v5;
  v7[6] = v4 & 1;
  v7[7] = v3;
  v11 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v8, v2, v1);
  return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v10)(v8, 0, 1, v1);
}

void SharePreview<>.init(_:image:)(_OWORD *a1@<X8>)
{
  *a1 = 0u;
  a1[1] = 0u;
  type metadata accessor for SharePreview();
}

{
  *a1 = 0u;
  a1[1] = 0u;
  type metadata accessor for SharePreview();
}

uint64_t sub_18755C61C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = (char *)v2 + *(int *)(a1 + 56);
  v5 = *(_QWORD *)(v1 - 8);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v6(v4, 1, 1, v1);
  *((_BYTE *)v2 + *(int *)(a1 + 60)) = 1;
  v2[4] = Text.init(_:tableName:bundle:comment:)();
  v2[5] = v7;
  v2[6] = v8 & 1;
  v2[7] = v9;
  v10 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v4, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v4, v12, v1);
  return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v6)(v4, 0, 1, v1);
}

void SharePreview<>.init<A>(_:image:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  MEMORY[0x1E0C80A78](a1, a2);
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  type metadata accessor for SharePreview();
}

uint64_t sub_18755C788(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v9 = (char *)v2 + *(int *)(a1 + 56);
  v10 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)(v7 - 136) = v10;
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  *(_QWORD *)(v7 - 128) = v11;
  v11(v9, 1, 1, v1);
  *((_BYTE *)v2 + *(int *)(a1 + 60)) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v3);
  v12 = Text.init<A>(_:)();
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v3);
  outlined consume of Text?(v2[4], v2[5], v2[6], v2[7]);
  v2[4] = v12;
  v2[5] = v14;
  v2[6] = v18;
  v2[7] = v16;
  v19 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v9, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 136) + 32))(v9, *(_QWORD *)(v7 - 120), v1);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v7 - 128))(v9, 0, 1, v1);
}

uint64_t sub_18755C8F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;

  v8 = (char *)v6 + *(int *)(a1 + 56);
  v9 = *(_QWORD *)(v1 - 8);
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v10(v8, 1, 1, v1);
  *((_BYTE *)v6 + *(int *)(a1 + 60)) = 1;
  v6[4] = v5;
  v6[5] = v4;
  v6[6] = v3 & 1;
  v6[7] = v2;
  v11 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v8, v13, v1);
  return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v10)(v8, 0, 1, v1);
}

uint64_t SharePreview<>.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 64) = 257;
  result = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v4 & 1;
  *(_QWORD *)(a1 + 56) = v5;
  return result;
}

uint64_t SharePreview<>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_WORD *)(a3 + 64) = 257;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  v8 = Text.init<A>(_:)();
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  result = outlined consume of Text?(0, 0, 0, 0);
  *(_QWORD *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 40) = v10;
  *(_QWORD *)(a3 + 48) = v14;
  *(_QWORD *)(a3 + 56) = v12;
  return result;
}

double SharePreview<>.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_WORD *)(a5 + 64) = 257;
  *(_QWORD *)(a5 + 32) = a1;
  *(_QWORD *)(a5 + 40) = a2;
  *(_QWORD *)(a5 + 48) = a3 & 1;
  *(_QWORD *)(a5 + 56) = a4;
  return result;
}

_OWORD *SharePreview<>.init(metadata:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_WORD *)(a2 + 64) = 257;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  _bridgeAnythingToObjectiveC<A>(_:)();
  _AssertIsLPLinkMetadata();
  swift_unknownObjectRelease();
  outlined destroy of Any?(a2);
  return outlined init with take of Any(a1, (_OWORD *)a2);
}

uint64_t type metadata completion function for SharePreview()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SharePreview(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  void *v29;
  const void *v30;
  size_t __n;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v7 + 64) + 1;
  v10 = *(_QWORD *)(v5 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84))
    ++v12;
  if ((v11 | v8) > 7
    || ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v12 + ((v9 + v11 + ((v8 + 64) & ~v8)) & ~v11) > 0x18)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    v16 = v15 + (((v11 | v8) & 0xF8 ^ 0x1F8) & ((v11 | v8) + 16));
    swift_retain();
  }
  else
  {
    v17 = a2[3];
    v33 = v6;
    v34 = v5;
    __n = v12;
    if (v17 < 0xFFFFFFFF)
    {
      v18 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v18;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v17;
      (**(void (***)(uint64_t, uint64_t *))(v17 - 8))(a1, a2);
    }
    v19 = ~v8;
    v20 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
    v21 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
    v35 = a1;
    if (*(_QWORD *)(v21 + 24) < 0xFFFFFFFFuLL)
    {
      v25 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 16) = v25;
    }
    else
    {
      v22 = *(_QWORD *)v21;
      v23 = *(_QWORD *)(v21 + 8);
      v24 = *(_BYTE *)(v21 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v21, v23, v24);
      *(_QWORD *)v20 = v22;
      *(_QWORD *)(v20 + 8) = v23;
      *(_BYTE *)(v20 + 16) = v24;
      *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRetain();
      v19 = ~v8;
    }
    v26 = ~v11;
    v27 = (void *)((v20 + v8 + 32) & v19);
    v28 = (const void *)((v21 + v8 + 32) & v19);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v28, 1, v33))
    {
      memcpy(v27, v28, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v27, v28, v33);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v27, 0, 1, v33);
    }
    v29 = (void *)(((unint64_t)v27 + v9 + v11) & v26);
    v30 = (const void *)(((unint64_t)v28 + v9 + v11) & v26);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v30, 1, v34))
    {
      memcpy(v29, v30, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v29, v30, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v34);
    }
    return v35;
  }
  return v16;
}

uint64_t destroy for SharePreview(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v6 + 64) + v7;
  if (!*(_DWORD *)(v6 + 84))
    ++v10;
  v11 = (v10 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v9 + 8))(v11, v8);
  return result;
}

uint64_t initializeWithCopy for SharePreview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  int v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  size_t v29;

  v6 = *(_QWORD *)(a2 + 24);
  if (v6 < 0xFFFFFFFF)
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
  }
  v8 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v9 + 24) < 0xFFFFFFFFuLL)
  {
    v13 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v13;
  }
  else
  {
    v10 = *(_QWORD *)v9;
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_BYTE *)(v9 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v9, v11, v12);
    *(_QWORD *)v8 = v10;
    *(_QWORD *)(v8 + 8) = v11;
    *(_BYTE *)(v8 + 16) = v12;
    *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
    swift_bridgeObjectRetain();
  }
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (void *)((v8 + v16 + 32) & ~v16);
  v18 = (const void *)((v9 + v16 + 32) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v18, 1, v14))
  {
    v19 = *(_DWORD *)(v15 + 84);
    v20 = *(_QWORD *)(v15 + 64);
    if (v19)
      v21 = v20;
    else
      v21 = v20 + 1;
    memcpy(v17, v18, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v17, v18, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v14);
    v19 = *(_DWORD *)(v15 + 84);
    v20 = *(_QWORD *)(v15 + 64);
  }
  if (v19)
    v22 = v20;
  else
    v22 = v20 + 1;
  v23 = *(_QWORD *)(a3 + 24);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = v22 + v25;
  v27 = (void *)(((unint64_t)v17 + v26) & ~v25);
  v28 = (const void *)(((unint64_t)v18 + v26) & ~v25);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v28, 1, v23))
  {
    if (*(_DWORD *)(v24 + 84))
      v29 = *(_QWORD *)(v24 + 64);
    else
      v29 = *(_QWORD *)(v24 + 64) + 1;
    memcpy(v27, v28, v29);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v27, v28, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v27, 0, 1, v23);
  }
  return a1;
}

uint64_t assignWithCopy for SharePreview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  int v39;
  size_t v40;

  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
LABEL_8:
  v8 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v9 + 24);
  if (*(_QWORD *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    if (v10 >= 0xFFFFFFFF)
    {
      v17 = *(_QWORD *)v9;
      v18 = *(_QWORD *)(v9 + 8);
      v19 = *(_BYTE *)(v9 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v9, v18, v19);
      *(_QWORD *)v8 = v17;
      *(_QWORD *)(v8 + 8) = v18;
      *(_BYTE *)(v8 + 16) = v19;
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v10 >= 0xFFFFFFFF)
    {
      v11 = *(_QWORD *)v9;
      v12 = *(_QWORD *)(v9 + 8);
      v13 = *(_BYTE *)(v9 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v9, v12, v13);
      v14 = *(_QWORD *)v8;
      v15 = *(_QWORD *)(v8 + 8);
      v16 = *(_BYTE *)(v8 + 16);
      *(_QWORD *)v8 = v11;
      *(_QWORD *)(v8 + 8) = v12;
      *(_BYTE *)(v8 + 16) = v13;
      outlined consume of Text.Storage(v14, v15, v16);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined consume of Text.Storage(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  v20 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v20;
LABEL_15:
  v21 = *(_QWORD *)(a3 + 16);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (void *)((v8 + v23 + 32) & ~v23);
  v25 = (void *)((v9 + v23 + 32) & ~v23);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v27 = v26(v24, 1, v21);
  v28 = v26(v25, 1, v21);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v24, v25, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v21);
      goto LABEL_24;
    }
  }
  else
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v24, v25, v21);
      goto LABEL_24;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  }
  if (*(_DWORD *)(v22 + 84))
    v29 = *(_QWORD *)(v22 + 64);
  else
    v29 = *(_QWORD *)(v22 + 64) + 1;
  memcpy(v24, v25, v29);
LABEL_24:
  if (*(_DWORD *)(v22 + 84))
    v30 = *(_QWORD *)(v22 + 64);
  else
    v30 = *(_QWORD *)(v22 + 64) + 1;
  v31 = *(_QWORD *)(a3 + 24);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v34 = v30 + v33;
  v35 = (void *)(((unint64_t)v24 + v34) & ~v33);
  v36 = (void *)(((unint64_t)v25 + v34) & ~v33);
  v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  v38 = v37(v35, 1, v31);
  v39 = v37(v36, 1, v31);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 16))(v35, v36, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v35, 0, 1, v31);
      return a1;
    }
  }
  else
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 24))(v35, v36, v31);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v35, v31);
  }
  if (*(_DWORD *)(v32 + 84))
    v40 = *(_QWORD *)(v32 + 64);
  else
    v40 = *(_QWORD *)(v32 + 64) + 1;
  memcpy(v35, v36, v40);
  return a1;
}

_OWORD *initializeWithTake for SharePreview(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  size_t v24;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = (_OWORD *)(((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_OWORD *)(((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8);
  v8 = v7[1];
  *v6 = *v7;
  v6[1] = v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)(((unint64_t)v6 + v11 + 32) & ~v11);
  v13 = (const void *)(((unint64_t)v7 + v11 + 32) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v12, v13, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
    v14 = *(_DWORD *)(v10 + 84);
    v15 = *(_QWORD *)(v10 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = *(_QWORD *)(a3 + 24);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v17 + v20;
  v22 = (void *)(((unint64_t)v12 + v21) & ~v20);
  v23 = (const void *)(((unint64_t)v13 + v21) & ~v20);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v23, 1, v18))
  {
    if (*(_DWORD *)(v19 + 84))
      v24 = *(_QWORD *)(v19 + 64);
    else
      v24 = *(_QWORD *)(v19 + 64) + 1;
    memcpy(v22, v23, v24);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v22, v23, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
  }
  return a1;
}

uint64_t assignWithTake for SharePreview(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t (*v31)(void *, uint64_t, uint64_t);
  int v32;
  int v33;
  size_t v34;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v8 + 24) >= 0xFFFFFFFFuLL)
    {
      v9 = *(_BYTE *)(v8 + 16);
      v10 = *(_QWORD *)v7;
      v11 = *(_QWORD *)(v7 + 8);
      v12 = *(_BYTE *)(v7 + 16);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_BYTE *)(v7 + 16) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  v13 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v13;
LABEL_8:
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v8 + v16;
  v18 = (void *)((v7 + v16 + 32) & ~v16);
  v19 = (void *)((v17 + 32) & ~v16);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v21 = v20(v18, 1, v14);
  v22 = v20(v19, 1, v14);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v18, v19, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      goto LABEL_17;
    }
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v18, v19, v14);
      goto LABEL_17;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  }
  if (*(_DWORD *)(v15 + 84))
    v23 = *(_QWORD *)(v15 + 64);
  else
    v23 = *(_QWORD *)(v15 + 64) + 1;
  memcpy(v18, v19, v23);
LABEL_17:
  if (*(_DWORD *)(v15 + 84))
    v24 = *(_QWORD *)(v15 + 64);
  else
    v24 = *(_QWORD *)(v15 + 64) + 1;
  v25 = *(_QWORD *)(a3 + 24);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = v24 + v27;
  v29 = (void *)(((unint64_t)v18 + v28) & ~v27);
  v30 = (void *)(((unint64_t)v19 + v28) & ~v27);
  v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  v32 = v31(v29, 1, v25);
  v33 = v31(v30, 1, v25);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 32))(v29, v30, v25);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v25);
      return a1;
    }
  }
  else
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 40))(v29, v30, v25);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v29, v25);
  }
  if (*(_DWORD *)(v26 + 84))
    v34 = *(_QWORD *)(v26 + 64);
  else
    v34 = *(_QWORD *)(v26 + 64) + 1;
  memcpy(v29, v30, v34);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharePreview(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v6 <= v9)
    v10 = v9;
  else
    v10 = v6;
  if (v10 <= 0x7FFFFFFE)
    v11 = 2147483646;
  else
    v11 = v10;
  v12 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v12;
  if (v8)
    v13 = *(_QWORD *)(v7 + 64);
  else
    v13 = *(_QWORD *)(v7 + 64) + 1;
  if (!a2)
    return 0;
  v14 = *(unsigned __int8 *)(v4 + 80);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_36;
  v17 = v13 + ((v12 + v15 + ((v14 + 64) & ~v14)) & ~v15);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v20 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v20))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_36;
      goto LABEL_27;
    }
    if (v20 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_36;
      goto LABEL_27;
    }
    if (v20 < 2)
    {
LABEL_36:
      if (v10 <= 0x7FFFFFFE)
      {
        v23 = *(_QWORD *)(a1 + 24);
        if (v23 >= 0xFFFFFFFF)
          LODWORD(v23) = -1;
        if ((v23 + 1) >= 2)
          return v23;
        else
          return 0;
      }
      v24 = (((a1 + 39) & 0xFFFFFFFFFFFFFFF8) + v14 + 32) & ~v14;
      if (v6 == v11)
      {
        if (v5 >= 2)
        {
          v25 = (*(uint64_t (**)(unint64_t, _QWORD))(v4 + 48))(v24, *(unsigned int *)(v4 + 84));
          goto LABEL_49;
        }
      }
      else if (v8 >= 2)
      {
        v25 = (*(uint64_t (**)(unint64_t))(v7 + 48))((v24 + v12 + v15) & ~v15);
LABEL_49:
        if (v25 >= 2)
          return v25 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_36;
LABEL_27:
  v21 = (v19 - 1) << v18;
  if (v17 > 3)
    v21 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v22 = v17;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v11 + v21 + 1;
}

void storeEnumTagSinglePayload for SharePreview(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v9 <= v12)
    v13 = v12;
  else
    v13 = v9;
  if (v13 <= 0x7FFFFFFE)
    v14 = 2147483646;
  else
    v14 = v13;
  v15 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v15;
  v16 = *(_QWORD *)(v10 + 64);
  if (!v11)
    ++v16;
  v17 = v16
      + ((v15
        + *(unsigned __int8 *)(v10 + 80)
        + ((*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v18 = a3 >= v14;
  v19 = a3 - v14;
  if (v19 != 0 && v18)
  {
    if (v17 > 3)
    {
      v6 = 1u;
      if (v14 < a2)
        goto LABEL_26;
      goto LABEL_33;
    }
    v20 = ((v19 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v20))
    {
      v6 = 4u;
      if (v14 < a2)
      {
LABEL_26:
        v21 = ~v14 + a2;
        if (v17 < 4)
        {
          if ((_DWORD)v17)
          {
            v22 = v21 & ~(-1 << (8 * v17));
            bzero(a1, v17);
            if ((_DWORD)v17 == 3)
            {
              *a1 = v22;
              *((_BYTE *)a1 + 2) = BYTE2(v22);
            }
            else if ((_DWORD)v17 == 2)
            {
              *a1 = v22;
            }
            else
            {
              *(_BYTE *)a1 = v22;
            }
          }
        }
        else
        {
          bzero(a1, v17);
          *(_DWORD *)a1 = v21;
        }
        __asm { BR              X10 }
      }
LABEL_33:
      __asm { BR              X7 }
    }
    if (v20 >= 0x100)
      v6 = 2;
    else
      v6 = v20 > 1;
  }
  if (v14 < a2)
    goto LABEL_26;
  goto LABEL_33;
}

void sub_18755DD00()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18755DD08()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

ValueMetadata *type metadata accessor for UIKitTextSelectionRepresentation()
{
  return &type metadata for UIKitTextSelectionRepresentation;
}

uint64_t static UIKitTextSelectionRepresentation.makeSelectableTextChildView<A>(_:resolvedText:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for SelectableTextChildView(0, a4, a5, a4);
  v9 = type metadata accessor for UIKitTextSelectionRepresentation.SelectableTextChildQuery(0, a4, a5, v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitTextSelectionRepresentation.SelectableTextChildQuery<A>, v9);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectableTextChildView<A>, v7);
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t UIKitTextSelectionRepresentation.SelectableTextChildQuery.value.getter()
{
  type metadata accessor for ResolvedStyledText();
  AGGraphGetValue();
  return swift_retain();
}

uint64_t protocol witness for Rule.value.getter in conformance UIKitTextSelectionRepresentation.SelectableTextChildQuery<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = UIKitTextSelectionRepresentation.SelectableTextChildQuery.value.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UIKitTextSelectionRepresentation.SelectableTextChildQuery<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitTextSelectionRepresentation.SelectableTextChildQuery<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static PlatformTextSelectionRepresentation.makeSelectableText(resolvedText:inputs:) in conformance UIKitTextSelectionRepresentation(unsigned int a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;

  v2 = *a2;
  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 6);
  v6 = *((_DWORD *)a2 + 7);
  v7 = *((_DWORD *)a2 + 8);
  v8 = *((_DWORD *)a2 + 9);
  v9 = a2[5];
  v10 = a2[6];
  v19 = *((_DWORD *)a2 + 15);
  v20 = *((_DWORD *)a2 + 14);
  v17 = *((_DWORD *)a2 + 17);
  v18 = *((_DWORD *)a2 + 16);
  v15 = *((_DWORD *)a2 + 19);
  v16 = *((_DWORD *)a2 + 18);
  v14 = *((_DWORD *)a2 + 20);
  v11 = _ViewInputs.textAccessibilityProvider.getter();
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = v10;
  v31 = v20;
  v32 = v19;
  v33 = v18;
  v34 = v17;
  v35 = v16;
  v36 = v15;
  v37 = v14;
  return static UIKitTextSelectionRepresentation.makeSelectableTextChildView<A>(_:resolvedText:inputs:)(v11, a1, (uint64_t)&v22, v11, v12);
}

uint64_t type metadata accessor for SelectableTextChildView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectableTextChildView);
}

uint64_t type metadata accessor for UIKitTextSelectionRepresentation.SelectableTextChildQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitTextSelectionRepresentation.SelectableTextChildQuery);
}

uint64_t initializeBufferWithCopyOfBuffer for SelectableTextChildView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SelectableTextChildView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SelectableTextChildView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

void base witness table accessor for _AttributeBody in UIKitTextSelectionRepresentation.SelectableTextChildQuery<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in SelectableTextChildView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SelectableTextChildView.body.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char *v72;
  _QWORD v73[2];
  _QWORD v74[2];
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, char);
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t, char);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;

  v59 = a3;
  v71 = a2;
  v70 = a6;
  type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(0);
  v68 = v9;
  v69 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v63 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v58 = AssociatedTypeWitness;
  v60 = v13;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, AssociatedTypeWitness);
  v15 = (char *)&v55 - v14;
  v16 = type metadata accessor for ModifiedContent();
  v66 = *(_QWORD *)(v16 - 8);
  v61 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v72 = (char *)&v55 - v18;
  type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>();
  v65 = type metadata accessor for ModifiedContent();
  v67 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65, v19);
  v62 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v64 = (char *)&v55 - v23;
  swift_retain();
  v57 = a1;
  ResolvedStyledText.accessibilityText.getter();
  v56 = a5;
  AccessibilityStyledTextContentView.init(text:unresolvedText:renderer:needsDrawingGroup:)();
  v24 = v85;
  v25 = (uint64_t)v86;
  LOBYTE(a1) = v87;
  v77 = v84;
  v78 = v85;
  v79 = v86;
  v80 = v87;
  v81 = v88;
  v82 = v89;
  v83 = v90;
  v55 = a4;
  type metadata accessor for AccessibilityStyledTextContentView();
  AccessibilityStyledTextContentView.body.getter();
  swift_release();
  outlined consume of Text.Storage(v24, v25, a1);
  swift_bridgeObjectRelease();
  swift_release();
  v75 = v71;
  v26 = v59;
  v76 = v59;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  v27 = v77;
  v28 = v78;
  v29 = (char)v79;
  v30 = v56;
  v31 = v58;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v33 = default argument 2 of View.textSelectionMenu(text:isPresented:anchor:)();
  v34 = v57;
  View.textSelectionMenu(text:isPresented:anchor:)(v57, v27, v28, v29, v33, v31, AssociatedConformanceWitness);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v15, v31);
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = v55;
  *(_QWORD *)(v35 + 24) = v30;
  *(_QWORD *)(v35 + 32) = v34;
  *(_BYTE *)(v35 + 40) = v71;
  *(_QWORD *)(v35 + 48) = v26;
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = partial apply for closure #1 in SelectableTextChildView.body.getter;
  *(_QWORD *)(v36 + 24) = v35;
  v84 = 0;
  v85 = 0;
  v86 = partial apply for closure #1 in Gesture<>.callbacks(pressing:pressed:);
  v87 = v36;
  type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>();
  v38 = v37;
  v39 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>, MEMORY[0x1E0CE2E88]);
  swift_retain();
  swift_retain();
  swift_retain();
  v40 = v63;
  Gesture.cancellable()();
  swift_release();
  swift_release();
  v41 = lazy protocol witness table accessor for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier();
  v74[0] = AssociatedConformanceWitness;
  v74[1] = v41;
  v42 = MEMORY[0x1E0CE2E70];
  v43 = v61;
  v44 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v61, v74);
  v84 = v38;
  v85 = MEMORY[0x1E0CE5A80];
  v86 = (uint64_t (*)(uint64_t, uint64_t, char))v39;
  v87 = MEMORY[0x1E0CE5A70];
  swift_getOpaqueTypeConformance2();
  v45 = v62;
  v46 = v43;
  v47 = v68;
  v48 = v72;
  View.gesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v40, v47);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v48, v46);
  v49 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>, MEMORY[0x1E0CE41B8]);
  v73[0] = v44;
  v73[1] = v49;
  v50 = v65;
  v51 = MEMORY[0x18D75FFDC](v42, v65, v73);
  v52 = (uint64_t)v64;
  static ViewBuilder.buildExpression<A>(_:)(v45, v50, v51);
  v53 = *(void (**)(char *, uint64_t))(v67 + 8);
  v53(v45, v50);
  static ViewBuilder.buildBlock<A>(_:)(v52, v50, v70);
  return ((uint64_t (*)(uint64_t, uint64_t))v53)(v52, v50);
}

uint64_t default argument 2 of View.textSelectionMenu(text:isPresented:anchor:)()
{
  static UnitRect.one.getter();
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type UnitRect and conformance UnitRect();
  return Anchor.Source.init<A>(anchor:)();
}

uint64_t closure #1 in SelectableTextChildView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance SelectableTextChildView<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return SelectableTextChildView.body.getter(*(_QWORD *)v2, *(unsigned __int8 *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void one-time initialization function for maximumDistance()
{
  static TextSelectionGesture.maximumDistance = 0x4024000000000000;
}

uint64_t TextSelectionGesture.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[8];
  uint64_t (*v44)@<X0>(uint64_t@<X0>, _WORD *@<X8>);
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;

  v42 = a1;
  type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(0);
  v2 = v1;
  v35 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(0);
  v38 = v6;
  v36 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>();
  v39 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v37 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>();
  v41 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v40 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for maximumDistance != -1)
    swift_once();
  default argument 0 of DistanceGesture.init(minimumDistance:maximumDistance:)();
  DistanceGesture.init(minimumDistance:maximumDistance:)();
  v16 = v49;
  v17 = v50;
  v47 = 0;
  memset(v46, 0, sizeof(v46));
  v48 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)v46, (uint64_t)v43);
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v43, (uint64_t)&v52);
  v51[0] = v16;
  v51[1] = v17;
  outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)v43);
  outlined destroy of CoordinateSpace((uint64_t)v46);
  v43[0] = 0;
  v44 = specialized closure #1 in Gesture.longPressPhase();
  v45 = 0;
  LOBYTE(v46[0]) = 0;
  *(_OWORD *)((char *)v46 + 8) = xmmword_187C3FAE0;
  BYTE8(v46[1]) = 0;
  type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>();
  v19 = v18;
  type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>();
  v21 = v20;
  v22 = MEMORY[0x1E0CE2E88];
  v23 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>, MEMORY[0x1E0CE2E88]);
  v24 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>, v22);
  Gesture.enabled<A>(by:)();
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  v26 = v25;
  *(_QWORD *)&v46[0] = v19;
  *((_QWORD *)&v46[0] + 1) = v21;
  v27 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)&v46[1] = MEMORY[0x1E0DEAFA0];
  *((_QWORD *)&v46[1] + 1) = v23;
  v47 = v24;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v29 = MEMORY[0x1E0CE2E88];
  v30 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, MEMORY[0x1E0CE2E88]);
  Gesture.gated<A>(by:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v2);
  *(_QWORD *)&v46[0] = v2;
  *((_QWORD *)&v46[0] + 1) = v26;
  *(_QWORD *)&v46[1] = v27;
  *((_QWORD *)&v46[1] + 1) = OpaqueTypeConformance2;
  v47 = v30;
  swift_getOpaqueTypeConformance2();
  v31 = (uint64_t)v37;
  v32 = v38;
  Gesture.eventFilter<A>(forType:_:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v32);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>, v29);
  v33 = (uint64_t)v40;
  Gesture.eventFilter<A>(forType:_:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v31, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
  LOBYTE(v46[0]) = 2;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>, v29);
  Gesture.dependency(_:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v33, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
}

BOOL closure #2 in TextSelectionGesture.body.getter(uint64_t a1)
{
  return *(_BYTE *)(a1 + 24) != 2;
}

uint64_t specialized closure #1 in Gesture.longPressPhase()@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  if (*(_BYTE *)(result + 72) == 1)
  {
    *a2 = 513;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<SpatialEvent>, MEMORY[0x1E0CE1920], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE17C0]);
    return GesturePhase.withValue<A>(_:)();
  }
  return result;
}

{
  if (*(_BYTE *)(result + 24) == 1)
  {
    *a2 = 513;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, MEMORY[0x1E0CE2078], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE17C0]);
    return GesturePhase.withValue<A>(_:)();
  }
  return result;
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>)
  {
    type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CallbacksGesture<PressableGestureCallbacks<Bool>> and conformance CallbacksGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>, MEMORY[0x1E0CE3150]);
    lazy protocol witness table accessor for type TextSelectionGesture and conformance TextSelectionGesture();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>);
  }
}

unint64_t lazy protocol witness table accessor for type TextSelectionGesture and conformance TextSelectionGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextSelectionGesture and conformance TextSelectionGesture;
  if (!lazy protocol witness table cache variable for type TextSelectionGesture and conformance TextSelectionGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextSelectionGesture, &unk_1E1AD55F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSelectionGesture and conformance TextSelectionGesture);
  }
  return result;
}

uint64_t sub_18755EF88()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SelectableTextChildView.body.getter()
{
  uint64_t v0;

  return closure #1 in SelectableTextChildView.body.getter(*(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_18755EFC8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture<>.callbacks(pressing:pressed:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return closure #1 in Gesture<>.callbacks(pressing:pressed:)(a1, a2, a3 & 1, *(uint64_t (**)(void))(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier;
  if (!lazy protocol witness table cache variable for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextSelectionMenuModifier, &type metadata for TextSelectionMenuModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier);
  }
  return result;
}

void *type metadata accessor for TextSelectionGesture()
{
  return &unk_1E1AD55F0;
}

uint64_t sub_18755F054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[2];

  swift_getAssociatedTypeWitness();
  v0 = type metadata accessor for ModifiedContent();
  type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>();
  v1 = type metadata accessor for ModifiedContent();
  v5[0] = swift_getAssociatedConformanceWitness();
  v5[1] = lazy protocol witness table accessor for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier();
  v2 = MEMORY[0x1E0CE2E70];
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v5);
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>, MEMORY[0x1E0CE41B8]);
  return MEMORY[0x18D75FFDC](v2, v1, v4);
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TextSelectionGesture()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>)
  {
    v0 = MEMORY[0x1E0CE1920];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for MapGesture<SpatialEvent, Bool>, MEMORY[0x1E0CE1920], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE0BC8]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EventListener<SpatialEvent>, v0, MEMORY[0x1E0CE1910], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1EB0]);
    lazy protocol witness table accessor for type MapGesture<SpatialEvent, Bool> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>();
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>);
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<SpatialEvent, Bool> and conformance MapGesture<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MapGesture<SpatialEvent, Bool> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<SpatialEvent, Bool> and conformance MapGesture<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for MapGesture<SpatialEvent, Bool>, MEMORY[0x1E0CE1920], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE0BC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0BE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<SpatialEvent, Bool> and conformance MapGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EventListener<SpatialEvent>, MEMORY[0x1E0CE1920], MEMORY[0x1E0CE1910], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1EB0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1EC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>)
  {
    v0 = MEMORY[0x1E0CE1920];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for DurationGesture<SpatialEvent>, MEMORY[0x1E0CE1920], MEMORY[0x1E0CE2CC8]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EventListener<SpatialEvent>, v0, MEMORY[0x1E0CE1910], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1EB0]);
    lazy protocol witness table accessor for type DurationGesture<SpatialEvent> and conformance DurationGesture<A>();
    lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>();
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>);
  }
}

unint64_t lazy protocol witness table accessor for type DurationGesture<SpatialEvent> and conformance DurationGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DurationGesture<SpatialEvent> and conformance DurationGesture<A>;
  if (!lazy protocol witness table cache variable for type DurationGesture<SpatialEvent> and conformance DurationGesture<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for DurationGesture<SpatialEvent>, MEMORY[0x1E0CE1920], MEMORY[0x1E0CE2CC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2CD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DurationGesture<SpatialEvent> and conformance DurationGesture<A>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
    lazy protocol witness table accessor for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>();
    lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
  }
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture;
  if (!lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2CB0], MEMORY[0x1E0CE2CC0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture);
  }
  return result;
}

void type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(255);
    lazy protocol witness table accessor for type EventFilter<Bool> and conformance EventFilter<A>();
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(255);
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
    type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>();
    type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>();
    v0 = MEMORY[0x1E0CE2E88];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>, MEMORY[0x1E0CE2E88]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>, v0);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, v0);
    swift_getOpaqueTypeConformance2();
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>)
  {
    v0 = MEMORY[0x1E0CE1170];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(255);
    lazy protocol witness table accessor for type External<Bool> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type EventFilter<Bool> and conformance EventFilter<A>, &lazy cache variable for type metadata for EventFilter<Bool>, (uint64_t (*)(_QWORD, uint64_t))v0, MEMORY[0x1E0CE1180]);
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(255);
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(255);
    type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
    v1 = MEMORY[0x1E0CE2E88];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>, MEMORY[0x1E0CE2E88]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, v1);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, v1);
    swift_getOpaqueTypeConformance2();
    v2 = type metadata accessor for ModifierGesture();
    if (!v3)
      atomic_store(v2, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
  }
}

void type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>();
    lazy protocol witness table accessor for type EventFilter<Bool> and conformance EventFilter<A>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>, MEMORY[0x1E0CE2E88]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>);
  }
}

uint64_t outlined init with copy of CoordinateSpaceGesture<CGFloat>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CoordinateSpaceGesture<CGFloat>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18755FA98()
{
  type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>, MEMORY[0x1E0CE2E88]);
  return swift_getOpaqueTypeConformance2();
}

void NavigationLink<>.init<A>(value:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  double v13;
  void (*v14)(double);
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v13 = MEMORY[0x1E0C80A78](a1, a2);
  v14(v13);
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  v15 = type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in NavigationLink<>.init<A>(value:label:), (uint64_t)v17, MEMORY[0x1E0DEDCE8], (uint64_t)&type metadata for NavigationLinkPresentedValue, v16, (uint64_t)&v22);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  NavigationLink.init<>(label:presentedValue:)(a7);
}

uint64_t closure #1 in NavigationLink<>.init<A>(value:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v7 = MEMORY[0x1E0C80A78](a1, a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v9, v7);
  result = AnyNavigationLinkPresentedValue.init<A>(_:)((uint64_t)v9, a2, a3, v11);
  *a4 = result;
  return result;
}

uint64_t partial apply for closure #1 in NavigationLink<>.init<A>(value:label:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in NavigationLink<>.init<A>(value:label:)(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 40), a2);
}

void NavigationLink<>.init<A>(presenting:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a6;
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v19 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v19 - v17, a1, v13, v16);
  NavigationLink<>.init<A>(value:label:)((uint64_t)v18, a2, a3, a4, a5, v20, a7);
}

uint64_t sub_18755FD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void NavigationLink<>.init<A>(_:value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _OWORD v25[8];

  v20 = a7;
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v19 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v19 - v17, a5, v13, v16);
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  NavigationLink<>.init<A>(value:label:)((uint64_t)v18, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), MEMORY[0x1E0CE6CF8], a6, MEMORY[0x1E0CE6C58], v20, (uint64_t)v25);
}

__n128 sub_18755FE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(v4 - 192);
  v6 = *(_BYTE *)(v4 - 191);
  v7 = *(_BYTE *)(v4 - 168);
  v8 = *(_QWORD *)(v4 - 160);
  v9 = *(_BYTE *)(v4 - 152);
  v10 = *(_BYTE *)(v4 - 151);
  v11 = *(_QWORD *)(v4 - 144);
  v12 = *(_BYTE *)(v4 - 136);
  v13 = *(_DWORD *)(v4 - 128);
  v14 = *(_QWORD *)(v4 - 120);
  v15 = *(_BYTE *)(v4 - 112);
  v16 = *(_QWORD *)(v4 - 104);
  result = *(__n128 *)(v4 - 208);
  v18 = *(_OWORD *)(v4 - 184);
  *(__n128 *)v0 = result;
  *(_BYTE *)(v0 + 16) = v5;
  *(_BYTE *)(v0 + 17) = v6;
  *(_OWORD *)(v0 + 24) = v18;
  *(_BYTE *)(v0 + 40) = v7;
  *(_QWORD *)(v0 + 48) = v8;
  *(_BYTE *)(v0 + 56) = v9;
  *(_BYTE *)(v0 + 57) = v10;
  *(_QWORD *)(v0 + 64) = v11;
  *(_BYTE *)(v0 + 72) = v12;
  *(_DWORD *)(v0 + 80) = v13;
  *(_QWORD *)(v0 + 88) = v14;
  *(_BYTE *)(v0 + 96) = v15;
  *(_QWORD *)(v0 + 104) = v16;
  return result;
}

void NavigationLink<>.init<A>(_:presenting:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a7;
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v19 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v19 - v17, a5, v13, v16);
  NavigationLink<>.init<A>(_:value:)(a1, a2, a3, a4, (uint64_t)v18, a6, v20);
}

__n128 sub_18755FFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  v5 = *(_BYTE *)(v4 - 176);
  v6 = *(_BYTE *)(v4 - 175);
  v7 = *(_BYTE *)(v4 - 152);
  v8 = *(_QWORD *)(v4 - 144);
  v9 = *(_BYTE *)(v4 - 136);
  v10 = *(_BYTE *)(v4 - 135);
  v11 = *(_QWORD *)(v4 - 128);
  v12 = *(_BYTE *)(v4 - 120);
  v13 = *(_DWORD *)(v4 - 112);
  v14 = *(_QWORD *)(v4 - 104);
  v15 = *(_BYTE *)(v4 - 96);
  v16 = *(_QWORD *)(v4 - 88);
  result = *(__n128 *)(v4 - 192);
  v18 = *(_OWORD *)(v4 - 168);
  *(__n128 *)v0 = result;
  *(_BYTE *)(v0 + 16) = v5;
  *(_BYTE *)(v0 + 17) = v6;
  *(_OWORD *)(v0 + 24) = v18;
  *(_BYTE *)(v0 + 40) = v7;
  *(_QWORD *)(v0 + 48) = v8;
  *(_BYTE *)(v0 + 56) = v9;
  *(_BYTE *)(v0 + 57) = v10;
  *(_QWORD *)(v0 + 64) = v11;
  *(_BYTE *)(v0 + 72) = v12;
  *(_DWORD *)(v0 + 80) = v13;
  *(_QWORD *)(v0 + 88) = v14;
  *(_BYTE *)(v0 + 96) = v15;
  *(_QWORD *)(v0 + 104) = v16;
  return result;
}

void NavigationLink<>.init<A, B>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[8];

  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = &v18[-v16];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v13 + 16))(&v18[-v16], a2, v12, v15);
  v19 = a3;
  v20 = a4;
  v21 = a5;
  v22 = a6;
  v23 = a1;
  NavigationLink<>.init<A>(value:label:)((uint64_t)v17, (uint64_t)partial apply for closure #1 in NavigationLink<>.init<A, B>(_:value:), MEMORY[0x1E0CE6CF8], a4, MEMORY[0x1E0CE6C58], a6, (uint64_t)v24);
}

__n128 sub_187560120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __n128 result;
  __int128 v20;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3, v1);
  v7 = *(_BYTE *)(v6 - 192);
  v8 = *(_BYTE *)(v6 - 191);
  v9 = *(_BYTE *)(v6 - 168);
  v10 = *(_QWORD *)(v6 - 160);
  v11 = *(_BYTE *)(v6 - 152);
  v12 = *(_BYTE *)(v6 - 151);
  v13 = *(_QWORD *)(v6 - 144);
  v14 = *(_BYTE *)(v6 - 136);
  v15 = *(_DWORD *)(v6 - 128);
  v16 = *(_QWORD *)(v6 - 120);
  v17 = *(_BYTE *)(v6 - 112);
  v18 = *(_QWORD *)(v6 - 104);
  result = *(__n128 *)(v6 - 208);
  v20 = *(_OWORD *)(v6 - 184);
  *(__n128 *)v0 = result;
  *(_BYTE *)(v0 + 16) = v7;
  *(_BYTE *)(v0 + 17) = v8;
  *(_OWORD *)(v0 + 24) = v20;
  *(_BYTE *)(v0 + 40) = v9;
  *(_QWORD *)(v0 + 48) = v10;
  *(_BYTE *)(v0 + 56) = v11;
  *(_BYTE *)(v0 + 57) = v12;
  *(_QWORD *)(v0 + 64) = v13;
  *(_BYTE *)(v0 + 72) = v14;
  *(_DWORD *)(v0 + 80) = v15;
  *(_QWORD *)(v0 + 88) = v16;
  *(_BYTE *)(v0 + 96) = v17;
  *(_QWORD *)(v0 + 104) = v18;
  return result;
}

uint64_t partial apply for closure #1 in NavigationLink<>.init<A, B>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TextField<>.init<A, B>(_:value:format:prompt:)(*(_QWORD *)(v1 + 48), a1);
}

{
  uint64_t v1;

  return closure #1 in TextField<>.init<A, B>(_:value:format:prompt:)(*(_QWORD *)(v1 + 64), a1);
}

void NavigationLink<>.init<A, B>(_:presenting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a5;
  v22 = a6;
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v21 - v13;
  v15 = *(_QWORD *)(a3 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v20, a1, a3, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
  NavigationLink<>.init<A, B>(_:value:)((uint64_t)v20, (uint64_t)v14, a3, a4, v21, v22);
}

__n128 sub_1875602C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __n128 result;
  __int128 v21;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v1);
  v8 = *(_BYTE *)(v7 - 176);
  v9 = *(_BYTE *)(v7 - 175);
  v10 = *(_BYTE *)(v7 - 152);
  v11 = *(_QWORD *)(v7 - 144);
  v12 = *(_BYTE *)(v7 - 136);
  v13 = *(_BYTE *)(v7 - 135);
  v14 = *(_QWORD *)(v7 - 128);
  v15 = *(_BYTE *)(v7 - 120);
  v16 = *(_DWORD *)(v7 - 112);
  v17 = *(_QWORD *)(v7 - 104);
  v18 = *(_BYTE *)(v7 - 96);
  v19 = *(_QWORD *)(v7 - 88);
  result = *(__n128 *)(v7 - 192);
  v21 = *(_OWORD *)(v7 - 168);
  *(__n128 *)v0 = result;
  *(_BYTE *)(v0 + 16) = v8;
  *(_BYTE *)(v0 + 17) = v9;
  *(_OWORD *)(v0 + 24) = v21;
  *(_BYTE *)(v0 + 40) = v10;
  *(_QWORD *)(v0 + 48) = v11;
  *(_BYTE *)(v0 + 56) = v12;
  *(_BYTE *)(v0 + 57) = v13;
  *(_QWORD *)(v0 + 64) = v14;
  *(_BYTE *)(v0 + 72) = v15;
  *(_DWORD *)(v0 + 80) = v16;
  *(_QWORD *)(v0 + 88) = v17;
  *(_BYTE *)(v0 + 96) = v18;
  *(_QWORD *)(v0 + 104) = v19;
  return result;
}

void NavigationLink<>.init<A>(value:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  double v16;
  void (*v17)(double);
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v16 = MEMORY[0x1E0C80A78](a1, a2);
  v17(v16);
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a7;
  v26 = a9;
  v18 = type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in NavigationLink<>.init<A>(value:label:), (uint64_t)v20, MEMORY[0x1E0DEDCE8], (uint64_t)&type metadata for NavigationLinkPresentedValue, v19, (uint64_t)&v27);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
  NavigationLink.init<>(label:presentedValue:)(a8);
}

void closure #1 in NavigationLink<>.init<A>(value:label:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  AnyNavigationLinkPresentedValue.init<A>(_:)();
}

uint64_t sub_187560510(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void partial apply for closure #1 in NavigationLink<>.init<A>(value:label:)(uint64_t a1)
{
  closure #1 in NavigationLink<>.init<A>(value:label:)(a1);
}

void NavigationLink<>.init<A>(presenting:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a6;
  v23 = a7;
  v21 = a5;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v20 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v20 - v18, a1, v14, v17);
  NavigationLink<>.init<A>(value:label:)((uint64_t)v19, a2, a3, a4, v21, v22, v23, a8, a9);
}

uint64_t sub_187560610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void NavigationLink<>.init<A>(_:value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _OWORD v29[8];

  v24 = a8;
  v23 = a7;
  v22 = a9;
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v21 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v21 - v19, a5, v15, v18);
  v25 = a1;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  NavigationLink<>.init<A>(value:label:)((uint64_t)v20, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), MEMORY[0x1E0CE6CF8], a6, MEMORY[0x1E0CE6C58], v23, v24, (uint64_t)v29, v22);
}

__n128 sub_18756073C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(v4 - 192);
  v6 = *(_BYTE *)(v4 - 191);
  v7 = *(_BYTE *)(v4 - 168);
  v8 = *(_QWORD *)(v4 - 160);
  v9 = *(_BYTE *)(v4 - 152);
  v10 = *(_BYTE *)(v4 - 151);
  v11 = *(_QWORD *)(v4 - 144);
  v12 = *(_BYTE *)(v4 - 136);
  v13 = *(_DWORD *)(v4 - 128);
  v14 = *(_QWORD *)(v4 - 120);
  v15 = *(_BYTE *)(v4 - 112);
  v16 = *(_QWORD *)(v4 - 104);
  result = *(__n128 *)(v4 - 208);
  v18 = *(_OWORD *)(v4 - 184);
  *(__n128 *)v0 = result;
  *(_BYTE *)(v0 + 16) = v5;
  *(_BYTE *)(v0 + 17) = v6;
  *(_OWORD *)(v0 + 24) = v18;
  *(_BYTE *)(v0 + 40) = v7;
  *(_QWORD *)(v0 + 48) = v8;
  *(_BYTE *)(v0 + 56) = v9;
  *(_BYTE *)(v0 + 57) = v10;
  *(_QWORD *)(v0 + 64) = v11;
  *(_BYTE *)(v0 + 72) = v12;
  *(_DWORD *)(v0 + 80) = v13;
  *(_QWORD *)(v0 + 88) = v14;
  *(_BYTE *)(v0 + 96) = v15;
  *(_QWORD *)(v0 + 104) = v16;
  return result;
}

void NavigationLink<>.init<A>(_:presenting:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a7;
  v23 = a8;
  v21 = a4;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v20 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v20 - v18, a5, v14, v17);
  NavigationLink<>.init<A>(_:value:)(a1, a2, a3, v21, (uint64_t)v19, a6, v22, v23, a9);
}

__n128 sub_1875608A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_BYTE *)(v4 - 176);
  v6 = *(_BYTE *)(v4 - 175);
  v7 = *(_BYTE *)(v4 - 152);
  v8 = *(_QWORD *)(v4 - 144);
  v9 = *(_BYTE *)(v4 - 136);
  v10 = *(_BYTE *)(v4 - 135);
  v11 = *(_QWORD *)(v4 - 128);
  v12 = *(_BYTE *)(v4 - 120);
  v13 = *(_DWORD *)(v4 - 112);
  v14 = *(_QWORD *)(v4 - 104);
  v15 = *(_BYTE *)(v4 - 96);
  v16 = *(_QWORD *)(v4 - 88);
  result = *(__n128 *)(v4 - 192);
  v18 = *(_OWORD *)(v4 - 168);
  *(__n128 *)v0 = result;
  *(_BYTE *)(v0 + 16) = v5;
  *(_BYTE *)(v0 + 17) = v6;
  *(_OWORD *)(v0 + 24) = v18;
  *(_BYTE *)(v0 + 40) = v7;
  *(_QWORD *)(v0 + 48) = v8;
  *(_BYTE *)(v0 + 56) = v9;
  *(_BYTE *)(v0 + 57) = v10;
  *(_QWORD *)(v0 + 64) = v11;
  *(_BYTE *)(v0 + 72) = v12;
  *(_DWORD *)(v0 + 80) = v13;
  *(_QWORD *)(v0 + 88) = v14;
  *(_BYTE *)(v0 + 96) = v15;
  *(_QWORD *)(v0 + 104) = v16;
  return result;
}

void NavigationLink<>.init<A, B>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[8];

  v21 = a7;
  v20 = a5;
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v20 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v20 - v18, a2, v14, v17);
  v22 = a3;
  v23 = a4;
  v24 = v20;
  v25 = a6;
  v26 = v21;
  v27 = a8;
  v28 = a1;
  NavigationLink<>.init<A>(value:label:)((uint64_t)v19, (uint64_t)partial apply for closure #1 in NavigationLink<>.init<A, B>(_:value:), MEMORY[0x1E0CE6CF8], a4, MEMORY[0x1E0CE6C58], a6, v21, (uint64_t)v29, a8);
}

__n128 sub_187560A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __n128 result;
  __int128 v20;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v2, v1);
  v7 = *(_BYTE *)(v6 - 192);
  v8 = *(_BYTE *)(v6 - 191);
  v9 = *(_BYTE *)(v6 - 168);
  v10 = *(_QWORD *)(v6 - 160);
  v11 = *(_BYTE *)(v6 - 152);
  v12 = *(_BYTE *)(v6 - 151);
  v13 = *(_QWORD *)(v6 - 144);
  v14 = *(_BYTE *)(v6 - 136);
  v15 = *(_DWORD *)(v6 - 128);
  v16 = *(_QWORD *)(v6 - 120);
  v17 = *(_BYTE *)(v6 - 112);
  v18 = *(_QWORD *)(v6 - 104);
  result = *(__n128 *)(v6 - 208);
  v20 = *(_OWORD *)(v6 - 184);
  *(__n128 *)v0 = result;
  *(_BYTE *)(v0 + 16) = v7;
  *(_BYTE *)(v0 + 17) = v8;
  *(_OWORD *)(v0 + 24) = v20;
  *(_BYTE *)(v0 + 40) = v9;
  *(_QWORD *)(v0 + 48) = v10;
  *(_BYTE *)(v0 + 56) = v11;
  *(_BYTE *)(v0 + 57) = v12;
  *(_QWORD *)(v0 + 64) = v13;
  *(_BYTE *)(v0 + 72) = v14;
  *(_DWORD *)(v0 + 80) = v15;
  *(_QWORD *)(v0 + 88) = v16;
  *(_BYTE *)(v0 + 96) = v17;
  *(_QWORD *)(v0 + 104) = v18;
  return result;
}

void NavigationLink<>.init<A, B>(_:presenting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a7;
  v26 = a8;
  v23 = a5;
  v24 = a6;
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v23 - v15;
  v17 = *(_QWORD *)(a3 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v23 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v22, a1, a3, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, v12);
  NavigationLink<>.init<A, B>(_:value:)((uint64_t)v22, (uint64_t)v16, a3, a4, v23, v24, v25, v26);
}

__n128 sub_187560BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __n128 result;
  __int128 v21;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v1);
  v8 = *(_BYTE *)(v7 - 176);
  v9 = *(_BYTE *)(v7 - 175);
  v10 = *(_BYTE *)(v7 - 152);
  v11 = *(_QWORD *)(v7 - 144);
  v12 = *(_BYTE *)(v7 - 136);
  v13 = *(_BYTE *)(v7 - 135);
  v14 = *(_QWORD *)(v7 - 128);
  v15 = *(_BYTE *)(v7 - 120);
  v16 = *(_DWORD *)(v7 - 112);
  v17 = *(_QWORD *)(v7 - 104);
  v18 = *(_BYTE *)(v7 - 96);
  v19 = *(_QWORD *)(v7 - 88);
  result = *(__n128 *)(v7 - 192);
  v21 = *(_OWORD *)(v7 - 168);
  *(__n128 *)v0 = result;
  *(_BYTE *)(v0 + 16) = v8;
  *(_BYTE *)(v0 + 17) = v9;
  *(_OWORD *)(v0 + 24) = v21;
  *(_BYTE *)(v0 + 40) = v10;
  *(_QWORD *)(v0 + 48) = v11;
  *(_BYTE *)(v0 + 56) = v12;
  *(_BYTE *)(v0 + 57) = v13;
  *(_QWORD *)(v0 + 64) = v14;
  *(_BYTE *)(v0 + 72) = v15;
  *(_DWORD *)(v0 + 80) = v16;
  *(_QWORD *)(v0 + 88) = v17;
  *(_BYTE *)(v0 + 96) = v18;
  *(_QWORD *)(v0 + 104) = v19;
  return result;
}

_QWORD *__swift_initWithCopy_strong(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t __swift_destroy_strong()
{
  return swift_release();
}

_QWORD *__swift_assignWithCopy_strong(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_assignWithTake_strong(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationLinkPresentedValue()
{
  return &type metadata for NavigationLinkPresentedValue;
}

uint64_t _DrawingGroupEffect.rendersAsynchronously.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 12) >> 2) & 1;
}

uint64_t _DrawingGroupEffect.rendersAsynchronously.setter(uint64_t result)
{
  uint64_t v1;
  int v2;

  if ((result & 1) != 0)
    v2 = 4;
  else
    v2 = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFB | v2;
  return result;
}

_BYTE *(*_DrawingGroupEffect.rendersAsynchronously.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (*(_BYTE *)(v1 + 12) & 4) != 0;
  return _DrawingGroupEffect.rendersAsynchronously.modify;
}

_BYTE *_DrawingGroupEffect.rendersAsynchronously.modify(_BYTE *result)
{
  int v1;

  if (result[8])
    v1 = 4;
  else
    v1 = 0;
  *(_DWORD *)(*(_QWORD *)result + 12) = *(_DWORD *)(*(_QWORD *)result + 12) & 0xFFFFFFFB | v1;
  return result;
}

uint64_t sub_187560DC8@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_BYTE *)(result + 12) & 4) != 0;
  return result;
}

_BYTE *sub_187560DD8(_BYTE *result, uint64_t a2)
{
  int v2;

  if (*result)
    v2 = 4;
  else
    v2 = 0;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFB | v2;
  return result;
}

void specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  char *v5[2];

  v2 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = (char *)v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v3;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6[2];

  type metadata accessor for (ToolbarStorage.Entry, Int)();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  v5 = v4[2];
  v6[0] = (uint64_t)v4 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v4;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v4);
  *a1 = v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF08PlatformfB8Protocol_So8NSObjectCXcs5NeverOTg503_s7d4UI17fg58C41_accessibilityUserDefinedLinkedUIElementsSayypGSgvgAA08h3C15bi4_So8J62CXcACcfu_32df5be316035e77621aaf8da9181039cbAcaG_AIXcTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  if (a1 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      v4 = 0;
      while (1)
      {
        if (v4 == v2)
        {
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        v5 = (a1 & 0xC000000000000001) != 0
           ? (char *)MEMORY[0x18D75E3BC](v4, a1)
           : (char *)*(id *)(a1 + 32 + 8 * v4);
        v6 = v5;
        v7 = &v5[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        v8 = *(_QWORD *)v7;
        v9 = *(_QWORD *)(*(_QWORD *)v7 + 16);
        if (v9)
          break;
        swift_bridgeObjectRetain();
LABEL_7:
        swift_bridgeObjectRelease();
LABEL_8:
        ++v4;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v4 == v2)
          return v12;
      }
      swift_bridgeObjectRetain();
      v10 = v8 + 40 * v9;
      while (1)
      {
        if (v9 > *(_QWORD *)(v8 + 16))
        {
          __break(1u);
          goto LABEL_25;
        }
        v11 = (void *)AccessibilityAttachment.platformElement.getter();

        if (v11)
          break;
        v10 -= 40;
        if (!--v9)
          goto LABEL_7;
      }
      if (v9 > *(_QWORD *)(v8 + 16))
        goto LABEL_26;
      result = AccessibilityAttachment.platformElement.getter();
      if (result)
      {

        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Bool)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  return v1 & 1;
}

uint64_t specialized AccessibilityCollectionViewTableDataSource.visitNodes<A>(applying:at:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v15;
  Class isa;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t result;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v39)(void);
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t *v60;
  void *v61;
  _QWORD v62[4];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  unsigned __int8 v70;

  v60 = a1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v48 - v7;
  v9 = type metadata accessor for IndexPath();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v2, (uint64_t)&v67);
  if (!*((_QWORD *)&v68 + 1))
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v67, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    return outlined destroy of TableRowList?((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  }
  outlined init with copy of TableDataSourceAdaptor((uint64_t)&v67, (uint64_t)&v63);
  outlined destroy of TableRowList?((uint64_t)&v67, (uint64_t)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t)lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)type metadata accessor for ShadowListDataSource, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  if (AccessibilityCollectionViewTableDataSource.hasGlobalHeader.getter() && __OFSUB__(a2--, 1))
  {
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  TableSections.firstIndexPath(from:)(a2, (uint64_t)v8);
  outlined destroy of TableDataSourceAdaptor((uint64_t)&v63);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of TableRowList?((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
  v15 = *(void **)(v2 + 192);
  if (!v15)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v15, sel_cellForItemAtIndexPath_, isa);

  if (!v17)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  type metadata accessor for TableCollectionViewCell();
  v18 = swift_dynamicCastClass();
  if (!v18)
  {

    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  v19 = *(void **)(v18 + direct field offset for ListCollectionViewCellBase.host);
  v20 = v19;

  if (!v19)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  ViewRendererHost.updateViewGraph<A>(body:)();
  v3 = (unint64_t)static AccessibilityCore.queryFilter(elements:options:)(v67, 4);
  result = swift_bridgeObjectRelease();
  v50 = v20;
  if (!(v3 >> 62))
  {
    v22 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v22)
      goto LABEL_16;
    goto LABEL_11;
  }
LABEL_56:
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v22)
    goto LABEL_16;
LABEL_11:
  v53 = v3 & 0xC000000000000001;
  v54 = v22;
  v55 = v3;
  if ((v3 & 0xC000000000000001) != 0)
  {
    v23 = (id)MEMORY[0x18D75E3BC](0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v23 = *(id *)(v3 + 32);
  }
  v24 = v23;
  v25 = v50;
  v26 = AccessibilityNode.CellVisitor.visit(node:)(v23);

  if (!v26)
  {
    swift_bridgeObjectRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  v3 = v55;
  if (v54 == 1)
  {
LABEL_16:
    swift_bridgeObjectRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  v49 = v55 & 0xFFFFFFFFFFFFFF8;
  v27 = 5;
  v52 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    v28 = v27 - 4;
    if (v53)
    {
      v29 = (id)MEMORY[0x18D75E3BC](v27 - 4, v3);
      v30 = v27 - 3;
      if (__OFADD__(v28, 1))
        goto LABEL_54;
    }
    else
    {
      if (v28 >= *(_QWORD *)(v49 + 16))
        goto LABEL_55;
      v29 = *(id *)(v3 + 8 * v27);
      v30 = v27 - 3;
      if (__OFADD__(v28, 1))
        goto LABEL_54;
    }
    v58 = v30;
    v59 = v29;
    v32 = v60[1];
    v31 = v60[2];
    v56 = *v60;
    v57 = v32;
    v51 = v31;
    AccessibilityNode.attachment.getter((uint64_t *)&v67);
    v33 = v67;

    if (*(_QWORD *)(v33 + 16)
      && (v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey),
          (v35 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v33 + 56) + 40 * v34, (uint64_t)&v63);
      v37 = *((_QWORD *)&v64 + 1);
      v36 = v65;
      __swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
      v38 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v36 + 8);
      swift_bridgeObjectRetain();
      v38(v62, v37, v36);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
    }
    else
    {
      memset(v62, 0, sizeof(v62));
      swift_bridgeObjectRetain();
    }
    v39 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v52, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(_QWORD, uint64_t))v39);
    if (swift_dynamicCast())
    {
      outlined init with take of Image.Resolved?((uint64_t)&v63, (uint64_t)&v67, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    }
    else
    {
      v65 = 0;
      v63 = 0u;
      v64 = 0u;
      v66 = -2;
      v67 = 0u;
      v68 = 0u;
      v69 = 0;
      v70 = -1;
      outlined destroy of TableRowList?((uint64_t)&v63, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext??, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(_QWORD))type metadata accessor for NavigationAuthority??);
    }
    swift_bridgeObjectRelease_n();
    v40 = v59;
    if (v70 == 255)
      goto LABEL_24;
    outlined init with copy of TableRowList?((uint64_t)&v67, (uint64_t)&v63, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (v66 == 2)
      break;
    if (v66 != 1)
    {
      outlined destroy of AccessibilityTableContext((uint64_t)&v63);
LABEL_24:
      outlined destroy of TableRowList?((uint64_t)&v67, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      goto LABEL_25;
    }
    if ((_QWORD)v63 != v56)
      goto LABEL_24;
    v41 = *((_QWORD *)&v63 + 1);
    v42 = v57;
    outlined destroy of TableRowList?((uint64_t)&v67, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (v41 == v42)
      goto LABEL_48;
LABEL_25:

    ++v27;
    v3 = v55;
    if (v58 == v54)
      goto LABEL_16;
  }
  if (v57 < 0 || v57 >= *((uint64_t *)&v63 + 1))
    goto LABEL_24;
  v43 = v63;
  outlined destroy of TableRowList?((uint64_t)&v67, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v43 != v56)
    goto LABEL_25;
LABEL_48:
  AccessibilityNode.platformElement.getter();
  if (!v44)
    v44 = v40;
  v45 = v44;
  v46 = v50;
  v61 = &unk_1EDF60F58;
  v47 = swift_dynamicCastObjCProtocolConditional();

  if (!v47)
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  v60[2] = v47;
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void specialized AccessibilityCollectionViewTableDataSource.visitHeaderNodes<A>(applying:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  char v15;
  id v16;
  int v17;
  id v18;
  id v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t updated;
  uint64_t v30;
  id v31;
  Class isa;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  unint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ObjectType;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  BOOL v47;
  void (*v48)(char *, char *, uint64_t);
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  id v55;
  void (*v56)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  void (*v59)(_QWORD, _QWORD, _QWORD, _QWORD);
  int8x16_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  void *v69;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(void);
  id v85;
  char *v86;
  int8x16_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  char *v100;
  unint64_t v101;
  _QWORD *v102;
  id v103;
  id v104;
  id v105;
  unint64_t v106;
  void (*v107)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v108;
  char *v109;
  void (*v110)(char *, char *, uint64_t);
  char *v111;
  unint64_t v112;
  void *v113;
  _QWORD v114[5];
  char v115;
  unsigned __int8 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  void *v129;
  __int128 v130;
  __int128 v131;
  _OWORD v132[11];
  __int128 v133;

  v4 = type metadata accessor for IndexPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v97 - v12;
  v14 = *(void **)(v1 + 192);
  if (!v14)
    return;
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v1, (uint64_t)&v117);
  if (!*((_QWORD *)&v118 + 1))
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v117, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>?);
    return;
  }
  v132[8] = v125;
  v132[9] = v126;
  v132[10] = v127;
  v133 = v128;
  v132[4] = v121;
  v132[5] = v122;
  v132[6] = v123;
  v132[7] = v124;
  v132[0] = v117;
  v132[1] = v118;
  v132[2] = v119;
  v132[3] = v120;
  outlined init with copy of TableDataSourceAdaptor((uint64_t)v132, (uint64_t)&v117);
  v15 = BYTE8(v127);
  outlined init with copy of TableDataSourceAdaptor((uint64_t)&v117, (uint64_t)v114);
  if ((v15 & 1) != 0)
  {
    v16 = v14;
    outlined destroy of TableDataSourceAdaptor((uint64_t)v114);
    outlined destroy of TableDataSourceAdaptor((uint64_t)&v117);
LABEL_7:
    outlined destroy of TableRowList?((uint64_t)v132, (uint64_t)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t)lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)type metadata accessor for ShadowListDataSource, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);

    return;
  }
  v17 = v116;
  v18 = v14;
  outlined destroy of TableDataSourceAdaptor((uint64_t)v114);
  outlined destroy of TableDataSourceAdaptor((uint64_t)&v117);
  if (v17 == 2)
    goto LABEL_7;
  if (TableDataSourceAdaptor.headerDisplayMode.getter() != 1)
    goto LABEL_30;
  v104 = (id)*MEMORY[0x1E0DC48A8];
  v19 = objc_msgSend(v18, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *(_QWORD *)&v117 = v20;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((_QWORD **)&v117);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v117 + 16);
  v103 = (id)v117;
  if (!v2)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, 1, 1, v4);
    goto LABEL_29;
  }
  v105 = v18;
  v106 = (unint64_t)v13;
  v102 = a1;
  v21 = (char *)(v117 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
  v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v109 = *(char **)(v5 + 72);
  v110 = v22;
  v107 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v4;
  v22(v13, v21, v4);
  while (1)
  {
    v108 = *(char **)(v5 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v108)(v13, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
    {
      swift_release();
      a1 = v102;
      v18 = v105;
      goto LABEL_30;
    }
    v112 = (unint64_t)v21;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v13, v4);
    v24 = IndexPath.section.getter();
    outlined init with copy of TableRowList?((uint64_t)v132, (uint64_t)v114, (uint64_t)&lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t)lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)type metadata accessor for ShadowListUpdateRecorder, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    specialized ShadowSectionCollection.init(_:)(v114, (uint64_t)&v117);
    v111 = (char *)(v24 & ~(v24 >> 63));
    v25 = outlined destroy of TableRowList?((uint64_t)&v117, (uint64_t)&lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t)lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)type metadata accessor for ShadowSectionCollection, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    v27 = *((_QWORD *)&v133 + 1);
    v28 = v133;
    if (*(_QWORD *)(*((_QWORD *)&v133 + 1) + 16) || *(_QWORD *)(v133 + 16))
    {
      MEMORY[0x1E0C80A78](v25, v26);
      *(&v97 - 2) = (uint64_t)&type metadata for TableDataSourceAdaptor;
      *(&v97 - 1) = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_n(v27, v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = (char *)v106;
      swift_release_n();
      v30 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, (uint64_t)v111);
      v4 = (uint64_t)v107;
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = (uint64_t)v111;
    }
    if (!TableDataSourceAdaptor.hasHeader(forSectionAt:)(v30))
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v23 = v112;
      goto LABEL_12;
    }
    v31 = v104;
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v18 = objc_msgSend(v105, sel_supplementaryViewForElementKind_atIndexPath_, v31, isa);

    v23 = v112;
    if (!v18)
      goto LABEL_25;
    type metadata accessor for TableCollectionViewCell();
    v33 = swift_dynamicCastClass();
    if (!v33)
    {

LABEL_25:
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      goto LABEL_12;
    }
    v34 = *(void **)(v33 + direct field offset for ListCollectionViewCellBase.host);
    if (v34)
    {
      v100 = v8;
      v67 = v34;
      swift_release();
      type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
      v99 = v67;
      ViewRendererHost.updateViewGraph<A>(body:)();
      v2 = (unint64_t)static AccessibilityCore.queryFilter(elements:options:)(v117, 4);
      swift_bridgeObjectRelease();
      if (v2 >> 62)
        goto LABEL_134;
      a1 = v102;
      v109 = *(char **)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v109)
        goto LABEL_84;
      goto LABEL_89;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);

LABEL_12:
    v21 = &v109[v23];
    if (!--v2)
      break;
    v110(v13, v21, v4);
  }
  a1 = v102;
  v18 = v105;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v108)(v13, 1, 1, v4);
LABEL_29:
  swift_release();
LABEL_30:
  while (2)
  {
    v35 = (void *)MEMORY[0x18D75CC88](0xD000000000000011, 0x8000000187BE36D0);
    v36 = objc_msgSend(v18, sel_visibleSupplementaryViewsOfKind_, v35);

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionReusableView);
    v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v37 >> 62)
    {
      swift_bridgeObjectRetain();
      v93 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v93)
      {
LABEL_121:

        swift_bridgeObjectRelease();
        goto LABEL_122;
      }
    }
    else if (!*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_121;
    }
    if ((v37 & 0xC000000000000001) != 0)
    {
      v38 = (void (*)(char *, char *, uint64_t))MEMORY[0x18D75E3BC](0, v37);
LABEL_35:
      v110 = v38;
      swift_bridgeObjectRelease();
      type metadata accessor for TableGlobalHeader();
      v39 = (void *)swift_dynamicCastClass();
      if (!v39)
        goto LABEL_52;
      v40 = objc_msgSend(v39, sel_contentView);
      swift_getObjectType();
      v41 = swift_conformsToProtocol2();
      if (v41)
        v42 = v41;
      else
        v42 = 0;
      v103 = v40;
      if (!v41)
        v40 = 0;
      if (!v40)
      {

LABEL_52:
        v48 = v110;
LABEL_53:

        goto LABEL_122;
      }
      ObjectType = swift_getObjectType();
      v44 = ViewRendererHost.accessibilityNodes.getter(ObjectType, v42);
      v45 = (unint64_t)static AccessibilityCore.queryFilter(elements:options:)(v44, 4);
      swift_bridgeObjectRelease();
      v112 = v45;
      if (v45 >> 62)
        goto LABEL_129;
      v108 = *(char **)((v112 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v108)
        goto LABEL_50;
    }
    else
    {
      if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v38 = (void (*)(char *, char *, uint64_t))*(id *)(v37 + 32);
        goto LABEL_35;
      }
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      swift_bridgeObjectRetain();
      v94 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v108 = (char *)v94;
      if (!v94)
        goto LABEL_50;
    }
    v106 = v112 & 0xC000000000000001;
    if ((v112 & 0xC000000000000001) != 0)
    {
      v95 = (id)MEMORY[0x18D75E3BC](0, v112);
      goto LABEL_48;
    }
    if (!*(_QWORD *)((v112 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      swift_bridgeObjectRetain();
      v96 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      a1 = v102;
      v109 = (char *)v96;
      if (!v96)
        goto LABEL_89;
LABEL_84:
      v106 = v2 & 0xC000000000000001;
      if ((v2 & 0xC000000000000001) != 0)
      {
        v68 = (id)MEMORY[0x18D75E3BC](0, v2);
      }
      else
      {
        if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          swift_release();
          __break(1u);
          return;
        }
        v68 = *(id *)(v2 + 32);
      }
      v69 = v68;
      v70 = AccessibilityNode.HeaderVisitor.visit(node:)(v68);

      if (!v70)
      {
        swift_bridgeObjectRelease();

LABEL_91:
        (*(void (**)(char *, uint64_t))(v5 + 8))(v100, v4);
        goto LABEL_122;
      }
      if (v109 == (char *)1)
      {
LABEL_89:
        swift_bridgeObjectRelease();

        (*(void (**)(char *, uint64_t))(v5 + 8))(v100, v4);
        v18 = v105;
        continue;
      }
      v98 = v2 & 0xFFFFFFFFFFFFFF8;
      v71 = 5;
      v103 = (id)(MEMORY[0x1E0DEE9B8] + 8);
      v104 = (id)v2;
      v97 = v5;
      while (1)
      {
        v72 = v71 - 4;
        if (v106)
        {
          v73 = (id)MEMORY[0x18D75E3BC](v71 - 4, v2);
        }
        else
        {
          if (v72 >= *(_QWORD *)(v98 + 16))
            goto LABEL_133;
          v73 = *(id *)(v2 + 8 * v71);
        }
        v111 = (char *)(v71 - 3);
        if (__OFADD__(v72, 1))
          goto LABEL_132;
        v108 = (char *)*a1;
        v101 = a1[1];
        v112 = (unint64_t)v73;
        AccessibilityNode.attachment.getter((uint64_t *)&v117);
        v74 = v117;

        v75 = *(_QWORD *)(v74 + 16);
        v110 = (void (*)(char *, char *, uint64_t))v71;
        if (v75
          && (v76 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey),
              (v77 & 1) != 0))
        {
          outlined init with copy of TableColumnList(*(_QWORD *)(v74 + 56) + 40 * v76, (uint64_t)v114);
          v78 = v4;
          v80 = v114[3];
          v79 = v114[4];
          __swift_project_boxed_opaque_existential_1(v114, v114[3]);
          v81 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v79 + 8);
          swift_bridgeObjectRetain();
          v82 = v80;
          v4 = v78;
          v5 = v97;
          v83 = v79;
          a1 = v102;
          v81(&v130, v82, v83);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
        }
        else
        {
          v130 = 0u;
          v131 = 0u;
          swift_bridgeObjectRetain();
        }
        v84 = MEMORY[0x1E0DEB940];
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, (uint64_t)v103, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(_QWORD, uint64_t))v84);
        if (swift_dynamicCast())
        {
          outlined init with take of Image.Resolved?((uint64_t)v114, (uint64_t)&v117, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
        }
        else
        {
          memset(v114, 0, sizeof(v114));
          v115 = -2;
          v117 = 0u;
          v118 = 0u;
          *(_QWORD *)&v119 = 0;
          BYTE8(v119) = -1;
          outlined destroy of TableRowList?((uint64_t)v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext??, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(_QWORD))type metadata accessor for NavigationAuthority??);
        }
        swift_bridgeObjectRelease_n();
        v85 = (id)v112;
        v2 = (unint64_t)v104;
        if (BYTE8(v119) == 255)
          goto LABEL_94;
        outlined init with copy of TableRowList?((uint64_t)&v117, (uint64_t)v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        v86 = (char *)v114[0];
        if (v115 == 3)
        {
          outlined destroy of TableRowList?((uint64_t)&v117, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
          if (v86 == v108)
          {
LABEL_115:
            AccessibilityNode.platformElement.getter();
            if (!v88)
              v88 = v85;
            a1 = v88;
            v113 = &unk_1EDF60F58;
            v89 = swift_dynamicCastObjCProtocolConditional();
            if (v89)
            {
              v90 = v89;
              type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
              v91 = swift_allocObject();
              *(_OWORD *)(v91 + 16) = xmmword_187BFF9C0;
              *(_QWORD *)(v91 + 32) = v90;
              *(_QWORD *)&v117 = v91;
              specialized Array._endMutation()();
              v92 = v117;

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v102[1] = v92;
            }
            else
            {
LABEL_125:
              swift_bridgeObjectRelease();

            }
            goto LABEL_91;
          }
        }
        else
        {
          if (v115 != 4
            || (v87 = vorrq_s8(*(int8x16_t *)&v114[1], *(int8x16_t *)&v114[3]),
                *(_QWORD *)&vorr_s8(*(int8x8_t *)v87.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)) | v114[0]))
          {
            outlined destroy of AccessibilityTableContext((uint64_t)v114);
LABEL_94:
            outlined destroy of TableRowList?((uint64_t)&v117, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
            goto LABEL_95;
          }
          outlined destroy of TableRowList?((uint64_t)&v117, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
          if (!v108)
            goto LABEL_115;
        }
LABEL_95:

        v71 = (uint64_t)v110 + 1;
        if (v111 == v109)
          goto LABEL_89;
      }
    }
    break;
  }
  v95 = *(id *)(v112 + 32);
LABEL_48:
  v46 = v95;
  v47 = AccessibilityNode.HeaderVisitor.visit(node:)(v95);

  if (!v47)
  {
    swift_bridgeObjectRelease();

    v48 = (void (*)(char *, char *, uint64_t))v103;
    goto LABEL_53;
  }
  if (v108 == (char *)1)
  {
LABEL_50:

    swift_bridgeObjectRelease();
    goto LABEL_122;
  }
  v101 = v112 & 0xFFFFFFFFFFFFFF8;
  v4 = 5;
  v105 = (id)(MEMORY[0x1E0DEE9B8] + 8);
  v102 = a1;
  while (2)
  {
    v49 = v4 - 4;
    if (v106)
    {
      v50 = (char *)MEMORY[0x18D75E3BC](v4 - 4, v112);
    }
    else
    {
      if (v49 >= *(_QWORD *)(v101 + 16))
        goto LABEL_128;
      v50 = (char *)*(id *)(v112 + 8 * v4);
    }
    v109 = (char *)(v4 - 3);
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_125;
    }
    v107 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))*a1;
    v104 = (id)a1[1];
    v111 = v50;
    AccessibilityNode.attachment.getter((uint64_t *)&v117);
    v51 = v117;

    if (*(_QWORD *)(v51 + 16)
      && (v52 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey),
          (v53 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v51 + 56) + 40 * v52, (uint64_t)v114);
      v54 = v114[3];
      v5 = v114[4];
      __swift_project_boxed_opaque_existential_1(v114, v114[3]);
      v55 = v18;
      v56 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 8);
      swift_bridgeObjectRetain();
      v57 = v54;
      a1 = v102;
      v56(&v130, v57, v5);
      v18 = v55;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
    }
    else
    {
      v130 = 0u;
      v131 = 0u;
      swift_bridgeObjectRetain();
    }
    v2 = (unint64_t)MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, (uint64_t)v105, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(_QWORD, uint64_t))v2);
    if (swift_dynamicCast())
    {
      outlined init with take of Image.Resolved?((uint64_t)v114, (uint64_t)&v117, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    }
    else
    {
      memset(v114, 0, sizeof(v114));
      v115 = -2;
      v117 = 0u;
      v118 = 0u;
      *(_QWORD *)&v119 = 0;
      BYTE8(v119) = -1;
      outlined destroy of TableRowList?((uint64_t)v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext??, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(_QWORD))type metadata accessor for NavigationAuthority??);
    }
    swift_bridgeObjectRelease_n();
    v58 = v111;
    if (BYTE8(v119) == 255)
      goto LABEL_57;
    outlined init with copy of TableRowList?((uint64_t)&v117, (uint64_t)v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    v59 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v114[0];
    if (v115 != 3)
    {
      if (v115 == 4)
      {
        v60 = vorrq_s8(*(int8x16_t *)&v114[1], *(int8x16_t *)&v114[3]);
        if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v60.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)) | v114[0]))
        {
          outlined destroy of TableRowList?((uint64_t)&v117, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
          if (!v107)
            goto LABEL_78;
          goto LABEL_58;
        }
      }
      outlined destroy of AccessibilityTableContext((uint64_t)v114);
LABEL_57:
      outlined destroy of TableRowList?((uint64_t)&v117, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
LABEL_58:

      ++v4;
      if (v109 == v108)
        goto LABEL_50;
      continue;
    }
    break;
  }
  outlined destroy of TableRowList?((uint64_t)&v117, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v59 != v107)
    goto LABEL_58;
LABEL_78:
  AccessibilityNode.platformElement.getter();
  if (!v61)
    v61 = v58;
  v62 = v61;
  v129 = &unk_1EDF60F58;
  v63 = swift_dynamicCastObjCProtocolConditional();
  if (v63)
  {
    v64 = v63;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v65 + 32) = v64;
    *(_QWORD *)&v117 = v65;
    specialized Array._endMutation()();
    v66 = v117;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1[1] = v66;
  }
  else
  {
    swift_bridgeObjectRelease();

  }
LABEL_122:
  outlined destroy of TableRowList?((uint64_t)v132, (uint64_t)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t)lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)type metadata accessor for ShadowListDataSource, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
}

uint64_t AccessibilityNode.accessibilityUserInputLabels.getter(uint64_t (*a1)(uint64_t, id))
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v8[2];

  AccessibilityNode.attachment.getter(v8);

  v3 = swift_bridgeObjectRetain();
  v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease_n();
  if (!v4)
    return 0;
  v5 = v1;
  v6 = a1(v4, v5);
  swift_bridgeObjectRelease();

  return v6;
}

id @objc AccessibilityNode.accessibilityLabel.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  if (v7)
  {
    v8 = (void *)MEMORY[0x18D75CC88](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

uint64_t AccessibilityNode.accessibilityLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Locale?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v13 - v3;
  v5 = type metadata accessor for Locale();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AccessibilityNode.attachment.getter((uint64_t *)&v13);
  v10 = v13;

  *(_QWORD *)&v13 = v10;
  AccessibilityProperties.locale.getter();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    v13 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    EnvironmentValues.locale.getter();
    outlined destroy of TableRowList?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Locale?, (uint64_t)MEMORY[0x1E0CB0E38], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
  }
  v11 = Locale.bcp47LanguageCode.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v11;
}

void AccessibilityNode.accessibilityTextualContext.getter()
{
  uint64_t v0;
  uint64_t v1[2];

  AccessibilityNode.attachment.getter(v1);

  v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (char *)v1);
  swift_bridgeObjectRelease_n();
  if (LOBYTE(v1[0]) != 8)
    AccessibilityTextContentType.platformValue.getter();
}

double AccessibilityNode.accessibilityFrame.getter()
{
  char *v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  void *v5;
  UIView *v6;
  double v7;
  double v8;
  objc_super v10;
  _BYTE v11[40];
  _QWORD v12[4];
  char v13;
  CGRect v14;

  LOBYTE(v12[0]) = 4;
  AccessibilityNode.contentFrame(with:)(v12, (uint64_t)v11);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v11, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for CGRect?, (uint64_t)type metadata accessor for CGRect, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if ((v13 & 1) != 0)
    goto LABEL_7;
  v1 = *(double *)v12;
  v2 = *(double *)&v12[1];
  v3 = *(double *)&v12[2];
  v4 = *(double *)&v12[3];
  if (!MEMORY[0x18D760234](&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]))
    goto LABEL_7;
  objc_opt_self();
  v5 = (void *)swift_dynamicCastObjCClass();
  if (!v5)
    swift_unknownObjectRelease();
  v6 = (UIView *)objc_msgSend(v5, sel_window);

  if (v6)
  {
    v14.origin.x = v1;
    v14.origin.y = v2;
    v14.size.width = v3;
    v14.size.height = v4;
    *(_QWORD *)&v7 = (unint64_t)UIAccessibilityConvertFrameToScreenCoordinates(v14, v6);

  }
  else
  {
LABEL_7:
    v10.receiver = v0;
    v10.super_class = (Class)type metadata accessor for AccessibilityNode();
    objc_msgSendSuper2(&v10, sel_accessibilityFrame);
    return v8;
  }
  return v7;
}

UIBezierPath *AccessibilityNode.accessibilityPath.getter()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;
  UIBezierPath *v8;
  void *v9;
  UIView *v10;
  UIBezierPath *v11;
  objc_super v13;
  _QWORD v14[4];
  char v15;
  _BYTE v16[40];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v1 = v0;
  AccessibilityNode.contentPath.getter((uint64_t)v14);
  v2 = v14[0];
  v3 = v14[1];
  v4 = v14[2];
  v5 = v14[3];
  v6 = v15;
  outlined init with take of Image.Resolved?((uint64_t)v14, (uint64_t)v16, &lazy cache variable for type metadata for Path?, MEMORY[0x1E0CE6B18]);
  if (v16[32] == 255)
  {
    v13.receiver = v1;
    v13.super_class = (Class)type metadata accessor for AccessibilityNode();
    return (UIBezierPath *)objc_msgSendSuper2(&v13, sel_accessibilityPath);
  }
  else
  {
    v17 = v2;
    v18 = v3;
    v19 = v4;
    v20 = v5;
    v21 = v6;
    v7 = (void *)Path.cgPath.getter();
    v8 = (UIBezierPath *)objc_msgSend((id)objc_opt_self(), sel_bezierPathWithCGPath_, v7);

    outlined release of Path?((uint64_t)v14);
    if (MEMORY[0x18D760234](&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]))
    {
      objc_opt_self();
      v9 = (void *)swift_dynamicCastObjCClass();
      if (!v9)
        swift_unknownObjectRelease();
      v10 = (UIView *)objc_msgSend(v9, sel_window);

      if (v10)
      {
        v11 = UIAccessibilityConvertPathToScreenCoordinates(v8, v10);

        return v11;
      }
    }
  }
  return v8;
}

Swift::Int __swiftcall AccessibilityNode._accessibilitySortPriority()()
{
  uint64_t v0;
  double v1;
  char v2;
  char v3;
  Swift::Int result;
  uint64_t v5[2];

  AccessibilityNode.attachment.getter(v5);

  v0 = swift_bridgeObjectRetain();
  v1 = COERCE_DOUBLE(specialized AccessibilityProperties.subscript.getter(v0));
  v3 = v2;
  result = swift_bridgeObjectRelease_n();
  if ((v3 & 1) != 0)
    return 0;
  if (v1 >= 9.22337204e18)
    return 0x7FFFFFFFFFFFFFFFLL;
  if (v1 <= -9.22337204e18)
    return 0x8000000000000000;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) != 0)
  {
    if (v1 > -9.22337204e18)
      return (uint64_t)v1;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

__C::CGRect __swiftcall AccessibilityNode._accessibilityBounds(for:)(__C::_NSRange a1)
{
  char *v1;
  Swift::Int length;
  Swift::Int location;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  void *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  void *v14;
  UIView *v15;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  objc_super v28;
  _QWORD v29[5];
  double v30;
  id v31;
  double v32;
  double v33;
  char v34;
  CGRect v35;
  CGRect v36;
  __C::CGRect result;

  length = a1.length;
  location = a1.location;
  AccessibilityNode.attachment.getter((uint64_t *)&v30);

  v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, (uint64_t)&v30);
  swift_bridgeObjectRelease_n();
  if (v30 == 0.0)
    goto LABEL_12;
  if (*(_QWORD *)(*(_QWORD *)&v30 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(*(_QWORD *)&v30 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)&v30 + 40);
  v7 = *(_BYTE *)(*(_QWORD *)&v30 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v5, v6, v7);
  swift_bridgeObjectRelease();
  v8 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
  v30 = *(double *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  v31 = v8;
  v29[0] = 0;
  v29[1] = 0;
  swift_retain();
  swift_retain();
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  v9 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  outlined consume of Text.Storage(v5, v6, v7);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_12:
    v28.receiver = v1;
    v28.super_class = (Class)type metadata accessor for AccessibilityNode();
    objc_msgSendSuper2(&v28, sel__accessibilityBoundsForRange_, location, length);
    x = v20;
    y = v21;
    width = v22;
    height = v23;
    goto LABEL_13;
  }
  specialized AccessibilityNode.withLayoutManager<A>(_:_:)(v9, location, length, (uint64_t)v29);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v29, (uint64_t)&v30, (uint64_t)&lazy cache variable for type metadata for CGRect?, (uint64_t)type metadata accessor for CGRect, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if (v34 == 1)
    goto LABEL_11;
  v10 = v30;
  v11 = *(double *)&v31;
  v12 = v32;
  v13 = v33;
  if (!MEMORY[0x18D760234](&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]))
    goto LABEL_11;
  objc_opt_self();
  v14 = (void *)swift_dynamicCastObjCClass();
  if (!v14)
    swift_unknownObjectRelease();
  v15 = (UIView *)objc_msgSend(v14, sel_window);

  if (!v15)
  {
LABEL_11:

    goto LABEL_12;
  }
  v35.origin.x = v10;
  v35.origin.y = v11;
  v35.size.width = v12;
  v35.size.height = v13;
  v36 = UIAccessibilityConvertFrameToScreenCoordinates(v35, v15);
  x = v36.origin.x;
  y = v36.origin.y;
  width = v36.size.width;
  height = v36.size.height;

LABEL_13:
  v24 = x;
  v25 = y;
  v26 = width;
  v27 = height;
  result.size.height = v27;
  result.size.width = v26;
  result.origin.y = v25;
  result.origin.x = v24;
  return result;
}

_OWORD *AccessibilityNode.accessibilityContainer()@<X0>(_OWORD *a1@<X8>)
{
  char *v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  AccessibilityNode.accessibilityParent(options:)(0, (uint64_t)&v10);
  if (v11)
    return outlined init with take of Any(&v10, a1);
  v4 = MEMORY[0x18D760234](&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]);
  v5 = MEMORY[0x1E0DEE9B8];
  if (v4)
  {
    v6 = v4;
    *((_QWORD *)&v9 + 1) = swift_getObjectType();
    *(_QWORD *)&v8 = v6;
    outlined init with take of Any(&v8, a1);
  }
  else
  {
    v7.receiver = v1;
    v7.super_class = (Class)type metadata accessor for AccessibilityNode();
    if (objc_msgSendSuper2(&v7, sel_accessibilityContainer))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v8 = 0u;
      v9 = 0u;
    }
    outlined init with take of Image.Resolved?((uint64_t)&v8, (uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
  }
  return (_OWORD *)outlined destroy of TableRowList?((uint64_t)&v10, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
}

void AccessibilityNode.accessibilityParent(options:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int v14;

  v5 = MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);
  if (!v5)
  {
    if (MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
    {
      objc_opt_self();
      v11 = swift_dynamicCastObjCClass();
      if (v11)
      {
        v12 = v11;
        AccessibilityNode.visibility.getter(&v14);
        if ((v14 & 0x20) != 0)
        {
          *(_QWORD *)(a2 + 24) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
          *(_QWORD *)a2 = v12;
          return;
        }
      }
      swift_unknownObjectRelease();
    }
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return;
  }
  v13 = (id)v5;
  if ((a1 & 1) == 0 && (AccessibilityNode.visibility.getter(&v14), (v14 & 0x20) != 0))
  {
    AccessibilityNode.accessibilityParent(options:)(a1);

  }
  else
  {
    AccessibilityNode.platformElement.getter();
    if (!v6)
      v6 = v13;
    v7 = v6;
    type metadata accessor for HostingScrollView();
    v8 = swift_dynamicCastClass();
    if (v8)
    {
      v9 = *(void **)(v8 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
      *(_QWORD *)(a2 + 24) = type metadata accessor for HostingScrollView.PlatformGroupContainer();
      v10 = v9;

      *(_QWORD *)a2 = v10;
    }
    else
    {

      *(_QWORD *)(a2 + 24) = type metadata accessor for AccessibilityNode();
      *(_QWORD *)a2 = v13;
    }
  }
}

id @objc AccessibilityNode._accessibilityUserTestingParent()(void *a1)
{
  id v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  void *v8;
  _QWORD v10[3];
  uint64_t v11;

  v1 = a1;
  AccessibilityNode.accessibilityParent(options:)(1, (uint64_t)v10);

  v2 = v11;
  if (!v11)
    return 0;
  v3 = __swift_project_boxed_opaque_existential_1(v10, v11);
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v3, v3);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  v8 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v8;
}

double AccessibilityNode.accessibilityActivationPoint.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  int8x16_t v3;
  char v4;
  int v5;
  id v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  double v13;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  CGRect v22;
  CGRect v23;

  v1 = v0;
  AccessibilityNode.attachment.getter(v19.i64);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, &v19);
  swift_bridgeObjectRelease();
  if (v21)
  {
    v3 = v19;
    v4 = v20;
    v5 = ~(_BYTE)v20;
    outlined consume of AccessibilityActivationPointStorage?(v19.i64[0], v19.i64[1], v20, v21);
    swift_bridgeObjectRelease();
    if (v5)
    {
      v19 = v3;
      LOBYTE(v20) = v4;
      v6 = v0;
      *(double *)&v7 = COERCE_DOUBLE(AccessibilityNode.resolvedActivationPoint(for:)((__int128 *)v19.i8));
      v9 = v8;

      goto LABEL_6;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  *(double *)&v7 = COERCE_DOUBLE(AccessibilityNode.childActivationPoint(implicit:)(0));
  v9 = v10;
LABEL_6:
  if (v9 == -1)
  {
    v11 = AccessibilityNode.implicitActivationPoint.getter();
    if (v12 == -1)
    {
      objc_msgSend(v1, sel_accessibilityFrame);
      x = v22.origin.x;
      y = v22.origin.y;
      width = v22.size.width;
      height = v22.size.height;
      v13 = v22.origin.x + CGRectGetWidth(v22) * 0.5;
      v23.origin.x = x;
      v23.origin.y = y;
      v23.size.width = width;
      v23.size.height = height;
      CGRectGetHeight(v23);
      return v13;
    }
    v7 = v11;
  }
  return *(double *)&v7;
}

Class @objc AccessibilityNode.accessibilityDragSourceDescriptors.getter(void *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  id v4;
  uint64_t v5;
  NSArray v6;

  v4 = a1;
  v5 = a3(0);

  if (v5)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityLocationDescriptor);
    v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.isa = 0;
  }
  return v6.super.isa;
}

id AccessibilityNode.accessibilityViewIsModal.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  char v3;
  objc_super v5;
  char v6;
  uint64_t v7[2];

  v1 = v0;
  AccessibilityNode.attachment.getter(v7);
  v2 = v7[0];

  v7[0] = v2;
  v6 = 14;
  v3 = AccessibilityProperties.subscript.getter();
  swift_bridgeObjectRelease();
  if (v3 != 2)
    return (id)(v3 & 1);
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for AccessibilityNode();
  return objc_msgSendSuper2(&v5, sel_accessibilityViewIsModal);
}

uint64_t AccessibilityNode.accessibilityNavigationStyle.getter()
{
  void *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  objc_class *v10;
  int v12;
  int v13;
  char v14[24];
  objc_super v15;

  LOBYTE(v12) = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v12, v14);
  if (v14[0] - 1 > 1)
  {
    v10 = (objc_class *)type metadata accessor for AccessibilityNode();
    v15.receiver = v0;
    v15.super_class = v10;
    return (uint64_t)objc_msgSendSuper2(&v15, sel_accessibilityNavigationStyle);
  }
  else
  {
    swift_beginAccess();
    v1 = swift_bridgeObjectRetain();
    v2 = specialized Sequence.filter(_:)(v1, 0);
    swift_bridgeObjectRelease();
    if (v2 >> 62)
      goto LABEL_24;
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter())
    {
      v4 = 4;
      while (1)
      {
        v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18D75E3BC](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
        v6 = v5;
        v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        AccessibilityNode.visibility.getter(&v12);
        v8 = v12;
        if ((v12 & 4) != 0 || (v12 & 8) != 0 && (v13 & 4) == 0)
          goto LABEL_16;
        if ((v12 & 0x10) != 0)
          goto LABEL_22;
        if ((v12 & 0x40) != 0)
          goto LABEL_16;
        if ((v12 & 1) == 0)
        {
          if ((v12 & 2) != 0)
          {
LABEL_22:
            swift_bridgeObjectRelease_n();

            return 1;
          }
LABEL_16:

          goto LABEL_17;
        }

        if ((v8 & 2) != 0)
        {
          swift_bridgeObjectRelease_n();
          return 1;
        }
LABEL_17:
        ++v4;
        if (v7 == v3)
          goto LABEL_25;
      }
      __break(1u);
LABEL_24:
      swift_bridgeObjectRetain();
    }
LABEL_25:
    v9 = 2;
    swift_bridgeObjectRelease_n();
  }
  return v9;
}

BOOL AccessibilityNode._accessibilityExplicitlyNonInteractable.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v4[2];

  AccessibilityNode.attachment.getter(v4);
  v0 = v4[0];

  v4[0] = v0;
  v1 = AccessibilityProperties.subscript.getter();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0 && v1 != 2;
}

unint64_t AccessibilityNode.accessibilityCustomActions.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10[2];

  AccessibilityNode.attachment.getter(v10);

  v1 = swift_bridgeObjectRetain();
  v2 = specialized AccessibilityProperties.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
  swift_retain();
  v4 = swift_retain();
  v5 = specialized Sequence<>.resolved(in:)(v4, v3, v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v6 = v0;
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI22AnyAccessibilityActionV8ResolvedVG_So021UIAccessibilityCustomH0Cs5NeverOTg503_s7d4UI17g20NodeC26accessibilityk15ActionsSaySo015j2F6h19CGSgvgAfA03AnycI0V8I6VXEfU_AF0gO0CTf1cn_nTf4ng_n((uint64_t)v5);
  swift_bridgeObjectRelease();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
      return v7;
    goto LABEL_3;
  }
  if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v7;
}

BOOL closure #1 in closure #1 in AccessibilityNode.accessibilityCustomActions.getter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::Bool v12;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x18D760234](v4);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = objc_msgSend(a3, sel_string);
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    v11._countAndFlagsBits = v8;
    v11._object = v10;
    v12 = AccessibilityNode.sendAction(named:)(v11);

    swift_bridgeObjectRelease();
  }
  else
  {
    return 0;
  }
  return v12;
}

id AccessibilityNode.accessibilityDirectTouchOptions.getter()
{
  void *v0;
  uint64_t v1;
  objc_super v3;
  uint64_t v4;
  id v5;

  AccessibilityNode.attachment.getter(&v4);

  v1 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v1, &v4);
  swift_bridgeObjectRelease_n();
  if (v4 != 2)
    return v5;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for AccessibilityNode();
  return objc_msgSendSuper2(&v3, sel_accessibilityDirectTouchOptions);
}

uint64_t AccessibilityNode.accessibilityURL()@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v17[2];

  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for LinkDestination.Configuration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2DE8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v17 - v5;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], v2);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v17 - v9;
  AccessibilityNode.attachment.getter(v17);

  v11 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v11, (uint64_t)v6);
  swift_bridgeObjectRelease_n();
  v12 = type metadata accessor for LinkDestination.Configuration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v6, 1, v12) == 1)
  {
    outlined destroy of TableRowList?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for LinkDestination.Configuration?, (uint64_t)MEMORY[0x1E0CE2DE8], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v13 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
LABEL_4:
    outlined destroy of TableRowList?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for URL?, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  LinkDestination.Configuration.url.getter();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2DE8]);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
  v15(v10, 0, 1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
    goto LABEL_4;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a1, v10, v13);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v15)(a1, 0, 1, v13);
}

char *AccessibilityNode._accessibilityUserDefinedLinkedUIElements.getter()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  Swift::UInt v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17[3];

  v1 = 0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
  if (v2)
  {
    v3 = v0;
    v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
    swift_beginAccess();
    v5 = *(_QWORD *)(v2 + 32);
    if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, 2u), (v7 & 1) != 0))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
      swift_endAccess();
      swift_retain();
      swift_bridgeObjectRetain();
      v9 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E0DEE9D8], v8, v2, 2u);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_endAccess();
      swift_retain();
      v9 = MEMORY[0x1E0DEE9D8];
    }
    v10 = v3;
    v11 = specialized _ArrayProtocol.filter(_:)(v9, (uint64_t)v10);
    swift_release();
    swift_bridgeObjectRelease();

    if (v11 < 0 || (v11 & 0x4000000000000000) != 0)
    {
      v16 = swift_bridgeObjectRetain();
      v12 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    v17[0] = v12;
    specialized MutableCollection<>.sort(by:)((uint64_t *)v17, 0, 4, 2);
    swift_bridgeObjectRelease();
    v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF08PlatformfB8Protocol_So8NSObjectCXcs5NeverOTg503_s7d4UI17fg58C41_accessibilityUserDefinedLinkedUIElementsSayypGSgvgAA08h3C15bi4_So8J62CXcACcfu_32df5be316035e77621aaf8da9181039cbAcaG_AIXcTf3nnnpk_nTf1cn_n(v17[0]);
    swift_release();
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v14)
        goto LABEL_11;
    }
    else if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_11:
      v1 = specialized _arrayForceCast<A, B>(_:)(v13);
      swift_bridgeObjectRelease();
      return v1;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return v1;
}

Swift::Bool __swiftcall AccessibilityNode.accessibilityScroll(_:)(UIAccessibilityScrollDirection a1)
{
  void *v1;
  Swift::Bool result;
  objc_super v4;

  if ((unint64_t)(a1 - 1) >= 6)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if ((specialized AccessibilityNode.sendAction<A>(_:value:)(0x30102000103uLL >> (8 * (a1 - 1))) & 1) != 0)
  {
    return 1;
  }
  else
  {
    v4.receiver = v1;
    v4.super_class = (Class)type metadata accessor for AccessibilityNode();
    return objc_msgSendSuper2(&v4, sel_accessibilityScroll_, a1);
  }
  return result;
}

Swift::Bool __swiftcall AccessibilityNode._accessibilityCanPerformAction(_:)(Swift::UInt32 a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(unint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v15;
  objc_class *v16;
  uint64_t v18[2];
  objc_super v19;

  v2 = *(_QWORD *)&a1;
  if (a1 != 2007 && a1 != 2006 && a1 != 2008 && a1 != 2009 && a1 != 2019 && a1 != 2020)
    goto LABEL_24;
  AccessibilityNode.attachment.getter(v18);

  v8 = swift_bridgeObjectRetain();
  v9 = specialized AccessibilityProperties.subscript.getter(v8);
  swift_bridgeObjectRelease_n();
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    v16 = (objc_class *)type metadata accessor for AccessibilityNode();
    v19.receiver = v1;
    v19.super_class = v16;
    return objc_msgSendSuper2(&v19, sel__accessibilityCanPerformAction_, v2);
  }
  v11 = (_QWORD *)(v9 + 32);
  swift_bridgeObjectRetain();
  while (1)
  {
    v12 = v11[3];
    v13 = v11[4];
    __swift_project_boxed_opaque_existential_1(v11, v12);
    v14 = *(uint64_t (**)(unint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v13 + 80);
    v15 = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
    if ((v14(v15, &type metadata for AccessibilityScrollAction, v15, v12, v13) & 1) != 0)
      break;
    v11 += 6;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

void AccessibilityNode.applyProperties(to:includingRelations:)(void *a1, char a2)
{
  _BYTE *v2;
  _BYTE *v3;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t aBlock;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;

  v3 = v2;
  v5 = a1;
  objc_msgSend(a1, sel_setAccessibilityContainer_, objc_msgSend(v2, sel_accessibilityContainer));
  swift_unknownObjectRelease();
  v6 = objc_msgSend(v2, sel_accessibilityLanguage);
  objc_msgSend(v5, sel_setAccessibilityLanguage_, v6);

  if (v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] == 1)
  {
    v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 0;
    AccessibilityNode.attachment.getter(&aBlock);
    v7 = aBlock;

    aBlock = v7;
    AccessibilityNode.applyProperties(_:to:)(&aBlock, v5);
    swift_bridgeObjectRelease();
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(0, 0, 0, 0, 0x7DAu, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(0, 0, 0, 1uLL, 0x7DDu, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(2, 0, 0x7D4u, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(2, 1, 0x7D5u, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(0, 0x7D7u, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(2, 0x7D6u, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(3, 0x7D8u, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(1, 0x7D9u, v5);
    AccessibilityNode.attachment.getter(&aBlock);

    v8 = swift_bridgeObjectRetain();
    v9 = specialized AccessibilityProperties.subscript.getter(v8);
    swift_bridgeObjectRelease_n();
    v10 = *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
    swift_retain();
    v11 = swift_retain();
    v12 = specialized Sequence<>.resolved(in:)(v11, v10, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v13 = (void *)*((_QWORD *)v12 + 2);
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x1E0C809B0];
    v15 = &unk_187BFA000;
    if (v13)
    {
      v16 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v37 = partial apply for closure #1 in AccessibilityNode.applyProperties(to:includingRelations:);
      v38 = v16;
      aBlock = v14;
      v34 = 1107296256;
      v35 = thunk for @escaping @callee_guaranteed () -> (@owned [UIAccessibilityCustomAction]?);
      v36 = (uint64_t)&block_descriptor_39;
      v13 = _Block_copy(&aBlock);
      swift_release();
    }
    objc_msgSend(v5, sel_setAccessibilityCustomActionsBlock_, v13);
    _Block_release(v13);
    AccessibilityNode.attachment.getter(&aBlock);

    v17 = swift_bridgeObjectRetain();
    v18 = specialized AccessibilityProperties.subscript.getter(v17);
    swift_bridgeObjectRelease_n();
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v32 = v5;
      v20 = (_QWORD *)(v18 + 32);
      swift_bridgeObjectRetain();
      while (1)
      {
        aBlock = 0;
        v34 = 0;
        v35 = 0;
        v36 = 2;
        v21 = v20[3];
        v22 = v20[4];
        __swift_project_boxed_opaque_existential_1(v20, v21);
        v23 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v22 + 80);
        v24 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
        if ((v23(&aBlock, &type metadata for AccessibilityVoidAction, v24, v21, v22) & 1) != 0)
          break;
        v20 += 6;
        if (!--v19)
        {
          swift_bridgeObjectRelease_n();
          v25 = 0;
          v5 = v32;
          v14 = MEMORY[0x1E0C809B0];
          v15 = (_QWORD *)&unk_187BFA000;
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease_n();
      v26 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v37 = partial apply for closure #2 in AccessibilityNode.applyProperties(to:includingRelations:);
      v38 = v26;
      v14 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v15 = &unk_187BFA000;
      v34 = 1107296256;
      v35 = thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
      v36 = (uint64_t)&block_descriptor_8;
      v25 = _Block_copy(&aBlock);
      swift_release();
      v5 = v32;
    }
    else
    {
      swift_bridgeObjectRelease();
      v25 = 0;
    }
LABEL_11:
    objc_msgSend(v5, sel_setAccessibilityMagicTapBlock_, v25);
    _Block_release(v25);
    type metadata accessor for HostingScrollView();
    v27 = swift_dynamicCastClass();
    if (v27)
    {
      v28 = *(void **)(v27 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
      v29 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v37 = partial apply for closure #1 in AccessibilityNode.applyChildren(to:);
      v38 = v29;
      aBlock = v14;
      v34 = v15[138];
      v35 = thunk for @escaping @callee_guaranteed () -> (@owned [Any]?);
      v36 = (uint64_t)&block_descriptor_4;
      v30 = _Block_copy(&aBlock);
      v31 = v5;
      swift_release();
      objc_msgSend(v28, sel_setAccessibilityElementsBlock_, v30);
      _Block_release(v30);
      objc_msgSend(v28, sel_setShouldGroupAccessibilityChildren_, 1);

    }
    if ((a2 & 1) != 0)
      AccessibilityNode.applyRelations(to:)(v5);
  }
}

id AccessibilityNode.applyProperties(_:to:)(uint64_t *a1, void *a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  NSString *v6;
  __int16 v7;
  unsigned __int8 v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  int8x16_t v56;
  char v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  NSArray v86;
  id v87;
  id v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  id result;
  uint64_t v93;
  void *v94;
  Class v95;
  _OWORD v96[2];
  unsigned __int8 v97;
  unsigned __int8 v98;
  char v99;
  int8x16_t aBlock;
  uint64_t (*v101)();
  void *v102;
  uint64_t (*v103)();
  _QWORD *v104;
  _BYTE v105[40];
  _BYTE v106[48];

  v3 = v2;
  v5 = *a1;
  v6 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
  v95 = NSClassFromString(v6);

  AccessibilityProperties.visibility.getter();
  *(_QWORD *)&v96[0] = aBlock.i64[0];
  v7 = AccessibilityNullableOptionSet<>.shouldApplyPlatformElementOverride.getter();
  v8 = objc_msgSend(v3, sel_isAccessibilityElement);
  v9 = 0;
  v10 = MEMORY[0x1E0C809B0];
  if ((v7 & 1) != 0)
  {
    v11 = v8;
    v12 = swift_allocObject();
    *(_BYTE *)(v12 + 16) = v11;
    v103 = partial apply for closure #3 in AccessibilityNode.applyProperties(_:to:);
    v104 = (_QWORD *)v12;
    aBlock.i64[0] = v10;
    aBlock.i64[1] = 1107296256;
    v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
    v102 = &block_descriptor_121;
    v9 = _Block_copy(&aBlock);
    swift_release();
  }
  objc_msgSend(a2, sel_setIsAccessibilityElementBlock_, v9);
  _Block_release(v9);
  v13 = objc_msgSend(v3, sel_accessibilityElementsHidden);
  if ((v7 & 0x100) != 0)
  {
    v15 = v13;
    v16 = swift_allocObject();
    *(_BYTE *)(v16 + 16) = v15;
    v103 = partial apply for closure #2 in AccessibilityNode.applyProperties(_:to:);
    v104 = (_QWORD *)v16;
    aBlock.i64[0] = v10;
    aBlock.i64[1] = 1107296256;
    v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
    v102 = &block_descriptor_115;
    v14 = _Block_copy(&aBlock);
    swift_release();
  }
  else
  {
    v14 = 0;
  }
  objc_msgSend(a2, sel_setAccessibilityElementsHiddenBlock_, v14);
  _Block_release(v14);
  AccessibilityProperties.traits.getter();
  v96[0] = aBlock;
  v106[0] = 14;
  v17 = AccessibilityNullableOptionSet<>.subscript.getter();
  if (v17 == 2)
  {
    objc_msgSend(a2, sel_setAccessibilityViewIsModalBlock_, 0);
  }
  else
  {
    v18 = v17 & 1;
    v19 = swift_allocObject();
    *(_BYTE *)(v19 + 16) = v18;
    v103 = partial apply for closure #3 in AccessibilityNode.applyProperties(_:to:);
    v104 = (_QWORD *)v19;
    aBlock.i64[0] = v10;
    aBlock.i64[1] = 1107296256;
    v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
    v102 = &block_descriptor_109_1;
    v20 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(a2, sel_setAccessibilityViewIsModalBlock_, v20);
    _Block_release(v20);
  }
  v21 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v21, (uint64_t)&aBlock);
  swift_bridgeObjectRelease();
  if (aBlock.i64[0])
  {
    v22 = *(void **)(aBlock.i64[0] + 16);
    swift_bridgeObjectRelease();
    if (v22)
    {
      v23 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v103 = (uint64_t (*)())partial apply for closure #4 in AccessibilityNode.applyProperties(_:to:);
      v104 = (_QWORD *)v23;
      aBlock.i64[0] = v10;
      aBlock.i64[1] = 1107296256;
      v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@owned String?);
      v102 = &block_descriptor_103;
      v22 = _Block_copy(&aBlock);
      swift_release();
    }
  }
  else
  {
    v22 = 0;
  }
  objc_msgSend(a2, sel_setAccessibilityLabelBlock_, v22);
  _Block_release(v22);
  v24 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v24, &aBlock);
  swift_bridgeObjectRelease();
  if (v104)
  {
    v25 = AccessibilityValueStorage.valueDescription.getter();
    outlined destroy of AccessibilityValueStorage((uint64_t)&aBlock);
    v26 = *(_QWORD *)(v25 + 16);
    swift_bridgeObjectRelease();
    if (v26)
    {
      v27 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v103 = (uint64_t (*)())partial apply for closure #5 in AccessibilityNode.applyProperties(_:to:);
      v104 = (_QWORD *)v27;
      v10 = MEMORY[0x1E0C809B0];
      aBlock.i64[0] = MEMORY[0x1E0C809B0];
      aBlock.i64[1] = 1107296256;
      v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@owned String?);
      v102 = &block_descriptor_99;
      v28 = _Block_copy(&aBlock);
      swift_release();
    }
    else
    {
      v28 = 0;
      v10 = MEMORY[0x1E0C809B0];
    }
  }
  else
  {
    outlined destroy of TableRowList?((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    v28 = 0;
  }
  objc_msgSend(a2, sel_setAccessibilityValueBlock_, v28);
  _Block_release(v28);
  aBlock.i64[0] = v5;
  v29 = *(void **)(AccessibilityProperties.hints.getter() + 16);
  swift_bridgeObjectRelease();
  if (v29)
  {
    v30 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v103 = (uint64_t (*)())partial apply for closure #6 in AccessibilityNode.applyProperties(_:to:);
    v104 = (_QWORD *)v30;
    aBlock.i64[0] = v10;
    aBlock.i64[1] = 1107296256;
    v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@owned String?);
    v102 = &block_descriptor_39_0;
    v29 = _Block_copy(&aBlock);
    swift_release();
  }
  objc_msgSend(a2, sel_setAccessibilityHintBlock_, v29);
  _Block_release(v29);
  v31 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v31, (uint64_t)&aBlock);
  swift_bridgeObjectRelease();
  v32 = (void *)aBlock.i64[1];
  swift_bridgeObjectRelease();
  if (v32)
  {
    v33 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v103 = (uint64_t (*)())partial apply for closure #7 in AccessibilityNode.applyProperties(_:to:);
    v104 = (_QWORD *)v33;
    aBlock.i64[0] = v10;
    aBlock.i64[1] = 1107296256;
    v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@owned String?);
    v102 = &block_descriptor_95_0;
    v32 = _Block_copy(&aBlock);
    swift_release();
  }
  objc_msgSend(a2, sel_setAccessibilityIdentifierBlock_, v32);
  _Block_release(v32);
  v34 = objc_msgSend(v3, sel_accessibilityAttributedUserInputLabels);
  if (v34)
  {
    v35 = v34;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    if (v36 >> 62)
      v37 = _CocoaArrayWrapper.endIndex.getter();
    else
      v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    if (v37)
      objc_msgSend(a2, sel_setAccessibilityAttributedUserInputLabels_, v35);

  }
  v38 = objc_msgSend(v3, sel_accessibilityTextualContext);
  if (v38)
  {
    v39 = v38;
    objc_msgSend(a2, sel_setAccessibilityTextualContext_, v38);

  }
  v40 = objc_msgSend(v3, sel_accessibilityDirectTouchOptions);
  if (v40)
    objc_msgSend(a2, sel_setAccessibilityDirectTouchOptions_, v40);
  v41 = objc_msgSend(v3, sel_accessibilityContainerType);
  type metadata accessor for HostingScrollView();
  if (!swift_dynamicCastClass() && v41)
    objc_msgSend(a2, sel_setAccessibilityContainerType_, v41);
  if (v95)
  {
    if (v41 == (id)1)
    {
      v42 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v103 = (uint64_t (*)())partial apply for closure #8 in AccessibilityNode.applyProperties(_:to:);
      v104 = (_QWORD *)v42;
      aBlock.i64[0] = v10;
      aBlock.i64[1] = 1107296256;
      v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
      v102 = &block_descriptor_79;
      v43 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityColumnCountBlock_, v43);
      _Block_release(v43);
      v44 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v103 = (uint64_t (*)())partial apply for closure #9 in AccessibilityNode.applyProperties(_:to:);
      v104 = (_QWORD *)v44;
      aBlock.i64[0] = v10;
      aBlock.i64[1] = 1107296256;
      v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
      v102 = &block_descriptor_83;
      v45 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityRowCountBlock_, v45);
      _Block_release(v45);
      v46 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v103 = (uint64_t (*)())partial apply for closure #10 in AccessibilityNode.applyProperties(_:to:);
      v104 = (_QWORD *)v46;
      aBlock.i64[0] = v10;
      aBlock.i64[1] = 1107296256;
      v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned Int, @unowned Int) -> (@out Any?);
      v102 = &block_descriptor_87;
      v47 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityDataTableCellElementForRowColumnBlock_, v47);
      _Block_release(v47);
      v48 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v103 = (uint64_t (*)())partial apply for closure #11 in AccessibilityNode.applyProperties(_:to:);
      v104 = (_QWORD *)v48;
      aBlock.i64[0] = v10;
      aBlock.i64[1] = 1107296256;
      v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned Int) -> (@owned [Any]?);
      v102 = &block_descriptor_91;
      v49 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityHeaderElementsForColumnBlock_, v49);
      _Block_release(v49);
    }
    else
    {
      objc_msgSend(a2, sel__setAccessibilityColumnCountBlock_, 0);
      objc_msgSend(a2, sel__setAccessibilityRowCountBlock_, 0);
      objc_msgSend(a2, sel__setAccessibilityDataTableCellElementForRowColumnBlock_, 0);
      objc_msgSend(a2, sel__setAccessibilityHeaderElementsForColumnBlock_, 0);
    }
    v50 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v50, (uint64_t)&aBlock);
    swift_bridgeObjectRelease();
    if (v104 != 255)
    {
      outlined init with copy of TableRowList?((uint64_t)&aBlock, (uint64_t)v96, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      if (v98 - 1 <= 2)
      {
        outlined destroy of TableRowList?((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
        v51 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v103 = (uint64_t (*)())partial apply for closure #12 in AccessibilityNode.applyProperties(_:to:);
        v104 = (_QWORD *)v51;
        aBlock.i64[0] = v10;
        aBlock.i64[1] = 1107296256;
        v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
        v102 = &block_descriptor_71;
        v52 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(a2, sel__setAccessibilityColumnRangeBlock_, v52);
        _Block_release(v52);
        v53 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v103 = (uint64_t (*)())partial apply for closure #12 in AccessibilityNode.applyProperties(_:to:);
        v104 = (_QWORD *)v53;
        aBlock.i64[0] = v10;
        aBlock.i64[1] = 1107296256;
        v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
        v102 = &block_descriptor_75;
        v54 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(a2, sel__setAccessibilityRowRangeBlock_, v54);
        _Block_release(v54);
        goto LABEL_44;
      }
      outlined destroy of AccessibilityTableContext((uint64_t)v96);
    }
    objc_msgSend(a2, sel__setAccessibilityColumnRangeBlock_, 0);
    objc_msgSend(a2, sel__setAccessibilityRowRangeBlock_, 0);
    outlined destroy of TableRowList?((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
LABEL_44:
  AccessibilityNode.attachment.getter(aBlock.i64);

  v55 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v55, &aBlock);
  swift_bridgeObjectRelease();
  if (v102)
  {
    v56 = aBlock;
    v57 = (char)v101;
    v58 = ~(_BYTE)v101;
    outlined consume of AccessibilityActivationPointStorage?(aBlock.i64[0], aBlock.i64[1], (uint64_t)v101, (uint64_t)v102);
    swift_bridgeObjectRelease();
    if (v58)
    {
      aBlock = v56;
      LOBYTE(v101) = v57;
      v59 = v3;
      v60 = AccessibilityNode.resolvedActivationPoint(for:)((__int128 *)aBlock.i8);
      v62 = v61;
      v64 = v63;

      goto LABEL_49;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v60 = AccessibilityNode.childActivationPoint(implicit:)(0);
  v62 = v65;
  v64 = v66;
LABEL_49:
  v67 = MEMORY[0x1E0C809B0];
  if (v64 == -1)
  {
    objc_msgSend(a2, sel_setAccessibilityActivationPointBlock_, 0);
  }
  else
  {
    v68 = swift_allocObject();
    *(_QWORD *)(v68 + 16) = v60;
    *(_QWORD *)(v68 + 24) = v62;
    *(_BYTE *)(v68 + 32) = v64 & 1;
    v103 = (uint64_t (*)())partial apply for closure #14 in AccessibilityNode.applyProperties(_:to:);
    v104 = (_QWORD *)v68;
    aBlock.i64[0] = v67;
    aBlock.i64[1] = 1107296256;
    v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned CGPoint);
    v102 = &block_descriptor_67_0;
    v69 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(a2, sel_setAccessibilityActivationPointBlock_, v69);
    _Block_release(v69);
  }
  objc_opt_self();
  if (!swift_dynamicCastObjCClass())
  {
    AccessibilityNode.contentPath.getter((uint64_t)v105);
    outlined release of Path?((uint64_t)v105);
    outlined init with take of Image.Resolved?((uint64_t)v105, (uint64_t)v96, &lazy cache variable for type metadata for Path?, MEMORY[0x1E0CE6B18]);
    if (v97 == 255)
    {
      v71 = 0;
    }
    else
    {
      v70 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v103 = (uint64_t (*)())partial apply for closure #15 in AccessibilityNode.applyProperties(_:to:);
      v104 = (_QWORD *)v70;
      aBlock.i64[0] = v67;
      aBlock.i64[1] = 1107296256;
      v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned CGRect);
      v102 = &block_descriptor_61;
      v71 = _Block_copy(&aBlock);
      swift_release();
    }
    objc_msgSend(a2, sel_setAccessibilityFrameBlock_, v71);
    _Block_release(v71);
    outlined init with take of Image.Resolved?((uint64_t)v105, (uint64_t)v106, &lazy cache variable for type metadata for Path?, MEMORY[0x1E0CE6B18]);
    if (v106[32] == 255)
    {
      v73 = 0;
    }
    else
    {
      v72 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v103 = (uint64_t (*)())partial apply for closure #16 in AccessibilityNode.applyProperties(_:to:);
      v104 = (_QWORD *)v72;
      aBlock.i64[0] = v67;
      aBlock.i64[1] = 1107296256;
      v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
      v102 = &block_descriptor_57_0;
      v73 = _Block_copy(&aBlock);
      swift_release();
    }
    objc_msgSend(a2, sel_setAccessibilityPathBlock_, v73);
    _Block_release(v73);
  }
  if (v95)
  {
    aBlock.i64[0] = v5;
    v74 = AccessibilityProperties.customContentList.getter();
    if (*(_QWORD *)(v74 + 16))
    {
      v75 = *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
      v76 = *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
      v77 = (_QWORD *)swift_allocObject();
      v77[2] = v74;
      v77[3] = v75;
      v77[4] = v76;
      v103 = partial apply for closure #17 in AccessibilityNode.applyProperties(_:to:);
      v104 = v77;
      aBlock.i64[0] = v67;
      aBlock.i64[1] = 1107296256;
      v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@owned [AXCustomContent]?);
      v102 = &block_descriptor_45_0;
      v78 = _Block_copy(&aBlock);
      swift_retain_n();
      swift_retain_n();
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityCustomContentBlock_, v78);
      _Block_release(v78);
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      objc_msgSend(a2, sel__setAccessibilityCustomContentBlock_, 0);
    }
    v79 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v103 = partial apply for closure #18 in AccessibilityNode.applyProperties(_:to:);
    v104 = (_QWORD *)v79;
    aBlock.i64[0] = v67;
    aBlock.i64[1] = 1107296256;
    v101 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned UIAccessibilityTraits);
    v102 = &block_descriptor_49;
    v80 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(a2, sel__setAccessibilityAdditionalTraitsBlock_, v80);
    _Block_release(v80);
  }
  v81 = *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  v82 = *(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
  swift_retain();
  swift_retain();
  AccessibilityNode.attachment.getter(aBlock.i64);

  v83 = swift_bridgeObjectRetain();
  v84 = specialized AccessibilityProperties.subscript.getter(v83);
  swift_bridgeObjectRelease_n();
  if (*(_QWORD *)(v84 + 16))
  {
    v85 = v3;
    swift_retain();
    swift_retain();
    specialized Sequence.compactMap<A>(_:)(v84, v81, v82, (uint64_t)v85);
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomRotor);
    v86.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v86.super.isa = 0;
  }
  objc_msgSend(a2, sel_setAccessibilityCustomRotors_, v86.super.isa);

  v87 = objc_msgSend(v3, sel_accessibilityDragSourceDescriptors);
  objc_msgSend(a2, sel_setAccessibilityDragSourceDescriptors_, v87);

  v88 = objc_msgSend(v3, sel_accessibilityDropPointDescriptors);
  objc_msgSend(a2, sel_setAccessibilityDropPointDescriptors_, v88);

  aBlock.i64[0] = v5;
  v99 = 21;
  v89 = AccessibilityProperties.subscript.getter();
  if (v89 != 2)
    objc_msgSend(a2, sel_setAccessibilityRespondsToUserInteraction_, v89 & 1);
  v90 = swift_bridgeObjectRetain();
  v91 = specialized AccessibilityProperties.subscript.getter(v90);
  swift_bridgeObjectRelease();
  result = (id)swift_release();
  if (v95)
  {
    if (v91)
    {
      v93 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v103 = (uint64_t (*)())partial apply for closure #19 in AccessibilityNode.applyProperties(_:to:);
      v104 = (_QWORD *)v93;
      aBlock.i64[0] = v67;
      aBlock.i64[1] = 1107296256;
      v101 = thunk for @escaping @callee_guaranteed () -> (@owned NSNumber?);
      v102 = &block_descriptor_53;
      v94 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(a2, sel__setAccessibilityChartDescriptorBlock_, v94);
      _Block_release(v94);
      objc_msgSend(a2, sel__accessibilitySetSupportsChartsV2_, 1);
    }
    else
    {
      objc_msgSend(a2, sel__setAccessibilityChartDescriptorBlock_, 0);
      _Block_release(0);
    }
    return objc_msgSend(a2, sel__accessibilitySetSortPriority_, objc_msgSend(v3, sel__accessibilitySortPriority));
  }
  return result;
}

void specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t a1, uint64_t a2), unint64_t a4, unsigned int a5, void *a6)
{
  NSString *v11;
  Class v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  unsigned int v25;
  uint64_t aBlock;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void *v30;
  uint64_t (*v31)(uint64_t);
  _QWORD *v32;

  v11 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
  v12 = NSClassFromString(v11);

  if (v12)
  {
    AccessibilityNode.attachment.getter(&aBlock);

    v13 = swift_bridgeObjectRetain();
    v14 = specialized AccessibilityProperties.subscript.getter(v13);
    swift_bridgeObjectRelease_n();
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v24 = a6;
      v25 = a5;
      v16 = (_QWORD *)(v14 + 32);
      swift_bridgeObjectRetain();
      while (1)
      {
        aBlock = a1;
        v28 = a2;
        v29 = a3;
        v30 = (void *)a4;
        v17 = v16[3];
        v18 = v16[4];
        __swift_project_boxed_opaque_existential_1(v16, v17);
        v19 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v18 + 80);
        v20 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
        if ((v19(&aBlock, &type metadata for AccessibilityVoidAction, v20, v17, v18) & 1) != 0)
          break;
        v16 += 6;
        if (!--v15)
        {
          swift_bridgeObjectRelease_n();
          return;
        }
      }
      swift_bridgeObjectRelease_n();
      if ((objc_msgSend(v24, sel_respondsToSelector_, sel__accessibilitySetActionBlock_withValue_forKey_) & 1) != 0)
      {
        v21 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v22 = (_QWORD *)swift_allocObject();
        v22[2] = v21;
        v22[3] = a1;
        v22[4] = a2;
        v22[5] = a3;
        v22[6] = a4;
        v31 = partial apply for specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:);
        v32 = v22;
        aBlock = MEMORY[0x1E0C809B0];
        v28 = 1107296256;
        v29 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?) -> (@unowned Bool);
        v30 = &block_descriptor_35_0;
        v23 = _Block_copy(&aBlock);
        outlined copy of AccessibilityActionKind.ActionKind(a1, a2, (char)a3, a4);
        swift_release();
        objc_msgSend(v24, sel__accessibilitySetActionBlock_withValue_forKey_, v23, 0, v25);
        _Block_release(v23);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(char a1, char a2, unsigned int a3, void *a4)
{
  NSString *v8;
  Class v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  id v22;
  unsigned int v23;
  uint64_t aBlock;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void *v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;

  v8 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
  v9 = NSClassFromString(v8);

  if (v9)
  {
    AccessibilityNode.attachment.getter(&aBlock);

    v10 = swift_bridgeObjectRetain();
    v11 = specialized AccessibilityProperties.subscript.getter(v10);
    swift_bridgeObjectRelease_n();
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v21 = a2;
      v22 = a4;
      v23 = a3;
      v13 = (_QWORD *)(v11 + 32);
      swift_bridgeObjectRetain();
      while (1)
      {
        LOBYTE(aBlock) = a1;
        v15 = v13[3];
        v14 = v13[4];
        __swift_project_boxed_opaque_existential_1(v13, v15);
        v16 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v14 + 80);
        v17 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
        if ((v16(&aBlock, &type metadata for AccessibilityAdjustableAction, v17, v15, v14) & 1) != 0)
          break;
        v13 += 6;
        if (!--v12)
        {
          swift_bridgeObjectRelease_n();
          return;
        }
      }
      swift_bridgeObjectRelease_n();
      if ((objc_msgSend(v22, sel_respondsToSelector_, sel__accessibilitySetActionBlock_withValue_forKey_) & 1) != 0)
      {
        v18 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v19 = swift_allocObject();
        *(_QWORD *)(v19 + 16) = v18;
        *(_BYTE *)(v19 + 24) = a1;
        *(_BYTE *)(v19 + 25) = v21 & 1;
        v28 = partial apply for specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:);
        v29 = v19;
        aBlock = MEMORY[0x1E0C809B0];
        v25 = 1107296256;
        v26 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?) -> (@unowned Bool);
        v27 = &block_descriptor_28_0;
        v20 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(v22, sel__accessibilitySetActionBlock_withValue_forKey_, v20, 0, v23);
        _Block_release(v20);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(char a1, unsigned int a2, void *a3)
{
  NSString *v6;
  Class v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(unint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t aBlock;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void *v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;

  v6 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
  v7 = NSClassFromString(v6);

  if (v7)
  {
    AccessibilityNode.attachment.getter(&aBlock);

    v8 = swift_bridgeObjectRetain();
    v9 = specialized AccessibilityProperties.subscript.getter(v8);
    swift_bridgeObjectRelease_n();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v19 = a1;
      v20 = a2;
      v11 = (_QWORD *)(v9 + 32);
      swift_bridgeObjectRetain();
      while (1)
      {
        v12 = v11[3];
        v13 = v11[4];
        __swift_project_boxed_opaque_existential_1(v11, v12);
        v14 = *(uint64_t (**)(unint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v13 + 80);
        v15 = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
        if ((v14(v15, &type metadata for AccessibilityScrollAction, v15, v12, v13) & 1) != 0)
          break;
        v11 += 6;
        if (!--v10)
        {
          swift_bridgeObjectRelease_n();
          return;
        }
      }
      swift_bridgeObjectRelease_n();
      if ((objc_msgSend(a3, sel_respondsToSelector_, sel__accessibilitySetActionBlock_withValue_forKey_) & 1) != 0)
      {
        v16 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v17 = swift_allocObject();
        *(_QWORD *)(v17 + 16) = v16;
        *(_BYTE *)(v17 + 24) = v19;
        v25 = partial apply for specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:);
        v26 = v17;
        aBlock = MEMORY[0x1E0C809B0];
        v22 = 1107296256;
        v23 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?) -> (@unowned Bool);
        v24 = &block_descriptor_21_1;
        v18 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(a3, sel__accessibilitySetActionBlock_withValue_forKey_, v18, 0, v20);
        _Block_release(v18);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t closure #1 in AccessibilityNode.applyProperties(to:includingRelations:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (void *)MEMORY[0x18D760234](v1);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v3 = v2;
  v4 = objc_msgSend(v2, sel_accessibilityCustomActions);

  if (!v4)
    return MEMORY[0x1E0DEE9D8];
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

Class thunk for @escaping @callee_guaranteed () -> (@owned [UIAccessibilityCustomAction]?)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed () -> (@owned [UIAccessibilityCustomAction]?)(a1, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
}

id closure #2 in AccessibilityNode.applyProperties(to:includingRelations:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (void *)MEMORY[0x18D760234](v1);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_accessibilityPerformMagicTap);

  return v4;
}

void AccessibilityNode.applyRelations(to:)(void *a1)
{
  void *v1;
  NSString *v3;
  Class v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v3 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
  v4 = NSClassFromString(v3);

  if (v4)
  {
    v5 = objc_msgSend(v1, sel__accessibilityUserDefinedLinkedUIElements);
    if (v5)
    {
      v6 = v5;
      v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (objc_msgSend(a1, sel_respondsToSelector_, sel__setAccessibilityLinkedUIElementsBlock_))
      {
        v8 = swift_allocObject();
        *(_QWORD *)(v8 + 16) = v7;
        v10[4] = protocol witness for KeyedEncodingContainerProtocol.codingPath.getter in conformance _JSONKeyedEncodingContainer<A>;
        v10[5] = v8;
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 1107296256;
        v10[2] = thunk for @escaping @callee_guaranteed () -> (@owned [Any]?);
        v10[3] = &block_descriptor_14_1;
        v9 = _Block_copy(v10);
        swift_release();
        objc_msgSend(a1, sel__setAccessibilityLinkedUIElementsBlock_, v9);
        _Block_release(v9);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
}

id thunk for @escaping @callee_guaranteed () -> (@owned String?)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  v5 = v4;
  swift_release();
  if (v5)
  {
    v6 = (void *)MEMORY[0x18D75CC88](v3, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

void *closure #4 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1, SEL *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x18D760234](v3);
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, *a2);

    if (v6)
    {
      v7 = AXAttributedStringCreate(v6);
      v5 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void *closure #7 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (void *)MEMORY[0x18D760234](v1);
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, sel_accessibilityIdentifier);

    if (v4)
    {
      v3 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      return 0;
    }
  }
  return v3;
}

Class closure #8 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1, SEL *a2)
{
  uint64_t v3;
  Class result;
  Class v5;

  v3 = a1 + 16;
  swift_beginAccess();
  result = (Class)MEMORY[0x18D760234](v3);
  if (result)
  {
    v5 = result;
    objc_msgSend(result, *a2);

    return Int._bridgeToObjectiveC()().super.super.isa;
  }
  return result;
}

double closure #10 in AccessibilityNode.applyProperties(_:to:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  double result;

  v7 = a3 + 16;
  swift_beginAccess();
  v8 = (void *)MEMORY[0x18D760234](v7);
  if (v8
    && (v9 = v8,
        v10 = objc_msgSend(v8, sel_accessibilityDataTableCellElementForRow_column_, a1, a2),
        v9,
        v10))
  {
    *(_QWORD *)(a4 + 24) = swift_getObjectType();
    *(_QWORD *)a4 = v10;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

id thunk for @escaping @callee_guaranteed (@unowned Int, @unowned Int) -> (@out Any?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD v14[3];
  uint64_t v15;

  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(v14, a2, a3);
  swift_release();
  v6 = v15;
  if (!v15)
    return 0;
  v7 = __swift_project_boxed_opaque_existential_1(v14, v15);
  v8 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v7, v7);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v11, v9);
  v12 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12;
}

char *closure #11 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  char *v6;
  unint64_t v7;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x18D760234](v3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = (char *)objc_msgSend(v4, sel_accessibilityHeaderElementsForColumn_, a1);

  if (v6)
  {
    type metadata accessor for UIAccessibilityContainerDataTableCell();
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v6 = specialized _arrayForceCast<A, B>(_:)(v7);
    swift_bridgeObjectRelease();
  }
  return v6;
}

Class thunk for @escaping @callee_guaranteed (@unowned Int) -> (@owned [Any]?)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  NSArray v5;

  v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  v4 = v3(a2);
  swift_release();
  if (v4)
  {
    v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

Class closure #12 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1)
{
  uint64_t v1;
  Class result;
  Class v3;

  v1 = a1 + 16;
  swift_beginAccess();
  result = (Class)MEMORY[0x18D760234](v1);
  if (result)
  {
    v3 = result;
    -[objc_class accessibilityColumnRange](result, sel_accessibilityColumnRange);

    return _NSRange._bridgeToObjectiveC()().super.isa;
  }
  return result;
}

double thunk for @escaping @callee_guaranteed () -> (@unowned CGPoint)(uint64_t a1)
{
  double (*v1)(uint64_t);
  uint64_t v2;
  double v3;

  v1 = *(double (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  return v3;
}

double closure #15 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  double v4;
  double v5;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (void *)MEMORY[0x18D760234](v1);
  if (!v2)
    return 0.0;
  v3 = v2;
  objc_msgSend(v2, sel_accessibilityFrame);
  v5 = v4;

  return v5;
}

double thunk for @escaping @callee_guaranteed () -> (@unowned CGRect)(uint64_t a1)
{
  double (*v1)(uint64_t);
  uint64_t v2;
  double v3;

  v1 = *(double (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  return v3;
}

Class thunk for @escaping @callee_guaranteed () -> (@owned [AXCustomContent]?)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed () -> (@owned [UIAccessibilityCustomAction]?)(a1, (unint64_t *)&lazy cache variable for type metadata for AXCustomContent);
}

Class thunk for @escaping @callee_guaranteed () -> (@owned [UIAccessibilityCustomAction]?)(uint64_t a1, unint64_t *a2)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  NSArray v6;

  v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v4 = swift_retain();
  v5 = v3(v4);
  swift_release();
  if (v5)
  {
    type metadata accessor for NSObject(0, a2);
    v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.isa = 0;
  }
  return v6.super.isa;
}

uint64_t closure #18 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (!v2)
    return *MEMORY[0x1E0DC4690];
  v3 = (void *)v2;
  v4 = AccessibilityNode.resolvedTraits.getter();

  return v4;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UIAccessibilityTraits)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  return v3;
}

id closure #16 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1, SEL *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x18D760234](v3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = objc_msgSend(v4, *a2);

  return v6;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any?) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(__int128 *);
  char v4;
  __int128 v6;
  __int128 v7;

  v3 = *(uint64_t (**)(__int128 *))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v7 + 1) = swift_getObjectType();
    *(_QWORD *)&v6 = a2;
  }
  else
  {
    v6 = 0u;
    v7 = 0u;
  }
  swift_retain();
  swift_unknownObjectRetain();
  v4 = v3(&v6);
  swift_release();
  outlined destroy of TableRowList?((uint64_t)&v6, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  return v4 & 1;
}

Class thunk for @escaping @callee_guaranteed () -> (@owned [Any]?)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  NSArray v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  if (v3)
  {
    v4.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.isa = 0;
  }
  return v4.super.isa;
}

void *closure #1 in AccessibilityNode.applyChildren(to:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (void *)MEMORY[0x18D760234](v1);
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, sel_accessibilityElements);

    if (v4)
    {
      v3 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t AccessibilityNode.accessibilityIdentifier.getter()
{
  uint64_t v0;
  uint64_t v2;
  id v3;
  unsigned __int8 v4;

  AccessibilityNode.attachment.getter(&v2);

  v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)&v2);
  swift_bridgeObjectRelease_n();
  if (!v3)
    return 0;
  if (v4 < 2u)
    return v2;
  swift_bridgeObjectRelease();
  return 0;
}

void *closure #2 in AccessibilityNode.actionNames.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v7;
  uint64_t v9[2];

  AccessibilityNode.attachment.getter(v9);

  v0 = swift_bridgeObjectRetain();
  v1 = specialized AccessibilityProperties.subscript.getter(v0);
  swift_bridgeObjectRelease_n();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      LOBYTE(v9[0]) = 2;
      v4 = v3[3];
      v5 = v3[4];
      __swift_project_boxed_opaque_existential_1(v3, v4);
      v6 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v5 + 80);
      v7 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
      if ((v6(v9, &type metadata for AccessibilityAdjustableAction, v7, v4, v5) & 1) != 0)
        break;
      v3 += 6;
      if (!--v2)
      {
        swift_bridgeObjectRelease_n();
        return (void *)MEMORY[0x1E0DEE9D8];
      }
    }
    swift_bridgeObjectRelease_n();
    return &outlined read-only object #0 of closure #2 in AccessibilityNode.actionNames.getter;
  }
  else
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x1E0DEE9D8];
  }
}

id AccessibilityNode._accessibilityAutomationType()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(__int128 *, uint64_t, uint64_t);
  __int16 v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  id result;
  uint64_t v33;
  char v34;
  NSString *v35;
  Class v36;
  uint64_t v37;
  objc_super v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = v0;
  AccessibilityNode.attachment.getter((uint64_t *)&v40);
  v2 = v40;

  *(_QWORD *)&v39 = v2;
  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  v3 = v40;
  AccessibilityNode.attachment.getter((uint64_t *)&v40);
  v4 = v40;

  *(_QWORD *)&v40 = v4;
  v5 = AccessibilityProperties.explicitAutomationType.getter();
  v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
    return (id)v5;
  AccessibilityNode.attachment.getter((uint64_t *)&v39);

  v8 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v8, &v40);
  swift_bridgeObjectRelease_n();
  if (v43)
  {
    v39 = v3;
    AccessibilityValueStorage.impliedRole(for:)((uint64_t *)&v39);
    v5 = v9;
    v11 = v10;
    outlined destroy of AccessibilityValueStorage((uint64_t)&v40);
    if ((v11 & 0x101) == 0)
      return (id)v5;
  }
  else
  {
    outlined destroy of TableRowList?((uint64_t)&v40, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  AccessibilityNode.attachment.getter((uint64_t *)&v40);

  v12 = swift_bridgeObjectRetain();
  v13 = specialized AccessibilityProperties.subscript.getter(v12);
  swift_bridgeObjectRelease_n();
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    v40 = v3;
    v33 = AccessibilityNullableOptionSet<>.automationType.getter();
    if ((v34 & 1) != 0)
    {
      v35 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
      v36 = NSClassFromString(v35);

      if (!v36)
        return 0;
      v38.receiver = v1;
      v38.super_class = (Class)type metadata accessor for AccessibilityNode();
      return objc_msgSendSuper2(&v38, sel__accessibilityAutomationType);
    }
    return (id)v33;
  }
  v15 = v13 + 32;
  v37 = *(_QWORD *)(v13 + 16);
  while (1)
  {
    outlined init with copy of AnyAccessibilityAction(v15, (uint64_t)&v40);
    v16 = v41;
    v17 = v42;
    __swift_project_boxed_opaque_existential_1(&v40, v41);
    v39 = v3;
    v18 = *(void (**)(__int128 *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain();
    v18(&v39, v16, v17);
    if ((v19 & 0x100) == 0)
      break;
    outlined destroy of AnyAccessibilityAction((uint64_t)&v40);
    swift_bridgeObjectRelease();
LABEL_9:
    v15 += 48;
    if (!--v14)
      goto LABEL_21;
  }
  v20 = v19;
  outlined destroy of AnyAccessibilityAction((uint64_t)&v40);
  swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    goto LABEL_9;
  v21 = v37 + 1;
  v22 = v13 + 48 * v37 - 16;
  while (1)
  {
    if (v21 - 2 >= *(_QWORD *)(v13 + 16))
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      result = (id)outlined destroy of AnyAccessibilityAction((uint64_t)&v40);
      goto LABEL_30;
    }
    outlined init with copy of AnyAccessibilityAction(v22, (uint64_t)&v40);
    v23 = v41;
    v24 = v42;
    __swift_project_boxed_opaque_existential_1(&v40, v41);
    v39 = v3;
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v24 + 48))(&v39, v23, v24);
    if ((v25 & 0x100) == 0)
      break;
    outlined destroy of AnyAccessibilityAction((uint64_t)&v40);
LABEL_14:
    --v21;
    v22 -= 48;
    if (v21 < 2)
      goto LABEL_28;
  }
  v26 = v25;
  outlined destroy of AnyAccessibilityAction((uint64_t)&v40);
  if ((v26 & 1) != 0)
    goto LABEL_14;
  outlined init with copy of AnyAccessibilityAction(v22, (uint64_t)&v40);
  v27 = v41;
  v28 = v42;
  __swift_project_boxed_opaque_existential_1(&v40, v41);
  v39 = v3;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v28 + 48))(&v39, v27, v28);
  if ((v30 & 0x100) != 0)
    goto LABEL_29;
  v5 = v29;
  v31 = v30;
  result = (id)outlined destroy of AnyAccessibilityAction((uint64_t)&v40);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (id)v5;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall AccessibilityNode._accessibilityRoleDescription()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  Class v11;
  char v12;
  uint64_t v13;
  NSString *v14;
  void *v15;
  void *v16;
  id v17;
  objc_class *v18;
  uint64_t v19;
  id v20;
  void *v21;
  objc_class *v22;
  uint64_t v23;
  void *v24;
  Swift::String_optional result;
  objc_super v26;
  uint64_t v27[2];

  AccessibilityNode.attachment.getter(v27);

  v1 = swift_bridgeObjectRetain();
  v2 = specialized AccessibilityProperties.subscript.getter(v1);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease_n();
  if (v8)
  {
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v2, v4, v6 & 1);
    v9 = AccessibilityNode.resolvedPlainText(_:)(v2, v4, v6, v8);
    v11 = v10;
    outlined consume of Text?(v2, v4, v6, v8);
    v12 = v6 & 1;
    if (v11)
    {
      outlined consume of Text.Storage(v2, v4, v12);
      swift_bridgeObjectRelease();
      v13 = ((unint64_t)v11 >> 56) & 0xF;
      if (((unint64_t)v11 & 0x2000000000000000) == 0)
        v13 = v9 & 0xFFFFFFFFFFFFLL;
      if (v13)
        goto LABEL_20;
    }
    else
    {
      outlined consume of Text.Storage(v2, v4, v12);
    }
    swift_bridgeObjectRelease();
  }
  v14 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
  v11 = NSClassFromString(v14);

  if (!v11)
  {
    v9 = 0;
    goto LABEL_20;
  }
  AccessibilityNode.platformElement.getter();
  if (!v15)
    goto LABEL_16;
  v16 = v15;
  v17 = objc_msgSend(v15, sel__accessibilityRoleDescription);

  if (!v17)
    goto LABEL_16;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v18;

  v19 = ((unint64_t)v11 >> 56) & 0xF;
  if (((unint64_t)v11 & 0x2000000000000000) == 0)
    v19 = v9 & 0xFFFFFFFFFFFFLL;
  if (!v19)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    v26.receiver = v0;
    v26.super_class = (Class)type metadata accessor for AccessibilityNode();
    v20 = objc_msgSendSuper2(&v26, sel__accessibilityRoleDescription);
    if (v20)
    {
      v21 = v20;
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v22;

    }
    else
    {
      v9 = 0;
      v11 = 0;
    }
  }
LABEL_20:
  v23 = v9;
  v24 = v11;
  result.value._object = v24;
  result.value._countAndFlagsBits = v23;
  return result;
}

double AccessibilityNode._accessibilityMinValue()(void (*a1)(__int128 *__return_ptr, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  double v5;
  double v6;
  uint64_t v8[2];
  id v9[6];
  __int128 v10;
  __int128 v11;

  AccessibilityNode.attachment.getter(v8);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, v9);
  v3 = swift_bridgeObjectRelease_n();
  if (!v9[5])
  {
    outlined destroy of TableRowList?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    v10 = 0u;
    v11 = 0u;
    goto LABEL_6;
  }
  a1(&v10, v3);
  outlined destroy of AccessibilityValueStorage((uint64_t)v9);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_6:
    outlined destroy of TableRowList?((uint64_t)&v10, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    return NAN;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
    return NAN;
  v4 = v9[0];
  objc_msgSend(v9[0], sel_doubleValue);
  v6 = v5;

  return v6;
}

double AccessibilityNode._accessibilityNumberValue()()
{
  uint64_t v0;
  void *v1;
  double v2;
  double v3;
  uint64_t v5[2];
  _OWORD v6[2];
  uint64_t v7;

  AccessibilityNode.attachment.getter(v5);

  v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, v6);
  swift_bridgeObjectRelease_n();
  if (!v7)
  {
    outlined destroy of TableRowList?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    return NAN;
  }
  v1 = (void *)AccessibilityValueStorage.platformNumberValue.getter();
  outlined destroy of AccessibilityValueStorage((uint64_t)v6);
  if (!v1)
    return NAN;
  objc_msgSend(v1, sel_doubleValue);
  v3 = v2;

  return v3;
}

uint64_t AccessibilityNode._accessibilityExpandedStatus()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t result;
  unint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _BYTE *v7;
  NSString *v8;
  Class v9;
  objc_super v10;
  uint64_t v11[2];
  _OWORD v12[2];
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  char v16;

  v1 = v0;
  AccessibilityNode.attachment.getter(v11);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, v12);
  swift_bridgeObjectRelease_n();
  if (!v13)
  {
    v4 = &lazy cache variable for type metadata for AccessibilityValueStorage?;
    v5 = MEMORY[0x1E0CE5E40];
    v6 = MEMORY[0x1E0DEB940];
    v7 = v12;
LABEL_9:
    outlined destroy of TableRowList?((uint64_t)v7, (uint64_t)v4, v5, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    goto LABEL_10;
  }
  outlined init with copy of TableRowList?((uint64_t)v12, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityValue?, MEMORY[0x1E0CE5030], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined destroy of AccessibilityValueStorage((uint64_t)v12);
  if (!v15)
  {
    v4 = &lazy cache variable for type metadata for AnyAccessibilityValue?;
    v5 = MEMORY[0x1E0CE5030];
    v6 = MEMORY[0x1E0DEB940];
    v7 = v14;
    goto LABEL_9;
  }
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  AnyAccessibilityValue.as<A>(_:)();
  outlined destroy of AnyAccessibilityValue((uint64_t)v14);
  if (v16 != 2)
  {
    if ((v16 & 1) != 0)
      return 1;
    else
      return 2;
  }
LABEL_10:
  v8 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
  v9 = NSClassFromString(v8);

  result = 0;
  if (v9)
  {
    v10.receiver = v1;
    v10.super_class = (Class)type metadata accessor for AccessibilityNode();
    return (uint64_t)objc_msgSendSuper2(&v10, sel__accessibilityExpandedStatus);
  }
  return result;
}

uint64_t AccessibilityNode.accessibilityDataTableCellElement(forRow:column:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  _QWORD v15[3];
  uint64_t v16;

  AccessibilityNode.attachment.getter((uint64_t *)&v11);

  v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, (uint64_t)&v11);
  swift_bridgeObjectRelease_n();
  if (v14)
  {
    if (v14 == 255)
      outlined destroy of TableRowList?((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    else
      outlined destroy of AccessibilityTableContext((uint64_t)&v11);
    return 0;
  }
  outlined init with take of OptionalBinaryInteger(&v11, (uint64_t)v15);
  outlined init with copy of TableColumnList((uint64_t)v15, (uint64_t)&v11);
  if (a1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
LABEL_16:
    *(_QWORD *)&v11 = a1;
    *((_QWORD *)&v11 + 1) = a2;
    v12 = 0;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    specialized AccessibilityCollectionViewTableDataSource.visitNodes<A>(applying:at:)((uint64_t *)&v11, a1);
    v5 = v12;
    goto LABEL_17;
  }
  __swift_project_boxed_opaque_existential_1(&v11, v13);
  v6 = AccessibilityCollectionViewTableDataSource.hasGlobalHeader.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  if (!v6)
    goto LABEL_16;
  v9 = a2;
  v10 = 0;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  specialized AccessibilityCollectionViewTableDataSource.visitHeaderNodes<A>(applying:)(&v9);
  v7 = v10;
  if (!v10)
  {
    v5 = 0;
    goto LABEL_17;
  }
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v5 = result;
    if (!result)
      goto LABEL_15;
  }
  else
  {
    v5 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v5)
    {
LABEL_15:
      swift_bridgeObjectRelease_n();
LABEL_17:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      return v5;
    }
  }
  if ((v7 & 0xC000000000000001) != 0)
  {
    v5 = MEMORY[0x18D75E3BC](0, v7);
    goto LABEL_15;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(_QWORD *)(v7 + 32);
    swift_unknownObjectRetain();
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityNode.accessibilityRowCount()(uint64_t (*a1)(void))
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5[2];
  unsigned __int8 v6;
  _QWORD v7[5];

  AccessibilityNode.attachment.getter((uint64_t *)v5);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v5);
  swift_bridgeObjectRelease_n();
  if (v6)
  {
    if (v6 == 255)
      outlined destroy of TableRowList?((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    else
      outlined destroy of AccessibilityTableContext((uint64_t)v5);
    return 0;
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v5, (uint64_t)v7);
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    v3 = a1();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return v3;
}

Swift::OpaquePointer_optional __swiftcall AccessibilityNode.accessibilityHeaderElements(forColumn:)(Swift::Int forColumn)
{
  uint64_t v2;
  Swift::Bool v3;
  void *v4;
  void *v5;
  __int128 v6[2];
  unsigned __int8 v7;
  _QWORD v8[5];
  Swift::OpaquePointer_optional result;

  AccessibilityNode.attachment.getter((uint64_t *)v6);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v6);
  swift_bridgeObjectRelease_n();
  if (v7)
  {
    if (v7 == 255)
      outlined destroy of TableRowList?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    else
      outlined destroy of AccessibilityTableContext((uint64_t)v6);
    v4 = 0;
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v6, (uint64_t)v8);
    v6[0] = (unint64_t)forColumn;
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    specialized AccessibilityCollectionViewTableDataSource.visitHeaderNodes<A>(applying:)(v6);
    v4 = (void *)*((_QWORD *)&v6[0] + 1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  v5 = v4;
  result.value._rawValue = v5;
  result.is_nil = v3;
  return result;
}

BOOL AccessibilityNode.CellVisitor.visit(node:)(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  BOOL v4;
  id v5;
  void *v6;
  uint64_t v7;

  v2 = v1;
  v4 = specialized AccessibilityNode.CellVisitor.isTargetCell(node:)((uint64_t)a1, *v1, v1[1]);
  if (v4)
  {
    AccessibilityNode.platformElement.getter();
    if (!v5)
      v5 = a1;
    v6 = v5;
    v7 = swift_dynamicCastObjCProtocolConditional();
    if (!v7)

    swift_unknownObjectRelease();
    v2[2] = v7;
  }
  return !v4;
}

BOOL AccessibilityNode.HeaderVisitor.visit(node:)(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  char v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v4 = specialized AccessibilityNode.HeaderVisitor.isTargetHeader(node:)((uint64_t)a1, *v2);
  if ((v4 & 1) != 0)
  {
    AccessibilityNode.platformElement.getter();
    if (!v5)
      v5 = a1;
    v6 = v5;
    v7 = swift_dynamicCastObjCProtocolConditional();
    if (v7)
    {
      v8 = v7;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_187BFF9C0;
      *(_QWORD *)(v9 + 32) = v8;
      v11 = v9;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      v2[1] = v11;
    }
    else
    {

    }
  }
  return (v4 & 1) == 0;
}

__C::_NSRange __swiftcall AccessibilityNode.accessibilityColumnRange()()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  objc_class *v4;
  uint64_t v5;
  Swift::Int v6;
  Swift::Int v7;
  __C::_NSRange result;
  void *v9;
  void *v10;
  char v11;
  objc_super v12;
  uint64_t v13[5];
  unsigned __int8 v14;

  AccessibilityNode.attachment.getter(v13);

  v1 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v1, (uint64_t)v13);
  swift_bridgeObjectRelease_n();
  if (v14 == 255)
    goto LABEL_9;
  outlined init with copy of TableRowList?((uint64_t)v13, (uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v11 == 1)
  {
    v2 = v10;
    v3 = 1;
    goto LABEL_10;
  }
  if (v11 == 2)
  {
    v2 = 0;
    v3 = (uint64_t)v10;
    goto LABEL_10;
  }
  if (v11 != 3)
  {
    outlined destroy of AccessibilityTableContext((uint64_t)&v9);
LABEL_9:
    v4 = (objc_class *)type metadata accessor for AccessibilityNode();
    v12.receiver = v0;
    v12.super_class = v4;
    v2 = objc_msgSendSuper2(&v12, sel_accessibilityColumnRange);
    v3 = v5;
    goto LABEL_10;
  }
  v2 = v9;
  v3 = 1;
LABEL_10:
  outlined destroy of TableRowList?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v6 = (Swift::Int)v2;
  v7 = v3;
  result.length = v7;
  result.location = v6;
  return result;
}

__C::_NSRange __swiftcall AccessibilityNode.accessibilityRowRange()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  objc_class *v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  __C::_NSRange result;
  _OWORD v16[2];
  char v17;
  char v18;
  objc_super v19;
  id v20[5];
  unsigned __int8 v21;

  v1 = (uint64_t)v0;
  AccessibilityNode.attachment.getter((uint64_t *)v20);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v20);
  swift_bridgeObjectRelease_n();
  if (v21 != 255)
  {
    outlined init with copy of TableRowList?((uint64_t)v20, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (v17 == 1 || v17 == 2)
    {
      v3 = *(_QWORD *)&v16[0];
      outlined destroy of TableRowList?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      v4 = 1;
      goto LABEL_16;
    }
    if (v17 == 3)
    {
      outlined destroy of TableRowList?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      v3 = 0;
      v4 = 1;
      goto LABEL_16;
    }
    outlined destroy of AccessibilityTableContext((uint64_t)v16);
  }
  outlined destroy of TableRowList?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v5 = MEMORY[0x18D760234](&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);
  if (!v5)
  {
LABEL_15:
    v11 = (objc_class *)type metadata accessor for AccessibilityNode();
    v19.receiver = v0;
    v19.super_class = v11;
    v3 = (Swift::Int)objc_msgSendSuper2(&v19, sel_accessibilityRowRange);
    v4 = v12;
    goto LABEL_16;
  }
  v6 = (void *)v5;
  AccessibilityNode.attachment.getter((uint64_t *)v20);
  v7 = v20[0];

  *(_QWORD *)&v16[0] = v7;
  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  v16[0] = *(_OWORD *)v20;
  v18 = 26;
  if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) == 0)
  {

    goto LABEL_15;
  }
  v8 = (unint64_t)static AccessibilityCore.queryChildren(element:options:)((uint64_t)v6, 2);
  specialized Collection<>.firstIndex(of:)(v1, v8);
  if ((v10 & 1) != 0)
    v9 = NSNotFound.getter();
  v3 = v9;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v4 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);

    swift_bridgeObjectRelease();
  }
LABEL_16:
  v13 = v3;
  v14 = v4;
  result.length = v14;
  result.location = v13;
  return result;
}

id AccessibilityNode._accessibilityIsFirstSibling(for:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  objc_class *v5;
  uint64_t v6[5];
  unsigned __int8 v7;
  objc_super v8;

  if (a1 == 2)
  {
    AccessibilityNode.attachment.getter(v6);

    v3 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v3, (uint64_t)v6);
    swift_bridgeObjectRelease_n();
    if (v7 == 3)
      return (id)(v6[0] == 0);
    if (v7 == 255)
      outlined destroy of TableRowList?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    else
      outlined destroy of AccessibilityTableContext((uint64_t)v6);
  }
  v5 = (objc_class *)type metadata accessor for AccessibilityNode();
  v8.receiver = v1;
  v8.super_class = v5;
  return objc_msgSendSuper2(&v8, sel__accessibilityIsFirstSiblingForType_, a1);
}

Swift::String_optional __swiftcall AccessibilityNode._accessibilityDataSeriesName()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String_optional result;
  _BYTE v14[312];
  _BYTE v15[312];
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;

  AccessibilityNode.attachment.getter(&v16);

  v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)v14);
  swift_bridgeObjectRelease_n();
  v1 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?((uint64_t)v14, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)&v16, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v1);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)&v16) == 1)
    goto LABEL_5;
  v2 = v16;
  v3 = (uint64_t)v17;
  v4 = v18;
  v5 = v19;
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v2, v3, v4);
  v6 = (void *)AccessibilityNode.resolvedAttributedText(_:includeDefaultAttributes:)(v2, v3, v4, v5);
  outlined consume of Text.Storage(v2, v3, v4);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v15);
LABEL_5:
    v8 = 0;
    v10 = 0;
    goto LABEL_6;
  }
  v7 = objc_msgSend(v6, sel_string);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v15);
LABEL_6:
  v11 = v8;
  v12 = v10;
  result.value._object = v12;
  result.value._countAndFlagsBits = v11;
  return result;
}

uint64_t AccessibilityNode._accessibilityDataSeriesType()()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[312];
  _BYTE v4[312];
  uint64_t v5[4];
  unsigned __int8 v6;

  AccessibilityNode.attachment.getter(v5);

  v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)v3);
  swift_bridgeObjectRelease_n();
  v1 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?((uint64_t)v3, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined init with take of Image.Resolved?((uint64_t)v4, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v1);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v5) == 1)
    return 0;
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v4);
  return v6;
}

Swift::Double __swiftcall AccessibilityNode._accessibilityDataSeriesSonificationDuration()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Double result;
  _BYTE v3[312];
  _BYTE v4[312];
  uint64_t v5[6];
  char v6;

  AccessibilityNode.attachment.getter(v5);

  v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)v3);
  swift_bridgeObjectRelease_n();
  v1 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?((uint64_t)v3, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined init with take of Image.Resolved?((uint64_t)v4, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v1);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v5) == 1)
    return 0.0;
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v4);
  result = 6.0;
  if ((v6 & 1) == 0)
    return *(double *)&v5[5];
  return result;
}

unint64_t AccessibilityNode._accessibilityDataSeriesValues(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[112];
  _QWORD v11[16];
  _BYTE v12[312];
  _BYTE v13[312];
  uint64_t v14[7];
  uint64_t v15;
  uint64_t v16;

  AccessibilityNode.attachment.getter(v14);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v12);
  swift_bridgeObjectRelease_n();
  v3 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?((uint64_t)v12, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined init with take of Image.Resolved?((uint64_t)v13, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v14) == 1)
    return 0;
  if (a1 == 1)
  {
    v4 = &v16;
  }
  else
  {
    if (a1)
    {
LABEL_7:
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v13);
      return 0;
    }
    v4 = &v15;
  }
  v5 = MEMORY[0x1E0CE67F0];
  outlined init with take of Image.Resolved?((uint64_t)v4, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E0CE67F0]);
  outlined init with take of Image.Resolved?((uint64_t)v11, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v10) == 1)
    goto LABEL_7;
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  v8 = swift_bridgeObjectRetain();
  v6 = specialized _arrayForceCast<A, B>(_:)(v8);
  swift_bridgeObjectRelease();
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v13);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  swift_bridgeObjectRelease();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v6;
}

Class @objc AccessibilityNode._accessibilityDataSeriesGridlinePositions(for:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  id v6;
  uint64_t v7;
  NSArray v8;

  v6 = a1;
  v7 = a4(a3);

  if (v7)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.isa = 0;
  }
  return v8.super.isa;
}

uint64_t AccessibilityNode._accessibilityDataSeriesTitle(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[16];
  _BYTE v19[312];
  _BYTE v20[312];
  uint64_t v21[7];
  uint64_t v22;
  uint64_t v23;

  AccessibilityNode.attachment.getter(v21);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v19);
  swift_bridgeObjectRelease_n();
  v3 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?((uint64_t)v19, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined init with take of Image.Resolved?((uint64_t)v20, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v21) == 1)
    return 0;
  if (a1 == 1)
  {
    v4 = &v23;
  }
  else
  {
    if (a1)
    {
LABEL_11:
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v20);
      return 0;
    }
    v4 = &v22;
  }
  v5 = MEMORY[0x1E0CE67F0];
  outlined init with take of Image.Resolved?((uint64_t)v4, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E0CE67F0]);
  outlined init with take of Image.Resolved?((uint64_t)v18, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v15) == 1)
    goto LABEL_11;
  v6 = v17;
  if (!v17)
    goto LABEL_11;
  v7 = v15[0];
  v8 = v15[1];
  v9 = v16;
  v10 = v16 & 1;
  swift_bridgeObjectRetain();
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined copy of Text?(v7, v8, v9, v6);
  outlined copy of Text.Storage(v7, v8, v10);
  v11 = (void *)AccessibilityNode.resolvedAttributedText(_:includeDefaultAttributes:)(v7, v8, v9, v6);
  outlined consume of Text?(v7, v8, v9, v6);
  if (!v11)
  {
    outlined consume of Text.Storage(v7, v8, v9 & 1);
    swift_bridgeObjectRelease();
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    goto LABEL_11;
  }
  v12 = objc_msgSend(v11, sel_string);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  outlined consume of Text.Storage(v7, v8, v9 & 1);
  swift_bridgeObjectRelease();
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v20);
  return v13;
}

uint64_t AccessibilityNode._accessibilityDataSeriesUnitLabel(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  void *v11;
  id v12;
  uint64_t v13;
  _BYTE v15[32];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[16];
  _BYTE v21[312];
  _BYTE v22[312];
  uint64_t v23[7];
  uint64_t v24;
  uint64_t v25;

  AccessibilityNode.attachment.getter(v23);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v21);
  swift_bridgeObjectRelease_n();
  v3 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?((uint64_t)v21, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined init with take of Image.Resolved?((uint64_t)v22, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v23) == 1)
    return 0;
  if (a1 == 1)
  {
    v4 = &v25;
  }
  else
  {
    if (a1)
    {
LABEL_11:
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v22);
      return 0;
    }
    v4 = &v24;
  }
  v5 = MEMORY[0x1E0CE67F0];
  outlined init with take of Image.Resolved?((uint64_t)v4, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E0CE67F0]);
  outlined init with take of Image.Resolved?((uint64_t)v20, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v15) == 1)
    goto LABEL_11;
  v6 = v19;
  if (!v19)
    goto LABEL_11;
  v7 = v16;
  v8 = v17;
  v9 = v18;
  v10 = v18 & 1;
  swift_bridgeObjectRetain();
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined copy of Text?(v7, v8, v9, v6);
  outlined copy of Text.Storage(v7, v8, v10);
  v11 = (void *)AccessibilityNode.resolvedAttributedText(_:includeDefaultAttributes:)(v7, v8, v9, v6);
  outlined consume of Text?(v7, v8, v9, v6);
  if (!v11)
  {
    outlined consume of Text.Storage(v7, v8, v9 & 1);
    swift_bridgeObjectRelease();
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    goto LABEL_11;
  }
  v12 = objc_msgSend(v11, sel_string);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  outlined consume of Text.Storage(v7, v8, v9 & 1);
  swift_bridgeObjectRelease();
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v22);
  return v13;
}

id @objc AccessibilityNode._accessibilityDataSeriesTitle(for:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v6 = a1;
  v7 = a4(a3);
  v9 = v8;

  if (v9)
  {
    v10 = (void *)MEMORY[0x18D75CC88](v7, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  return v10;
}

Class AccessibilityNode._accessibilityDataSeriesMinimumValue(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  Class isa;
  _BYTE v8[128];
  _BYTE v9[128];
  _BYTE v10[312];
  _BYTE v11[312];
  uint64_t v12[7];
  uint64_t v13;
  uint64_t v14;

  AccessibilityNode.attachment.getter(v12);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v10);
  swift_bridgeObjectRelease_n();
  v3 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?((uint64_t)v10, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined init with take of Image.Resolved?((uint64_t)v11, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v12) == 1)
    return 0;
  if (a1 == 1)
  {
    v4 = &v14;
    goto LABEL_6;
  }
  if (!a1)
  {
    v4 = &v13;
LABEL_6:
    v5 = MEMORY[0x1E0CE67F0];
    outlined init with take of Image.Resolved?((uint64_t)v4, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E0CE67F0]);
    outlined init with take of Image.Resolved?((uint64_t)v9, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
    if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v8) != 1
      && (v8[80] & 1) == 0)
    {
      isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v11);
      return isa;
    }
  }
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v11);
  return 0;
}

Class AccessibilityNode._accessibilityDataSeriesMaximumValue(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  Class isa;
  _BYTE v8[128];
  _BYTE v9[128];
  _BYTE v10[312];
  _BYTE v11[312];
  uint64_t v12[7];
  uint64_t v13;
  uint64_t v14;

  AccessibilityNode.attachment.getter(v12);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v10);
  swift_bridgeObjectRelease_n();
  v3 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?((uint64_t)v10, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined init with take of Image.Resolved?((uint64_t)v11, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v12) == 1)
    return 0;
  if (a1 == 1)
  {
    v4 = &v14;
    goto LABEL_6;
  }
  if (!a1)
  {
    v4 = &v13;
LABEL_6:
    v5 = MEMORY[0x1E0CE67F0];
    outlined init with take of Image.Resolved?((uint64_t)v4, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E0CE67F0]);
    outlined init with take of Image.Resolved?((uint64_t)v9, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
    if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v8) != 1
      && (v8[96] & 1) == 0)
    {
      isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v11);
      return isa;
    }
  }
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v11);
  return 0;
}

uint64_t AccessibilityNode._accessibilityDataSeriesGridlinePositions(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[104];
  uint64_t v10;
  _QWORD v11[16];
  _BYTE v12[312];
  _BYTE v13[312];
  uint64_t v14[7];
  uint64_t v15;
  uint64_t v16;

  AccessibilityNode.attachment.getter(v14);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v12);
  swift_bridgeObjectRelease_n();
  v3 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?((uint64_t)v12, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined init with take of Image.Resolved?((uint64_t)v13, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v14) == 1)
    return 0;
  if (a1 == 1)
  {
    v4 = &v16;
  }
  else
  {
    if (a1)
    {
LABEL_9:
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v13);
      return 0;
    }
    v4 = &v15;
  }
  v5 = MEMORY[0x1E0CE67F0];
  outlined init with take of Image.Resolved?((uint64_t)v4, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E0CE67F0]);
  outlined init with take of Image.Resolved?((uint64_t)v11, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v9) == 1
    || !*(_QWORD *)(v10 + 16))
  {
    goto LABEL_9;
  }
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  v6 = swift_bridgeObjectRetain();
  v7 = specialized _arrayForceCast<A, B>(_:)(v6);
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v13);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t AccessibilityNode._accessibilityDataSeriesValueDescription(forPosition:axis:)(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  id v18;
  _BYTE v19[120];
  uint64_t v20;
  _QWORD v21[16];
  _BYTE v22[312];
  _BYTE v23[312];
  uint64_t v24[7];
  uint64_t v25;
  uint64_t v26;

  AccessibilityNode.attachment.getter(v24);

  v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, (uint64_t)v22);
  swift_bridgeObjectRelease_n();
  v5 = MEMORY[0x1E0CE6800];
  outlined init with take of Image.Resolved?((uint64_t)v22, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E0CE6800]);
  outlined init with take of Image.Resolved?((uint64_t)v23, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v5);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v24) == 1)
    return 0;
  if (a1 == 1)
  {
    v6 = &v26;
  }
  else
  {
    if (a1)
    {
LABEL_15:
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v23);
      return 0;
    }
    v6 = &v25;
  }
  v7 = MEMORY[0x1E0CE67F0];
  outlined init with take of Image.Resolved?((uint64_t)v6, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E0CE67F0]);
  outlined init with take of Image.Resolved?((uint64_t)v21, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v7);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v19) == 1)
    goto LABEL_15;
  v8 = *(_QWORD *)(v20 + 16);
  if (!v8)
    goto LABEL_15;
  v9 = (double *)(v20 + 72);
  while (*(v9 - 1) > a2 || *v9 <= a2)
  {
    v9 += 6;
    if (!--v8)
      goto LABEL_15;
  }
  v13 = *((_QWORD *)v9 - 5);
  v14 = *((_QWORD *)v9 - 4);
  v15 = *((_BYTE *)v9 - 24);
  v16 = *((_QWORD *)v9 - 2);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v13, v14, v15);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v13, v14, v15);
  v17 = (void *)AccessibilityNode.resolvedAttributedText(_:includeDefaultAttributes:)(v13, v14, v15, v16);
  outlined consume of Text.Storage(v13, v14, v15);
  swift_bridgeObjectRelease();
  if (v17)
  {
    v18 = objc_msgSend(v17, sel_string);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    outlined consume of Text.Storage(v13, v14, v15);
    swift_bridgeObjectRelease();
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v23);
    return v11;
  }
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v23);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined consume of Text.Storage(v13, v14, v15);
  swift_bridgeObjectRelease();
  return 0;
}

Class @objc AccessibilityNode._accessibilityNodeChildrenUnsorted.getter(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v6;
  _QWORD *v7;
  Class isa;

  v6 = a1;
  v7 = static AccessibilityCore.queryChildren(element:options:)((uint64_t)v6, a3);
  swift_getKeyPath();
  swift_retain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_yps5NeverOTg503_s7d4UI17fg16CAA08PlatformC15b35Protocol_So8NSObjectCXcIeggo_ACyps5H11OIegnrzr_TRAhF0lfbN0_So0P0CXcIeggo_Tf1cn_nTf4ng_n((unint64_t)v7, a4);

  swift_bridgeObjectRelease();
  swift_release_n();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t implicit closure #1 in AccessibilityNode._accessibilityNodeChildrenUnsorted.getter(void *a1)
{
  id v1;
  uint64_t v3;

  v1 = a1;
  swift_getAtKeyPath();

  return v3;
}

char *specialized Sequence<>.resolved(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  id v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  _QWORD v81[2];
  char *v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  void *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  __int16 v114;
  _OWORD v115[2];
  _OWORD v116[8];
  _OWORD v117[2];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unsigned __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[19];
  uint64_t v129;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE6B88], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v81 - v8;
  v10 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v118 = a1;
  *((_QWORD *)&v118 + 1) = a2;
  v14 = type metadata accessor for Text.Style();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  v96 = a2;
  swift_retain();
  swift_retain();
  default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)();
  v82 = v13;
  ImageResolutionContext.init(environment:textStyle:transaction:)();
  v129 = MEMORY[0x1E0DEE9E8];
  v99 = *(_QWORD *)(a3 + 16);
  if (!v99)
  {
    v17 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_36;
  }
  v98 = a3 + 32;
  v15 = *MEMORY[0x1E0DC44F8];
  v81[0] = a3;
  v81[1] = v15;
  swift_bridgeObjectRetain();
  v16 = 0;
  v17 = (char *)MEMORY[0x1E0DEE9D8];
  v91 = a1;
  do
  {
    v21 = (_QWORD *)(v98 + 48 * v16);
    v22 = v21[3];
    v23 = v21[4];
    __swift_project_boxed_opaque_existential_1(v21, v22);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    if (v27)
    {
      v28 = v24;
      v29 = v25;
      *(_QWORD *)&v118 = a1;
      *((_QWORD *)&v118 + 1) = v96;
      v115[0] = 0uLL;
      v30 = v26;
      LOBYTE(v101) = v26 & 1;
      v31 = (void *)static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
      if (v31)
      {
        v32 = v31;
        v97 = v30;
        if ((uint64_t)objc_msgSend(v31, sel_length) > 0)
        {
          v95 = v29;
          v33 = v129;
          swift_bridgeObjectRetain();
          v34 = v32;
          v35 = NSObject.hashValue.getter();

          if (*(_QWORD *)(v33 + 16))
          {
            v36 = static Hasher._hash(seed:_:)();
            v37 = -1 << *(_BYTE *)(v33 + 32);
            v38 = v36 & ~v37;
            if (((*(_QWORD *)(v33 + 56 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) != 0)
            {
              v39 = *(_QWORD *)(v33 + 48);
              if (*(_QWORD *)(v39 + 8 * v38) == v35)
              {
LABEL_16:
                v41 = v28;
                v42 = v97 & 1;

                swift_bridgeObjectRelease();
                outlined consume of Text.Storage(v41, v95, v42);
LABEL_33:
                a1 = v91;
                goto LABEL_5;
              }
              v40 = ~v37;
              while (1)
              {
                v38 = (v38 + 1) & v40;
                if (((*(_QWORD *)(v33 + 56 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
                  break;
                if (*(_QWORD *)(v39 + 8 * v38) == v35)
                  goto LABEL_16;
              }
            }
          }
          v94 = v17;
          swift_bridgeObjectRelease();
          v43 = v34;
          v44 = NSObject.hashValue.getter();

          specialized Set._Variant.insert(_:)((uint64_t *)&v118, v44);
          v45 = v21[3];
          v46 = v21[4];
          __swift_project_boxed_opaque_existential_1(v21, v45);
          v47 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v46 + 24);
          v93 = v43;
          v47(&v118, v45, v46);
          v48 = v118;
          v49 = v119;
          v50 = *((_QWORD *)&v119 + 1);
          if (*((_QWORD *)&v119 + 1))
          {
            if (*((_QWORD *)&v119 + 1) == 1)
            {
              v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v61 = v60;
              v54 = *((_QWORD *)&v48 + 1);
              v53 = v48;
              v55 = v61;
              v56 = v49;
              v57 = 1;
              goto LABEL_25;
            }
            if (*((_QWORD *)&v119 + 1) != 2)
            {
              v90 = v119 & 1;
              *(_QWORD *)&v115[0] = v91;
              *((_QWORD *)&v115[0] + 1) = v96;
              v101 = 0;
              v102 = 0;
              outlined copy of Text.Storage(v118, *((uint64_t *)&v118 + 1), v119 & 1);
              swift_bridgeObjectRetain();
              v100 = v49 & 1;
              v92 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
              v52 = v51;
              outlined consume of Text.Storage(v48, *((uint64_t *)&v48 + 1), v90);
              swift_bridgeObjectRelease();
              v54 = *((_QWORD *)&v48 + 1);
              v53 = v48;
              v55 = v52;
              v56 = v49;
              v57 = v50;
LABEL_25:
              outlined consume of AccessibilityActionCategory?(v53, v54, v56, v57);
              goto LABEL_26;
            }
          }
          else
          {
            outlined consume of AccessibilityActionCategory?(v118, *((uint64_t *)&v118 + 1), v119, 0);
          }
          v92 = 0;
          v55 = 0;
LABEL_26:
          v62 = v21[3];
          v63 = v21[4];
          __swift_project_boxed_opaque_existential_1(v21, v62);
          v64 = *(uint64_t (**)(uint64_t, uint64_t))(v63 + 16);
          swift_bridgeObjectRetain();
          v65 = v64(v62, v63);
          if (v65)
          {
            Image.resolve(in:)();
            swift_release();
            v116[6] = v126;
            v116[7] = v127;
            v117[0] = *(_OWORD *)v128;
            *(_DWORD *)((char *)v117 + 15) = *(_DWORD *)&v128[15];
            v116[2] = v122;
            v116[3] = v123;
            v116[4] = v124;
            v116[5] = v125;
            v115[0] = v118;
            v115[1] = v119;
            v116[0] = v120;
            v116[1] = v121;
            v66 = (void *)v118;
            v67 = v120;
            v68 = BYTE8(v120);
            v69 = *(_QWORD *)((char *)v116 + 12);
            v89 = v55;
            v90 = v28;
            v70 = v121 >> 32;
            v71 = BYTE12(v121);
            v87 = v122;
            v88 = v119;
            v86 = *((_QWORD *)&v123 + 1);
            v72 = v123;
            v84 = BYTE1(v124);
            v85 = v124;
            v83 = WORD1(v124);
            v73 = BYTE8(v118);
            outlined copy of GraphicsImage.Contents?((id)v118, SBYTE8(v118));
            outlined release of Image.Resolved((uint64_t)v115);
            v101 = v66;
            LOBYTE(v102) = v73;
            v103 = v88;
            v104 = v67;
            v105 = v68;
            v106 = v69;
            v107 = v70;
            v108 = v71;
            v109 = v87;
            v110 = v72;
            v55 = v89;
            v28 = v90;
            v111 = v86;
            v112 = v85;
            v113 = v84;
            v114 = v83;
            v65 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(1, 0, 0);
            outlined consume of GraphicsImage.Contents?(v66, v73);
          }
          swift_bridgeObjectRelease();
          v74 = v93;

          v17 = v94;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
          v76 = *((_QWORD *)v17 + 2);
          v75 = *((_QWORD *)v17 + 3);
          if (v76 >= v75 >> 1)
            v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, v17);
          v77 = v97 & 1;
          *((_QWORD *)v17 + 2) = v76 + 1;
          v78 = &v17[32 * v76];
          v79 = v92;
          *((_QWORD *)v78 + 4) = v74;
          *((_QWORD *)v78 + 5) = v79;
          *((_QWORD *)v78 + 6) = v55;
          *((_QWORD *)v78 + 7) = v65;
          outlined consume of Text.Storage(v28, v95, v77);

          goto LABEL_33;
        }
        v58 = v28;
        v59 = v97 & 1;

        v19 = v58;
        v20 = v29;
        v18 = v59;
      }
      else
      {
        v18 = v30 & 1;
        v19 = v28;
        v20 = v29;
      }
      outlined consume of Text.Storage(v19, v20, v18);
LABEL_5:
      swift_bridgeObjectRelease();
    }
    ++v16;
  }
  while (v16 != v99);
  swift_bridgeObjectRelease();
LABEL_36:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v82, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE5448]);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_18756B08C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityNode.applyProperties(to:includingRelations:)()
{
  uint64_t v0;

  return closure #1 in AccessibilityNode.applyProperties(to:includingRelations:)(v0);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(char **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  char *v53;
  char *v54;
  Swift::Int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char **v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  Swift::Int v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  void (*v141)(char *, char *, uint64_t);
  char *v142;
  char *v143;
  uint64_t v144;
  char **v145;
  char *v146;
  Swift::Int v147;
  uint64_t v148;
  uint64_t v149;

  v3 = type metadata accessor for IndexPath();
  v149 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v135 = (char *)&v131 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v146 = (char *)&v131 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v143 = (char *)&v131 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v142 = (char *)&v131 - v14;
  v15 = (Swift::Int)a1[1];
  v16 = _minimumMergeRunLength(_:)(v15);
  if (v16 >= v15)
  {
    if (v15 < 0)
      goto LABEL_141;
    if (v15)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v15, 1, a1);
    return;
  }
  if (v15 >= 0)
    v17 = v15;
  else
    v17 = v15 + 1;
  if (v15 < -1)
    goto LABEL_149;
  v145 = a1;
  v132 = v16;
  v138 = v1;
  if (v15 < 2)
  {
    v21 = (char *)MEMORY[0x1E0DEE9D8];
    v137 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80));
    v131 = MEMORY[0x1E0DEE9D8];
    if (v15 != 1)
    {
      v23 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_107:
      if (v23 >= 2)
      {
        v124 = *v145;
        do
        {
          v125 = v23 - 2;
          if (v23 < 2)
            goto LABEL_136;
          if (!v124)
            goto LABEL_148;
          v126 = *(_QWORD *)&v21[16 * v125 + 32];
          v127 = *(_QWORD *)&v21[16 * v23 + 24];
          v128 = v138;
          specialized _merge<A>(low:mid:high:buffer:by:)((unint64_t)&v124[*(_QWORD *)(v149 + 72) * v126], (unint64_t)&v124[*(_QWORD *)(v149 + 72) * *(_QWORD *)&v21[16 * v23 + 16]], (unint64_t)&v124[*(_QWORD *)(v149 + 72) * v127], v137);
          v138 = v128;
          if (v128)
            break;
          if (v127 < v126)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v21 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v21);
          if (v125 >= *((_QWORD *)v21 + 2))
            goto LABEL_138;
          v129 = &v21[16 * v125 + 32];
          *(_QWORD *)v129 = v126;
          *((_QWORD *)v129 + 1) = v127;
          v130 = *((_QWORD *)v21 + 2);
          if (v23 > v130)
            goto LABEL_139;
          memmove(&v21[16 * v23 + 16], &v21[16 * v23 + 32], 16 * (v130 - v23));
          *((_QWORD *)v21 + 2) = v130 - 1;
          v23 = v130 - 1;
        }
        while (v130 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v131 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v18 = v17 >> 1;
    v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v19 + 16) = v18;
    v20 = *(unsigned __int8 *)(v149 + 80);
    v131 = v19;
    v137 = v19 + ((v20 + 32) & ~v20);
  }
  v22 = 0;
  v21 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v24 = v22;
    v25 = v22 + 1;
    v136 = v22;
    if (v22 + 1 >= v15)
    {
      v36 = v22 + 1;
      v45 = v138;
      goto LABEL_58;
    }
    v26 = *v145;
    v147 = v15;
    v27 = v149;
    v28 = *(_QWORD *)(v149 + 72);
    v29 = *(void (**)(_QWORD, _QWORD, _QWORD))(v149 + 16);
    v30 = v142;
    v29(v142, &v26[v28 * v25], v3);
    v31 = &v26[v28 * v24];
    v32 = v143;
    v29(v143, v31, v3);
    v144 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1678]);
    LODWORD(v141) = dispatch thunk of static Comparable.< infix(_:_:)();
    v33 = *(void (**)(_QWORD, _QWORD))(v27 + 8);
    v34 = v32;
    v24 = v136;
    v33(v34, v3);
    v33(v30, v3);
    v35 = v26;
    v36 = v24 + 2;
    v139 = v35;
    v148 = v28;
    if (v24 + 2 >= v147)
    {
      v45 = v138;
      v44 = v147;
      v43 = v28;
      if ((v141 & 1) == 0)
        break;
    }
    else
    {
      v133 = v21;
      v140 = v28 * v25;
      v37 = v35;
      v38 = v28 * v36;
      do
      {
        v39 = v36;
        v40 = v142;
        v29(v142, &v37[v38], v3);
        v41 = v143;
        v29(v143, &v37[v140], v3);
        v42 = dispatch thunk of static Comparable.< infix(_:_:)();
        v33(v41, v3);
        v33(v40, v3);
        if (((v141 ^ v42) & 1) != 0)
        {
          v45 = v138;
          v21 = v133;
          v36 = v39;
          v24 = v136;
          v44 = v147;
          v43 = v148;
          if ((v141 & 1) == 0)
            goto LABEL_38;
          goto LABEL_26;
        }
        v36 = v39 + 1;
        v43 = v148;
        v37 += v148;
      }
      while (v147 != v39 + 1);
      v44 = v147;
      v36 = v147;
      v45 = v138;
      v21 = v133;
      v24 = v136;
      if ((v141 & 1) == 0)
        break;
    }
LABEL_26:
    if (v36 < v24)
      goto LABEL_142;
    if (v24 >= v36)
      break;
    v133 = v21;
    v46 = 0;
    v47 = v43 * (v36 - 1);
    v48 = v36 * v43;
    v49 = v24;
    v50 = v24 * v43;
    v51 = v145;
    v144 = v36;
    do
    {
      if (v49 != v36 + v46 - 1)
      {
        if (!v139)
          goto LABEL_147;
        v52 = v45;
        v53 = &v139[v50];
        v54 = &v139[v47];
        v141 = *(char **)(v149 + 32);
        ((void (*)(char *, char *, uint64_t))v141)(v135, &v139[v50], v3);
        if (v50 < v47 || v53 >= &v139[v48])
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v50 != v47)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        ((void (*)(char *, char *, uint64_t))v141)(v54, v135, v3);
        v45 = v52;
        v36 = v144;
        v51 = v145;
        v43 = v148;
      }
      ++v49;
      --v46;
      v47 -= v43;
      v48 -= v43;
      v50 += v43;
    }
    while (v49 < v36 + v46);
    v21 = v133;
    v24 = v136;
    v44 = v147;
    if (v36 < v147)
      goto LABEL_41;
LABEL_58:
    if (v36 < v24)
      goto LABEL_135;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v138 = v45;
    v144 = v36;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
    v73 = *((_QWORD *)v21 + 2);
    v72 = *((_QWORD *)v21 + 3);
    v23 = v73 + 1;
    if (v73 >= v72 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v21);
    *((_QWORD *)v21 + 2) = v23;
    v74 = v21 + 32;
    v75 = &v21[16 * v73 + 32];
    v76 = v144;
    *(_QWORD *)v75 = v24;
    *((_QWORD *)v75 + 1) = v76;
    if (v73)
    {
      while (1)
      {
        v77 = v23 - 1;
        if (v23 >= 4)
        {
          v82 = &v74[16 * v23];
          v83 = *((_QWORD *)v82 - 8);
          v84 = *((_QWORD *)v82 - 7);
          v88 = __OFSUB__(v84, v83);
          v85 = v84 - v83;
          if (v88)
            goto LABEL_124;
          v87 = *((_QWORD *)v82 - 6);
          v86 = *((_QWORD *)v82 - 5);
          v88 = __OFSUB__(v86, v87);
          v80 = v86 - v87;
          v81 = v88;
          if (v88)
            goto LABEL_125;
          v89 = v23 - 2;
          v90 = &v74[16 * v23 - 32];
          v92 = *(_QWORD *)v90;
          v91 = *((_QWORD *)v90 + 1);
          v88 = __OFSUB__(v91, v92);
          v93 = v91 - v92;
          if (v88)
            goto LABEL_127;
          v88 = __OFADD__(v80, v93);
          v94 = v80 + v93;
          if (v88)
            goto LABEL_130;
          if (v94 >= v85)
          {
            v112 = &v74[16 * v77];
            v114 = *(_QWORD *)v112;
            v113 = *((_QWORD *)v112 + 1);
            v88 = __OFSUB__(v113, v114);
            v115 = v113 - v114;
            if (v88)
              goto LABEL_134;
            v105 = v80 < v115;
            goto LABEL_95;
          }
        }
        else
        {
          if (v23 != 3)
          {
            v106 = *((_QWORD *)v21 + 4);
            v107 = *((_QWORD *)v21 + 5);
            v88 = __OFSUB__(v107, v106);
            v99 = v107 - v106;
            v100 = v88;
            goto LABEL_89;
          }
          v79 = *((_QWORD *)v21 + 4);
          v78 = *((_QWORD *)v21 + 5);
          v88 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          v81 = v88;
        }
        if ((v81 & 1) != 0)
          goto LABEL_126;
        v89 = v23 - 2;
        v95 = &v74[16 * v23 - 32];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v98 = __OFSUB__(v96, v97);
        v99 = v96 - v97;
        v100 = v98;
        if (v98)
          goto LABEL_129;
        v101 = &v74[16 * v77];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v88 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v88)
          goto LABEL_132;
        if (__OFADD__(v99, v104))
          goto LABEL_133;
        if (v99 + v104 >= v80)
        {
          v105 = v80 < v104;
LABEL_95:
          if (v105)
            v77 = v89;
          goto LABEL_97;
        }
LABEL_89:
        if ((v100 & 1) != 0)
          goto LABEL_128;
        v108 = &v74[16 * v77];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v88 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v88)
          goto LABEL_131;
        if (v111 < v99)
          goto LABEL_14;
LABEL_97:
        v116 = v77 - 1;
        if (v77 - 1 >= v23)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!*v145)
          goto LABEL_146;
        v117 = v21;
        v118 = &v74[16 * v116];
        v119 = *(_QWORD *)v118;
        v120 = &v74[16 * v77];
        v121 = *((_QWORD *)v120 + 1);
        v122 = v138;
        specialized _merge<A>(low:mid:high:buffer:by:)((unint64_t)&(*v145)[*(_QWORD *)(v149 + 72) * *(_QWORD *)v118], (unint64_t)&(*v145)[*(_QWORD *)(v149 + 72) * *(_QWORD *)v120], (unint64_t)&(*v145)[*(_QWORD *)(v149 + 72) * v121], v137);
        v138 = v122;
        if (v122)
          goto LABEL_118;
        if (v121 < v119)
          goto LABEL_121;
        if (v77 > *((_QWORD *)v117 + 2))
          goto LABEL_122;
        *(_QWORD *)v118 = v119;
        *(_QWORD *)&v74[16 * v116 + 8] = v121;
        v123 = *((_QWORD *)v117 + 2);
        if (v77 >= v123)
          goto LABEL_123;
        v21 = v117;
        v23 = v123 - 1;
        memmove(&v74[16 * v77], v120 + 16, 16 * (v123 - 1 - v77));
        *((_QWORD *)v117 + 2) = v123 - 1;
        if (v123 <= 2)
          goto LABEL_14;
      }
    }
    v23 = 1;
LABEL_14:
    v15 = (Swift::Int)v145[1];
    v22 = v144;
    if (v144 >= v15)
      goto LABEL_107;
  }
LABEL_38:
  v51 = v145;
  if (v36 >= v44)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v36, v24))
    goto LABEL_140;
  if (v36 - v24 >= v132)
    goto LABEL_58;
  if (__OFADD__(v24, v132))
    goto LABEL_143;
  if (v24 + v132 >= v44)
    v55 = v44;
  else
    v55 = v24 + v132;
  if (v55 >= v24)
  {
    if (v36 != v55)
    {
      v133 = v21;
      v134 = v55;
      v56 = *(_QWORD *)(v149 + 72);
      v57 = *(char **)(v149 + 16);
      v138 = v45;
      v139 = v57;
      v58 = v56 * (v36 - 1);
      v140 = v56;
      v148 = v36 * v56;
      do
      {
        v60 = 0;
        v144 = v36;
        v141 = (char *)v58;
        while (1)
        {
          v147 = v24;
          v61 = *v51;
          v62 = v142;
          v63 = v51;
          v64 = (void (*)(_QWORD, _QWORD, _QWORD))v139;
          ((void (*)(char *, char *, uint64_t))v139)(v142, &(*v51)[v148 + v60], v3);
          v65 = &v61[v58 + v60];
          v66 = v143;
          v64(v143, v65, v3);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1678]);
          LOBYTE(v61) = dispatch thunk of static Comparable.< infix(_:_:)();
          v67 = *(void (**)(_QWORD, _QWORD))(v149 + 8);
          v67(v66, v3);
          v67(v62, v3);
          if ((v61 & 1) == 0)
            break;
          v68 = *v63;
          if (!*v63)
            goto LABEL_145;
          v58 = (uint64_t)v141;
          v69 = &v141[(_QWORD)v68 + v60];
          v70 = *(void (**)(_QWORD, _QWORD, _QWORD))(v149 + 32);
          v70(v146, &v68[v148 + v60], v3);
          swift_arrayInitWithTakeFrontToBack();
          v70(v69, v146, v3);
          v60 -= v140;
          v24 = v147 + 1;
          v59 = v144;
          v51 = v145;
          if (v144 == v147 + 1)
            goto LABEL_51;
        }
        v59 = v144;
        v51 = v63;
        v58 = (uint64_t)v141;
LABEL_51:
        v36 = v59 + 1;
        v58 += v140;
        v148 += v140;
        v24 = v136;
      }
      while (v36 != v134);
      v36 = v134;
      v45 = v138;
      v21 = v133;
    }
    goto LABEL_58;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  _QWORD *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v31 = a1;
  v7 = type metadata accessor for IndexPath();
  v39 = *(_QWORD **)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v38 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v35 = (char *)&v29 - v12;
  v15.n128_f64[0] = MEMORY[0x1E0C80A78](v13, v14);
  v34 = (char *)&v29 - v16;
  v37 = a3;
  v30 = a2;
  if (a3 != a2)
  {
    v17 = v39[9];
    v32 = (void (*)(char *, uint64_t, uint64_t))v39[2];
    v33 = a4;
    v41 = v17 * (v37 - 1);
    v36 = v17;
    v40 = v17 * v37;
LABEL_5:
    v18 = 0;
    v19 = v31;
    while (1)
    {
      v20 = *a4;
      v21 = v34;
      v22 = v32;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v32)(v34, v40 + v18 + *a4, v7, v15);
      v23 = v35;
      v22(v35, v41 + v18 + v20, v7);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1678]);
      LOBYTE(v20) = dispatch thunk of static Comparable.< infix(_:_:)();
      v24 = (void (*)(char *, uint64_t))v39[1];
      v25 = v23;
      a4 = v33;
      v24(v25, v7);
      v24(v21, v7);
      if ((v20 & 1) == 0)
      {
LABEL_4:
        v41 += v36;
        v40 += v36;
        if (++v37 == v30)
          return;
        goto LABEL_5;
      }
      v26 = *a4;
      if (!*a4)
        break;
      v27 = (char *)(v26 + v41 + v18);
      v28 = (void (*)(char *, uint64_t, uint64_t))v39[4];
      v28(v38, v26 + v40 + v18, v7);
      swift_arrayInitWithTakeFrontToBack();
      v28(v27, (uint64_t)v38, v7);
      v18 -= v36;
      if (v37 == ++v19)
        goto LABEL_4;
    }
    __break(1u);
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v39 = a1;
  type metadata accessor for (ToolbarStorage.Entry, Int)();
  v47 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v48 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v41 = (uint64_t)&v37 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v42 = (uint64_t)&v37 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v40 = (char *)&v37 - v19;
  v46 = a3;
  v38 = a2;
  if (a3 != a2)
  {
    v20 = *(_QWORD *)(v18 + 72);
    v21 = v20 * (v46 - 1);
    v43 = v20;
    v22 = v20 * v46;
    v23 = (uint64_t)v40;
LABEL_5:
    v24 = 0;
    v50 = v39;
    v44 = v22;
    v45 = v21;
    while (1)
    {
      v25 = *a4;
      v49 = v22 + v24;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v22 + v24 + v25, v23, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
      v26 = v42;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v21 + v24 + v25, v42, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
      v27 = v47;
      v28 = *(int *)(v47 + 48);
      v29 = v41;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v23, v41, type metadata accessor for ToolbarStorage.Entry);
      v51 = *(_QWORD *)(v23 + v28);
      *(_QWORD *)(v29 + v28) = v51;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v29, type metadata accessor for ToolbarStorage.Entry);
      v30 = *(int *)(v27 + 48);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v26, v29, type metadata accessor for ToolbarStorage.Entry);
      v31 = a4;
      v32 = *(_QWORD *)(v26 + v30);
      *(_QWORD *)(v29 + v30) = v32;
      v33 = v29;
      v22 = v44;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v33, type metadata accessor for ToolbarStorage.Entry);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v26, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v23, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
      v34 = v51 < v32;
      a4 = v31;
      v21 = v45;
      if (!v34)
      {
LABEL_4:
        v21 += v43;
        v22 += v43;
        if (++v46 == v38)
          return;
        goto LABEL_5;
      }
      v35 = *a4;
      if (!*a4)
        break;
      v36 = v35 + v45 + v24;
      outlined init with take of TableCellFormula(v35 + v22 + v24, v48, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
      swift_arrayInitWithTakeFrontToBack();
      outlined init with take of TableCellFormula(v48, v36, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
      v24 -= v43;
      if (v46 == ++v50)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(char *, unint64_t, uint64_t);
  unint64_t v22;
  char *v23;
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t result;
  uint64_t v44;
  void (*v45)(char *, unint64_t, uint64_t);
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v8 = type metadata accessor for IndexPath();
  v9 = *(_QWORD **)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v50 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v49 = (char *)&v44 - v14;
  v51 = v9[9];
  if (!v51)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v51 == -1)
    goto LABEL_62;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v51 == -1)
    goto LABEL_63;
  v16 = (uint64_t)(a2 - a1) / v51;
  v54 = a1;
  v53 = a4;
  v17 = v15 / v51;
  if (v16 >= v15 / v51)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = v17 * v51;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v30 = a4 + v19;
      v52 = a4 + v19;
      v54 = a2;
      if (v19 >= 1 && a1 < a2)
      {
        v32 = -v51;
        v45 = (void (*)(char *, unint64_t, uint64_t))v9[2];
        v46 = v9;
        v47 = a4;
        v48 = a1;
        do
        {
          v51 = a3 + v32;
          v33 = v49;
          v34 = v45;
          v45(v49, v30 + v32, v8);
          v35 = a2 + v32;
          v36 = v32;
          v37 = v50;
          v34(v50, v35, v8);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1678]);
          LOBYTE(v34) = dispatch thunk of static Comparable.< infix(_:_:)();
          v38 = (void (*)(char *, uint64_t))v9[1];
          v38(v37, v8);
          v38(v33, v8);
          if ((v34 & 1) != 0)
          {
            v32 = v36;
            v39 = v51;
            if (a3 < a2 || v51 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v9 = v46;
              v40 = v47;
              v41 = v48;
            }
            else
            {
              v9 = v46;
              v40 = v47;
              v41 = v48;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v54 += v32;
          }
          else
          {
            v42 = v52;
            v52 += v36;
            v32 = v36;
            v39 = v51;
            if (a3 < v42 || v51 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack();
              v35 = a2;
              v9 = v46;
              v40 = v47;
              v41 = v48;
            }
            else
            {
              v9 = v46;
              v40 = v47;
              v41 = v48;
              if (a3 != v42)
                swift_arrayInitWithTakeBackToFront();
              v35 = a2;
            }
          }
          v30 = v52;
          if (v52 <= v40)
            break;
          a2 = v35;
          a3 = v39;
        }
        while (v35 > v41);
      }
      goto LABEL_60;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v51;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v48 = a4 + v18;
    v52 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      v21 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      do
      {
        v22 = a3;
        v23 = v49;
        v21(v49, a2, v8);
        v24 = v50;
        v21(v50, a4, v8);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1678]);
        v25 = dispatch thunk of static Comparable.< infix(_:_:)();
        v26 = (void (*)(char *, uint64_t))v9[1];
        v26(v24, v8);
        v26(v23, v8);
        v27 = v54;
        if ((v25 & 1) != 0)
        {
          v28 = a2 + v51;
          if (v54 < a2 || v54 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v54 == a2)
              v27 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v29 = v53 + v51;
          if (v54 < v53 || v54 >= v29)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v54 != v53)
              swift_arrayInitWithTakeBackToFront();
          }
          v53 = v29;
          v28 = a2;
        }
        v54 = v27 + v51;
        a4 = v53;
        if (v53 >= v48)
          break;
        a2 = v28;
      }
      while (v28 < a3);
    }
LABEL_60:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v54, &v53, (uint64_t *)&v52);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t result;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;

  type metadata accessor for (ToolbarStorage.Entry, Int)();
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v62 = (uint64_t)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v64 = (uint64_t)&v55 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v63 = (uint64_t)&v55 - v17;
  v19 = *(_QWORD *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v19 == -1)
    goto LABEL_62;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v19 == -1)
    goto LABEL_63;
  v21 = (uint64_t)(a2 - a1) / v19;
  v67 = a1;
  v66 = a4;
  v22 = v20 / v19;
  if (v21 >= v20 / v19)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v19;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v38 = a4 + v24;
      v65 = a4 + v24;
      v67 = a2;
      if (v24 >= 1 && a1 < a2)
      {
        v40 = -v19;
        v61 = v9;
        v56 = a1;
        v57 = a4;
        v58 = -v19;
        v41 = v63;
        do
        {
          v59 = a2;
          v60 = a3 + v40;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v38 + v40, v41, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          v42 = a2 + v40;
          v43 = v64;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2 + v40, v64, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          v44 = *(int *)(v9 + 48);
          v45 = v62;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v41, v62, type metadata accessor for ToolbarStorage.Entry);
          v46 = a3;
          v47 = *(_QWORD *)(v41 + v44);
          *(_QWORD *)(v45 + v44) = v47;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, type metadata accessor for ToolbarStorage.Entry);
          v48 = *(int *)(v9 + 48);
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43, v45, type metadata accessor for ToolbarStorage.Entry);
          v49 = *(_QWORD *)(v43 + v48);
          *(_QWORD *)(v45 + v48) = v49;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, type metadata accessor for ToolbarStorage.Entry);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v43, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v41, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
          if (v47 >= v49)
          {
            v42 = v59;
            v53 = v65;
            v65 += v58;
            v40 = v58;
            a3 = v60;
            if (v46 < v53 || v60 >= v53)
            {
              v9 = v61;
              swift_arrayInitWithTakeFrontToBack();
            }
            else
            {
              v9 = v61;
              if (v46 != v53)
                swift_arrayInitWithTakeBackToFront();
            }
            v52 = v56;
            v51 = v57;
          }
          else
          {
            v40 = v58;
            a3 = v60;
            if (v46 < v59 || v60 >= v59)
            {
              v9 = v61;
              swift_arrayInitWithTakeFrontToBack();
              v52 = v56;
              v51 = v57;
            }
            else
            {
              v50 = v46 == v59;
              v9 = v61;
              v52 = v56;
              v51 = v57;
              if (!v50)
                swift_arrayInitWithTakeBackToFront();
            }
            v67 += v40;
          }
          v38 = v65;
          if (v65 <= v51)
            break;
          a2 = v42;
        }
        while (v42 > v52);
      }
      goto LABEL_60;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v19;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v60 = a4 + v23;
    v65 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      v58 = v19;
      v59 = a3;
      v61 = v9;
      do
      {
        v26 = v63;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, v63, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
        v27 = v64;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a4, v64, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
        v28 = *(int *)(v9 + 48);
        v29 = v62;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v26, v62, type metadata accessor for ToolbarStorage.Entry);
        v30 = *(_QWORD *)(v26 + v28);
        *(_QWORD *)(v29 + v28) = v30;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v29, type metadata accessor for ToolbarStorage.Entry);
        v31 = *(int *)(v9 + 48);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, v29, type metadata accessor for ToolbarStorage.Entry);
        v32 = *(_QWORD *)(v27 + v31);
        *(_QWORD *)(v29 + v31) = v32;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v29, type metadata accessor for ToolbarStorage.Entry);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v27, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v26, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarStorage.Entry, Int));
        v33 = v67;
        if (v30 >= v32)
        {
          v34 = v58;
          v37 = v66 + v58;
          if (v67 < v66 || v67 >= v37)
          {
            v9 = v61;
            swift_arrayInitWithTakeFrontToBack();
            v36 = v59;
          }
          else
          {
            v36 = v59;
            v9 = v61;
            if (v67 != v66)
              swift_arrayInitWithTakeBackToFront();
          }
          v66 = v37;
          v35 = a2;
        }
        else
        {
          v34 = v58;
          v35 = a2 + v58;
          if (v67 < a2 || v67 >= v35)
          {
            v9 = v61;
            swift_arrayInitWithTakeFrontToBack();
            v36 = v59;
          }
          else
          {
            v36 = v59;
            v9 = v61;
            if (v67 == a2)
              v33 = a2;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        v67 = v33 + v34;
        a4 = v66;
        if (v66 >= v60)
          break;
        a2 = v35;
      }
      while (v35 < v36);
    }
LABEL_60:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v67, &v66, (uint64_t *)&v65);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  v6 = a3[3];
  v7 = a2 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x18D760234](v7);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = specialized AccessibilityNode.sendAction<A>(_:value:)(v3, v4, v5, v6);

  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t specialized closure #1 in AccessibilityNode.hasAction<A>(_:)(_QWORD *a1, _OWORD *a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v6;
  _OWORD v8[2];

  v2 = a2[1];
  v8[0] = *a2;
  v8[1] = v2;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = *(uint64_t (**)(_OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v4 + 80);
  v6 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
  return v5(v8, &type metadata for AccessibilityVoidAction, v6, v3, v4) & 1;
}

void *partial apply for closure #1 in AccessibilityNode.applyChildren(to:)()
{
  uint64_t v0;

  return closure #1 in AccessibilityNode.applyChildren(to:)(v0);
}

id partial apply for closure #2 in AccessibilityNode.applyProperties(to:includingRelations:)()
{
  uint64_t v0;

  return closure #2 in AccessibilityNode.applyProperties(to:includingRelations:)(v0);
}

uint64_t sub_18756C460()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;

  v4 = *a4;
  v5 = a2 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = specialized AccessibilityNode.sendAction<A>(_:value:)(v4);

  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_18756C4EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(a1, *(_QWORD *)(v3 + 16), a3, (char *)(v3 + 24));
}

uint64_t specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;

  v4 = *a3;
  v5 = *a4;
  v6 = a2 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x18D760234](v6);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = specialized AccessibilityNode.sendAction<A>(_:value:)(v4, v5);

  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_18756C598()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(a1, *(_QWORD *)(v1 + 16), (char *)(v1 + 24), (char *)(v1 + 25));
}

{
  uint64_t v1;

  return specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(a1, *(_QWORD *)(v1 + 16), (uint64_t *)(v1 + 24));
}

uint64_t sub_18756C5CC()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 48) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

void *partial apply for closure #6 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return closure #4 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityAttributedHint);
}

uint64_t sub_18756C63C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #17 in AccessibilityNode.applyProperties(_:to:)()
{
  return Array<A>.resolve(in:)();
}

uint64_t partial apply for closure #18 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return closure #18 in AccessibilityNode.applyProperties(_:to:)(v0);
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_yps5NeverOTg503_s7d4UI17fg16CAA08PlatformC15b35Protocol_So8NSObjectCXcIeggo_ACyps5H11OIegnrzr_TRAhF0lfbN0_So0P0CXcIeggo_Tf1cn_nTf4ng_n(unint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t ObjectType;
  uint64_t v15;

  if (a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    if (!v4)
      return (char *)v5;
    v15 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v7 = 0;
    v5 = v15;
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x18D75E3BC](v7, a1);
      else
        v8 = *(id *)(a1 + 8 * v7 + 32);
      v9 = v8;
      v10 = a2();
      ObjectType = swift_getObjectType();

      *(_QWORD *)&v13 = v10;
      v15 = v5;
      v12 = *(_QWORD *)(v5 + 16);
      v11 = *(_QWORD *)(v5 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
        v5 = v15;
      }
      ++v7;
      *(_QWORD *)(v5 + 16) = v12 + 1;
      outlined init with take of Any(&v13, (_OWORD *)(v5 + 32 * v12 + 32));
      if (v4 == v7)
        return (char *)v5;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI22AnyAccessibilityActionV8ResolvedVG_So021UIAccessibilityCustomH0Cs5NeverOTg503_s7d4UI17g20NodeC26accessibilityk15ActionsSaySo015j2F6h19CGSgvgAfA03AnycI0V8I6VXEfU_AF0gO0CTf1cn_nTf4ng_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void **v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v21 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = (void **)(a1 + 56);
    do
    {
      v6 = *(v4 - 3);
      v5 = (uint64_t)*(v4 - 2);
      v7 = (uint64_t)*(v4 - 1);
      v8 = *v4;
      v9 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v10 = (_QWORD *)swift_allocObject();
      v10[2] = v9;
      v10[3] = v6;
      v19 = v5;
      v10[4] = v5;
      v10[5] = v7;
      v10[6] = v8;
      v11 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
      aBlock[4] = partial apply for closure #1 in closure #1 in AccessibilityNode.accessibilityCustomActions.getter;
      aBlock[5] = v10;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
      aBlock[3] = &block_descriptor_131;
      v12 = _Block_copy(aBlock);
      v13 = v8;
      v14 = v6;
      swift_bridgeObjectRetain();
      v15 = v13;
      swift_retain();
      v16 = v14;
      swift_bridgeObjectRetain();
      v17 = objc_msgSend(v11, sel_initWithAttributedName_image_actionHandler_, v16, v15, v12);
      _Block_release(v12);
      swift_release();
      swift_release();
      if (objc_msgSend(v17, sel_respondsToSelector_, sel_localizedActionRotorCategory))
      {
        if (v7)
          v18 = MEMORY[0x18D75CC88](v19, v7);
        else
          v18 = 0;
        objc_msgSend(v17, sel_setLocalizedActionRotorCategory_, v18);
        swift_bridgeObjectRelease();

        v16 = (id)v18;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v4 += 4;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v21;
  }
  return result;
}

id partial apply for closure #19 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return closure #16 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityChartDescriptor);
}

id partial apply for closure #16 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return closure #16 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityPath);
}

double partial apply for closure #15 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return closure #15 in AccessibilityNode.applyProperties(_:to:)(v0);
}

uint64_t sub_18756CC4C()
{
  return swift_deallocObject();
}

double partial apply for closure #14 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t outlined consume of AccessibilityActivationPointStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Class partial apply for closure #12 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return closure #12 in AccessibilityNode.applyProperties(_:to:)(v0);
}

Class partial apply for closure #8 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return closure #8 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityColumnCount);
}

Class partial apply for closure #9 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return closure #8 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityRowCount);
}

double partial apply for closure #10 in AccessibilityNode.applyProperties(_:to:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #10 in AccessibilityNode.applyProperties(_:to:)(a1, a2, v3, a3);
}

char *partial apply for closure #11 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #11 in AccessibilityNode.applyProperties(_:to:)(a1, v1);
}

void *partial apply for closure #7 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return closure #7 in AccessibilityNode.applyProperties(_:to:)(v0);
}

void *partial apply for closure #5 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return closure #4 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityAttributedValue);
}

void *partial apply for closure #4 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return closure #4 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityAttributedLabel);
}

uint64_t sub_18756CD44()
{
  return swift_deallocObject();
}

uint64_t sub_18756CD54()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AccessibilityNode.applyProperties(_:to:)()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_18756CD6C()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for UIAccessibilityContainerDataTableCell()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIAccessibilityContainerDataTableCell;
  if (!lazy cache variable for type metadata for UIAccessibilityContainerDataTableCell)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityContainerDataTableCell);
  }
  return result;
}

void sub_18756CDD0(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;

  v3 = *a1;
  AccessibilityNode.platformElement.getter();
  if (!v4)
    v4 = v3;
  *a2 = v4;
}

uint64_t partial apply for implicit closure #1 in AccessibilityIncrementalLayoutNode.accessibilityElements.getter(void *a1)
{
  return implicit closure #1 in AccessibilityNode._accessibilityNodeChildrenUnsorted.getter(a1);
}

uint64_t outlined release of AccessibilityDataSeriesConfiguration?(uint64_t a1)
{
  __int128 v3;
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 240);
  v3 = *(_OWORD *)(a1 + 208);
  outlined consume of AccessibilityDataSeriesConfiguration?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((uint64_t *)&v4 + 1));
  return a1;
}

uint64_t outlined consume of AccessibilityDataSeriesConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a8, a9, a10, a11, a12, a13, a14, a15, a16);
    return outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  if (a9)
  {
    outlined consume of Text?(result, a2, a3, a4);
    outlined consume of Text?(a5, a6, a7, a8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  if (a9)
  {
    outlined copy of Text?(result, a2, a3, a4);
    outlined copy of Text?(a5, a6, a7, a8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

_QWORD *outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

void type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?)
  {
    type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>(255, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))type metadata accessor for ShadowListDataSource);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?);
  }
}

void type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, ValueMetadata *, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3();
    v8 = a4(a1, &type metadata for TableDataSourceAdaptor, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_18756D2B4()
{
  return 16;
}

__n128 sub_18756D2C0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>)
  {
    type metadata accessor for CollectionViewCellModifier();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  }
}

BOOL specialized AccessibilityNode.CellVisitor.isTargetCell(node:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BOOL8 v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12[5];
  unsigned __int8 v13;

  AccessibilityNode.attachment.getter(v12);

  v5 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v5, (uint64_t)v12);
  swift_bridgeObjectRelease_n();
  if (v13 == 255)
    goto LABEL_14;
  outlined init with copy of TableRowList?((uint64_t)v12, (uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v11 != 2)
  {
    if (v11 == 1)
    {
      v7 = v9 == a2 && v10 == a3;
      goto LABEL_15;
    }
    outlined destroy of AccessibilityTableContext((uint64_t)&v9);
LABEL_14:
    v7 = 0;
    goto LABEL_15;
  }
  v7 = 0;
  if ((a3 & 0x8000000000000000) == 0 && v10 > a3)
    v7 = v9 == a2;
LABEL_15:
  outlined destroy of TableRowList?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  return v7;
}

uint64_t specialized AccessibilityNode.HeaderVisitor.isTargetHeader(node:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  char v11;
  uint64_t v12[5];
  unsigned __int8 v13;

  AccessibilityNode.attachment.getter(v12);

  v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, (uint64_t)v12);
  swift_bridgeObjectRelease_n();
  if (v13 == 255)
    goto LABEL_6;
  outlined init with copy of TableRowList?((uint64_t)v12, (uint64_t)&v8, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v11 == 3)
  {
    v6 = v8 == a2;
  }
  else
  {
    if (v11 != 4
      || (v4 = vorrq_s8(v9, v10),
          *(_QWORD *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v8))
    {
      outlined destroy of AccessibilityTableContext((uint64_t)&v8);
LABEL_6:
      v5 = 0;
      goto LABEL_12;
    }
    v6 = a2 == 0;
  }
  v5 = v6;
LABEL_12:
  outlined destroy of TableRowList?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  return v5;
}

uint64_t partial apply for specialized closure #1 in AccessibilityNode.hasAction<A>(_:)(_QWORD *a1)
{
  uint64_t v1;

  return specialized closure #1 in AccessibilityNode.hasAction<A>(_:)(a1, *(_OWORD **)(v1 + 16)) & 1;
}

uint64_t sub_18756DB0C()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in closure #1 in AccessibilityNode.accessibilityCustomActions.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in AccessibilityNode.accessibilityCustomActions.getter(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t *outlined release of AccessibilityTextLayoutProperties??(uint64_t *a1)
{
  outlined consume of AccessibilityTextLayoutProperties??(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  return a1;
}

uint64_t outlined consume of AccessibilityTextLayoutProperties??(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 != 2)
    return outlined consume of AccessibilityTextLayoutProperties?(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return result;
}

uint64_t closure #1 in AccessibilityNode.hasAction<A>(_:)specialized partial apply(_QWORD *a1)
{
  return partial apply for specialized closure #1 in AccessibilityNode.hasAction<A>(_:)(a1) & 1;
}

void View.alert<A, B>(_:isPresented:actions:)(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, __int128 a8, uint64_t a9, uint64_t a10)
{
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  uint64_t v21;

  v21 = a4;
  v20 = a3;
  v19 = a8;
  v14 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v16 + 16))((char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  v17 = Text.init<A>(_:)();
  View.alert<A>(_:isPresented:actions:)(v17, v18, a2, v20, v21, a7, a5, a6, v19, *((uint64_t *)&v19 + 1), a10);
}

uint64_t sub_18756DDA8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  outlined consume of Text.Storage(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

void View.alert<A>(_:isPresented:actions:)(uint64_t a1@<X5>, int a2@<W6>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = Text.init(_:tableName:bundle:comment:)();
  View.alert<A>(_:isPresented:actions:)(v13, v14, a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_18756DEC0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  outlined consume of Text.Storage(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

void View.alert<A>(_:isPresented:actions:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, int a4@<W6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];

  v23 = a5;
  v15[3] = a4;
  v27 = a3;
  v16 = a2;
  v25 = a6;
  v26 = a8;
  v21 = a7;
  v17 = a11;
  v24 = a10;
  v22 = *(_QWORD *)(a9 - 8);
  v20 = a9;
  MEMORY[0x1E0C80A78](a1, a9);
  v11 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v11, v12);
  v18 = (char *)v15 - v13;
  v14 = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  v32[0] = a11;
  v32[1] = v14;
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v32);
  v28 = v11;
  v29 = MEMORY[0x1E0CE7C38];
  v30 = v19;
  v31 = MEMORY[0x1E0CE7C28];
  type metadata accessor for AlertModifier();
}

void sub_18756E044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v8 - 304) = a1;
  *(_QWORD *)(v8 - 288) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v8 - 208) = 0;
  v9 = v7 & 1;
  Text.assertUnstyled(_:options:)();
  *(_QWORD *)(v8 - 352) = v5;
  v10 = *(_QWORD *)(v8 - 224);
  *(_QWORD *)(v8 - 208) = v5;
  *(_QWORD *)(v8 - 200) = v10;
  *(_BYTE *)(v8 - 192) = v3;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8]();
  *(_DWORD *)(v8 - 344) = *(unsigned __int8 *)(v8 - 113);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v4, v2, v9);
  v11 = swift_bridgeObjectRetain();
  v12 = (*(uint64_t (**)(uint64_t))(v8 - 264))(v11);
  v13 = *(_QWORD *)(v8 - 296);
  MEMORY[0x18D75B4AC](v12, v13, &unk_1E1ABA1E0, *(_QWORD *)(v8 - 328));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 272) + 8))(v6, v13);
  *(_QWORD *)(v8 - 128) = 0;
  *(_OWORD *)(v8 - 160) = 0u;
  *(_OWORD *)(v8 - 144) = 0u;
  *(_OWORD *)(v8 - 192) = 0u;
  *(_OWORD *)(v8 - 176) = 0u;
  *(_OWORD *)(v8 - 208) = 0u;
  AlertModifier.init(presentedValue:isPresented:title:actions:message:auxiliaryContent:representsError:)();
}

uint64_t sub_18756E200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 304);
  MEMORY[0x18D75B4AC](v0, *(_QWORD *)(v1 - 240), v2, *(_QWORD *)(v1 - 256));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 288) + 8))(v0, v2);
}

unint64_t lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionsModifier and conformance ActionsModifier;
  if (!lazy protocol witness table cache variable for type ActionsModifier and conformance ActionsModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ActionsModifier, &unk_1E1ABA1E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionsModifier and conformance ActionsModifier);
  }
  return result;
}

void View.alert<A, B>(_:isPresented:actions:message:)(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = Text.init(_:tableName:bundle:comment:)();
  View.alert<A, B>(_:isPresented:actions:message:)(v19, v20, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_18756E398()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  outlined consume of Text.Storage(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

void View.alert<A, B>(_:isPresented:actions:message:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, int a5@<W6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD v23[2];
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];

  v33 = a6;
  v23[1] = a5;
  v39 = a3;
  v40 = a4;
  v37 = a7;
  v38 = a11;
  v35 = a10;
  v34 = a9;
  v31 = a8;
  v26 = a16;
  v36 = a14;
  v24 = a15;
  v28 = a13;
  MEMORY[0x1E0C80A78](a1, a2);
  v32 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(v17 - 8);
  v29 = v17;
  MEMORY[0x1E0C80A78](v18, v17);
  v19 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v19, v20);
  v25 = (char *)v23 - v21;
  v22 = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  v45[0] = a15;
  v45[1] = v22;
  v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v19, v45);
  v41 = v19;
  v42 = a13;
  v43 = v27;
  v44 = a16;
  type metadata accessor for AlertModifier();
}

void sub_18756E56C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v7 - 328) = a1;
  *(_QWORD *)(v7 - 320) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v7 - 208) = 0;
  v8 = v6;
  Text.assertUnstyled(_:options:)();
  v9 = *(_QWORD *)(v7 - 224);
  *(_QWORD *)(v7 - 208) = *(_QWORD *)(v7 - 232);
  *(_QWORD *)(v7 - 200) = v9;
  *(_BYTE *)(v7 - 192) = v3;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8]();
  *(_DWORD *)(v7 - 384) = *(unsigned __int8 *)(v7 - 113);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v4, v8, v2 & 1);
  v10 = swift_bridgeObjectRetain();
  v11 = (*(uint64_t (**)(uint64_t))(v7 - 288))(v10);
  v12 = *(_QWORD *)(v7 - 336);
  MEMORY[0x18D75B4AC](v11, v12, &unk_1E1ABA1E0, *(_QWORD *)(v7 - 376));
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 312) + 8))(v5, v12);
  (*(void (**)(uint64_t))(v7 - 280))(v13);
  *(_QWORD *)(v7 - 128) = 0;
  *(_OWORD *)(v7 - 160) = 0u;
  *(_OWORD *)(v7 - 144) = 0u;
  *(_OWORD *)(v7 - 192) = 0u;
  *(_OWORD *)(v7 - 176) = 0u;
  *(_OWORD *)(v7 - 208) = 0u;
  AlertModifier.init(presentedValue:isPresented:title:actions:message:auxiliaryContent:representsError:)();
}

uint64_t sub_18756E730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 328);
  MEMORY[0x18D75B4AC](v0, *(_QWORD *)(v1 - 248), v2, *(_QWORD *)(v1 - 264));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 320) + 8))(v0, v2);
}

void View.alert<A, B, C>(_:isPresented:actions:message:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = a5;
  v25 = a8;
  v26 = a7;
  v27 = a6;
  v28 = a2;
  v30 = a4;
  v29 = a3;
  v24 = a9;
  v23 = a12;
  v17 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v19 + 16))((char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  v20 = Text.init<A>(_:)();
  View.alert<A, B>(_:isPresented:actions:message:)(v20, v21, v28, v29, v30, v31, v24, v27, v26, v25, a10, v23, a13, a14, a16, a17);
}

uint64_t sub_18756E880()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  outlined consume of Text.Storage(v0, v2, v1);
  return swift_bridgeObjectRelease();
}

void View.alert<A, B>(_:isPresented:presenting:actions:)(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = Text.init(_:tableName:bundle:comment:)();
  View.alert<A, B>(_:isPresented:presenting:actions:)(v17, v18, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_18756E9A8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  outlined consume of Text.Storage(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

void View.alert<A, B>(_:isPresented:presenting:actions:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, int a5@<W6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v22 = a10;
  v23 = a11;
  v24 = a12;
  v25 = a13;
  v26 = a14;
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a8;
  v32 = a9;
  v18 = type metadata accessor for Optional();
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v18, &a14);
  View.alert<A>(_:isPresented:actions:)(a1, a2, a4, a5, (uint64_t)partial apply for closure #1 in View.alert<A, B>(_:isPresented:presenting:actions:), a7, (uint64_t)v21, a10, v18, a13, v19);
}

void View.alert<A, B, C>(_:isPresented:presenting:actions:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = a5;
  v23 = a8;
  v24 = a2;
  v26 = a4;
  v25 = a3;
  v22 = a11;
  v17 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v19 + 16))((char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  v20 = Text.init<A>(_:)();
  View.alert<A, B>(_:isPresented:presenting:actions:)(v20, v21, v24, v25, v26, v27, a9, a6, a7, v23, v22, *((uint64_t *)&v22 + 1), a12, a14);
}

uint64_t sub_18756EBA8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  outlined consume of Text.Storage(v0, v2, v1);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.alert<A, B>(_:isPresented:presenting:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  void (*v45)(char *);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  char v57;
  uint64_t v58;

  v44 = a6;
  v45 = a5;
  v48 = a4;
  LODWORD(v51) = a3;
  v50 = a2;
  v55 = a8;
  v53 = *(_QWORD *)(a7 - 8);
  v54 = a11;
  MEMORY[0x1E0C80A78](a1, a2);
  v46 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v44 - v16;
  v47 = type metadata accessor for Optional();
  v49 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47, v18);
  v20 = (char *)&v44 - v19;
  v21 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Optional();
  v52 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v44 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v44 - v32;
  v56[1] = a1;
  v56[2] = v50;
  v57 = (char)v51;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v58);
  if (v58 == 1)
  {
    v51 = v17;
    v35 = v46;
    v34 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v20, v48, v47);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, a9) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v25, v20, a9);
      v39 = v35;
      v45(v25);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v25, a9);
      v40 = (uint64_t)v51;
      v37 = v54;
      static ViewBuilder.buildExpression<A>(_:)(v39, a7, v54);
      v38 = v53;
      v41 = *(void (**)(char *, uint64_t))(v53 + 8);
      v41(v39, a7);
      static ViewBuilder.buildBlock<A>(_:)(v40, a7, (uint64_t)v29);
      v41((char *)v40, a7);
      v36 = 0;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v20, v34);
  }
  v36 = 1;
  v38 = v53;
  v37 = v54;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v29, v36, 1, a7);
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v29, (uint64_t)v33);
  v42 = *(void (**)(char *, uint64_t))(v52 + 8);
  v42(v29, v26);
  v56[0] = v37;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v26, v56);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v33, v26, v55);
  return ((uint64_t (*)(char *, uint64_t))v42)(v33, v26);
}

uint64_t partial apply for closure #1 in View.alert<A, B>(_:isPresented:presenting:actions:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in View.alert<A, B>(_:isPresented:presenting:actions:)(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), *(_QWORD *)(v1 + 80), *(void (**)(char *))(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 24), a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

void View.alert<A, B, C>(_:isPresented:presenting:actions:message:)(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v21;
  uint64_t v22;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = Text.init(_:tableName:bundle:comment:)();
  View.alert<A, B, C>(_:isPresented:presenting:actions:message:)(v21, v22, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_18756F02C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  outlined consume of Text.Storage(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

void View.alert<A, B, C>(_:isPresented:presenting:actions:message:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, int a5@<W6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[16];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v44 = a12;
  v45 = a13;
  v46 = a14;
  v47 = a15;
  v48 = a16;
  v49 = a17;
  v50 = a18;
  v51 = a3;
  v52 = a4;
  v53 = a5;
  v54 = a6;
  v55 = a8;
  v56 = a9;
  v30 = a12;
  v31 = a13;
  v32 = a14;
  v33 = a15;
  v34 = a16;
  v35 = a17;
  v36 = a18;
  v37 = a3;
  v38 = a4;
  v39 = a5;
  v40 = a6;
  v41 = a10;
  v42 = a11;
  v21 = type metadata accessor for Optional();
  v22 = type metadata accessor for Optional();
  v23 = MEMORY[0x1E0CE83F8];
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v21, &a17);
  v25 = MEMORY[0x18D75FFDC](v23, v22, &a18);
  View.alert<A, B>(_:isPresented:actions:message:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:), a7, (uint64_t)v43, (uint64_t)partial apply for closure #2 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:), (uint64_t)v29, a12, v21, v22, a16, v24, v25);
}

void View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, __int128 a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = a5;
  v27 = a8;
  v28 = a2;
  v30 = a4;
  v29 = a3;
  v25 = a12;
  v26 = a10;
  v24 = a13;
  v19 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v21 + 16))((char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
  v22 = Text.init<A>(_:)();
  View.alert<A, B, C>(_:isPresented:presenting:actions:message:)(v22, v23, v28, v29, v30, v31, a9, a6, a7, v27, v26, *((uint64_t *)&v26 + 1), v25, *((uint64_t *)&v25 + 1), v24, *((uint64_t *)&v24 + 1), a15, a16);
}

uint64_t sub_18756F2A8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  outlined consume of Text.Storage(v0, v2, v1);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  _QWORD v45[2];
  void (*v46)(char *);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  char v58;
  uint64_t v59;

  v45[1] = a6;
  v46 = a5;
  v49 = a4;
  LODWORD(v52) = a3;
  v51 = a2;
  v56 = a8;
  v54 = *(_QWORD *)(a7 - 8);
  v55 = a12;
  MEMORY[0x1E0C80A78](a1, a2);
  v47 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v45 - v17;
  v48 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v19);
  v21 = (char *)v45 - v20;
  v22 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Optional();
  v53 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)v45 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)v45 - v33;
  v57[1] = a1;
  v57[2] = v51;
  v58 = (char)v52;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v59);
  if (v59 == 1)
  {
    v52 = v18;
    v36 = v47;
    v35 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v21, v49, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, a10) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v26, v21, a10);
      v40 = v36;
      v46(v26);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v26, a10);
      v41 = (uint64_t)v52;
      v38 = v55;
      static ViewBuilder.buildExpression<A>(_:)(v40, a7, v55);
      v39 = v54;
      v42 = *(void (**)(char *, uint64_t))(v54 + 8);
      v42(v40, a7);
      static ViewBuilder.buildBlock<A>(_:)(v41, a7, (uint64_t)v30);
      v42((char *)v41, a7);
      v37 = 0;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v21, v35);
  }
  v37 = 1;
  v39 = v54;
  v38 = v55;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v30, v37, 1, a7);
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v30, (uint64_t)v34);
  v43 = *(void (**)(char *, uint64_t))(v53 + 8);
  v43(v30, v27);
  v57[0] = v38;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v27, v57);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v34, v27, v56);
  return ((uint64_t (*)(char *, uint64_t))v43)(v34, v27);
}

uint64_t partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)()
{
  return partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:));
}

uint64_t closure #2 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  _QWORD v44[2];
  void (*v45)(char *);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  char v57;
  uint64_t v58;

  v44[1] = a6;
  v45 = a5;
  v48 = a4;
  LODWORD(v51) = a3;
  v50 = a2;
  v55 = a7;
  v53 = *(_QWORD *)(a8 - 8);
  v54 = a12;
  MEMORY[0x1E0C80A78](a1, a2);
  v46 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v44 - v16;
  v47 = type metadata accessor for Optional();
  v49 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47, v18);
  v20 = (char *)v44 - v19;
  v21 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Optional();
  v52 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)v44 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)v44 - v32;
  v56[1] = a1;
  v56[2] = v50;
  v57 = (char)v51;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v58);
  if (v58 == 1)
  {
    v51 = v17;
    v35 = v46;
    v34 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v20, v48, v47);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, a9) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v25, v20, a9);
      v39 = v35;
      v45(v25);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v25, a9);
      v40 = (uint64_t)v51;
      v37 = v54;
      static ViewBuilder.buildExpression<A>(_:)(v39, a8, v54);
      v38 = v53;
      v41 = *(void (**)(char *, uint64_t))(v53 + 8);
      v41(v39, a8);
      static ViewBuilder.buildBlock<A>(_:)(v40, a8, (uint64_t)v29);
      v41((char *)v40, a8);
      v36 = 0;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v20, v34);
  }
  v36 = 1;
  v38 = v53;
  v37 = v54;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v29, v36, 1, a8);
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v29, (uint64_t)v33);
  v42 = *(void (**)(char *, uint64_t))(v52 + 8);
  v42(v29, v26);
  v56[0] = v37;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v26, v56);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v33, v26, v55);
  return ((uint64_t (*)(char *, uint64_t))v42)(v33, v26);
}

uint64_t partial apply for closure #2 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)()
{
  return partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:));
}

uint64_t partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(unsigned __int8 *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

void View.alert<A, B>(isPresented:error:actions:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE v26[4];
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v33 = a6;
  v29 = a7;
  v30 = a1;
  v31 = a2;
  v32 = a5;
  v27 = a3;
  v28 = a9;
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = &v26[-v19];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v16 + 16))(&v26[-v19], a4, v15, v18);
  v21 = *(_QWORD *)(a8 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v20, 1, a8) == 1)
  {
    v22 = 0;
    v23 = 0xE000000000000000;
    a8 = v15;
  }
  else
  {
    v22 = LocalizedError.alertTitle.getter();
    v23 = v24;
    v16 = v21;
  }
  (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v20, a8);
  v34[0] = v22;
  v34[1] = v23;
  v25 = lazy protocol witness table accessor for type String and conformance String();
  View.errorAlert<A, B, C>(_:isPresented:actions:message:)((uint64_t)v34, v30, v31, v27 & 1, v32, v33, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, v28, v29, MEMORY[0x1E0DEA968], a10, MEMORY[0x1E0CE7C38], a11, v25, a13, MEMORY[0x1E0CE7C28]);
}

uint64_t sub_18756FA8C()
{
  return swift_bridgeObjectRelease();
}

uint64_t LocalizedError.alertTitle.getter()
{
  uint64_t result;
  uint64_t v1;
  void *v2;

  result = dispatch thunk of LocalizedError.errorDescription.getter();
  if (!v1)
  {
    static os_log_type_t.fault.getter();
    v2 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    return Error.localizedDescription.getter();
  }
  return result;
}

void View.errorAlert<A, B, C>(_:isPresented:actions:message:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[4];
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];

  v38 = a8;
  v39 = a7;
  v36 = a6;
  v37 = a5;
  v27 = a4;
  v43 = a3;
  v32 = a1;
  v41 = a9;
  v42 = a14;
  v33 = a15;
  v28 = a17;
  v26[3] = a16;
  v40 = a10;
  v26[1] = a11;
  v31 = a13;
  MEMORY[0x1E0C80A78](a1, a2);
  v35 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(a12 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v20 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v20, v21);
  v30 = (char *)v26 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v25 = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  v48[0] = a16;
  v48[1] = v25;
  v29 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v20, v48);
  v44 = v20;
  v45 = a13;
  v46 = v29;
  v47 = a17;
  type metadata accessor for AlertModifier();
}

void sub_18756FD00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v8 - 328) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v8 - 400) = v7;
  v9 = *(_QWORD *)(v8 - 224);
  *(_QWORD *)(v8 - 208) = v7;
  *(_QWORD *)(v8 - 200) = v9;
  *(_BYTE *)(v8 - 192) = v3;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8]();
  *(_DWORD *)(v8 - 380) = *(unsigned __int8 *)(v8 - 105);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v5 + 16))(v2, *(_QWORD *)(v8 - 320), *(_QWORD *)(v8 - 392));
  swift_retain();
  swift_retain();
  *(_QWORD *)(v8 - 312) = Text.init<A>(_:)();
  v10 = (*(uint64_t (**)(void))(v8 - 280))();
  MEMORY[0x18D75B4AC](v10, v4, &unk_1E1ABA1E0, *(_QWORD *)(v8 - 376));
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 304) + 8))(v6, v4);
  (*(void (**)(uint64_t))(v8 - 264))(v11);
  *(_QWORD *)(v8 - 128) = 0;
  *(_OWORD *)(v8 - 160) = 0u;
  *(_OWORD *)(v8 - 144) = 0u;
  *(_OWORD *)(v8 - 192) = 0u;
  *(_OWORD *)(v8 - 176) = 0u;
  *(_OWORD *)(v8 - 208) = 0u;
  AlertModifier.init(presentedValue:isPresented:title:actions:message:auxiliaryContent:representsError:)();
}

uint64_t sub_18756FEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D75B4AC](v0, *(_QWORD *)(v2 - 256), v1, *(_QWORD *)(v2 - 240));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 328) + 8))(v0, v1);
}

void View.alert<A, B, C>(isPresented:error:actions:message:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, double);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];

  v62 = a2;
  v55 = a7;
  v56 = a8;
  v51 = a5;
  v52 = a6;
  v50 = a3;
  v60 = a9;
  v61 = a1;
  v57 = a16;
  v58 = a17;
  v59 = a14;
  v53 = a12;
  v18 = type metadata accessor for Optional();
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v47 - v22;
  v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16);
  v54 = a4;
  v24(v23, a4, v18, v21);
  v25 = *(_QWORD *)(a11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, a11) == 1)
  {
    v26 = 0;
    v27 = 0xE000000000000000;
  }
  else
  {
    v26 = LocalizedError.alertTitle.getter();
    v27 = v28;
    v19 = v25;
    v18 = a11;
  }
  v29 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v23, v18);
  v49 = &v47;
  v65[0] = v26;
  v65[1] = v27;
  MEMORY[0x1E0C80A78](v29, v30);
  v47 = a10;
  v48 = &v47 - 16;
  *(&v47 - 14) = a10;
  *(&v47 - 13) = a11;
  v31 = v53;
  *(&v47 - 12) = v53;
  *(&v47 - 11) = a13;
  v32 = v58;
  v33 = v59;
  *(&v47 - 10) = v59;
  *(&v47 - 9) = a15;
  v34 = v57;
  v35 = v61;
  v36 = v62;
  v37 = v50 & 1;
  MEMORY[0x1E0C80A78](v38, v31);
  v52 = &v47 - 16;
  *(&v47 - 14) = v39;
  *(&v47 - 13) = a11;
  *(&v47 - 12) = v40;
  *(&v47 - 11) = a13;
  *(&v47 - 10) = v33;
  *(&v47 - 9) = a15;
  v41 = type metadata accessor for Optional();
  v42 = type metadata accessor for Optional();
  v43 = lazy protocol witness table accessor for type String and conformance String();
  v64 = v34;
  v44 = MEMORY[0x1E0CE83F8];
  v45 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v41, &v64);
  v63 = v32;
  v46 = MEMORY[0x18D75FFDC](v44, v42, &v63);
  View.errorAlert<A, B, C>(_:isPresented:actions:message:)((uint64_t)v65, v35, v36, v37, (uint64_t)partial apply for closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:), (uint64_t)v48, (uint64_t)partial apply for closure #2 in View.alert<A, B, C>(isPresented:error:actions:message:), (uint64_t)v52, v60, v47, MEMORY[0x1E0DEA968], v41, v42, v33, v43, v45, v46);
}

uint64_t sub_18757017C()
{
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  _QWORD v46[2];
  void (*v47)(char *);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  char v59;
  uint64_t v60;

  v46[1] = a6;
  v47 = a5;
  v50 = a4;
  LODWORD(v53) = a3;
  v52 = a2;
  v57 = a8;
  v55 = *(_QWORD *)(a9 - 8);
  v56 = a13;
  MEMORY[0x1E0C80A78](a1, a2);
  v48 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v46 - v18;
  v49 = type metadata accessor for Optional();
  v51 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v20);
  v22 = (char *)v46 - v21;
  v23 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Optional();
  v54 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)v46 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)v46 - v34;
  v58[1] = a1;
  v58[2] = v52;
  v59 = (char)v53;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v60);
  if (v60 == 1)
  {
    v53 = v19;
    v37 = v48;
    v36 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v22, v50, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, a7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v27, v22, a7);
      v41 = v37;
      v47(v27);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v27, a7);
      v42 = (uint64_t)v53;
      v39 = v56;
      static ViewBuilder.buildExpression<A>(_:)(v41, a9, v56);
      v40 = v55;
      v43 = *(void (**)(char *, uint64_t))(v55 + 8);
      v43(v41, a9);
      static ViewBuilder.buildBlock<A>(_:)(v42, a9, (uint64_t)v31);
      v43((char *)v42, a9);
      v38 = 0;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v22, v36);
  }
  v38 = 1;
  v40 = v55;
  v39 = v56;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v31, v38, 1, a9);
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v31, (uint64_t)v35);
  v44 = *(void (**)(char *, uint64_t))(v54 + 8);
  v44(v31, v28);
  v58[0] = v39;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v28, v58);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v35, v28, v57);
  return ((uint64_t (*)(char *, uint64_t))v44)(v35, v28);
}

uint64_t partial apply for closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:)()
{
  return partial apply for closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:));
}

uint64_t closure #2 in View.alert<A, B, C>(isPresented:error:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, uint64_t);
  _QWORD v47[2];
  void (*v48)(char *);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  char v60;
  uint64_t v61;

  v47[1] = a6;
  v48 = a5;
  v51 = a4;
  LODWORD(v54) = a3;
  v53 = a2;
  v58 = a8;
  v56 = *(_QWORD *)(a10 - 8);
  v57 = a14;
  MEMORY[0x1E0C80A78](a1, a2);
  v49 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v47 - v19;
  v50 = type metadata accessor for Optional();
  v52 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v21);
  v23 = (char *)v47 - v22;
  v24 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Optional();
  v55 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)v47 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)v47 - v35;
  v59[1] = a1;
  v59[2] = v53;
  v60 = (char)v54;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v61);
  if (v61 == 1)
  {
    v54 = v20;
    v38 = v49;
    v37 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v23, v51, v50);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, a7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v28, v23, a7);
      v42 = v38;
      v48(v28);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, a7);
      v43 = (uint64_t)v54;
      v40 = v57;
      static ViewBuilder.buildExpression<A>(_:)(v42, a10, v57);
      v41 = v56;
      v44 = *(void (**)(char *, uint64_t))(v56 + 8);
      v44(v42, a10);
      static ViewBuilder.buildBlock<A>(_:)(v43, a10, (uint64_t)v32);
      v44((char *)v43, a10);
      v39 = 0;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v37);
  }
  v39 = 1;
  v41 = v56;
  v40 = v57;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v32, v39, 1, a10);
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v32, (uint64_t)v36);
  v45 = *(void (**)(char *, uint64_t))(v55 + 8);
  v45(v32, v29);
  v59[0] = v40;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v29, v59);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v36, v29, v58);
  return ((uint64_t (*)(char *, uint64_t))v45)(v36, v29);
}

uint64_t partial apply for closure #2 in View.alert<A, B, C>(isPresented:error:actions:message:)()
{
  return partial apply for closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in View.alert<A, B, C>(isPresented:error:actions:message:));
}

uint64_t partial apply for closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(unsigned __int8 *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

void View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t (*a8)(uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t (*a11)(uint64_t), uint64_t a12, void (*a13)(uint64_t), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD v75[2];
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  uint64_t (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t);
  unint64_t v85;
  char *v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[2];

  v79 = a8;
  v91 = a7;
  v102 = a6;
  v90 = a5;
  v100 = a1;
  v101 = a4;
  v99 = a3;
  v105 = a2;
  v92 = a9;
  v104 = a22;
  v84 = a13;
  v82 = a12;
  v89 = a21;
  v98 = a20;
  v80 = a11;
  v75[1] = a10;
  v78 = a17;
  v88 = a19;
  v103 = a18;
  v81 = a14;
  v95 = a15;
  v94 = *(_QWORD *)(a15 - 8);
  v85 = *(_QWORD *)(v94 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v77 = (char *)v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v86 = (char *)v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = *(_QWORD *)(v27 - 8);
  v83 = *(_QWORD *)(v76 + 64);
  MEMORY[0x1E0C80A78](v28, v29);
  v97 = (char *)v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)v75 - v33;
  v35 = *(_QWORD *)(a16 - 8);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)v75 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for ModifiedContent();
  v40 = *(_QWORD *)(v96 - 8);
  v41 = *(_QWORD *)(v40 + 64);
  MEMORY[0x1E0C80A78](v96, v42);
  v75[0] = (char *)v75 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v44);
  v46 = (char *)v75 - v45;
  v106 = 0;
  v99 &= 1u;
  v47 = Text.assertUnstyled(_:options:)();
  v48 = v79(v47);
  MEMORY[0x18D75B4AC](v48, a16, &unk_1E1ABA1E0, v98);
  v49 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v39, a16);
  v50 = v80(v49);
  v84(v50);
  v51 = v94;
  v52 = v95;
  v53 = v77;
  (*(void (**)(char *, _QWORD, uint64_t))(v94 + 16))(v77, v87, v95);
  v87 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  v87((char *)v75 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0), v46, v96);
  v54 = v76;
  v84 = *(void (**)(uint64_t))(v76 + 32);
  v55 = v78;
  ((void (*)(char *, char *, uint64_t))v84)(v97, v34, v78);
  v56 = (*(unsigned __int8 *)(v51 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  v57 = v56 + v85;
  v85 = (v56 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
  v58 = (v57 + 31) & 0xFFFFFFFFFFFFFFF8;
  v59 = (*(unsigned __int8 *)(v40 + 80) + v58 + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  v60 = (v41 + *(unsigned __int8 *)(v54 + 80) + v59) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  v61 = (char *)swift_allocObject();
  v62 = v52;
  *((_QWORD *)v61 + 2) = v52;
  *((_QWORD *)v61 + 3) = a16;
  v63 = v55;
  v64 = v103;
  *((_QWORD *)v61 + 4) = v55;
  *((_QWORD *)v61 + 5) = v64;
  v65 = v98;
  *((_QWORD *)v61 + 6) = v88;
  *((_QWORD *)v61 + 7) = v65;
  v66 = v89;
  v67 = v104;
  *((_QWORD *)v61 + 8) = v89;
  *((_QWORD *)v61 + 9) = v67;
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(&v61[v56], v53, v62);
  v68 = &v61[v85];
  v69 = v102;
  *(_QWORD *)v68 = v90;
  *((_QWORD *)v68 + 1) = v69;
  v68[16] = v91;
  v70 = &v61[v58];
  v71 = v105;
  *(_QWORD *)v70 = v100;
  *((_QWORD *)v70 + 1) = v71;
  v70[16] = v99;
  *((_QWORD *)v70 + 3) = v101;
  v72 = v96;
  v87(&v61[v59], (char *)v75[0], v96);
  ((void (*)(char *, char *, uint64_t))v84)(&v61[v60], v97, v63);
  v73 = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  v110[0] = v65;
  v110[1] = v73;
  v74 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v72, v110);
  v106 = v72;
  v107 = v63;
  v108 = v74;
  v109 = v66;
  type metadata accessor for AlertModifier();
}

void sub_187570CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 160) = v2;
  *(_QWORD *)(v3 - 152) = &protocol witness table for AlertModifier<A, B>;
  v5 = MEMORY[0x18D75FFDC](v0, v4, v3 - 160);
  View.bindInputs<A>(transform:)((uint64_t)partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:), v1, *(_QWORD *)(v3 - 184), v4, *(_QWORD *)(v3 - 176), v5, *(_QWORD *)(v3 - 272));
}

uint64_t sub_187570D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(*(_QWORD *)(v2 - 208), *(_QWORD *)(v2 - 168), *(_DWORD *)(v2 - 212));
  swift_bridgeObjectRetain();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 264) + 8))(v1, v0);
}

void closure #1 in View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[17];
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];

  v33 = a8;
  v35 = a7;
  v34 = a6;
  v26 = a5;
  v24[9] = a4;
  v38 = a9;
  v39 = a3;
  v37 = a2;
  v32 = a10;
  v29 = a11;
  v31 = a12;
  v30 = a13;
  v24[15] = a19;
  v36 = a17;
  v28 = *(_QWORD *)(a15 - 8);
  v24[11] = a15;
  MEMORY[0x1E0C80A78](a1, a14);
  v27 = (char *)v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ModifiedContent();
  v24[16] = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v24[14] = (char *)v24 - v22;
  v23 = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  v44[0] = a18;
  v44[1] = v23;
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v20, v44);
  v40 = v20;
  v41 = a15;
  v42 = v25;
  v43 = a19;
  type metadata accessor for AlertModifier();
}

void sub_187570F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v12 - 312) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v12 - 344) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v12 - 424) = (char *)&a9 - v13;
  v14 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 432) = v14;
  *(_QWORD *)(v12 - 304) = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v12 - 384) = (char *)&a9 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v12 - 320) = (char *)&a9 - v19;
  *(_QWORD *)(v12 - 464) = *(unsigned int *)(v9 + 16);
  v20 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v12 - 480) = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v12 - 448) = v20;
  v21 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v12 - 472) = v21;
  *(_QWORD *)(v12 - 488) = *(unsigned int *)(v9 + 48);
  v22 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v12 - 496) = *(_QWORD *)(v9 + 64);
  v23 = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v12 - 504) = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v12 - 208) = *(_QWORD *)(v12 - 240);
  *(_QWORD *)(v12 - 200) = v10;
  *(_BYTE *)(v12 - 192) = *(_DWORD *)(v12 - 372);
  type metadata accessor for Binding<Bool>();
  *(_OWORD *)(v12 - 528) = *(_OWORD *)v9;
  MEMORY[0x18D75B9C8]();
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v12 - 400) + 16))(*(_QWORD *)(v12 - 416), *(_QWORD *)(v12 - 352), v11);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v12 - 360) + 16))(*(_QWORD *)(v12 - 368), *(_QWORD *)(v12 - 328), *(_QWORD *)(v12 - 440));
  *(_OWORD *)(v12 - 208) = *(_OWORD *)(v12 - 528);
  v24 = *(_QWORD *)(v12 - 480);
  *(_QWORD *)(v12 - 192) = *(_QWORD *)(v12 - 464);
  *(_QWORD *)(v12 - 184) = v24;
  *(_QWORD *)(v12 - 176) = v20;
  *(_QWORD *)(v12 - 168) = v21;
  *(_QWORD *)(v12 - 160) = *(_QWORD *)(v12 - 488);
  *(_QWORD *)(v12 - 152) = v22;
  v25 = *(_QWORD *)(v12 - 504);
  *(_QWORD *)(v12 - 144) = *(_QWORD *)(v12 - 496);
  *(_QWORD *)(v12 - 136) = v25;
  *(_QWORD *)(v12 - 128) = v23;
  AlertModifier.init(presentedValue:isPresented:title:actions:message:auxiliaryContent:representsError:)();
}

uint64_t sub_18757119C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v2, v1, v3);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = *(id *)(v4 - 448);
  v6 = *(_QWORD *)(v4 - 384);
  v7 = *(_QWORD *)(v4 - 344);
  v8 = *(_QWORD *)(v4 - 264);
  MEMORY[0x18D75B4AC](v0, *(_QWORD *)(v4 - 336), v7, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 312) + 8))(v0, v7);
  *(_QWORD *)(v4 - 232) = v8;
  *(_QWORD *)(v4 - 224) = &protocol witness table for AlertModifier<A, B>;
  v9 = *(_QWORD *)(v4 - 432);
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v4 - 232);
  v11 = *(_QWORD *)(v4 - 320);
  static ViewBuilder.buildExpression<A>(_:)(v6, v9, v10);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 304) + 8);
  v12(v6, v9);
  static ViewBuilder.buildBlock<A>(_:)(v11, v9, *(_QWORD *)(v4 - 248));
  return v12(v11, v9);
}

uint64_t sub_1875712E0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v2 = *((_QWORD *)v0 + 2);
  v1 = *((_QWORD *)v0 + 3);
  v3 = *((_QWORD *)v0 + 4);
  v12 = v3;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + *(_QWORD *)(v4 + 64) + 31) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for ModifiedContent() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + v6 + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v3 - 8);
  v10 = (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(char *, uint64_t))(v4 + 8))(&v0[v5], v2);
  swift_release();
  swift_release();
  outlined consume of Text.Storage(*(_QWORD *)&v0[v6], *(_QWORD *)&v0[v6 + 8], v0[v6 + 16]);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(&v0[v8], v1);
  (*(void (**)(char *, uint64_t))(v9 + 8))(&v0[v10], v12);
  return swift_deallocObject();
}

void partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v6 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v16 = *(_OWORD *)(v2 + 56);
  v17 = *(_OWORD *)(v2 + 40);
  v8 = *(_QWORD *)(v6 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = v9 + *(_QWORD *)(v8 + 64);
  v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(type metadata accessor for ModifiedContent() - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + v12 + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  closure #1 in View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:)(a1, v2 + v9, *(_QWORD *)(v2 + v11), *(_QWORD *)(v2 + v11 + 8), *(unsigned __int8 *)(v2 + v11 + 16), *(_QWORD *)(v2 + v12), *(_QWORD *)(v2 + v12 + 8), *(unsigned __int8 *)(v2 + v12 + 16), a2, *(_QWORD *)(v2 + v12 + 24), v2 + v14, v2 + ((*(_QWORD *)(v13 + 64) + v15 + v14) & ~v15), v6, v5, v7, v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1));
}

void View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[16];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[16];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v72 = a16;
  v73 = a17;
  v74 = a18;
  v75 = a19;
  v76 = a20;
  v77 = a21;
  v78 = a22;
  v79 = a23;
  v80 = a24;
  v81 = a5;
  v82 = a6;
  v83 = a7;
  v84 = a8;
  v85 = a10;
  v86 = a11;
  v56 = a16;
  v57 = a17;
  v58 = a18;
  v59 = a19;
  v60 = a20;
  v61 = a21;
  v62 = a22;
  v63 = a23;
  v64 = a24;
  v65 = a5;
  v66 = a6;
  v67 = a7;
  v68 = a8;
  v69 = a12;
  v70 = a13;
  v40 = a16;
  v41 = a17;
  v42 = a18;
  v43 = a19;
  v44 = a20;
  v45 = a21;
  v46 = a22;
  v47 = a23;
  v48 = a24;
  v49 = a5;
  v50 = a6;
  v51 = a7;
  v52 = a8;
  v53 = a14;
  v54 = a15;
  v26 = type metadata accessor for Optional();
  v27 = type metadata accessor for Optional();
  v28 = type metadata accessor for Optional();
  v29 = MEMORY[0x1E0CE83F8];
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v26, &a22);
  v31 = MEMORY[0x18D75FFDC](v29, v27, &a23);
  v32 = MEMORY[0x18D75FFDC](v29, v28, &a24);
  View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:)(a1, a2, a3 & 1, a4, a5, a6, a7, (uint64_t (*)(uint64_t))partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:), a9, (uint64_t)v71, (uint64_t (*)(uint64_t))partial apply for closure #2 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:), (uint64_t)v55, (void (*)(uint64_t))partial apply for closure #3 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:), (uint64_t)v39, a16, v26, v27, v28, a21,
    v30,
    v31,
    v32);
}

uint64_t closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  _QWORD v46[2];
  void (*v47)(char *);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  char v59;
  uint64_t v60;

  v46[1] = a6;
  v47 = a5;
  v50 = a4;
  LODWORD(v53) = a3;
  v52 = a2;
  v57 = a8;
  v55 = *(_QWORD *)(a7 - 8);
  v56 = a13;
  MEMORY[0x1E0C80A78](a1, a2);
  v48 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v46 - v18;
  v49 = type metadata accessor for Optional();
  v51 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v20);
  v22 = (char *)v46 - v21;
  v23 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Optional();
  v54 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)v46 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)v46 - v34;
  v58[1] = a1;
  v58[2] = v52;
  v59 = (char)v53;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v60);
  if (v60 == 1)
  {
    v53 = v19;
    v37 = v48;
    v36 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v22, v50, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, a11) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v27, v22, a11);
      v41 = v37;
      v47(v27);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v27, a11);
      v42 = (uint64_t)v53;
      v39 = v56;
      static ViewBuilder.buildExpression<A>(_:)(v41, a7, v56);
      v40 = v55;
      v43 = *(void (**)(char *, uint64_t))(v55 + 8);
      v43(v41, a7);
      static ViewBuilder.buildBlock<A>(_:)(v42, a7, (uint64_t)v31);
      v43((char *)v42, a7);
      v38 = 0;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v22, v36);
  }
  v38 = 1;
  v40 = v55;
  v39 = v56;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v31, v38, 1, a7);
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v31, (uint64_t)v35);
  v44 = *(void (**)(char *, uint64_t))(v54 + 8);
  v44(v31, v28);
  v58[0] = v39;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v28, v58);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v35, v28, v57);
  return ((uint64_t (*)(char *, uint64_t))v44)(v35, v28);
}

uint64_t partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)()
{
  return partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:));
}

uint64_t closure #2 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  _QWORD v45[2];
  void (*v46)(char *);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  char v58;
  uint64_t v59;

  v45[1] = a6;
  v46 = a5;
  v49 = a4;
  LODWORD(v52) = a3;
  v51 = a2;
  v56 = a7;
  v54 = *(_QWORD *)(a8 - 8);
  v55 = a13;
  MEMORY[0x1E0C80A78](a1, a2);
  v47 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v45 - v17;
  v48 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v19);
  v21 = (char *)v45 - v20;
  v22 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Optional();
  v53 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)v45 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)v45 - v33;
  v57[1] = a1;
  v57[2] = v51;
  v58 = (char)v52;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v59);
  if (v59 == 1)
  {
    v52 = v18;
    v36 = v47;
    v35 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v21, v49, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, a10) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v26, v21, a10);
      v40 = v36;
      v46(v26);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v26, a10);
      v41 = (uint64_t)v52;
      v38 = v55;
      static ViewBuilder.buildExpression<A>(_:)(v40, a8, v55);
      v39 = v54;
      v42 = *(void (**)(char *, uint64_t))(v54 + 8);
      v42(v40, a8);
      static ViewBuilder.buildBlock<A>(_:)(v41, a8, (uint64_t)v30);
      v42((char *)v41, a8);
      v37 = 0;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v21, v35);
  }
  v37 = 1;
  v39 = v54;
  v38 = v55;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v30, v37, 1, a8);
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v30, (uint64_t)v34);
  v43 = *(void (**)(char *, uint64_t))(v53 + 8);
  v43(v30, v27);
  v57[0] = v38;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v27, v57);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v34, v27, v56);
  return ((uint64_t (*)(char *, uint64_t))v43)(v34, v27);
}

uint64_t partial apply for closure #2 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)()
{
  return partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:));
}

uint64_t closure #3 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  _QWORD v46[2];
  void (*v47)(char *);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  char v59;
  uint64_t v60;

  v46[1] = a6;
  v47 = a5;
  v50 = a4;
  LODWORD(v53) = a3;
  v52 = a2;
  v57 = a7;
  v55 = *(_QWORD *)(a9 - 8);
  v56 = a14;
  MEMORY[0x1E0C80A78](a1, a2);
  v48 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v46 - v18;
  v49 = type metadata accessor for Optional();
  v51 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v20);
  v22 = (char *)v46 - v21;
  v23 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Optional();
  v54 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)v46 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)v46 - v34;
  v58[1] = a1;
  v58[2] = v52;
  v59 = (char)v53;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v60);
  if (v60 == 1)
  {
    v53 = v19;
    v37 = v48;
    v36 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v22, v50, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, a10) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v27, v22, a10);
      v41 = v37;
      v47(v27);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v27, a10);
      v42 = (uint64_t)v53;
      v39 = v56;
      static ViewBuilder.buildExpression<A>(_:)(v41, a9, v56);
      v40 = v55;
      v43 = *(void (**)(char *, uint64_t))(v55 + 8);
      v43(v41, a9);
      static ViewBuilder.buildBlock<A>(_:)(v42, a9, (uint64_t)v31);
      v43((char *)v42, a9);
      v38 = 0;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v22, v36);
  }
  v38 = 1;
  v40 = v55;
  v39 = v56;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v31, v38, 1, a9);
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v31, (uint64_t)v35);
  v44 = *(void (**)(char *, uint64_t))(v54 + 8);
  v44(v31, v28);
  v58[0] = v39;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v28, v58);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v35, v28, v57);
  return ((uint64_t (*)(char *, uint64_t))v44)(v35, v28);
}

uint64_t partial apply for closure #3 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)()
{
  return partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:));
}

uint64_t partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(unsigned __int8 *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

void sub_18757205C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = type metadata accessor for ModifiedContent();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for AlertModifier();
}

uint64_t sub_1875720D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[14];

  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AlertModifier<A, B>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

void sub_187572114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = type metadata accessor for ModifiedContent();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for AlertModifier();
}

uint64_t sub_187572180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[16];

  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AlertModifier<A, B>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

void sub_1875721C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 48);
  v2 = type metadata accessor for ModifiedContent();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for AlertModifier();
}

uint64_t sub_187572234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[16];

  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AlertModifier<A, B>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

void sub_187572278(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = type metadata accessor for Optional();
  v3 = type metadata accessor for ModifiedContent();
  v5 = v1;
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v5);
  v4[1] = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v4);
  type metadata accessor for AlertModifier();
}

uint64_t sub_18757231C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[17];

  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AlertModifier<A, B>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

void sub_187572360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = type metadata accessor for Optional();
  v3 = type metadata accessor for ModifiedContent();
  v5 = v1;
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v5);
  v4[1] = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v4);
  type metadata accessor for AlertModifier();
}

uint64_t sub_18757240C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[17];

  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AlertModifier<A, B>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

void sub_187572450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v3 = type metadata accessor for Optional();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for Optional();
  v9 = v1;
  v6 = MEMORY[0x1E0CE83F8];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v3, &v9);
  v8[1] = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  v7 = v2;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v8);
  MEMORY[0x18D75FFDC](v6, v5, &v7);
  type metadata accessor for AlertModifier();
}

uint64_t sub_18757251C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[20];

  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AlertModifier<A, B>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

void sub_187572564(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = type metadata accessor for Optional();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for Optional();
  v9 = v1;
  v6 = MEMORY[0x1E0CE83F8];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v3, &v9);
  v8[1] = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  v7 = v2;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v8);
  MEMORY[0x18D75FFDC](v6, v5, &v7);
  type metadata accessor for AlertModifier();
}

uint64_t sub_187572630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[20];

  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AlertModifier<A, B>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

void get_witness_table_7SwiftUI4ViewRzSyRd__AaBRd_0_r_0_lAA15ModifiedContentVyxAA13AlertModifierVyADyqd_0_AA07ActionsG033_CFAA2A4382B588C39EB2C5339BE6A4A5LLVGAA05EmptyC0VGGAaBHPxAaBHD1__AmA0cG0HPyHCHCTm(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = type metadata accessor for ModifiedContent();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for AlertModifier();
}

uint64_t sub_1875726F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[14];

  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AlertModifier<A, B>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

void sub_187572734(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 56);
  v3 = type metadata accessor for Optional();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for Optional();
  v9 = v1;
  v6 = MEMORY[0x1E0CE83F8];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v3, &v9);
  v8[1] = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  v7 = v2;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v8);
  MEMORY[0x18D75FFDC](v6, v5, &v7);
  type metadata accessor for AlertModifier();
}

uint64_t sub_187572800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[20];

  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AlertModifier<A, B>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

_UNKNOWN **sub_187572848()
{
  return &protocol witness table for ViewInputsBinding<A, B>;
}

_UNKNOWN **sub_187572854()
{
  return &protocol witness table for ViewInputsBinding<A, B>;
}

void *type metadata accessor for ActionsModifier()
{
  return &unk_1E1ABA1E0;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ActionsModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ActionsModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  v3 = swift_getKeyPath();
  v4 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = result;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_187572920()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>();
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<PlatformItemListTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle, (uint64_t)&type metadata for PlatformItemListTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ActionsModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier, (uint64_t)&unk_1E1ABA1E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>);
  }
}

void type metadata accessor for StyleContextWriter<DialogActionStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextWriter<DialogActionStyleContext>)
  {
    v0 = type metadata accessor for StyleContextWriter();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<DialogActionStyleContext>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<ActionsModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    v3[1] = &protocol witness table for TextFieldStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ActionsModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ActionsModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ActionsModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ActionsModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier, (uint64_t)&unk_1E1ABA1E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ActionsModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t @objc InteropResponder.cut(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v3;
  _OWORD v5[2];

  if (a3)
  {
    v3 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();

    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Any?);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ResponderCommandsKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static ResponderCommandsKey.defaultValue;
  return swift_bridgeObjectRetain();
}

__n128 OnCommandModifier.body(content:)@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;

  v2 = v1;
  v4 = *(_BYTE *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  if (v5)
  {
    type metadata accessor for GraphHost();
    swift_retain_n();
    if ((static GraphHost.isUpdating.getter() & 1) != 0)
    {
      swift_release();
    }
    else
    {
      dispatch thunk of AnyLocation.get()();
      swift_release();
      v4 = v11;
    }
    v7 = 0;
  }
  else
  {
    v16 = *(_BYTE *)(v1 + 48);
    static os_log_type_t.fault.getter();
    v6 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
    v5 = *((_QWORD *)&v11 + 1);
    v7 = v11;
    v4 = v12.n128_u8[0];
  }
  outlined init with copy of OnCommandModifier(v2, (uint64_t)&v11);
  v8 = swift_allocObject();
  v9 = v14;
  *(_OWORD *)(v8 + 48) = v13;
  *(_OWORD *)(v8 + 64) = v9;
  *(_BYTE *)(v8 + 80) = v15;
  result = v12;
  *(_OWORD *)(v8 + 16) = v11;
  *(__n128 *)(v8 + 32) = result;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 17) = 1;
  *(_QWORD *)(a1 + 24) = partial apply for closure #1 in OnCommandModifier.body(content:);
  *(_QWORD *)(a1 + 32) = v8;
  return result;
}

uint64_t closure #1 in OnCommandModifier.body(content:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  _OWORD v9[2];
  uint64_t v10;

  v3 = result;
  v4 = *(_BYTE *)(a2 + 48);
  if (*(_QWORD *)(a2 + 56))
  {
    type metadata accessor for GraphHost();
    swift_retain();
    if ((static GraphHost.isUpdating.getter() & 1) != 0)
    {
      dispatch thunk of AnyLocation.wasRead.setter();
      result = swift_release();
      if ((v4 & 1) == 0)
        return result;
    }
    else
    {
      dispatch thunk of AnyLocation.get()();
      result = swift_release();
      if ((v9[0] & 1) == 0)
        return result;
    }
  }
  else if (!*(_BYTE *)(a2 + 48))
  {
    return result;
  }
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)v3;
  if (*(_QWORD *)(*(_QWORD *)v3 + 16)
    && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)a2), (v8 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(v6 + 56) + 40 * v7, (uint64_t)v9);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for CommandAction?);
  }
  else
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for CommandAction?);
    outlined init with copy of TableColumnList(a2 + 8, (uint64_t)v9);
    return specialized Dictionary.subscript.setter((uint64_t)v9, v5);
  }
}

void View.pasteDestination<A>(for:action:validator:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.cuttable<A>(for:_:action:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.cuttable<A>(for:action:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.copyable<A>(_:payload:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.copyable<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.onCommand(_:perform:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.onPasteCommand(of:perform:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  View.onPasteCommand(of:perform:)();
}

void View.onPasteCommand<A>(of:validator:perform:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  View.onPasteCommand<A>(of:validator:perform:)();
}

void View.onCutCommand(perform:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t type metadata accessor for InteropResponder()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type OnCommandModifier and conformance OnCommandModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnCommandModifier and conformance OnCommandModifier;
  if (!lazy protocol witness table cache variable for type OnCommandModifier and conformance OnCommandModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnCommandModifier, &unk_1E1AC5D78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnCommandModifier and conformance OnCommandModifier);
  }
  return result;
}

uint64_t sub_1875730AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type OnCommandModifier and conformance OnCommandModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t get_witness_table_7SwiftUI4ViewRz16CoreTransferable0E0Rd__r__lAA15ModifiedContentVyxAA17OnCommandModifier33_1D7D458D08B5AD38421D04B7C887FEF0LLVGAaBHPxAaBHD1__AiA0cJ0HPyHCHCTm(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type OnCommandModifier and conformance OnCommandModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t initializeWithCopy for OnCommandModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OnCommandModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for OnCommandModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnCommandModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnCommandModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for OnCommandModifier()
{
  return &unk_1E1AC5D78;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnCommandModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of OnCommandModifier(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for OnCommandModifier(a2, a1);
  return a2;
}

uint64_t sub_187573374()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnCommandModifier.body(content:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in OnCommandModifier.body(content:)(a1, v1 + 16);
}

void type metadata accessor for CommandAction?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CommandAction?)
  {
    type metadata accessor for CommandAction();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CommandAction?);
  }
}

ValueMetadata *type metadata accessor for ResponderCommandsKey()
{
  return &type metadata for ResponderCommandsKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<ResponderCommandsKey> and conformance _PreferenceTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ResponderCommandsKey>, (uint64_t)&type metadata for ResponderCommandsKey, (uint64_t)&protocol witness table for ResponderCommandsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>)
  {
    type metadata accessor for _ViewModifier_Content<OnCommandModifier>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for FocusStateBindingModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusStateBindingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>);
  }
}

void type metadata accessor for _ViewModifier_Content<OnCommandModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<OnCommandModifier>)
  {
    lazy protocol witness table accessor for type OnCommandModifier and conformance OnCommandModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<OnCommandModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<OnCommandModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for FocusStateBindingModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<OnCommandModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<OnCommandModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<OnCommandModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<OnCommandModifier>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<OnCommandModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ResponderCommandsKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<ResponderCommandsKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<ResponderCommandsKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ResponderCommandsKey>, (uint64_t)&type metadata for ResponderCommandsKey, (uint64_t)&protocol witness table for ResponderCommandsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ResponderCommandsKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t specialized static ResponderCommandsKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  a2(&v6);
  v3 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;
  return swift_bridgeObjectRelease();
}

void View.onCopyCommand(perform:)()
{
  View.onCutCommand(perform:)();
}

void SearchSuggestionsModifier.body(content:)()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsModifier<A>);
  type metadata accessor for _ViewModifier_Content();
  lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions();
  type metadata accessor for StaticSourceWriter();
}

void sub_187573A88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v5 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v4 - 208) = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<SearchHasSuggestions>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions, (uint64_t)&type metadata for SearchHasSuggestions);
  v7 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v4 - 216) = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  *(_QWORD *)(v4 - 176) = v3;
  *(_QWORD *)(v4 - 168) = v0;
  *(_QWORD *)(v4 - 160) = v1;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v2, v11);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for EnvironmentValues.SearchSuggestions, (uint64_t)partial apply for closure #1 in LabelGroup.body.getter);
}

uint64_t sub_187573B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t HasSuggestions;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  *(_QWORD *)(v6 - 128) = v0;
  *(_QWORD *)(v6 - 120) = &protocol witness table for StaticSourceWriter<A, B>;
  v7 = MEMORY[0x1E0CE2E70];
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6 - 128);
  HasSuggestions = lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions();
  View.input<A>(_:)((uint64_t)&type metadata for SearchHasSuggestions, v2, (uint64_t)&type metadata for SearchHasSuggestions, v8, HasSuggestions);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 208) + 8))(v3, v2);
  *(_QWORD *)(v6 - 144) = v8;
  *(_QWORD *)(v6 - 136) = &protocol witness table for ViewInputFlagModifier<A>;
  v10 = MEMORY[0x18D75FFDC](v7, v1, v6 - 144);
  static ViewBuilder.buildExpression<A>(_:)(v5, v1, v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 216) + 8);
  v11(v5, v1);
  static ViewBuilder.buildBlock<A>(_:)(v4, v1, *(_QWORD *)(v6 - 200));
  return v11(v4, v1);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SearchHasSuggestions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchHasSuggestions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions);
}

uint64_t View.searchSuggestions<A>(_:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a5;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SearchSuggestionsModifier(0, v11, v12, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v20 - v17;
  a1(v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a4);
  MEMORY[0x18D75B4AC](v18, a3, v13, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
}

uint64_t type metadata accessor for SearchSuggestionsModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchSuggestionsModifier);
}

uint64_t View.searchable<A>(text:placement:prompt:suggestions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[16];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  unsigned __int8 v62[9];

  v45 = a7;
  v44 = a6;
  v42 = a5;
  v47 = a3;
  v41 = a1;
  v53 = a9;
  v46 = a15;
  v48 = a14;
  v49 = a11;
  v50 = a12;
  v51 = a16;
  v43 = a13;
  type metadata accessor for SearchModifier<TextField<EmptyView>>(0, a2, a3, a4);
  v20 = v19;
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ModifiedContent();
  v52 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v41 - v26;
  v62[0] = *v42;
  swift_retain();
  v28 = a2;
  swift_retain();
  v29 = a4;
  swift_bridgeObjectRetain();
  v30 = v44;
  v31 = v45;
  outlined copy of Text?(v44, v45, a8, a10);
  SearchModifier.init<>(text:isPresented:placement:prompt:)(v41, v28, v47, v29, 0, 0, 0, v62, (uint64_t)v23, v30, v31, a8, a10);
  v32 = v43;
  v33 = v46;
  MEMORY[0x18D75B4AC](v23, v43, v20, v46);
  outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v23, v34, v35, v36);
  v37 = v48;
  v55 = v32;
  v56 = v48;
  v57 = v33;
  v58 = v51;
  v59 = v49;
  v60 = v50;
  v38 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SearchModifier<TextField<EmptyView>> and conformance SearchModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for SearchModifier<TextField<EmptyView>>, (uint64_t)&protocol conformance descriptor for SearchModifier<A>);
  v61[0] = v33;
  v61[1] = v38;
  v39 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v24, v61);
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #1 in View.searchable<A>(text:placement:prompt:suggestions:), (uint64_t)v54, v24, v37, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v27, v24);
}

uint64_t outlined destroy of SearchModifier<TextField<EmptyView>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for SearchModifier<TextField<EmptyView>>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t View.searchable<A>(text:placement:prompt:suggestions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[2];
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[16];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  unsigned __int8 v57[9];

  v40 = a7;
  v39[1] = a6;
  v39[0] = a5;
  v48 = a8;
  v42 = a3;
  v43 = a13;
  v41 = a14;
  v44 = a10;
  v45 = a11;
  v46 = a15;
  type metadata accessor for SearchModifier<TextField<EmptyView>>(0, a2, a3, a4);
  v19 = v18;
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ModifiedContent();
  v47 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v39 - v25;
  v57[0] = *(_BYTE *)v39[0];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = Text.init(_:tableName:bundle:comment:)();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(a1, a2, v42, a4, 0, 0, 0, v57, (uint64_t)v22, v27, v29, v28 & 1, v30);
  v31 = v41;
  MEMORY[0x18D75B4AC](v22, a12, v19, v41);
  outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v22, v32, v33, v34);
  v35 = v43;
  v50 = a12;
  v51 = v43;
  v52 = v31;
  v53 = v46;
  v54 = v44;
  v55 = v45;
  v36 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SearchModifier<TextField<EmptyView>> and conformance SearchModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for SearchModifier<TextField<EmptyView>>, (uint64_t)&protocol conformance descriptor for SearchModifier<A>);
  v56[0] = v31;
  v56[1] = v36;
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v23, v56);
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #1 in View.searchable<A>(text:placement:prompt:suggestions:), (uint64_t)v49, v23, v35, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v26, v23);
}

uint64_t partial apply for closure #1 in View.searchable<A>(text:placement:prompt:suggestions:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in Layout.callAsFunction<A>(_:)(v1[6], v1[7], v1[3], v1[5], a1);
}

uint64_t View.searchable<A, B>(text:placement:prompt:suggestions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62[16];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  unsigned __int8 v72[9];

  v59 = a7;
  v60 = a8;
  v53 = a4;
  v55 = a3;
  v51 = a2;
  v50 = a1;
  v61 = a9;
  v58 = a14;
  v52 = a15;
  v56 = a11;
  v54 = a13;
  v17 = *(_QWORD *)(a12 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchModifier<TextField<EmptyView>>(0, v20, v21, v22);
  v24 = v23;
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ModifiedContent();
  v57 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x1E0C80A78](v28, v29);
  v32 = (char *)&v49 - v31;
  v72[0] = *a5;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a6, a12, v30);
  v33 = v50;
  swift_retain();
  v34 = v51;
  swift_retain();
  v35 = v53;
  swift_bridgeObjectRetain();
  v36 = v52;
  v37 = Text.init<A>(_:)();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(v33, v34, v55, v35, 0, 0, 0, v72, (uint64_t)v27, v37, v39, v38 & 1, v40);
  v41 = v54;
  MEMORY[0x18D75B4AC](v27, a10, v24, v54);
  outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v27, v42, v43, v44);
  v45 = v56;
  v63 = a10;
  v64 = v56;
  v65 = a12;
  v66 = v41;
  v67 = v58;
  v68 = v36;
  v69 = v59;
  v70 = v60;
  v46 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SearchModifier<TextField<EmptyView>> and conformance SearchModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for SearchModifier<TextField<EmptyView>>, (uint64_t)&protocol conformance descriptor for SearchModifier<A>);
  v71[0] = v41;
  v71[1] = v46;
  v47 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v28, v71);
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #1 in View.searchable<A, B>(text:placement:prompt:suggestions:), (uint64_t)v62, v28, v45, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v32, v28);
}

uint64_t closure #1 in View.searchable<A, B>(text:placement:prompt:suggestions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

uint64_t partial apply for closure #1 in View.searchable<A, B>(text:placement:prompt:suggestions:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in View.searchable<A, B>(text:placement:prompt:suggestions:)(v1[8], v1[9], v1[3], v1[6], a1);
}

void SearchCustomAccessoryModifier.body(content:)()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchCustomAccessoryModifier<A>);
  type metadata accessor for _ViewModifier_Content();
  lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory();
  type metadata accessor for OptionalSourceWriter();
}

void sub_1875746D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v5 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v4 - 208) = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<HasCustomAccessory>, (uint64_t (*)(void))lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory, (uint64_t)&unk_1E1AC9AB8);
  v7 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v4 - 216) = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  *(_QWORD *)(v4 - 176) = v3;
  *(_QWORD *)(v4 - 168) = v0;
  *(_QWORD *)(v4 - 160) = v1;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v2, v11);
  View.optionalViewAlias<A, B>(_:_:)();
}

uint64_t sub_1875747E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t HasCustomAccessory;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  *(_QWORD *)(v6 - 128) = v0;
  *(_QWORD *)(v6 - 120) = &protocol witness table for OptionalSourceWriter<A, B>;
  v7 = MEMORY[0x1E0CE2E70];
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6 - 128);
  HasCustomAccessory = lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory();
  View.input<A>(_:)((uint64_t)&unk_1E1AC9AB8, v2, (uint64_t)&unk_1E1AC9AB8, v8, HasCustomAccessory);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 208) + 8))(v3, v2);
  *(_QWORD *)(v6 - 144) = v8;
  *(_QWORD *)(v6 - 136) = &protocol witness table for ViewInputFlagModifier<A>;
  v10 = MEMORY[0x18D75FFDC](v7, v1, v6 - 144);
  static ViewBuilder.buildExpression<A>(_:)(v5, v1, v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 216) + 8);
  v11(v5, v1);
  static ViewBuilder.buildBlock<A>(_:)(v4, v1, *(_QWORD *)(v6 - 200));
  return v11(v4, v1);
}

uint64_t closure #1 in SearchCustomAccessoryModifier.body(content:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;

  if (*a1 == 1)
  {
    v7 = &a1[*(int *)(type metadata accessor for SearchCustomAccessoryModifier(0, a2, a3, a4) + 36)];
    v8 = *(_QWORD *)(a2 - 8);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 16))(a5, v7, a2);
    v9 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a2 - 8);
    v9 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a5, v9, 1, a2);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasCustomAccessoryPredicate()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasCustomAccessory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HasCustomAccessory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory);
}

void View.customSearchAccessory<A>(isActive:accessory:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_187574A0C(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA25SearchSuggestionsModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for SearchSuggestionsModifier, (uint64_t)&protocol conformance descriptor for SearchSuggestionsModifier<A>);
}

uint64_t sub_187574A20(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];

  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  type metadata accessor for SearchModifier<TextField<EmptyView>>(255, a2, a3, a4);
  v7 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for SearchSuggestionsModifier(255, v4, v5, v8);
  v10 = type metadata accessor for ModifiedContent();
  v14[0] = v6;
  v14[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SearchModifier<TextField<EmptyView>> and conformance SearchModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for SearchModifier<TextField<EmptyView>>, (uint64_t)&protocol conformance descriptor for SearchModifier<A>);
  v11 = MEMORY[0x1E0CE2E70];
  v13[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v14);
  v13[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsModifier<A>, v9);
  return MEMORY[0x18D75FFDC](v11, v10, v13);
}

uint64_t sub_187574B00(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];

  v4 = a1[1];
  v6 = a1[3];
  v5 = a1[4];
  type metadata accessor for SearchModifier<TextField<EmptyView>>(255, a2, a3, a4);
  v7 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for SearchSuggestionsModifier(255, v4, v5, v8);
  v10 = type metadata accessor for ModifiedContent();
  v14[0] = v6;
  v14[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SearchModifier<TextField<EmptyView>> and conformance SearchModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for SearchModifier<TextField<EmptyView>>, (uint64_t)&protocol conformance descriptor for SearchModifier<A>);
  v11 = MEMORY[0x1E0CE2E70];
  v13[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v14);
  v13[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsModifier<A>, v9);
  return MEMORY[0x18D75FFDC](v11, v10, v13);
}

uint64_t sub_187574BE0(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA25SearchSuggestionsModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for SearchCustomAccessoryModifier, (uint64_t)&protocol conformance descriptor for SearchCustomAccessoryModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA25SearchSuggestionsModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(_QWORD *a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = a2(255, a1[1], a1[3]);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](a3, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

uint64_t type metadata accessor for SearchCustomAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchCustomAccessoryModifier);
}

uint64_t type metadata completion function for SearchCustomAccessoryModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SearchCustomAccessoryModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 1) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)&a1[v9];
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9])
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
      v15 = *a1;
      v16 = v15 >= 2;
      v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16)
        return (v17 + 1);
      else
        return 0;
    }
  }
  v11 = a1[v9];
  if (!a1[v9])
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187574DC8 + 4 * byte_187C3FEA0[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for SearchCustomAccessoryModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for SearchHasSuggestions()
{
  return &type metadata for SearchHasSuggestions;
}

uint64_t getEnumTagSinglePayload for SearchSuggestionsModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1875750F0 + 4 * byte_187C3FEAE[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for SearchSuggestionsModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

unint64_t lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions;
  if (!lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchHasSuggestions, &type metadata for SearchHasSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions;
  if (!lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchHasSuggestions, &type metadata for SearchHasSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions;
  if (!lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchHasSuggestions, &type metadata for SearchHasSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions;
  if (!lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchHasSuggestions, &type metadata for SearchHasSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions;
  if (!lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchHasSuggestions, &type metadata for SearchHasSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchHasSuggestions and conformance SearchHasSuggestions);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SearchHasSuggestions()
{
  return &protocol witness table for SearchHasSuggestions;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchCustomAccessoryModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchSuggestionsModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.SearchSuggestions, &type metadata for EnvironmentValues.SearchSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.SearchSuggestions, &type metadata for EnvironmentValues.SearchSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.SearchCustomAccessory, &type metadata for EnvironmentValues.SearchCustomAccessory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.SearchCustomAccessory, &type metadata for EnvironmentValues.SearchCustomAccessory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory;
  if (!lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomAccessory, &unk_1E1AC9AB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory;
  if (!lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomAccessory, &unk_1E1AC9AB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory;
  if (!lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomAccessory, &unk_1E1AC9AB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory;
  if (!lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomAccessory, &unk_1E1AC9AB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory;
  if (!lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasCustomAccessory, &unk_1E1AC9AB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasCustomAccessory and conformance HasCustomAccessory);
  }
  return result;
}

uint64_t partial apply for closure #1 in SearchCustomAccessoryModifier.body(content:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in SearchCustomAccessoryModifier.body(content:)(*(_BYTE **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

void *type metadata accessor for HasCustomAccessory()
{
  return &unk_1E1AC9AB8;
}

void sub_1875755B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchSuggestionsModifier(255, *a1, a1[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchSuggestionsModifier<A>, v4);
  type metadata accessor for _ViewModifier_Content();
  lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187575624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[12];

  v1 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<SearchHasSuggestions>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions, (uint64_t)&type metadata for SearchHasSuggestions);
  v2 = type metadata accessor for ModifiedContent();
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v0);
  v6[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v3 = MEMORY[0x1E0CE2E70];
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6);
  v5[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](v3, v2, v5);
}

void sub_1875756D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchCustomAccessoryModifier(255, *a1, a1[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchCustomAccessoryModifier<A>, v4);
  type metadata accessor for _ViewModifier_Content();
  lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory();
  type metadata accessor for OptionalSourceWriter();
}

uint64_t sub_187575740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[12];

  v1 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<HasCustomAccessory>, (uint64_t (*)(void))lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory, (uint64_t)&unk_1E1AC9AB8);
  v2 = type metadata accessor for ModifiedContent();
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v0);
  v6[1] = &protocol witness table for OptionalSourceWriter<A, B>;
  v3 = MEMORY[0x1E0CE2E70];
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6);
  v5[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](v3, v2, v5);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HasCustomAccessory()
{
  return &protocol witness table for HasCustomAccessory;
}

ValueMetadata *type metadata accessor for HasCustomAccessoryPredicate()
{
  return &type metadata for HasCustomAccessoryPredicate;
}

void AVKitCaptureButtonBridge.attachInteraction()()
{
  void *v0;
  id v1;
  id v2;
  char *v3;
  Class isa;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = objc_msgSend((id)objc_opt_self(), sel__volumeCameraShutterConfigurationsWithOptionsProvider_, 0);
  type metadata accessor for _UIPhysicalButtonConfiguration();
  lazy protocol witness table accessor for type _UIPhysicalButtonConfiguration and conformance NSObject();
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v2 = objc_allocWithZone(MEMORY[0x1E0DC42D0]);
  v3 = v0;
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v2, sel_initWithConfigurations_delegate_, isa, v3);

  v6 = (void *)MEMORY[0x18D760234](&v3[direct field offset for AVKitCaptureButtonBridge.host]);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, sel_addInteraction_, v5);

    v8 = *(void **)&v3[direct field offset for AVKitCaptureButtonBridge.interaction];
    *(_QWORD *)&v3[direct field offset for AVKitCaptureButtonBridge.interaction] = v5;

  }
  else
  {
    __break(1u);
  }
}

char *AVKitCaptureButtonBridge.dispatchCameraCapture(_:)(void *a1)
{
  uint64_t v1;
  char *v3;
  char *result;
  BOOL v5;
  char **v6;
  void (*v7)(char *, char *);
  char v8;
  char v9;
  char v10;

  if ((uint64_t)objc_msgSend(a1, sel__numberOfStages) < 2)
    goto LABEL_5;
  v3 = (char *)objc_msgSend(a1, sel__stage);
  result = (char *)objc_msgSend(a1, sel__numberOfStages);
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    return result;
  }
  if (v3 == result - 1)
    v5 = objc_msgSend(a1, sel__stagePhase) != (id)1;
  else
LABEL_5:
    v5 = 0;
  result = (char *)objc_msgSend(a1, sel__numberOfStages);
  if (result == (char *)1)
  {
    result = (char *)objc_msgSend(a1, sel__state);
    if (!v5)
    {
      if (result == (char *)1)
        return result;
      v6 = &selRef__state;
      goto LABEL_12;
    }
  }
  else if (!v5)
  {
    return result;
  }
  v6 = &selRef__stagePhase;
LABEL_12:
  result = (char *)objc_msgSend(a1, *v6);
  v7 = *(void (**)(char *, char *))(v1 + direct field offset for AVKitCaptureButtonBridge.dispatch);
  if (v7)
  {
    if ((unint64_t)result >= 4)
      v8 = 4;
    else
      v8 = (char)result;
    v10 = 0;
    v9 = v8;
    swift_retain();
    v7(&v10, &v9);
    return (char *)outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
  }
  return result;
}

void @objc AVKitCaptureButtonBridge._physicalButtonInteraction(_:handle:withActiveActions:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  specialized AVKitCaptureButtonBridge._physicalButtonInteraction(_:handle:withActiveActions:)(v7);

}

char *specialized AVKitCaptureButtonBridge._physicalButtonInteraction(_:handle:withActiveActions:)(void *a1)
{
  uint64_t v1;
  char *result;
  void (*v4)(char *, char *);
  id v5;
  unint64_t v6;
  id v7;
  char v8;
  char v9;
  char v10;

  result = (char *)objc_msgSend(a1, sel__button);
  if (result == (char *)5)
    return AVKitCaptureButtonBridge.dispatchCameraCapture(_:)(a1);
  v4 = *(void (**)(char *, char *))(v1 + direct field offset for AVKitCaptureButtonBridge.dispatch);
  if (v4)
  {
    swift_retain();
    v5 = objc_msgSend(a1, sel__button);
    v6 = 0x200000102uLL >> (8 * v5);
    if ((unint64_t)v5 >= 6)
      LOBYTE(v6) = 2;
    v10 = v6;
    v7 = objc_msgSend(a1, sel__state);
    v8 = 4;
    if ((unint64_t)v7 < 4)
      v8 = (char)v7;
    v9 = v8;
    v4(&v10, &v9);
    return (char *)outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v4);
  }
  return result;
}

uint64_t sub_187575CB4()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for _UIPhysicalButtonConfiguration()
{
  unint64_t result;

  result = lazy cache variable for type metadata for _UIPhysicalButtonConfiguration;
  if (!lazy cache variable for type metadata for _UIPhysicalButtonConfiguration)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _UIPhysicalButtonConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIPhysicalButtonConfiguration and conformance NSObject()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type _UIPhysicalButtonConfiguration and conformance NSObject;
  if (!lazy protocol witness table cache variable for type _UIPhysicalButtonConfiguration and conformance NSObject)
  {
    v1 = type metadata accessor for _UIPhysicalButtonConfiguration();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIPhysicalButtonConfiguration and conformance NSObject);
  }
  return result;
}

void UITabBarController.identifiedViewTree.getter(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  int8x16_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  int8x16_t v13[10];
  char v14;
  _BYTE v15[168];

  v3 = objc_msgSend(v1, sel_selectedViewController);
  if (v3)
  {
    v4 = v3;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    v5 = swift_dynamicCastClass();
    if (v5)
    {
      v6 = *(void **)(v5 + direct field offset for UIHostingController.host);
      type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>();
      v7 = v6;
      ViewRendererHost.preferenceValue<A>(_:)();

      outlined init with copy of _IdentifiedViewTree((uint64_t)v15, (uint64_t)v13);
      if (v14 != 2
        || (v8 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v13[2], v13[6]), vorrq_s8(v13[4], v13[8])), vorrq_s8(vorrq_s8(v13[3], v13[7]), vorrq_s8(v13[5], v13[9]))), vorrq_s8(v13[0], v13[1])), *(_QWORD *)&vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))))
      {
        outlined destroy of _IdentifiedViewTree((uint64_t)v13);
        outlined init with copy of _IdentifiedViewTree((uint64_t)v15, (uint64_t)v13);
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
        v11 = *((_QWORD *)v9 + 2);
        v10 = *((_QWORD *)v9 + 3);
        if (v11 >= v10 >> 1)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v9);
        *((_QWORD *)v9 + 2) = v11 + 1;
        outlined init with take of _IdentifiedViewTree((__int128 *)v13[0].i8, (uint64_t)&v9[168 * v11 + 32]);

        outlined destroy of _IdentifiedViewTree((uint64_t)v15);
        if (!*((_QWORD *)v9 + 2))
          goto LABEL_8;
LABEL_12:
        v12 = 1;
        goto LABEL_13;
      }
      outlined destroy of _IdentifiedViewTree((uint64_t)v15);

      outlined destroy of _IdentifiedViewTree((uint64_t)v13);
    }
    else
    {

    }
  }
  v9 = (char *)MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_12;
LABEL_8:
  swift_bridgeObjectRelease();
  v9 = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v12 = 2;
  *(_OWORD *)(a1 + 8) = 0u;
LABEL_13:
  *(_QWORD *)a1 = v9;
  *(_BYTE *)(a1 + 160) = v12;
}

uint64_t View.tabPlatformIdentified()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 0;
  return MEMORY[0x18D75B4AC](&v3, a1, &type metadata for TabPlatformIdentified, a2);
}

UIImage_optional __swiftcall PlatformItem.makeTabBarItemImage()()
{
  uint64_t v0;
  Swift::Bool v1;
  uint64_t v2;
  objc_class *v3;
  void *v4;
  char v5;
  uint64_t v6;
  _BYTE v7[5];
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  _BYTE v12[216];
  uint64_t v13[3];
  _BYTE v14[192];
  UIImage_optional result;

  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v13) == 1
    || (outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v14, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?), _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v9) == 1))
  {
    v2 = 0;
  }
  else if (v11)
  {
    swift_unknownObjectRetain();
    objc_opt_self();
    v2 = swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    v4 = v9;
    v5 = v10;
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    v6 = v8;
    outlined retain of Image.Resolved?((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
    outlined copy of GraphicsImage.Contents?(v4, v5);
    swift_retain();
    v2 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v6);
    swift_release();
    outlined retain of Image.Resolved?((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v4, v5);
  }
  v3 = (objc_class *)v2;
  result.value.super.isa = v3;
  result.is_nil = v1;
  return result;
}

void View.tabItem<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[29];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];

  v14[5] = a4;
  v14[4] = a2;
  v14[3] = a1;
  v14[8] = a6;
  v14[9] = a3;
  MEMORY[0x1E0C80A78](a1, a3);
  v14[7] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v9 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for ModifiedContent();
  v18[0] = a5;
  v18[1] = &protocol witness table for UpdateDefaultTabFill;
  v14[1] = a5;
  v12 = MEMORY[0x1E0CE2E70];
  v17[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v18);
  v17[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v16[0] = MEMORY[0x18D75FFDC](v12, v9, v17);
  v16[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v15[0] = MEMORY[0x18D75FFDC](v12, v10, v16);
  v15[1] = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  v13 = MEMORY[0x18D75FFDC](v12, v11, v15);
  v14[23] = &type metadata for LabelPlatformItemsStrategy;
  v14[24] = v11;
  v14[25] = &type metadata for TabItem.TraitKey;
  v14[26] = &protocol witness table for LabelPlatformItemsStrategy;
  v14[27] = v13;
  v14[28] = &protocol witness table for TabItem.TraitKey;
  type metadata accessor for PlatformItemTraitWriter();
}

void sub_1875763A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v5 - 368) = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  *(_QWORD *)(v5 - 288) = v3;
  *(_QWORD *)(v5 - 280) = *(_QWORD *)(v5 - 312);
  v10 = *(_QWORD *)(v5 - 344);
  *(_QWORD *)(v5 - 272) = v10;
  *(_QWORD *)(v5 - 264) = v4;
  v11 = *(_QWORD *)(v5 - 352);
  *(_QWORD *)(v5 - 256) = *(_QWORD *)(v5 - 360);
  *(_QWORD *)(v5 - 248) = v11;
  View.platformItemLabelTrait<A, B>(for:_:)(v1, (uint64_t)partial apply for closure #1 in View.tabItem<A>(_:), v5 - 304, v3, v1, v0, v10, (uint64_t)&protocol witness table for TabItem.TraitKey, v2);
}

uint64_t sub_1875764AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *KeyPath;
  unint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v7 - 216) = v0;
  *(_QWORD *)(v7 - 208) = &protocol witness table for PlatformItemTraitWriter<A, B, C>;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v7 - 216);
  *(_QWORD *)(v7 - 200) = 0;
  MEMORY[0x18D75B4AC](v7 - 200, v4, &type metadata for TabPlatformIdentified, v8);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v6, v4);
  KeyPath = (uint64_t *)swift_getKeyPath();
  v5();
  *(_QWORD *)(v7 - 200) = AnyView.init<A>(_:)();
  v10 = lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified();
  *(_QWORD *)(v7 - 232) = v8;
  *(_QWORD *)(v7 - 224) = v10;
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7 - 232);
  View.containerValue<A>(_:_:)(KeyPath, v7 - 200, v2, v11);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 368) + 8))(v3, v2);
}

uint64_t closure #1 in View.tabItem<A>(_:)@<X0>(uint64_t (*a1)(double)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v26 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ModifiedContent();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v25 - v19;
  v21 = a1(v18);
  MEMORY[0x18D75B4AC](v21, a3, &type metadata for UpdateDefaultTabFill, a4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  v27[0] = a4;
  v27[1] = &protocol witness table for UpdateDefaultTabFill;
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v27);
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, v22);
  v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v15, v11);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v11, v26);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, v11);
}

uint64_t partial apply for closure #1 in View.tabItem<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in View.tabItem<A>(_:)(*(uint64_t (**)(double))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 40), a1);
}

uint64_t ContainerValues.tabItemLabel_v0.getter()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ContainerValueViewTraitKey<TabItemLabelKey>, (uint64_t)&unk_1E1ABD600, (uint64_t)&protocol witness table for TabItemLabelKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerValueViewTraitKey);
  lazy protocol witness table accessor for type ContainerValueViewTraitKey<TabItemLabelKey> and conformance ContainerValueViewTraitKey<A>();
  return ViewTraitCollection.value<A>(for:defaultValue:)();
}

uint64_t key path getter for ContainerValues.tabItemLabel_v0 : ContainerValues@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ContainerValueViewTraitKey<TabItemLabelKey>, (uint64_t)&unk_1E1ABD600, (uint64_t)&protocol witness table for TabItemLabelKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerValueViewTraitKey);
  lazy protocol witness table accessor for type ContainerValueViewTraitKey<TabItemLabelKey> and conformance ContainerValueViewTraitKey<A>();
  result = ViewTraitCollection.value<A>(for:defaultValue:)();
  *a1 = v3;
  return result;
}

uint64_t key path setter for ContainerValues.tabItemLabel_v0 : ContainerValues()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ContainerValueViewTraitKey<TabItemLabelKey>, (uint64_t)&unk_1E1ABD600, (uint64_t)&protocol witness table for TabItemLabelKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerValueViewTraitKey);
  lazy protocol witness table accessor for type ContainerValueViewTraitKey<TabItemLabelKey> and conformance ContainerValueViewTraitKey<A>();
  swift_retain();
  return ViewTraitCollection.subscript.setter();
}

uint64_t ContainerValues.tabItemLabel_v0.setter()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ContainerValueViewTraitKey<TabItemLabelKey>, (uint64_t)&unk_1E1ABD600, (uint64_t)&protocol witness table for TabItemLabelKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerValueViewTraitKey);
  lazy protocol witness table accessor for type ContainerValueViewTraitKey<TabItemLabelKey> and conformance ContainerValueViewTraitKey<A>();
  return ViewTraitCollection.subscript.setter();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance TabPlatformIdentified@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = Namespace.wrappedValue.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t TabItemLabel_v0.body.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

void (*ContainerValues.tabItemLabel_v0.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ContainerValueViewTraitKey<TabItemLabelKey>, (uint64_t)&unk_1E1ABD600, (uint64_t)&protocol witness table for TabItemLabelKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerValueViewTraitKey);
  v3[3] = v4;
  v3[1] = 0;
  v3[4] = lazy protocol witness table accessor for type ContainerValueViewTraitKey<TabItemLabelKey> and conformance ContainerValueViewTraitKey<A>();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  return ContainerValues.tabItemLabel_v0.modify;
}

void ContainerValues.tabItemLabel_v0.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;

  v2 = *a1;
  (*a1)[1] = **a1;
  if ((a2 & 1) != 0)
  {
    swift_retain();
    ViewTraitCollection.subscript.setter();
    swift_release();
  }
  else
  {
    ViewTraitCollection.subscript.setter();
  }
  free(v2);
}

unint64_t lazy protocol witness table accessor for type ContainerValueViewTraitKey<TabItemLabelKey> and conformance ContainerValueViewTraitKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ContainerValueViewTraitKey<TabItemLabelKey> and conformance ContainerValueViewTraitKey<A>;
  if (!lazy protocol witness table cache variable for type ContainerValueViewTraitKey<TabItemLabelKey> and conformance ContainerValueViewTraitKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ContainerValueViewTraitKey<TabItemLabelKey>, (uint64_t)&unk_1E1ABD600, (uint64_t)&protocol witness table for TabItemLabelKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerValueViewTraitKey);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerValueViewTraitKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerValueViewTraitKey<TabItemLabelKey> and conformance ContainerValueViewTraitKey<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in TabItemLabel_v0()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for TabItemLabel_v0()
{
  return &type metadata for TabItemLabel_v0;
}

uint64_t ChildIndexProjection.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  char v3[40];
  _OWORD v4[12];
  _BYTE v5[56];
  uint64_t v6;

  outlined init with copy of _VariadicView_Children(v0 + 16, (uint64_t)v5);
  v6 = 0;
  if (!_VariadicView_Children.endIndex.getter())
    return outlined destroy of EnumeratedSequence<_VariadicView_Children>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
  v1 = 0;
  while (1)
  {
    _VariadicView_Children.subscript.getter();
    result = _VariadicView_Children.endIndex.getter();
    if (v1 < 0 || v1 >= result)
      break;
    v6 = v1 + 1;
    v4[2] = v4[8];
    v4[3] = v4[9];
    v4[4] = v4[10];
    v4[5] = v4[11];
    v4[0] = v4[6];
    v4[1] = v4[7];
    _ViewList_View.viewID.getter();
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v3);
    outlined destroy of _VariadicView_Children.Element((uint64_t)v4);
    v1 = v6;
    if (v1 == _VariadicView_Children.endIndex.getter())
      return outlined destroy of EnumeratedSequence<_VariadicView_Children>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
  }
  __break(1u);
  return result;
}

uint64_t ChildIndexProjection.get(base:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[56];
  uint64_t v4;
  _QWORD v5[12];

  outlined init with copy of _VariadicView_Children(v0 + 16, (uint64_t)v3);
  specialized Sequence.first(where:)((uint64_t (*)(_BYTE *))partial apply for closure #1 in ChildIndexProjection.get(base:), (uint64_t)&v4);
  outlined destroy of EnumeratedSequence<_VariadicView_Children>((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DECC58]);
  if (v5[3])
  {
    v1 = v4;
    outlined destroy of _VariadicView_Children.Element((uint64_t)v5);
  }
  else
  {
    outlined destroy of (offset: Int, element: _VariadicView_Children.Element)?((uint64_t)&v4);
    return 0;
  }
  return v1;
}

uint64_t closure #1 in ChildIndexProjection.get(base:)(_QWORD *a1, uint64_t a2)
{
  char v3;
  _QWORD v5[6];
  _BYTE v6[96];

  v5[5] = *a1;
  outlined init with copy of _VariadicView_Children.Element((uint64_t)(a1 + 1), (uint64_t)v6);
  _ViewList_View.viewID.getter();
  outlined destroy of _VariadicView_Children.Element((uint64_t)v6);
  v3 = MEMORY[0x18D75E284](v5, a2);
  outlined destroy of AnyHashable((uint64_t)v5);
  return v3 & 1;
}

uint64_t ChildIndexProjection.set(base:newValue:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((a3 & 1) == 0)
  {
    v4 = result;
    v5 = _VariadicView_Children.endIndex.getter();
    result = _VariadicView_Children.endIndex.getter();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      result = _VariadicView_Children.endIndex.getter();
      if ((v5 & 0x8000000000000000) == 0 && result >= v5)
      {
        if (v5 > a2)
        {
          outlined destroy of AnyHashable(v4);
          _VariadicView_Children.subscript.getter();
          _ViewList_View.viewID.getter();
          return outlined destroy of _VariadicView_Children.Element((uint64_t)&v6);
        }
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t ChildIndexProjection.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of _VariadicView_Children(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ChildIndexProjection()
{
  return objc_opt_self();
}

void sub_187576E3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[2];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v10[0] = v1;
  v10[1] = &protocol witness table for UpdateDefaultTabFill;
  v6 = MEMORY[0x1E0CE2E70];
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v10);
  v9[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v8[0] = MEMORY[0x18D75FFDC](v6, v3, v9);
  v8[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v7[0] = MEMORY[0x18D75FFDC](v6, v4, v8);
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  MEMORY[0x18D75FFDC](v6, v5, v7);
  type metadata accessor for PlatformItemTraitWriter();
}

uint64_t sub_187576F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[26];

  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>(255);
  v4 = type metadata accessor for ModifiedContent();
  v8[0] = v1;
  v8[1] = &protocol witness table for PlatformItemTraitWriter<A, B, C>;
  v7[0] = MEMORY[0x18D75FFDC](v0, v2, v8);
  v7[1] = lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified();
  v6[0] = MEMORY[0x18D75FFDC](v0, v3, v7);
  v6[1] = &protocol witness table for _ContainerValueWritingModifier<A>;
  return MEMORY[0x18D75FFDC](v0, v4, v6);
}

void type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for _ContainerValueWritingModifier<TabItemLabel_v0?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for TabItemLabel_v0?);
    v5 = type metadata accessor for _ContainerValueWritingModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for _ContainerValueWritingModifier<TabItemLabel_v0?>);
  }
}

uint64_t sub_1875770AC()
{
  return MEMORY[0x1E0CE7508];
}

void *type metadata accessor for TabItemLabelKey()
{
  return &unk_1E1ABD600;
}

ValueMetadata *type metadata accessor for TabPlatformIdentified()
{
  return &type metadata for TabPlatformIdentified;
}

uint64_t protocol witness for Projection.get(base:) in conformance ChildIndexProjection@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = ChildIndexProjection.get(base:)();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ChildIndexProjection(uint64_t a1, uint64_t a2)
{
  return ChildIndexProjection.set(base:newValue:)(a1, *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ChildIndexProjection()
{
  Hasher.init(_seed:)();
  ChildIndexProjection.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ChildIndexProjection()
{
  return ChildIndexProjection.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ChildIndexProjection()
{
  Hasher.init(_seed:)();
  ChildIndexProjection.hash(into:)();
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in ChildIndexProjection()
{
  return lazy protocol witness table accessor for type ChildIndexProjection and conformance ChildIndexProjection(&lazy protocol witness table cache variable for type ChildIndexProjection and conformance ChildIndexProjection, (uint64_t)&protocol conformance descriptor for ChildIndexProjection);
}

uint64_t lazy protocol witness table accessor for type ChildIndexProjection and conformance ChildIndexProjection(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ChildIndexProjection();
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Hashable in ChildIndexProjection()
{
  return lazy protocol witness table accessor for type ChildIndexProjection and conformance ChildIndexProjection(&lazy protocol witness table cache variable for type ChildIndexProjection and conformance ChildIndexProjection, (uint64_t)&protocol conformance descriptor for ChildIndexProjection);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TabPlatformIdentified()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: _VariadicView_Children.Element))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: _VariadicView_Children.Element));
  }
}

uint64_t outlined destroy of EnumeratedSequence<_VariadicView_Children>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;

  type metadata accessor for VStack<TableHeaderViewCore>(0, a2, a3, MEMORY[0x1E0CE5600], a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

ValueMetadata *type metadata accessor for TabPlatformIdentifierKey()
{
  return &type metadata for TabPlatformIdentifierKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<TabPlatformIdentified> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<TabPlatformIdentifierKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<TabPlatformIdentified>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified, (uint64_t)&type metadata for TabPlatformIdentified, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<TabPlatformIdentifierKey>, (uint64_t)&type metadata for TabPlatformIdentifierKey, (uint64_t)&protocol witness table for TabPlatformIdentifierKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<TabPlatformIdentified> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlatformIdentified> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlatformIdentified> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<TabPlatformIdentified>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified, (uint64_t)&type metadata for TabPlatformIdentified, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlatformIdentified> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<TabPlatformIdentifierKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<TabPlatformIdentifierKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<TabPlatformIdentifierKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<TabPlatformIdentifierKey>, (uint64_t)&type metadata for TabPlatformIdentifierKey, (uint64_t)&protocol witness table for TabPlatformIdentifierKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<TabPlatformIdentifierKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(uint64_t a1, char a2, char *a3)
{
  _QWORD *v3;
  double v4;
  double v5;
  double v6;
  _QWORD *v7;
  void *ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, double, double);
  uint64_t v19;
  char v20;
  double v21;
  double v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  void *v36;
  unint64_t v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  double v43;
  double v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;

  v7 = v3;
  ObjectType = (void *)swift_getObjectType();
  v12 = type metadata accessor for IndexPath();
  MEMORY[0x1E0C80A78](v12, v13);
  if ((a2 & 1) != 0)
    specialized UICollectionViewListCoordinatorBase.numberOfSections(in:)(v14, v15, v16, v17);
  *(_QWORD *)((char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x300)) = 0;
  while (1)
  {
    v50 = a3;
    v23 = objc_msgSend((id)a1, sel_visibleSupplementaryViewsOfKind_, *MEMORY[0x1E0DC48A8], v48);
    v24 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionReusableView);
    v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v48 = v24;
    v49 = (void *)a1;
    if (v25 >> 62)
    {
      swift_bridgeObjectRetain();
      a1 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!a1)
        goto LABEL_22;
    }
    else
    {
      a1 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!a1)
        goto LABEL_22;
    }
    if (a1 < 1)
    {
      __break(1u);
      __break(1u);
      goto LABEL_36;
    }
    v26 = 0;
    a3 = *(char **)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x300);
    do
    {
      if ((v25 & 0xC000000000000001) != 0)
        v27 = (id)MEMORY[0x18D75E3BC](v26, v25);
      else
        v27 = *(id *)(v25 + 8 * v26 + 32);
      v28 = v27;
      type metadata accessor for TableCollectionViewCell();
      v29 = swift_dynamicCastClass();
      if (v29
        && (*(_QWORD *)(v29 + direct field offset for TableCollectionViewCell.headerLeadingMargin) = *(_QWORD *)&a3[(_QWORD)v7],
            (v30 = *(void **)(v29 + direct field offset for ListCollectionViewCellBase.host)) != 0))
      {
        type metadata accessor for Range<AttributedString.Index>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>();
        v31 = v30;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

      }
      else
      {

      }
      ++v26;
    }
    while (a1 != v26);
LABEL_22:
    swift_bridgeObjectRelease();
    ObjectType = v50;
    if (v50)
    {
      v36 = v50;
      goto LABEL_30;
    }
    v37 = static UICollectionViewListCoordinatorBase.globalHeaderKind.getter();
    v38 = (void *)MEMORY[0x18D75CC88](v37);
    swift_bridgeObjectRelease();
    v39 = objc_msgSend(v49, sel_visibleSupplementaryViewsOfKind_, v38, v48);

    v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    if (!(v24 >> 62))
    {
      if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_37;
      goto LABEL_26;
    }
LABEL_36:
    swift_bridgeObjectRetain();
    v47 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v47)
    {
LABEL_37:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_26:
    if ((v24 & 0xC000000000000001) != 0)
      break;
    if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v40 = *(id *)(v24 + 32);
      goto LABEL_29;
    }
    __break(1u);
    swift_once();
    v18 = *(uint64_t (**)(uint64_t, double, double))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v24) + 0x68);
    v19 = v18(static HorizontalAlignment.listRowSeparatorLeading, v5, v6);
    if ((v20 & 1) != 0)
    {
      v32 = static HorizontalAlignment.leadingText.getter();
      *(double *)&v33 = COERCE_DOUBLE(v18(v32, v5, v6));
      v35 = v34;

      v22 = *(double *)&v33;
      if ((v35 & 1) != 0)
        v22 = 0.0;
    }
    else
    {
      v21 = *(double *)&v19;

      v22 = v21;
    }
    *(double *)((char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x300)) = v4 + v22;
  }
  v40 = (id)MEMORY[0x18D75E3BC](0, v24);
LABEL_29:
  v36 = v40;
  swift_bridgeObjectRelease();
LABEL_30:
  type metadata accessor for TableGlobalHeader();
  v41 = swift_dynamicCastClass();
  if (v41)
  {
    v42 = (void *)v41;
    v43 = *(double *)((char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x300));
    v44 = *(double *)(v41 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_headerLeadingMargin);
    *(double *)(v41 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_headerLeadingMargin) = v43;
    v45 = ObjectType;
    if (v44 != v43)
      objc_msgSend(v42, sel_setNeedsUpdateConfiguration);
  }
  else
  {
    v46 = ObjectType;
  }

}

uint64_t UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _BOOL4 v37;
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  int v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  double v53;
  _QWORD *v54;
  char v55;
  void (*v56)(char *, uint64_t);
  int v57;
  char v58;
  double v59;
  char *v60;
  uint64_t v61;
  double v62;
  int v63;
  double v64;
  double v65;
  char v66;
  Swift::Bool v67;
  uint64_t v68;
  char v69;
  char *v70;
  char v71;
  double v72;
  char v73;
  double v74;
  uint64_t v75;
  char v76;
  char v77;
  Swift::Int v78;
  char v79;
  double v80;
  Swift::Bool v81;
  double v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  double v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  unsigned int v91;
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  int v96;
  Swift::Int v97;
  char *v98;

  v5 = v4;
  v95 = a2;
  v93 = a4;
  v7 = type metadata accessor for ShadowListDataSource(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2E0), *(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2F0) + 8), a3);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v98 = (char *)&v84 - v10;
  v11 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v84 - v18;
  UICollectionViewListCoordinator.listAppearance.getter(v20, v21, v22, v23);
  v24 = *MEMORY[0x1E0DC2898];
  v92 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v92(v15, v24, v11);
  v25 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
  v26 = *(void (**)(char *, uint64_t))(v12 + 8);
  v26(v15, v11);
  v27 = ((uint64_t (*)(char *, uint64_t))v26)(v19, v11);
  v97 = a1;
  v94 = (char *)v26;
  if ((v25 & 1) == 0)
  {
    UICollectionViewListCoordinator.listAppearance.getter(v27, v28, v29, v30);
    v92(v15, *MEMORY[0x1E0DC2878], v11);
    v31 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
    v26(v15, v11);
    v32 = ((uint64_t (*)(char *, uint64_t))v26)(v19, v11);
    if ((v31 & 1) == 0)
    {
      UICollectionViewListCoordinator.listAppearance.getter(v32, v33, v34, v35);
      v92(v15, *MEMORY[0x1E0DC28A0], v11);
      v96 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
      v26(v15, v11);
      v26(v19, v11);
      if (a1 >= 1)
        goto LABEL_4;
LABEL_6:
      LODWORD(v38) = 0;
      v36 = v98;
      goto LABEL_7;
    }
  }
  v96 = 1;
  if (a1 <= 0)
    goto LABEL_6;
LABEL_4:
  v38 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x88);
  swift_beginAccess();
  v36 = v98;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v98, v38, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  v37 = ListDiffable.hasFooter(forSectionAtOffset:)(a1 - 1);
  a1 = v97;
  LODWORD(v38) = v37;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v36, v7);
LABEL_7:
  v39 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x88);
  swift_beginAccess();
  v89 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v90 = v39;
  v89(v36, v39, v7);
  v88 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  LODWORD(v39) = ListDiffable.hasHeader(forSectionAtOffset:)(a1);
  v40 = *(void (**)(char *, uint64_t))(v8 + 8);
  v40(v36, v7);
  v91 = v96 | v38 | v39;
  *(double *)&result = COERCE_DOUBLE(spacingValue #1 <A, B>(offset:) in UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)(a1, v5, v41, v42));
  v47 = *(double *)&result;
  v48 = v44;
  v49 = a1 - 1;
  v50 = v94;
  if (a1 < 1)
    goto LABEL_25;
  if ((v44 & 1) != 0)
  {
    v51 = a1 - 1;
    v52 = v5;
    v53 = v47;
    v85 = v7;
    v54 = v5;
    v55 = (char)v38;
    v38 = v94;
    v56 = v40;
    v57 = v48;
    *(double *)&result = COERCE_DOUBLE(spacingValue #1 <A, B>(offset:) in UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)(v51, v52, v45, v46));
    v48 = v57;
    v40 = v56;
    v50 = v38;
    LOBYTE(v38) = v55;
    v5 = v54;
    v7 = v85;
    v47 = v53;
    if ((v58 & 1) != 0)
      goto LABEL_25;
  }
  v59 = 0.0;
  v60 = v98;
  if ((v91 & 1) != 0)
  {
    v59 = *(double *)&result;
    if ((v96 & 1) != 0)
    {
      if ((v38 & 1) != 0)
        v59 = *(double *)&result + *(double *)&result;
    }
    else if ((v38 & 1) != 0)
    {
      v61 = v49;
      v62 = v47;
      v63 = v48;
      v64 = COERCE_DOUBLE(spacingValue #1 <A, B>(offset:) in UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)(v61, v5, v45, v46));
      v48 = v63;
      v47 = v62;
      v65 = v64 * 0.5;
      if ((v66 & 1) != 0)
        v65 = 0.0;
      v59 = v65 + v59;
    }
  }
  v86 = v48;
  v87 = v47;
  v89(v60, v90, v7);
  v67 = ListDiffable.hasHeader(forSectionAtOffset:)(v97);
  *(double *)&result = COERCE_DOUBLE(((uint64_t (*)(char *, uint64_t))v40)(v60, v7));
  if (v67)
  {
    UICollectionViewListCoordinator.listAppearance.getter(result, v68, v45, v46);
    v92(v15, *MEMORY[0x1E0DC2890], v11);
    v69 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
    ((void (*)(char *, uint64_t))v50)(v15, v11);
    *(double *)&result = COERCE_DOUBLE(((uint64_t (*)(char *, uint64_t))v50)(v19, v11));
    v47 = v87;
    LOBYTE(v48) = v86;
    if ((v69 & 1) != 0
      || (v70 = (char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x130), (v70[9] & 1) == 0)
      && (v70[8] & 1) == 0)
    {
      v71 = 0;
      v72 = v59 * 0.5;
      v73 = 1;
      v74 = 0.0;
      v75 = v95;
      if (v95 > 0)
      {
        v76 = 1;
        v77 = 1;
LABEL_27:
        v78 = v97;
        v60 = v98;
        goto LABEL_30;
      }
      v82 = 0.0;
      v77 = 1;
      goto LABEL_43;
    }
LABEL_25:
    v77 = 0;
    v73 = 1;
    v72 = 0.0;
    v75 = v95;
    if (v95 >= 1)
    {
      v71 = 1;
      v74 = 0.0;
      v76 = 1;
      goto LABEL_27;
    }
    v82 = 0.0;
    v71 = 1;
    v74 = 0.0;
LABEL_43:
    v76 = 1;
    goto LABEL_44;
  }
  v76 = 0;
  v74 = v59 * 0.5;
  v73 = 1;
  v72 = 0.0;
  v75 = v95;
  if (v95 <= 0)
  {
    v82 = 0.0;
    v77 = 1;
    v71 = 1;
    goto LABEL_44;
  }
  v71 = 1;
  v77 = 1;
  v78 = v97;
  v47 = v87;
  LOBYTE(v48) = v86;
LABEL_30:
  if (v75 - 1 <= v78)
    goto LABEL_36;
  if ((v48 & 1) != 0)
  {
    *(double *)&result = COERCE_DOUBLE(spacingValue #1 <A, B>(offset:) in UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)(v78 + 1, v5, v45, v46));
    if ((v79 & 1) == 0)
    {
      v47 = *(double *)&result;
      goto LABEL_34;
    }
LABEL_36:
    v82 = 0.0;
    v73 = 1;
    goto LABEL_44;
  }
LABEL_34:
  if ((v96 & 1) != 0)
  {
    v80 = v47;
    v89(v60, v90, v7);
    v81 = ListDiffable.hasFooter(forSectionAtOffset:)(v78);
    *(double *)&result = COERCE_DOUBLE(((uint64_t (*)(char *, uint64_t))v40)(v60, v7));
    v47 = v80;
    if (v81)
      goto LABEL_36;
  }
  v73 = 0;
  v82 = v47 * 0.5;
  if ((v91 & 1) == 0)
    v82 = 0.0;
  v77 = 1;
LABEL_44:
  v83 = v93;
  *v93 = v77;
  *((double *)v83 + 1) = v74;
  v83[16] = v76;
  *((double *)v83 + 3) = v82;
  v83[32] = v73;
  *((double *)v83 + 5) = v72;
  v83[48] = v71;
  return result;
}

uint64_t UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  Swift::Int v45;
  Swift::Bool v46;
  void (*v47)(char *, uint64_t);
  unsigned int *v48;
  Swift::Bool v49;
  unsigned int *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void (*v67)(char *, _QWORD);
  char *v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  char v73;
  void (*v74)(char *, uint64_t);
  uint64_t result;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  void (*v84)(char *, char *, uint64_t);
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  Swift::Int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char v102[32];

  v99 = a2;
  v91 = a1;
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = *MEMORY[0x1E0DEEDD8] & *v4;
  v9 = type metadata accessor for UICollectionLayoutListConfiguration.ContentHuggingElements();
  v97 = *(_QWORD *)(v9 - 8);
  v98 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v96 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v95 = (char *)&v76 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v77 = (char *)&v76 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v79 = (char *)&v76 - v20;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICollectionLayoutListConfiguration.ContentHuggingElements?, v21, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v22, v23);
  v78 = (char *)&v76 - v24;
  v88 = type metadata accessor for UICollectionLayoutListConfiguration.FooterMode();
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88, v25);
  v86 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = *(_QWORD *)(v8 + 736);
  v94 = v8;
  v92 = *(_QWORD *)(v8 + 752);
  v28 = type metadata accessor for ShadowListDataSource(0, v93, *(_QWORD *)(v92 + 8), v27);
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v30);
  v32 = (char *)&v76 - v31;
  v82 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode();
  v80 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82, v33);
  v81 = (char *)&v76 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  MEMORY[0x1E0C80A78](v35, v36);
  v37 = *a3;
  v89 = a3[1];
  v90 = v37;
  UICollectionViewListCoordinator.listAppearance.getter(v38, v39, v40, v41);
  v100 = a4;
  UICollectionLayoutListConfiguration.init(appearance:)();
  v101 = v4;
  if (*(_QWORD *)((char *)v4 + OBJC_IVAR____TtC7SwiftUI39UICollectionViewListCoordinatorBaseBase_backgroundColor))
  {
    v42 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    UICollectionLayoutListConfiguration.backgroundColor.setter();
  }
  v43 = (char *)v101 + *(_QWORD *)((*v7 & *v101) + 0x88);
  swift_beginAccess();
  v44 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v85 = v43;
  v44(v32, v43, v28);
  v84 = v44;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v28);
  v45 = v91;
  v46 = ListDiffable.hasHeader(forSectionAtOffset:)(v91);
  v47 = *(void (**)(char *, uint64_t))(v29 + 8);
  v47(v32, v28);
  v83 = v47;
  v48 = (unsigned int *)MEMORY[0x1E0DC28E8];
  if (!v46)
    v48 = (unsigned int *)MEMORY[0x1E0DC2900];
  (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v81, *v48, v82);
  UICollectionLayoutListConfiguration.headerMode.setter();
  v44(v32, v43, v28);
  v49 = ListDiffable.hasFooter(forSectionAtOffset:)(v45);
  v47(v32, v28);
  v50 = (unsigned int *)MEMORY[0x1E0DC28C0];
  if (!v49)
    v50 = (unsigned int *)MEMORY[0x1E0DC28D0];
  (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v86, *v50, v88);
  UICollectionLayoutListConfiguration.footerMode.setter();
  v51 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v52 = (_QWORD *)swift_allocObject();
  v54 = v93;
  v53 = v94;
  v52[2] = v93;
  v55 = *(_QWORD *)(v53 + 744);
  v56 = v92;
  v52[3] = v55;
  v52[4] = v56;
  v57 = *(_QWORD *)(v53 + 760);
  v52[5] = v57;
  v52[6] = v51;
  UICollectionLayoutListConfiguration.itemSeparatorHandler.setter();
  v58 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v59 = (_QWORD *)swift_allocObject();
  v59[2] = v54;
  v59[3] = v55;
  v59[4] = v56;
  v59[5] = v57;
  v59[6] = v58;
  UICollectionLayoutListConfiguration.leadingSwipeActionsConfigurationProvider.setter();
  v60 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v61 = (_QWORD *)swift_allocObject();
  v61[2] = v54;
  v61[3] = v55;
  v61[4] = v56;
  v61[5] = v57;
  v62 = v90;
  v61[6] = v60;
  v61[7] = v62;
  v61[8] = v89;
  swift_retain();
  swift_retain();
  UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter();
  v84(v32, v85, v28);
  LOBYTE(v60) = ShadowListDataSource.hasGlobalHeader.getter(v28);
  v83(v32, v28);
  v64 = v97;
  v63 = v98;
  v65 = v95;
  if ((v60 & 1) != 0)
  {
    UICollectionLayoutListConfiguration.headerTopPadding.setter();
    v66 = v79;
    static UICollectionLayoutListConfiguration.ContentHuggingElements.supplementaryHeader.getter();
    v67 = (void (*)(char *, _QWORD))UICollectionLayoutListConfiguration.contentHuggingElements.modify();
    (*(void (**)(char *))(v64 + 16))(v65);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UICollectionLayoutListConfiguration.ContentHuggingElements and conformance UICollectionLayoutListConfiguration.ContentHuggingElements, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2978], MEMORY[0x1E0DC2980]);
    v68 = v77;
    dispatch thunk of SetAlgebra.intersection(_:)();
    if ((dispatch thunk of SetAlgebra.isEmpty.getter() & 1) != 0)
    {
      v69 = v68;
      v70 = *(void (**)(char *, uint64_t))(v64 + 8);
      v70(v69, v63);
      v71 = (uint64_t)v78;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v78, 1, 1, v63);
    }
    else
    {
      dispatch thunk of SetAlgebra.subtract(_:)();
      v71 = (uint64_t)v78;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v78, v68, v63);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v71, 0, 1, v63);
      v70 = *(void (**)(char *, uint64_t))(v64 + 8);
    }
    v70(v66, v63);
    outlined destroy of TableRowID?(v71, (uint64_t)&lazy cache variable for type metadata for UICollectionLayoutListConfiguration.ContentHuggingElements?, (uint64_t)MEMORY[0x1E0DC2978], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v67(v102, 0);
  }
  UICollectionLayoutListConfiguration.contentHuggingElements.getter();
  v72 = v96;
  static UICollectionLayoutListConfiguration.ContentHuggingElements.supplementaryHeader.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UICollectionLayoutListConfiguration.ContentHuggingElements and conformance UICollectionLayoutListConfiguration.ContentHuggingElements, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2978], MEMORY[0x1E0DC2980]);
  v73 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v74 = *(void (**)(char *, uint64_t))(v64 + 8);
  v74(v72, v63);
  v74(v65, v63);
  result = UICollectionViewListCoordinatorBase.sectionHeadersShouldHugContent.setter(v73 & 1);
  if ((*(_BYTE *)(v99 + 48) & 1) == 0)
    return UICollectionLayoutListConfiguration.headerTopPadding.setter();
  return result;
}

uint64_t closure #1 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v8 = type metadata accessor for UIListSeparatorConfiguration();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UIListSeparatorConfiguration?, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v20 - v16;
  swift_beginAccess();
  if (MEMORY[0x18D760234](a3 + 16))
    UICollectionViewListCoordinator.separatorConfiguration(indexPath:uikitConfig:)(a1, a2, v18, (uint64_t)v17);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
  (*(void (**)(char *, _QWORD *, uint64_t))(v9 + 16))(v12, a2, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, v8);
    return outlined destroy of TableRowID?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for UIListSeparatorConfiguration?, (uint64_t)MEMORY[0x1E0DC2548], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v17, v8);
  }
}

id closure #2 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x18D760234](v3);
  if (!v4)
    return 0;
  v5 = (void *)v4;
  v6 = UICollectionViewListCoordinatorBase.leadingSwipeActionsConfiguration(indexPath:)(a1);

  return v6;
}

uint64_t closure #3 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v12[2];

  v7 = a2 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x18D760234](v7);
  if (!v8)
    return 0;
  v9 = (void *)v8;
  v12[0] = a3;
  v12[1] = a4;
  swift_retain();
  swift_retain();
  v10 = UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(a1, v12);
  swift_release();
  swift_release();

  return v10;
}

uint64_t spacingValue #1 <A, B>(offset:) in UICollectionViewListCoordinator.interSectionSpacing(offset:numSections:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a2);
  v8 = type metadata accessor for ShadowListDataSource(0, v7[92], *(_QWORD *)(v7[94] + 8), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v17 - v11;
  v13 = (char *)a2 + v7[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v13, v8);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v8);
  ListCoreDataSource.spacing(forSectionAtOffset:)(a1, v8, v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if ((v20 & 1) == 0)
  {
    result = v18;
    if ((v19 & 1) == 0)
      return result;
    if (v18)
      return 0x4028000000000000;
  }
  v15 = (char *)a2 + *(_QWORD *)((*v6 & *a2) + 0x130);
  if ((v15[9] & 1) != 0)
    return 0;
  result = *(_QWORD *)v15;
  if ((v15[8] & 1) != 0)
  {
    if (result)
      return 0x4028000000000000;
    else
      return 0;
  }
  return result;
}

void closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a2);
  v7 = v6[92];
  v8 = *(_QWORD *)(v6[94] + 8);
  v9 = type metadata accessor for ShadowListDataSource(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v20 - v12;
  v15 = type metadata accessor for ShadowRowCollection(0, v7, *(_QWORD *)(v8 + 8), v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v17 = (char *)a2 + v6[17];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v17, v9);
  ShadowListDataSource.rowIDs(forSectionAt:)(a1, v9, v18, v19);
}

BOOL sub_187578E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowRowCollection<A>, v1);
  v6 = Collection.isEmpty.getter();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  return (v6 & 1) == 0;
}

BOOL closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v13 = (char *)&v16 - v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v7 + 80))(a1, a3, v7, v11);
  swift_getAssociatedConformanceWitness();
  v14 = dispatch thunk of Collection.isEmpty.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, AssociatedTypeWitness);
  return (v14 & 1) == 0;
}

void closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v7 = (void *)v6;
    UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(a2, a3 & 1, 0);

  }
}

uint64_t closure #1 in UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 204) == *MEMORY[0x1E0CFED28])
  {
    result = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    AGGraphGetValue();
    result = swift_bridgeObjectRetain();
  }
  *a2 = result;
  return result;
}

Class @objc UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  Class v12;
  uint64_t v14;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a3;
  v11 = a1;
  v12 = specialized UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)(v10);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v12;
}

uint64_t closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  UIMenuElementSize v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  UIMenuElementSize v66;
  Swift::String v67;
  UIMenu *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  Swift::OpaquePointer v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t AssociatedConformanceWitness;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  char *v90;
  void (*v91)(char *, uint64_t, uint64_t);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  unint64_t v100;
  UIMenuElementSize v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  UIImage_optional v107;

  v80 = a4;
  v95 = a3;
  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a3);
  v6 = v5[92];
  v78 = v5[94];
  v7 = type metadata accessor for ShadowListDataSource(0, v6, *(_QWORD *)(v78 + 8), a4);
  v8 = *(_QWORD *)(v7 - 8);
  v93 = v7;
  v94 = v8;
  MEMORY[0x1E0C80A78](v7, v9);
  v92 = (char *)&v74 - v10;
  v79 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  v86 = v12;
  v85 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v96 = (char *)&v74 - v15;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v84 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v83 = (char *)&v74 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v82 = (char *)&v74 - v25;
  v26 = type metadata accessor for IndexPath();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, v31, v13);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v74 - v34;
  v36 = v5[93];
  v76 = v5[95];
  v75 = v36;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v106 = Set.init()();
  v37 = *(_QWORD *)(a2 + 16);
  v77 = a2;
  if (v37)
  {
    v38 = a2 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    v89 = *(_QWORD *)(v27 + 72);
    v91 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    swift_bridgeObjectRetain();
    v90 = v35;
    v87 = v27;
    while (1)
    {
      v91(v35, v38, v26);
      v88 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
      v88(v35, 0, 1, v26);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v35, 1, v26) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v30, v35, v26);
      v42 = (uint64_t)v96;
      v43 = (char *)v95 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v95) + 0x88);
      swift_beginAccess();
      v44 = v16;
      v45 = AssociatedTypeWitness;
      v46 = v94;
      v47 = v92;
      v48 = v43;
      v49 = v93;
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v92, v48, v93);
      v50 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v49);
      ListCoreDataSource.selectionValue(forRowAt:)((uint64_t)v30, v49, v50, v42);
      v51 = *(void (**)(char *, uint64_t))(v46 + 8);
      AssociatedTypeWitness = v45;
      v16 = v44;
      v51(v47, v49);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v42, 1, AssociatedTypeWitness) == 1)
      {
        v27 = v87;
        (*(void (**)(char *, uint64_t))(v87 + 8))(v30, v26);
        (*(void (**)(char *, uint64_t))(v85 + 8))(v96, v86);
      }
      else
      {
        v39 = v82;
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v82, v96, AssociatedTypeWitness);
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v84, v39, AssociatedTypeWitness);
        type metadata accessor for Set();
        v40 = v83;
        Set.insert(_:)();
        v41 = *(void (**)(char *, uint64_t))(v44 + 8);
        v41(v40, AssociatedTypeWitness);
        v41(v39, AssociatedTypeWitness);
        v27 = v87;
        (*(void (**)(char *, uint64_t))(v87 + 8))(v30, v26);
      }
      v38 += v89;
      --v37;
      v35 = v90;
      if (!v37)
      {
        v88(v90, 1, 1, v26);
        break;
      }
    }
  }
  else
  {
    v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    swift_bridgeObjectRetain();
    v52(v35, 1, 1, v26);
  }
  v53 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v53, v54);
  v55 = v75;
  *(&v74 - 6) = v79;
  *(&v74 - 5) = v55;
  v56 = v76;
  *(&v74 - 4) = v78;
  *(&v74 - 3) = v56;
  LODWORD(v72) = v80;
  v73._rawValue = &v106;
  static Update.ensure<A>(_:)();
  v57 = v97;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v58 = MEMORY[0x1E0DEE9D8];
  v105 = MEMORY[0x1E0DEE9D8];
  v59 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  LOBYTE(v97) = 0;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v60 = type metadata accessor for MenuVisitor.MenuStackGroup();
  v61 = *(unsigned __int8 *)(*(_QWORD *)(v60 - 8) + 80);
  v62 = (v61 + 32) & ~v61;
  v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_187BF9830;
  if (one-time initialization token for empty != -1)
    swift_once();
  v64 = __swift_project_value_buffer(v60, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v64, v63 + v62, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
  v65 = v97;
  v97 = 0;
  v98 = 0;
  v99 = MEMORY[0x1E0DEE9E0];
  v100 = v59;
  v101 = v58;
  v102 = MEMORY[0x1E0DEE9E0];
  v103 = v65;
  v104 = v63;
  MenuVisitor.visit(_:uniqueNames:)(v57, &v105);
  swift_bridgeObjectRelease();
  v66 = v101;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v67._countAndFlagsBits = 0;
  v67._object = (void *)0xE000000000000000;
  v107.value.super.isa = 0;
  v107.is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v68, v67, (Swift::String_optional)0, v107, 0, 0xFFFFFFFFFFFFFFFFLL, v66, v73);
  v70 = v69;
  swift_bridgeObjectRelease();
  return v70;
}

uint64_t closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *))AGGraphGetValue();
  v7 = *a1;
  swift_retain();
  swift_bridgeObjectRetain();
  v4(&v6, &v7);
  swift_bridgeObjectRelease();
  result = swift_release();
  *a2 = v6;
  return result;
}

id @objc UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  id v8;

  type metadata accessor for IndexPath();
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = a3;
  v7 = a1;
  v8 = specialized UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(v6, v5);

  swift_bridgeObjectRelease();
  return v8;
}

uint64_t closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ContextMenuPreviewAction?, (uint64_t)&type metadata for ContextMenuPreviewAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  v4 = *(_QWORD *)Value;
  v3 = *(_QWORD *)(Value + 8);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_BYTE *)(Value + 16);
  *(_BYTE *)(a1 + 16) = v5;
  return outlined copy of ContextMenuPreviewAction?(v4, v3, v5);
}

uint64_t closure #3 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

void @objc UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = a1;
  specialized UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)(v8, v9, a5);

  swift_unknownObjectRelease();
}

uint64_t TableGlobalHeader.Wrapper.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[2];
  uint64_t v64;

  v3 = v2;
  v56 = a2;
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>();
  v48 = *(_QWORD *)(a1 + 16);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>();
  swift_getTupleTypeMetadata3();
  v5 = type metadata accessor for TupleView();
  v45 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v5);
  v6 = type metadata accessor for VStack();
  v49 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v45 - v8;
  v10 = MEMORY[0x1E0CE65A8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListCellState>, (uint64_t)&type metadata for ListCellState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v11 = type metadata accessor for ModifiedContent();
  v51 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v45 - v13;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))v10);
  v15 = type metadata accessor for ModifiedContent();
  v53 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v46 = (char *)&v45 - v17;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
  v18 = type metadata accessor for ModifiedContent();
  v54 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v47 = (char *)&v45 - v20;
  v21 = type metadata accessor for ModifiedContent();
  v55 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v50 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v52 = (char *)&v45 - v26;
  v27 = *(_QWORD *)(a1 + 24);
  v57 = v48;
  v58 = v27;
  v59 = v3;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  swift_getKeyPath();
  v28 = *(_BYTE *)(v3 + 1);
  v29 = *(_BYTE *)(v3 + 2);
  LOBYTE(v64) = *(_BYTE *)v3;
  BYTE1(v64) = v28;
  BYTE2(v64) = v29;
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v6);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v9, v6);
  swift_getKeyPath();
  v64 = *(_QWORD *)(v3 + 8);
  v31 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListCellState> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListCellState>, (uint64_t)&type metadata for ListCellState);
  v63[0] = v30;
  v63[1] = v31;
  v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v63);
  v33 = v46;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v14, v11);
  static Animation.easeIn(duration:)();
  LOBYTE(v64) = *(_BYTE *)v3;
  v34 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040]);
  v62[0] = v32;
  v62[1] = v34;
  v35 = MEMORY[0x1E0CE2E70];
  v36 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v62);
  v37 = v47;
  View.animation<A>(_:value:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v15);
  static Edge.Set.horizontal.getter();
  v38 = lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>();
  v61[0] = v36;
  v61[1] = v38;
  v39 = MEMORY[0x18D75FFDC](v35, v18, v61);
  v40 = v50;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v18);
  v60[0] = v39;
  v60[1] = MEMORY[0x1E0CE2BC0];
  v41 = MEMORY[0x18D75FFDC](v35, v21, v60);
  v42 = (uint64_t)v52;
  static ViewBuilder.buildExpression<A>(_:)(v40, v21, v41);
  v43 = *(void (**)(char *, uint64_t))(v55 + 8);
  v43(v40, v21);
  static ViewBuilder.buildBlock<A>(_:)(v42, v21, v56);
  return ((uint64_t (*)(uint64_t, uint64_t))v43)(v42, v21);
}

uint64_t closure #1 in TableGlobalHeader.Wrapper.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t IsVisionEnabled;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[3];
  double v35;
  uint64_t v36[3];
  _QWORD v37[2];
  _QWORD v38[3];

  v30 = a4;
  v7 = type metadata accessor for ModifiedContent();
  v28 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v28 - v9;
  v11 = type metadata accessor for ModifiedContent();
  v29 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - v17;
  v19 = *(unsigned __int8 *)(a1 + 2);
  type metadata accessor for TableGlobalHeader.Wrapper(0, a2, a3, v20);
  View.padding(_:)();
  if (one-time initialization token for tableHeaderMinHeight != -1)
    swift_once();
  if (v19)
    v21 = 0.0;
  else
    v21 = 1.0;
  static Alignment.center.getter();
  v38[0] = a3;
  v38[1] = MEMORY[0x1E0CE2BC0];
  v22 = MEMORY[0x1E0CE2E70];
  v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v38);
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v7);
  v37[0] = v27;
  v37[1] = MEMORY[0x1E0CE35E0];
  v23 = MEMORY[0x18D75FFDC](v22, v11, v37);
  static ViewBuilder.buildExpression<A>(_:)(v14, v11, v23);
  v24 = v29;
  v25 = *(void (**)(char *, uint64_t))(v29 + 8);
  v25(v14, v11);
  v35 = v21;
  v36[0] = (uint64_t)&v35;
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v14, v18, v11);
  v36[1] = (uint64_t)v14;
  v34[0] = type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>();
  v34[1] = v11;
  v34[2] = type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>();
  IsVisionEnabled = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView> and conformance <> StaticIf<A, B, C>();
  v32 = v23;
  v33 = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView> and conformance <> StaticIf<A, B, C>();
  static ViewBuilder.buildBlock<each A>(_:)(v36, 3uLL, (uint64_t)v34);
  v25(v18, v11);
  return ((uint64_t (*)(char *, uint64_t))v25)(v14, v11);
}

uint64_t TableGlobalHeader.updateConfiguration(using:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  Class isa;
  char v17;
  char v18;
  char v19;
  double v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  uint64_t *boxed_opaque_existential_1;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[3];
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  _OWORD v87[10];
  _OWORD v88[2];
  objc_super v89;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v40 = type metadata accessor for UIBackgroundConfiguration();
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v5);
  v38 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v37 = (char *)&v35 - v10;
  v11 = type metadata accessor for UICellConfigurationState();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a1;
  isa = UICellConfigurationState._bridgeToObjectiveC()().super.super.isa;
  v89.receiver = v2;
  v89.super_class = ObjectType;
  objc_msgSendSuper2(&v89, sel__bridgedUpdateConfigurationUsingState_, isa);

  BYTE11(v87[5]) = 1;
  OptionalEdgeInsets.init()();
  *(_QWORD *)&v88[0] = 0;
  BYTE8(v88[0]) = 1;
  *(_QWORD *)&v88[1] = 0;
  BYTE8(v88[1]) = 1;
  *(_WORD *)((char *)&v88[1] + 9) = 1;
  v86 = (unint64_t)static HorizontalAlignment.center.getter();
  LOBYTE(v87[0]) = 1;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v35(v15, a1, v11);
  v17 = UICellConfigurationState.isEditing.getter();
  v18 = UICellConfigurationState.isSelected.getter();
  v19 = UICellConfigurationState.isPinned.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v20 = *(double *)&v2[OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_headerLeadingMargin] + -24.0;
  if (v20 <= 0.0)
    v20 = 0.0;
  LOBYTE(v73) = v17 & 1;
  BYTE1(v73) = v18 & 1;
  BYTE2(v73) = v19 & 1;
  *((double *)&v73 + 1) = v20;
  v21 = (uint64_t)&v2[OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_globalHeader];
  swift_beginAccess();
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v21, (uint64_t)&v74, (uint64_t)&lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  *(_OWORD *)((char *)&v87[2] + 8) = v75;
  *(_OWORD *)((char *)&v87[3] + 8) = v76;
  *(_OWORD *)((char *)&v87[4] + 8) = v77[0];
  *(_DWORD *)((char *)&v87[5] + 7) = *(_DWORD *)((char *)v77 + 15);
  *(_OWORD *)((char *)v87 + 8) = v73;
  *(_OWORD *)((char *)&v87[1] + 8) = v74;
  BYTE11(v87[5]) = 0;
  static Edge.Set.all.getter();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v86, (uint64_t)&v73, (uint64_t (*)(_QWORD))type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>);
  v57 = v78;
  v58 = v79;
  v59 = v80;
  v60 = v81;
  v61 = v82;
  v62 = v83;
  v63 = v84;
  v64 = v85;
  OptionalEdgeInsets.init(_:edges:)();
  v41 = v49;
  v42 = v50;
  v43 = v51;
  v44 = v52;
  v45 = v53;
  v46 = v54;
  v47 = v55;
  v48 = v56;
  OptionalEdgeInsets.adding(_:)();
  v78 = v65;
  v79 = v66;
  v80 = v67;
  v81 = v68;
  v82 = v69;
  v83 = v70;
  v84 = v71;
  v85 = v72;
  outlined destroy of UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>((uint64_t)&v86);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v73, (uint64_t)&v86, (uint64_t (*)(_QWORD))type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>);
  BYTE9(v88[1]) = 0;
  outlined destroy of UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>((uint64_t)&v73);
  *((_QWORD *)&v74 + 1) = type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>();
  *(_QWORD *)&v75 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView> and conformance UIHostingConfiguration<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>, (uint64_t)&protocol conformance descriptor for UIHostingConfiguration<A, B>);
  v22 = (_OWORD *)swift_allocObject();
  *(_QWORD *)&v73 = v22;
  v23 = v88[0];
  v22[11] = v87[9];
  v22[12] = v23;
  *(_OWORD *)((char *)v22 + 203) = *(_OWORD *)((char *)v88 + 11);
  v24 = v87[6];
  v22[7] = v87[5];
  v22[8] = v24;
  v25 = v87[8];
  v22[9] = v87[7];
  v22[10] = v25;
  v26 = v87[2];
  v22[3] = v87[1];
  v22[4] = v26;
  v27 = v87[4];
  v22[5] = v87[3];
  v22[6] = v27;
  v28 = v87[0];
  v22[1] = v86;
  v22[2] = v28;
  MEMORY[0x18D75D9F0](&v73);
  v29 = v38;
  static UIBackgroundConfiguration.listHeader()();
  *((_QWORD *)&v87[0] + 1) = v11;
  *(_QWORD *)&v87[1] = MEMORY[0x1E0DC2018];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v86);
  v35((char *)boxed_opaque_existential_1, v36, v11);
  v31 = v37;
  UIBackgroundConfiguration.updated(for:)();
  v33 = v39;
  v32 = v40;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v31, 0, 1, v32);
  return MEMORY[0x18D75DA08](v31);
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for Range<AttributedString.Index>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>);
  }
  return result;
}

void specialized UICollectionViewListCoordinator.__allocating_init(dataSource:selection:editMode:transaction:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char v10;
  __int128 v11;
  char v12;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = *((_BYTE *)a3 + 16);
  *(_QWORD *)&v9[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v9) + 0x300)] = 0;
  v11 = *a3;
  v12 = v10;
  specialized UICollectionViewListCoordinatorBase.init(dataSource:selection:editMode:transaction:)(a1, a2, (uint64_t *)&v11, a4);
}

BOOL partial apply for closure #1 in UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized UICollectionViewListCoordinatorBase.collectionView(_:numberOfItemsInSection:)(*a1, a2, a3, a4) > 0;
}

uint64_t type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>;
  if (!lazy cache variable for type metadata for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>)
  {
    type metadata accessor for Range<AttributedString.Index>(255, &lazy cache variable for type metadata for VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, (uint64_t (*)(uint64_t))type metadata accessor for TableGlobalHeader.Wrapper<TableHeaderView?>, lazy protocol witness table accessor for type TableGlobalHeader.Wrapper<TableHeaderView?> and conformance TableGlobalHeader.Wrapper<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
    lazy protocol witness table accessor for type VStack<TableGlobalHeader.Wrapper<TableHeaderView?>> and conformance VStack<A>();
    type metadata accessor for UIHostingConfiguration();
  }
  return result;
}

void type metadata accessor for TableGlobalHeader.Wrapper<TableHeaderView?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for TableGlobalHeader.Wrapper<TableHeaderView?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TableHeaderView? and conformance <A> A?();
    v6 = type metadata accessor for TableGlobalHeader.Wrapper(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for TableGlobalHeader.Wrapper<TableHeaderView?>);
  }
}

unint64_t lazy protocol witness table accessor for type TableHeaderView? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type TableHeaderView? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TableHeaderView? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type TableHeaderView and conformance TableHeaderView();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableHeaderView? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableHeaderView and conformance TableHeaderView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableHeaderView and conformance TableHeaderView;
  if (!lazy protocol witness table cache variable for type TableHeaderView and conformance TableHeaderView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableHeaderView, &type metadata for TableHeaderView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableHeaderView and conformance TableHeaderView);
  }
  return result;
}

uint64_t type metadata accessor for TableGlobalHeader.Wrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableGlobalHeader.Wrapper);
}

uint64_t lazy protocol witness table accessor for type TableGlobalHeader.Wrapper<TableHeaderView?> and conformance TableGlobalHeader.Wrapper<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TableGlobalHeader.Wrapper<TableHeaderView?> and conformance TableGlobalHeader.Wrapper<A>, (uint64_t (*)(uint64_t))type metadata accessor for TableGlobalHeader.Wrapper<TableHeaderView?>, (uint64_t)&protocol conformance descriptor for TableGlobalHeader.Wrapper<A>);
}

unint64_t lazy protocol witness table accessor for type VStack<TableGlobalHeader.Wrapper<TableHeaderView?>> and conformance VStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type VStack<TableGlobalHeader.Wrapper<TableHeaderView?>> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<TableGlobalHeader.Wrapper<TableHeaderView?>> and conformance VStack<A>)
  {
    type metadata accessor for Range<AttributedString.Index>(255, &lazy cache variable for type metadata for VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, (uint64_t (*)(uint64_t))type metadata accessor for TableGlobalHeader.Wrapper<TableHeaderView?>, lazy protocol witness table accessor for type TableGlobalHeader.Wrapper<TableHeaderView?> and conformance TableGlobalHeader.Wrapper<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<TableGlobalHeader.Wrapper<TableHeaderView?>> and conformance VStack<A>);
  }
  return result;
}

uint64_t outlined destroy of UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18757AE14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
  {
    if (v1 == 1)
      return swift_deallocObject();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v0 + 120) & 1) != 0)
    swift_bridgeObjectRelease();
  else
    __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  return swift_deallocObject();
}

void partial apply for closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(a1, *(_QWORD **)(v4 + 16), a3, a4);
}

uint64_t sub_18757AE84(char a1)
{
  return a1 & 1;
}

BOOL partial apply for closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(a1, v1[6], v1[2], v1[3], v1[4]);
}

uint64_t sub_18757AEB4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18757AED8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)()
{
  uint64_t v0;

  closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
}

uint64_t sub_18757AF18()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18757AF4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(a1, a2, *(_QWORD *)(v3 + 48), a3);
}

id partial apply for closure #2 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(a1, *(_QWORD *)(v1 + 48));
}

uint64_t sub_18757AF90()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(a1, *(_QWORD *)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64));
}

Class specialized UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)(void *a1)
{
  Class isa;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  NSUserActivity v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  Class v20;
  id v22;
  _OWORD __src[17];
  uint64_t __dst[35];
  UIWindowSceneActivationRequestOptions_optional v25;
  UITargetedPreview_optional v26;

  if (!static AppGraph.shared)
    return 0;
  swift_retain();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v3 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (!v3)
    goto LABEL_10;
  type metadata accessor for AnyListCollectionViewCell();
  v4 = (_QWORD *)swift_dynamicCastClass();
  if (!v4)
  {
    swift_release();

    return 0;
  }
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x98))();
  v7 = v6;

  if (v5 == 1
    || (outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7),
        !v5))
  {
LABEL_10:
    swift_release();
    return 0;
  }
  swift_retain();
  v8 = static Update.ensure<A>(_:)();
  v9 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v8);
  SceneList.windowGroup(presenting:)(v9, __dst[0], __src);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)&__src[16])
  {
    swift_release();
    swift_release_n();
    outlined destroy of TableRowID?((uint64_t)__src, (uint64_t)&lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    return 0;
  }
  memcpy(__dst, __src, 0x110uLL);
  v10 = __dst[16];
  v11 = __dst[17];
  v12 = LOBYTE(__dst[18]);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 192);
  outlined copy of SceneID(__dst[16], __dst[17], __dst[18]);
  v14.super.isa = (Class)v13(v10, v11, v12);
  outlined consume of SceneID(v10, v11, v12);
  if (!v14.super.isa)
  {
    outlined destroy of SceneList.Item((uint64_t)__dst);
    swift_release();
    swift_release_n();
    return 0;
  }
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3FB8]), sel_init);
  *((_QWORD *)&__src[1] + 1) = type metadata accessor for UIWindowSceneProminentPlacement();
  *(_QWORD *)&__src[2] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIWindowSceneProminentPlacement and conformance UIWindowSceneProminentPlacement, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2648], MEMORY[0x1E0DC2640]);
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)__src);
  static UIWindowScenePlacement<>.prominent()();
  UIWindowSceneActivationRequestOptions.placement.setter();
  v16 = v15;
  v17 = objc_msgSend(a1, sel_window);
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, sel_windowScene);

  }
  else
  {
    v19 = 0;
  }
  objc_msgSend(v16, sel_setRequestingScene_, v19);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIWindowSceneActivationConfiguration);
  v22 = v16;
  v25.value.super.super.isa = (Class)v16;
  v25.is_nil = 0;
  v20 = UIWindowSceneActivationConfiguration.init(userActivity:options:preview:)(v14, v25, v26).super.isa;

  swift_release_n();
  swift_release();
  outlined destroy of SceneList.Item((uint64_t)__dst);
  return v20;
}

id specialized UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  Class isa;
  id v19;
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for Binding();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v38 - v10;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], v12);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v38 - v15;
  v42 = a2;
  if (*(_QWORD *)(a2 + 16) == 1)
  {
    v17 = type metadata accessor for IndexPath();
    v40 = *(_QWORD *)(v17 - 8);
    v41 = v17;
    v39 = v42 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v19 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

    if (v19)
    {
      type metadata accessor for AnyListCollectionViewCell();
      v20 = (_QWORD *)swift_dynamicCastClass();
      if (v20)
      {
        v21 = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v20) + 0x70))();

        if (v21)
        {
          v22 = objc_msgSend(v21, sel_identifier);
          type metadata accessor for ContextMenuIdentity();
          v23 = swift_dynamicCastClass();
          if (v23)
          {
            v24 = v23;
            v25 = v40;
            v26 = v41;
            (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v16, v39, v41);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v16, 0, 1, v26);
            v27 = v24 + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_sourceIndexPath;
            swift_beginAccess();
            outlined assign with take of IndexPath?((uint64_t)v16, v27);
            swift_endAccess();
          }
          swift_unknownObjectRelease();
          return v21;
        }
      }
      else
      {

      }
    }
  }
  v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v29 = (char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x100);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v29, v7);
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v11, 1, v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v21 = 0;
  if (v30 != 1)
  {
    UICollectionViewListCoordinatorBase.selectionStorage.getter();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v31 = WeakSelectionBasedStorage.$menu.getter();
    v21 = 0;
    if ((v31 & 0x100000000) == 0)
    {
      v32 = v31;
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = v42;
      *(_QWORD *)(v33 + 24) = v3;
      *(_DWORD *)(v33 + 32) = v32;
      v34 = (void *)objc_opt_self();
      aBlock[4] = partial apply for closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:);
      aBlock[5] = v33;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
      aBlock[3] = &block_descriptor_42_0;
      v35 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      v36 = v3;
      swift_retain();
      swift_release();
      v21 = objc_msgSend(v34, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v35);
      swift_release();
      _Block_release(v35);
      objc_msgSend(v21, sel_setPreferredMenuElementOrder_, qword_187C40668[*((char *)v36 + *(_QWORD *)((*v28 & *v36) + 0x120))]);
    }
  }
  return v21;
}

uint64_t specialized UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  int Attribute;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t aBlock;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  void *v39;
  uint64_t (*v40)();
  uint64_t v41;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v35 - v8;
  v10 = type metadata accessor for IndexPath();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a2, sel_identifier, v13);
  type metadata accessor for ContextMenuIdentity();
  v17 = swift_dynamicCastClass();
  if (!v17)
  {
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    return outlined destroy of TableRowID?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  }
  v18 = v17 + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_sourceIndexPath;
  swift_beginAccess();
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(v18, (uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  swift_unknownObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return outlined destroy of TableRowID?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for IndexPath?, (uint64_t)MEMORY[0x1E0CB1658], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v9, v10);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v20)
  {
    type metadata accessor for AnyListCollectionViewCell();
    v21 = (_QWORD *)swift_dynamicCastClass();
    if (v21)
    {
      v22 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v21) + 0x78))();

      if (v22)
      {
        if ((*(_BYTE *)(v22 + 308) & 1) == 0)
        {
          Attribute = AGWeakAttributeGetAttribute();
          if (Attribute != *MEMORY[0x1E0CFED28])
          {
            v25 = Attribute;
            v26 = AGGraphClearUpdate();
            MEMORY[0x1E0C80A78](v26, v27);
            *((_DWORD *)&v35 - 4) = v25;
            type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ContextMenuPreviewAction?, (uint64_t)&type metadata for ContextMenuPreviewAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            static Update.dispatchImmediately<A>(_:)();
            AGGraphSetUpdate();
            v28 = (char)v38;
            if (v38 > 0xFDu)
            {
              (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
              return swift_release();
            }
            v29 = aBlock;
            v30 = v37;
            if ((v38 & 0x80) == 0)
            {
              outlined copy of ContextMenuPreviewAction(aBlock, v37, (char)v38);
              objc_msgSend(a3, sel_setPreferredCommitStyle_, 0);
              v31 = swift_allocObject();
              *(_QWORD *)(v31 + 16) = v29;
              *(_QWORD *)(v31 + 24) = v30;
              v40 = partial apply for closure #2 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:);
              v41 = v31;
              aBlock = MEMORY[0x1E0C809B0];
              v37 = 1107296256;
              v38 = thunk for @escaping @callee_guaranteed () -> ();
              v39 = &block_descriptor_36;
              v32 = _Block_copy(&aBlock);
              outlined copy of ContextMenuPreviewAction(v29, v30, v28);
              swift_release();
              objc_msgSend(a3, sel_addAnimations_, v32);
              _Block_release(v32);
              outlined consume of ContextMenuPreviewAction?(v29, v30, v28);
              swift_release();
              outlined consume of ContextMenuPreviewAction?(v29, v30, v28);
              return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v10);
            }
            swift_retain();
            swift_retain();
            objc_msgSend(a3, sel_setPreferredCommitStyle_, 1);
            v33 = swift_allocObject();
            *(_QWORD *)(v33 + 16) = v29;
            *(_QWORD *)(v33 + 24) = v30;
            *(_BYTE *)(v33 + 32) = v28 & 1;
            v40 = partial apply for closure #3 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:);
            v41 = v33;
            aBlock = MEMORY[0x1E0C809B0];
            v37 = 1107296256;
            v38 = thunk for @escaping @callee_guaranteed () -> ();
            v39 = &block_descriptor_30_1;
            v34 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_release();
            objc_msgSend(a3, sel_addAnimations_, v34);
            _Block_release(v34);
            outlined consume of ContextMenuPreviewAction?(v29, v30, v28);
            swift_release();
            swift_release();
          }
        }
        swift_release();
      }
    }
    else
    {

    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v10);
}

uint64_t partial apply for closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)(a1);
}

uint64_t sub_18757BC6C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)()
{
  return closure #3 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)();
}

uint64_t outlined consume of ContextMenuPreviewAction?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFDu)
    return outlined consume of ContextMenuPreviewAction(a1, a2, a3);
  return a1;
}

uint64_t outlined consume of ContextMenuPreviewAction(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = swift_release();
  if (a3 < 0)
    return swift_release();
  return result;
}

uint64_t outlined copy of ContextMenuPreviewAction(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 < 0)
    swift_retain();
  return swift_retain();
}

uint64_t sub_18757BD1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)()
{
  return static Update.ensure<A>(_:)();
}

uint64_t partial apply for closure #1 in closure #2 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined copy of ContextMenuPreviewAction?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFDu)
    return outlined copy of ContextMenuPreviewAction(a1, a2, a3);
  return a1;
}

uint64_t sub_18757BDC4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), *(unsigned int *)(v1 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(*(uint64_t **)(v1 + 56), a1);
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)(v1, a1);
}

uint64_t type metadata completion function for TableGlobalHeader.Wrapper()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TableGlobalHeader.Wrapper(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 16) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
    v9 = (_QWORD *)((a1 + 10) & 0xFFFFFFFFFFFFFFF8);
    v10 = (_QWORD *)(((unint64_t)a2 + 10) & 0xFFFFFFFFFFFFFFF8);
    *v9 = *v10;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)v9 + v5 + 8) & ~v5, ((unint64_t)v10 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t destroy for TableGlobalHeader.Wrapper(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + 10) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for TableGlobalHeader.Wrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = (_QWORD *)((a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)((a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 16))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_BYTE *assignWithCopy for TableGlobalHeader.Wrapper(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = (_QWORD *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)((unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t initializeWithTake for TableGlobalHeader.Wrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = (_QWORD *)((a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)((a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_BYTE *assignWithTake for TableGlobalHeader.Wrapper(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = (_QWORD *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)((unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TableGlobalHeader.Wrapper(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)&a1[v9];
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9])
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v7
                                                                      + 8) & ~v7);
      v15 = *a1;
      v16 = v15 >= 2;
      v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16)
        return (v17 + 1);
      else
        return 0;
    }
  }
  v11 = a1[v9];
  if (!a1[v9])
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18757C248 + 4 * byte_187C40530[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for TableGlobalHeader.Wrapper(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t associated type witness table accessor for View.Body : View in TableGlobalHeader.Wrapper<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>;
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<IsVisionEnabledPredicate>, MEMORY[0x1E0CE5C48], MEMORY[0x1E0CE5C38], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>, (uint64_t)&type metadata for Divider, MEMORY[0x1E0CE5148], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>;
  if (!lazy protocol witness table cache variable for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<IsVisionEnabledPredicate>, MEMORY[0x1E0CE5C48], MEMORY[0x1E0CE5C38], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6010], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>;
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<IsVisionEnabledPredicate>, MEMORY[0x1E0CE5C48], MEMORY[0x1E0CE5C38], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    lazy protocol witness table accessor for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t partial apply for closure #1 in TableGlobalHeader.Wrapper.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in TableGlobalHeader.Wrapper.body.getter(v1[4], v1[2], v1[3], a1);
}

unint64_t lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>;
  if (!lazy protocol witness table cache variable for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE45E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t IsVisionEnabled;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView> and conformance <> StaticIf<A, B, C>)
  {
    IsVisionEnabled = type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Divider, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>();
    v2[1] = MEMORY[0x1E0CE7C28];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, IsVisionEnabled, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Divider, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Divider, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>, (uint64_t)&type metadata for Divider, MEMORY[0x1E0CE5148], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for Divider;
    v2[1] = MEMORY[0x1E0CE5138];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Divider, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t IsVisionEnabled;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView> and conformance <> StaticIf<A, B, C>)
  {
    IsVisionEnabled = type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>();
    v2[0] = &protocol witness table for Divider;
    v2[1] = MEMORY[0x1E0CE7C28];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, IsVisionEnabled, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t sub_18757C8A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>();
  swift_getTupleTypeMetadata3();
  v0 = type metadata accessor for TupleView();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v0);
  v1 = type metadata accessor for VStack();
  v2 = MEMORY[0x1E0CE65A8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListCellState>, (uint64_t)&type metadata for ListCellState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v3 = type metadata accessor for ModifiedContent();
  v4 = MEMORY[0x1E0DEF040];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))v2);
  v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  v13[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v1);
  v13[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListCellState> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListCellState>, (uint64_t)&type metadata for ListCellState);
  v8 = MEMORY[0x1E0CE2E70];
  v12[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v13);
  v12[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, v4);
  v11[0] = MEMORY[0x18D75FFDC](v8, v5, v12);
  v11[1] = lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>();
  v10[0] = MEMORY[0x18D75FFDC](v8, v6, v11);
  v10[1] = MEMORY[0x1E0CE2BC0];
  return MEMORY[0x18D75FFDC](v8, v7, v10);
}

uint64_t closure #1 in Sections.sectionIDs.getter()
{
  _ViewList_ID.init()();
  _ViewList_ID.elementID(at:)();
  swift_bridgeObjectRelease();
  _ViewList_ID.canonicalID.getter();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in Sections.sectionIDs.getter()
{
  dispatch thunk of _ViewList_ID_Views.subscript.getter();
  _ViewList_ID.canonicalID.getter();
  return swift_bridgeObjectRelease();
}

uint64_t Sections.init(from:useFooters:)@<X0>(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[56];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  outlined init with copy of _VariadicView_Children((uint64_t)a1, a3);
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v20, v9, v10);
  if (v20 && (v11 = specialized Set.contains(_:)(MEMORY[0x1E0CE4818], v20), swift_bridgeObjectRelease(), !v11) && v8)
  {
    swift_retain();
    v12 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
    swift_release();
    v13 = &outlined read-only object #0 of Sections.init(from:useFooters:);
    if (!v12)
      v13 = (void *)MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a3 + 56) = v13;
    *(_BYTE *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = outlined destroy of _VariadicView_Children((uint64_t)a1);
    *(_QWORD *)(a3 + 80) = MEMORY[0x1E0DEE9E8];
  }
  else
  {
    LOBYTE(v20) = v8 == 0;
    if ((a2 & 1) != 0)
      v15 = MEMORY[0x1E0DEE9E8];
    else
      v15 = 0;
    v21 = MEMORY[0x1E0DEE9D8];
    v22 = v15;
    v23 = MEMORY[0x1E0DEE9D8];
    v24 = 0;
    v25 = MEMORY[0x1E0DEE9E8];
    v26 = 0;
    v27 = 0;
    outlined init with copy of _VariadicView_Children((uint64_t)a1, (uint64_t)v19);
    lazy protocol witness table accessor for type SectionedIdentifierAccumulator and conformance SectionedIdentifierAccumulator();
    _ViewList_Backing.visitViews<A>(applying:from:)();
    outlined destroy of _ViewList_Backing((uint64_t)v19);
    v16 = v22;
    *(_QWORD *)(a3 + 56) = v21;
    *(_BYTE *)(a3 + 64) = v24;
    v17 = v25;
    *(_QWORD *)(a3 + 72) = v16;
    *(_QWORD *)(a3 + 80) = v17;
    if (!v8)
    {
      v18 = v23;
      type metadata accessor for _ViewList_ID._Views<[_ViewList_ID]>();
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 24) = v18;
      *(_BYTE *)(v8 + 16) = 1;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of _VariadicView_Children((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  *(_QWORD *)(a3 + 88) = v8;
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionedIdentifierAccumulator and conformance SectionedIdentifierAccumulator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionedIdentifierAccumulator and conformance SectionedIdentifierAccumulator;
  if (!lazy protocol witness table cache variable for type SectionedIdentifierAccumulator and conformance SectionedIdentifierAccumulator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionedIdentifierAccumulator, &type metadata for SectionedIdentifierAccumulator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionedIdentifierAccumulator and conformance SectionedIdentifierAccumulator);
  }
  return result;
}

void type metadata accessor for _ViewList_ID._Views<[_ViewList_ID]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewList_ID._Views<[_ViewList_ID]>)
  {
    type metadata accessor for [_ViewList_ID]();
    lazy protocol witness table accessor for type [_ViewList_ID] and conformance <A> [A]();
    lazy protocol witness table accessor for type [_ViewList_ID] and conformance [A]();
    v0 = type metadata accessor for _ViewList_ID._Views();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<[_ViewList_ID]>);
  }
}

void type metadata accessor for [_ViewList_ID]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [_ViewList_ID])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [_ViewList_ID]);
  }
}

unint64_t lazy protocol witness table accessor for type [_ViewList_ID] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A])
  {
    type metadata accessor for [_ViewList_ID]();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type _ViewList_ID and conformance _ViewList_ID();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF30], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewList_ID and conformance _ViewList_ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID;
  if (!lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1CA0], MEMORY[0x1E0CE1C98]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [_ViewList_ID] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [_ViewList_ID] and conformance [A];
  if (!lazy protocol witness table cache variable for type [_ViewList_ID] and conformance [A])
  {
    type metadata accessor for [_ViewList_ID]();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [_ViewList_ID] and conformance [A]);
  }
  return result;
}

Swift::Bool __swiftcall Sections.hasHeader(at:)(Swift::Int at)
{
  uint64_t v1;
  uint64_t v3;
  Swift::Int v4;
  int v5;
  Swift::Int v6;
  Swift::Bool result;
  char v8;
  char v9;
  _BYTE v10[56];
  uint64_t v11;
  _BYTE v12[56];
  uint64_t v13;
  _BYTE v14[96];

  v3 = *(_QWORD *)(v1 + 56);
  if (*(_BYTE *)(v1 + 64) == 1)
  {
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v4 = *(_QWORD *)(v3 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with copy of Sections(v1, (uint64_t)v14);
  if (v4 <= at)
    goto LABEL_14;
  v5 = v14[64];
  outlined init with copy of Sections((uint64_t)v14, (uint64_t)v12);
  if (v5 != 1)
  {
    outlined destroy of Sections((uint64_t)v12);
    outlined init with copy of Sections((uint64_t)v14, (uint64_t)v10);
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v13 + 16);
  outlined destroy of Sections((uint64_t)v12);
  result = outlined init with copy of Sections((uint64_t)v14, (uint64_t)v10);
  if (v6 <= at)
  {
LABEL_13:
    outlined destroy of Sections((uint64_t)v10);
LABEL_14:
    outlined destroy of Sections((uint64_t)v14);
    outlined init with copy of Sections(v1, (uint64_t)v12);
    goto LABEL_15;
  }
  if (at < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(v11 + 16) <= (unint64_t)at)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v8 = *(_BYTE *)(v11 + 16 * at + 40);
  outlined destroy of Sections((uint64_t)v10);
  outlined destroy of Sections((uint64_t)v14);
  result = outlined init with copy of Sections(v1, (uint64_t)v12);
  if ((v8 & 1) != 0)
  {
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  if (*(_QWORD *)(v13 + 16) > (unint64_t)at)
  {
    v9 = *(_BYTE *)(v13 + 16 * at + 41);
LABEL_16:
    outlined destroy of Sections((uint64_t)v12);
    return v9;
  }
LABEL_19:
  __break(1u);
  return result;
}

Swift::Int __swiftcall Sections.startOffset(forSectionAt:)(Swift::Int forSectionAt)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[56];
  uint64_t v9;
  _BYTE v10[56];
  uint64_t v11;

  if (forSectionAt < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v2 = forSectionAt;
  v3 = *(_QWORD *)(v1 + 56);
  if (*(_QWORD *)(v3 + 16) <= (unint64_t)forSectionAt)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v3 + 16 * forSectionAt + 32);
  v5 = *(unsigned __int8 *)(v1 + 64);
  outlined init with copy of Sections(v1, (uint64_t)v10);
  if (v5 != 1)
  {
    outlined destroy of Sections((uint64_t)v10);
    outlined init with copy of Sections(v1, (uint64_t)v8);
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(v11 + 16);
  outlined destroy of Sections((uint64_t)v10);
  forSectionAt = outlined init with copy of Sections(v1, (uint64_t)v8);
  if (v6 <= v2)
  {
LABEL_8:
    v7 = 0;
    goto LABEL_9;
  }
  if (*(_QWORD *)(v9 + 16) <= v2)
  {
LABEL_14:
    __break(1u);
    return forSectionAt;
  }
  v7 = ~*(unsigned __int8 *)(v9 + 16 * v2 + 40) & 1;
LABEL_9:
  outlined destroy of Sections((uint64_t)v8);
  forSectionAt = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return forSectionAt;
}

Swift::Int __swiftcall Sections.footerOffset(forSectionAt:)(Swift::Int forSectionAt)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  Swift::Int result;
  Swift::String v8;
  _BYTE v9[72];
  uint64_t v10;

  outlined init with copy of Sections(v1, (uint64_t)v9);
  if (!v10 || !specialized Set.contains(_:)(forSectionAt, v10))
    goto LABEL_13;
  outlined destroy of Sections((uint64_t)v9);
  v3 = forSectionAt + 1;
  if (__OFADD__(forSectionAt, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(v1 + 56);
  if (v3 >= *(_QWORD *)(v4 + 16))
  {
    v5 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  }
  else
  {
    if (v3 < 0)
    {
LABEL_12:
      __break(1u);
LABEL_13:
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v5 = *(_QWORD *)(v4 + 16 * v3 + 32);
  }
  v6 = __OFSUB__(v5, 1);
  result = v5 - 1;
  if (v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

Swift::Int Sections.rowIDs(forSectionAt:)@<X0>(Swift::Int a1@<X0>, Swift::Int *a2@<X8>)
{
  _QWORD *v2;
  Swift::Int result;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  Swift::Int v12;

  result = Sections.startOffset(forSectionAt:)(a1);
  v6 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = result;
  v8 = v2[7];
  if (v6 >= *(_QWORD *)(v8 + 16))
  {
    result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
    v9 = result;
    v10 = v2[9];
    if (!v10)
      goto LABEL_9;
LABEL_7:
    result = specialized Set.contains(_:)(a1, v10);
    if ((result & 1) != 0 && __OFSUB__(v9--, 1))
      goto LABEL_20;
LABEL_9:
    if (v9 >= v7)
    {
      v12 = v2[11];
      swift_retain();
      result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
      if ((result & 0x8000000000000000) == 0)
      {
        if ((v7 & 0x8000000000000000) == 0)
        {
          if (result >= v9)
          {
            *a2 = v7;
            a2[1] = v9;
            a2[2] = v12;
            a2[3] = (Swift::Int)closure #1 in Sections.rowIDs(forSectionAt:);
            a2[4] = 0;
            return result;
          }
          goto LABEL_18;
        }
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(v8 + 16 * v6 + 32);
    v10 = v2[9];
    if (!v10)
      goto LABEL_9;
    goto LABEL_7;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t closure #1 in Sections.rowIDs(forSectionAt:)()
{
  return _ViewList_ID.canonicalID.getter();
}

uint64_t Sections.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t result;
  Swift::Int v18;
  unint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = v4;
  v10 = *(_QWORD *)(v5 + 24);
  v11 = *(_QWORD *)(v5 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v5, v10);
  v33 = 2;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64))(a1, &v33, a2, a3, v10, v11);
  if ((v13 & 1) != 0)
    goto LABEL_31;
  v14 = v12;
  v15 = *(_QWORD *)(v5 + 56);
  if (*(_BYTE *)(v5 + 64) == 1)
  {
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v16 = *(_QWORD *)(v15 + 16);
  swift_release();
  result = swift_bridgeObjectRelease();
  v18 = 0;
  if (v16)
  {
    v19 = v16;
    while (1)
    {
      v20 = v19 >> 1;
      v21 = v18 + (v19 >> 1);
      if (__OFADD__(v18, v19 >> 1))
        break;
      if (v21 > (unint64_t)v16)
        goto LABEL_33;
      v33 = v18 + (v19 >> 1);
      result = (uint64_t)closure #1 in Sections.firstIndexPath<A>(for:)(&v33, v5, v14);
      if ((result & 1) != 0)
      {
        if (v21 >= v16)
          goto LABEL_34;
        v18 = v21 + 1;
        v20 = v19 + ~v20;
      }
      v19 = v20;
      if (v20 <= 0)
        goto LABEL_13;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_13:
  v22 = *(_QWORD *)(v5 + 56);
  if (v18 >= *(_QWORD *)(v22 + 16))
    goto LABEL_31;
  v23 = *(unsigned __int8 *)(v5 + 64);
  result = Sections.startOffset(forSectionAt:)(v18);
  v24 = v14 - result;
  if (__OFSUB__(v14, result))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v18 + 1 >= *(_QWORD *)(v22 + 16))
  {
    v25 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  }
  else
  {
    if (v18 < -1)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v25 = *(_QWORD *)(v22 + 16 * (v18 + 1) + 32);
  }
  result = Sections.startOffset(forSectionAt:)(v18);
  v26 = __OFSUB__(v25, result);
  v27 = v25 - result;
  if (v26)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v28 = v24 & ~(v24 >> 63);
  if (v28 < v27)
    goto LABEL_21;
  if (v24 <= 0 && !v27)
  {
    v29 = NSNotFound.getter();
    goto LABEL_25;
  }
  if (v23)
    swift_retain();
  v31 = *(_QWORD *)(v22 + 16);
  result = swift_release();
  if (v18 >= v31 - 1)
  {
LABEL_31:
    v32 = type metadata accessor for IndexPath();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a4, 1, 1, v32);
  }
  v26 = __OFSUB__(v28, v27);
  v28 -= v27;
  if (!v26)
  {
    ++v18;
LABEL_21:
    v29 = v28;
LABEL_25:
    MEMORY[0x18D754B94](v29, v18);
    v30 = type metadata accessor for IndexPath();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a4, 0, 1, v30);
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t Sections.firstIndexPath(of:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t result;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  v3 = v2;
  v6 = a1[1];
  __swift_project_boxed_opaque_existential_1((_QWORD *)v3, *(_QWORD *)(v3 + 24));
  v29[0] = *a1;
  v29[1] = v6;
  v7 = ViewList.firstOffset(of:style:)();
  if ((v8 & 1) == 0)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v3 + 56);
    if (*(_BYTE *)(v3 + 64) == 1)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v11 = *(_QWORD *)(v10 + 16);
    swift_release();
    result = swift_bridgeObjectRelease();
    v13 = 0;
    if (v11)
    {
      v14 = v11;
      while (1)
      {
        v15 = v14 >> 1;
        v16 = v13 + (v14 >> 1);
        if (__OFADD__(v13, v14 >> 1))
          break;
        if (v16 > (unint64_t)v11)
          goto LABEL_36;
        v29[0] = v13 + (v14 >> 1);
        result = (uint64_t)closure #1 in Sections.firstIndexPath<A>(for:)(v29, v3, v9);
        if ((result & 1) != 0)
        {
          if (v16 >= v11)
            goto LABEL_37;
          v13 = v16 + 1;
          v15 = v14 + ~v15;
        }
        v14 = v15;
        if (v15 <= 0)
          goto LABEL_13;
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_13:
    result = Sections.startOffset(forSectionAt:)(v13);
    v17 = v9 - result;
    if (__OFSUB__(v9, result))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v19 = *(_QWORD *)(v3 + 56);
    if (v18 >= *(_QWORD *)(v19 + 16))
    {
      v20 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
    }
    else
    {
      if (v18 < 0)
      {
LABEL_41:
        __break(1u);
        return result;
      }
      v20 = *(_QWORD *)(v19 + 16 * v18 + 32);
    }
    result = Sections.startOffset(forSectionAt:)(v13);
    v21 = __OFSUB__(v20, result);
    v22 = v20 - result;
    if (v21)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v23 = v17 & ~(v17 >> 63);
    if (v23 < v22)
    {
      v18 = v13;
LABEL_22:
      v24 = v23;
      v25 = v18;
LABEL_26:
      MEMORY[0x18D754B94](v24, v25);
      v26 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a2, 0, 1, v26);
    }
    if (v17 <= 0 && !v22)
    {
      v24 = NSNotFound.getter();
      v25 = v13;
      goto LABEL_26;
    }
    if (*(_BYTE *)(v3 + 64) == 1)
      swift_retain();
    v27 = *(_QWORD *)(v19 + 16);
    swift_release();
    if (v13 < v27 - 1)
    {
      v21 = __OFSUB__(v23, v22);
      v23 -= v22;
      if (!v21)
        goto LABEL_22;
      __break(1u);
    }
  }
  v28 = type metadata accessor for IndexPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a2, 1, 1, v28);
}

_QWORD *closure #1 in Sections.firstIndexPath<A>(for:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *result + 1;
  if (__OFADD__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 56);
    if (v3 >= *(_QWORD *)(v5 + 16))
    {
      v6 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
      return (_QWORD *)(v6 < a3);
    }
    if ((v3 & 0x8000000000000000) == 0)
    {
      v6 = *(_QWORD *)(v5 + 16 * v3 + 32);
      return (_QWORD *)(v6 < a3);
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Sections(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Sections(a2, a1);
  return a2;
}

uint64_t outlined destroy of Sections(uint64_t a1)
{
  destroy for Sections(a1);
  return a1;
}

uint64_t destroy for Sections(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for Sections(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v8 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Sections(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Sections(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Sections(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Sections(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Sections()
{
  return &type metadata for Sections;
}

uint64_t getEnumTagSinglePayload for Sections.Item(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Sections.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Sections.Item()
{
  return &type metadata for Sections.Item;
}

uint64_t Transaction.synchronized<A>(_:)()
{
  return static Update.locked<A>(_:)();
}

uint64_t PickerContent.keyboardShortcut(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v12;
  v13 = v12[1];
  v15 = v12[2];
  v16 = *((_BYTE *)v12 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, v4, a2, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v11, a2);
  v18 = a4 + *(int *)(type metadata accessor for _KeyboardShortcutPickerContent(0, a2, a3, v17) + 36);
  *(_QWORD *)v18 = v14;
  *(_QWORD *)(v18 + 8) = v13;
  *(_QWORD *)(v18 + 16) = v15;
  *(_BYTE *)(v18 + 24) = v16;
  return swift_bridgeObjectRetain();
}

uint64_t PickerContent.keyboardShortcut(_:modifiers:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  _QWORD v7[3];
  char v8;

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[2] = a2;
  v8 = 0;
  return PickerContent.keyboardShortcut(_:)((uint64_t)v7, a3, a4, a5);
}

uint64_t PickerContent.keyboardShortcut(_:modifiers:localization:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  char v7;
  _QWORD v9[3];
  char v10;

  v6 = a1[1];
  v7 = *a3;
  v9[0] = *a1;
  v9[1] = v6;
  v9[2] = a2;
  v10 = v7;
  return PickerContent.keyboardShortcut(_:)((uint64_t)v9, a4, a5, a6);
}

void PickerContent.keyboardShortcut(modifiers:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t _KeyboardShortcutPickerContent._identifiedView.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  uint64_t v12;
  char v13;
  __int128 v15;
  uint64_t v16;
  char v17;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v15 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 56))(v4, v3, v8);
  v11 = (__int128 *)(v1 + *(int *)(a1 + 36));
  v12 = *((_QWORD *)v11 + 2);
  v13 = *((_BYTE *)v11 + 24);
  v15 = *v11;
  v16 = v12;
  v17 = v13;
  swift_getAssociatedConformanceWitness();
  View._trait<A>(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, AssociatedTypeWitness);
}

uint64_t View.pickerKeyboardShortcut(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.pickerKeyboardShortcut(_:modifiers:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.pickerKeyboardShortcut(_:modifiers:localization:)()
{
  return View._trait<A>(_:_:)();
}

void static KeyboardShortcutPickerOptionTraitKey.defaultValue.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

void associated type witness table accessor for PickerContent.Body : PickerContent in _KeyboardShortcutPickerContent<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in _KeyboardShortcutPickerContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for _KeyboardShortcutPickerContent<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _KeyboardShortcutPickerContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance KeyboardShortcutPickerOptionTraitKey(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t type metadata completion function for _KeyboardShortcutPickerContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _KeyboardShortcutPickerContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) == 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
    *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for _KeyboardShortcutPickerContent(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _KeyboardShortcutPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _KeyboardShortcutPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  return a1;
}

uint64_t assignWithTake for _KeyboardShortcutPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for _KeyboardShortcutPickerContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v14 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((v14 + 1) >= 2)
        return v14;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 25;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18757E588 + 4 * byte_187C40690[v12]))();
  }
}

void storeEnumTagSinglePayload for _KeyboardShortcutPickerContent(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 25;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_18757E740()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18757E7CCLL);
}

void sub_18757E748(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18757E750);
  JUMPOUT(0x18757E7CCLL);
}

void sub_18757E798()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18757E7CCLL);
}

void sub_18757E7A0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18757E7CCLL);
}

uint64_t sub_18757E7A8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x18757E7B4);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = a2;
LABEL_6:
    JUMPOUT(0x18757E7CCLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for _KeyboardShortcutPickerContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _KeyboardShortcutPickerContent);
}

ValueMetadata *type metadata accessor for KeyboardShortcutPickerOptionTraitKey()
{
  return &type metadata for KeyboardShortcutPickerOptionTraitKey;
}

uint64_t sub_18757E800()
{
  uint64_t v0;
  _QWORD v2[2];

  swift_getAssociatedTypeWitness();
  type metadata accessor for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>();
  v0 = type metadata accessor for ModifiedContent();
  v2[0] = swift_getAssociatedConformanceWitness();
  v2[1] = lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v2);
}

void type metadata accessor for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>);
  }
}

uint64_t sub_18757E910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void View.map<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[4];

  v13 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v13 + 16))(v16, v7, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a7, v16, a3);
  v17[0] = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  type metadata accessor for MappedViews();
}

uint64_t sub_18757EA0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(a1 + 52));
  *v4 = v2;
  v4[1] = v1;
  return swift_retain();
}

void type metadata accessor for MappedViews()
{
  JUMPOUT(0x18D75FF28);
}

_QWORD *initializeBufferWithCopyOfBuffer for MappedViewElement(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MappedViewElement(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MappedViewElement(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MappedViewElement()
{
  return &type metadata for MappedViewElement;
}

ValueMetadata *type metadata accessor for MappedViewElement.Placeholder()
{
  return &type metadata for MappedViewElement.Placeholder;
}

uint64_t getEnumTagSinglePayload for MappedViews(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18757EBD8 + 4 * byte_187C40770[v10]))();
  }
}

void storeEnumTagSinglePayload for MappedViews(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18757ED50()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18757EDC8);
}

void sub_18757ED58(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18757ED60);
  JUMPOUT(0x18757EDC8);
}

void sub_18757EDA0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18757EDC8);
}

void sub_18757EDA8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18757EDC8);
}

uint64_t sub_18757EDB0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18757EDC8);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18757EDC4);
    JUMPOUT(0x18757EDBCLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

_UNKNOWN **base witness table accessor for View in MappedViews<A, B>()
{
  return &protocol witness table for MappedViews<A, B>;
}

_UNKNOWN **base witness table accessor for View in MappedViewElement.Placeholder()
{
  return &protocol witness table for MappedViewElement.Placeholder;
}

uint64_t static MappedViewElement.Placeholder._makeView(view:inputs:)(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void (*v8)(uint64_t *);
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  v2 = *((_DWORD *)a2 + 2);
  v3 = a2[2];
  v4 = a2[5];
  v5 = a2[6];
  v6 = *((_DWORD *)a2 + 20);
  v20 = *a2;
  v21 = v2;
  v22 = v3;
  v23 = *(_OWORD *)(a2 + 3);
  v24 = v4;
  v25 = v5;
  v26 = *(_OWORD *)(a2 + 7);
  v27 = a2[9];
  v28 = v6;
  lazy protocol witness table accessor for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  if (v10)
  {
    v7 = *(_QWORD *)(v10 + 32);
    v8 = *(void (**)(uint64_t *))(v10 + 16);
    swift_retain();
    swift_retain();
    swift_release();
    v19 = v7;
    PropertyList.subscript.setter();
    if (v8)
    {
      v10 = v20;
      v11 = v21;
      v12 = v22;
      v13 = v23;
      v14 = v24;
      v15 = v25;
      v16 = v26;
      v17 = v27;
      v18 = v28;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(&v10);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return swift_release_n();
    }
  }
  else
  {
    v19 = 0;
    PropertyList.subscript.setter();
  }
  _ViewOutputs.init()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void protocol witness for View.body.getter in conformance MappedViewElement.Placeholder()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static MappedViews._makeViewList(view:inputs:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  type metadata accessor for MappedViews();
}

void sub_18757F17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;

  *(_QWORD *)(v16 - 336) = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v17 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64);
  *(_QWORD *)(v16 - 320) = v14;
  *(_QWORD *)(v16 - 280) = v12;
  if (v17)
    closure #1 in static MappedViews._makeViewList(view:inputs:)();
  v18 = v11 | 0x800;
  *(_QWORD *)(v16 - 368) = v11 | 0x800;
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  *(_QWORD *)(v16 - 184) = v9;
  v19 = v9;
  v20 = *(_DWORD *)(v16 - 244);
  *(_DWORD *)(v16 - 176) = v20;
  *(_QWORD *)(v16 - 360) = v10;
  *(_QWORD *)(v16 - 168) = v10;
  v21 = v13;
  *(_DWORD *)(v16 - 340) = v15;
  v22 = *(_DWORD *)(v16 - 260);
  *(_DWORD *)(v16 - 160) = v15;
  *(_DWORD *)(v16 - 156) = v22;
  v23 = *(_DWORD *)(v16 - 232);
  *(_DWORD *)(v16 - 152) = *(_DWORD *)(v16 - 228);
  *(_DWORD *)(v16 - 148) = v23;
  v24 = *(_QWORD *)(v16 - 304);
  *(_QWORD *)(v16 - 144) = *(_QWORD *)(v16 - 272);
  *(_QWORD *)(v16 - 136) = v24;
  *(_QWORD *)(v16 - 128) = v18;
  v25 = *(_DWORD *)(v16 - 308);
  *(_DWORD *)(v16 - 120) = v25;
  v26 = *(_QWORD *)(v16 - 240);
  *(_QWORD *)(v16 - 112) = v26;
  v27 = *(_DWORD *)(v16 - 312);
  *(_BYTE *)(v16 - 104) = v27;
  *(_QWORD *)(v16 - 352) = v21;
  static View.makeDebuggableViewList(view:inputs:)();
  *(_QWORD *)(v16 - 184) = v19;
  *(_DWORD *)(v16 - 176) = v20;
  v28 = *(_QWORD *)(v16 - 360);
  *(_QWORD *)(v16 - 168) = v28;
  *(_DWORD *)(v16 - 160) = v15;
  *(_DWORD *)(v16 - 156) = v22;
  v29 = *(_DWORD *)(v16 - 232);
  *(_DWORD *)(v16 - 152) = *(_DWORD *)(v16 - 228);
  *(_DWORD *)(v16 - 148) = v29;
  v30 = *(_QWORD *)(v16 - 272);
  *(_QWORD *)(v16 - 144) = v30;
  *(_QWORD *)(v16 - 136) = v24;
  *(_QWORD *)(v16 - 128) = *(_QWORD *)(v16 - 368);
  *(_DWORD *)(v16 - 120) = v25;
  *(_QWORD *)(v16 - 112) = v26;
  *(_BYTE *)(v16 - 104) = v27;
  v31 = _ViewListOutputs.makeAttribute(inputs:)();
  *(_DWORD *)(v16 - 184) = *(_DWORD *)(v16 - 296);
  v32 = _GraphValue.value.getter();
  v33 = v19;
  *(_QWORD *)(v16 - 328) = v19;
  swift_retain();
  v34 = v28;
  swift_retain();
  swift_bridgeObjectRetain();
  v35 = *(_QWORD *)(v16 - 352);
  v36 = *(_QWORD *)(v16 - 288);
  v37 = *(_QWORD *)(v16 - 280);
  v38 = *(_QWORD *)(v16 - 320);
  v39 = default argument 3 of MappedViews.MappedList.Init.init(list:view:baseInputs:views:)();
  *(_QWORD *)(v16 - 296) = &a9;
  *(_DWORD *)(v16 - 184) = v31;
  *(_DWORD *)(v16 - 180) = v32;
  *(_QWORD *)(v16 - 176) = v33;
  *(_DWORD *)(v16 - 168) = *(_DWORD *)(v16 - 244);
  *(_QWORD *)(v16 - 160) = v34;
  v40 = *(_DWORD *)(v16 - 260);
  *(_DWORD *)(v16 - 152) = *(_DWORD *)(v16 - 340);
  *(_DWORD *)(v16 - 148) = v40;
  v41 = *(_DWORD *)(v16 - 232);
  *(_DWORD *)(v16 - 144) = *(_DWORD *)(v16 - 228);
  *(_DWORD *)(v16 - 140) = v41;
  *(_QWORD *)(v16 - 136) = v30;
  *(_QWORD *)(v16 - 128) = v39;
  MEMORY[0x1E0C80A78](v39, v42);
  *(_QWORD *)(v16 - 216) = v35;
  *(_QWORD *)(v16 - 208) = v36;
  *(_QWORD *)(v16 - 200) = v37;
  *(_QWORD *)(v16 - 192) = v38;
  type metadata accessor for MappedViews.MappedList.Init();
}

uint64_t sub_18757F3F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)(v2 - 16) = a1;
  *(_QWORD *)(v2 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViews<A, B>.MappedList.Init, a1);
  type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3 - 184, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_20, v1, a1, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v7 = *(_DWORD *)(v3 - 216);
  v8 = *(_QWORD *)(v3 - 256);
  outlined destroy of _ViewListOutputs.Views(v8);
  *(_DWORD *)v8 = v7;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 40) = 1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void closure #1 in static MappedViews._makeViewList(view:inputs:)()
{
  type metadata accessor for MappedViews();
}

uint64_t sub_18757F540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

uint64_t default argument 3 of MappedViews.MappedList.Init.init(list:view:baseInputs:views:)()
{
  uint64_t v1;

  type metadata accessor for WeakAttribute();
  lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
  type metadata accessor for Dictionary();
  type metadata accessor for MutableBox();
  v1 = Dictionary.init()();
  return MEMORY[0x18D755D28](&v1);
}

uint64_t static MappedViews._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD v12[2];
  int v13;
  uint64_t v14;

  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 8) | 0x800;
  v12[0] = *(_QWORD *)a1;
  v12[1] = v8;
  v13 = v6;
  v14 = v7;
  v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = v9(v12, a2, a4);
  swift_bridgeObjectRelease();
  swift_release();
  return v10;
}

uint64_t MappedViews.MappedList.Init.list.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Value = AGGraphGetValue();
  return outlined init with copy of TableColumnList(Value, a1);
}

void MappedViews.MappedList.Init.value.getter()
{
  _BYTE v0[40];

  MappedViews.MappedList.Init.list.getter((uint64_t)v0);
  type metadata accessor for MappedViews.MappedList();
}

uint64_t sub_18757F798(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  __int128 v14;

  v5[3] = a1;
  v5[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViews<A, B>.MappedList, a1);
  v9 = swift_allocObject();
  *v5 = v9;
  outlined init with take of OptionalBinaryInteger(&v14, v9 + 16);
  *(_QWORD *)(v9 + 56) = v4;
  *(_DWORD *)(v9 + 64) = v7;
  *(_QWORD *)(v9 + 72) = v2;
  *(_DWORD *)(v9 + 80) = v8;
  *(_DWORD *)(v9 + 84) = v6;
  *(_DWORD *)(v9 + 88) = v12;
  *(_DWORD *)(v9 + 92) = v11;
  *(_QWORD *)(v9 + 96) = v3;
  *(_DWORD *)(v9 + 104) = v13;
  *(_QWORD *)(v9 + 112) = v1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance MappedViews<A, B>.MappedList.Init(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViews<A, B>.MappedList.Init, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t MappedViews.MappedList.count(style:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *a1;
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 8))(&v6, v3, v4);
}

uint64_t MappedViews.MappedList.estimatedCount(style:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *a1;
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(&v6, v3, v4);
}

uint64_t MappedViews.MappedList.traitKeys.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t MappedViews.MappedList.viewIDs.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t MappedViews.MappedList.traits.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

void MappedViews.MappedList.applyNodes(from:style:list:transform:to:)()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  type metadata accessor for MappedViews.Transform();
}

uint64_t sub_18757FAB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViews<A, B>.Transform, a1);
  _ViewList_SublistTransform.push<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v6 = v5[3];
  v7 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  v11 = v2;
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 48))(v3, &v11, v4 | ((HIDWORD(v4) & 1) << 32), v1, v9, v10, v6, v7);
  _ViewList_SublistTransform.pop()();
  return v6 & 1;
}

uint64_t MappedViews.MappedList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v9 = *a2;
  v10 = v5[3];
  v11 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v10);
  v13 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64))(a1, &v13, a4, a5, v10, v11);
}

void protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance MappedViews<A, B>.MappedList()
{
  MappedViews.MappedList.applyNodes(from:style:list:transform:to:)();
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance MappedViews<A, B>.MappedList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MappedViews.MappedList.firstOffset<A>(forID:style:)(a1, a2, a5, a3, a4);
}

void MappedViews.Transform.apply(sublist:)(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  _BYTE v4[40];
  __int128 v5;
  __int128 v6;

  outlined init with copy of TableColumnList(a1 + 32, (uint64_t)v4);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_Sublist.list.getter();
  AGCreateWeakAttribute();
  v3 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 16);
  v6 = v3;
  type metadata accessor for MappedViews.MappedElements();
}

uint64_t sub_18757FCF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a1;
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViews<A, B>.MappedElements, a1);
  v10 = swift_allocObject();
  *(_QWORD *)&v16 = v10;
  outlined init with take of OptionalBinaryInteger(&v15, v10 + 16);
  *(_QWORD *)(v10 + 56) = v6;
  *(_DWORD *)(v10 + 64) = v13;
  *(_QWORD *)(v10 + 72) = v7;
  v11 = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v10 + 80) = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v10 + 88) = v11;
  *(_QWORD *)(v10 + 96) = v5;
  *(_QWORD *)(v10 + 104) = v9;
  *(_QWORD *)(v10 + 112) = v8;
  *(_QWORD *)(v10 + 120) = v2;
  *(_DWORD *)(v10 + 128) = v14;
  *(_QWORD *)(v10 + 136) = v3;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1(v1);
  return outlined init with take of OptionalBinaryInteger(&v16, v1);
}

uint64_t MappedViews.MappedElements.count.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v12;
  __int128 v13;
  unsigned int Attribute;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  int v23;
  _OWORD v26[5];
  int v27;

  v12 = *(_OWORD *)(a3 + 48);
  v26[2] = *(_OWORD *)(a3 + 32);
  v26[3] = v12;
  v26[4] = *(_OWORD *)(a3 + 64);
  v27 = *(_DWORD *)(a3 + 80);
  v13 = *(_OWORD *)(a3 + 16);
  v26[0] = *(_OWORD *)a3;
  v26[1] = v13;
  Attribute = AGWeakAttributeGetAttribute();
  v15 = Attribute == *MEMORY[0x1E0CFED28];
  if (Attribute == *MEMORY[0x1E0CFED28])
    v16 = 0;
  else
    v16 = Attribute;
  v17 = *(_DWORD *)(v7 + 112);
  v18 = swift_allocObject();
  _ViewList_ID.elementID(at:)();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a5;
  *(_QWORD *)(v19 + 24) = a6;
  v20 = closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(a1, (uint64_t)protocol witness for DropAction.perform(_:_:) in conformance ItemProviderDropAction, v19, v7, a2, (uint64_t)v26, a4, v18, v17, v23, v16, (v16 | ((unint64_t)v15 << 32)) >> 32, *(_OWORD *)(a7 + 16), *(_QWORD *)(a7 + 32), *(_QWORD *)(a7 + 40));
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
    return v20 & 1;
  __break(1u);
  return result;
}

uint64_t closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, char a12, __int128 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _BYTE v28[16];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[5];
  int v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;

  outlined init with copy of TableColumnList(a4, (uint64_t)v42);
  v19 = v43;
  v20 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  v21 = *(_OWORD *)(a6 + 48);
  v40[2] = *(_OWORD *)(a6 + 32);
  v40[3] = v21;
  v40[4] = *(_OWORD *)(a6 + 64);
  v41 = *(_DWORD *)(a6 + 80);
  v22 = *(_OWORD *)(a6 + 16);
  v40[0] = *(_OWORD *)a6;
  v40[1] = v22;
  v29 = a13;
  v30 = a14;
  v31 = a15;
  v32 = a8;
  v33 = a2;
  v34 = a3;
  v35 = a9;
  v36 = a11;
  v37 = a12 & 1;
  v38 = a4;
  v39 = a7;
  LOBYTE(a7) = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, void (*)(), _BYTE *, uint64_t, uint64_t))(v20 + 16))(a1, a5, v40, a7, partial apply for closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:), v28, v19, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  return a7 & 1;
}

void closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)()
{
  type metadata accessor for MappedViews.MappedElements();
}

uint64_t sub_187580128(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  uint64_t result;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t *, void (*)(uint64_t *@<X0>, uint64_t@<X8>), uint64_t);
  _OWORD v23[8];
  uint64_t v24;

  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v23, v10, a1);
  v11 = swift_allocObject();
  v12 = v23[5];
  *(_OWORD *)(v11 + 136) = v23[4];
  *(_OWORD *)(v11 + 152) = v12;
  v13 = v23[7];
  *(_OWORD *)(v11 + 168) = v23[6];
  *(_OWORD *)(v11 + 184) = v13;
  v14 = v23[1];
  *(_OWORD *)(v11 + 72) = v23[0];
  *(_OWORD *)(v11 + 88) = v14;
  v15 = v23[3];
  *(_OWORD *)(v11 + 104) = v23[2];
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v7;
  *(_QWORD *)(v11 + 32) = v5;
  *(_QWORD *)(v11 + 40) = v2;
  *(_QWORD *)(v11 + 48) = v1;
  *(_DWORD *)(v11 + 56) = v19;
  *(_DWORD *)(v11 + 60) = v4;
  *(_BYTE *)(v11 + 64) = BYTE4(v4) & 1;
  *(_OWORD *)(v11 + 120) = v15;
  *(_QWORD *)(v11 + 200) = v9;
  *(_QWORD *)(v11 + 208) = v20;
  *(_QWORD *)(v11 + 216) = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  v16 = v22(v21, &v24, partial apply for closure #1 in closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:), v11);
  swift_release();
  result = swift_beginAccess();
  v18 = *(_DWORD *)(v1 + 16);
  if (v18 == 0x7FFFFFFF)
  {
    __break(1u);
  }
  else
  {
    *v3 = v18 + 1;
    return v16 & 1;
  }
  return result;
}

void closure #1 in closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v26 = a5;
  v27 = a6;
  v18[1] = a4;
  v29 = a7;
  v39 = *MEMORY[0x1E0C80C00];
  v13 = *((_DWORD *)a1 + 2);
  v14 = a1[2];
  v21 = *a1;
  v22 = v14;
  v15 = a1[6];
  v24 = a1[5];
  v25 = v15;
  v19 = *((_DWORD *)a1 + 20);
  v20 = v13;
  swift_beginAccess();
  v16 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  v17 = *(_QWORD *)(a2 + 16);
  v23 = v18;
  v31 = v17;
  v32 = v16;
  v33 = a3;
  v34 = AGCreateWeakAttribute();
  v30 = a9;
  v35 = a8;
  v36 = a9;
  v37 = a10;
  v38 = a11;
  v28 = a11;
  type metadata accessor for MappedViews.ElementView();
}

uint64_t sub_187580350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;

  v38[3] = a1;
  v38[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViews<A, B>.ElementView, a1);
  v11 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v39, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v38, a1, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v13 = *(_QWORD *)(v1 + 24);
  v48 = *(_QWORD *)(v1 + 16);
  v49 = v13;
  _ViewList_ID.canonicalID.getter();
  v14 = v40;
  *(_QWORD *)(v4 - 216) = AGCreateWeakAttribute();
  *(_BYTE *)(v4 - 208) = 0;
  v57 = v39;
  v58 = v14;
  swift_beginAccess();
  v32 = v2;
  type metadata accessor for WeakAttribute();
  lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  v15 = *(_QWORD *)(v3 + 40);
  v16 = *(_DWORD *)(v3 + 48);
  v17 = *(_QWORD *)(v3 + 56);
  v18 = *(_DWORD *)(v3 + 64);
  v19 = *(_DWORD *)(v3 + 68);
  v20 = *(_DWORD *)(v3 + 72);
  v21 = *(_DWORD *)(v3 + 76);
  v22 = *(_QWORD *)(v3 + 80);
  v57 = v15;
  LODWORD(v58) = v16;
  v59 = v17;
  v60 = v18;
  v61 = v19;
  v62 = v20;
  v63 = v21;
  v64 = v22;
  if (v27)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    _GraphInputs.makeReusable(indirectMap:)();
    swift_release();
    v23 = v57;
    v16 = v58;
    v17 = v59;
    v18 = v60;
    v19 = v61;
    v20 = v62;
    v21 = v63;
    v22 = v64;
  }
  else
  {
    v24 = v15;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v23 = v24;
  }
  v48 = v30;
  LODWORD(v49) = v29;
  v50 = v31;
  *(_QWORD *)&v51 = v5;
  *((_QWORD *)&v51 + 1) = v6;
  v52 = v33;
  v53 = v34;
  *(_QWORD *)&v54 = v7;
  *((_QWORD *)&v54 + 1) = v8;
  v55 = v9;
  v56 = v28;
  v39 = v23;
  LODWORD(v40) = v16;
  v41 = v17;
  *(_QWORD *)&v42 = __PAIR64__(v19, v18);
  *((_QWORD *)&v42 + 1) = __PAIR64__(v21, v20);
  v43 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.merge(_:ignoringPhase:)();
  lazy protocol witness table accessor for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput();
  swift_retain();
  PropertyList.subscript.getter();
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v35;
  v25[3] = v36;
  v25[4] = v39;
  *(_QWORD *)(v4 - 216) = v25;
  PropertyList.subscript.setter();
  _GraphValue.init(_:)();
  v39 = v48;
  LODWORD(v40) = v49;
  v41 = v50;
  v42 = v51;
  v43 = v52;
  v44 = v53;
  v45 = v54;
  v46 = v55;
  v47 = v56;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v37 + 24))(v4 - 216, &v39, v32);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t MappedViews.MappedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[3];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;

  v13 = *(_QWORD *)(v6 + 96);
  *(_QWORD *)&v48[0] = *(_QWORD *)(v6 + 88);
  *((_QWORD *)&v48[0] + 1) = v13;
  result = _ViewList_ID.canonicalID.getter();
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  v55 = a1;
  outlined init with copy of TableColumnList(a2, (uint64_t)&v37);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for _ViewList_Elements);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    memset(v42, 0, sizeof(v42));
    swift_release();
    v22 = type metadata accessor for Optional();
    (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v42, v22);
    return 0;
  }
  v34 = a3;
  v35 = a5;
  v51 = v44;
  v52 = v45;
  v53 = v46;
  v54 = v47;
  v48[0] = v42[0];
  v48[1] = v42[1];
  v49 = v42[2];
  v50 = v43;
  v16 = v55;
  v15 = v56;
  v17 = v57;
  v18 = swift_retain();
  MEMORY[0x18D755D04](&v36, v18);
  v19 = v36;
  *(_QWORD *)&v42[0] = __PAIR64__(v15, v16);
  v33 = v15;
  *((_QWORD *)&v42[0] + 1) = v17;
  v32 = *(_QWORD *)(a6 + 24);
  v20 = type metadata accessor for WeakAttribute();
  v21 = lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
  MEMORY[0x18D75CA24](&v37, v42, v19, MEMORY[0x1E0CE1C78], v20, v21);
  swift_release();
  swift_bridgeObjectRelease();
  if ((v38 & 1) != 0)
  {
    swift_release();
    (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(v48, a6);
    return 0;
  }
  v31 = a6;
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E0CFED28])
  {
    v37 = __PAIR64__(v33, v16);
    v38 = v17;
    swift_beginAccess();
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();
LABEL_15:
    swift_release();
    (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v48, v31);
    return 0;
  }
  v23 = *(_QWORD *)(v6 + 24);
  v24 = *(_QWORD *)(v6 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v6, v23);
  if (((*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 24))(a1, v48, v34, a4, v35 & 1, v23, v24) & 1) == 0)goto LABEL_14;
  v25 = *(_QWORD *)(v6 + 40);
  v26 = *(_QWORD *)(v6 + 56);
  v27 = *(_QWORD *)(v6 + 80);
  DWORD2(v42[0]) = *(_DWORD *)(v6 + 48);
  *(_QWORD *)&v42[1] = v26;
  *(_OWORD *)((char *)&v42[1] + 8) = *(_OWORD *)(v6 + 64);
  *((_QWORD *)&v42[2] + 1) = v27;
  v37 = *((_QWORD *)&v49 + 1);
  LODWORD(v38) = v50;
  v39 = *((_QWORD *)&v50 + 1);
  v40 = v51;
  v41 = v52;
  *(_QWORD *)&v42[0] = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v28 = _GraphInputs.tryToReuse(by:indirectMap:testOnly:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v28 & 1) == 0)
  {
LABEL_14:
    static ReuseTrace.traceReuseViewInputsDifferentFailure()();
    goto LABEL_15;
  }
  if ((v35 & 1) == 0)
  {
    MEMORY[0x1E0C80A78](v17, v29);
    v30 = *(_OWORD *)(v31 + 32);
    *(_QWORD *)&v42[0] = *(_QWORD *)(v31 + 16);
    *((_QWORD *)&v42[0] + 1) = v32;
    v42[1] = v30;
    type metadata accessor for MappedViews.ElementView();
  }
  swift_release();
  (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v48, v31);
  return 1;
}

void closure #1 in MappedViews.MappedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)()
{
  swift_bridgeObjectRelease();
  type metadata accessor for MappedViews.MappedElements();
}

double sub_187580BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  double result;

  v3 = *(_DWORD *)(v0 + 112);
  AGWeakAttributeGetAttribute();
  swift_bridgeObjectRetain();
  v4 = AGCreateWeakAttribute();
  result = *(double *)(v0 + 88);
  *(double *)v1 = result;
  *(_QWORD *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 20) = v4;
  return result;
}

double MappedViews.ElementView.list.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TableColumnList(WeakValue, a1);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t MappedViews.ElementView.value.getter(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViews<A, B>.ElementView, a1);
  return Rule.withObservation<A>(do:)();
}

void closure #1 in MappedViews.ElementView.value.getter()
{
  type metadata accessor for MappedViews.ElementView();
}

void sub_187580DB4()
{
  type metadata accessor for MappedViews();
}

uint64_t sub_187580DE4()
{
  return Attribute.syncMainIfReferences<A>(do:)();
}

void closure #1 in closure #1 in MappedViews.ElementView.value.getter()
{
  type metadata accessor for MappedViews();
}

void sub_187580E8C()
{
  type metadata accessor for MappedViews.ElementView();
}

uint64_t sub_187580EC4()
{
  uint64_t v0;
  void (*v1)(_QWORD *);
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  MappedViews.ElementView.list.getter((uint64_t)v10);
  v3 = v11;
  if (v11)
  {
    v4 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40);
    swift_bridgeObjectRetain();
    v5(&v9, v3, v4);
    v6 = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of ViewList?((uint64_t)v10);
    ViewTraitCollection.init()();
    v6 = v10[0];
  }
  v10[0] = __PAIR64__(v8, v2);
  v10[1] = v0;
  v10[2] = v6;
  v1(v10);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance MappedViews<A, B>.ElementView(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViews<A, B>.ElementView, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MappedViews<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViews<A, B>, a3);
  return static MultiView._makeView(view:inputs:)();
}

void protocol witness for static View._makeViewList(view:inputs:) in conformance MappedViews<A, B>()
{
  static MappedViews._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MappedViews<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static MappedViews._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 32));
}

void protocol witness for View.body.getter in conformance MappedViews<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViews<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

unint64_t lazy protocol witness table accessor for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput;
  if (!lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViewElement.BodyInput, &unk_1E1AC57A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput;
  if (!lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MappedViewElement.BodyInput, &unk_1E1AC57A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput);
  }
  return result;
}

void type metadata accessor for MappedViews.MappedList.Init()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t initializeWithCopy for MappedViews.MappedList.Init(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MappedViews.MappedList.Init(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MappedViews.MappedList.Init(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

void *type metadata accessor for MappedViewElement.BodyInput()
{
  return &unk_1E1AC57A0;
}

void base witness table accessor for _AttributeBody in MappedViews<A, B>.MappedList.Init()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for MappedViews.MappedList()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_1875812F4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t destroy for MappedViews.MappedList(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for MappedViews.MappedList(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MappedViews.MappedList(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MappedViews.MappedList(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  return a1;
}

void type metadata accessor for MappedViews.Transform()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t destroy for MappedViews.MappedList.Init()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for MappedViews.Transform(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MappedViews.Transform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MappedViews.Transform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

void type metadata accessor for MappedViews.MappedElements()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_187581748()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t destroy for MappedViews.MappedElements(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for MappedViews.MappedElements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MappedViews.MappedElements(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MappedViews.MappedElements(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MappedViews.MappedElements(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MappedViews.MappedElements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void partial apply for closure #1 in MappedViews.MappedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)()
{
  closure #1 in MappedViews.MappedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)();
}

void type metadata accessor for MappedViews.ElementView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_187581AF4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_187581B18()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)()
{
  closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)();
}

uint64_t sub_187581B70(char a1)
{
  return a1 & 1;
}

uint64_t sub_187581B80()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  closure #1 in closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(a1, *(_QWORD *)(v2 + 48), *(_DWORD *)(v2 + 56), *(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 208), *(_QWORD *)(v2 + 216), a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_187581C34()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t initializeWithCopy for MappedViews.ElementView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MappedViews.ElementView(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for MappedViews.ElementView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MappedViews.ElementView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 28))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MappedViews.ElementView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 28) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in MappedViews<A, B>.ElementView()
{
  JUMPOUT(0x18D75FFDCLL);
}

void partial apply for closure #1 in MappedViews.ElementView.value.getter()
{
  closure #1 in MappedViews.ElementView.value.getter();
}

void partial apply for closure #1 in closure #1 in MappedViews.ElementView.value.getter()
{
  closure #1 in closure #1 in MappedViews.ElementView.value.getter();
}

uint64_t View.anchorPreference<A, B>(key:value:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  _QWORD v13[3];

  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  v11 = type metadata accessor for _AnchorWritingModifier(0, a6, a7, a9);
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B4AC](v13, a5, v11, a8);
  swift_release();
  return swift_release();
}

uint64_t _AnchorWritingModifier.anchor.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*_AnchorWritingModifier.anchor.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for _AnchorWritingModifier.transform : <A, B>_AnchorWritingModifier<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a3 + a2;
  v6 = *(_QWORD *)(a3 + a2 - 8);
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 48) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Int) -> (@out C);
  a4[1] = v9;
  return swift_retain();
}

uint64_t key path setter for _AnchorWritingModifier.transform : <A, B>_AnchorWritingModifier<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = a4 + a3;
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v7 = a1[1];
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v8;
  *(_QWORD *)(v9 + 48) = v7;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 8) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Anchor<A>) -> (@out B.PreferenceKey.Value);
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t _AnchorWritingModifier.transform.getter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  return a2;
}

uint64_t _AnchorWritingModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*_AnchorWritingModifier.transform.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _AnchorWritingModifier2.base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t _AnchorWritingModifier2.base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  swift_release();
  result = swift_release();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*_AnchorWritingModifier2.base.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void static _AnchorWritingModifier2._makeView(modifier:inputs:body:)(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, double *a7@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  _DWORD v31[3];

  v12 = *(_QWORD *)a2;
  v13 = *(_DWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(_DWORD *)(a2 + 80);
  LODWORD(v22) = *a1;
  type metadata accessor for _AnchorWritingModifier2(255, a4, a5, a6);
  type metadata accessor for _GraphValue();
  type metadata accessor for _AnchorWritingModifier(0, a4, a5, a6);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v19 = *(_OWORD *)(a2 + 56);
  v20 = *(_OWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 72);
  _GraphValue.subscript.getter();
  v22 = v12;
  v23 = v13;
  v24 = v14;
  v25 = v16;
  v26 = v17;
  v27 = v20;
  v28 = v19;
  v29 = v18;
  v30 = v15;
  static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)(v31, &v22, 0, a3, a4, a5, a6, a7);
}

uint64_t closure #1 in static _AnchorWritingModifier2._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v11[2] = type metadata accessor for _AnchorWritingModifier2(0, a2, a3, a4);
  v12 = type metadata accessor for _AnchorWritingModifier(0, a2, a3, a4);
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, v12, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v13;
}

uint64_t partial apply for closure #1 in static _AnchorWritingModifier2._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static _AnchorWritingModifier2._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for _AnchorWritingModifier2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnchorWritingModifier2);
}

_UNKNOWN **base witness table accessor for ViewModifier in _AnchorWritingModifier<A, B>()
{
  return &protocol witness table for _AnchorWritingModifier<A, B>;
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AnchorWritingModifier2<A, B>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t *a4@<X4>, double *a5@<X8>)
{
  static _AnchorWritingModifier2._makeView(modifier:inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a5);
}

_UNKNOWN **base witness table accessor for ViewModifier in _AnchorWritingModifier2<A, B>()
{
  return &protocol witness table for _AnchorWritingModifier2<A, B>;
}

uint64_t sub_18758236C()
{
  return 24;
}

__n128 sub_187582378(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_18758238C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = a1[3];
  type metadata accessor for _AnchorWritingModifier(255, a1[1], a1[2], a1[4]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _AnchorWritingModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1875823F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Anchor<A>) -> (@out B.PreferenceKey.Value)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 40);
  v4 = a1;
  return v2(&v4);
}

uint64_t static AnchorWriter.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a3, 0, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AnchorWriter<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static AnchorWriter.initialValue.getter(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnchorWriter<A, B>()
{
  return specialized AnchorWriter.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance AnchorWriter<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v21 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v21 - v14;
  static AnchorWriter.initialValue.getter(v4, v3, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v15, v10, AssociatedTypeWitness);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21[-2] = a2;
  v21[-1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnchorWriter<A, B>, a2, v19);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)partial apply for closure #1 in static Rule._update(_:attribute:), (uint64_t)&v21[-4], AssociatedTypeWitness, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v20);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, AssociatedTypeWitness);
}

uint64_t closure #1 in static Rule._updateDefault(_:)()
{
  swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue();
}

uint64_t specialized AnchorWriter.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x203A726F68636E41;
}

uint64_t LazyState.Storage.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double v6;
  uint64_t v7;
  void (**v8)(void);
  uint64_t v9;
  uint64_t v11;

  v3 = v2;
  v6 = MEMORY[0x1E0C80A78](a1, v3);
  v8 = (void (**)(void))((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void (**)(void), double))(v9 + 16))(v8, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
    return (*(uint64_t (**)(uint64_t, void (**)(void)))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a2, v8);
  (*v8)();
  return swift_release();
}

uint64_t LazyState.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)((char *)a5 + *(int *)(type metadata accessor for LazyState(0, a3, a3, a4) + 28)) = 0;
  *a5 = a1;
  a5[1] = a2;
  type metadata accessor for LazyState.Storage(0, a3, v9, v10);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for LazyState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyState);
}

uint64_t type metadata accessor for LazyState.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyState.Storage);
}

uint64_t LazyState.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return LazyState.getValue(forReading:)(1, a1, a2, a3, a4);
}

uint64_t LazyState.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized State.wrappedValue.setter(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t LazyState.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(v5 + *(int *)(a2 + 28)))
  {
    type metadata accessor for GraphHost();
    swift_retain();
    if ((static GraphHost.isUpdating.getter() & 1) != 0)
    {
      if ((a1 & 1) != 0)
        dispatch thunk of AnyLocation.wasRead.setter();
      v11 = type metadata accessor for LazyState.Storage(0, *(_QWORD *)(a2 + 16), v9, v10);
      LazyState.Storage.value.getter(v11, a5);
    }
    else
    {
      dispatch thunk of AnyLocation.get()();
    }
    return swift_release();
  }
  else
  {
    v12 = type metadata accessor for LazyState.Storage(0, *(_QWORD *)(a2 + 16), a3, a4);
    return LazyState.Storage.value.getter(v12, a5);
  }
}

void (*LazyState.wrappedValue.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  LazyState.getValue(forReading:)(1, a2, v10, v11, (uint64_t)v9);
  return LazyState.wrappedValue.modify;
}

void LazyState.wrappedValue.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = *v2;
    v3 = v2[1];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v2[3] + 16))(v2[4], v2[5], v2[2]);
    if (*(_QWORD *)(v3 + *(int *)(v4 + 28)))
      dispatch thunk of AnyLocation.set(_:transaction:)();
    v6 = (void *)v2[4];
    v5 = (void *)v2[5];
    v7 = v2[2];
    v8 = *(void (**)(void *, uint64_t))(v2[3] + 8);
    v8(v6, v7);
    v8(v5, v7);
  }
  else
  {
    if (*(_QWORD *)(v2[1] + *(int *)(*v2 + 28)))
      dispatch thunk of AnyLocation.set(_:transaction:)();
    v6 = (void *)v2[4];
    v5 = (void *)v2[5];
    (*(void (**)(void *, _QWORD))(v2[3] + 8))(v5, v2[2]);
  }
  free(v5);
  free(v6);
  free(v2);
}

uint64_t LazyState.projectedValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v16 - v10;
  LazyState.getValue(forReading:)(0, a1, v12, v13, (uint64_t)&v16 - v10);
  if (*(_QWORD *)(v2 + *(int *)(a1 + 28)))
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v11, v4);
    swift_retain();
    Binding.init(value:location:)();
  }
  else
  {
    static os_log_type_t.fault.getter();
    v14 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
}

uint64_t static LazyState._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized static LazyState._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance LazyState<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static LazyState._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16));
}

uint64_t LazyState<A>.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  return LazyState.init(wrappedValue:)((uint64_t)partial apply for implicit closure #1 in LazyState<A>.init(), v6, a1, v7, a3);
}

void LazyStatePropertyBox.destroy()()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
    StoredLocationBase.invalidate()();
}

uint64_t LazyStatePropertyBox.reset()()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 8))
  {
    StoredLocationBase.invalidate()();
    result = swift_release();
  }
  *(_QWORD *)(v0 + 8) = 0;
  return result;
}

uint64_t LazyStatePropertyBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t WeakValue;
  char v34;
  char v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  uint64_t v45;

  v5 = v4;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for LazyState.Storage(0, v7, a3, a4);
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (void (**)(void))((char *)&v42 - v14);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v26 = (char *)&v42 - v25;
  v27 = *(_QWORD *)(v4 + 8);
  v44 = v27 == 0;
  if (!v27)
  {
    v42 = v24;
    v28 = *(int *)(type metadata accessor for LazyState(0, v7, v22, v23) + 28);
    v43 = a1;
    if (*(_QWORD *)(a1 + v28) && (type metadata accessor for StoredLocation(), (v29 = swift_dynamicCastClass()) != 0))
    {
      *(_QWORD *)(v4 + 8) = v29;
      swift_retain();
      a1 = v43;
    }
    else
    {
      a1 = v43;
      (*(void (**)(void (**)(void), uint64_t, uint64_t))(v45 + 16))(v15, v43, v8);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v30 = v42;
        (*(void (**)(char *, void (**)(void), uint64_t))(v42 + 32))(v26, v15, v7);
      }
      else
      {
        (*v15)();
        swift_release();
        v30 = v42;
      }
      v42 = type metadata accessor for StoredLocation();
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v19, v26, v7);
      type metadata accessor for GraphHost();
      v31 = v30;
      MEMORY[0x18D75C118]();
      v32 = StoredLocation.__allocating_init(initialValue:host:signal:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v7);
      swift_release();
      *(_QWORD *)(v5 + 8) = v32;
    }
  }
  WeakValue = AGGraphGetWeakValue();
  v35 = v34;
  StoredLocationBase.updateValue.getter();
  swift_storeEnumTagMultiPayload();
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v45 + 40))(a1, v11, v8);
  v39 = *(_QWORD *)(v5 + 8);
  if (v39)
  {
    v40 = *(int *)(type metadata accessor for LazyState(0, v7, v37, v38) + 28);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + v40) = v39;
    if (WeakValue)
    {
      v41 = v44;
      if ((v35 & 1) != 0)
        v41 = (v27 == 0) | StoredLocationBase.wasRead.getter();
    }
    else
    {
      v41 = v44;
    }
    return v41 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static LazyState._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for External<()>();
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  AGCreateWeakAttribute();
  v7 = type metadata accessor for LazyStatePropertyBox(0, a4, v5, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyStatePropertyBox<A>, v7);
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  type metadata accessor for LazyState(0, a4, v8, v9);
  return static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)();
}

uint64_t sub_187583118()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in LazyState<A>.init()()
{
  return dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
}

uint64_t sub_18758314C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for LazyState(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  return LazyState.wrappedValue.getter(v5, v6, v7, a4);
}

uint64_t sub_187583184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for LazyState(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  return specialized State.wrappedValue.setter(a1, v5);
}

uint64_t sub_1875831C0()
{
  return 8;
}

_QWORD *sub_1875831CC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for LazyState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for LazyState.Storage(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LazyState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x10uLL)
    v6 = 16;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + v6);
    if (v10 >= 2)
    {
      if (v6 <= 3)
        v11 = v6;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
      v12 = 1;
    }
    else
    {
      v13 = a2[1];
      *v4 = *a2;
      v4[1] = v13;
      swift_retain();
      v12 = 0;
    }
    *((_BYTE *)v4 + v6) = v12;
    *(_QWORD *)(((unint64_t)v4 + v6 + 8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 8) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for LazyState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  if (*(_QWORD *)(v2 + 64) <= 0x10uLL)
    v3 = 16;
  else
    v3 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 >= 2)
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    __asm { BR              X13 }
  }
  if (v4 == 1)
    (*(void (**)(uint64_t))(v2 + 8))(a1);
  else
    swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for LazyState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x10uLL)
    v6 = 16;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    v9 = 1;
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    swift_retain();
    v9 = 0;
  }
  *((_BYTE *)a1 + v6) = v9;
  *(_QWORD *)(((unint64_t)a1 + v6 + 8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 8) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for LazyState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
    v7 = 16;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (a1 != a2)
  {
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 0;
      swift_retain();
    }
  }
  *(_QWORD *)(((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 8) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for LazyState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x10uLL)
    v6 = 16;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    (*(void (**)(_OWORD *, _OWORD *))(v5 + 32))(a1, a2);
    v9 = 1;
  }
  else
  {
    v9 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v6) = v9;
  *(_QWORD *)(((unint64_t)a1 + v6 + 8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 8) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *assignWithTake for LazyState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
    v7 = 16;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (a1 != a2)
  {
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  *(_QWORD *)(((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 8) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyState(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  unint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 <= 0x10)
    v3 = 16;
  if (!a2)
    return 0;
  if (a2 < 0x7FFFFFFF)
    goto LABEL_23;
  v4 = (v3 & 0xFFFFFFFFFFFFFFF8) + 16;
  v5 = v4 & 0xFFFFFFF8;
  v6 = a2 - 2147483645;
  if ((v4 & 0xFFFFFFF8) != 0)
    v6 = 2;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v8 = 1;
  else
    v8 = v7;
  if (v8 == 4)
  {
    v9 = *(_DWORD *)((char *)a1 + v4);
    if (v9)
      goto LABEL_19;
LABEL_23:
    v12 = *(_QWORD *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFF8);
    if (v12 >= 0xFFFFFFFF)
      LODWORD(v12) = -1;
    if ((v12 + 1) >= 2)
      return v12;
    else
      return 0;
  }
  if (v8 != 2)
  {
    v9 = *((unsigned __int8 *)a1 + v4);
    if (v9)
      goto LABEL_19;
    goto LABEL_23;
  }
  v9 = *(unsigned __int16 *)((char *)a1 + v4);
  if (!v9)
    goto LABEL_23;
LABEL_19:
  v11 = v9 - 1;
  if (v5)
  {
    v11 = 0;
    LODWORD(v5) = *a1;
  }
  return (v5 | v11) + 0x7FFFFFFF;
}

void storeEnumTagSinglePayload for LazyState(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  if (a3 < 0x7FFFFFFF)
  {
    v8 = 0u;
  }
  else
  {
    v6 = a3 - 2147483645;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
      v6 = 2;
    if (v6 >= 0x10000)
      v7 = 4;
    else
      v7 = 2;
    if (v6 < 0x100)
      v8 = 1;
    else
      v8 = v7;
  }
  if (a2 <= 0x7FFFFFFE)
    __asm { BR              X11 }
  if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v9 = a2 - 0x7FFFFFFF;
    bzero(a1, (v5 & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v9;
  }
  __asm { BR              X10 }
}

void sub_187583BB4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187583BBC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187583BC4);
}

void sub_187583BDC(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a1)
    *(_QWORD *)((v2 + a2 + 8) & 0xFFFFFFFFFFFFF8) = a1;
}

void sub_187583BE8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t type metadata completion function for LazyState.Storage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LazyState.Storage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
LABEL_18:
    swift_retain();
    return v3;
  }
  v9 = *((unsigned __int8 *)a2 + v5);
  if (v9 >= 2)
  {
    if (v5 <= 3)
      v10 = v5;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 != 1)
  {
    v11 = a2[1];
    *v3 = *a2;
    v3[1] = v11;
    *((_BYTE *)v3 + v5) = 0;
    goto LABEL_18;
  }
  (*(void (**)(uint64_t *))(v4 + 16))(a1);
  *((_BYTE *)v3 + v5) = 1;
  return v3;
}

uint64_t destroy for LazyState.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return (*(uint64_t (**)(void))(v2 + 8))();
    else
      return swift_release();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_187583DE0 + 4 * byte_187C40E87[v5]))();
  }
}

_QWORD *initializeWithCopy for LazyState.Storage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v8 = 1;
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    swift_retain();
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_QWORD *assignWithCopy for LazyState.Storage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 0;
      swift_retain();
    }
  }
  return a1;
}

_OWORD *initializeWithTake for LazyState.Storage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_OWORD *assignWithTake for LazyState.Storage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyState.Storage(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x10uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1875843C4 + 4 * byte_187C40EAA[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for LazyState.Storage(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for LazyState.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x10uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187584600 + 4 * byte_187C40EB8[v3]))();
}

uint64_t type metadata accessor for LazyStatePropertyBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyStatePropertyBox);
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in LazyStatePropertyBox<A>()
{
  return &protocol witness table for LazyState<A>;
}

uint64_t static OnMoveTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t static OnMoveClipBackgroundTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t DynamicViewContent.onMove(perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD *);
  uint64_t v10;
  _QWORD v12[2];

  if (a1)
  {
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ();
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v12[0] = v9;
  v12[1] = v8;
  outlined copy of AppIntentExecutor?(a1);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveTraitKey>);
  MEMORY[0x18D75B4AC](v12, a3, v10, *(_QWORD *)(a4 + 8));
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v9);
}

uint64_t sub_187584748()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t DynamicViewContent.onMove(clipBackground:perform:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];

  v25 = a1;
  v27 = a6;
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveTraitKey>);
  v11 = v10;
  v12 = type metadata accessor for ModifiedContent();
  v26 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v24 - v14;
  if (a2)
  {
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a2;
    *(_QWORD *)(v16 + 24) = a3;
    v17 = thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ()partial apply;
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  v29[0] = v17;
  v29[1] = v16;
  outlined copy of AppIntentExecutor?(a2);
  v18 = *(_QWORD *)(a5 + 8);
  MEMORY[0x18D75B4AC](v29, a4, v11, v18);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v17);
  LOBYTE(v29[0]) = v25 & 1;
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveClipBackgroundTraitKey>);
  v20 = v19;
  v21 = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnMoveTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveTraitKey>);
  v28[0] = v18;
  v28[1] = v21;
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v28);
  MEMORY[0x18D75B4AC](v29, v12, v20, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, v12);
}

uint64_t static IsMoveDisabledTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t View.moveDisabled(_:)()
{
  return View._trait<A>(_:_:)();
}

ValueMetadata *type metadata accessor for OnMoveTraitKey()
{
  return &type metadata for OnMoveTraitKey;
}

ValueMetadata *type metadata accessor for OnMoveClipBackgroundTraitKey()
{
  return &type metadata for OnMoveClipBackgroundTraitKey;
}

ValueMetadata *type metadata accessor for IsMoveDisabledTraitKey()
{
  return &type metadata for IsMoveDisabledTraitKey;
}

uint64_t sub_1875849A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveTraitKey>);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnMoveTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveTraitKey>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E58], v2, v4);
}

uint64_t sub_187584A4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveTraitKey>);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveClipBackgroundTraitKey>);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnMoveTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveTraitKey>);
  v4 = MEMORY[0x1E0CE2E58];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E58], v2, v7);
  v6[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnMoveClipBackgroundTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveClipBackgroundTraitKey>);
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

uint64_t sub_187584B74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsMoveDisabledTraitKey>);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<IsMoveDisabledTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<IsMoveDisabledTraitKey>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for OnMoveDefaultTraitKey()
{
  return &type metadata for OnMoveDefaultTraitKey;
}

Swift::Void __swiftcall MoveInteraction.move(to:)(Swift::Int to)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  _QWORD v21[4];
  Swift::Int_optional v22;

  v3 = type metadata accessor for MoveInteraction();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v7 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v21 - v10;
  v12 = *v1;
  if (*v1)
  {
    v7 = (char *)v1[1];
    swift_retain();
    v22 = IndexSet.integerLessThan(_:)(to);
    if (v22.is_nil || (v13 = __OFADD__(to, 1), ++to, !v13))
    {
      outlined init with copy of MoveInteraction((uint64_t)v1, (uint64_t)v11);
      v14 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = v12;
      *(_QWORD *)(v15 + 24) = v7;
      outlined init with take of MoveInteraction((uint64_t)v11, v15 + v14);
      *(_QWORD *)(v15 + ((v5 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = to;
      swift_retain();
      static Update.enqueueAction(_:)();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v12);
      swift_release();
      return;
    }
    __break(1u);
  }
  outlined init with copy of MoveInteraction((uint64_t)v1, (uint64_t)v7);
  v21[2] = 0;
  v21[3] = 0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v16._object = (void *)0x8000000187BE3AE0;
  v16._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v16);
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x209286E220;
  v18._object = (void *)0xA500000000000000;
  String.append(_:)(v18);
  v21[1] = to;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0xD000000000000021;
  v20._object = (void *)0x8000000187BE3B00;
  String.append(_:)(v20);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t MoveInteraction.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  type metadata accessor for MoveInteraction();
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x6E65746E6F63202CLL;
  v1._object = (void *)0xED0000203A444974;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000018;
}

uint64_t (*ViewTraitCollection.onMove.getter())(uint64_t a1, uint64_t a2)
{
  uint64_t *v0;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v3 & 1) != 0)
    return 0;
  swift_bridgeObjectRetain();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (!v4)
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)(v2 + 24) = v5;
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ArchivableMutation, @in_guaranteed Transaction) -> (@out ());
}

_OWORD *initializeBufferWithCopyOfBuffer for MoveInteraction(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _OWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (*a2)
    {
      v7 = a2[1];
      *(_QWORD *)v4 = *a2;
      *((_QWORD *)v4 + 1) = v7;
      swift_retain();
    }
    else
    {
      *a1 = *(_OWORD *)a2;
    }
    *((_BYTE *)v4 + 16) = *((_BYTE *)a2 + 16);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for IndexSet();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  return v4;
}

uint64_t assignWithCopy for MoveInteraction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    if (v6)
    {
      v8 = a2[1];
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v8;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  v7 = a2[1];
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain();
  swift_release();
LABEL_8:
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v12 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t initializeWithTake for MoveInteraction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for MoveInteraction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    if (v6)
    {
      v8 = a2[1];
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v8;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  v7 = a2[1];
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_release();
LABEL_8:
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v12 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1875853A0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for IndexSet();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v9);
  }
}

char *sub_187585428(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = type metadata accessor for IndexSet();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t outlined init with copy of MoveInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MoveInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187585528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for MoveInteraction();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  v3 = (_QWORD *)(v0 + ((v2 + 32) & ~v2));
  if (*v3)
    swift_release();
  v4 = (char *)v3 + *(int *)(v1 + 24);
  v5 = type metadata accessor for IndexSet();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t outlined init with take of MoveInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MoveInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in MoveInteraction.move(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for MoveInteraction();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return (*(uint64_t (**)(unint64_t, _QWORD))(v0 + 16))(v0 + *(int *)(v1 + 24) + v3, *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t static Group.create(_:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return Group.init(_content:)();
}

uint64_t Group.mapKitContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t destroy for SwiftUIAnySortComparator(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SwiftUIAnySortComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 32, a2 + 32);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 112) = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for SwiftUIAnySortComparator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_assign_boxed_opaque_existential_0(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  v4 = a2[10];
  a1[9] = a2[9];
  a1[10] = v4;
  swift_retain();
  swift_release();
  v5 = a2[12];
  a1[11] = a2[11];
  a1[12] = v5;
  swift_retain();
  swift_release();
  v6 = a2[14];
  a1[13] = a2[13];
  a1[14] = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SwiftUIAnySortComparator(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SwiftUIAnySortComparator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SwiftUIAnySortComparator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SwiftUIAnySortComparator()
{
  return &type metadata for SwiftUIAnySortComparator;
}

uint64_t SwiftUIAnySortComparator.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v9);
  AnyHashable.init<A>(_:)();
  a4[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 32))(boxed_opaque_existential_1, a1, a2);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  a4[9] = (uint64_t)partial apply for closure #1 in SwiftUIAnySortComparator.init<A>(_:);
  a4[10] = v12;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  a4[11] = (uint64_t)partial apply for closure #2 in SwiftUIAnySortComparator.init<A>(_:);
  a4[12] = v13;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  a4[13] = (uint64_t)partial apply for closure #3 in SwiftUIAnySortComparator.init<A>(_:);
  a4[14] = result;
  return result;
}

uint64_t closure #1 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];
  _BYTE v27[32];
  _BYTE v28[32];

  v25 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v24 - v14;
  v16 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v28);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v27);
  swift_dynamicCast();
  outlined init with copy of Any(v25, (uint64_t)v26);
  swift_dynamicCast();
  v21 = dispatch thunk of SortComparator.compare(_:_:)();
  v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v11, AssociatedTypeWitness);
  v22(v15, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, a4);
  return v21;
}

uint64_t closure #2 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  uint64_t *boxed_opaque_existential_1;
  void (*v14)(uint64_t *, char *, uint64_t);
  _OWORD v16[2];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v16 - v10;
  outlined init with take of Any(v12, v16);
  swift_dynamicCast();
  dispatch thunk of SortComparator.order.setter();
  a1[3] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  v14 = *(void (**)(uint64_t *, char *, uint64_t))(v5 + 16);
  v14(boxed_opaque_existential_1, v11, a3);
  v14((uint64_t *)v7, v11, a3);
  AnyHashable.init<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, a3);
}

uint64_t closure #3 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[32];

  v3 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(v6, (uint64_t)v9);
  swift_dynamicCast();
  v7 = dispatch thunk of SortComparator.order.getter() & 1;
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, a2);
  return v7;
}

uint64_t protocol witness for SortComparator.compare(_:_:) in conformance SwiftUIAnySortComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 72))(v2, a1, a2);
}

uint64_t protocol witness for SortComparator.order.getter in conformance SwiftUIAnySortComparator()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 104))(v0) & 1;
}

uint64_t protocol witness for SortComparator.order.setter in conformance SwiftUIAnySortComparator(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD *__return_ptr, uint64_t, uint64_t);
  _QWORD v6[5];

  v2 = v1;
  v3 = a1 & 1;
  v4 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 88);
  swift_retain();
  v4(v6, v2, v3);
  swift_release();
  return outlined assign with take of AnyHashable((uint64_t)v6, v2 + 32);
}

void (*protocol witness for SortComparator.order.modify in conformance SwiftUIAnySortComparator(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  *((_BYTE *)v3 + 48) = (*(uint64_t (**)(uint64_t))(v1 + 104))(v1) & 1;
  return protocol witness for SortComparator.order.modify in conformance SwiftUIAnySortComparator;
}

void protocol witness for SortComparator.order.modify in conformance SwiftUIAnySortComparator(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v3 = *(unsigned __int8 *)(*(_QWORD *)a1 + 48);
  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 88);
  swift_retain();
  v4(v2, v3);
  swift_release();
  outlined assign with take of AnyHashable((uint64_t)v1, v2 + 32);
  free(v1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SwiftUIAnySortComparator()
{
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SwiftUIAnySortComparator()
{
  return AnyHashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SwiftUIAnySortComparator()
{
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SwiftUIAnySortComparator()
{
  JUMPOUT(0x18D75E284);
}

unint64_t lazy protocol witness table accessor for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator;
  if (!lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUIAnySortComparator, &type metadata for SwiftUIAnySortComparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator;
  if (!lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwiftUIAnySortComparator, &type metadata for SwiftUIAnySortComparator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator);
  }
  return result;
}

uint64_t sub_1875860EC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in SwiftUIAnySortComparator.init<A>(_:)(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_187586104()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t *a1, char a2)
{
  uint64_t v2;

  return closure #2 in SwiftUIAnySortComparator.init<A>(_:)(a1, a2 & 1, *(_QWORD *)(v2 + 16));
}

uint64_t sub_187586120()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in SwiftUIAnySortComparator.init<A>(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t View.scrollContentBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a6;
  v20 = a5;
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v19 - v13;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = a2;
  *((_QWORD *)v16 + 3) = a3;
  v17 = v20;
  *((_QWORD *)v16 + 4) = a4;
  *((_QWORD *)v16 + 5) = v17;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v14, v10);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

uint64_t View.scrollContentBackground(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for ScrollContentBackgroundModifier, a3);
}

uint64_t EnvironmentValues.scrollContentBackground.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t closure #1 in View.scrollContentBackground<A>(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[7];
  uint64_t v11;

  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a6;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in View.gaugeIndicatorDotTint<A>(_:), (uint64_t)v10, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE1D58], v7, (uint64_t)&v11);
  v8 = v11;
  result = swift_release();
  *a1 = v8;
  return result;
}

uint64_t sub_187586438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.scrollContentBackground<A>(_:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  return closure #1 in View.scrollContentBackground<A>(_:)(a1, (uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6);
}

uint64_t sub_187586530(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>, MEMORY[0x1E0CE66D8]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>)
  {
    v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>);
  }
}

uint64_t sub_187586608(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t storeEnumTagSinglePayload for ScrollContentBackgroundModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1875866A8 + 4 * byte_187C411C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1875866DC + 4 * byte_187C411C0[v4]))();
}

uint64_t sub_1875866DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875866E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1875866ECLL);
  return result;
}

uint64_t sub_1875866F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187586700);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187586704(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18758670C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollContentBackgroundModifier()
{
  return &type metadata for ScrollContentBackgroundModifier;
}

uint64_t initializeBufferWithCopyOfBuffer for ScrollContentBackground(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollContentBackground(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  return a1;
}

uint64_t assignWithTake for ScrollContentBackground(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollContentBackground(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 10))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollContentBackground(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScrollContentBackgroundModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ScrollContentBackgroundModifier@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t KeyPath;
  uint64_t result;

  v3 = *v1;
  KeyPath = swift_getKeyPath();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = v3;
  *a1 = KeyPath;
  a1[1] = (uint64_t)partial apply for closure #1 in ScrollContentBackgroundModifier.body(content:);
  a1[2] = result;
  return result;
}

uint64_t sub_187586914()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScrollContentBackgroundModifier.body(content:)(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 8) = *(_BYTE *)(v1 + 16);
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
  }
}

ValueMetadata *type metadata accessor for ScrollContentBackgroundKey()
{
  return &type metadata for ScrollContentBackgroundKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<ScrollContentBackgroundModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ScrollContentBackgroundModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>, MEMORY[0x1E0CE66D8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>)
  {
    type metadata accessor for _ViewModifier_Content<ScrollContentBackgroundModifier>();
    type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>);
  }
}

void type metadata accessor for _ViewModifier_Content<ScrollContentBackgroundModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<ScrollContentBackgroundModifier>)
  {
    lazy protocol witness table accessor for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ScrollContentBackgroundModifier>);
  }
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ScrollContentBackgroundKey(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
}

uint64_t dispatch thunk of WidgetBundle.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of WidgetBundle.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t WidgetBundleBodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for WidgetBundleBodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetBundleBodyAccessor<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t closure #1 in WidgetBundleBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, AssociatedTypeWitness);
}

uint64_t type metadata accessor for WidgetBundleBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WidgetBundleBodyAccessor);
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance WidgetBundleBodyAccessor<A>(uint64_t result, uint64_t a2)
{
  return WidgetBundleBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t partial apply for closure #1 in WidgetBundleBodyAccessor.updateBody(of:changed:)()
{
  uint64_t *v0;

  return closure #1 in WidgetBundleBodyAccessor.updateBody(of:changed:)(v0[4], v0[2], v0[3]);
}

uint64_t getEnumTagSinglePayload for PlatformViewControllerRepresentableAdaptor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187586D60 + 4 * byte_187C41320[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PlatformViewControllerRepresentableAdaptor(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t PlatformViewControllerRepresentableAdaptor.resetViewProvider(_:coordinator:destroy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a5 + 24) + 48))(a1, a2, a3, a4, *(_QWORD *)(a5 + 16));
}

uint64_t PlatformViewControllerRepresentableAdaptor._identifiedViewTree(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 80))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t static PlatformViewControllerRepresentableAdaptor.layoutOptions(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t protocol witness for PlatformViewRepresentable.resetViewProvider(_:coordinator:destroy:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PlatformViewControllerRepresentableAdaptor.resetViewProvider(_:coordinator:destroy:)(*a1, a2, a3, a4, a5);
}

uint64_t protocol witness for PlatformViewRepresentable._identifiedViewTree(in:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2)
{
  return PlatformViewControllerRepresentableAdaptor._identifiedViewTree(in:)(*a1, a2);
}

id specialized PlatformViewControllerRepresentableAdaptor.overrideLayoutTraits(_:for:)(int a1, id a2)
{
  id result;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t (*v7)(_BYTE *, _QWORD);
  double *v8;
  uint64_t (*v9)(_BYTE *, _QWORD);
  uint64_t v10;
  _BYTE v11[32];

  result = objc_msgSend(a2, sel_preferredContentSize);
  v5 = v4;
  if (v3 > 0.0)
  {
    v6 = v3;
    v7 = (uint64_t (*)(_BYTE *, _QWORD))_LayoutTraits.idealSize.modify();
    *v8 = v6;
    result = (id)v7(v11, 0);
  }
  if (v5 > 0.0)
  {
    v9 = (uint64_t (*)(_BYTE *, _QWORD))_LayoutTraits.idealSize.modify();
    *(double *)(v10 + 8) = v5;
    return (id)v9(v11, 0);
  }
  return result;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in PlatterButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance PlatterButtonStyle@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  int v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = *v2;
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  if (v4 == 1)
    v8 = static Color.white.getter();
  else
    v8 = static Color.primary.getter();
  v9 = v8;
  result = swift_getKeyPath();
  *(_BYTE *)a2 = v5;
  *(_BYTE *)(a2 + 1) = v6;
  *(_BYTE *)(a2 + 2) = v7;
  *(_BYTE *)(a2 + 3) = v4;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 257;
  *(_QWORD *)(a2 + 32) = result;
  *(_WORD *)(a2 + 40) = 0;
  return result;
}

uint64_t BackgroundShapeStyle._apply(to:)(uint64_t a1, char a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[6];

  if ((a2 & 1) != 0)
    return TintShapeStyle._apply(to:)();
  v3 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v6[4] = closure #1 in static Color.clarityUIButtonBackground.getter;
  v6[5] = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1107296256;
  v6[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
  v6[3] = &block_descriptor_41;
  v4 = _Block_copy(v6);
  v5 = objc_msgSend(v3, sel_initWithDynamicProvider_, v4);
  _Block_release(v4);
  swift_release();
  v6[0] = v5;
  type metadata accessor for UIColor();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (uint64_t (*)(uint64_t))type metadata accessor for UIColor, (uint64_t)&protocol conformance descriptor for UIColor);
  Color.init<A>(provider:)();
  Color.opacity(_:)();
  swift_release();
  Color._apply(to:)();
  return swift_release();
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance BackgroundShapeStyle(uint64_t a1)
{
  char *v1;

  return BackgroundShapeStyle._apply(to:)(a1, *v1);
}

uint64_t storeEnumTagSinglePayload for PlatterButtonStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187587258 + 4 * byte_187C413A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18758728C + 4 * byte_187C413A0[v4]))();
}

uint64_t sub_18758728C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187587294(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18758729CLL);
  return result;
}

uint64_t sub_1875872A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1875872B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1875872B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1875872BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for BackgroundShapeStyle()
{
  return &unk_1E1AD1CC8;
}

uint64_t sub_1875872D8()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatterButtonStyleView<BackgroundShapeStyle> and conformance PlatterButtonStyleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatterButtonStyleView<BackgroundShapeStyle>, (uint64_t)&protocol conformance descriptor for PlatterButtonStyleView<A>);
}

void type metadata accessor for PlatterButtonStyleView<BackgroundShapeStyle>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for PlatterButtonStyleView<BackgroundShapeStyle>)
  {
    v4 = type metadata accessor for PlatterButtonStyleView(0, (uint64_t)&unk_1E1AD1CC8, (uint64_t)&protocol witness table for BackgroundShapeStyle, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for PlatterButtonStyleView<BackgroundShapeStyle>);
  }
}

void static DefaultPickerStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_1875873E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  _QWORD v30[2];
  _QWORD v31[2];
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[32];

  type metadata accessor for _GraphValue();
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v21 = *(_OWORD *)(v0 + 56);
  v22 = *(_OWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 72);
  *(_DWORD *)(v3 - 208) = _GraphValue.value.getter();
  type metadata accessor for ResolvedPicker(255, v1, v2, v7);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v13 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>();
  v23 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  v24 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  v25 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  v14 = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<WheelPickerStyle>, (uint64_t)&type metadata for WheelPickerStyle, (uint64_t)&protocol witness table for WheelPickerStyle);
  type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for DefaultPickerStyle.Body(0, v1, v2, v15);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultPickerStyle.Body<A>, v16);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v3 - 208) = v28;
  *(_DWORD *)(v3 - 200) = v27;
  *(_QWORD *)(v3 - 192) = v26;
  *(_QWORD *)(v3 - 184) = v4;
  *(_QWORD *)(v3 - 176) = v5;
  v17 = v3 - 208;
  *(_OWORD *)(v17 + 40) = v22;
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v3 - 136) = v6;
  *(_DWORD *)(v3 - 128) = v29;
  v18 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v3 - 224) = &protocol witness table for ResolvedPicker<A>;
  *(_QWORD *)(v3 - 216) = v18;
  v19 = MEMORY[0x1E0CE2E70];
  v38[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v3 - 224);
  v38[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>);
  v37[0] = MEMORY[0x18D75FFDC](v19, v9, v38);
  v37[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  v36[0] = MEMORY[0x18D75FFDC](v19, v10, v37);
  v36[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  v35[0] = MEMORY[0x18D75FFDC](v19, v11, v36);
  v35[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  v34[0] = MEMORY[0x18D75FFDC](v19, v12, v35);
  v34[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  v33[0] = MEMORY[0x18D75FFDC](v19, v13, v34);
  v33[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>);
  v32[0] = MEMORY[0x18D75FFDC](v19, v23, v33);
  v32[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>);
  v31[0] = MEMORY[0x18D75FFDC](v19, v24, v32);
  v31[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>);
  v30[0] = MEMORY[0x18D75FFDC](v19, v25, v31);
  v30[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>);
  MEMORY[0x18D75FFDC](v19, v14, v30);
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<HostingConfigurationContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<ListMenuPickerStyle>, (uint64_t)&type metadata for ListMenuPickerStyle, (uint64_t)&protocol witness table for ListMenuPickerStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<HostingConfigurationContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<HostingConfigurationContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<ListMenuPickerStyle>, (uint64_t)&type metadata for ListMenuPickerStyle, (uint64_t)&protocol witness table for ListMenuPickerStyle);
    lazy protocol witness table accessor for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList;
  if (!lazy protocol witness table cache variable for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UseMenuPickerStyleInList, &type metadata for UseMenuPickerStyleInList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<NavigationLinkPickerStyle>, (uint64_t)&type metadata for NavigationLinkPickerStyle, (uint64_t)&protocol witness table for NavigationLinkPickerStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<NavigationLinkPickerStyle>, (uint64_t)&type metadata for NavigationLinkPickerStyle, (uint64_t)&protocol witness table for NavigationLinkPickerStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<NavigationLinkPickerStyle>, (uint64_t)&type metadata for NavigationLinkPickerStyle, (uint64_t)&protocol witness table for NavigationLinkPickerStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<NavigationLinkPickerStyle>, (uint64_t)&type metadata for NavigationLinkPickerStyle, (uint64_t)&protocol witness table for NavigationLinkPickerStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<InlinePickerStyle>, (uint64_t)&type metadata for InlinePickerStyle, (uint64_t)&protocol witness table for InlinePickerStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<MenuPickerStyle>, (uint64_t)&type metadata for MenuPickerStyle, (uint64_t)&protocol witness table for MenuPickerStyle);
    lazy protocol witness table accessor for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar;
  if (!lazy protocol witness table cache variable for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UseMenuPickerStyleInToolbar, &unk_1E1AF4CC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<MenuPickerStyle>, (uint64_t)&type metadata for MenuPickerStyle, (uint64_t)&protocol witness table for MenuPickerStyle);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for DefaultPickerStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DefaultPickerStyle.Body);
}

void static DefaultPickerStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_187587FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[32];

  type metadata accessor for _GraphValue();
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  *(_DWORD *)(v3 - 192) = _GraphValue.value.getter();
  type metadata accessor for ResolvedPicker(255, v2, v1, v6);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>();
  v21 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  v22 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  v23 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  v13 = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<WheelPickerStyle>, (uint64_t)&type metadata for WheelPickerStyle, (uint64_t)&protocol witness table for WheelPickerStyle);
  type metadata accessor for ModifiedContent();
  v15 = type metadata accessor for DefaultPickerStyle.Body(0, v2, v1, v14);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultPickerStyle.Body<A>, v15);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v3 - 192) = v26;
  *(_DWORD *)(v3 - 184) = v25;
  *(_QWORD *)(v3 - 176) = v24;
  *(_QWORD *)(v3 - 168) = v4;
  *(_QWORD *)(v3 - 160) = v5;
  *(_OWORD *)(v3 - 152) = v31;
  *(_QWORD *)(v3 - 136) = v30;
  *(_DWORD *)(v3 - 128) = v29;
  *(_QWORD *)(v3 - 120) = v28;
  *(_BYTE *)(v3 - 112) = v27;
  v16 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v3 - 208) = &protocol witness table for ResolvedPicker<A>;
  *(_QWORD *)(v3 - 200) = v16;
  v17 = MEMORY[0x1E0CE2E70];
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v3 - 208);
  v19 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v3 - 224) = v18;
  *(_QWORD *)(v3 - 216) = v19;
  v39[0] = MEMORY[0x18D75FFDC](v17, v8, v3 - 224);
  v39[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  v38[0] = MEMORY[0x18D75FFDC](v17, v9, v39);
  v38[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  v37[0] = MEMORY[0x18D75FFDC](v17, v10, v38);
  v37[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  v36[0] = MEMORY[0x18D75FFDC](v17, v11, v37);
  v36[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  v35[0] = MEMORY[0x18D75FFDC](v17, v12, v36);
  v35[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>);
  v34[0] = MEMORY[0x18D75FFDC](v17, v21, v35);
  v34[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>);
  v33[0] = MEMORY[0x18D75FFDC](v17, v22, v34);
  v33[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>);
  v32[0] = MEMORY[0x18D75FFDC](v17, v23, v33);
  v32[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>);
  MEMORY[0x18D75FFDC](v17, v13, v32);
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

void DefaultPickerStyle.Body.base.getter()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_187588434(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void DefaultPickerStyle.Body.value.getter(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];
  uint64_t v10;
  int v11;
  uint64_t v12;
  ValueMetadata *v13;
  uint64_t v14;
  _UNKNOWN **v15;
  uint64_t v16;

  v11 = a1;
  v12 = a5;
  v10 = type metadata accessor for PickerStyleConfiguration(0, a2, a3, a4);
  v9[5] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v7);
  v9[2] = (char *)v9 - v8;
  v13 = &type metadata for DefaultPickerStyle;
  v14 = a2;
  v15 = &protocol witness table for DefaultPickerStyle;
  v16 = a3;
  type metadata accessor for _PickerValue();
}

void sub_187588518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  MEMORY[0x1E0C80A78](a1, a2);
  v13 = type metadata accessor for ResolvedPicker(0, v10, v9, v12);
  *(_QWORD *)(v11 - 512) = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  v15 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 488) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  v17 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 448) = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v11 - 536) = (char *)&a9 - v19;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v20 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 424) = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v11 - 520) = (char *)&a9 - v22;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v23 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 400) = *(_QWORD *)(v23 - 8);
  *(_QWORD *)(v11 - 456) = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  *(_QWORD *)(v11 - 496) = (char *)&a9 - v25;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v26 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 376) = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(v11 - 432) = v26;
  MEMORY[0x1E0C80A78](v26, v27);
  *(_QWORD *)(v11 - 464) = (char *)&a9 - v28;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  v29 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 352) = *(_QWORD *)(v29 - 8);
  *(_QWORD *)(v11 - 408) = v29;
  MEMORY[0x1E0C80A78](v29, v30);
  *(_QWORD *)(v11 - 440) = (char *)&a9 - v31;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>();
  v32 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 328) = *(_QWORD *)(v32 - 8);
  *(_QWORD *)(v11 - 384) = v32;
  MEMORY[0x1E0C80A78](v32, v33);
  *(_QWORD *)(v11 - 416) = (char *)&a9 - v34;
  type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  v35 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 320) = *(_QWORD *)(v35 - 8);
  *(_QWORD *)(v11 - 360) = v35;
  MEMORY[0x1E0C80A78](v35, v36);
  *(_QWORD *)(v11 - 392) = (char *)&a9 - v37;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  v38 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 304) = *(_QWORD *)(v38 - 8);
  *(_QWORD *)(v11 - 336) = v38;
  MEMORY[0x1E0C80A78](v38, v39);
  *(_QWORD *)(v11 - 368) = (char *)&a9 - v40;
  type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  v41 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 312) = v41;
  *(_QWORD *)(v11 - 296) = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v42);
  *(_QWORD *)(v11 - 344) = (char *)&a9 - v43;
  DefaultPickerStyle.Body.base.getter();
}

void sub_187588910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 - 528);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4 - 504) + 32))(v5, v1, *(_QWORD *)(v4 - 480));
  v7 = ResolvedPicker.init(configuration:)(v5, v3, v0, v6, v2);
  View.pickerStyle<A, B>(_:in:)(v7, v8);
}

void sub_187588990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 512) + 8))(v3, v0);
  v5 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v4 - 136) = v1;
  *(_QWORD *)(v4 - 128) = v5;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4 - 136);
  v6 = lazy protocol witness table accessor for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList();
  View.pickerStyle<A, B>(_:if:)(v6, (uint64_t)&type metadata for UseMenuPickerStyleInList);
}

void sub_187588A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 488) + 8))(v2, v4);
  *(_BYTE *)(v5 - 120) = 2;
  v6 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v5 - 152) = v0;
  *(_QWORD *)(v5 - 144) = v6;
  MEMORY[0x18D75FFDC](v3, v1, v5 - 152);
  lazy protocol witness table accessor for type GroupedListStyleContext and conformance GroupedListStyleContext();
  View.pickerStyle<A, B>(_:in:)(v5 - 120, v7);
}

void sub_187588AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 448) + 8))(v4, v0);
  *(_BYTE *)(v6 - 120) = v3;
  v7 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v6 - 168) = v1;
  *(_QWORD *)(v6 - 160) = v7;
  MEMORY[0x18D75FFDC](v5, v2, v6 - 168);
  lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  View.pickerStyle<A, B>(_:in:)(v6 - 120, v8);
}

void sub_187588B30()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 424) + 8))(v4, v1);
  *(_BYTE *)(v5 - 120) = v2;
  v6 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v5 - 184) = v0;
  *(_QWORD *)(v5 - 176) = v6;
  MEMORY[0x18D75FFDC](v3, *(_QWORD *)(v5 - 456), v5 - 184);
  lazy protocol witness table accessor for type SidebarListStyleContext and conformance SidebarListStyleContext();
  View.pickerStyle<A, B>(_:in:)(v5 - 120, v7);
}

void sub_187588BB8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 400) + 8))(v4, v1);
  *(_BYTE *)(v5 - 120) = v2;
  v6 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v5 - 200) = v0;
  *(_QWORD *)(v5 - 192) = v6;
  MEMORY[0x18D75FFDC](v3, *(_QWORD *)(v5 - 432), v5 - 200);
  lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
  View.pickerStyle<A, B>(_:in:)(v5 - 120, v7);
}

void sub_187588C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 376) + 8))(v3, v1);
  v5 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v4 - 216) = v0;
  *(_QWORD *)(v4 - 208) = v5;
  v6 = MEMORY[0x18D75FFDC](v2, *(_QWORD *)(v4 - 408), v4 - 216);
  View.pickerStyle<A, B>(_:in:)(v6, v7);
}

void sub_187588CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 352) + 8))(v2, v1);
  v5 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>);
  *(_QWORD *)(v4 - 232) = v0;
  *(_QWORD *)(v4 - 224) = v5;
  MEMORY[0x18D75FFDC](v3, *(_QWORD *)(v4 - 384), v4 - 232);
  v6 = lazy protocol witness table accessor for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar();
  View.pickerStyle<A, B>(_:if:)(v6, (uint64_t)&unk_1E1AF4CC0);
}

void sub_187588D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 328) + 8))(v2, v1);
  v5 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v4 - 248) = v0;
  *(_QWORD *)(v4 - 240) = v5;
  v6 = MEMORY[0x18D75FFDC](v3, *(_QWORD *)(v4 - 360), v4 - 248);
  View.pickerStyle<A, B>(_:in:)(v6, v7);
}

void sub_187588DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 320) + 8))(v2, v1);
  v5 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v4 - 264) = v0;
  *(_QWORD *)(v4 - 256) = v5;
  v6 = MEMORY[0x18D75FFDC](v3, *(_QWORD *)(v4 - 336), v4 - 264);
  View.pickerStyle<A, B>(_:if:)(v6, MEMORY[0x1E0CE4C18]);
}

uint64_t sub_187588E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 304) + 8))(v3, v1);
  v6 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>);
  *(_QWORD *)(v5 - 280) = v0;
  *(_QWORD *)(v5 - 272) = v6;
  v7 = *(_QWORD *)(v5 - 312);
  v8 = MEMORY[0x18D75FFDC](v4, v7, v5 - 280);
  View.pickerStyle<A>(_:)(v8, v7, (uint64_t)&type metadata for WheelPickerStyle, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 296) + 8))(v2, v7);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DefaultPickerStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  type metadata accessor for ResolvedPicker(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<WheelPickerStyle>, (uint64_t)&type metadata for WheelPickerStyle, (uint64_t)&protocol witness table for WheelPickerStyle);
  v4 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

void protocol witness for Rule.value.getter in conformance DefaultPickerStyle.Body<A>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int *v3;

  DefaultPickerStyle.Body.value.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

ValueMetadata *type metadata accessor for DefaultPickerStyle()
{
  return &type metadata for DefaultPickerStyle;
}

void *type metadata accessor for UseMenuPickerStyleInToolbar()
{
  return &unk_1E1AF4CC0;
}

ValueMetadata *type metadata accessor for UseMenuPickerStyleInList()
{
  return &type metadata for UseMenuPickerStyleInList;
}

void base witness table accessor for _AttributeBody in DefaultPickerStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UseMenuPickerStyleInList()
{
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
    || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
  {
    return static SemanticFeature.isEnabled.getter() & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UseMenuPickerStyleInToolbar()
{
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
    return static SemanticFeature.isEnabled.getter() & 1;
  else
    return 0;
}

uint64_t DismissImmersiveSpaceAction.callAsFunction()()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

void EnvironmentValues.dismissImmersiveSpace.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1875892C8()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1875892EC()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for DismissImmersiveSpaceAction()
{
  return &type metadata for DismissImmersiveSpaceAction;
}

uint64_t PresentationSizing.proposedSize(for:context:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  __int128 v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  _BYTE v27[8];
  uint64_t v28;

  v16 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *((_BYTE *)a2 + 32);
  v10 = *((_QWORD *)a2 + 5);
  v11 = *((_BYTE *)a2 + 48);
  v12 = *((_QWORD *)a2 + 7);
  v15 = *((_BYTE *)a2 + 64);
  MEMORY[0x18D760234]();
  v28 = *(_QWORD *)(a1 + 8);
  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  v18 = v16;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v25 = v15;
  v26 = *(__int128 *)((char *)a2 + 72);
  v13 = (*(uint64_t (**)(_BYTE *, __int128 *, uint64_t, uint64_t))(a4 + 16))(v27, &v18, a3, a4);
  outlined destroy of weak FallbackResponderProvider?((uint64_t)v27);
  return v13;
}

{
  return PresentationSizing.proposedSize(for:context:)(a1, a2, a3, a4);
}

uint64_t PresentationSizing.proposedSize(for:context:)()
{
  static Log.internalWarning(_:)();
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

{
  static Log.internalWarning(_:)();
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

void PresentationSizing.sizingOptions(context:)(_QWORD *a1@<X8>)
{
  PresentationSizing.sizingOptions(context:)(a1);
}

{
  *a1 = 0;
}

unint64_t implicit closure #1 in PresentationSizing.proposedSize(for:context:)()
{
  return 0xD000000000000077;
}

uint64_t AutomaticPresentationSizing.proposedSize(for:context:)()
{
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

void static PresentationSizingOptions.minimum.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

double PresentationSubview.sizeThatFits(_:)()
{
  uint64_t v0;
  double v1;
  double v2;

  if (!MEMORY[0x18D760234](v0))
    return 0.0;
  swift_getObjectType();
  _ProposedSize.init(_:)();
  ViewRendererHost.sizeThatFits(_:)();
  v2 = v1;
  swift_unknownObjectRelease();
  return v2;
}

double PresentationSizingRoot.sizeThatFits(_:)(uint64_t a1, char a2)
{
  uint64_t v2;
  double v5;
  double v6;

  if (MEMORY[0x18D760234](v2))
  {
    swift_getObjectType();
    _ProposedSize.init(_:)();
    ViewRendererHost.sizeThatFits(_:)();
    v6 = v5;
    swift_unknownObjectRelease();
  }
  else if ((a2 & 1) != 0)
  {
    return 10.0;
  }
  else
  {
    return *(double *)&a1;
  }
  return v6;
}

uint64_t PresentationSizing.sticky(horizontal:vertical:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  char v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v9 = *(_QWORD *)(a3 - 8);
  v11.n128_f64[0] = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v14 & 1) != 0)
    v15 = 2;
  else
    v15 = 0;
  v16 = v15 | v10;
  (*(void (**)(char *, uint64_t, __n128))(v9 + 16))(v13, v5, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a5, v13, a3);
  result = type metadata accessor for StickyPresentationSizing(0, a3, a4, v17);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = v16;
  return result;
}

uint64_t PresentationSizing.fitted(horizontal:vertical:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v8 = a2;
  v9 = a1;
  v11 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))(v14, v5, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v14, a3);
  result = type metadata accessor for _FittedPresentationSizing(0, a3, a4, v15);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = v9;
  *(_BYTE *)(a5 + *(int *)(result + 40)) = v8;
  return result;
}

uint64_t FormPresentationSizing.proposedSize(for:context:)()
{
  return FormPresentationSizing.proposedSize(for:context:)();
}

{
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

uint64_t SharedBuiltinSheetMetrics.proposedSize.getter()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  int v3;
  double v4;
  int v5;
  double v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(double *)(v0 + 48);
  v3 = *(unsigned __int8 *)(v0 + 56);
  v4 = *(double *)(v0 + 64);
  v5 = *(unsigned __int8 *)(v0 + 72);
  if (*(_BYTE *)v0)
  {
    if (*(_BYTE *)v0 != 1)
    {
      *(double *)&result = COERCE_DOUBLE(static ProposedViewSize.unspecified.getter());
      return result;
    }
    _UISheetPageSize();
  }
  else
  {
    v7 = objc_msgSend(*(id *)(v0 + 8), sel_window);
    if (!v7 || (v8 = v7, v9 = objc_msgSend(v7, sel_screen), v8, !v9))
      v9 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
    v10 = (void *)objc_opt_self();
    objc_msgSend(v9, sel_bounds);
    v12 = v11;
    v14 = v13;

    objc_msgSend(v10, sel_defaultFormSheetSizeForScreenSize_, v12, v14);
  }
  v15 = 0.0;
  v16 = v2;
  v17 = 240.0;
  if (v3)
    v18 = 240.0;
  else
    v18 = v2;
  if (!v5)
    v17 = v4;
  v19 = v18 + v17;
  if (v3)
    v16 = 240.0;
  if (v1 == 2)
    v15 = v16;
  if (v1 == 3)
    v15 = v19;
  *(double *)&result = v6 + v15;
  return result;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing(uint64_t a1)
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing(a1);
}

{
  uint64_t v2;
  _BYTE v4[8];
  uint64_t v5;

  MEMORY[0x18D760234]();
  v5 = *(_QWORD *)(a1 + 8);
  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  v2 = SharedBuiltinSheetMetrics.proposedSize.getter();
  outlined destroy of weak FallbackResponderProvider?((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing()
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing();
}

{
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

uint64_t PagePresentationSizing.proposedSize(for:context:)()
{
  return FormPresentationSizing.proposedSize(for:context:)();
}

uint64_t PagePresentationSizing.sizingOptions(context:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AnyInterfaceIdiom.accepts<A>(_:)();
  v3 = 2;
  if ((result & 1) != 0)
    v3 = 4;
  *a1 = v3;
  return result;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance PagePresentationSizing(uint64_t a1)
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing(a1);
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance PagePresentationSizing()
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing();
}

uint64_t protocol witness for PresentationSizing.sizingOptions(context:) in conformance PagePresentationSizing@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AnyInterfaceIdiom.accepts<A>(_:)();
  v3 = 2;
  if ((result & 1) != 0)
    v3 = 4;
  *a1 = v3;
  return result;
}

uint64_t FittedPresentationSizing.proposedSize(for:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  if (*(unsigned __int8 *)(a2 + 32))
    return 0;
  else
    return v2;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FittedPresentationSizing(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _BYTE v7[8];
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(unsigned __int8 *)(a2 + 32);
  MEMORY[0x18D760234]();
  v8 = *(_QWORD *)(a1 + 8);
  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  if (v4)
    v5 = 0;
  else
    v5 = v3;
  outlined destroy of weak FallbackResponderProvider?((uint64_t)v7);
  return v5;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  if (*(unsigned __int8 *)(a2 + 32))
    return 0;
  else
    return v2;
}

uint64_t _FittedPresentationSizing.proposedSize(for:context:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;

  v5 = a2[3];
  v6 = *((_BYTE *)a2 + 32);
  v7 = a2[5];
  v8 = *((_BYTE *)a2 + 48);
  v9 = a2[7];
  v10 = *((_BYTE *)a2 + 64);
  v12 = *a2;
  v13 = *(_OWORD *)(a2 + 1);
  v14 = v5;
  v15 = v6;
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  v20 = *(_OWORD *)(a2 + 9);
  result = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(a3 + 24) + 16))(a1, &v12, *(_QWORD *)(a3 + 16));
  if (*(_BYTE *)(v3 + *(int *)(a3 + 36)))
    return 0;
  return result;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance _FittedPresentationSizing<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance _FittedPresentationSizing<A>(a1, a2, a3, a4, (uint64_t (*)(void))_FittedPresentationSizing.proposedSize(for:context:));
}

uint64_t protocol witness for PresentationSizing.sizingOptions(context:) in conformance _FittedPresentationSizing<A>(uint64_t *a1, uint64_t a2)
{
  return _FittedPresentationSizing.sizingOptions(context:)(a1, a2);
}

uint64_t View.presentationSizing<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  char *v13;
  uint64_t v15;

  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = a3;
  *((_QWORD *)v13 + 4) = a4;
  *((_QWORD *)v13 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v13[v12], (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t sub_18758A0E4()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationSizing<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9[5];

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v9[3] = v3;
  v9[4] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(boxed_opaque_existential_1, v6, v3);
  return outlined assign with take of PresentationSizing?((uint64_t)v9, a1 + 96);
}

uint64_t StickyPresentationSizing.proposedSize(for:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  double v14;
  char v15;
  double v16;
  _QWORD v18[4];
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;

  v3 = *(_QWORD *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_BYTE *)(a2 + 64);
  v18[0] = *(_QWORD *)a2;
  v18[1] = v3;
  *(double *)&v18[2] = v5;
  v18[3] = v4;
  v19 = v6;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = *(_OWORD *)(a2 + 72);
  v11 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)(a3 + 24) + 16))(a1, v18, *(_QWORD *)(a3 + 16));
  v13 = v11;
  if ((v6 & 1) == 0)
  {
    LOBYTE(v18[0]) = v12 & 1;
    v14 = PresentationSizingRoot.sizeThatFits(_:)(v11, v12 & 1);
    v15 = Axis.Set.contains(_:)();
    if (v14 < v5)
      v16 = v5;
    else
      v16 = v14;
    if ((v15 & 1) != 0)
      v13 = *(_QWORD *)&v16;
    Axis.Set.contains(_:)();
  }
  return v13;
}

uint64_t _FittedPresentationSizing.sizingOptions(context:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;

  v2 = a1[3];
  v3 = *((_BYTE *)a1 + 32);
  v4 = a1[5];
  v5 = *((_BYTE *)a1 + 48);
  v6 = a1[7];
  v7 = *((_BYTE *)a1 + 64);
  v9 = *a1;
  v10 = *(_OWORD *)(a1 + 1);
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  v17 = *(_OWORD *)(a1 + 9);
  return (*(uint64_t (**)(uint64_t *, _QWORD))(*(_QWORD *)(a2 + 24) + 24))(&v9, *(_QWORD *)(a2 + 16));
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance StickyPresentationSizing<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance _FittedPresentationSizing<A>(a1, a2, a3, a4, (uint64_t (*)(void))StickyPresentationSizing.proposedSize(for:context:));
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance _FittedPresentationSizing<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t FormPresentationSizing.sizingOptions(context:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AnyInterfaceIdiom.accepts<A>(_:)();
  if ((result & 1) != 0)
  {
    v3 = 4;
  }
  else
  {
    result = AnyInterfaceIdiom.accepts<A>(_:)();
    v3 = 2;
    if ((result & 1) != 0)
      v3 = 4;
  }
  *a1 = v3;
  return result;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance AutomaticPresentationSizing(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[8];
  uint64_t v5;

  MEMORY[0x18D760234]();
  v5 = *(_QWORD *)(a1 + 8);
  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  v2 = SharedBuiltinSheetMetrics.proposedSize.getter();
  outlined destroy of weak FallbackResponderProvider?((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance AutomaticPresentationSizing()
{
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

uint64_t View.presentationSizeBehavior<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t FormPresentationSizeBehavior.proposedSize(for:)()
{
  return 0x4082C00000000000;
}

uint64_t protocol witness for PresentationSizeBehavior.proposedSize(for:) in conformance FormPresentationSizeBehavior()
{
  return 0x4082C00000000000;
}

uint64_t dispatch thunk of PresentationSizing.proposedSize(for:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PresentationSizing.sizingOptions(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for PresentationSizingOptions()
{
  return &type metadata for PresentationSizingOptions;
}

ValueMetadata *type metadata accessor for PresentationSubview()
{
  return &type metadata for PresentationSubview;
}

ValueMetadata *type metadata accessor for PresentationSizingRoot()
{
  return &type metadata for PresentationSizingRoot;
}

uint64_t initializeWithCopy for PresentationSizingContext(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for PresentationSizingContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for PresentationSizingContext(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for PresentationSizingContext()
{
  return &type metadata for PresentationSizingContext;
}

ValueMetadata *type metadata accessor for FormPresentationSizing()
{
  return &type metadata for FormPresentationSizing;
}

ValueMetadata *type metadata accessor for PagePresentationSizing()
{
  return &type metadata for PagePresentationSizing;
}

ValueMetadata *type metadata accessor for FittedPresentationSizing()
{
  return &type metadata for FittedPresentationSizing;
}

ValueMetadata *type metadata accessor for AutomaticPresentationSizing()
{
  return &type metadata for AutomaticPresentationSizing;
}

uint64_t dispatch thunk of PresentationSizeBehavior.proposedSize(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t initializeWithCopy for PresentationSizeBehaviorContext(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PresentationSizeBehaviorContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v7;
  return a1;
}

uint64_t assignWithTake for PresentationSizeBehaviorContext(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for PresentationSizeBehaviorContext()
{
  return &type metadata for PresentationSizeBehaviorContext;
}

ValueMetadata *type metadata accessor for FormPresentationSizeBehavior()
{
  return &type metadata for FormPresentationSizeBehavior;
}

_UNKNOWN **sub_18758AA08()
{
  return &protocol witness table for StickyPresentationSizing<A>;
}

_UNKNOWN **sub_18758AA14()
{
  return &protocol witness table for _FittedPresentationSizing<A>;
}

uint64_t sub_18758AA20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>)
  {
    v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>);
  }
}

uint64_t sub_18758AADC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t type metadata completion function for _FittedPresentationSizing()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for _FittedPresentationSizing(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  _BYTE *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 2) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    v11 = (char *)v4 + v6;
    *v11 = *((_BYTE *)a2 + v6);
    v11[1] = *((_BYTE *)a2 + v6 + 1);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for _FittedPresentationSizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithCopy for _FittedPresentationSizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t initializeWithTake for _FittedPresentationSizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithTake for _FittedPresentationSizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_BYTE *)(v6 + a1);
  v8 = (_BYTE *)(v6 + a2);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _FittedPresentationSizing(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 2;
  v10 = 8 * (v7 + 2);
  if ((v7 + 2) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -2)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_18758AE18 + 4 * byte_187C415D0[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _FittedPresentationSizing(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 2;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -2)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 2);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for _FittedPresentationSizing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _FittedPresentationSizing);
}

uint64_t type metadata completion function for StickyPresentationSizing()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StickyPresentationSizing(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64) + 1;
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18758B19C + 4 * byte_187C415DE[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for StickyPresentationSizing(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64) + 1;
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) != -1)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64) + 1);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for StickyPresentationSizing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StickyPresentationSizing);
}

void *type metadata accessor for PresentationSizingOptions.Options()
{
  return &unk_1E1AEB2F0;
}

unint64_t lazy protocol witness table accessor for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options;
  if (!lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationSizingOptions.Options, &unk_1E1AEB2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options;
  if (!lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationSizingOptions.Options, &unk_1E1AEB2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options;
  if (!lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationSizingOptions.Options, &unk_1E1AEB2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options;
  if (!lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationSizingOptions.Options, &unk_1E1AEB2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options);
  }
  return result;
}

_QWORD *specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v1, v3);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v21 = *(_BYTE *)(v1 + 72);
  v20 = *(_QWORD *)(v1 + 80);
  v19 = *(_BYTE *)(v1 + 88);
  v18 = *(_QWORD *)(v1 + 96);
  v17 = *(_BYTE *)(v1 + 104);
  v15 = *(_QWORD *)(v1 + 120);
  v16 = *(_QWORD *)(v1 + 112);
  v23 = *(_QWORD *)(v1 + 40);
  v5 = v23;
  v24 = v6;
  v25 = v7;
  v26 = v8;
  v27 = v21;
  v28 = v20;
  v29 = v19;
  v30 = v18;
  v31 = v17;
  v32 = v16;
  v33 = v15;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v4 + 16))(a1, &v23, v3, v4);
  LOBYTE(v23) = v10 & 1;
  LOBYTE(v22) = v11 & 1;
  PresentationSizingRoot.sizeThatFits(_:)(v9, v10 & 1);
  v12 = *(_QWORD *)(v1 + 24);
  v13 = *(_QWORD *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v1, v12);
  v23 = v5;
  v24 = v6;
  v25 = v7;
  v26 = v8;
  v27 = v21;
  v28 = v20;
  v29 = v19;
  v30 = v18;
  v31 = v17;
  v32 = v16;
  v33 = v15;
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v13 + 24))(&v22, &v23, v12, v13);
}

uint64_t outlined assign with take of PresentationSizing?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for PresentationSizing?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PresentationSizing?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PresentationSizing?)
  {
    type metadata accessor for PresentationSizing();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?);
  }
}

unint64_t type metadata accessor for PresentationSizing()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PresentationSizing;
  if (!lazy cache variable for type metadata for PresentationSizing)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing);
  }
  return result;
}

void destroy for SheetSizing(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

}

uint64_t initializeWithCopy for SheetSizing(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  id v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v7 = v5;
  return a1;
}

uint64_t assignWithCopy for SheetSizing(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  v9 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for SheetSizing(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

ValueMetadata *type metadata accessor for SheetSizing()
{
  return &type metadata for SheetSizing;
}

void EnvironmentValues.withCurrentWindow.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18758B964()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18758B988()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for WithCurrentWindowAction()
{
  return &type metadata for WithCurrentWindowAction;
}

uint64_t type metadata accessor for ControlWidgetTemplateGraph()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ControlWidgetTemplateGraph;
  if (!type metadata singleton initialization cache for ControlWidgetTemplateGraph)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ControlWidgetTemplateGraph()
{
  return swift_initClassMetadata2();
}

uint64_t closure #1 in ControlWidgetTemplateGraph.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  _BYTE v22[12];
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 12];
  v12 = *v11;
  v13 = *((_DWORD *)v11 + 2);
  v14 = v11[2];
  v15 = *((_DWORD *)v11 + 14);
  (*(void (**)(char *, double))(v7 + 16))(v10, v8);
  v24 = a3;
  v16 = type metadata accessor for Attribute();
  v21 = *(_OWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 32);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)closure #1 in Attribute.init(value:)partial apply, (uint64_t)v23, a3, MEMORY[0x1E0DEDCE8], v16, MEMORY[0x1E0DEDD18], v19);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a3);
  _GraphValue.init(_:)();
  v25 = v12;
  v26 = v13;
  v27 = v14;
  v28 = v17;
  v29 = v18;
  v30 = v21;
  v31 = v15;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a4 + 48))(v22, &v25, a3, a4);
}

Swift::Void __swiftcall ControlWidgetTemplateGraph.instantiateOutputs()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void (*v4)(uint64_t *, _QWORD);
  uint64_t *v5;
  uint64_t v6;

  v1 = v0;
  v2 = (void *)GraphHost.rootSubgraph.getter();
  AGGraphClearUpdate();
  v3 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in ControlWidgetTemplateGraph.instantiateOutputs()(v1);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  v4 = (void (*)(uint64_t *, _QWORD))GraphHost.hostPreferenceValues.modify();
  *v5 = AGCreateWeakAttribute();
  v4(&v6, 0);
}

uint64_t closure #1 in ControlWidgetTemplateGraph.instantiateOutputs()(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void (*v12)(uint64_t *);
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  swift_beginAccess();
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_DWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_DWORD *)(a1 + 96);
  v6 = *(_DWORD *)(a1 + 100);
  v8 = *(_DWORD *)(a1 + 104);
  v7 = *(_DWORD *)(a1 + 108);
  v9 = *(_QWORD *)(a1 + 112);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_OWORD *)(a1 + 24);
  v25 = HIDWORD(v2);
  v26 = v3;
  v27 = v4;
  v28 = v5;
  v29 = v6;
  v30 = v8;
  v31 = v7;
  v32 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  GraphHost.Data.$hostPreferenceKeys.getter();
  PreferencesInputs.init(hostKeys:)();
  v10 = v20;
  v11 = v21;
  v20 = v2;
  LODWORD(v21) = v3;
  *((_QWORD *)&v21 + 1) = v4;
  *(_QWORD *)&v22 = __PAIR64__(v6, v5);
  *((_QWORD *)&v22 + 1) = __PAIR64__(v7, v8);
  *(_QWORD *)&v23 = v9;
  *((_QWORD *)&v23 + 1) = v10;
  v24 = v11;
  type metadata accessor for _AnyPreferenceKey<HostPreferencesKey>();
  lazy protocol witness table accessor for type _AnyPreferenceKey<HostPreferencesKey> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  v12 = *(void (**)(uint64_t *))(a1 + 176);
  v14 = v2;
  v15 = v3;
  v16 = v4;
  v17 = v22;
  v18 = v23;
  v19 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v12(&v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return swift_release();
}

Swift::Void __swiftcall ControlWidgetTemplateGraph.uninstantiateOutputs()()
{
  void (*v0)(uint64_t *, _QWORD);
  uint64_t *v1;
  uint64_t v2;

  v0 = (void (*)(uint64_t *, _QWORD))GraphHost.hostPreferenceValues.modify();
  *v1 = AGCreateWeakAttribute();
  v0(&v2, 0);
}

void ControlWidgetTemplateGraph.__allocating_init(data:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ControlWidgetTemplateGraph.__ivar_destroyer()
{
  return swift_release();
}

uint64_t ControlWidgetTemplateGraph.__deallocating_deinit()
{
  GraphHost.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ControlWidgetTemplateGraph()
{
  return type metadata accessor for ControlWidgetTemplateGraph();
}

void type metadata accessor for _AnyPreferenceKey<HostPreferencesKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<HostPreferencesKey>)
  {
    v0 = type metadata accessor for _AnyPreferenceKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<HostPreferencesKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<HostPreferencesKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<HostPreferencesKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<HostPreferencesKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<HostPreferencesKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<HostPreferencesKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t specialized ControlWidgetTemplateGraph.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  double v9;
  char *v10;
  void (*v11)(char *, double);
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v28;
  void *v29;
  void *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  char v46[16];
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;

  v4 = v3;
  v45 = a1;
  v68 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](a1, a1);
  v10 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(char *, double))(v7 + 16);
  v11(v10, v9);
  v12 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, a2);
  *(_QWORD *)(v4 + 176) = partial apply for closure #1 in ControlWidgetTemplateGraph.init<A>(_:);
  *(_QWORD *)(v4 + 184) = v13;
  swift_retain();
  GraphHost.Data.init()();
  v14 = v48;
  v29 = v49;
  v30 = v50;
  v43 = v52;
  v44 = v51;
  v41 = v54;
  v42 = v53;
  v40 = v55;
  v39 = v56;
  v38 = v57;
  v37 = v58;
  v36 = v59;
  v15 = v60;
  v35 = v61;
  v16 = v62;
  v34 = v63;
  v33 = v64;
  v32 = v65;
  v31 = v66;
  v17 = v67;
  v18 = (void *)GraphHost.Data.globalSubgraph.getter();
  AGSubgraphSetCurrent();

  ((void (*)(char *, uint64_t, uint64_t))v11)(v10, v45, a2);
  v47 = a2;
  v19 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v46, a2, MEMORY[0x1E0DEDCE8], v19, MEMORY[0x1E0DEDD18], v20);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a2);
  *(_DWORD *)(v4 + 192) = (_DWORD)v48;
  swift_release();
  v21 = v29;
  v48 = v14;
  v49 = v29;
  v22 = v30;
  v50 = v30;
  v51 = v44;
  v52 = v43;
  v53 = v42;
  v54 = v41;
  v55 = v40;
  v56 = v39;
  v57 = v38;
  v58 = v37;
  v59 = v36;
  v60 = v15;
  v61 = v35;
  v62 = v16;
  v63 = v34;
  v64 = v33;
  v65 = v32;
  v66 = v31;
  v67 = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = v14;
  v24 = v21;
  v25 = v22;
  v26 = GraphHost.init(data:)();
  AGSubgraphSetCurrent();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return v26;
}

uint64_t specialized ControlWidgetTemplateGraph.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return specialized ControlWidgetTemplateGraph.init<A>(_:)(a1, a2, a3);
}

uint64_t sub_18758C3B4()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ControlWidgetTemplateGraph.init<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return closure #1 in ControlWidgetTemplateGraph.init<A>(_:)(a1, v1 + ((v3 + 32) & ~v3), v2, *(_QWORD *)(v1 + 24));
}

void View.clarityUIIdiom()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t sub_18758C43C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ClarityUIInterfaceIdiomModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for ClarityUIInterfaceIdiomModifier()
{
  return &type metadata for ClarityUIInterfaceIdiomModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ClarityUIInterfaceIdiomModifier()
{
  return &protocol witness table for ClarityUIInterfaceIdiomModifier;
}

uint64_t static ClarityUIInterfaceIdiomModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, __int128 *))
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v6 = *((_DWORD *)a2 + 6);
  v5 = *((_DWORD *)a2 + 7);
  v7 = *((_DWORD *)a2 + 8);
  v8 = *((_DWORD *)a2 + 9);
  v9 = a2[5];
  v10 = a2[6];
  v18 = *((_DWORD *)a2 + 15);
  v19 = *((_DWORD *)a2 + 14);
  v16 = *((_DWORD *)a2 + 17);
  v17 = *((_DWORD *)a2 + 16);
  v14 = *((_DWORD *)a2 + 19);
  v15 = *((_DWORD *)a2 + 18);
  v13 = *((_DWORD *)a2 + 20);
  v30 = *a2;
  v31 = v3;
  v32 = v4;
  *(_QWORD *)&v33 = __PAIR64__(v5, v6);
  *((_QWORD *)&v33 + 1) = __PAIR64__(v8, v7);
  v34 = v9;
  v35 = v10;
  *(_QWORD *)&v36 = __PAIR64__(v18, v19);
  *((_QWORD *)&v36 + 1) = __PAIR64__(v16, v17);
  v37 = __PAIR64__(v14, v15);
  v38 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AnyInterfaceIdiom.init<A>(_:)();
  v29 = v21;
  PropertyList.subscript.setter();
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ClarityUIEnvironment and conformance ClarityUIEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  *(_QWORD *)&v21 = v30;
  DWORD2(v21) = v3;
  v22 = v4;
  v23 = v33;
  v24 = v9;
  v25 = v10;
  v26 = v36;
  v27 = __PAIR64__(v14, v15);
  v28 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRetain();
  a3(v11, &v21);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance ClarityUIInterfaceIdiomModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double ClarityUIEnvironment.value.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  _BYTE v8[208];
  _QWORD v9[12];
  char v10;
  char v11;
  __int128 v12;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *(_QWORD *)&v12 = v4;
  *((_QWORD *)&v12 + 1) = v3;
  v9[0] = v4;
  v9[1] = v3;
  swift_retain();
  swift_retain();
  EnvironmentValues.dynamicTypeSize.getter();
  if (v8[0] <= 6u)
  {
    LOBYTE(v9[0]) = 7;
    EnvironmentValues.dynamicTypeSize.setter();
  }
  if (one-time initialization token for dividerThickness != -1)
    swift_once();
  EnvironmentValues.dividerThickness.setter();
  v5 = *((_QWORD *)&v12 + 1);
  type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (*((_QWORD *)&v12 + 1))
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v10 = 2;
  outlined init with copy of ScrollEnvironmentProperties((int *)v9, (uint64_t)v8);
  type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v9);
  v6 = *((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v11 = 2;
  outlined init with copy of ScrollEnvironmentProperties((int *)v9, (uint64_t)v8);
  swift_retain();
  PropertyList.subscript.setter();
  if (v6)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v9);
  result = *(double *)&v12;
  *a1 = v12;
  return result;
}

double protocol witness for Rule.value.getter in conformance ClarityUIEnvironment@<D0>(_OWORD *a1@<X8>)
{
  return ClarityUIEnvironment.value.getter(a1);
}

unint64_t lazy protocol witness table accessor for type ClarityUIEnvironment and conformance ClarityUIEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClarityUIEnvironment and conformance ClarityUIEnvironment;
  if (!lazy protocol witness table cache variable for type ClarityUIEnvironment and conformance ClarityUIEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ClarityUIEnvironment, &unk_1E1AD2628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIEnvironment and conformance ClarityUIEnvironment);
  }
  return result;
}

void *type metadata accessor for ClarityUIEnvironment()
{
  return &unk_1E1AD2628;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AlwaysOnTimelinesKey(uint64_t a1, void (*a2)(unint64_t *__return_ptr))
{
  unint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance AlwaysOnFrameSpecifier(void **a1, void **a2)
{
  void *v2;
  void *v3;
  _BOOL8 result;
  BOOL v5;
  id v6;
  id v7;
  char v8;

  v2 = *a1;
  v3 = *a2;
  result = ((unint64_t)*a1 | (unint64_t)*a2) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for BLSAlwaysOnFrameSpecifier);
    v6 = v2;
    v7 = v3;
    v8 = static NSObject.== infix(_:_:)();

    return v8 & 1;
  }
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance AlwaysOnInvalidationKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of TimelineInvalidationAction((uint64_t)&static AlwaysOnInvalidationKey.defaultValue, a1);
}

uint64_t EnvironmentValues.alwaysOnFrameSpecifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnFrameSpecifier> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnFrameSpecifier> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.alwaysOnInvalidationHandler.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.alwaysOnInvalidationHandler.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[8];

  outlined init with copy of TimelineInvalidationAction(a1, (uint64_t)v4);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of weak AnyGestureResponder?(a1);
}

Swift::Void __swiftcall AnyAlwaysOnBridge.invalidate(for:)(Swift::String a1)
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AlwaysOnBridge.timelineRegistrations.didset(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = a1;
  v3 = *(_QWORD *)(v1 + 48);
  if (a1 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
  }
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = 0;
  v7 = 0;
  v15 = v2 & 0xFFFFFFFFFFFFFF8;
  v16 = v2 & 0xC000000000000001;
  v14 = v2;
  v2 += 32;
  while (1)
  {
    if (v7 == v4)
    {
      v8 = 0;
      v9 = 0;
      v7 = v4;
      if (v5 == v6)
        goto LABEL_28;
      goto LABEL_15;
    }
    if (v16)
    {
      v10 = (id)MEMORY[0x18D75E3BC](v7, v14);
    }
    else
    {
      if ((v7 & 0x8000000000000000) != 0)
        goto LABEL_34;
      if (v7 >= *(_QWORD *)(v15 + 16))
        goto LABEL_35;
      v10 = *(id *)(v2 + 8 * v7);
    }
    v8 = v10;
    if (__OFADD__(v7++, 1))
      goto LABEL_36;
    if (v5 == v6)
      break;
LABEL_15:
    if ((v3 & 0xC000000000000001) != 0)
    {
      v12 = (id)MEMORY[0x18D75E3BC](v6, v3);
    }
    else
    {
      if (v6 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      v12 = *(id *)(v3 + 8 * v6 + 32);
    }
    v9 = v12;
    if (__OFADD__(v6, 1))
      goto LABEL_33;
    if (!v8)
      goto LABEL_28;
    if (!v12)
      goto LABEL_26;

    ++v6;
    if (v9 != v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_30;
    }
  }
  if (v10)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    goto LABEL_30;
  }
  v9 = 0;
LABEL_28:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!v9)
    return;

LABEL_30:
  v13._object = (void *)0x8000000187BE3DB0;
  v13._countAndFlagsBits = 0xD00000000000001FLL;
  AlwaysOnBridge.invalidate(for:)(v13);
}

Swift::Void __swiftcall AlwaysOnBridge.invalidate(for:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = MEMORY[0x18D760234](v1 + 16);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = (id)specialized UIHostingController.host.getter();

    v7 = objc_msgSend(v6, sel_window);
    if (v7)
    {
      v8 = objc_msgSend(v7, sel_windowScene);

      if (v8)
      {
        v9 = objc_msgSend(v8, sel__backlightSceneEnvironment);

        if (v9)
        {
          v10 = (void *)MEMORY[0x18D75CC88](countAndFlagsBits, object);
          objc_msgSend(v9, sel_invalidateAllTimelinesForReason_, v10);

          swift_unknownObjectRelease();
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void AlwaysOnBridge.update(with:)(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v2 = v1;
  v3 = *v1;
  *((_BYTE *)v1 + 41) = 1;
  v4 = (void *)v1[4];
  v2[4] = (uint64_t)a1;
  v5 = a1;

  v6 = MEMORY[0x18D760234](v2 + 2);
  if (!v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = (void *)v6;
  v8 = (id)specialized UIHostingController.host.getter();

  swift_retain();
  Transaction.disablesAnimations.setter();
  Transaction.disablesContentTransitions.setter();
  swift_retain();
  GraphHost.emptyTransaction(_:)();
  swift_release();
  v9 = MEMORY[0x18D760234](v2 + 2);
  if (!v9)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v10 = (void *)v9;
  v11 = (id)specialized UIHostingController.host.getter();

  v13 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v3 + 104), *(_QWORD *)(v3 + 112), v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v13);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  v14 = MEMORY[0x18D760234](v2 + 2);
  if (v14)
  {
    v15 = (void *)v14;
    v16 = (id)specialized UIHostingController.host.getter();

    objc_msgSend(v16, sel_layoutIfNeeded);
    swift_release();
    swift_release();

    *((_BYTE *)v2 + 41) = 0;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t AlwaysOnBridge.configureTransaction(_:)()
{
  uint64_t v0;

  ++*(_QWORD *)(v0 + 24);
  swift_retain();
  Transaction.addAnimationListener(allFinished:)();
  return swift_release();
}

uint64_t closure #1 in AlwaysOnBridge.configureTransaction(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v12 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = partial apply for closure #1 in closure #1 in AlwaysOnBridge.configureTransaction(_:);
  aBlock[5] = a1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_42;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18D75D930](0, v11, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t AlwaysOnBridge.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();

  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for AlwaysOnTimelinesKey()
{
  return &type metadata for AlwaysOnTimelinesKey;
}

ValueMetadata *type metadata accessor for SwiftUITextAlwaysOnProvider()
{
  return &type metadata for SwiftUITextAlwaysOnProvider;
}

uint64_t implicit closure #1 in static SwiftUITextAlwaysOnProvider.makeAlwaysOn(inputs:schedule:outputs:)(void (*a1)(void))
{
  uint64_t v2;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TimelineIdentifier()), sel_init);
  a1();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for [BLSAlwaysOnTimeline]();
  lazy protocol witness table accessor for type AlwaysOnTimelinePreferenceWriter and conformance AlwaysOnTimelinePreferenceWriter();
  v2 = Attribute.init<A>(body:value:flags:update:)();

  return v2;
}

id protocol witness for static TextAlwaysOnProvider.makeAlwaysOn(inputs:schedule:outputs:) in conformance SwiftUITextAlwaysOnProvider()
{
  id result;
  uint64_t v1;

  result = objc_msgSend((id)objc_opt_self(), sel__alwaysOnSupported);
  if ((_DWORD)result)
  {
    MEMORY[0x1E0C80A78](result, v1);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static SwiftUITextAlwaysOnProvider.makeAlwaysOn(inputs:schedule:outputs:)()
{
  uint64_t v0;

  return implicit closure #1 in static SwiftUITextAlwaysOnProvider.makeAlwaysOn(inputs:schedule:outputs:)(*(void (**)(void))(v0 + 16));
}

uint64_t AlwaysOnTimelinePreferenceWriter.value.getter(uint64_t a1)
{
  uint64_t Value;
  objc_class *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  objc_super v9;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[40];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TimelineSchedule?, (uint64_t (*)(uint64_t))type metadata accessor for TimelineSchedule, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  outlined init with copy of TimelineSchedule?(Value, (uint64_t)&v10);
  if (v11)
  {
    outlined init with take of OptionalBinaryInteger(&v10, (uint64_t)v12);
    outlined init with copy of TableColumnList((uint64_t)v12, (uint64_t)&v10);
    v3 = (objc_class *)type metadata accessor for DateSequenceTimeline();
    v4 = objc_allocWithZone(v3);
    outlined init with copy of TableColumnList((uint64_t)&v10, (uint64_t)v4 + OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule);
    v9.receiver = v4;
    v9.super_class = v3;
    v5 = objc_msgSendSuper2(&v9, sel_initWithIdentifier_configure_, a1, 0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v6 + 32) = v5;
    *(_QWORD *)&v10 = v6;
    specialized Array._endMutation()();
    v7 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    outlined destroy of TimelineSchedule?((uint64_t)&v10);
    return MEMORY[0x1E0DEE9D8];
  }
  return v7;
}

uint64_t protocol witness for Rule.value.getter in conformance AlwaysOnTimelinePreferenceWriter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;

  result = AlwaysOnTimelinePreferenceWriter.value.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AlwaysOnTimelinePreferenceWriter and conformance AlwaysOnTimelinePreferenceWriter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AlwaysOnTimelinePreferenceWriter and conformance AlwaysOnTimelinePreferenceWriter;
  if (!lazy protocol witness table cache variable for type AlwaysOnTimelinePreferenceWriter and conformance AlwaysOnTimelinePreferenceWriter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlwaysOnTimelinePreferenceWriter, &type metadata for AlwaysOnTimelinePreferenceWriter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlwaysOnTimelinePreferenceWriter and conformance AlwaysOnTimelinePreferenceWriter);
  }
  return result;
}

unint64_t type metadata accessor for TimelineSchedule()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TimelineSchedule;
  if (!lazy cache variable for type metadata for TimelineSchedule)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  }
  return result;
}

uint64_t outlined init with copy of TimelineSchedule?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TimelineSchedule?, (uint64_t (*)(uint64_t))type metadata accessor for TimelineSchedule, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TimelineSchedule?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TimelineSchedule?, (uint64_t (*)(uint64_t))type metadata accessor for TimelineSchedule, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL specialized static TimelineInvalidationAction.== infix(_:_:)()
{
  uint64_t Strong;
  uint64_t v1;
  uint64_t v2;

  Strong = swift_weakLoadStrong();
  v1 = swift_weakLoadStrong();
  v2 = v1;
  if (Strong)
  {
    swift_release();
    if (v2)
    {
      swift_release();
      return Strong == v2;
    }
    return 0;
  }
  if (v1)
  {
    swift_release();
    return 0;
  }
  return 1;
}

void *partial apply for closure #2 in AlwaysOnBridge.isActiveHost.getter(void **a1)
{
  uint64_t v1;
  void *v2;
  void *result;
  void *v4;

  v2 = *a1;
  result = (void *)MEMORY[0x18D760234](v1 + 16);
  if (result)
  {
    v4 = result;

    return (void *)(v2 == v4);
  }
  return result;
}

uint64_t specialized AlwaysOnBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t specialized AlwaysOnBridge.removePreferences(from:)()
{
  return GraphHost.removePreference<A>(_:)();
}

uint64_t specialized AlwaysOnBridge.timelines(for:)()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t partial apply for closure #1 in AlwaysOnBridge.configureTransaction(_:)()
{
  uint64_t v0;

  return closure #1 in AlwaysOnBridge.configureTransaction(_:)(v0);
}

void partial apply for closure #1 in closure #1 in AlwaysOnBridge.configureTransaction(_:)()
{
  uint64_t v0;

  --*(_QWORD *)(v0 + 24);
}

ValueMetadata *type metadata accessor for AlwaysOnFrameSpecifier()
{
  return &type metadata for AlwaysOnFrameSpecifier;
}

ValueMetadata *type metadata accessor for AlwaysOnInvalidationKey()
{
  return &type metadata for AlwaysOnInvalidationKey;
}

ValueMetadata *type metadata accessor for AlwaysOnTimelinePreferenceWriter()
{
  return &type metadata for AlwaysOnTimelinePreferenceWriter;
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance OnDeleteTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  v17 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 32);
  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 80);
  v11 = *(_OWORD *)a1;
  v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<_TypeSelectEquivalentTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<_TypeSelectEquivalentTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<_TypeSelectEquivalentTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  v22 = v20;
  v21[2] = v13;
  v21[3] = v14;
  v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TypeSelectEquivalentKey>, (uint64_t)&type metadata for TypeSelectEquivalentKey, (uint64_t)&protocol witness table for TypeSelectEquivalentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  v17 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 32);
  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 80);
  v11 = *(_OWORD *)a1;
  v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<DeleteDisabledTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier, (uint64_t)&type metadata for DeleteDisabledTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<DeleteDisabledTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<DeleteDisabledTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier, (uint64_t)&type metadata for DeleteDisabledTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  v22 = v20;
  v21[2] = v13;
  v21[3] = v14;
  v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  v17 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 32);
  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 80);
  v11 = *(_OWORD *)a1;
  v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<ItemProviderTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier, (uint64_t)&type metadata for ItemProviderTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<ItemProviderTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<ItemProviderTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ItemProviderTableRowModifier and conformance ItemProviderTableRowModifier, (uint64_t)&type metadata for ItemProviderTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  v22 = v20;
  v21[2] = v13;
  v21[3] = v14;
  v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<ItemProviderTraitKey>, (uint64_t)&type metadata for ItemProviderTraitKey, (uint64_t)&protocol witness table for ItemProviderTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  v17 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 32);
  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 80);
  v11 = *(_OWORD *)a1;
  v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<OnInsertTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier, (uint64_t)&type metadata for OnInsertTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<OnInsertTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<OnInsertTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnInsertTableRowModifier and conformance OnInsertTableRowModifier, (uint64_t)&type metadata for OnInsertTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  v22 = v20;
  v21[2] = v13;
  v21[3] = v14;
  v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnInsertTraitKey>, (uint64_t)&type metadata for OnInsertTraitKey, (uint64_t)&protocol witness table for OnInsertTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  v17 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 32);
  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 80);
  v11 = *(_OWORD *)a1;
  v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<OnDeleteTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier, (uint64_t)&type metadata for OnDeleteTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<OnDeleteTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<OnDeleteTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier, (uint64_t)&type metadata for OnDeleteTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  v22 = v20;
  v21[2] = v13;
  v21[3] = v14;
  v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnDeleteTraitKey>, (uint64_t)&type metadata for OnDeleteTraitKey, (uint64_t)&protocol witness table for OnDeleteTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  v17 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 32);
  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 80);
  v11 = *(_OWORD *)a1;
  v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier, (uint64_t)&type metadata for DropOntoTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DropOntoTableRowModifier and conformance DropOntoTableRowModifier, (uint64_t)&type metadata for DropOntoTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  v22 = v20;
  v21[2] = v13;
  v21[3] = v14;
  v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[9];
  uint64_t v22;

  static DynamicPropertyCache.fields(of:)();
  v17 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 128);
  v20 = *(_QWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 32);
  v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 80);
  v11 = *(_OWORD *)a1;
  v12 = *(_OWORD *)(a1 + 16);
  outlined retain of _TableRowInputs(a1);
  type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<_HoverTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type _HoverTableRowModifier and conformance _HoverTableRowModifier, (uint64_t)&type metadata for _HoverTableRowModifier);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<_HoverTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<_HoverTableRowModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type _HoverTableRowModifier and conformance _HoverTableRowModifier, (uint64_t)&type metadata for _HoverTableRowModifier);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v21[6] = v17;
  v21[7] = v18;
  v21[8] = v19;
  v22 = v20;
  v21[2] = v13;
  v21[3] = v14;
  v21[4] = v15;
  v21[5] = v16;
  v21[0] = v11;
  v21[1] = v12;
  outlined retain of _TableRowInputs((uint64_t)v21);
  specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(v10, (uint64_t)v21, a2);
  outlined release of _TableRowInputs((uint64_t)v21);
  if ((v9 & 1) == 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>, (uint64_t)&type metadata for TableRowHoverActionTraitKey, (uint64_t)&protocol witness table for TableRowHoverActionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)v21);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v7;
  *(_DWORD *)(a3 + 8) = v8;
  return result;
}

uint64_t specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  __int128 v9;
  char v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  __int128 v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v8 = MEMORY[0x1E0DEDCE8];
  static DynamicPropertyCache.fields(of:)();
  v9 = v41;
  v10 = v42;
  v11 = DWORD1(v42);
  v12 = *(_OWORD *)(a2 + 112);
  v37 = *(_OWORD *)(a2 + 96);
  v38 = v12;
  v39 = *(_OWORD *)(a2 + 128);
  v40 = *(_QWORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 48);
  v33 = *(_OWORD *)(a2 + 32);
  v34 = v13;
  v14 = *(_OWORD *)(a2 + 80);
  v35 = *(_OWORD *)(a2 + 64);
  v36 = v14;
  v15 = *(_OWORD *)(a2 + 16);
  v31 = *(_OWORD *)a2;
  v32 = v15;
  v30 = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<Never>, v8, (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TableRowContentModifierBodyAccessor);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<Never> and conformance TableRowContentModifierBodyAccessor<A>();
  BodyAccessor.makeBody(container:inputs:fields:)();
  v16 = v28;
  v18 = *((_QWORD *)&v25 + 1);
  v17 = v25;
  v19 = v26;
  v47 = v37;
  v48 = v38;
  v49 = v39;
  v50 = v40;
  v43 = v33;
  v44 = v34;
  v45 = v35;
  v46 = v36;
  v41 = v31;
  v42 = v32;
  outlined retain of _TableRowInputs((uint64_t)&v41);
  specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)(&v25, v28, &v41, a3, a4);
  outlined release of _TableRowInputs((uint64_t)&v41);
  v20 = v25;
  v21 = DWORD2(v25);
  if ((v19 & 1) == 0)
  {
    v28 = v17;
    v29 = v18;
    v30 = v16;
    v25 = v9;
    v26 = v10;
    v27 = v11;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)&v41);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a5 = v20;
  *(_DWORD *)(a5 + 8) = v21;
  return result;
}

uint64_t static _TableRowContentModifier._makeRows(modifier:inputs:body:)@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void (*v22)(uint64_t *__return_ptr, int *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v9 = a1[7];
  v60 = a1[6];
  v61 = v9;
  v62 = a1[8];
  v63 = *((_QWORD *)a1 + 18);
  v10 = a1[3];
  v56 = a1[2];
  v57 = v10;
  v11 = a1[5];
  v58 = a1[4];
  v59 = v11;
  v12 = a1[1];
  v54 = *a1;
  v55 = v12;
  static DynamicPropertyCache.fields(of:)();
  v13 = *((_QWORD *)&v64 + 1);
  v14 = v65;
  v50 = v60;
  v51 = v61;
  v52 = v62;
  v53 = v63;
  v46 = v56;
  v47 = v57;
  v48 = v58;
  v49 = v59;
  v44 = v54;
  v45 = v55;
  v29 = v64;
  v27 = DWORD1(v65);
  outlined retain of _TableRowInputs((uint64_t)&v54);
  v16 = type metadata accessor for TableRowContentModifierBodyAccessor(0, a4, a5, v15);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowContentModifierBodyAccessor<A>, v16);
  BodyAccessor.makeBody(container:inputs:fields:)();
  v17 = v31;
  v18 = *((_QWORD *)&v33 + 1);
  v26 = v33;
  v19 = v34;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v70 = v50;
  v71 = v51;
  v72 = v52;
  v66 = v46;
  v67 = v47;
  v68 = v48;
  v69 = v49;
  v64 = v44;
  v65 = v45;
  v39 = v50;
  v40 = v51;
  v41 = v52;
  v35 = v46;
  v36 = v47;
  v37 = v48;
  v38 = v49;
  v73 = v53;
  v43 = v31;
  v42 = v53;
  v33 = v44;
  v34 = v45;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v22 = *(void (**)(uint64_t *__return_ptr, int *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  outlined retain of _TableRowInputs((uint64_t)&v64);
  v22(&v31, &v43, &v33, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
  outlined release of _TableRowInputs((uint64_t)&v64);
  v23 = v31;
  v24 = v32;
  if ((v19 & 1) == 0)
  {
    v31 = v26;
    v32 = v18;
    v43 = v17;
    *(_QWORD *)&v33 = v29;
    *((_QWORD *)&v33 + 1) = v13;
    LOBYTE(v34) = v14;
    DWORD1(v34) = v27;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)&v64);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a6 = v23;
  *(_DWORD *)(a6 + 8) = v24;
  return result;
}

uint64_t static _TableRowContentModifier._tableRowCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _OWORD v12[9];
  uint64_t v13;

  v5 = *(_OWORD *)(a1 + 112);
  v12[6] = *(_OWORD *)(a1 + 96);
  v12[7] = v5;
  v12[8] = *(_OWORD *)(a1 + 128);
  v13 = *(_QWORD *)(a1 + 144);
  v6 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v6;
  v7 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v7;
  v8 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v12, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

{
  return static _TableRowContentModifier._tableRowCount(inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance DeleteDisabledTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance ItemProviderTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance OnInsertTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance DropOntoTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance _TypeSelectEquivalentTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance _HoverTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._tableRowCount(inputs:body:) in conformance OnDeleteTableRowModifier(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[9];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 112);
  v7[6] = *(_OWORD *)(a1 + 96);
  v7[7] = v2;
  v7[8] = *(_OWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 144);
  v3 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v7[4] = *(_OWORD *)(a1 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  return a2(v7);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance _ContextMenuTableRowModifier<A>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return static _TableRowContentModifier._makeRows(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6);
}

uint64_t type metadata accessor for TableRowContentModifierBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableRowContentModifierBodyAccessor);
}

uint64_t TableRowContentModifierBodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for TableRowContentModifierBodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowContentModifierBodyAccessor<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance TableRowContentModifierBodyAccessor<A>(uint64_t result, uint64_t a2)
{
  return TableRowContentModifierBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance Never@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  uint64_t v12;

  v5 = *a1;
  v6 = *(_OWORD *)(a2 + 112);
  v11[6] = *(_OWORD *)(a2 + 96);
  v11[7] = v6;
  v11[8] = *(_OWORD *)(a2 + 128);
  v12 = *(_QWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v11[4] = *(_OWORD *)(a2 + 64);
  v11[5] = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)(v5, (uint64_t)v11, a3, a4, a5);
}

uint64_t protocol witness for static _TableRowContentModifier._tableRowCount(inputs:body:) in conformance Never(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[9];
  uint64_t v7;

  v1 = *(_OWORD *)(a1 + 112);
  v6[6] = *(_OWORD *)(a1 + 96);
  v6[7] = v1;
  v6[8] = *(_OWORD *)(a1 + 128);
  v7 = *(_QWORD *)(a1 + 144);
  v2 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v2;
  v3 = *(_OWORD *)(a1 + 80);
  v6[4] = *(_OWORD *)(a1 + 64);
  v6[5] = v3;
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  return protocol witness for static _TableRowContentModifier._tableRowCount(inputs:body:) in conformance Never(v6);
}

uint64_t static ModifiedContent<>._makeRows(content:inputs:)(int *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD v17[9];
  uint64_t v18;
  _BYTE v19[4];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v10 = *a1;
  v11 = a2[7];
  v26 = a2[6];
  v27 = v11;
  v28 = a2[8];
  v29 = *((_QWORD *)a2 + 18);
  v12 = a2[3];
  v22 = a2[2];
  v23 = v12;
  v13 = a2[5];
  v24 = a2[4];
  v25 = v13;
  v14 = a2[1];
  v20 = *a2;
  v21 = v14;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v17[6] = v26;
  v17[7] = v27;
  v17[8] = v28;
  v18 = v29;
  v17[2] = v22;
  v17[3] = v23;
  v17[4] = v24;
  v17[5] = v25;
  v17[0] = v20;
  v17[1] = v21;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a4;
  *(_QWORD *)(v15 + 32) = a5;
  *(_QWORD *)(v15 + 40) = a6;
  *(_DWORD *)(v15 + 48) = v10;
  (*(void (**)(_BYTE *, _OWORD *, uint64_t (*)(uint64_t, __int128 *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v19, v17, partial apply for closure #2 in static ModifiedContent<>._makeRows(content:inputs:), v15, a4, a6);
  return swift_release();
}

uint64_t closure #1 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v5 = type metadata accessor for ModifiedContent();
  v6 = a1 + *(int *)(v5 + 36);
  v10[2] = v5;
  v10[3] = a3;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a3, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static ModifiedContent<>._makeRows(content:inputs:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[9];
  uint64_t v14;
  _BYTE v15[4];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v8 = a2[7];
  v22 = a2[6];
  v23 = v8;
  v24 = a2[8];
  v25 = *((_QWORD *)a2 + 18);
  v9 = a2[3];
  v18 = a2[2];
  v19 = v9;
  v10 = a2[5];
  v20 = a2[4];
  v21 = v10;
  v11 = a2[1];
  v16 = *a2;
  v17 = v11;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v13[6] = v22;
  v13[7] = v23;
  v13[8] = v24;
  v14 = v25;
  v13[2] = v18;
  v13[3] = v19;
  v13[4] = v20;
  v13[5] = v21;
  v13[0] = v16;
  v13[1] = v17;
  return (*(uint64_t (**)(_BYTE *, _OWORD *, uint64_t, uint64_t))(a6 + 48))(v15, v13, a4, a6);
}

uint64_t sub_18758F7B0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;

  return closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(a1, a2, *(unsigned int *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t closure #1 in closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];

  v7[2] = type metadata accessor for ModifiedContent();
  v7[3] = a2;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7[5];
}

uint64_t static ModifiedContent<>._tableRowCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD v16[9];
  uint64_t v17;

  v9 = *(_OWORD *)(a1 + 112);
  v16[6] = *(_OWORD *)(a1 + 96);
  v16[7] = v9;
  v16[8] = *(_OWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 144);
  v10 = *(_OWORD *)(a1 + 48);
  v16[2] = *(_OWORD *)(a1 + 32);
  v16[3] = v10;
  v11 = *(_OWORD *)(a1 + 80);
  v16[4] = *(_OWORD *)(a1 + 64);
  v16[5] = v11;
  v12 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v12;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  v14 = (*(uint64_t (**)(_OWORD *, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(a5 + 40))(v16, partial apply for closure #1 in static ModifiedContent<>._tableRowCount(inputs:), v13, a3, a5);
  swift_release();
  return v14;
}

uint64_t sub_18758F920()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._tableRowCount(inputs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(v2 + 56))(v8);
}

uint64_t static ModifiedContent<>._containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[9];
  uint64_t v10;

  v4 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v4;
  v9[8] = *(_OWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 144);
  v5 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  return (*(uint64_t (**)(_OWORD *))(a4 + 64))(v9) & 1;
}

void ModifiedContent<>.tableRowBody.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance <> ModifiedContent<A, B>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <> ModifiedContent<A, B>(int *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeRows(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ModifiedContent<>._tableRowCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ModifiedContent<>._containsOutlineSymbol(inputs:)(a1, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a3 - 8));
}

uint64_t ModifiedContent<>.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 32))(*(_QWORD *)(a1 + 16));
}

_UNKNOWN **associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in Never()
{
  return &protocol witness table for Never;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowValue : Identifiable in <> ModifiedContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DynamicTableRowContent.Data : Collection in <> ModifiedContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for DynamicTableRowContent.data.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  return ModifiedContent<>.data.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t instantiation function for generic protocol witness table for <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v4 = a3[1];
  v6[0] = *(_QWORD *)(*a3 + 8);
  v6[1] = v4;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, a2, v6);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of _TableRowContentModifier.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static _TableRowContentModifier._makeRows(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static _TableRowContentModifier._tableRowCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t type metadata completion function for _TraitWritingTableRowModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _TraitWritingTableRowModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(_QWORD *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for _TraitWritingTableRowModifier(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for _TraitWritingTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for _TraitWritingTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for _TraitWritingTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for _TraitWritingTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TraitWritingTableRowModifier(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (a2 <= v6)
    goto LABEL_18;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v6 + v11 + 1);
}

void storeEnumTagSinglePayload for _TraitWritingTableRowModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for _TraitWritingTableRowModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TraitWritingTableRowModifier);
}

uint64_t specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, _OWORD *))
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[48];
  __int128 v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<TypeSelectEquivalentKey>>, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TypeSelectEquivalentKey>, (uint64_t)&type metadata for TypeSelectEquivalentKey, (uint64_t)&protocol witness table for TypeSelectEquivalentKey);
  v4 = _GraphValue.value.getter();
  v23 = *(_QWORD *)(a2 + 136);
  v20 = *(_DWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  v21 = *(_DWORD *)(a2 + 128);
  v22 = *(_DWORD *)(a2 + 144);
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v17 = *(_OWORD *)(a2 + 104);
  v18 = *(_OWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TypeSelectEquivalentKey>.AddTrait, (uint64_t)&type metadata for TypeSelectEquivalentKey, (uint64_t)&protocol witness table for TypeSelectEquivalentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<TypeSelectEquivalentKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TypeSelectEquivalentKey>.AddTrait, (uint64_t)&type metadata for TypeSelectEquivalentKey, (uint64_t)&protocol witness table for TypeSelectEquivalentKey);
  *(_QWORD *)&v27 = v5;
  DWORD2(v27) = v6;
  *(_QWORD *)&v28 = v7;
  *((_QWORD *)&v28 + 1) = v10;
  *(_QWORD *)&v29 = v11;
  *((_QWORD *)&v29 + 1) = v9;
  *(_QWORD *)&v30 = v8;
  DWORD2(v30) = v20;
  *(_QWORD *)&v31 = v19;
  *((_QWORD *)&v31 + 1) = v12;
  *(_QWORD *)v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(_QWORD *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((_QWORD *)&v33 + 1) = v23;
  v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  v25[8] = v33;
  v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[48];
  __int128 v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>>, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey);
  v4 = _GraphValue.value.getter();
  v23 = *(_QWORD *)(a2 + 136);
  v20 = *(_DWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  v21 = *(_DWORD *)(a2 + 128);
  v22 = *(_DWORD *)(a2 + 144);
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v17 = *(_OWORD *)(a2 + 104);
  v18 = *(_OWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>.AddTrait, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>.AddTrait, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey);
  *(_QWORD *)&v27 = v5;
  DWORD2(v27) = v6;
  *(_QWORD *)&v28 = v7;
  *((_QWORD *)&v28 + 1) = v10;
  *(_QWORD *)&v29 = v11;
  *((_QWORD *)&v29 + 1) = v9;
  *(_QWORD *)&v30 = v8;
  DWORD2(v30) = v20;
  *(_QWORD *)&v31 = v19;
  *((_QWORD *)&v31 + 1) = v12;
  *(_QWORD *)v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(_QWORD *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((_QWORD *)&v33 + 1) = v23;
  v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  v25[8] = v33;
  v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[48];
  __int128 v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<ItemProviderTraitKey>>, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<ItemProviderTraitKey>, (uint64_t)&type metadata for ItemProviderTraitKey, (uint64_t)&protocol witness table for ItemProviderTraitKey);
  v4 = _GraphValue.value.getter();
  v23 = *(_QWORD *)(a2 + 136);
  v20 = *(_DWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  v21 = *(_DWORD *)(a2 + 128);
  v22 = *(_DWORD *)(a2 + 144);
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v17 = *(_OWORD *)(a2 + 104);
  v18 = *(_OWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<ItemProviderTraitKey>.AddTrait, (uint64_t)&type metadata for ItemProviderTraitKey, (uint64_t)&protocol witness table for ItemProviderTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<ItemProviderTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<ItemProviderTraitKey>.AddTrait, (uint64_t)&type metadata for ItemProviderTraitKey, (uint64_t)&protocol witness table for ItemProviderTraitKey);
  *(_QWORD *)&v27 = v5;
  DWORD2(v27) = v6;
  *(_QWORD *)&v28 = v7;
  *((_QWORD *)&v28 + 1) = v10;
  *(_QWORD *)&v29 = v11;
  *((_QWORD *)&v29 + 1) = v9;
  *(_QWORD *)&v30 = v8;
  DWORD2(v30) = v20;
  *(_QWORD *)&v31 = v19;
  *((_QWORD *)&v31 + 1) = v12;
  *(_QWORD *)v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(_QWORD *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((_QWORD *)&v33 + 1) = v23;
  v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  v25[8] = v33;
  v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[48];
  __int128 v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<OnInsertTraitKey>>, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnInsertTraitKey>, (uint64_t)&type metadata for OnInsertTraitKey, (uint64_t)&protocol witness table for OnInsertTraitKey);
  v4 = _GraphValue.value.getter();
  v23 = *(_QWORD *)(a2 + 136);
  v20 = *(_DWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  v21 = *(_DWORD *)(a2 + 128);
  v22 = *(_DWORD *)(a2 + 144);
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v17 = *(_OWORD *)(a2 + 104);
  v18 = *(_OWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnInsertTraitKey>.AddTrait, (uint64_t)&type metadata for OnInsertTraitKey, (uint64_t)&protocol witness table for OnInsertTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<OnInsertTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnInsertTraitKey>.AddTrait, (uint64_t)&type metadata for OnInsertTraitKey, (uint64_t)&protocol witness table for OnInsertTraitKey);
  *(_QWORD *)&v27 = v5;
  DWORD2(v27) = v6;
  *(_QWORD *)&v28 = v7;
  *((_QWORD *)&v28 + 1) = v10;
  *(_QWORD *)&v29 = v11;
  *((_QWORD *)&v29 + 1) = v9;
  *(_QWORD *)&v30 = v8;
  DWORD2(v30) = v20;
  *(_QWORD *)&v31 = v19;
  *((_QWORD *)&v31 + 1) = v12;
  *(_QWORD *)v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(_QWORD *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((_QWORD *)&v33 + 1) = v23;
  v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  v25[8] = v33;
  v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[48];
  __int128 v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<OnDeleteTraitKey>>, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnDeleteTraitKey>, (uint64_t)&type metadata for OnDeleteTraitKey, (uint64_t)&protocol witness table for OnDeleteTraitKey);
  v4 = _GraphValue.value.getter();
  v23 = *(_QWORD *)(a2 + 136);
  v20 = *(_DWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  v21 = *(_DWORD *)(a2 + 128);
  v22 = *(_DWORD *)(a2 + 144);
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v17 = *(_OWORD *)(a2 + 104);
  v18 = *(_OWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait, (uint64_t)&type metadata for OnDeleteTraitKey, (uint64_t)&protocol witness table for OnDeleteTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait, (uint64_t)&type metadata for OnDeleteTraitKey, (uint64_t)&protocol witness table for OnDeleteTraitKey);
  *(_QWORD *)&v27 = v5;
  DWORD2(v27) = v6;
  *(_QWORD *)&v28 = v7;
  *((_QWORD *)&v28 + 1) = v10;
  *(_QWORD *)&v29 = v11;
  *((_QWORD *)&v29 + 1) = v9;
  *(_QWORD *)&v30 = v8;
  DWORD2(v30) = v20;
  *(_QWORD *)&v31 = v19;
  *((_QWORD *)&v31 + 1) = v12;
  *(_QWORD *)v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(_QWORD *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((_QWORD *)&v33 + 1) = v23;
  v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  v25[8] = v33;
  v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[48];
  __int128 v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey);
  v4 = _GraphValue.value.getter();
  v23 = *(_QWORD *)(a2 + 136);
  v22 = *(_DWORD *)(a2 + 144);
  v5 = *(_DWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 128);
  v8 = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 72);
  v16 = *(_QWORD *)(a2 + 80);
  v20 = *(_OWORD *)(a2 + 104);
  v21 = *(_OWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait();
  *(_QWORD *)&v27 = v8;
  DWORD2(v27) = v9;
  *(_QWORD *)&v28 = v10;
  *((_QWORD *)&v28 + 1) = v13;
  *(_QWORD *)&v29 = v14;
  *((_QWORD *)&v29 + 1) = v12;
  *(_QWORD *)&v30 = v11;
  DWORD2(v30) = v5;
  *(_QWORD *)&v31 = v6;
  *((_QWORD *)&v31 + 1) = v15;
  *(_QWORD *)v32 = v16;
  *(_OWORD *)&v32[8] = v21;
  *(_OWORD *)&v32[24] = v20;
  *(_QWORD *)&v32[40] = v17;
  LODWORD(v33) = v7;
  *((_QWORD *)&v33 + 1) = v23;
  v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  v25[8] = v33;
  v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  v18 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v18, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[48];
  __int128 v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<TableRowHoverActionTraitKey>>, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>, (uint64_t)&type metadata for TableRowHoverActionTraitKey, (uint64_t)&protocol witness table for TableRowHoverActionTraitKey);
  v4 = _GraphValue.value.getter();
  v23 = *(_QWORD *)(a2 + 136);
  v20 = *(_DWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  v21 = *(_DWORD *)(a2 + 128);
  v22 = *(_DWORD *)(a2 + 144);
  v5 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v17 = *(_OWORD *)(a2 + 104);
  v18 = *(_OWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>.AddTrait, (uint64_t)&type metadata for TableRowHoverActionTraitKey, (uint64_t)&protocol witness table for TableRowHoverActionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>.AddTrait, (uint64_t)&type metadata for TableRowHoverActionTraitKey, (uint64_t)&protocol witness table for TableRowHoverActionTraitKey);
  *(_QWORD *)&v27 = v5;
  DWORD2(v27) = v6;
  *(_QWORD *)&v28 = v7;
  *((_QWORD *)&v28 + 1) = v10;
  *(_QWORD *)&v29 = v11;
  *((_QWORD *)&v29 + 1) = v9;
  *(_QWORD *)&v30 = v8;
  DWORD2(v30) = v20;
  *(_QWORD *)&v31 = v19;
  *((_QWORD *)&v31 + 1) = v12;
  *(_QWORD *)v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(_QWORD *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((_QWORD *)&v33 + 1) = v23;
  v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  v25[8] = v33;
  v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

uint64_t _TraitWritingTableRowModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Value;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v12 = (char *)&v21 - v11;
  v14 = type metadata accessor for _TraitWritingTableRowModifier(0, a2, a3, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v21 - v17;
  TableRow.MakeList.traits.getter(a1, &v21);
  if (v21)
    v22 = v21;
  else
    ViewTraitCollection.init()();
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, Value, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v18, AssociatedTypeWitness);
  result = ViewTraitCollection.subscript.setter();
  *a4 = v22;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _TraitWritingTableRowModifier<A>.AddTrait@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return _TraitWritingTableRowModifier.AddTrait.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _TraitWritingTableRowModifier<A>.AddTrait(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TraitWritingTableRowModifier<A>.AddTrait, a1);
  return static AsyncAttribute.flags.getter();
}

void protocol witness for _TableRowContentModifier.body.getter in conformance _TraitWritingTableRowModifier<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance _TraitWritingTableRowModifier<A>(uint64_t a1, __int128 *a2, void (*a3)(uint64_t, _OWORD *), uint64_t a4, uint64_t a5)
{
  return static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait, (uint64_t)&protocol conformance descriptor for _TraitWritingTableRowModifier<A>.AddTrait, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_21);
}

uint64_t protocol witness for static _TableRowContentModifier._tableRowCount(inputs:body:) in conformance _TraitWritingTableRowModifier<A>(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  return protocol witness for static _TableRowContentModifier._tableRowCount(inputs:body:) in conformance OnDeleteTableRowModifier(a1, a2);
}

uint64_t static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(uint64_t a1, __int128 *a2, void (*a3)(uint64_t, _OWORD *), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t), uint64_t (*a8)(_QWORD, uint64_t, uint64_t), uint64_t a9, uint64_t a10)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v24[9];
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[9];
  unint64_t v28;
  __int128 v29;
  _BYTE v30[32];
  __int128 v31;
  _BYTE v32[64];
  __int128 v33;
  unint64_t v34;
  __int128 v35;
  _BYTE v36[32];
  __int128 v37;
  _BYTE v38[64];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v14 = a2[7];
  *(_OWORD *)&v38[32] = a2[6];
  v15 = a2[8];
  *(_OWORD *)&v38[48] = v14;
  v39 = v15;
  v40 = *((_QWORD *)a2 + 18);
  v16 = a2[3];
  *(_OWORD *)&v36[16] = a2[2];
  v37 = v16;
  v17 = a2[5];
  *(_OWORD *)v38 = a2[4];
  *(_OWORD *)&v38[16] = v17;
  v18 = a2[1];
  v35 = *a2;
  *(_OWORD *)v36 = v18;
  outlined retain of _TableRowInputs((uint64_t)&v35);
  a7(255, a5, a6);
  type metadata accessor for _GraphValue();
  LODWORD(v29) = _GraphValue.value.getter();
  DWORD1(v29) = HIDWORD(v40);
  v25 = a8(0, a5, a6);
  v26 = MEMORY[0x18D75FFDC](a9, v25);
  type metadata accessor for Attribute<ViewTraitCollection>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, a10, (uint64_t)v24, v25, MEMORY[0x1E0DEDCE8], v19, MEMORY[0x1E0DEDD18], v20);
  *(_QWORD *)&v29 = v35;
  DWORD2(v29) = DWORD2(v35);
  *(_OWORD *)&v30[8] = *(_OWORD *)&v36[8];
  *(_QWORD *)v30 = *(_QWORD *)v36;
  *(_QWORD *)&v30[24] = *(_QWORD *)&v36[24];
  *(_QWORD *)&v31 = v37;
  DWORD2(v31) = DWORD2(v37);
  *(_QWORD *)v32 = *(_QWORD *)v38;
  *(_OWORD *)&v32[8] = *(_OWORD *)&v38[8];
  *(_OWORD *)&v32[24] = *(_OWORD *)&v38[24];
  *(_OWORD *)&v32[40] = *(_OWORD *)&v38[40];
  *(_QWORD *)&v32[56] = *(_QWORD *)&v38[56];
  LODWORD(v33) = v39;
  *((_QWORD *)&v33 + 1) = *((_QWORD *)&v39 + 1);
  v34 = __PAIR64__(v27[0], v40);
  v27[6] = *(_OWORD *)&v32[32];
  v27[7] = *(_OWORD *)&v32[48];
  v27[8] = v33;
  v28 = __PAIR64__(v27[0], v40);
  v27[2] = *(_OWORD *)&v30[16];
  v27[3] = v31;
  v27[4] = *(_OWORD *)v32;
  v27[5] = *(_OWORD *)&v32[16];
  v27[0] = v29;
  v27[1] = *(_OWORD *)v30;
  v21 = outlined retain of _TableRowInputs((uint64_t)&v29);
  a3(v21, v27);
  outlined release of _TableRowInputs((uint64_t)&v29);
  return outlined release of _TableRowInputs((uint64_t)&v29);
}

uint64_t TableRowTraitTransformerModifier.TransformTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v16 - v10;
  TableRow.MakeList.traits.getter(a1, &v16);
  v13 = v16;
  if (v16)
  {
    v17 = v16;
  }
  else
  {
    ViewTraitCollection.init()();
    v13 = v17;
  }
  type metadata accessor for TableRowTraitTransformerModifier(0, a2, a3, v12);
  v14 = *(void (**)(char *))AGGraphGetValue();
  v16 = v13;
  swift_retain();
  ViewTraitCollection.subscript.getter();
  v14(v11);
  swift_release();
  result = ViewTraitCollection.subscript.setter();
  *a4 = v17;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TableRowTraitTransformerModifier<A>.TransformTrait@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return TableRowTraitTransformerModifier.TransformTrait.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TableRowTraitTransformerModifier<A>.TransformTrait(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowTraitTransformerModifier<A>.TransformTrait, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance TableRowTraitTransformerModifier<A>(uint64_t a1, __int128 *a2, void (*a3)(uint64_t, _OWORD *), uint64_t a4, uint64_t a5)
{
  return static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TableRowTraitTransformerModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TableRowTraitTransformerModifier.TransformTrait, (uint64_t)&protocol conformance descriptor for TableRowTraitTransformerModifier<A>.TransformTrait, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t type metadata accessor for _TraitWritingTableRowModifier.AddTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TraitWritingTableRowModifier.AddTrait);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait;
  if (!lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TraitWritingTableRowModifier<A>.AddTrait, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<Never> and conformance TableRowContentModifierBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<Never> and conformance TableRowContentModifierBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<Never> and conformance TableRowContentModifierBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<Never>, MEMORY[0x1E0DEDCE8], (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TableRowContentModifierBodyAccessor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowContentModifierBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<Never> and conformance TableRowContentModifierBodyAccessor<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowContentModifierBodyAccessor<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    v6 = type metadata accessor for _GraphValue();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TraitWritingTableRowModifier<A>.AddTrait, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for TableRowContentModifierBodyAccessor(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for TableRowTraitTransformerModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableRowTraitTransformerModifier);
}

void base witness table accessor for _AttributeBody in _TraitWritingTableRowModifier<A>.AddTrait()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for TableRowTraitTransformerModifier.TransformTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableRowTraitTransformerModifier.TransformTrait);
}

void base witness table accessor for _AttributeBody in TableRowTraitTransformerModifier<A>.TransformTrait()
{
  JUMPOUT(0x18D75FFDCLL);
}

BOOL _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI10VisibilityO_s5NeverOytTg503_s7c114UI28CustomizationOptionsModifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA10E6OXEfU_AD0X6ValuesVTf1cn_n(unsigned __int8 a1, uint64_t a2)
{
  int v2;

  v2 = a1;
  if (a1 != 3)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarCustomizationVisibilityKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarCustomizationVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(a2 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return v2 == 3;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI27ToolbarCustomizationOptionsV_s5NeverOytTB503_s7c4UI28fG107Modifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA07ToolbarcD0VXEfU0_AD0X6ValuesVTf1cn_n(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 & 1;
  if ((a2 & 1) == 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarCustomizationOptionsKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarCustomizationOptionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(a3 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return v3;
}

uint64_t UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

double protocol witness for UIViewControllerRepresentable._identifiedViewTree(in:) in conformance MulticolumnSplitViewRepresentable<A, B, C>@<D0>(uint64_t a1@<X8>)
{
  return UIViewControllerRepresentable._identifiedViewTree(in:)(a1);
}

double UIViewControllerRepresentable._identifiedViewTree(in:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 160) = 2;
  return result;
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance MulticolumnSplitViewRepresentable<A, B, C>(_QWORD *a1@<X8>)
{
  static UIViewControllerRepresentable._layoutOptions(_:)(a1);
}

void static UIViewControllerRepresentable._layoutOptions(_:)(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MulticolumnSplitViewRepresentable<A, B, C>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MulticolumnSplitViewRepresentable<A, B, C>, a2);
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, v6, a3);
}

uint64_t specialized static UIViewControllerRepresentable._makeView(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _OWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 16);
  v35[0] = *(_OWORD *)a2;
  v35[1] = v6;
  v35[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v35);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v35);
  if (v29 == 1)
  {
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._countAndFlagsBits = 0x7765695674736F48;
    v7._object = (void *)0xE800000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000187BE3E70;
    String.append(_:)(v8);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(_QWORD *)&v29 = *(_QWORD *)(a2 + 48);
    DWORD2(v29) = *(_DWORD *)(a2 + 56);
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v10 = v29;
      v11 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v11;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v12;
      LODWORD(v27) = v10;
      _ViewInputs.pushIdentity(_:)();
      v13 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v13;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v14;
      v15 = _ViewInputs.animatedPosition()();
      v16 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v16;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v17;
      v18 = _ViewInputs.animatedSize()();
      v19 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v19;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v30 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v29 = __PAIR64__(v15, v10);
      DWORD2(v29) = v18;
      HIDWORD(v29) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v29) = 0;
      result = _ViewOutputs.subscript.setter();
    }
    *a3 = v25;
    v20 = v26;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter() & 1) != 0)
  {
    LODWORD(v25) = a1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v29, a2, (double *)&v29);
    v25 = *(_QWORD *)(a2 + 48);
    LODWORD(v26) = *(_DWORD *)(a2 + 56);
    v27 = *(_QWORD *)(a2 + 48);
    v28 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1E0C80A78](v21, v22);
    outlined retain of [Text.Modifier]((uint64_t)&v25);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    result = swift_bridgeObjectRelease();
    *a3 = v29;
    v20 = *((_QWORD *)&v29 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v23._object = (void *)0x8000000187BE3E30;
  v23._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x7765695674736F48;
  v24._object = (void *)0xE800000000000000;
  String.append(_:)(v24);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  __int128 v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _OWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 16);
  v35[0] = *(_OWORD *)a2;
  v35[1] = v6;
  v35[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v35);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v35);
  if (v29 == 1)
  {
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000187BE40E0;
    v7._countAndFlagsBits = 0xD00000000000003CLL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000187BE3E70;
    String.append(_:)(v8);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(_QWORD *)&v29 = *(_QWORD *)(a2 + 48);
    DWORD2(v29) = *(_DWORD *)(a2 + 56);
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v10 = v29;
      v11 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v11;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v12;
      LODWORD(v27) = v10;
      _ViewInputs.pushIdentity(_:)();
      v13 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v13;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v14;
      v15 = _ViewInputs.animatedPosition()();
      v16 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v16;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v17;
      v18 = _ViewInputs.animatedSize()();
      v19 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v19;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v30 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v29 = __PAIR64__(v15, v10);
      DWORD2(v29) = v18;
      HIDWORD(v29) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v29) = 0;
      result = _ViewOutputs.subscript.setter();
    }
    *a3 = v25;
    v20 = v26;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter() & 1) != 0)
  {
    LODWORD(v25) = a1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v29, a2, (double *)&v29);
    v25 = *(_QWORD *)(a2 + 48);
    LODWORD(v26) = *(_DWORD *)(a2 + 56);
    v27 = *(_QWORD *)(a2 + 48);
    v28 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1E0C80A78](v21, v22);
    outlined retain of [Text.Modifier]((uint64_t)&v25);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    result = swift_bridgeObjectRelease();
    *a3 = v29;
    v20 = *((_QWORD *)&v29 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v23._countAndFlagsBits = 0xD000000000000034;
  v23._object = (void *)0x8000000187BE3E30;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000187BE40E0;
  v24._countAndFlagsBits = 0xD00000000000003CLL;
  String.append(_:)(v24);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  __int128 v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _OWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 16);
  v35[0] = *(_OWORD *)a2;
  v35[1] = v6;
  v35[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v35);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v35);
  if (v29 == 1)
  {
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000187BE42C0;
    v7._countAndFlagsBits = 0xD00000000000003CLL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000187BE3E70;
    String.append(_:)(v8);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(_QWORD *)&v29 = *(_QWORD *)(a2 + 48);
    DWORD2(v29) = *(_DWORD *)(a2 + 56);
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v10 = v29;
      v11 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v11;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v12;
      LODWORD(v27) = v10;
      _ViewInputs.pushIdentity(_:)();
      v13 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v13;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v14;
      v15 = _ViewInputs.animatedPosition()();
      v16 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v16;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v17;
      v18 = _ViewInputs.animatedSize()();
      v19 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v19;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v30 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v29 = __PAIR64__(v15, v10);
      DWORD2(v29) = v18;
      HIDWORD(v29) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v29) = 0;
      result = _ViewOutputs.subscript.setter();
    }
    *a3 = v25;
    v20 = v26;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0
    || (type metadata accessor for UIKitAdaptableTabView(), (AGTypeID.isValueType.getter() & 1) != 0))
  {
    LODWORD(v25) = a1;
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(0);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v29, a2, (double *)&v29);
    v25 = *(_QWORD *)(a2 + 48);
    LODWORD(v26) = *(_DWORD *)(a2 + 56);
    v27 = *(_QWORD *)(a2 + 48);
    v28 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1E0C80A78](v21, v22);
    outlined retain of [Text.Modifier]((uint64_t)&v25);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    result = swift_bridgeObjectRelease();
    *a3 = v29;
    v20 = *((_QWORD *)&v29 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v23._countAndFlagsBits = 0xD000000000000034;
  v23._object = (void *)0x8000000187BE3E30;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000187BE42C0;
  v24._countAndFlagsBits = 0xD00000000000003CLL;
  String.append(_:)(v24);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  __int128 v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _OWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 16);
  v35[0] = *(_OWORD *)a2;
  v35[1] = v6;
  v35[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v35);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v35);
  if (v29 == 1)
  {
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000187BE4340;
    v7._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000187BE3E70;
    String.append(_:)(v8);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(_QWORD *)&v29 = *(_QWORD *)(a2 + 48);
    DWORD2(v29) = *(_DWORD *)(a2 + 56);
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v10 = v29;
      v11 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v11;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v12;
      LODWORD(v27) = v10;
      _ViewInputs.pushIdentity(_:)();
      v13 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v13;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v14;
      v15 = _ViewInputs.animatedPosition()();
      v16 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v16;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v17;
      v18 = _ViewInputs.animatedSize()();
      v19 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v19;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v30 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v29 = __PAIR64__(v15, v10);
      DWORD2(v29) = v18;
      HIDWORD(v29) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v29) = 0;
      result = _ViewOutputs.subscript.setter();
    }
    *a3 = v25;
    v20 = v26;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter() & 1) != 0)
  {
    LODWORD(v25) = a1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v29, a2, (double *)&v29);
    v25 = *(_QWORD *)(a2 + 48);
    LODWORD(v26) = *(_DWORD *)(a2 + 56);
    v27 = *(_QWORD *)(a2 + 48);
    v28 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1E0C80A78](v21, v22);
    outlined retain of [Text.Modifier]((uint64_t)&v25);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    result = swift_bridgeObjectRelease();
    *a3 = v29;
    v20 = *((_QWORD *)&v29 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v23._countAndFlagsBits = 0xD000000000000034;
  v23._object = (void *)0x8000000187BE3E30;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000187BE4340;
  v24._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v24);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  __int128 v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _OWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 16);
  v35[0] = *(_OWORD *)a2;
  v35[1] = v6;
  v35[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v35);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v35);
  if (v29 == 1)
  {
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000187BE4210;
    v7._countAndFlagsBits = 0xD000000000000043;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000187BE3E70;
    String.append(_:)(v8);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(_QWORD *)&v29 = *(_QWORD *)(a2 + 48);
    DWORD2(v29) = *(_DWORD *)(a2 + 56);
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v10 = v29;
      v11 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v11;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v12;
      LODWORD(v27) = v10;
      _ViewInputs.pushIdentity(_:)();
      v13 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v13;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v14;
      v15 = _ViewInputs.animatedPosition()();
      v16 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v16;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v17;
      v18 = _ViewInputs.animatedSize()();
      v19 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v19;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v30 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v29 = __PAIR64__(v15, v10);
      DWORD2(v29) = v18;
      HIDWORD(v29) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v29) = 0;
      result = _ViewOutputs.subscript.setter();
    }
    *a3 = v25;
    v20 = v26;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter() & 1) != 0)
  {
    LODWORD(v25) = a1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v29, a2, (double *)&v29);
    v25 = *(_QWORD *)(a2 + 48);
    LODWORD(v26) = *(_DWORD *)(a2 + 56);
    v27 = *(_QWORD *)(a2 + 48);
    v28 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1E0C80A78](v21, v22);
    outlined retain of [Text.Modifier]((uint64_t)&v25);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    result = swift_bridgeObjectRelease();
    *a3 = v29;
    v20 = *((_QWORD *)&v29 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v23._countAndFlagsBits = 0xD000000000000034;
  v23._object = (void *)0x8000000187BE3E30;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000187BE4210;
  v24._countAndFlagsBits = 0xD000000000000043;
  String.append(_:)(v24);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  __int128 v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _OWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 16);
  v35[0] = *(_OWORD *)a2;
  v35[1] = v6;
  v35[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v35);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v35);
  if (v29 == 1)
  {
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000187BE4050;
    v7._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000187BE3E70;
    String.append(_:)(v8);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(_QWORD *)&v29 = *(_QWORD *)(a2 + 48);
    DWORD2(v29) = *(_DWORD *)(a2 + 56);
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v10 = v29;
      v11 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v11;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v12;
      LODWORD(v27) = v10;
      _ViewInputs.pushIdentity(_:)();
      v13 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v13;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v14;
      v15 = _ViewInputs.animatedPosition()();
      v16 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v16;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v17;
      v18 = _ViewInputs.animatedSize()();
      v19 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v19;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v30 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v29 = __PAIR64__(v15, v10);
      DWORD2(v29) = v18;
      HIDWORD(v29) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v29) = 0;
      result = _ViewOutputs.subscript.setter();
    }
    *a3 = v25;
    v20 = v26;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter() & 1) != 0)
  {
    LODWORD(v25) = a1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v29, a2, (double *)&v29);
    v25 = *(_QWORD *)(a2 + 48);
    LODWORD(v26) = *(_DWORD *)(a2 + 56);
    v27 = *(_QWORD *)(a2 + 48);
    v28 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1E0C80A78](v21, v22);
    outlined retain of [Text.Modifier]((uint64_t)&v25);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    result = swift_bridgeObjectRelease();
    *a3 = v29;
    v20 = *((_QWORD *)&v29 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v23._countAndFlagsBits = 0xD000000000000034;
  v23._object = (void *)0x8000000187BE3E30;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000187BE4050;
  v24._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v24);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  __int128 v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _OWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 16);
  v35[0] = *(_OWORD *)a2;
  v35[1] = v6;
  v35[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v35);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v35);
  if (v29 == 1)
  {
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000187BE4170;
    v7._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000187BE3E70;
    String.append(_:)(v8);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(_QWORD *)&v29 = *(_QWORD *)(a2 + 48);
    DWORD2(v29) = *(_DWORD *)(a2 + 56);
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v10 = v29;
      v11 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v11;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v12;
      LODWORD(v27) = v10;
      _ViewInputs.pushIdentity(_:)();
      v13 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v13;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v14;
      v15 = _ViewInputs.animatedPosition()();
      v16 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v16;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v17;
      v18 = _ViewInputs.animatedSize()();
      v19 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v19;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v30 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v29 = __PAIR64__(v15, v10);
      DWORD2(v29) = v18;
      HIDWORD(v29) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v29) = 0;
      result = _ViewOutputs.subscript.setter();
    }
    *a3 = v25;
    v20 = v26;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter() & 1) != 0)
  {
    LODWORD(v25) = a1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v29, a2, (double *)&v29);
    v25 = *(_QWORD *)(a2 + 48);
    LODWORD(v26) = *(_DWORD *)(a2 + 56);
    v27 = *(_QWORD *)(a2 + 48);
    v28 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1E0C80A78](v21, v22);
    outlined retain of [Text.Modifier]((uint64_t)&v25);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    result = swift_bridgeObjectRelease();
    *a3 = v29;
    v20 = *((_QWORD *)&v29 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v23._countAndFlagsBits = 0xD000000000000034;
  v23._object = (void *)0x8000000187BE3E30;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000187BE4170;
  v24._countAndFlagsBits = 0xD00000000000002FLL;
  String.append(_:)(v24);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  __int128 v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _OWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 16);
  v35[0] = *(_OWORD *)a2;
  v35[1] = v6;
  v35[2] = *(_OWORD *)(a2 + 32);
  outlined retain of _GraphInputs((uint64_t)v35);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v35);
  if (v29 == 1)
  {
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(119);
    v7._object = (void *)0x8000000187BE3F70;
    v7._countAndFlagsBits = 0xD000000000000059;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000075;
    v8._object = (void *)0x8000000187BE3E70;
    String.append(_:)(v8);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(_QWORD *)&v29 = *(_QWORD *)(a2 + 48);
    DWORD2(v29) = *(_DWORD *)(a2 + 56);
    result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((result & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v10 = v29;
      v11 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v11;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v12;
      LODWORD(v27) = v10;
      _ViewInputs.pushIdentity(_:)();
      v13 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v13;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v14;
      v15 = _ViewInputs.animatedPosition()();
      v16 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v16;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v29 = *(_OWORD *)a2;
      v30 = v17;
      v18 = _ViewInputs.animatedSize()();
      v19 = *(_OWORD *)(a2 + 48);
      v31 = *(_OWORD *)(a2 + 32);
      v32 = v19;
      v33 = *(_OWORD *)(a2 + 64);
      v34 = *(_DWORD *)(a2 + 80);
      v30 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v29 = __PAIR64__(v15, v10);
      DWORD2(v29) = v18;
      HIDWORD(v29) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v29) = 0;
      result = _ViewOutputs.subscript.setter();
    }
    *a3 = v25;
    v20 = v26;
    goto LABEL_8;
  }
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0
    || (type metadata accessor for CustomizableURLDocumentViewControllerRepresentable(0),
        (AGTypeID.isValueType.getter() & 1) != 0))
  {
    LODWORD(v25) = a1;
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(0);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<CustomizableURLDocumentViewControllerRepresentable>, type metadata accessor for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v29, a2, (double *)&v29);
    v25 = *(_QWORD *)(a2 + 48);
    LODWORD(v26) = *(_DWORD *)(a2 + 56);
    v27 = *(_QWORD *)(a2 + 48);
    v28 = *(_DWORD *)(a2 + 56);
    MEMORY[0x1E0C80A78](v21, v22);
    outlined retain of [Text.Modifier]((uint64_t)&v25);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    result = swift_bridgeObjectRelease();
    *a3 = v29;
    v20 = *((_QWORD *)&v29 + 1);
LABEL_8:
    a3[1] = v20;
    return result;
  }
  _StringGuts.grow(_:)(54);
  v23._countAndFlagsBits = 0xD000000000000034;
  v23._object = (void *)0x8000000187BE3E30;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000187BE3F70;
  v24._countAndFlagsBits = 0xD000000000000059;
  String.append(_:)(v24);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MulticolumnSplitViewRepresentable<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MulticolumnSplitViewRepresentable<A, B, C>, a3);
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)();
}

uint64_t static UIViewControllerRepresentable._makeViewList(view:inputs:)()
{
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
}

void protocol witness for View.body.getter in conformance MulticolumnSplitViewRepresentable<A, B, C>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MulticolumnSplitViewRepresentable<A, B, C>, a1);
  specialized PrimitiveView.body.getter();
}

void UIViewControllerRepresentable.body.getter()
{
  specialized PrimitiveView.body.getter();
}

double specialized static PlatformViewRepresentable._makeView(view:inputs:)@<D0>(int a1@<W0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSlider>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSlider>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSlider>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UISlider>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISlider> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIViewController>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIViewController> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitStepper>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitStepper>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitStepper>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIStepper>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIStepper> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    type metadata accessor for TextViewAdaptor(0);
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>(0);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<VerticalTextView>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<VerticalTextView> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<PagingCollectionView>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<PagingCollectionView> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    type metadata accessor for UIKitTextViewAdaptor(0);
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(0);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<TextEditorTextView>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<TextEditorTextView> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    type metadata accessor for KitRepresentable(0);
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>(0);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISearchTextField> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIPasteControl>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIPasteControl> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIColorWell>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIColorWell> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    type metadata accessor for UIKitRichTextEditor(0);
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<TextEditorTextView>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<TextEditorTextView> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    *(_DWORD *)&v75[48] = 0;
    *(_DWORD *)&v75[52] = 0;
    v75[56] = 1;
    *(_QWORD *)&v75[64] = 0;
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIKitToolbar>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitToolbar> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    *(_DWORD *)&v75[48] = 0;
    *(_DWORD *)&v75[52] = 0;
    v75[56] = 1;
    *(_QWORD *)&v75[64] = 0;
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UINavigationController>, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UINavigationController> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    type metadata accessor for UIKitAdaptableTabView();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(0);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIKitTabBarController>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitTabBarController> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    type metadata accessor for UIKitSearchBarAdaptor(0);
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(0);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIKitSearchBar>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitSearchBar> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<SystemSegmentedControl.UISegmentedControl>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<SystemSegmentedControl.UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    *(_DWORD *)&v75[48] = 0;
    *(_DWORD *)&v75[52] = 0;
    v75[56] = 1;
    *(_QWORD *)&v75[64] = 0;
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIKBVisualEffectView>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKBVisualEffectView> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    *(_DWORD *)&v75[48] = 0;
    *(_DWORD *)&v75[52] = 0;
    v75[56] = 1;
    *(_QWORD *)&v75[64] = 0;
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIProgressView>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIProgressView> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    type metadata accessor for PlatformTextFieldAdaptor(0);
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(0);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UITextField>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UITextField> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    *(_DWORD *)&v75[48] = 0;
    *(_DWORD *)&v75[52] = 0;
    v75[56] = 1;
    *(_QWORD *)&v75[64] = 0;
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIActivityIndicatorView>, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIActivityIndicatorView> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UISplitViewController>, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISplitViewController> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UINavigationController>, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UINavigationController> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    type metadata accessor for UIKitDatePickerRepresentable(0);
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(0);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIDatePicker>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIDatePicker> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UISegmentedControl>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    type metadata accessor for UIKitCalendarViewRepresentable(0);
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(0);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UICalendarView>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UICalendarView> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    *(_DWORD *)&v75[48] = 0;
    *(_DWORD *)&v75[52] = 0;
    v75[56] = 1;
    *(_QWORD *)&v75[64] = 0;
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIViewController>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIViewController> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    *(_DWORD *)&v75[48] = 0;
    *(_DWORD *)&v75[52] = 0;
    v75[56] = 1;
    *(_QWORD *)&v75[64] = 0;
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<CustomizableDocumentViewController>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<CustomizableDocumentViewController> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    type metadata accessor for CustomizableURLDocumentViewControllerRepresentable(0);
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>(0);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    *(_DWORD *)&v75[48] = 0;
    *(_DWORD *)&v75[52] = 0;
    v75[56] = 1;
    *(_QWORD *)&v75[64] = 0;
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UIViewController>, &lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIViewController> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

{
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  __int128 v22;
  double result;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  char v47;
  unsigned int v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  double v54;
  _OWORD v55[2];
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  _BYTE v75[72];
  int v76;
  uint64_t v77;
  __int128 v78;
  _BYTE v79[68];
  __int128 v80;
  _BYTE v81[32];
  _BYTE v82[36];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v74 & 1) != 0)
  {
    _ViewOutputs.init()();
    *(_QWORD *)&v74 = *(_QWORD *)(a2 + 48);
    DWORD2(v74) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v12 = v74;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v13;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v14;
      LODWORD(v78) = v12;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v74) = a1;
      type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<Switch>>();
      v15 = _GraphValue.value.getter();
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v16;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v17 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v17;
      v18 = _ViewInputs.animatedPosition()();
      v19 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v19;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      v20 = *(_OWORD *)(a2 + 16);
      v74 = *(_OWORD *)a2;
      *(_OWORD *)v75 = v20;
      v21 = _ViewInputs.animatedSize()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v75[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v75[32] = v22;
      *(_OWORD *)&v75[48] = *(_OWORD *)(a2 + 64);
      *(_DWORD *)&v75[64] = *(_DWORD *)(a2 + 80);
      *(_OWORD *)v75 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)&v74 = __PAIR64__(v15, v12);
      *((_QWORD *)&v74 + 1) = __PAIR64__(v21, v18);
      *(_DWORD *)v75 = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>> and conformance PlatformArchivedDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t)&protocol conformance descriptor for PlatformArchivedDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    *(_QWORD *)a3 = v80;
    result = *((double *)&v80 + 1);
    a3[1] = *((double *)&v80 + 1);
  }
  else
  {
    v49 = a3;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v79[32] = v6;
    *(_OWORD *)&v79[48] = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v79[64] = *(_DWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    v78 = *(_OWORD *)a2;
    *(_OWORD *)v79 = v7;
    type metadata accessor for PreferenceBridge();
    outlined retain of _ViewInputs(a2);
    v51 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    v50 = swift_allocObject();
    static DynamicPropertyCache.fields(of:)();
    v47 = v75[0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
    type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<Switch>>();
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    _ViewInputs.transaction.getter();
    _ViewInputs.viewPhase.getter();
    v46 = _ViewInputs.position.getter();
    _ViewInputs.size.getter();
    v45 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_DWORD *)&v75[20] = *(_DWORD *)&v79[20];
    _ViewInputs.scrapeableParentID.getter();
    type metadata accessor for PropertyList.Tracker();
    swift_retain();
    swift_retain();
    *(_DWORD *)v75 = v46;
    *(_DWORD *)&v75[8] = v45;
    *(_DWORD *)&v75[12] = v78;
    *(_DWORD *)&v75[16] = 0;
    *(_QWORD *)&v75[24] = v51;
    *(_QWORD *)&v75[32] = v50;
    memset(&v75[48], 0, 24);
    v76 = 0;
    v77 = PropertyList.Tracker.__allocating_init()();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>(0);
    type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>> and conformance PlatformViewChild<A>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformViewChild<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t)&protocol conformance descriptor for PlatformViewChild<A>);
    v8 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0uLL;
    LODWORD(v66) = a1;
    v75[0] = v47;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    v9 = v8;
    outlined consume of DynamicPropertyCache.Fields.Layout();
    _GraphValue.init(_:)();
    v52 = v74;
    v10 = static AGAttributeFlags.transactional.getter();
    v11 = static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    if (v10 || v11)
      v24 = DWORD2(v78);
    else
      v24 = DWORD2(v78);
    *(_QWORD *)&v74 = v78;
    DWORD2(v74) = v24;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_DWORD *)&v75[8] = *(_DWORD *)&v79[8];
    *(_DWORD *)&v75[12] = *(_DWORD *)&v79[12];
    *(_QWORD *)&v75[16] = *(_QWORD *)&v79[16];
    *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
    *(_QWORD *)&v75[32] = *(_QWORD *)&v79[32];
    *(_QWORD *)&v75[40] = *(_QWORD *)&v79[40];
    *(_DWORD *)&v75[48] = *(_DWORD *)&v79[48];
    *(_DWORD *)&v75[52] = *(_DWORD *)&v79[52];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
      static AGAttributeFlags.scrapeable.getter();
    AGGraphSetFlags();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    v48 = v9;
    _ViewInputs.time.getter();
    v66 = v78;
    v67 = v24;
    v68 = *(_QWORD *)v79;
    v69 = *(_OWORD *)&v79[8];
    v70 = *(_OWORD *)&v79[24];
    v71 = *(_OWORD *)&v79[40];
    v72 = *(_QWORD *)&v79[56];
    v73 = *(_DWORD *)&v79[64];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
    *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
    LODWORD(v80) = v52;
    *(_QWORD *)v75 = *(_QWORD *)v79;
    *(_OWORD *)&v75[24] = *(_OWORD *)&v79[24];
    *(_OWORD *)&v75[40] = *(_OWORD *)&v79[40];
    *(_QWORD *)&v75[56] = *(_QWORD *)&v79[56];
    *(_DWORD *)&v75[64] = *(_DWORD *)&v79[64];
    static View.makeDebuggableView(view:inputs:)();
    *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
    DWORD2(v74) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      v25 = Attribute.init<A>(body:value:flags:update:)();
      v26 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18D75C118]();
      *(_QWORD *)&v74 = __PAIR64__(v25, v26);
      swift_weakInit();
      swift_release();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>> and conformance RemoteSheetContainerVCWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t)&protocol conformance descriptor for RemoteSheetContainerVCWriter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      v27 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v74, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>);
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
      *(_QWORD *)&v74 = *(_QWORD *)&v79[32];
      DWORD2(v74) = *(_DWORD *)&v79[40];
      MEMORY[0x1E0C80A78](v27, v30);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      v31 = swift_bridgeObjectRelease();
      *(_QWORD *)&v74 = v28;
      DWORD2(v74) = v29;
      MEMORY[0x1E0C80A78](v31, v32);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)&v79[32];
      v29 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v74 = v28;
    DWORD2(v74) = v29;
    v33 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    v35 = v29;
    v36 = v28;
    if ((v33 & 1) != 0)
    {
      *(_QWORD *)&v74 = v78;
      DWORD2(v74) = DWORD2(v78);
      *(_OWORD *)&v75[8] = *(_OWORD *)&v79[8];
      *(_QWORD *)v75 = *(_QWORD *)v79;
      *(_QWORD *)&v75[24] = *(_QWORD *)&v79[24];
      *(_QWORD *)&v75[32] = v28;
      *(_DWORD *)&v75[40] = v29;
      *(_OWORD *)&v75[44] = *(_OWORD *)&v79[44];
      *(_QWORD *)&v75[60] = *(_QWORD *)&v79[60];
      LODWORD(v80) = v52;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = _GraphValue.value.getter();
      specialized ViewResponderFilter.init(inputs:view:)(&v74, v37, (uint64_t (*)(uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput<UISwitch>, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISwitch> and conformance RepresentablePreferredFocusableViewInput<A>, (uint64_t)v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v80 = v55[0];
      *(_OWORD *)v81 = v55[1];
      *(_QWORD *)&v81[16] = v56;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>>(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>> and conformance ViewResponderFilter<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t)&protocol conformance descriptor for ViewResponderFilter<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
      v33 = outlined release of ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>((uint64_t)v55);
      v36 = *(_QWORD *)&v79[32];
      v35 = *(_DWORD *)&v79[40];
    }
    *(_QWORD *)&v80 = v28;
    DWORD2(v80) = v29;
    MEMORY[0x1E0C80A78](v33, v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v38 = swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = v36;
    DWORD2(v80) = v35;
    MEMORY[0x1E0C80A78](v38, v39);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v81[16] = *(_OWORD *)&v79[16];
    *(_OWORD *)v82 = *(_OWORD *)&v79[32];
    *(_OWORD *)&v82[16] = *(_OWORD *)&v79[48];
    *(_DWORD *)&v82[32] = *(_DWORD *)&v79[64];
    v80 = v78;
    *(_OWORD *)v81 = *(_OWORD *)v79;
    specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v80, v48, (uint64_t)&v53);
    PreferenceKeys.remove<A>(_:)();
    v57 = v53;
    v58 = v54;
    v40 = _ViewOutputs.subscript.getter();
    v41 = *(_QWORD *)&v79[32];
    v42 = *(_DWORD *)&v79[40];
    v57 = *(_QWORD *)&v79[32];
    LODWORD(v58) = *(_DWORD *)&v79[40];
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LOBYTE(v57) = 1;
      _ViewOutputs.subscript.setter();
    }
    v57 = v80;
    LODWORD(v58) = DWORD2(v80);
    v59 = *(_QWORD *)v81;
    v60 = *(_OWORD *)&v81[8];
    v61 = *(_QWORD *)&v81[24];
    v62 = v41;
    v63 = v42;
    v64 = *(_OWORD *)&v82[12];
    v65 = *(_QWORD *)&v82[28];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v57 = v41;
    LODWORD(v58) = v42;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v40 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      v57 = v53;
      v58 = v54;
      v43 = _ViewOutputs.subscript.getter();
      v44 = *MEMORY[0x1E0CFED28];
      if ((v43 & 0x100000000) == 0)
        v44 = v43;
      v57 = __PAIR64__(v44, v40);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v57) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)v49 = v53;
    result = v54;
    v49[1] = v54;
  }
  return result;
}

_QWORD *specialized WithCommandFlag.SetFlag.value.getter(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[2];

  v1 = HIDWORD(a1);
  v2 = type metadata accessor for CommandsList.Item(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (_QWORD *)((char *)v15 - v9);
  if (*MEMORY[0x1E0CFED28] == (_DWORD)v1)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v11 = *(_QWORD **)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for WithCommandFlag<EmptyCommands>, (uint64_t)&type metadata for EmptyCommands, (uint64_t)&protocol witness table for EmptyCommands, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WithCommandFlag);
  *v10 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for CommandsList.Item.Value(0);
  swift_storeEnumTagMultiPayload();
  DisplayList.Version.init(forUpdate:)();
  *(_QWORD *)((char *)v10 + *(int *)(v2 + 20)) = v15[1];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, (uint64_t)v6, type metadata accessor for CommandsList.Item);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v11 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
  v13 = v11[2];
  v12 = v11[3];
  if (v13 >= v12 >> 1)
    v11 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v11);
  v11[2] = v13 + 1;
  outlined init with take of TableCellFormula((uint64_t)v6, (uint64_t)v11+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v13, type metadata accessor for CommandsList.Item);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for CommandsList.Item);
  return v11;
}

